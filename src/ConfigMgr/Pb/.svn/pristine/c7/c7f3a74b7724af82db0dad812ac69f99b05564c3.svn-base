// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActMergeServer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActMergeServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActMergeServerGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActMergeServerGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActMergeServerGetCompensationRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActMergeServerGetCompensationRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActMergeServerGetCompensationRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActMergeServerGetCompensationRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActMergeServerGetDayRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActMergeServerGetDayRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActMergeServerRMBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActMergeServerRMBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActMergeServerNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActMergeServerNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActMergeServer_2eproto() {
  protobuf_AddDesc_net_2fActMergeServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActMergeServer.proto");
  GOOGLE_CHECK(file != NULL);
  TActMergeServerGetInfoRsp_descriptor_ = file->message_type(0);
  static const int TActMergeServerGetInfoRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMergeServerGetInfoRsp, accudaynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMergeServerGetInfoRsp, arrrewardday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMergeServerGetInfoRsp, arrinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMergeServerGetInfoRsp, compensationrewardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMergeServerGetInfoRsp, mergeservertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMergeServerGetInfoRsp, rewardarr_),
  };
  TActMergeServerGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActMergeServerGetInfoRsp_descriptor_,
      TActMergeServerGetInfoRsp::default_instance_,
      TActMergeServerGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMergeServerGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMergeServerGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActMergeServerGetInfoRsp));
  TActMergeServerGetCompensationRewardReq_descriptor_ = file->message_type(1);
  static const int TActMergeServerGetCompensationRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMergeServerGetCompensationRewardReq, rewardid_),
  };
  TActMergeServerGetCompensationRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActMergeServerGetCompensationRewardReq_descriptor_,
      TActMergeServerGetCompensationRewardReq::default_instance_,
      TActMergeServerGetCompensationRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMergeServerGetCompensationRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMergeServerGetCompensationRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActMergeServerGetCompensationRewardReq));
  TActMergeServerGetCompensationRewardRsp_descriptor_ = file->message_type(2);
  static const int TActMergeServerGetCompensationRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMergeServerGetCompensationRewardRsp, rewardarr_),
  };
  TActMergeServerGetCompensationRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActMergeServerGetCompensationRewardRsp_descriptor_,
      TActMergeServerGetCompensationRewardRsp::default_instance_,
      TActMergeServerGetCompensationRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMergeServerGetCompensationRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMergeServerGetCompensationRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActMergeServerGetCompensationRewardRsp));
  TActMergeServerGetDayRewardReq_descriptor_ = file->message_type(3);
  static const int TActMergeServerGetDayRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMergeServerGetDayRewardReq, day_),
  };
  TActMergeServerGetDayRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActMergeServerGetDayRewardReq_descriptor_,
      TActMergeServerGetDayRewardReq::default_instance_,
      TActMergeServerGetDayRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMergeServerGetDayRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMergeServerGetDayRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActMergeServerGetDayRewardReq));
  TActMergeServerRMBInfo_descriptor_ = file->message_type(4);
  static const int TActMergeServerRMBInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMergeServerRMBInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMergeServerRMBInfo, buynum_),
  };
  TActMergeServerRMBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActMergeServerRMBInfo_descriptor_,
      TActMergeServerRMBInfo::default_instance_,
      TActMergeServerRMBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMergeServerRMBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMergeServerRMBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActMergeServerRMBInfo));
  TActMergeServerNotify_descriptor_ = file->message_type(5);
  static const int TActMergeServerNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMergeServerNotify, arrinfo_),
  };
  TActMergeServerNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActMergeServerNotify_descriptor_,
      TActMergeServerNotify::default_instance_,
      TActMergeServerNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMergeServerNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActMergeServerNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActMergeServerNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActMergeServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActMergeServerGetInfoRsp_descriptor_, &TActMergeServerGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActMergeServerGetCompensationRewardReq_descriptor_, &TActMergeServerGetCompensationRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActMergeServerGetCompensationRewardRsp_descriptor_, &TActMergeServerGetCompensationRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActMergeServerGetDayRewardReq_descriptor_, &TActMergeServerGetDayRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActMergeServerRMBInfo_descriptor_, &TActMergeServerRMBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActMergeServerNotify_descriptor_, &TActMergeServerNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActMergeServer_2eproto() {
  delete TActMergeServerGetInfoRsp::default_instance_;
  delete TActMergeServerGetInfoRsp_reflection_;
  delete TActMergeServerGetCompensationRewardReq::default_instance_;
  delete TActMergeServerGetCompensationRewardReq_reflection_;
  delete TActMergeServerGetCompensationRewardRsp::default_instance_;
  delete TActMergeServerGetCompensationRewardRsp_reflection_;
  delete TActMergeServerGetDayRewardReq::default_instance_;
  delete TActMergeServerGetDayRewardReq_reflection_;
  delete TActMergeServerRMBInfo::default_instance_;
  delete TActMergeServerRMBInfo_reflection_;
  delete TActMergeServerNotify::default_instance_;
  delete TActMergeServerNotify_reflection_;
}

void protobuf_AddDesc_net_2fActMergeServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030net/ActMergeServer.proto\022\002pb\032\026net/Comm"
    "onReward.proto\"\321\001\n\031TActMergeServerGetInf"
    "oRsp\022\022\n\nAccuDayNum\030\001 \001(\r\022\024\n\014arrRewardDay"
    "\030\002 \003(\r\022+\n\007ArrInfo\030\003 \003(\0132\032.pb.TActMergeSe"
    "rverRMBInfo\022\036\n\026CompensationRewardTime\030\004 "
    "\001(\004\022\027\n\017MergeServerTime\030\005 \001(\004\022$\n\tRewardAr"
    "r\030\006 \003(\0132\021.pb.TCommonReward\";\n\'TActMergeS"
    "erverGetCompensationRewardReq\022\020\n\010RewardI"
    "d\030\001 \001(\r\"O\n\'TActMergeServerGetCompensatio"
    "nRewardRsp\022$\n\tRewardArr\030\001 \003(\0132\021.pb.TComm"
    "onReward\"-\n\036TActMergeServerGetDayRewardR"
    "eq\022\013\n\003Day\030\001 \001(\r\"4\n\026TActMergeServerRMBInf"
    "o\022\n\n\002Id\030\001 \001(\r\022\016\n\006BuyNum\030\002 \001(\r\"D\n\025TActMer"
    "geServerNotify\022+\n\007ArrInfo\030\001 \003(\0132\032.pb.TAc"
    "tMergeServerRMBInfo", 579);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActMergeServer.proto", &protobuf_RegisterTypes);
  TActMergeServerGetInfoRsp::default_instance_ = new TActMergeServerGetInfoRsp();
  TActMergeServerGetCompensationRewardReq::default_instance_ = new TActMergeServerGetCompensationRewardReq();
  TActMergeServerGetCompensationRewardRsp::default_instance_ = new TActMergeServerGetCompensationRewardRsp();
  TActMergeServerGetDayRewardReq::default_instance_ = new TActMergeServerGetDayRewardReq();
  TActMergeServerRMBInfo::default_instance_ = new TActMergeServerRMBInfo();
  TActMergeServerNotify::default_instance_ = new TActMergeServerNotify();
  TActMergeServerGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TActMergeServerGetCompensationRewardReq::default_instance_->InitAsDefaultInstance();
  TActMergeServerGetCompensationRewardRsp::default_instance_->InitAsDefaultInstance();
  TActMergeServerGetDayRewardReq::default_instance_->InitAsDefaultInstance();
  TActMergeServerRMBInfo::default_instance_->InitAsDefaultInstance();
  TActMergeServerNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActMergeServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActMergeServer_2eproto {
  StaticDescriptorInitializer_net_2fActMergeServer_2eproto() {
    protobuf_AddDesc_net_2fActMergeServer_2eproto();
  }
} static_descriptor_initializer_net_2fActMergeServer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TActMergeServerGetInfoRsp::kAccuDayNumFieldNumber;
const int TActMergeServerGetInfoRsp::kArrRewardDayFieldNumber;
const int TActMergeServerGetInfoRsp::kArrInfoFieldNumber;
const int TActMergeServerGetInfoRsp::kCompensationRewardTimeFieldNumber;
const int TActMergeServerGetInfoRsp::kMergeServerTimeFieldNumber;
const int TActMergeServerGetInfoRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TActMergeServerGetInfoRsp::TActMergeServerGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActMergeServerGetInfoRsp)
}

void TActMergeServerGetInfoRsp::InitAsDefaultInstance() {
}

TActMergeServerGetInfoRsp::TActMergeServerGetInfoRsp(const TActMergeServerGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActMergeServerGetInfoRsp)
}

void TActMergeServerGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  accudaynum_ = 0u;
  compensationrewardtime_ = GOOGLE_ULONGLONG(0);
  mergeservertime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActMergeServerGetInfoRsp::~TActMergeServerGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActMergeServerGetInfoRsp)
  SharedDtor();
}

void TActMergeServerGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActMergeServerGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActMergeServerGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActMergeServerGetInfoRsp_descriptor_;
}

const TActMergeServerGetInfoRsp& TActMergeServerGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActMergeServer_2eproto();
  return *default_instance_;
}

TActMergeServerGetInfoRsp* TActMergeServerGetInfoRsp::default_instance_ = NULL;

TActMergeServerGetInfoRsp* TActMergeServerGetInfoRsp::New() const {
  return new TActMergeServerGetInfoRsp;
}

void TActMergeServerGetInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActMergeServerGetInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 25) {
    ZR_(compensationrewardtime_, mergeservertime_);
    accudaynum_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrrewardday_.Clear();
  arrinfo_.Clear();
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActMergeServerGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActMergeServerGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AccuDayNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accudaynum_)));
          set_has_accudaynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_arrRewardDay;
        break;
      }

      // repeated uint32 arrRewardDay = 2;
      case 2: {
        if (tag == 16) {
         parse_arrRewardDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_arrrewardday())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_arrrewardday())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_arrRewardDay;
        if (input->ExpectTag(26)) goto parse_ArrInfo;
        break;
      }

      // repeated .pb.TActMergeServerRMBInfo ArrInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_ArrInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrInfo;
        if (input->ExpectTag(32)) goto parse_CompensationRewardTime;
        break;
      }

      // optional uint64 CompensationRewardTime = 4;
      case 4: {
        if (tag == 32) {
         parse_CompensationRewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &compensationrewardtime_)));
          set_has_compensationrewardtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_MergeServerTime;
        break;
      }

      // optional uint64 MergeServerTime = 5;
      case 5: {
        if (tag == 40) {
         parse_MergeServerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mergeservertime_)));
          set_has_mergeservertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 6;
      case 6: {
        if (tag == 50) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActMergeServerGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActMergeServerGetInfoRsp)
  return false;
#undef DO_
}

void TActMergeServerGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActMergeServerGetInfoRsp)
  // optional uint32 AccuDayNum = 1;
  if (has_accudaynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accudaynum(), output);
  }

  // repeated uint32 arrRewardDay = 2;
  for (int i = 0; i < this->arrrewardday_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->arrrewardday(i), output);
  }

  // repeated .pb.TActMergeServerRMBInfo ArrInfo = 3;
  for (int i = 0; i < this->arrinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arrinfo(i), output);
  }

  // optional uint64 CompensationRewardTime = 4;
  if (has_compensationrewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->compensationrewardtime(), output);
  }

  // optional uint64 MergeServerTime = 5;
  if (has_mergeservertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->mergeservertime(), output);
  }

  // repeated .pb.TCommonReward RewardArr = 6;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActMergeServerGetInfoRsp)
}

::google::protobuf::uint8* TActMergeServerGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActMergeServerGetInfoRsp)
  // optional uint32 AccuDayNum = 1;
  if (has_accudaynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accudaynum(), target);
  }

  // repeated uint32 arrRewardDay = 2;
  for (int i = 0; i < this->arrrewardday_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->arrrewardday(i), target);
  }

  // repeated .pb.TActMergeServerRMBInfo ArrInfo = 3;
  for (int i = 0; i < this->arrinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arrinfo(i), target);
  }

  // optional uint64 CompensationRewardTime = 4;
  if (has_compensationrewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->compensationrewardtime(), target);
  }

  // optional uint64 MergeServerTime = 5;
  if (has_mergeservertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->mergeservertime(), target);
  }

  // repeated .pb.TCommonReward RewardArr = 6;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActMergeServerGetInfoRsp)
  return target;
}

int TActMergeServerGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AccuDayNum = 1;
    if (has_accudaynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accudaynum());
    }

    // optional uint64 CompensationRewardTime = 4;
    if (has_compensationrewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->compensationrewardtime());
    }

    // optional uint64 MergeServerTime = 5;
    if (has_mergeservertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mergeservertime());
    }

  }
  // repeated uint32 arrRewardDay = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->arrrewardday_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->arrrewardday(i));
    }
    total_size += 1 * this->arrrewardday_size() + data_size;
  }

  // repeated .pb.TActMergeServerRMBInfo ArrInfo = 3;
  total_size += 1 * this->arrinfo_size();
  for (int i = 0; i < this->arrinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrinfo(i));
  }

  // repeated .pb.TCommonReward RewardArr = 6;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActMergeServerGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActMergeServerGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActMergeServerGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActMergeServerGetInfoRsp::MergeFrom(const TActMergeServerGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrewardday_.MergeFrom(from.arrrewardday_);
  arrinfo_.MergeFrom(from.arrinfo_);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accudaynum()) {
      set_accudaynum(from.accudaynum());
    }
    if (from.has_compensationrewardtime()) {
      set_compensationrewardtime(from.compensationrewardtime());
    }
    if (from.has_mergeservertime()) {
      set_mergeservertime(from.mergeservertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActMergeServerGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActMergeServerGetInfoRsp::CopyFrom(const TActMergeServerGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActMergeServerGetInfoRsp::IsInitialized() const {

  return true;
}

void TActMergeServerGetInfoRsp::Swap(TActMergeServerGetInfoRsp* other) {
  if (other != this) {
    std::swap(accudaynum_, other->accudaynum_);
    arrrewardday_.Swap(&other->arrrewardday_);
    arrinfo_.Swap(&other->arrinfo_);
    std::swap(compensationrewardtime_, other->compensationrewardtime_);
    std::swap(mergeservertime_, other->mergeservertime_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActMergeServerGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActMergeServerGetInfoRsp_descriptor_;
  metadata.reflection = TActMergeServerGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActMergeServerGetCompensationRewardReq::kRewardIdFieldNumber;
#endif  // !_MSC_VER

TActMergeServerGetCompensationRewardReq::TActMergeServerGetCompensationRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActMergeServerGetCompensationRewardReq)
}

void TActMergeServerGetCompensationRewardReq::InitAsDefaultInstance() {
}

TActMergeServerGetCompensationRewardReq::TActMergeServerGetCompensationRewardReq(const TActMergeServerGetCompensationRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActMergeServerGetCompensationRewardReq)
}

void TActMergeServerGetCompensationRewardReq::SharedCtor() {
  _cached_size_ = 0;
  rewardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActMergeServerGetCompensationRewardReq::~TActMergeServerGetCompensationRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TActMergeServerGetCompensationRewardReq)
  SharedDtor();
}

void TActMergeServerGetCompensationRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActMergeServerGetCompensationRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActMergeServerGetCompensationRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActMergeServerGetCompensationRewardReq_descriptor_;
}

const TActMergeServerGetCompensationRewardReq& TActMergeServerGetCompensationRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActMergeServer_2eproto();
  return *default_instance_;
}

TActMergeServerGetCompensationRewardReq* TActMergeServerGetCompensationRewardReq::default_instance_ = NULL;

TActMergeServerGetCompensationRewardReq* TActMergeServerGetCompensationRewardReq::New() const {
  return new TActMergeServerGetCompensationRewardReq;
}

void TActMergeServerGetCompensationRewardReq::Clear() {
  rewardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActMergeServerGetCompensationRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActMergeServerGetCompensationRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RewardId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActMergeServerGetCompensationRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActMergeServerGetCompensationRewardReq)
  return false;
#undef DO_
}

void TActMergeServerGetCompensationRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActMergeServerGetCompensationRewardReq)
  // optional uint32 RewardId = 1;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActMergeServerGetCompensationRewardReq)
}

::google::protobuf::uint8* TActMergeServerGetCompensationRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActMergeServerGetCompensationRewardReq)
  // optional uint32 RewardId = 1;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActMergeServerGetCompensationRewardReq)
  return target;
}

int TActMergeServerGetCompensationRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RewardId = 1;
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActMergeServerGetCompensationRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActMergeServerGetCompensationRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActMergeServerGetCompensationRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActMergeServerGetCompensationRewardReq::MergeFrom(const TActMergeServerGetCompensationRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActMergeServerGetCompensationRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActMergeServerGetCompensationRewardReq::CopyFrom(const TActMergeServerGetCompensationRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActMergeServerGetCompensationRewardReq::IsInitialized() const {

  return true;
}

void TActMergeServerGetCompensationRewardReq::Swap(TActMergeServerGetCompensationRewardReq* other) {
  if (other != this) {
    std::swap(rewardid_, other->rewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActMergeServerGetCompensationRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActMergeServerGetCompensationRewardReq_descriptor_;
  metadata.reflection = TActMergeServerGetCompensationRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActMergeServerGetCompensationRewardRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TActMergeServerGetCompensationRewardRsp::TActMergeServerGetCompensationRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActMergeServerGetCompensationRewardRsp)
}

void TActMergeServerGetCompensationRewardRsp::InitAsDefaultInstance() {
}

TActMergeServerGetCompensationRewardRsp::TActMergeServerGetCompensationRewardRsp(const TActMergeServerGetCompensationRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActMergeServerGetCompensationRewardRsp)
}

void TActMergeServerGetCompensationRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActMergeServerGetCompensationRewardRsp::~TActMergeServerGetCompensationRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TActMergeServerGetCompensationRewardRsp)
  SharedDtor();
}

void TActMergeServerGetCompensationRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActMergeServerGetCompensationRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActMergeServerGetCompensationRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActMergeServerGetCompensationRewardRsp_descriptor_;
}

const TActMergeServerGetCompensationRewardRsp& TActMergeServerGetCompensationRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActMergeServer_2eproto();
  return *default_instance_;
}

TActMergeServerGetCompensationRewardRsp* TActMergeServerGetCompensationRewardRsp::default_instance_ = NULL;

TActMergeServerGetCompensationRewardRsp* TActMergeServerGetCompensationRewardRsp::New() const {
  return new TActMergeServerGetCompensationRewardRsp;
}

void TActMergeServerGetCompensationRewardRsp::Clear() {
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActMergeServerGetCompensationRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActMergeServerGetCompensationRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActMergeServerGetCompensationRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActMergeServerGetCompensationRewardRsp)
  return false;
#undef DO_
}

void TActMergeServerGetCompensationRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActMergeServerGetCompensationRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActMergeServerGetCompensationRewardRsp)
}

::google::protobuf::uint8* TActMergeServerGetCompensationRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActMergeServerGetCompensationRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActMergeServerGetCompensationRewardRsp)
  return target;
}

int TActMergeServerGetCompensationRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActMergeServerGetCompensationRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActMergeServerGetCompensationRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActMergeServerGetCompensationRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActMergeServerGetCompensationRewardRsp::MergeFrom(const TActMergeServerGetCompensationRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActMergeServerGetCompensationRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActMergeServerGetCompensationRewardRsp::CopyFrom(const TActMergeServerGetCompensationRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActMergeServerGetCompensationRewardRsp::IsInitialized() const {

  return true;
}

void TActMergeServerGetCompensationRewardRsp::Swap(TActMergeServerGetCompensationRewardRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActMergeServerGetCompensationRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActMergeServerGetCompensationRewardRsp_descriptor_;
  metadata.reflection = TActMergeServerGetCompensationRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActMergeServerGetDayRewardReq::kDayFieldNumber;
#endif  // !_MSC_VER

TActMergeServerGetDayRewardReq::TActMergeServerGetDayRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActMergeServerGetDayRewardReq)
}

void TActMergeServerGetDayRewardReq::InitAsDefaultInstance() {
}

TActMergeServerGetDayRewardReq::TActMergeServerGetDayRewardReq(const TActMergeServerGetDayRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActMergeServerGetDayRewardReq)
}

void TActMergeServerGetDayRewardReq::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActMergeServerGetDayRewardReq::~TActMergeServerGetDayRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TActMergeServerGetDayRewardReq)
  SharedDtor();
}

void TActMergeServerGetDayRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActMergeServerGetDayRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActMergeServerGetDayRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActMergeServerGetDayRewardReq_descriptor_;
}

const TActMergeServerGetDayRewardReq& TActMergeServerGetDayRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActMergeServer_2eproto();
  return *default_instance_;
}

TActMergeServerGetDayRewardReq* TActMergeServerGetDayRewardReq::default_instance_ = NULL;

TActMergeServerGetDayRewardReq* TActMergeServerGetDayRewardReq::New() const {
  return new TActMergeServerGetDayRewardReq;
}

void TActMergeServerGetDayRewardReq::Clear() {
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActMergeServerGetDayRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActMergeServerGetDayRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Day = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActMergeServerGetDayRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActMergeServerGetDayRewardReq)
  return false;
#undef DO_
}

void TActMergeServerGetDayRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActMergeServerGetDayRewardReq)
  // optional uint32 Day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActMergeServerGetDayRewardReq)
}

::google::protobuf::uint8* TActMergeServerGetDayRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActMergeServerGetDayRewardReq)
  // optional uint32 Day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActMergeServerGetDayRewardReq)
  return target;
}

int TActMergeServerGetDayRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActMergeServerGetDayRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActMergeServerGetDayRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActMergeServerGetDayRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActMergeServerGetDayRewardReq::MergeFrom(const TActMergeServerGetDayRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActMergeServerGetDayRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActMergeServerGetDayRewardReq::CopyFrom(const TActMergeServerGetDayRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActMergeServerGetDayRewardReq::IsInitialized() const {

  return true;
}

void TActMergeServerGetDayRewardReq::Swap(TActMergeServerGetDayRewardReq* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActMergeServerGetDayRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActMergeServerGetDayRewardReq_descriptor_;
  metadata.reflection = TActMergeServerGetDayRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActMergeServerRMBInfo::kIdFieldNumber;
const int TActMergeServerRMBInfo::kBuyNumFieldNumber;
#endif  // !_MSC_VER

TActMergeServerRMBInfo::TActMergeServerRMBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActMergeServerRMBInfo)
}

void TActMergeServerRMBInfo::InitAsDefaultInstance() {
}

TActMergeServerRMBInfo::TActMergeServerRMBInfo(const TActMergeServerRMBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActMergeServerRMBInfo)
}

void TActMergeServerRMBInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActMergeServerRMBInfo::~TActMergeServerRMBInfo() {
  // @@protoc_insertion_point(destructor:pb.TActMergeServerRMBInfo)
  SharedDtor();
}

void TActMergeServerRMBInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActMergeServerRMBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActMergeServerRMBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActMergeServerRMBInfo_descriptor_;
}

const TActMergeServerRMBInfo& TActMergeServerRMBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActMergeServer_2eproto();
  return *default_instance_;
}

TActMergeServerRMBInfo* TActMergeServerRMBInfo::default_instance_ = NULL;

TActMergeServerRMBInfo* TActMergeServerRMBInfo::New() const {
  return new TActMergeServerRMBInfo;
}

void TActMergeServerRMBInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActMergeServerRMBInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, buynum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActMergeServerRMBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActMergeServerRMBInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyNum;
        break;
      }

      // optional uint32 BuyNum = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActMergeServerRMBInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActMergeServerRMBInfo)
  return false;
#undef DO_
}

void TActMergeServerRMBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActMergeServerRMBInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActMergeServerRMBInfo)
}

::google::protobuf::uint8* TActMergeServerRMBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActMergeServerRMBInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActMergeServerRMBInfo)
  return target;
}

int TActMergeServerRMBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 BuyNum = 2;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActMergeServerRMBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActMergeServerRMBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActMergeServerRMBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActMergeServerRMBInfo::MergeFrom(const TActMergeServerRMBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActMergeServerRMBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActMergeServerRMBInfo::CopyFrom(const TActMergeServerRMBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActMergeServerRMBInfo::IsInitialized() const {

  return true;
}

void TActMergeServerRMBInfo::Swap(TActMergeServerRMBInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActMergeServerRMBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActMergeServerRMBInfo_descriptor_;
  metadata.reflection = TActMergeServerRMBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActMergeServerNotify::kArrInfoFieldNumber;
#endif  // !_MSC_VER

TActMergeServerNotify::TActMergeServerNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActMergeServerNotify)
}

void TActMergeServerNotify::InitAsDefaultInstance() {
}

TActMergeServerNotify::TActMergeServerNotify(const TActMergeServerNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActMergeServerNotify)
}

void TActMergeServerNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActMergeServerNotify::~TActMergeServerNotify() {
  // @@protoc_insertion_point(destructor:pb.TActMergeServerNotify)
  SharedDtor();
}

void TActMergeServerNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActMergeServerNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActMergeServerNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActMergeServerNotify_descriptor_;
}

const TActMergeServerNotify& TActMergeServerNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActMergeServer_2eproto();
  return *default_instance_;
}

TActMergeServerNotify* TActMergeServerNotify::default_instance_ = NULL;

TActMergeServerNotify* TActMergeServerNotify::New() const {
  return new TActMergeServerNotify;
}

void TActMergeServerNotify::Clear() {
  arrinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActMergeServerNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActMergeServerNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActMergeServerRMBInfo ArrInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActMergeServerNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActMergeServerNotify)
  return false;
#undef DO_
}

void TActMergeServerNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActMergeServerNotify)
  // repeated .pb.TActMergeServerRMBInfo ArrInfo = 1;
  for (int i = 0; i < this->arrinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActMergeServerNotify)
}

::google::protobuf::uint8* TActMergeServerNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActMergeServerNotify)
  // repeated .pb.TActMergeServerRMBInfo ArrInfo = 1;
  for (int i = 0; i < this->arrinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActMergeServerNotify)
  return target;
}

int TActMergeServerNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActMergeServerRMBInfo ArrInfo = 1;
  total_size += 1 * this->arrinfo_size();
  for (int i = 0; i < this->arrinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActMergeServerNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActMergeServerNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActMergeServerNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActMergeServerNotify::MergeFrom(const TActMergeServerNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrinfo_.MergeFrom(from.arrinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActMergeServerNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActMergeServerNotify::CopyFrom(const TActMergeServerNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActMergeServerNotify::IsInitialized() const {

  return true;
}

void TActMergeServerNotify::Swap(TActMergeServerNotify* other) {
  if (other != this) {
    arrinfo_.Swap(&other->arrinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActMergeServerNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActMergeServerNotify_descriptor_;
  metadata.reflection = TActMergeServerNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
