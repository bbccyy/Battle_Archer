// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/BattleBase.proto

#ifndef PROTOBUF_net_2fBattleBase_2eproto__INCLUDED
#define PROTOBUF_net_2fBattleBase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fBattleBase_2eproto();
void protobuf_AssignDesc_net_2fBattleBase_2eproto();
void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

class TSkillStatistics;
class TUnitStatistics;
class TTDSingle;
class TTDTimeInfo;
class TSkillCount;
class TSkillCountInfo;
class TPointBuff;
class TFriendCD;
class TTDRecordInfo;
class TUnitWheelWarRecord;
class TArmyWheelWarRecord;
class TFieldWheelWarRecord;
class TWheelWarFieldStatus;
class TGetBattleArgsFromMajorUsingReplacementReq;
class TRushInfo;
class TTreadInfo;
class TWinnerInfo;
class TSpecialEntrance;
class TWheelWarRidingInfo;
class TBattleResultArrayReq;
class TBattleResultArrayRsp;
class TGetBattleArgsWithUidListReq;
class TWarRidingInfo;
class TGetBattleArgsWithUidReq;
class TGetBattleArgsFromMajorSpecifyWarRiding;
class TBattleSoulInfo;

enum EGroupMatchType {
  EBattleTypeWheelWar = 1,
  EBattleTypeGroupKnockout = 2
};
bool EGroupMatchType_IsValid(int value);
const EGroupMatchType EGroupMatchType_MIN = EBattleTypeWheelWar;
const EGroupMatchType EGroupMatchType_MAX = EBattleTypeGroupKnockout;
const int EGroupMatchType_ARRAYSIZE = EGroupMatchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGroupMatchType_descriptor();
inline const ::std::string& EGroupMatchType_Name(EGroupMatchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGroupMatchType_descriptor(), value);
}
inline bool EGroupMatchType_Parse(
    const ::std::string& name, EGroupMatchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGroupMatchType>(
    EGroupMatchType_descriptor(), name, value);
}
enum EBTAction {
  EBTATaskBattleNone = 0,
  EBTATask_Common_ShowBlackScreenText = 1006,
  EBTATaskBattlePlayEffectStandPoint = 2004,
  EBTATaskHeroVisible = 2010,
  EBTATaskBattlePause = 2011,
  EBTATaskBattleHideLayer = 2012,
  EBTATaskHeroPlayEffect = 2018,
  EBTATaskHeroAnim = 2019,
  EBTATaskHeroChangeDir = 2020,
  EBTATaskSceneInsertObject = 2021,
  EBTATaskControlObjectMove = 2022,
  EBTATaskRemoveObject = 2023,
  EBTATaskRemoveEffect = 2024,
  EBTATaskResetCamera = 2028,
  EBTATaskUseCameraTrack = 2029,
  EBTATaskHeadIdentifier = 2030,
  EBTATaskActiveScreenEffect = 2035
};
bool EBTAction_IsValid(int value);
const EBTAction EBTAction_MIN = EBTATaskBattleNone;
const EBTAction EBTAction_MAX = EBTATaskActiveScreenEffect;
const int EBTAction_ARRAYSIZE = EBTAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* EBTAction_descriptor();
inline const ::std::string& EBTAction_Name(EBTAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    EBTAction_descriptor(), value);
}
inline bool EBTAction_Parse(
    const ::std::string& name, EBTAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EBTAction>(
    EBTAction_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TSkillStatistics</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSkillStatistics : public ::google::protobuf::Message {
 public:
  TSkillStatistics();
  virtual ~TSkillStatistics();

  TSkillStatistics(const TSkillStatistics& from);

  inline TSkillStatistics& operator=(const TSkillStatistics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSkillStatistics& default_instance();

  void Swap(TSkillStatistics* other);

  // implements Message ----------------------------------------------

  TSkillStatistics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSkillStatistics& from);
  void MergeFrom(const TSkillStatistics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SkillId = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSkillStatistics</name>
  	<Function>
  		<name>skillid</name>
  		<replaceName>SkillId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skillid</name>
  		<replaceName>SkillId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillid</name>
  		<replaceName>SkillId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional uint32 Count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSkillStatistics</name>
  	<Function>
  		<name>count</name>
  		<replaceName>Count</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_count</name>
  		<replaceName>Count</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_count</name>
  		<replaceName>Count</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint32 TotalEffectTarget = 3;
  inline bool has_totaleffecttarget() const;
  inline void clear_totaleffecttarget();
  static const int kTotalEffectTargetFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSkillStatistics</name>
  	<Function>
  		<name>totaleffecttarget</name>
  		<replaceName>TotalEffectTarget</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totaleffecttarget</name>
  		<replaceName>TotalEffectTarget</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totaleffecttarget</name>
  		<replaceName>TotalEffectTarget</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 totaleffecttarget() const;
  inline void set_totaleffecttarget(::google::protobuf::uint32 value);

  // optional uint64 TotalPhycialDamage = 4;
  inline bool has_totalphycialdamage() const;
  inline void clear_totalphycialdamage();
  static const int kTotalPhycialDamageFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TSkillStatistics</name>
  	<Function>
  		<name>totalphycialdamage</name>
  		<replaceName>TotalPhycialDamage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalphycialdamage</name>
  		<replaceName>TotalPhycialDamage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalphycialdamage</name>
  		<replaceName>TotalPhycialDamage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 totalphycialdamage() const;
  inline void set_totalphycialdamage(::google::protobuf::uint64 value);

  // optional uint64 TotalMagicalDamage = 5;
  inline bool has_totalmagicaldamage() const;
  inline void clear_totalmagicaldamage();
  static const int kTotalMagicalDamageFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TSkillStatistics</name>
  	<Function>
  		<name>totalmagicaldamage</name>
  		<replaceName>TotalMagicalDamage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalmagicaldamage</name>
  		<replaceName>TotalMagicalDamage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalmagicaldamage</name>
  		<replaceName>TotalMagicalDamage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 totalmagicaldamage() const;
  inline void set_totalmagicaldamage(::google::protobuf::uint64 value);

  // optional uint64 TotalHeal = 6;
  inline bool has_totalheal() const;
  inline void clear_totalheal();
  static const int kTotalHealFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TSkillStatistics</name>
  	<Function>
  		<name>totalheal</name>
  		<replaceName>TotalHeal</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalheal</name>
  		<replaceName>TotalHeal</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalheal</name>
  		<replaceName>TotalHeal</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 totalheal() const;
  inline void set_totalheal(::google::protobuf::uint64 value);

  // optional uint64 TotalSuckBlood = 7;
  inline bool has_totalsuckblood() const;
  inline void clear_totalsuckblood();
  static const int kTotalSuckBloodFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TSkillStatistics</name>
  	<Function>
  		<name>totalsuckblood</name>
  		<replaceName>TotalSuckBlood</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalsuckblood</name>
  		<replaceName>TotalSuckBlood</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalsuckblood</name>
  		<replaceName>TotalSuckBlood</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 totalsuckblood() const;
  inline void set_totalsuckblood(::google::protobuf::uint64 value);

  // optional uint32 CollisionNum = 8;
  inline bool has_collisionnum() const;
  inline void clear_collisionnum();
  static const int kCollisionNumFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TSkillStatistics</name>
  	<Function>
  		<name>collisionnum</name>
  		<replaceName>CollisionNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_collisionnum</name>
  		<replaceName>CollisionNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_collisionnum</name>
  		<replaceName>CollisionNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 collisionnum() const;
  inline void set_collisionnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSkillStatistics)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_totaleffecttarget();
  inline void clear_has_totaleffecttarget();
  inline void set_has_totalphycialdamage();
  inline void clear_has_totalphycialdamage();
  inline void set_has_totalmagicaldamage();
  inline void clear_has_totalmagicaldamage();
  inline void set_has_totalheal();
  inline void clear_has_totalheal();
  inline void set_has_totalsuckblood();
  inline void clear_has_totalsuckblood();
  inline void set_has_collisionnum();
  inline void clear_has_collisionnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint64 totalphycialdamage_;
  ::google::protobuf::uint64 totalmagicaldamage_;
  ::google::protobuf::uint32 totaleffecttarget_;
  ::google::protobuf::uint32 collisionnum_;
  ::google::protobuf::uint64 totalheal_;
  ::google::protobuf::uint64 totalsuckblood_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TSkillStatistics* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUnitStatistics</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUnitStatistics : public ::google::protobuf::Message {
 public:
  TUnitStatistics();
  virtual ~TUnitStatistics();

  TUnitStatistics(const TUnitStatistics& from);

  inline TUnitStatistics& operator=(const TUnitStatistics& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUnitStatistics& default_instance();

  void Swap(TUnitStatistics* other);

  // implements Message ----------------------------------------------

  TUnitStatistics* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUnitStatistics& from);
  void MergeFrom(const TUnitStatistics& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TotalPhycialDamage = 1;
  inline bool has_totalphycialdamage() const;
  inline void clear_totalphycialdamage();
  static const int kTotalPhycialDamageFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUnitStatistics</name>
  	<Function>
  		<name>totalphycialdamage</name>
  		<replaceName>TotalPhycialDamage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalphycialdamage</name>
  		<replaceName>TotalPhycialDamage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalphycialdamage</name>
  		<replaceName>TotalPhycialDamage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 totalphycialdamage() const;
  inline void set_totalphycialdamage(::google::protobuf::uint64 value);

  // optional uint64 TotalMagicalDamage = 2;
  inline bool has_totalmagicaldamage() const;
  inline void clear_totalmagicaldamage();
  static const int kTotalMagicalDamageFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUnitStatistics</name>
  	<Function>
  		<name>totalmagicaldamage</name>
  		<replaceName>TotalMagicalDamage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalmagicaldamage</name>
  		<replaceName>TotalMagicalDamage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalmagicaldamage</name>
  		<replaceName>TotalMagicalDamage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 totalmagicaldamage() const;
  inline void set_totalmagicaldamage(::google::protobuf::uint64 value);

  // optional uint64 TotalHeal = 3;
  inline bool has_totalheal() const;
  inline void clear_totalheal();
  static const int kTotalHealFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUnitStatistics</name>
  	<Function>
  		<name>totalheal</name>
  		<replaceName>TotalHeal</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalheal</name>
  		<replaceName>TotalHeal</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalheal</name>
  		<replaceName>TotalHeal</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 totalheal() const;
  inline void set_totalheal(::google::protobuf::uint64 value);

  // optional uint64 PhycialDamageUndertake = 4;
  inline bool has_phycialdamageundertake() const;
  inline void clear_phycialdamageundertake();
  static const int kPhycialDamageUndertakeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TUnitStatistics</name>
  	<Function>
  		<name>phycialdamageundertake</name>
  		<replaceName>PhycialDamageUndertake</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_phycialdamageundertake</name>
  		<replaceName>PhycialDamageUndertake</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_phycialdamageundertake</name>
  		<replaceName>PhycialDamageUndertake</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 phycialdamageundertake() const;
  inline void set_phycialdamageundertake(::google::protobuf::uint64 value);

  // optional uint64 MagicalDamageUndertake = 5;
  inline bool has_magicaldamageundertake() const;
  inline void clear_magicaldamageundertake();
  static const int kMagicalDamageUndertakeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TUnitStatistics</name>
  	<Function>
  		<name>magicaldamageundertake</name>
  		<replaceName>MagicalDamageUndertake</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_magicaldamageundertake</name>
  		<replaceName>MagicalDamageUndertake</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_magicaldamageundertake</name>
  		<replaceName>MagicalDamageUndertake</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 magicaldamageundertake() const;
  inline void set_magicaldamageundertake(::google::protobuf::uint64 value);

  // optional uint32 SkillExecuteCount = 6;
  inline bool has_skillexecutecount() const;
  inline void clear_skillexecutecount();
  static const int kSkillExecuteCountFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TUnitStatistics</name>
  	<Function>
  		<name>skillexecutecount</name>
  		<replaceName>SkillExecuteCount</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skillexecutecount</name>
  		<replaceName>SkillExecuteCount</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillexecutecount</name>
  		<replaceName>SkillExecuteCount</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 skillexecutecount() const;
  inline void set_skillexecutecount(::google::protobuf::uint32 value);

  // optional uint32 DodgeCount = 7;
  inline bool has_dodgecount() const;
  inline void clear_dodgecount();
  static const int kDodgeCountFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TUnitStatistics</name>
  	<Function>
  		<name>dodgecount</name>
  		<replaceName>DodgeCount</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_dodgecount</name>
  		<replaceName>DodgeCount</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dodgecount</name>
  		<replaceName>DodgeCount</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 dodgecount() const;
  inline void set_dodgecount(::google::protobuf::uint32 value);

  // optional uint32 PhysicalBase = 8;
  inline bool has_physicalbase() const;
  inline void clear_physicalbase();
  static const int kPhysicalBaseFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TUnitStatistics</name>
  	<Function>
  		<name>physicalbase</name>
  		<replaceName>PhysicalBase</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_physicalbase</name>
  		<replaceName>PhysicalBase</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_physicalbase</name>
  		<replaceName>PhysicalBase</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 physicalbase() const;
  inline void set_physicalbase(::google::protobuf::uint32 value);

  // optional uint32 ExemptionCount = 9;
  inline bool has_exemptioncount() const;
  inline void clear_exemptioncount();
  static const int kExemptionCountFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TUnitStatistics</name>
  	<Function>
  		<name>exemptioncount</name>
  		<replaceName>ExemptionCount</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_exemptioncount</name>
  		<replaceName>ExemptionCount</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_exemptioncount</name>
  		<replaceName>ExemptionCount</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 exemptioncount() const;
  inline void set_exemptioncount(::google::protobuf::uint32 value);

  // optional uint32 MagicalBase = 10;
  inline bool has_magicalbase() const;
  inline void clear_magicalbase();
  static const int kMagicalBaseFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TUnitStatistics</name>
  	<Function>
  		<name>magicalbase</name>
  		<replaceName>MagicalBase</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_magicalbase</name>
  		<replaceName>MagicalBase</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_magicalbase</name>
  		<replaceName>MagicalBase</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 magicalbase() const;
  inline void set_magicalbase(::google::protobuf::uint32 value);

  // optional uint32 ParryCount = 11;
  inline bool has_parrycount() const;
  inline void clear_parrycount();
  static const int kParryCountFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TUnitStatistics</name>
  	<Function>
  		<name>parrycount</name>
  		<replaceName>ParryCount</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_parrycount</name>
  		<replaceName>ParryCount</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_parrycount</name>
  		<replaceName>ParryCount</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 parrycount() const;
  inline void set_parrycount(::google::protobuf::uint32 value);

  // optional uint32 ResistCount = 12;
  inline bool has_resistcount() const;
  inline void clear_resistcount();
  static const int kResistCountFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TUnitStatistics</name>
  	<Function>
  		<name>resistcount</name>
  		<replaceName>ResistCount</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resistcount</name>
  		<replaceName>ResistCount</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resistcount</name>
  		<replaceName>ResistCount</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 resistcount() const;
  inline void set_resistcount(::google::protobuf::uint32 value);

  // optional uint32 CriticalDamageCount = 13;
  inline bool has_criticaldamagecount() const;
  inline void clear_criticaldamagecount();
  static const int kCriticalDamageCountFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TUnitStatistics</name>
  	<Function>
  		<name>criticaldamagecount</name>
  		<replaceName>CriticalDamageCount</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_criticaldamagecount</name>
  		<replaceName>CriticalDamageCount</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_criticaldamagecount</name>
  		<replaceName>CriticalDamageCount</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 criticaldamagecount() const;
  inline void set_criticaldamagecount(::google::protobuf::uint32 value);

  // optional uint32 CriticalDamageBase = 14;
  inline bool has_criticaldamagebase() const;
  inline void clear_criticaldamagebase();
  static const int kCriticalDamageBaseFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>TUnitStatistics</name>
  	<Function>
  		<name>criticaldamagebase</name>
  		<replaceName>CriticalDamageBase</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_criticaldamagebase</name>
  		<replaceName>CriticalDamageBase</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_criticaldamagebase</name>
  		<replaceName>CriticalDamageBase</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 criticaldamagebase() const;
  inline void set_criticaldamagebase(::google::protobuf::uint32 value);

  // optional uint32 CriticalHealCount = 15;
  inline bool has_criticalhealcount() const;
  inline void clear_criticalhealcount();
  static const int kCriticalHealCountFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>TUnitStatistics</name>
  	<Function>
  		<name>criticalhealcount</name>
  		<replaceName>CriticalHealCount</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_criticalhealcount</name>
  		<replaceName>CriticalHealCount</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_criticalhealcount</name>
  		<replaceName>CriticalHealCount</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 criticalhealcount() const;
  inline void set_criticalhealcount(::google::protobuf::uint32 value);

  // optional uint32 CriticalHealBase = 16;
  inline bool has_criticalhealbase() const;
  inline void clear_criticalhealbase();
  static const int kCriticalHealBaseFieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>TUnitStatistics</name>
  	<Function>
  		<name>criticalhealbase</name>
  		<replaceName>CriticalHealBase</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_criticalhealbase</name>
  		<replaceName>CriticalHealBase</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_criticalhealbase</name>
  		<replaceName>CriticalHealBase</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 criticalhealbase() const;
  inline void set_criticalhealbase(::google::protobuf::uint32 value);

  // optional uint32 BeCriticalDamageCount = 17;
  inline bool has_becriticaldamagecount() const;
  inline void clear_becriticaldamagecount();
  static const int kBeCriticalDamageCountFieldNumber = 17;
  /*FOR2LUA
  <Record>
  	<name>TUnitStatistics</name>
  	<Function>
  		<name>becriticaldamagecount</name>
  		<replaceName>BeCriticalDamageCount</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_becriticaldamagecount</name>
  		<replaceName>BeCriticalDamageCount</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_becriticaldamagecount</name>
  		<replaceName>BeCriticalDamageCount</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 becriticaldamagecount() const;
  inline void set_becriticaldamagecount(::google::protobuf::uint32 value);

  // optional uint32 BeDamageBase = 18;
  inline bool has_bedamagebase() const;
  inline void clear_bedamagebase();
  static const int kBeDamageBaseFieldNumber = 18;
  /*FOR2LUA
  <Record>
  	<name>TUnitStatistics</name>
  	<Function>
  		<name>bedamagebase</name>
  		<replaceName>BeDamageBase</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bedamagebase</name>
  		<replaceName>BeDamageBase</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bedamagebase</name>
  		<replaceName>BeDamageBase</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bedamagebase() const;
  inline void set_bedamagebase(::google::protobuf::uint32 value);

  // repeated .pb.TSkillStatistics SkillStatisticsArr = 19;
  inline int skillstatisticsarr_size() const;
  inline void clear_skillstatisticsarr();
  static const int kSkillStatisticsArrFieldNumber = 19;
  /*FOR2LUA
  <Record>
  	<name>TUnitStatistics</name>
  	<Function>
  		<name>skillstatisticsarr</name>
  		<replaceName>SkillStatisticsArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_skillstatisticsarr</name>
  		<replaceName>SkillStatisticsArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_skillstatisticsarr</name>
  		<replaceName>SkillStatisticsArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillstatisticsarr</name>
  		<replaceName>SkillStatisticsArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>skillstatisticsarr_size</name>
  		<replaceName>SkillStatisticsArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSkillStatistics& skillstatisticsarr(int index) const;
  inline ::pb::TSkillStatistics* mutable_skillstatisticsarr(int index);
  inline ::pb::TSkillStatistics* add_skillstatisticsarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSkillStatistics >&
      skillstatisticsarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSkillStatistics >*
      mutable_skillstatisticsarr();

  // optional uint64 TotalSuckBlood = 20;
  inline bool has_totalsuckblood() const;
  inline void clear_totalsuckblood();
  static const int kTotalSuckBloodFieldNumber = 20;
  /*FOR2LUA
  <Record>
  	<name>TUnitStatistics</name>
  	<Function>
  		<name>totalsuckblood</name>
  		<replaceName>TotalSuckBlood</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalsuckblood</name>
  		<replaceName>TotalSuckBlood</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalsuckblood</name>
  		<replaceName>TotalSuckBlood</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 totalsuckblood() const;
  inline void set_totalsuckblood(::google::protobuf::uint64 value);

  // optional uint32 TimeToLive = 21;
  inline bool has_timetolive() const;
  inline void clear_timetolive();
  static const int kTimeToLiveFieldNumber = 21;
  /*FOR2LUA
  <Record>
  	<name>TUnitStatistics</name>
  	<Function>
  		<name>timetolive</name>
  		<replaceName>TimeToLive</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_timetolive</name>
  		<replaceName>TimeToLive</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_timetolive</name>
  		<replaceName>TimeToLive</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 timetolive() const;
  inline void set_timetolive(::google::protobuf::uint32 value);

  // optional uint64 RealHeal = 22;
  inline bool has_realheal() const;
  inline void clear_realheal();
  static const int kRealHealFieldNumber = 22;
  /*FOR2LUA
  <Record>
  	<name>TUnitStatistics</name>
  	<Function>
  		<name>realheal</name>
  		<replaceName>RealHeal</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_realheal</name>
  		<replaceName>RealHeal</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_realheal</name>
  		<replaceName>RealHeal</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 realheal() const;
  inline void set_realheal(::google::protobuf::uint64 value);

  // optional uint64 TotalAbsorbBlood = 23;
  inline bool has_totalabsorbblood() const;
  inline void clear_totalabsorbblood();
  static const int kTotalAbsorbBloodFieldNumber = 23;
  /*FOR2LUA
  <Record>
  	<name>TUnitStatistics</name>
  	<Function>
  		<name>totalabsorbblood</name>
  		<replaceName>TotalAbsorbBlood</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalabsorbblood</name>
  		<replaceName>TotalAbsorbBlood</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalabsorbblood</name>
  		<replaceName>TotalAbsorbBlood</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 totalabsorbblood() const;
  inline void set_totalabsorbblood(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TUnitStatistics)
 private:
  inline void set_has_totalphycialdamage();
  inline void clear_has_totalphycialdamage();
  inline void set_has_totalmagicaldamage();
  inline void clear_has_totalmagicaldamage();
  inline void set_has_totalheal();
  inline void clear_has_totalheal();
  inline void set_has_phycialdamageundertake();
  inline void clear_has_phycialdamageundertake();
  inline void set_has_magicaldamageundertake();
  inline void clear_has_magicaldamageundertake();
  inline void set_has_skillexecutecount();
  inline void clear_has_skillexecutecount();
  inline void set_has_dodgecount();
  inline void clear_has_dodgecount();
  inline void set_has_physicalbase();
  inline void clear_has_physicalbase();
  inline void set_has_exemptioncount();
  inline void clear_has_exemptioncount();
  inline void set_has_magicalbase();
  inline void clear_has_magicalbase();
  inline void set_has_parrycount();
  inline void clear_has_parrycount();
  inline void set_has_resistcount();
  inline void clear_has_resistcount();
  inline void set_has_criticaldamagecount();
  inline void clear_has_criticaldamagecount();
  inline void set_has_criticaldamagebase();
  inline void clear_has_criticaldamagebase();
  inline void set_has_criticalhealcount();
  inline void clear_has_criticalhealcount();
  inline void set_has_criticalhealbase();
  inline void clear_has_criticalhealbase();
  inline void set_has_becriticaldamagecount();
  inline void clear_has_becriticaldamagecount();
  inline void set_has_bedamagebase();
  inline void clear_has_bedamagebase();
  inline void set_has_totalsuckblood();
  inline void clear_has_totalsuckblood();
  inline void set_has_timetolive();
  inline void clear_has_timetolive();
  inline void set_has_realheal();
  inline void clear_has_realheal();
  inline void set_has_totalabsorbblood();
  inline void clear_has_totalabsorbblood();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 totalphycialdamage_;
  ::google::protobuf::uint64 totalmagicaldamage_;
  ::google::protobuf::uint64 totalheal_;
  ::google::protobuf::uint64 phycialdamageundertake_;
  ::google::protobuf::uint64 magicaldamageundertake_;
  ::google::protobuf::uint32 skillexecutecount_;
  ::google::protobuf::uint32 dodgecount_;
  ::google::protobuf::uint32 physicalbase_;
  ::google::protobuf::uint32 exemptioncount_;
  ::google::protobuf::uint32 magicalbase_;
  ::google::protobuf::uint32 parrycount_;
  ::google::protobuf::uint32 resistcount_;
  ::google::protobuf::uint32 criticaldamagecount_;
  ::google::protobuf::uint32 criticaldamagebase_;
  ::google::protobuf::uint32 criticalhealcount_;
  ::google::protobuf::uint32 criticalhealbase_;
  ::google::protobuf::uint32 becriticaldamagecount_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSkillStatistics > skillstatisticsarr_;
  ::google::protobuf::uint32 bedamagebase_;
  ::google::protobuf::uint32 timetolive_;
  ::google::protobuf::uint64 totalsuckblood_;
  ::google::protobuf::uint64 realheal_;
  ::google::protobuf::uint64 totalabsorbblood_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TUnitStatistics* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTDSingle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTDSingle : public ::google::protobuf::Message {
 public:
  TTDSingle();
  virtual ~TTDSingle();

  TTDSingle(const TTDSingle& from);

  inline TTDSingle& operator=(const TTDSingle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTDSingle& default_instance();

  void Swap(TTDSingle* other);

  // implements Message ----------------------------------------------

  TTDSingle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTDSingle& from);
  void MergeFrom(const TTDSingle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTDSingle</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // required uint32 Pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTDSingle</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional int32 Wave = 3;
  inline bool has_wave() const;
  inline void clear_wave();
  static const int kWaveFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTDSingle</name>
  	<Function>
  		<name>wave</name>
  		<replaceName>Wave</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_wave</name>
  		<replaceName>Wave</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_wave</name>
  		<replaceName>Wave</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 wave() const;
  inline void set_wave(::google::protobuf::int32 value);

  // optional int32 PathIndex = 4;
  inline bool has_pathindex() const;
  inline void clear_pathindex();
  static const int kPathIndexFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTDSingle</name>
  	<Function>
  		<name>pathindex</name>
  		<replaceName>PathIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pathindex</name>
  		<replaceName>PathIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pathindex</name>
  		<replaceName>PathIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 pathindex() const;
  inline void set_pathindex(::google::protobuf::int32 value);

  // optional int32 Energy = 5;
  inline bool has_energy() const;
  inline void clear_energy();
  static const int kEnergyFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TTDSingle</name>
  	<Function>
  		<name>energy</name>
  		<replaceName>Energy</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_energy</name>
  		<replaceName>Energy</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_energy</name>
  		<replaceName>Energy</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 energy() const;
  inline void set_energy(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TTDSingle)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_wave();
  inline void clear_has_wave();
  inline void set_has_pathindex();
  inline void clear_has_pathindex();
  inline void set_has_energy();
  inline void clear_has_energy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::int32 wave_;
  ::google::protobuf::int32 pathindex_;
  ::google::protobuf::int32 energy_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TTDSingle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTDTimeInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTDTimeInfo : public ::google::protobuf::Message {
 public:
  TTDTimeInfo();
  virtual ~TTDTimeInfo();

  TTDTimeInfo(const TTDTimeInfo& from);

  inline TTDTimeInfo& operator=(const TTDTimeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTDTimeInfo& default_instance();

  void Swap(TTDTimeInfo* other);

  // implements Message ----------------------------------------------

  TTDTimeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTDTimeInfo& from);
  void MergeFrom(const TTDTimeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 GameTime = 1;
  inline bool has_gametime() const;
  inline void clear_gametime();
  static const int kGameTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTDTimeInfo</name>
  	<Function>
  		<name>gametime</name>
  		<replaceName>GameTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_gametime</name>
  		<replaceName>GameTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gametime</name>
  		<replaceName>GameTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 gametime() const;
  inline void set_gametime(::google::protobuf::uint32 value);

  // repeated .pb.TTDSingle EnemyArr = 2;
  inline int enemyarr_size() const;
  inline void clear_enemyarr();
  static const int kEnemyArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTDTimeInfo</name>
  	<Function>
  		<name>enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>enemyarr_size</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTDSingle& enemyarr(int index) const;
  inline ::pb::TTDSingle* mutable_enemyarr(int index);
  inline ::pb::TTDSingle* add_enemyarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTDSingle >&
      enemyarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTDSingle >*
      mutable_enemyarr();

  // @@protoc_insertion_point(class_scope:pb.TTDTimeInfo)
 private:
  inline void set_has_gametime();
  inline void clear_has_gametime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTDSingle > enemyarr_;
  ::google::protobuf::uint32 gametime_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TTDTimeInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSkillCount</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSkillCount : public ::google::protobuf::Message {
 public:
  TSkillCount();
  virtual ~TSkillCount();

  TSkillCount(const TSkillCount& from);

  inline TSkillCount& operator=(const TSkillCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSkillCount& default_instance();

  void Swap(TSkillCount* other);

  // implements Message ----------------------------------------------

  TSkillCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSkillCount& from);
  void MergeFrom(const TSkillCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 SkillId = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSkillCount</name>
  	<Function>
  		<name>skillid</name>
  		<replaceName>SkillId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skillid</name>
  		<replaceName>SkillId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillid</name>
  		<replaceName>SkillId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // required uint32 Count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSkillCount</name>
  	<Function>
  		<name>count</name>
  		<replaceName>Count</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_count</name>
  		<replaceName>Count</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_count</name>
  		<replaceName>Count</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSkillCount)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TSkillCount* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSkillCountInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSkillCountInfo : public ::google::protobuf::Message {
 public:
  TSkillCountInfo();
  virtual ~TSkillCountInfo();

  TSkillCountInfo(const TSkillCountInfo& from);

  inline TSkillCountInfo& operator=(const TSkillCountInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSkillCountInfo& default_instance();

  void Swap(TSkillCountInfo* other);

  // implements Message ----------------------------------------------

  TSkillCountInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSkillCountInfo& from);
  void MergeFrom(const TSkillCountInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TSkillCount SkillCountArr = 1;
  inline int skillcountarr_size() const;
  inline void clear_skillcountarr();
  static const int kSkillCountArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSkillCountInfo</name>
  	<Function>
  		<name>skillcountarr</name>
  		<replaceName>SkillCountArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_skillcountarr</name>
  		<replaceName>SkillCountArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_skillcountarr</name>
  		<replaceName>SkillCountArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillcountarr</name>
  		<replaceName>SkillCountArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>skillcountarr_size</name>
  		<replaceName>SkillCountArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSkillCount& skillcountarr(int index) const;
  inline ::pb::TSkillCount* mutable_skillcountarr(int index);
  inline ::pb::TSkillCount* add_skillcountarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSkillCount >&
      skillcountarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSkillCount >*
      mutable_skillcountarr();

  // @@protoc_insertion_point(class_scope:pb.TSkillCountInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSkillCount > skillcountarr_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TSkillCountInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPointBuff</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPointBuff : public ::google::protobuf::Message {
 public:
  TPointBuff();
  virtual ~TPointBuff();

  TPointBuff(const TPointBuff& from);

  inline TPointBuff& operator=(const TPointBuff& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPointBuff& default_instance();

  void Swap(TPointBuff* other);

  // implements Message ----------------------------------------------

  TPointBuff* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPointBuff& from);
  void MergeFrom(const TPointBuff& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 PointIndex = 1;
  inline bool has_pointindex() const;
  inline void clear_pointindex();
  static const int kPointIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPointBuff</name>
  	<Function>
  		<name>pointindex</name>
  		<replaceName>PointIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pointindex</name>
  		<replaceName>PointIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pointindex</name>
  		<replaceName>PointIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 pointindex() const;
  inline void set_pointindex(::google::protobuf::int32 value);

  // repeated int32 BuffArr = 2;
  inline int buffarr_size() const;
  inline void clear_buffarr();
  static const int kBuffArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPointBuff</name>
  	<Function>
  		<name>buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buffarr_size</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 buffarr(int index) const;
  inline void set_buffarr(int index, ::google::protobuf::int32 value);
  inline void add_buffarr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      buffarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_buffarr();

  // @@protoc_insertion_point(class_scope:pb.TPointBuff)
 private:
  inline void set_has_pointindex();
  inline void clear_has_pointindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > buffarr_;
  ::google::protobuf::int32 pointindex_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TPointBuff* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFriendCD</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFriendCD : public ::google::protobuf::Message {
 public:
  TFriendCD();
  virtual ~TFriendCD();

  TFriendCD(const TFriendCD& from);

  inline TFriendCD& operator=(const TFriendCD& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFriendCD& default_instance();

  void Swap(TFriendCD* other);

  // implements Message ----------------------------------------------

  TFriendCD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFriendCD& from);
  void MergeFrom(const TFriendCD& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFriendCD</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint32 CD = 2;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCDFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFriendCD</name>
  	<Function>
  		<name>cd</name>
  		<replaceName>CD</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cd</name>
  		<replaceName>CD</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cd</name>
  		<replaceName>CD</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cd() const;
  inline void set_cd(::google::protobuf::uint32 value);

  // optional uint32 Htid = 3;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TFriendCD</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TFriendCD)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_cd();
  inline void clear_has_cd();
  inline void set_has_htid();
  inline void clear_has_htid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 cd_;
  ::google::protobuf::uint32 htid_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TFriendCD* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTDRecordInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTDRecordInfo : public ::google::protobuf::Message {
 public:
  TTDRecordInfo();
  virtual ~TTDRecordInfo();

  TTDRecordInfo(const TTDRecordInfo& from);

  inline TTDRecordInfo& operator=(const TTDRecordInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTDRecordInfo& default_instance();

  void Swap(TTDRecordInfo* other);

  // implements Message ----------------------------------------------

  TTDRecordInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTDRecordInfo& from);
  void MergeFrom(const TTDRecordInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TFriendCD FriendCD = 1;
  inline int friendcd_size() const;
  inline void clear_friendcd();
  static const int kFriendCDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTDRecordInfo</name>
  	<Function>
  		<name>friendcd</name>
  		<replaceName>FriendCD</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_friendcd</name>
  		<replaceName>FriendCD</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_friendcd</name>
  		<replaceName>FriendCD</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_friendcd</name>
  		<replaceName>FriendCD</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>friendcd_size</name>
  		<replaceName>FriendCD</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TFriendCD& friendcd(int index) const;
  inline ::pb::TFriendCD* mutable_friendcd(int index);
  inline ::pb::TFriendCD* add_friendcd();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TFriendCD >&
      friendcd() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TFriendCD >*
      mutable_friendcd();

  // optional uint32 RestEnergy = 2;
  inline bool has_restenergy() const;
  inline void clear_restenergy();
  static const int kRestEnergyFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTDRecordInfo</name>
  	<Function>
  		<name>restenergy</name>
  		<replaceName>RestEnergy</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_restenergy</name>
  		<replaceName>RestEnergy</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_restenergy</name>
  		<replaceName>RestEnergy</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 restenergy() const;
  inline void set_restenergy(::google::protobuf::uint32 value);

  // repeated .pb.TSkillCount SkillCounter = 3;
  inline int skillcounter_size() const;
  inline void clear_skillcounter();
  static const int kSkillCounterFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTDRecordInfo</name>
  	<Function>
  		<name>skillcounter</name>
  		<replaceName>SkillCounter</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_skillcounter</name>
  		<replaceName>SkillCounter</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_skillcounter</name>
  		<replaceName>SkillCounter</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillcounter</name>
  		<replaceName>SkillCounter</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>skillcounter_size</name>
  		<replaceName>SkillCounter</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSkillCount& skillcounter(int index) const;
  inline ::pb::TSkillCount* mutable_skillcounter(int index);
  inline ::pb::TSkillCount* add_skillcounter();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSkillCount >&
      skillcounter() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSkillCount >*
      mutable_skillcounter();

  // @@protoc_insertion_point(class_scope:pb.TTDRecordInfo)
 private:
  inline void set_has_restenergy();
  inline void clear_has_restenergy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TFriendCD > friendcd_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSkillCount > skillcounter_;
  ::google::protobuf::uint32 restenergy_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TTDRecordInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUnitWheelWarRecord</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUnitWheelWarRecord : public ::google::protobuf::Message {
 public:
  TUnitWheelWarRecord();
  virtual ~TUnitWheelWarRecord();

  TUnitWheelWarRecord(const TUnitWheelWarRecord& from);

  inline TUnitWheelWarRecord& operator=(const TUnitWheelWarRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUnitWheelWarRecord& default_instance();

  void Swap(TUnitWheelWarRecord* other);

  // implements Message ----------------------------------------------

  TUnitWheelWarRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUnitWheelWarRecord& from);
  void MergeFrom(const TUnitWheelWarRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUnitWheelWarRecord</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint32 Htid = 2;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUnitWheelWarRecord</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // optional uint64 CurHp = 3;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHpFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUnitWheelWarRecord</name>
  	<Function>
  		<name>curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 curhp() const;
  inline void set_curhp(::google::protobuf::uint64 value);

  // optional uint64 MaxHp = 4;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHpFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TUnitWheelWarRecord</name>
  	<Function>
  		<name>maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint64 value);

  // optional uint32 CurRage = 5;
  inline bool has_currage() const;
  inline void clear_currage();
  static const int kCurRageFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TUnitWheelWarRecord</name>
  	<Function>
  		<name>currage</name>
  		<replaceName>CurRage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_currage</name>
  		<replaceName>CurRage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_currage</name>
  		<replaceName>CurRage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 currage() const;
  inline void set_currage(::google::protobuf::uint32 value);

  // optional uint64 DamageOut = 6;
  inline bool has_damageout() const;
  inline void clear_damageout();
  static const int kDamageOutFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TUnitWheelWarRecord</name>
  	<Function>
  		<name>damageout</name>
  		<replaceName>DamageOut</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damageout</name>
  		<replaceName>DamageOut</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damageout</name>
  		<replaceName>DamageOut</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 damageout() const;
  inline void set_damageout(::google::protobuf::uint64 value);

  // optional uint64 DamageIn = 7;
  inline bool has_damagein() const;
  inline void clear_damagein();
  static const int kDamageInFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TUnitWheelWarRecord</name>
  	<Function>
  		<name>damagein</name>
  		<replaceName>DamageIn</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damagein</name>
  		<replaceName>DamageIn</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damagein</name>
  		<replaceName>DamageIn</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 damagein() const;
  inline void set_damagein(::google::protobuf::uint64 value);

  // optional uint64 HealOut = 8;
  inline bool has_healout() const;
  inline void clear_healout();
  static const int kHealOutFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TUnitWheelWarRecord</name>
  	<Function>
  		<name>healout</name>
  		<replaceName>HealOut</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_healout</name>
  		<replaceName>HealOut</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_healout</name>
  		<replaceName>HealOut</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 healout() const;
  inline void set_healout(::google::protobuf::uint64 value);

  // optional uint32 Star = 9;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TUnitWheelWarRecord</name>
  	<Function>
  		<name>star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional uint32 Level = 10;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TUnitWheelWarRecord</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TUnitWheelWarRecord)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_htid();
  inline void clear_has_htid();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_currage();
  inline void clear_has_currage();
  inline void set_has_damageout();
  inline void clear_has_damageout();
  inline void set_has_damagein();
  inline void clear_has_damagein();
  inline void set_has_healout();
  inline void clear_has_healout();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 htid_;
  ::google::protobuf::uint64 curhp_;
  ::google::protobuf::uint64 maxhp_;
  ::google::protobuf::uint64 damageout_;
  ::google::protobuf::uint64 damagein_;
  ::google::protobuf::uint32 currage_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint64 healout_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TUnitWheelWarRecord* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArmyWheelWarRecord</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArmyWheelWarRecord : public ::google::protobuf::Message {
 public:
  TArmyWheelWarRecord();
  virtual ~TArmyWheelWarRecord();

  TArmyWheelWarRecord(const TArmyWheelWarRecord& from);

  inline TArmyWheelWarRecord& operator=(const TArmyWheelWarRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArmyWheelWarRecord& default_instance();

  void Swap(TArmyWheelWarRecord* other);

  // implements Message ----------------------------------------------

  TArmyWheelWarRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArmyWheelWarRecord& from);
  void MergeFrom(const TArmyWheelWarRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ArmyId = 1;
  inline bool has_armyid() const;
  inline void clear_armyid();
  static const int kArmyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArmyWheelWarRecord</name>
  	<Function>
  		<name>armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 armyid() const;
  inline void set_armyid(::google::protobuf::int32 value);

  // repeated .pb.TUnitWheelWarRecord UnitArr = 2;
  inline int unitarr_size() const;
  inline void clear_unitarr();
  static const int kUnitArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArmyWheelWarRecord</name>
  	<Function>
  		<name>unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unitarr_size</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnitWheelWarRecord& unitarr(int index) const;
  inline ::pb::TUnitWheelWarRecord* mutable_unitarr(int index);
  inline ::pb::TUnitWheelWarRecord* add_unitarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitWheelWarRecord >&
      unitarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitWheelWarRecord >*
      mutable_unitarr();

  // @@protoc_insertion_point(class_scope:pb.TArmyWheelWarRecord)
 private:
  inline void set_has_armyid();
  inline void clear_has_armyid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUnitWheelWarRecord > unitarr_;
  ::google::protobuf::int32 armyid_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TArmyWheelWarRecord* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFieldWheelWarRecord</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFieldWheelWarRecord : public ::google::protobuf::Message {
 public:
  TFieldWheelWarRecord();
  virtual ~TFieldWheelWarRecord();

  TFieldWheelWarRecord(const TFieldWheelWarRecord& from);

  inline TFieldWheelWarRecord& operator=(const TFieldWheelWarRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFieldWheelWarRecord& default_instance();

  void Swap(TFieldWheelWarRecord* other);

  // implements Message ----------------------------------------------

  TFieldWheelWarRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFieldWheelWarRecord& from);
  void MergeFrom(const TFieldWheelWarRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 FieldIndex = 1;
  inline bool has_fieldindex() const;
  inline void clear_fieldindex();
  static const int kFieldIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFieldWheelWarRecord</name>
  	<Function>
  		<name>fieldindex</name>
  		<replaceName>FieldIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fieldindex</name>
  		<replaceName>FieldIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fieldindex</name>
  		<replaceName>FieldIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 fieldindex() const;
  inline void set_fieldindex(::google::protobuf::int32 value);

  // optional .pb.TArmyWheelWarRecord Army1 = 2;
  inline bool has_army1() const;
  inline void clear_army1();
  static const int kArmy1FieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFieldWheelWarRecord</name>
  	<Function>
  		<name>army1</name>
  		<replaceName>Army1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_army1</name>
  		<replaceName>Army1</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_army1</name>
  		<replaceName>Army1</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_army1</name>
  		<replaceName>Army1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArmyWheelWarRecord& army1() const;
  inline ::pb::TArmyWheelWarRecord* mutable_army1();
  inline ::pb::TArmyWheelWarRecord* release_army1();
  inline void set_allocated_army1(::pb::TArmyWheelWarRecord* army1);

  // optional .pb.TArmyWheelWarRecord Army2 = 3;
  inline bool has_army2() const;
  inline void clear_army2();
  static const int kArmy2FieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TFieldWheelWarRecord</name>
  	<Function>
  		<name>army2</name>
  		<replaceName>Army2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_army2</name>
  		<replaceName>Army2</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_army2</name>
  		<replaceName>Army2</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_army2</name>
  		<replaceName>Army2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArmyWheelWarRecord& army2() const;
  inline ::pb::TArmyWheelWarRecord* mutable_army2();
  inline ::pb::TArmyWheelWarRecord* release_army2();
  inline void set_allocated_army2(::pb::TArmyWheelWarRecord* army2);

  // @@protoc_insertion_point(class_scope:pb.TFieldWheelWarRecord)
 private:
  inline void set_has_fieldindex();
  inline void clear_has_fieldindex();
  inline void set_has_army1();
  inline void clear_has_army1();
  inline void set_has_army2();
  inline void clear_has_army2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TArmyWheelWarRecord* army1_;
  ::pb::TArmyWheelWarRecord* army2_;
  ::google::protobuf::int32 fieldindex_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TFieldWheelWarRecord* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWheelWarFieldStatus</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWheelWarFieldStatus : public ::google::protobuf::Message {
 public:
  TWheelWarFieldStatus();
  virtual ~TWheelWarFieldStatus();

  TWheelWarFieldStatus(const TWheelWarFieldStatus& from);

  inline TWheelWarFieldStatus& operator=(const TWheelWarFieldStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWheelWarFieldStatus& default_instance();

  void Swap(TWheelWarFieldStatus* other);

  // implements Message ----------------------------------------------

  TWheelWarFieldStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWheelWarFieldStatus& from);
  void MergeFrom(const TWheelWarFieldStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TFieldWheelWarRecord FieldRecordArr = 1;
  inline int fieldrecordarr_size() const;
  inline void clear_fieldrecordarr();
  static const int kFieldRecordArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWheelWarFieldStatus</name>
  	<Function>
  		<name>fieldrecordarr</name>
  		<replaceName>FieldRecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_fieldrecordarr</name>
  		<replaceName>FieldRecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_fieldrecordarr</name>
  		<replaceName>FieldRecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fieldrecordarr</name>
  		<replaceName>FieldRecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>fieldrecordarr_size</name>
  		<replaceName>FieldRecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TFieldWheelWarRecord& fieldrecordarr(int index) const;
  inline ::pb::TFieldWheelWarRecord* mutable_fieldrecordarr(int index);
  inline ::pb::TFieldWheelWarRecord* add_fieldrecordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TFieldWheelWarRecord >&
      fieldrecordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TFieldWheelWarRecord >*
      mutable_fieldrecordarr();

  // @@protoc_insertion_point(class_scope:pb.TWheelWarFieldStatus)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TFieldWheelWarRecord > fieldrecordarr_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TWheelWarFieldStatus* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGetBattleArgsFromMajorUsingReplacementReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGetBattleArgsFromMajorUsingReplacementReq : public ::google::protobuf::Message {
 public:
  TGetBattleArgsFromMajorUsingReplacementReq();
  virtual ~TGetBattleArgsFromMajorUsingReplacementReq();

  TGetBattleArgsFromMajorUsingReplacementReq(const TGetBattleArgsFromMajorUsingReplacementReq& from);

  inline TGetBattleArgsFromMajorUsingReplacementReq& operator=(const TGetBattleArgsFromMajorUsingReplacementReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGetBattleArgsFromMajorUsingReplacementReq& default_instance();

  void Swap(TGetBattleArgsFromMajorUsingReplacementReq* other);

  // implements Message ----------------------------------------------

  TGetBattleArgsFromMajorUsingReplacementReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGetBattleArgsFromMajorUsingReplacementReq& from);
  void MergeFrom(const TGetBattleArgsFromMajorUsingReplacementReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGetBattleArgsFromMajorUsingReplacementReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 ReplacedHtid = 2;
  inline bool has_replacedhtid() const;
  inline void clear_replacedhtid();
  static const int kReplacedHtidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGetBattleArgsFromMajorUsingReplacementReq</name>
  	<Function>
  		<name>replacedhtid</name>
  		<replaceName>ReplacedHtid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_replacedhtid</name>
  		<replaceName>ReplacedHtid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_replacedhtid</name>
  		<replaceName>ReplacedHtid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 replacedhtid() const;
  inline void set_replacedhtid(::google::protobuf::uint32 value);

  // optional uint32 NewHtid = 3;
  inline bool has_newhtid() const;
  inline void clear_newhtid();
  static const int kNewHtidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGetBattleArgsFromMajorUsingReplacementReq</name>
  	<Function>
  		<name>newhtid</name>
  		<replaceName>NewHtid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_newhtid</name>
  		<replaceName>NewHtid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_newhtid</name>
  		<replaceName>NewHtid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 newhtid() const;
  inline void set_newhtid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGetBattleArgsFromMajorUsingReplacementReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_replacedhtid();
  inline void clear_has_replacedhtid();
  inline void set_has_newhtid();
  inline void clear_has_newhtid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 replacedhtid_;
  ::google::protobuf::uint32 newhtid_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TGetBattleArgsFromMajorUsingReplacementReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRushInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRushInfo : public ::google::protobuf::Message {
 public:
  TRushInfo();
  virtual ~TRushInfo();

  TRushInfo(const TRushInfo& from);

  inline TRushInfo& operator=(const TRushInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRushInfo& default_instance();

  void Swap(TRushInfo* other);

  // implements Message ----------------------------------------------

  TRushInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRushInfo& from);
  void MergeFrom(const TRushInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Army1Pos = 1;
  inline bool has_army1pos() const;
  inline void clear_army1pos();
  static const int kArmy1PosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRushInfo</name>
  	<Function>
  		<name>army1pos</name>
  		<replaceName>Army1Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_army1pos</name>
  		<replaceName>Army1Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_army1pos</name>
  		<replaceName>Army1Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 army1pos() const;
  inline void set_army1pos(::google::protobuf::uint32 value);

  // optional uint32 Army2Pos = 2;
  inline bool has_army2pos() const;
  inline void clear_army2pos();
  static const int kArmy2PosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRushInfo</name>
  	<Function>
  		<name>army2pos</name>
  		<replaceName>Army2Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_army2pos</name>
  		<replaceName>Army2Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_army2pos</name>
  		<replaceName>Army2Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 army2pos() const;
  inline void set_army2pos(::google::protobuf::uint32 value);

  // optional uint32 RushResult = 3;
  inline bool has_rushresult() const;
  inline void clear_rushresult();
  static const int kRushResultFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TRushInfo</name>
  	<Function>
  		<name>rushresult</name>
  		<replaceName>RushResult</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rushresult</name>
  		<replaceName>RushResult</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rushresult</name>
  		<replaceName>RushResult</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rushresult() const;
  inline void set_rushresult(::google::protobuf::uint32 value);

  // optional uint32 Army1HorseId = 4;
  inline bool has_army1horseid() const;
  inline void clear_army1horseid();
  static const int kArmy1HorseIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TRushInfo</name>
  	<Function>
  		<name>army1horseid</name>
  		<replaceName>Army1HorseId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_army1horseid</name>
  		<replaceName>Army1HorseId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_army1horseid</name>
  		<replaceName>Army1HorseId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 army1horseid() const;
  inline void set_army1horseid(::google::protobuf::uint32 value);

  // optional uint32 Army2HorseId = 5;
  inline bool has_army2horseid() const;
  inline void clear_army2horseid();
  static const int kArmy2HorseIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TRushInfo</name>
  	<Function>
  		<name>army2horseid</name>
  		<replaceName>Army2HorseId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_army2horseid</name>
  		<replaceName>Army2HorseId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_army2horseid</name>
  		<replaceName>Army2HorseId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 army2horseid() const;
  inline void set_army2horseid(::google::protobuf::uint32 value);

  // repeated uint32 TargetPosArr = 6;
  inline int targetposarr_size() const;
  inline void clear_targetposarr();
  static const int kTargetPosArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TRushInfo</name>
  	<Function>
  		<name>targetposarr</name>
  		<replaceName>TargetPosArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_targetposarr</name>
  		<replaceName>TargetPosArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_targetposarr</name>
  		<replaceName>TargetPosArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetposarr</name>
  		<replaceName>TargetPosArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>targetposarr_size</name>
  		<replaceName>TargetPosArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 targetposarr(int index) const;
  inline void set_targetposarr(int index, ::google::protobuf::uint32 value);
  inline void add_targetposarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      targetposarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_targetposarr();

  // @@protoc_insertion_point(class_scope:pb.TRushInfo)
 private:
  inline void set_has_army1pos();
  inline void clear_has_army1pos();
  inline void set_has_army2pos();
  inline void clear_has_army2pos();
  inline void set_has_rushresult();
  inline void clear_has_rushresult();
  inline void set_has_army1horseid();
  inline void clear_has_army1horseid();
  inline void set_has_army2horseid();
  inline void clear_has_army2horseid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 army1pos_;
  ::google::protobuf::uint32 army2pos_;
  ::google::protobuf::uint32 rushresult_;
  ::google::protobuf::uint32 army1horseid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > targetposarr_;
  ::google::protobuf::uint32 army2horseid_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TRushInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTreadInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTreadInfo : public ::google::protobuf::Message {
 public:
  TTreadInfo();
  virtual ~TTreadInfo();

  TTreadInfo(const TTreadInfo& from);

  inline TTreadInfo& operator=(const TTreadInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTreadInfo& default_instance();

  void Swap(TTreadInfo* other);

  // implements Message ----------------------------------------------

  TTreadInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTreadInfo& from);
  void MergeFrom(const TTreadInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ArmyId = 1;
  inline bool has_armyid() const;
  inline void clear_armyid();
  static const int kArmyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTreadInfo</name>
  	<Function>
  		<name>armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 armyid() const;
  inline void set_armyid(::google::protobuf::uint32 value);

  // optional uint32 Pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTreadInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // repeated uint32 TargetPosArr = 3;
  inline int targetposarr_size() const;
  inline void clear_targetposarr();
  static const int kTargetPosArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTreadInfo</name>
  	<Function>
  		<name>targetposarr</name>
  		<replaceName>TargetPosArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_targetposarr</name>
  		<replaceName>TargetPosArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_targetposarr</name>
  		<replaceName>TargetPosArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetposarr</name>
  		<replaceName>TargetPosArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>targetposarr_size</name>
  		<replaceName>TargetPosArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 targetposarr(int index) const;
  inline void set_targetposarr(int index, ::google::protobuf::uint32 value);
  inline void add_targetposarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      targetposarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_targetposarr();

  // @@protoc_insertion_point(class_scope:pb.TTreadInfo)
 private:
  inline void set_has_armyid();
  inline void clear_has_armyid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 armyid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > targetposarr_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TTreadInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWinnerInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWinnerInfo : public ::google::protobuf::Message {
 public:
  TWinnerInfo();
  virtual ~TWinnerInfo();

  TWinnerInfo(const TWinnerInfo& from);

  inline TWinnerInfo& operator=(const TWinnerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWinnerInfo& default_instance();

  void Swap(TWinnerInfo* other);

  // implements Message ----------------------------------------------

  TWinnerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWinnerInfo& from);
  void MergeFrom(const TWinnerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Winner = 1;
  inline bool has_winner() const;
  inline void clear_winner();
  static const int kWinnerFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWinnerInfo</name>
  	<Function>
  		<name>winner</name>
  		<replaceName>Winner</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_winner</name>
  		<replaceName>Winner</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_winner</name>
  		<replaceName>Winner</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 winner() const;
  inline void set_winner(::google::protobuf::uint32 value);

  // repeated uint32 WinArr = 2;
  inline int winarr_size() const;
  inline void clear_winarr();
  static const int kWinArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TWinnerInfo</name>
  	<Function>
  		<name>winarr</name>
  		<replaceName>WinArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_winarr</name>
  		<replaceName>WinArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_winarr</name>
  		<replaceName>WinArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_winarr</name>
  		<replaceName>WinArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>winarr_size</name>
  		<replaceName>WinArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 winarr(int index) const;
  inline void set_winarr(int index, ::google::protobuf::uint32 value);
  inline void add_winarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      winarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_winarr();

  // @@protoc_insertion_point(class_scope:pb.TWinnerInfo)
 private:
  inline void set_has_winner();
  inline void clear_has_winner();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > winarr_;
  ::google::protobuf::uint32 winner_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TWinnerInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSpecialEntrance</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSpecialEntrance : public ::google::protobuf::Message {
 public:
  TSpecialEntrance();
  virtual ~TSpecialEntrance();

  TSpecialEntrance(const TSpecialEntrance& from);

  inline TSpecialEntrance& operator=(const TSpecialEntrance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSpecialEntrance& default_instance();

  void Swap(TSpecialEntrance* other);

  // implements Message ----------------------------------------------

  TSpecialEntrance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSpecialEntrance& from);
  void MergeFrom(const TSpecialEntrance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TRushInfo RushInfoArr = 1;
  inline int rushinfoarr_size() const;
  inline void clear_rushinfoarr();
  static const int kRushInfoArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSpecialEntrance</name>
  	<Function>
  		<name>rushinfoarr</name>
  		<replaceName>RushInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rushinfoarr</name>
  		<replaceName>RushInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rushinfoarr</name>
  		<replaceName>RushInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rushinfoarr</name>
  		<replaceName>RushInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rushinfoarr_size</name>
  		<replaceName>RushInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRushInfo& rushinfoarr(int index) const;
  inline ::pb::TRushInfo* mutable_rushinfoarr(int index);
  inline ::pb::TRushInfo* add_rushinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TRushInfo >&
      rushinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TRushInfo >*
      mutable_rushinfoarr();

  // repeated .pb.TTreadInfo TreadInfoArr = 2;
  inline int treadinfoarr_size() const;
  inline void clear_treadinfoarr();
  static const int kTreadInfoArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSpecialEntrance</name>
  	<Function>
  		<name>treadinfoarr</name>
  		<replaceName>TreadInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_treadinfoarr</name>
  		<replaceName>TreadInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_treadinfoarr</name>
  		<replaceName>TreadInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_treadinfoarr</name>
  		<replaceName>TreadInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>treadinfoarr_size</name>
  		<replaceName>TreadInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTreadInfo& treadinfoarr(int index) const;
  inline ::pb::TTreadInfo* mutable_treadinfoarr(int index);
  inline ::pb::TTreadInfo* add_treadinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreadInfo >&
      treadinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTreadInfo >*
      mutable_treadinfoarr();

  // optional .pb.TWinnerInfo WinnerInfo = 3;
  inline bool has_winnerinfo() const;
  inline void clear_winnerinfo();
  static const int kWinnerInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSpecialEntrance</name>
  	<Function>
  		<name>winnerinfo</name>
  		<replaceName>WinnerInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_winnerinfo</name>
  		<replaceName>WinnerInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_winnerinfo</name>
  		<replaceName>WinnerInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_winnerinfo</name>
  		<replaceName>WinnerInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TWinnerInfo& winnerinfo() const;
  inline ::pb::TWinnerInfo* mutable_winnerinfo();
  inline ::pb::TWinnerInfo* release_winnerinfo();
  inline void set_allocated_winnerinfo(::pb::TWinnerInfo* winnerinfo);

  // @@protoc_insertion_point(class_scope:pb.TSpecialEntrance)
 private:
  inline void set_has_winnerinfo();
  inline void clear_has_winnerinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TRushInfo > rushinfoarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTreadInfo > treadinfoarr_;
  ::pb::TWinnerInfo* winnerinfo_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TSpecialEntrance* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWheelWarRidingInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWheelWarRidingInfo : public ::google::protobuf::Message {
 public:
  TWheelWarRidingInfo();
  virtual ~TWheelWarRidingInfo();

  TWheelWarRidingInfo(const TWheelWarRidingInfo& from);

  inline TWheelWarRidingInfo& operator=(const TWheelWarRidingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWheelWarRidingInfo& default_instance();

  void Swap(TWheelWarRidingInfo* other);

  // implements Message ----------------------------------------------

  TWheelWarRidingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWheelWarRidingInfo& from);
  void MergeFrom(const TWheelWarRidingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 HasInfo = 1;
  inline bool has_hasinfo() const;
  inline void clear_hasinfo();
  static const int kHasInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWheelWarRidingInfo</name>
  	<Function>
  		<name>hasinfo</name>
  		<replaceName>HasInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hasinfo</name>
  		<replaceName>HasInfo</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hasinfo</name>
  		<replaceName>HasInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hasinfo() const;
  inline void set_hasinfo(::google::protobuf::uint32 value);

  // repeated .pb.TWinnerInfo WinnerInfos = 2;
  inline int winnerinfos_size() const;
  inline void clear_winnerinfos();
  static const int kWinnerInfosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TWheelWarRidingInfo</name>
  	<Function>
  		<name>winnerinfos</name>
  		<replaceName>WinnerInfos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_winnerinfos</name>
  		<replaceName>WinnerInfos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_winnerinfos</name>
  		<replaceName>WinnerInfos</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_winnerinfos</name>
  		<replaceName>WinnerInfos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>winnerinfos_size</name>
  		<replaceName>WinnerInfos</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TWinnerInfo& winnerinfos(int index) const;
  inline ::pb::TWinnerInfo* mutable_winnerinfos(int index);
  inline ::pb::TWinnerInfo* add_winnerinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TWinnerInfo >&
      winnerinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TWinnerInfo >*
      mutable_winnerinfos();

  // @@protoc_insertion_point(class_scope:pb.TWheelWarRidingInfo)
 private:
  inline void set_has_hasinfo();
  inline void clear_has_hasinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TWinnerInfo > winnerinfos_;
  ::google::protobuf::uint32 hasinfo_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TWheelWarRidingInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBattleResultArrayReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBattleResultArrayReq : public ::google::protobuf::Message {
 public:
  TBattleResultArrayReq();
  virtual ~TBattleResultArrayReq();

  TBattleResultArrayReq(const TBattleResultArrayReq& from);

  inline TBattleResultArrayReq& operator=(const TBattleResultArrayReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBattleResultArrayReq& default_instance();

  void Swap(TBattleResultArrayReq* other);

  // implements Message ----------------------------------------------

  TBattleResultArrayReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBattleResultArrayReq& from);
  void MergeFrom(const TBattleResultArrayReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 ridArr = 1;
  inline int ridarr_size() const;
  inline void clear_ridarr();
  static const int kRidArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBattleResultArrayReq</name>
  	<Function>
  		<name>ridarr</name>
  		<replaceName>ridArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_ridarr</name>
  		<replaceName>ridArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_ridarr</name>
  		<replaceName>ridArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ridarr</name>
  		<replaceName>ridArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>ridarr_size</name>
  		<replaceName>ridArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 ridarr(int index) const;
  inline void set_ridarr(int index, ::google::protobuf::uint64 value);
  inline void add_ridarr(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      ridarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_ridarr();

  // optional string ServerId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBattleResultArrayReq</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // @@protoc_insertion_point(class_scope:pb.TBattleResultArrayReq)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > ridarr_;
  ::std::string* serverid_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TBattleResultArrayReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBattleResultArrayRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBattleResultArrayRsp : public ::google::protobuf::Message {
 public:
  TBattleResultArrayRsp();
  virtual ~TBattleResultArrayRsp();

  TBattleResultArrayRsp(const TBattleResultArrayRsp& from);

  inline TBattleResultArrayRsp& operator=(const TBattleResultArrayRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBattleResultArrayRsp& default_instance();

  void Swap(TBattleResultArrayRsp* other);

  // implements Message ----------------------------------------------

  TBattleResultArrayRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBattleResultArrayRsp& from);
  void MergeFrom(const TBattleResultArrayRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes battleResultArr = 1;
  inline int battleresultarr_size() const;
  inline void clear_battleresultarr();
  static const int kBattleResultArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBattleResultArrayRsp</name>
  	<Function>
  		<name>battleresultarr</name>
  		<replaceName>battleResultArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_battleresultarr</name>
  		<replaceName>battleResultArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_battleresultarr</name>
  		<replaceName>battleResultArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleresultarr</name>
  		<replaceName>battleResultArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>battleresultarr_size</name>
  		<replaceName>battleResultArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleresultarr(int index) const;
  inline ::std::string* mutable_battleresultarr(int index);
  inline void set_battleresultarr(int index, const ::std::string& value);
  inline void set_battleresultarr(int index, const char* value);
  inline void set_battleresultarr(int index, const void* value, size_t size);
  inline ::std::string* add_battleresultarr();
  inline void add_battleresultarr(const ::std::string& value);
  inline void add_battleresultarr(const char* value);
  inline void add_battleresultarr(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& battleresultarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_battleresultarr();

  // @@protoc_insertion_point(class_scope:pb.TBattleResultArrayRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> battleresultarr_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TBattleResultArrayRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGetBattleArgsWithUidListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGetBattleArgsWithUidListReq : public ::google::protobuf::Message {
 public:
  TGetBattleArgsWithUidListReq();
  virtual ~TGetBattleArgsWithUidListReq();

  TGetBattleArgsWithUidListReq(const TGetBattleArgsWithUidListReq& from);

  inline TGetBattleArgsWithUidListReq& operator=(const TGetBattleArgsWithUidListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGetBattleArgsWithUidListReq& default_instance();

  void Swap(TGetBattleArgsWithUidListReq* other);

  // implements Message ----------------------------------------------

  TGetBattleArgsWithUidListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGetBattleArgsWithUidListReq& from);
  void MergeFrom(const TGetBattleArgsWithUidListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 UidArr = 1;
  inline int uidarr_size() const;
  inline void clear_uidarr();
  static const int kUidArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGetBattleArgsWithUidListReq</name>
  	<Function>
  		<name>uidarr</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_uidarr</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_uidarr</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uidarr</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>uidarr_size</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uidarr(int index) const;
  inline void set_uidarr(int index, ::google::protobuf::uint64 value);
  inline void add_uidarr(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      uidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_uidarr();

  // @@protoc_insertion_point(class_scope:pb.TGetBattleArgsWithUidListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > uidarr_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TGetBattleArgsWithUidListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TWarRidingInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TWarRidingInfo : public ::google::protobuf::Message {
 public:
  TWarRidingInfo();
  virtual ~TWarRidingInfo();

  TWarRidingInfo(const TWarRidingInfo& from);

  inline TWarRidingInfo& operator=(const TWarRidingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TWarRidingInfo& default_instance();

  void Swap(TWarRidingInfo* other);

  // implements Message ----------------------------------------------

  TWarRidingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TWarRidingInfo& from);
  void MergeFrom(const TWarRidingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TWarRidingInfo</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional uint64 FightForce = 2;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TWarRidingInfo</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // optional uint32 SkillId = 3;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TWarRidingInfo</name>
  	<Function>
  		<name>skillid</name>
  		<replaceName>SkillId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skillid</name>
  		<replaceName>SkillId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillid</name>
  		<replaceName>SkillId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional uint32 TrampleSkillId = 4;
  inline bool has_trampleskillid() const;
  inline void clear_trampleskillid();
  static const int kTrampleSkillIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TWarRidingInfo</name>
  	<Function>
  		<name>trampleskillid</name>
  		<replaceName>TrampleSkillId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_trampleskillid</name>
  		<replaceName>TrampleSkillId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_trampleskillid</name>
  		<replaceName>TrampleSkillId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 trampleskillid() const;
  inline void set_trampleskillid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TWarRidingInfo)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_trampleskillid();
  inline void clear_has_trampleskillid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint32 tid_;
  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 trampleskillid_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TWarRidingInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGetBattleArgsWithUidReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGetBattleArgsWithUidReq : public ::google::protobuf::Message {
 public:
  TGetBattleArgsWithUidReq();
  virtual ~TGetBattleArgsWithUidReq();

  TGetBattleArgsWithUidReq(const TGetBattleArgsWithUidReq& from);

  inline TGetBattleArgsWithUidReq& operator=(const TGetBattleArgsWithUidReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGetBattleArgsWithUidReq& default_instance();

  void Swap(TGetBattleArgsWithUidReq* other);

  // implements Message ----------------------------------------------

  TGetBattleArgsWithUidReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGetBattleArgsWithUidReq& from);
  void MergeFrom(const TGetBattleArgsWithUidReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid1 = 1;
  inline bool has_uid1() const;
  inline void clear_uid1();
  static const int kUid1FieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGetBattleArgsWithUidReq</name>
  	<Function>
  		<name>uid1</name>
  		<replaceName>Uid1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid1</name>
  		<replaceName>Uid1</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid1</name>
  		<replaceName>Uid1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid1() const;
  inline void set_uid1(::google::protobuf::uint64 value);

  // optional uint64 Uid2 = 2;
  inline bool has_uid2() const;
  inline void clear_uid2();
  static const int kUid2FieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGetBattleArgsWithUidReq</name>
  	<Function>
  		<name>uid2</name>
  		<replaceName>Uid2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid2</name>
  		<replaceName>Uid2</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid2</name>
  		<replaceName>Uid2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid2() const;
  inline void set_uid2(::google::protobuf::uint64 value);

  // optional uint32 BattleId = 3;
  inline bool has_battleid() const;
  inline void clear_battleid();
  static const int kBattleIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGetBattleArgsWithUidReq</name>
  	<Function>
  		<name>battleid</name>
  		<replaceName>BattleId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleid</name>
  		<replaceName>BattleId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleid</name>
  		<replaceName>BattleId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 battleid() const;
  inline void set_battleid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGetBattleArgsWithUidReq)
 private:
  inline void set_has_uid1();
  inline void clear_has_uid1();
  inline void set_has_uid2();
  inline void clear_has_uid2();
  inline void set_has_battleid();
  inline void clear_has_battleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid1_;
  ::google::protobuf::uint64 uid2_;
  ::google::protobuf::uint32 battleid_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TGetBattleArgsWithUidReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGetBattleArgsFromMajorSpecifyWarRiding</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGetBattleArgsFromMajorSpecifyWarRiding : public ::google::protobuf::Message {
 public:
  TGetBattleArgsFromMajorSpecifyWarRiding();
  virtual ~TGetBattleArgsFromMajorSpecifyWarRiding();

  TGetBattleArgsFromMajorSpecifyWarRiding(const TGetBattleArgsFromMajorSpecifyWarRiding& from);

  inline TGetBattleArgsFromMajorSpecifyWarRiding& operator=(const TGetBattleArgsFromMajorSpecifyWarRiding& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGetBattleArgsFromMajorSpecifyWarRiding& default_instance();

  void Swap(TGetBattleArgsFromMajorSpecifyWarRiding* other);

  // implements Message ----------------------------------------------

  TGetBattleArgsFromMajorSpecifyWarRiding* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGetBattleArgsFromMajorSpecifyWarRiding& from);
  void MergeFrom(const TGetBattleArgsFromMajorSpecifyWarRiding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGetBattleArgsFromMajorSpecifyWarRiding</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // repeated uint32 WarRidingTidArr = 2;
  inline int warridingtidarr_size() const;
  inline void clear_warridingtidarr();
  static const int kWarRidingTidArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGetBattleArgsFromMajorSpecifyWarRiding</name>
  	<Function>
  		<name>warridingtidarr</name>
  		<replaceName>WarRidingTidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_warridingtidarr</name>
  		<replaceName>WarRidingTidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_warridingtidarr</name>
  		<replaceName>WarRidingTidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_warridingtidarr</name>
  		<replaceName>WarRidingTidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>warridingtidarr_size</name>
  		<replaceName>WarRidingTidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 warridingtidarr(int index) const;
  inline void set_warridingtidarr(int index, ::google::protobuf::uint32 value);
  inline void add_warridingtidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      warridingtidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_warridingtidarr();

  // optional uint32 WarRidingLevel = 3;
  inline bool has_warridinglevel() const;
  inline void clear_warridinglevel();
  static const int kWarRidingLevelFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGetBattleArgsFromMajorSpecifyWarRiding</name>
  	<Function>
  		<name>warridinglevel</name>
  		<replaceName>WarRidingLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_warridinglevel</name>
  		<replaceName>WarRidingLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_warridinglevel</name>
  		<replaceName>WarRidingLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 warridinglevel() const;
  inline void set_warridinglevel(::google::protobuf::uint32 value);

  // optional uint32 WarRidingAdvLv = 4;
  inline bool has_warridingadvlv() const;
  inline void clear_warridingadvlv();
  static const int kWarRidingAdvLvFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGetBattleArgsFromMajorSpecifyWarRiding</name>
  	<Function>
  		<name>warridingadvlv</name>
  		<replaceName>WarRidingAdvLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_warridingadvlv</name>
  		<replaceName>WarRidingAdvLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_warridingadvlv</name>
  		<replaceName>WarRidingAdvLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 warridingadvlv() const;
  inline void set_warridingadvlv(::google::protobuf::uint32 value);

  // optional uint32 WarRidingStar = 5;
  inline bool has_warridingstar() const;
  inline void clear_warridingstar();
  static const int kWarRidingStarFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGetBattleArgsFromMajorSpecifyWarRiding</name>
  	<Function>
  		<name>warridingstar</name>
  		<replaceName>WarRidingStar</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_warridingstar</name>
  		<replaceName>WarRidingStar</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_warridingstar</name>
  		<replaceName>WarRidingStar</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 warridingstar() const;
  inline void set_warridingstar(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGetBattleArgsFromMajorSpecifyWarRiding)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_warridinglevel();
  inline void clear_has_warridinglevel();
  inline void set_has_warridingadvlv();
  inline void clear_has_warridingadvlv();
  inline void set_has_warridingstar();
  inline void clear_has_warridingstar();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > warridingtidarr_;
  ::google::protobuf::uint32 warridinglevel_;
  ::google::protobuf::uint32 warridingadvlv_;
  ::google::protobuf::uint32 warridingstar_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TGetBattleArgsFromMajorSpecifyWarRiding* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBattleSoulInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBattleSoulInfo : public ::google::protobuf::Message {
 public:
  TBattleSoulInfo();
  virtual ~TBattleSoulInfo();

  TBattleSoulInfo(const TBattleSoulInfo& from);

  inline TBattleSoulInfo& operator=(const TBattleSoulInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBattleSoulInfo& default_instance();

  void Swap(TBattleSoulInfo* other);

  // implements Message ----------------------------------------------

  TBattleSoulInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBattleSoulInfo& from);
  void MergeFrom(const TBattleSoulInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SkillId = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBattleSoulInfo</name>
  	<Function>
  		<name>skillid</name>
  		<replaceName>SkillId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skillid</name>
  		<replaceName>SkillId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillid</name>
  		<replaceName>SkillId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // repeated uint32 TriggerSkillIdArray = 2;
  inline int triggerskillidarray_size() const;
  inline void clear_triggerskillidarray();
  static const int kTriggerSkillIdArrayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBattleSoulInfo</name>
  	<Function>
  		<name>triggerskillidarray</name>
  		<replaceName>TriggerSkillIdArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_triggerskillidarray</name>
  		<replaceName>TriggerSkillIdArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_triggerskillidarray</name>
  		<replaceName>TriggerSkillIdArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_triggerskillidarray</name>
  		<replaceName>TriggerSkillIdArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>triggerskillidarray_size</name>
  		<replaceName>TriggerSkillIdArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 triggerskillidarray(int index) const;
  inline void set_triggerskillidarray(int index, ::google::protobuf::uint32 value);
  inline void add_triggerskillidarray(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      triggerskillidarray() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_triggerskillidarray();

  // @@protoc_insertion_point(class_scope:pb.TBattleSoulInfo)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > triggerskillidarray_;
  ::google::protobuf::uint32 skillid_;
  friend void  protobuf_AddDesc_net_2fBattleBase_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleBase_2eproto();

  void InitAsDefaultInstance();
  static TBattleSoulInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// TSkillStatistics

// optional uint32 SkillId = 1;
inline bool TSkillStatistics::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSkillStatistics::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSkillStatistics::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSkillStatistics::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 TSkillStatistics::skillid() const {
  // @@protoc_insertion_point(field_get:pb.TSkillStatistics.SkillId)
  return skillid_;
}
inline void TSkillStatistics::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSkillStatistics.SkillId)
}

// optional uint32 Count = 2;
inline bool TSkillStatistics::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSkillStatistics::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSkillStatistics::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSkillStatistics::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 TSkillStatistics::count() const {
  // @@protoc_insertion_point(field_get:pb.TSkillStatistics.Count)
  return count_;
}
inline void TSkillStatistics::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pb.TSkillStatistics.Count)
}

// optional uint32 TotalEffectTarget = 3;
inline bool TSkillStatistics::has_totaleffecttarget() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TSkillStatistics::set_has_totaleffecttarget() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TSkillStatistics::clear_has_totaleffecttarget() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TSkillStatistics::clear_totaleffecttarget() {
  totaleffecttarget_ = 0u;
  clear_has_totaleffecttarget();
}
inline ::google::protobuf::uint32 TSkillStatistics::totaleffecttarget() const {
  // @@protoc_insertion_point(field_get:pb.TSkillStatistics.TotalEffectTarget)
  return totaleffecttarget_;
}
inline void TSkillStatistics::set_totaleffecttarget(::google::protobuf::uint32 value) {
  set_has_totaleffecttarget();
  totaleffecttarget_ = value;
  // @@protoc_insertion_point(field_set:pb.TSkillStatistics.TotalEffectTarget)
}

// optional uint64 TotalPhycialDamage = 4;
inline bool TSkillStatistics::has_totalphycialdamage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TSkillStatistics::set_has_totalphycialdamage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TSkillStatistics::clear_has_totalphycialdamage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TSkillStatistics::clear_totalphycialdamage() {
  totalphycialdamage_ = GOOGLE_ULONGLONG(0);
  clear_has_totalphycialdamage();
}
inline ::google::protobuf::uint64 TSkillStatistics::totalphycialdamage() const {
  // @@protoc_insertion_point(field_get:pb.TSkillStatistics.TotalPhycialDamage)
  return totalphycialdamage_;
}
inline void TSkillStatistics::set_totalphycialdamage(::google::protobuf::uint64 value) {
  set_has_totalphycialdamage();
  totalphycialdamage_ = value;
  // @@protoc_insertion_point(field_set:pb.TSkillStatistics.TotalPhycialDamage)
}

// optional uint64 TotalMagicalDamage = 5;
inline bool TSkillStatistics::has_totalmagicaldamage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TSkillStatistics::set_has_totalmagicaldamage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TSkillStatistics::clear_has_totalmagicaldamage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TSkillStatistics::clear_totalmagicaldamage() {
  totalmagicaldamage_ = GOOGLE_ULONGLONG(0);
  clear_has_totalmagicaldamage();
}
inline ::google::protobuf::uint64 TSkillStatistics::totalmagicaldamage() const {
  // @@protoc_insertion_point(field_get:pb.TSkillStatistics.TotalMagicalDamage)
  return totalmagicaldamage_;
}
inline void TSkillStatistics::set_totalmagicaldamage(::google::protobuf::uint64 value) {
  set_has_totalmagicaldamage();
  totalmagicaldamage_ = value;
  // @@protoc_insertion_point(field_set:pb.TSkillStatistics.TotalMagicalDamage)
}

// optional uint64 TotalHeal = 6;
inline bool TSkillStatistics::has_totalheal() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TSkillStatistics::set_has_totalheal() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TSkillStatistics::clear_has_totalheal() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TSkillStatistics::clear_totalheal() {
  totalheal_ = GOOGLE_ULONGLONG(0);
  clear_has_totalheal();
}
inline ::google::protobuf::uint64 TSkillStatistics::totalheal() const {
  // @@protoc_insertion_point(field_get:pb.TSkillStatistics.TotalHeal)
  return totalheal_;
}
inline void TSkillStatistics::set_totalheal(::google::protobuf::uint64 value) {
  set_has_totalheal();
  totalheal_ = value;
  // @@protoc_insertion_point(field_set:pb.TSkillStatistics.TotalHeal)
}

// optional uint64 TotalSuckBlood = 7;
inline bool TSkillStatistics::has_totalsuckblood() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TSkillStatistics::set_has_totalsuckblood() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TSkillStatistics::clear_has_totalsuckblood() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TSkillStatistics::clear_totalsuckblood() {
  totalsuckblood_ = GOOGLE_ULONGLONG(0);
  clear_has_totalsuckblood();
}
inline ::google::protobuf::uint64 TSkillStatistics::totalsuckblood() const {
  // @@protoc_insertion_point(field_get:pb.TSkillStatistics.TotalSuckBlood)
  return totalsuckblood_;
}
inline void TSkillStatistics::set_totalsuckblood(::google::protobuf::uint64 value) {
  set_has_totalsuckblood();
  totalsuckblood_ = value;
  // @@protoc_insertion_point(field_set:pb.TSkillStatistics.TotalSuckBlood)
}

// optional uint32 CollisionNum = 8;
inline bool TSkillStatistics::has_collisionnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TSkillStatistics::set_has_collisionnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TSkillStatistics::clear_has_collisionnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TSkillStatistics::clear_collisionnum() {
  collisionnum_ = 0u;
  clear_has_collisionnum();
}
inline ::google::protobuf::uint32 TSkillStatistics::collisionnum() const {
  // @@protoc_insertion_point(field_get:pb.TSkillStatistics.CollisionNum)
  return collisionnum_;
}
inline void TSkillStatistics::set_collisionnum(::google::protobuf::uint32 value) {
  set_has_collisionnum();
  collisionnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TSkillStatistics.CollisionNum)
}

// -------------------------------------------------------------------

// TUnitStatistics

// optional uint64 TotalPhycialDamage = 1;
inline bool TUnitStatistics::has_totalphycialdamage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUnitStatistics::set_has_totalphycialdamage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUnitStatistics::clear_has_totalphycialdamage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUnitStatistics::clear_totalphycialdamage() {
  totalphycialdamage_ = GOOGLE_ULONGLONG(0);
  clear_has_totalphycialdamage();
}
inline ::google::protobuf::uint64 TUnitStatistics::totalphycialdamage() const {
  // @@protoc_insertion_point(field_get:pb.TUnitStatistics.TotalPhycialDamage)
  return totalphycialdamage_;
}
inline void TUnitStatistics::set_totalphycialdamage(::google::protobuf::uint64 value) {
  set_has_totalphycialdamage();
  totalphycialdamage_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitStatistics.TotalPhycialDamage)
}

// optional uint64 TotalMagicalDamage = 2;
inline bool TUnitStatistics::has_totalmagicaldamage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUnitStatistics::set_has_totalmagicaldamage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUnitStatistics::clear_has_totalmagicaldamage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUnitStatistics::clear_totalmagicaldamage() {
  totalmagicaldamage_ = GOOGLE_ULONGLONG(0);
  clear_has_totalmagicaldamage();
}
inline ::google::protobuf::uint64 TUnitStatistics::totalmagicaldamage() const {
  // @@protoc_insertion_point(field_get:pb.TUnitStatistics.TotalMagicalDamage)
  return totalmagicaldamage_;
}
inline void TUnitStatistics::set_totalmagicaldamage(::google::protobuf::uint64 value) {
  set_has_totalmagicaldamage();
  totalmagicaldamage_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitStatistics.TotalMagicalDamage)
}

// optional uint64 TotalHeal = 3;
inline bool TUnitStatistics::has_totalheal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUnitStatistics::set_has_totalheal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUnitStatistics::clear_has_totalheal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUnitStatistics::clear_totalheal() {
  totalheal_ = GOOGLE_ULONGLONG(0);
  clear_has_totalheal();
}
inline ::google::protobuf::uint64 TUnitStatistics::totalheal() const {
  // @@protoc_insertion_point(field_get:pb.TUnitStatistics.TotalHeal)
  return totalheal_;
}
inline void TUnitStatistics::set_totalheal(::google::protobuf::uint64 value) {
  set_has_totalheal();
  totalheal_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitStatistics.TotalHeal)
}

// optional uint64 PhycialDamageUndertake = 4;
inline bool TUnitStatistics::has_phycialdamageundertake() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TUnitStatistics::set_has_phycialdamageundertake() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TUnitStatistics::clear_has_phycialdamageundertake() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TUnitStatistics::clear_phycialdamageundertake() {
  phycialdamageundertake_ = GOOGLE_ULONGLONG(0);
  clear_has_phycialdamageundertake();
}
inline ::google::protobuf::uint64 TUnitStatistics::phycialdamageundertake() const {
  // @@protoc_insertion_point(field_get:pb.TUnitStatistics.PhycialDamageUndertake)
  return phycialdamageundertake_;
}
inline void TUnitStatistics::set_phycialdamageundertake(::google::protobuf::uint64 value) {
  set_has_phycialdamageundertake();
  phycialdamageundertake_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitStatistics.PhycialDamageUndertake)
}

// optional uint64 MagicalDamageUndertake = 5;
inline bool TUnitStatistics::has_magicaldamageundertake() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TUnitStatistics::set_has_magicaldamageundertake() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TUnitStatistics::clear_has_magicaldamageundertake() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TUnitStatistics::clear_magicaldamageundertake() {
  magicaldamageundertake_ = GOOGLE_ULONGLONG(0);
  clear_has_magicaldamageundertake();
}
inline ::google::protobuf::uint64 TUnitStatistics::magicaldamageundertake() const {
  // @@protoc_insertion_point(field_get:pb.TUnitStatistics.MagicalDamageUndertake)
  return magicaldamageundertake_;
}
inline void TUnitStatistics::set_magicaldamageundertake(::google::protobuf::uint64 value) {
  set_has_magicaldamageundertake();
  magicaldamageundertake_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitStatistics.MagicalDamageUndertake)
}

// optional uint32 SkillExecuteCount = 6;
inline bool TUnitStatistics::has_skillexecutecount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TUnitStatistics::set_has_skillexecutecount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TUnitStatistics::clear_has_skillexecutecount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TUnitStatistics::clear_skillexecutecount() {
  skillexecutecount_ = 0u;
  clear_has_skillexecutecount();
}
inline ::google::protobuf::uint32 TUnitStatistics::skillexecutecount() const {
  // @@protoc_insertion_point(field_get:pb.TUnitStatistics.SkillExecuteCount)
  return skillexecutecount_;
}
inline void TUnitStatistics::set_skillexecutecount(::google::protobuf::uint32 value) {
  set_has_skillexecutecount();
  skillexecutecount_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitStatistics.SkillExecuteCount)
}

// optional uint32 DodgeCount = 7;
inline bool TUnitStatistics::has_dodgecount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TUnitStatistics::set_has_dodgecount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TUnitStatistics::clear_has_dodgecount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TUnitStatistics::clear_dodgecount() {
  dodgecount_ = 0u;
  clear_has_dodgecount();
}
inline ::google::protobuf::uint32 TUnitStatistics::dodgecount() const {
  // @@protoc_insertion_point(field_get:pb.TUnitStatistics.DodgeCount)
  return dodgecount_;
}
inline void TUnitStatistics::set_dodgecount(::google::protobuf::uint32 value) {
  set_has_dodgecount();
  dodgecount_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitStatistics.DodgeCount)
}

// optional uint32 PhysicalBase = 8;
inline bool TUnitStatistics::has_physicalbase() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TUnitStatistics::set_has_physicalbase() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TUnitStatistics::clear_has_physicalbase() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TUnitStatistics::clear_physicalbase() {
  physicalbase_ = 0u;
  clear_has_physicalbase();
}
inline ::google::protobuf::uint32 TUnitStatistics::physicalbase() const {
  // @@protoc_insertion_point(field_get:pb.TUnitStatistics.PhysicalBase)
  return physicalbase_;
}
inline void TUnitStatistics::set_physicalbase(::google::protobuf::uint32 value) {
  set_has_physicalbase();
  physicalbase_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitStatistics.PhysicalBase)
}

// optional uint32 ExemptionCount = 9;
inline bool TUnitStatistics::has_exemptioncount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TUnitStatistics::set_has_exemptioncount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TUnitStatistics::clear_has_exemptioncount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TUnitStatistics::clear_exemptioncount() {
  exemptioncount_ = 0u;
  clear_has_exemptioncount();
}
inline ::google::protobuf::uint32 TUnitStatistics::exemptioncount() const {
  // @@protoc_insertion_point(field_get:pb.TUnitStatistics.ExemptionCount)
  return exemptioncount_;
}
inline void TUnitStatistics::set_exemptioncount(::google::protobuf::uint32 value) {
  set_has_exemptioncount();
  exemptioncount_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitStatistics.ExemptionCount)
}

// optional uint32 MagicalBase = 10;
inline bool TUnitStatistics::has_magicalbase() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TUnitStatistics::set_has_magicalbase() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TUnitStatistics::clear_has_magicalbase() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TUnitStatistics::clear_magicalbase() {
  magicalbase_ = 0u;
  clear_has_magicalbase();
}
inline ::google::protobuf::uint32 TUnitStatistics::magicalbase() const {
  // @@protoc_insertion_point(field_get:pb.TUnitStatistics.MagicalBase)
  return magicalbase_;
}
inline void TUnitStatistics::set_magicalbase(::google::protobuf::uint32 value) {
  set_has_magicalbase();
  magicalbase_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitStatistics.MagicalBase)
}

// optional uint32 ParryCount = 11;
inline bool TUnitStatistics::has_parrycount() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TUnitStatistics::set_has_parrycount() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TUnitStatistics::clear_has_parrycount() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TUnitStatistics::clear_parrycount() {
  parrycount_ = 0u;
  clear_has_parrycount();
}
inline ::google::protobuf::uint32 TUnitStatistics::parrycount() const {
  // @@protoc_insertion_point(field_get:pb.TUnitStatistics.ParryCount)
  return parrycount_;
}
inline void TUnitStatistics::set_parrycount(::google::protobuf::uint32 value) {
  set_has_parrycount();
  parrycount_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitStatistics.ParryCount)
}

// optional uint32 ResistCount = 12;
inline bool TUnitStatistics::has_resistcount() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TUnitStatistics::set_has_resistcount() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TUnitStatistics::clear_has_resistcount() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TUnitStatistics::clear_resistcount() {
  resistcount_ = 0u;
  clear_has_resistcount();
}
inline ::google::protobuf::uint32 TUnitStatistics::resistcount() const {
  // @@protoc_insertion_point(field_get:pb.TUnitStatistics.ResistCount)
  return resistcount_;
}
inline void TUnitStatistics::set_resistcount(::google::protobuf::uint32 value) {
  set_has_resistcount();
  resistcount_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitStatistics.ResistCount)
}

// optional uint32 CriticalDamageCount = 13;
inline bool TUnitStatistics::has_criticaldamagecount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TUnitStatistics::set_has_criticaldamagecount() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TUnitStatistics::clear_has_criticaldamagecount() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TUnitStatistics::clear_criticaldamagecount() {
  criticaldamagecount_ = 0u;
  clear_has_criticaldamagecount();
}
inline ::google::protobuf::uint32 TUnitStatistics::criticaldamagecount() const {
  // @@protoc_insertion_point(field_get:pb.TUnitStatistics.CriticalDamageCount)
  return criticaldamagecount_;
}
inline void TUnitStatistics::set_criticaldamagecount(::google::protobuf::uint32 value) {
  set_has_criticaldamagecount();
  criticaldamagecount_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitStatistics.CriticalDamageCount)
}

// optional uint32 CriticalDamageBase = 14;
inline bool TUnitStatistics::has_criticaldamagebase() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TUnitStatistics::set_has_criticaldamagebase() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TUnitStatistics::clear_has_criticaldamagebase() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TUnitStatistics::clear_criticaldamagebase() {
  criticaldamagebase_ = 0u;
  clear_has_criticaldamagebase();
}
inline ::google::protobuf::uint32 TUnitStatistics::criticaldamagebase() const {
  // @@protoc_insertion_point(field_get:pb.TUnitStatistics.CriticalDamageBase)
  return criticaldamagebase_;
}
inline void TUnitStatistics::set_criticaldamagebase(::google::protobuf::uint32 value) {
  set_has_criticaldamagebase();
  criticaldamagebase_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitStatistics.CriticalDamageBase)
}

// optional uint32 CriticalHealCount = 15;
inline bool TUnitStatistics::has_criticalhealcount() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TUnitStatistics::set_has_criticalhealcount() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TUnitStatistics::clear_has_criticalhealcount() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TUnitStatistics::clear_criticalhealcount() {
  criticalhealcount_ = 0u;
  clear_has_criticalhealcount();
}
inline ::google::protobuf::uint32 TUnitStatistics::criticalhealcount() const {
  // @@protoc_insertion_point(field_get:pb.TUnitStatistics.CriticalHealCount)
  return criticalhealcount_;
}
inline void TUnitStatistics::set_criticalhealcount(::google::protobuf::uint32 value) {
  set_has_criticalhealcount();
  criticalhealcount_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitStatistics.CriticalHealCount)
}

// optional uint32 CriticalHealBase = 16;
inline bool TUnitStatistics::has_criticalhealbase() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TUnitStatistics::set_has_criticalhealbase() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TUnitStatistics::clear_has_criticalhealbase() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TUnitStatistics::clear_criticalhealbase() {
  criticalhealbase_ = 0u;
  clear_has_criticalhealbase();
}
inline ::google::protobuf::uint32 TUnitStatistics::criticalhealbase() const {
  // @@protoc_insertion_point(field_get:pb.TUnitStatistics.CriticalHealBase)
  return criticalhealbase_;
}
inline void TUnitStatistics::set_criticalhealbase(::google::protobuf::uint32 value) {
  set_has_criticalhealbase();
  criticalhealbase_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitStatistics.CriticalHealBase)
}

// optional uint32 BeCriticalDamageCount = 17;
inline bool TUnitStatistics::has_becriticaldamagecount() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TUnitStatistics::set_has_becriticaldamagecount() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TUnitStatistics::clear_has_becriticaldamagecount() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TUnitStatistics::clear_becriticaldamagecount() {
  becriticaldamagecount_ = 0u;
  clear_has_becriticaldamagecount();
}
inline ::google::protobuf::uint32 TUnitStatistics::becriticaldamagecount() const {
  // @@protoc_insertion_point(field_get:pb.TUnitStatistics.BeCriticalDamageCount)
  return becriticaldamagecount_;
}
inline void TUnitStatistics::set_becriticaldamagecount(::google::protobuf::uint32 value) {
  set_has_becriticaldamagecount();
  becriticaldamagecount_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitStatistics.BeCriticalDamageCount)
}

// optional uint32 BeDamageBase = 18;
inline bool TUnitStatistics::has_bedamagebase() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TUnitStatistics::set_has_bedamagebase() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TUnitStatistics::clear_has_bedamagebase() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TUnitStatistics::clear_bedamagebase() {
  bedamagebase_ = 0u;
  clear_has_bedamagebase();
}
inline ::google::protobuf::uint32 TUnitStatistics::bedamagebase() const {
  // @@protoc_insertion_point(field_get:pb.TUnitStatistics.BeDamageBase)
  return bedamagebase_;
}
inline void TUnitStatistics::set_bedamagebase(::google::protobuf::uint32 value) {
  set_has_bedamagebase();
  bedamagebase_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitStatistics.BeDamageBase)
}

// repeated .pb.TSkillStatistics SkillStatisticsArr = 19;
inline int TUnitStatistics::skillstatisticsarr_size() const {
  return skillstatisticsarr_.size();
}
inline void TUnitStatistics::clear_skillstatisticsarr() {
  skillstatisticsarr_.Clear();
}
inline const ::pb::TSkillStatistics& TUnitStatistics::skillstatisticsarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUnitStatistics.SkillStatisticsArr)
  return skillstatisticsarr_.Get(index);
}
inline ::pb::TSkillStatistics* TUnitStatistics::mutable_skillstatisticsarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TUnitStatistics.SkillStatisticsArr)
  return skillstatisticsarr_.Mutable(index);
}
inline ::pb::TSkillStatistics* TUnitStatistics::add_skillstatisticsarr() {
  // @@protoc_insertion_point(field_add:pb.TUnitStatistics.SkillStatisticsArr)
  return skillstatisticsarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSkillStatistics >&
TUnitStatistics::skillstatisticsarr() const {
  // @@protoc_insertion_point(field_list:pb.TUnitStatistics.SkillStatisticsArr)
  return skillstatisticsarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSkillStatistics >*
TUnitStatistics::mutable_skillstatisticsarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUnitStatistics.SkillStatisticsArr)
  return &skillstatisticsarr_;
}

// optional uint64 TotalSuckBlood = 20;
inline bool TUnitStatistics::has_totalsuckblood() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TUnitStatistics::set_has_totalsuckblood() {
  _has_bits_[0] |= 0x00080000u;
}
inline void TUnitStatistics::clear_has_totalsuckblood() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void TUnitStatistics::clear_totalsuckblood() {
  totalsuckblood_ = GOOGLE_ULONGLONG(0);
  clear_has_totalsuckblood();
}
inline ::google::protobuf::uint64 TUnitStatistics::totalsuckblood() const {
  // @@protoc_insertion_point(field_get:pb.TUnitStatistics.TotalSuckBlood)
  return totalsuckblood_;
}
inline void TUnitStatistics::set_totalsuckblood(::google::protobuf::uint64 value) {
  set_has_totalsuckblood();
  totalsuckblood_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitStatistics.TotalSuckBlood)
}

// optional uint32 TimeToLive = 21;
inline bool TUnitStatistics::has_timetolive() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TUnitStatistics::set_has_timetolive() {
  _has_bits_[0] |= 0x00100000u;
}
inline void TUnitStatistics::clear_has_timetolive() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void TUnitStatistics::clear_timetolive() {
  timetolive_ = 0u;
  clear_has_timetolive();
}
inline ::google::protobuf::uint32 TUnitStatistics::timetolive() const {
  // @@protoc_insertion_point(field_get:pb.TUnitStatistics.TimeToLive)
  return timetolive_;
}
inline void TUnitStatistics::set_timetolive(::google::protobuf::uint32 value) {
  set_has_timetolive();
  timetolive_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitStatistics.TimeToLive)
}

// optional uint64 RealHeal = 22;
inline bool TUnitStatistics::has_realheal() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void TUnitStatistics::set_has_realheal() {
  _has_bits_[0] |= 0x00200000u;
}
inline void TUnitStatistics::clear_has_realheal() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void TUnitStatistics::clear_realheal() {
  realheal_ = GOOGLE_ULONGLONG(0);
  clear_has_realheal();
}
inline ::google::protobuf::uint64 TUnitStatistics::realheal() const {
  // @@protoc_insertion_point(field_get:pb.TUnitStatistics.RealHeal)
  return realheal_;
}
inline void TUnitStatistics::set_realheal(::google::protobuf::uint64 value) {
  set_has_realheal();
  realheal_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitStatistics.RealHeal)
}

// optional uint64 TotalAbsorbBlood = 23;
inline bool TUnitStatistics::has_totalabsorbblood() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void TUnitStatistics::set_has_totalabsorbblood() {
  _has_bits_[0] |= 0x00400000u;
}
inline void TUnitStatistics::clear_has_totalabsorbblood() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void TUnitStatistics::clear_totalabsorbblood() {
  totalabsorbblood_ = GOOGLE_ULONGLONG(0);
  clear_has_totalabsorbblood();
}
inline ::google::protobuf::uint64 TUnitStatistics::totalabsorbblood() const {
  // @@protoc_insertion_point(field_get:pb.TUnitStatistics.TotalAbsorbBlood)
  return totalabsorbblood_;
}
inline void TUnitStatistics::set_totalabsorbblood(::google::protobuf::uint64 value) {
  set_has_totalabsorbblood();
  totalabsorbblood_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitStatistics.TotalAbsorbBlood)
}

// -------------------------------------------------------------------

// TTDSingle

// required uint32 Hid = 1;
inline bool TTDSingle::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTDSingle::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTDSingle::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTDSingle::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TTDSingle::hid() const {
  // @@protoc_insertion_point(field_get:pb.TTDSingle.Hid)
  return hid_;
}
inline void TTDSingle::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTDSingle.Hid)
}

// required uint32 Pos = 2;
inline bool TTDSingle::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTDSingle::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTDSingle::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTDSingle::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TTDSingle::pos() const {
  // @@protoc_insertion_point(field_get:pb.TTDSingle.Pos)
  return pos_;
}
inline void TTDSingle::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TTDSingle.Pos)
}

// optional int32 Wave = 3;
inline bool TTDSingle::has_wave() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTDSingle::set_has_wave() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTDSingle::clear_has_wave() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTDSingle::clear_wave() {
  wave_ = 0;
  clear_has_wave();
}
inline ::google::protobuf::int32 TTDSingle::wave() const {
  // @@protoc_insertion_point(field_get:pb.TTDSingle.Wave)
  return wave_;
}
inline void TTDSingle::set_wave(::google::protobuf::int32 value) {
  set_has_wave();
  wave_ = value;
  // @@protoc_insertion_point(field_set:pb.TTDSingle.Wave)
}

// optional int32 PathIndex = 4;
inline bool TTDSingle::has_pathindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TTDSingle::set_has_pathindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TTDSingle::clear_has_pathindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TTDSingle::clear_pathindex() {
  pathindex_ = 0;
  clear_has_pathindex();
}
inline ::google::protobuf::int32 TTDSingle::pathindex() const {
  // @@protoc_insertion_point(field_get:pb.TTDSingle.PathIndex)
  return pathindex_;
}
inline void TTDSingle::set_pathindex(::google::protobuf::int32 value) {
  set_has_pathindex();
  pathindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TTDSingle.PathIndex)
}

// optional int32 Energy = 5;
inline bool TTDSingle::has_energy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TTDSingle::set_has_energy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TTDSingle::clear_has_energy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TTDSingle::clear_energy() {
  energy_ = 0;
  clear_has_energy();
}
inline ::google::protobuf::int32 TTDSingle::energy() const {
  // @@protoc_insertion_point(field_get:pb.TTDSingle.Energy)
  return energy_;
}
inline void TTDSingle::set_energy(::google::protobuf::int32 value) {
  set_has_energy();
  energy_ = value;
  // @@protoc_insertion_point(field_set:pb.TTDSingle.Energy)
}

// -------------------------------------------------------------------

// TTDTimeInfo

// required uint32 GameTime = 1;
inline bool TTDTimeInfo::has_gametime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTDTimeInfo::set_has_gametime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTDTimeInfo::clear_has_gametime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTDTimeInfo::clear_gametime() {
  gametime_ = 0u;
  clear_has_gametime();
}
inline ::google::protobuf::uint32 TTDTimeInfo::gametime() const {
  // @@protoc_insertion_point(field_get:pb.TTDTimeInfo.GameTime)
  return gametime_;
}
inline void TTDTimeInfo::set_gametime(::google::protobuf::uint32 value) {
  set_has_gametime();
  gametime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTDTimeInfo.GameTime)
}

// repeated .pb.TTDSingle EnemyArr = 2;
inline int TTDTimeInfo::enemyarr_size() const {
  return enemyarr_.size();
}
inline void TTDTimeInfo::clear_enemyarr() {
  enemyarr_.Clear();
}
inline const ::pb::TTDSingle& TTDTimeInfo::enemyarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTDTimeInfo.EnemyArr)
  return enemyarr_.Get(index);
}
inline ::pb::TTDSingle* TTDTimeInfo::mutable_enemyarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTDTimeInfo.EnemyArr)
  return enemyarr_.Mutable(index);
}
inline ::pb::TTDSingle* TTDTimeInfo::add_enemyarr() {
  // @@protoc_insertion_point(field_add:pb.TTDTimeInfo.EnemyArr)
  return enemyarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTDSingle >&
TTDTimeInfo::enemyarr() const {
  // @@protoc_insertion_point(field_list:pb.TTDTimeInfo.EnemyArr)
  return enemyarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTDSingle >*
TTDTimeInfo::mutable_enemyarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTDTimeInfo.EnemyArr)
  return &enemyarr_;
}

// -------------------------------------------------------------------

// TSkillCount

// required uint32 SkillId = 1;
inline bool TSkillCount::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSkillCount::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSkillCount::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSkillCount::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 TSkillCount::skillid() const {
  // @@protoc_insertion_point(field_get:pb.TSkillCount.SkillId)
  return skillid_;
}
inline void TSkillCount::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSkillCount.SkillId)
}

// required uint32 Count = 2;
inline bool TSkillCount::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSkillCount::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSkillCount::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSkillCount::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 TSkillCount::count() const {
  // @@protoc_insertion_point(field_get:pb.TSkillCount.Count)
  return count_;
}
inline void TSkillCount::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pb.TSkillCount.Count)
}

// -------------------------------------------------------------------

// TSkillCountInfo

// repeated .pb.TSkillCount SkillCountArr = 1;
inline int TSkillCountInfo::skillcountarr_size() const {
  return skillcountarr_.size();
}
inline void TSkillCountInfo::clear_skillcountarr() {
  skillcountarr_.Clear();
}
inline const ::pb::TSkillCount& TSkillCountInfo::skillcountarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSkillCountInfo.SkillCountArr)
  return skillcountarr_.Get(index);
}
inline ::pb::TSkillCount* TSkillCountInfo::mutable_skillcountarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSkillCountInfo.SkillCountArr)
  return skillcountarr_.Mutable(index);
}
inline ::pb::TSkillCount* TSkillCountInfo::add_skillcountarr() {
  // @@protoc_insertion_point(field_add:pb.TSkillCountInfo.SkillCountArr)
  return skillcountarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSkillCount >&
TSkillCountInfo::skillcountarr() const {
  // @@protoc_insertion_point(field_list:pb.TSkillCountInfo.SkillCountArr)
  return skillcountarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSkillCount >*
TSkillCountInfo::mutable_skillcountarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSkillCountInfo.SkillCountArr)
  return &skillcountarr_;
}

// -------------------------------------------------------------------

// TPointBuff

// optional int32 PointIndex = 1;
inline bool TPointBuff::has_pointindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPointBuff::set_has_pointindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPointBuff::clear_has_pointindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPointBuff::clear_pointindex() {
  pointindex_ = 0;
  clear_has_pointindex();
}
inline ::google::protobuf::int32 TPointBuff::pointindex() const {
  // @@protoc_insertion_point(field_get:pb.TPointBuff.PointIndex)
  return pointindex_;
}
inline void TPointBuff::set_pointindex(::google::protobuf::int32 value) {
  set_has_pointindex();
  pointindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TPointBuff.PointIndex)
}

// repeated int32 BuffArr = 2;
inline int TPointBuff::buffarr_size() const {
  return buffarr_.size();
}
inline void TPointBuff::clear_buffarr() {
  buffarr_.Clear();
}
inline ::google::protobuf::int32 TPointBuff::buffarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPointBuff.BuffArr)
  return buffarr_.Get(index);
}
inline void TPointBuff::set_buffarr(int index, ::google::protobuf::int32 value) {
  buffarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TPointBuff.BuffArr)
}
inline void TPointBuff::add_buffarr(::google::protobuf::int32 value) {
  buffarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TPointBuff.BuffArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TPointBuff::buffarr() const {
  // @@protoc_insertion_point(field_list:pb.TPointBuff.BuffArr)
  return buffarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TPointBuff::mutable_buffarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPointBuff.BuffArr)
  return &buffarr_;
}

// -------------------------------------------------------------------

// TFriendCD

// optional uint32 Hid = 1;
inline bool TFriendCD::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFriendCD::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFriendCD::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFriendCD::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TFriendCD::hid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendCD.Hid)
  return hid_;
}
inline void TFriendCD::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendCD.Hid)
}

// optional uint32 CD = 2;
inline bool TFriendCD::has_cd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFriendCD::set_has_cd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFriendCD::clear_has_cd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFriendCD::clear_cd() {
  cd_ = 0u;
  clear_has_cd();
}
inline ::google::protobuf::uint32 TFriendCD::cd() const {
  // @@protoc_insertion_point(field_get:pb.TFriendCD.CD)
  return cd_;
}
inline void TFriendCD::set_cd(::google::protobuf::uint32 value) {
  set_has_cd();
  cd_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendCD.CD)
}

// optional uint32 Htid = 3;
inline bool TFriendCD::has_htid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TFriendCD::set_has_htid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TFriendCD::clear_has_htid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TFriendCD::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TFriendCD::htid() const {
  // @@protoc_insertion_point(field_get:pb.TFriendCD.Htid)
  return htid_;
}
inline void TFriendCD::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFriendCD.Htid)
}

// -------------------------------------------------------------------

// TTDRecordInfo

// repeated .pb.TFriendCD FriendCD = 1;
inline int TTDRecordInfo::friendcd_size() const {
  return friendcd_.size();
}
inline void TTDRecordInfo::clear_friendcd() {
  friendcd_.Clear();
}
inline const ::pb::TFriendCD& TTDRecordInfo::friendcd(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTDRecordInfo.FriendCD)
  return friendcd_.Get(index);
}
inline ::pb::TFriendCD* TTDRecordInfo::mutable_friendcd(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTDRecordInfo.FriendCD)
  return friendcd_.Mutable(index);
}
inline ::pb::TFriendCD* TTDRecordInfo::add_friendcd() {
  // @@protoc_insertion_point(field_add:pb.TTDRecordInfo.FriendCD)
  return friendcd_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TFriendCD >&
TTDRecordInfo::friendcd() const {
  // @@protoc_insertion_point(field_list:pb.TTDRecordInfo.FriendCD)
  return friendcd_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TFriendCD >*
TTDRecordInfo::mutable_friendcd() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTDRecordInfo.FriendCD)
  return &friendcd_;
}

// optional uint32 RestEnergy = 2;
inline bool TTDRecordInfo::has_restenergy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTDRecordInfo::set_has_restenergy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTDRecordInfo::clear_has_restenergy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTDRecordInfo::clear_restenergy() {
  restenergy_ = 0u;
  clear_has_restenergy();
}
inline ::google::protobuf::uint32 TTDRecordInfo::restenergy() const {
  // @@protoc_insertion_point(field_get:pb.TTDRecordInfo.RestEnergy)
  return restenergy_;
}
inline void TTDRecordInfo::set_restenergy(::google::protobuf::uint32 value) {
  set_has_restenergy();
  restenergy_ = value;
  // @@protoc_insertion_point(field_set:pb.TTDRecordInfo.RestEnergy)
}

// repeated .pb.TSkillCount SkillCounter = 3;
inline int TTDRecordInfo::skillcounter_size() const {
  return skillcounter_.size();
}
inline void TTDRecordInfo::clear_skillcounter() {
  skillcounter_.Clear();
}
inline const ::pb::TSkillCount& TTDRecordInfo::skillcounter(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTDRecordInfo.SkillCounter)
  return skillcounter_.Get(index);
}
inline ::pb::TSkillCount* TTDRecordInfo::mutable_skillcounter(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTDRecordInfo.SkillCounter)
  return skillcounter_.Mutable(index);
}
inline ::pb::TSkillCount* TTDRecordInfo::add_skillcounter() {
  // @@protoc_insertion_point(field_add:pb.TTDRecordInfo.SkillCounter)
  return skillcounter_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSkillCount >&
TTDRecordInfo::skillcounter() const {
  // @@protoc_insertion_point(field_list:pb.TTDRecordInfo.SkillCounter)
  return skillcounter_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSkillCount >*
TTDRecordInfo::mutable_skillcounter() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTDRecordInfo.SkillCounter)
  return &skillcounter_;
}

// -------------------------------------------------------------------

// TUnitWheelWarRecord

// optional uint32 Hid = 1;
inline bool TUnitWheelWarRecord::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUnitWheelWarRecord::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUnitWheelWarRecord::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUnitWheelWarRecord::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TUnitWheelWarRecord::hid() const {
  // @@protoc_insertion_point(field_get:pb.TUnitWheelWarRecord.Hid)
  return hid_;
}
inline void TUnitWheelWarRecord::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitWheelWarRecord.Hid)
}

// optional uint32 Htid = 2;
inline bool TUnitWheelWarRecord::has_htid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUnitWheelWarRecord::set_has_htid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUnitWheelWarRecord::clear_has_htid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUnitWheelWarRecord::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TUnitWheelWarRecord::htid() const {
  // @@protoc_insertion_point(field_get:pb.TUnitWheelWarRecord.Htid)
  return htid_;
}
inline void TUnitWheelWarRecord::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitWheelWarRecord.Htid)
}

// optional uint64 CurHp = 3;
inline bool TUnitWheelWarRecord::has_curhp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUnitWheelWarRecord::set_has_curhp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUnitWheelWarRecord::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUnitWheelWarRecord::clear_curhp() {
  curhp_ = GOOGLE_ULONGLONG(0);
  clear_has_curhp();
}
inline ::google::protobuf::uint64 TUnitWheelWarRecord::curhp() const {
  // @@protoc_insertion_point(field_get:pb.TUnitWheelWarRecord.CurHp)
  return curhp_;
}
inline void TUnitWheelWarRecord::set_curhp(::google::protobuf::uint64 value) {
  set_has_curhp();
  curhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitWheelWarRecord.CurHp)
}

// optional uint64 MaxHp = 4;
inline bool TUnitWheelWarRecord::has_maxhp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TUnitWheelWarRecord::set_has_maxhp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TUnitWheelWarRecord::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TUnitWheelWarRecord::clear_maxhp() {
  maxhp_ = GOOGLE_ULONGLONG(0);
  clear_has_maxhp();
}
inline ::google::protobuf::uint64 TUnitWheelWarRecord::maxhp() const {
  // @@protoc_insertion_point(field_get:pb.TUnitWheelWarRecord.MaxHp)
  return maxhp_;
}
inline void TUnitWheelWarRecord::set_maxhp(::google::protobuf::uint64 value) {
  set_has_maxhp();
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitWheelWarRecord.MaxHp)
}

// optional uint32 CurRage = 5;
inline bool TUnitWheelWarRecord::has_currage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TUnitWheelWarRecord::set_has_currage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TUnitWheelWarRecord::clear_has_currage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TUnitWheelWarRecord::clear_currage() {
  currage_ = 0u;
  clear_has_currage();
}
inline ::google::protobuf::uint32 TUnitWheelWarRecord::currage() const {
  // @@protoc_insertion_point(field_get:pb.TUnitWheelWarRecord.CurRage)
  return currage_;
}
inline void TUnitWheelWarRecord::set_currage(::google::protobuf::uint32 value) {
  set_has_currage();
  currage_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitWheelWarRecord.CurRage)
}

// optional uint64 DamageOut = 6;
inline bool TUnitWheelWarRecord::has_damageout() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TUnitWheelWarRecord::set_has_damageout() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TUnitWheelWarRecord::clear_has_damageout() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TUnitWheelWarRecord::clear_damageout() {
  damageout_ = GOOGLE_ULONGLONG(0);
  clear_has_damageout();
}
inline ::google::protobuf::uint64 TUnitWheelWarRecord::damageout() const {
  // @@protoc_insertion_point(field_get:pb.TUnitWheelWarRecord.DamageOut)
  return damageout_;
}
inline void TUnitWheelWarRecord::set_damageout(::google::protobuf::uint64 value) {
  set_has_damageout();
  damageout_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitWheelWarRecord.DamageOut)
}

// optional uint64 DamageIn = 7;
inline bool TUnitWheelWarRecord::has_damagein() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TUnitWheelWarRecord::set_has_damagein() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TUnitWheelWarRecord::clear_has_damagein() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TUnitWheelWarRecord::clear_damagein() {
  damagein_ = GOOGLE_ULONGLONG(0);
  clear_has_damagein();
}
inline ::google::protobuf::uint64 TUnitWheelWarRecord::damagein() const {
  // @@protoc_insertion_point(field_get:pb.TUnitWheelWarRecord.DamageIn)
  return damagein_;
}
inline void TUnitWheelWarRecord::set_damagein(::google::protobuf::uint64 value) {
  set_has_damagein();
  damagein_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitWheelWarRecord.DamageIn)
}

// optional uint64 HealOut = 8;
inline bool TUnitWheelWarRecord::has_healout() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TUnitWheelWarRecord::set_has_healout() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TUnitWheelWarRecord::clear_has_healout() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TUnitWheelWarRecord::clear_healout() {
  healout_ = GOOGLE_ULONGLONG(0);
  clear_has_healout();
}
inline ::google::protobuf::uint64 TUnitWheelWarRecord::healout() const {
  // @@protoc_insertion_point(field_get:pb.TUnitWheelWarRecord.HealOut)
  return healout_;
}
inline void TUnitWheelWarRecord::set_healout(::google::protobuf::uint64 value) {
  set_has_healout();
  healout_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitWheelWarRecord.HealOut)
}

// optional uint32 Star = 9;
inline bool TUnitWheelWarRecord::has_star() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TUnitWheelWarRecord::set_has_star() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TUnitWheelWarRecord::clear_has_star() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TUnitWheelWarRecord::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 TUnitWheelWarRecord::star() const {
  // @@protoc_insertion_point(field_get:pb.TUnitWheelWarRecord.Star)
  return star_;
}
inline void TUnitWheelWarRecord::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitWheelWarRecord.Star)
}

// optional uint32 Level = 10;
inline bool TUnitWheelWarRecord::has_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TUnitWheelWarRecord::set_has_level() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TUnitWheelWarRecord::clear_has_level() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TUnitWheelWarRecord::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TUnitWheelWarRecord::level() const {
  // @@protoc_insertion_point(field_get:pb.TUnitWheelWarRecord.Level)
  return level_;
}
inline void TUnitWheelWarRecord::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitWheelWarRecord.Level)
}

// -------------------------------------------------------------------

// TArmyWheelWarRecord

// optional int32 ArmyId = 1;
inline bool TArmyWheelWarRecord::has_armyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArmyWheelWarRecord::set_has_armyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArmyWheelWarRecord::clear_has_armyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArmyWheelWarRecord::clear_armyid() {
  armyid_ = 0;
  clear_has_armyid();
}
inline ::google::protobuf::int32 TArmyWheelWarRecord::armyid() const {
  // @@protoc_insertion_point(field_get:pb.TArmyWheelWarRecord.ArmyId)
  return armyid_;
}
inline void TArmyWheelWarRecord::set_armyid(::google::protobuf::int32 value) {
  set_has_armyid();
  armyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArmyWheelWarRecord.ArmyId)
}

// repeated .pb.TUnitWheelWarRecord UnitArr = 2;
inline int TArmyWheelWarRecord::unitarr_size() const {
  return unitarr_.size();
}
inline void TArmyWheelWarRecord::clear_unitarr() {
  unitarr_.Clear();
}
inline const ::pb::TUnitWheelWarRecord& TArmyWheelWarRecord::unitarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArmyWheelWarRecord.UnitArr)
  return unitarr_.Get(index);
}
inline ::pb::TUnitWheelWarRecord* TArmyWheelWarRecord::mutable_unitarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArmyWheelWarRecord.UnitArr)
  return unitarr_.Mutable(index);
}
inline ::pb::TUnitWheelWarRecord* TArmyWheelWarRecord::add_unitarr() {
  // @@protoc_insertion_point(field_add:pb.TArmyWheelWarRecord.UnitArr)
  return unitarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitWheelWarRecord >&
TArmyWheelWarRecord::unitarr() const {
  // @@protoc_insertion_point(field_list:pb.TArmyWheelWarRecord.UnitArr)
  return unitarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitWheelWarRecord >*
TArmyWheelWarRecord::mutable_unitarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArmyWheelWarRecord.UnitArr)
  return &unitarr_;
}

// -------------------------------------------------------------------

// TFieldWheelWarRecord

// optional int32 FieldIndex = 1;
inline bool TFieldWheelWarRecord::has_fieldindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFieldWheelWarRecord::set_has_fieldindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFieldWheelWarRecord::clear_has_fieldindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFieldWheelWarRecord::clear_fieldindex() {
  fieldindex_ = 0;
  clear_has_fieldindex();
}
inline ::google::protobuf::int32 TFieldWheelWarRecord::fieldindex() const {
  // @@protoc_insertion_point(field_get:pb.TFieldWheelWarRecord.FieldIndex)
  return fieldindex_;
}
inline void TFieldWheelWarRecord::set_fieldindex(::google::protobuf::int32 value) {
  set_has_fieldindex();
  fieldindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TFieldWheelWarRecord.FieldIndex)
}

// optional .pb.TArmyWheelWarRecord Army1 = 2;
inline bool TFieldWheelWarRecord::has_army1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFieldWheelWarRecord::set_has_army1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFieldWheelWarRecord::clear_has_army1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFieldWheelWarRecord::clear_army1() {
  if (army1_ != NULL) army1_->::pb::TArmyWheelWarRecord::Clear();
  clear_has_army1();
}
inline const ::pb::TArmyWheelWarRecord& TFieldWheelWarRecord::army1() const {
  // @@protoc_insertion_point(field_get:pb.TFieldWheelWarRecord.Army1)
  return army1_ != NULL ? *army1_ : *default_instance_->army1_;
}
inline ::pb::TArmyWheelWarRecord* TFieldWheelWarRecord::mutable_army1() {
  set_has_army1();
  if (army1_ == NULL) army1_ = new ::pb::TArmyWheelWarRecord;
  // @@protoc_insertion_point(field_mutable:pb.TFieldWheelWarRecord.Army1)
  return army1_;
}
inline ::pb::TArmyWheelWarRecord* TFieldWheelWarRecord::release_army1() {
  clear_has_army1();
  ::pb::TArmyWheelWarRecord* temp = army1_;
  army1_ = NULL;
  return temp;
}
inline void TFieldWheelWarRecord::set_allocated_army1(::pb::TArmyWheelWarRecord* army1) {
  delete army1_;
  army1_ = army1;
  if (army1) {
    set_has_army1();
  } else {
    clear_has_army1();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TFieldWheelWarRecord.Army1)
}

// optional .pb.TArmyWheelWarRecord Army2 = 3;
inline bool TFieldWheelWarRecord::has_army2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TFieldWheelWarRecord::set_has_army2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TFieldWheelWarRecord::clear_has_army2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TFieldWheelWarRecord::clear_army2() {
  if (army2_ != NULL) army2_->::pb::TArmyWheelWarRecord::Clear();
  clear_has_army2();
}
inline const ::pb::TArmyWheelWarRecord& TFieldWheelWarRecord::army2() const {
  // @@protoc_insertion_point(field_get:pb.TFieldWheelWarRecord.Army2)
  return army2_ != NULL ? *army2_ : *default_instance_->army2_;
}
inline ::pb::TArmyWheelWarRecord* TFieldWheelWarRecord::mutable_army2() {
  set_has_army2();
  if (army2_ == NULL) army2_ = new ::pb::TArmyWheelWarRecord;
  // @@protoc_insertion_point(field_mutable:pb.TFieldWheelWarRecord.Army2)
  return army2_;
}
inline ::pb::TArmyWheelWarRecord* TFieldWheelWarRecord::release_army2() {
  clear_has_army2();
  ::pb::TArmyWheelWarRecord* temp = army2_;
  army2_ = NULL;
  return temp;
}
inline void TFieldWheelWarRecord::set_allocated_army2(::pb::TArmyWheelWarRecord* army2) {
  delete army2_;
  army2_ = army2;
  if (army2) {
    set_has_army2();
  } else {
    clear_has_army2();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TFieldWheelWarRecord.Army2)
}

// -------------------------------------------------------------------

// TWheelWarFieldStatus

// repeated .pb.TFieldWheelWarRecord FieldRecordArr = 1;
inline int TWheelWarFieldStatus::fieldrecordarr_size() const {
  return fieldrecordarr_.size();
}
inline void TWheelWarFieldStatus::clear_fieldrecordarr() {
  fieldrecordarr_.Clear();
}
inline const ::pb::TFieldWheelWarRecord& TWheelWarFieldStatus::fieldrecordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TWheelWarFieldStatus.FieldRecordArr)
  return fieldrecordarr_.Get(index);
}
inline ::pb::TFieldWheelWarRecord* TWheelWarFieldStatus::mutable_fieldrecordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TWheelWarFieldStatus.FieldRecordArr)
  return fieldrecordarr_.Mutable(index);
}
inline ::pb::TFieldWheelWarRecord* TWheelWarFieldStatus::add_fieldrecordarr() {
  // @@protoc_insertion_point(field_add:pb.TWheelWarFieldStatus.FieldRecordArr)
  return fieldrecordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TFieldWheelWarRecord >&
TWheelWarFieldStatus::fieldrecordarr() const {
  // @@protoc_insertion_point(field_list:pb.TWheelWarFieldStatus.FieldRecordArr)
  return fieldrecordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TFieldWheelWarRecord >*
TWheelWarFieldStatus::mutable_fieldrecordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TWheelWarFieldStatus.FieldRecordArr)
  return &fieldrecordarr_;
}

// -------------------------------------------------------------------

// TGetBattleArgsFromMajorUsingReplacementReq

// optional uint64 Uid = 1;
inline bool TGetBattleArgsFromMajorUsingReplacementReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGetBattleArgsFromMajorUsingReplacementReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGetBattleArgsFromMajorUsingReplacementReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGetBattleArgsFromMajorUsingReplacementReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TGetBattleArgsFromMajorUsingReplacementReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TGetBattleArgsFromMajorUsingReplacementReq.Uid)
  return uid_;
}
inline void TGetBattleArgsFromMajorUsingReplacementReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGetBattleArgsFromMajorUsingReplacementReq.Uid)
}

// optional uint32 ReplacedHtid = 2;
inline bool TGetBattleArgsFromMajorUsingReplacementReq::has_replacedhtid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGetBattleArgsFromMajorUsingReplacementReq::set_has_replacedhtid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGetBattleArgsFromMajorUsingReplacementReq::clear_has_replacedhtid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGetBattleArgsFromMajorUsingReplacementReq::clear_replacedhtid() {
  replacedhtid_ = 0u;
  clear_has_replacedhtid();
}
inline ::google::protobuf::uint32 TGetBattleArgsFromMajorUsingReplacementReq::replacedhtid() const {
  // @@protoc_insertion_point(field_get:pb.TGetBattleArgsFromMajorUsingReplacementReq.ReplacedHtid)
  return replacedhtid_;
}
inline void TGetBattleArgsFromMajorUsingReplacementReq::set_replacedhtid(::google::protobuf::uint32 value) {
  set_has_replacedhtid();
  replacedhtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGetBattleArgsFromMajorUsingReplacementReq.ReplacedHtid)
}

// optional uint32 NewHtid = 3;
inline bool TGetBattleArgsFromMajorUsingReplacementReq::has_newhtid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGetBattleArgsFromMajorUsingReplacementReq::set_has_newhtid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGetBattleArgsFromMajorUsingReplacementReq::clear_has_newhtid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGetBattleArgsFromMajorUsingReplacementReq::clear_newhtid() {
  newhtid_ = 0u;
  clear_has_newhtid();
}
inline ::google::protobuf::uint32 TGetBattleArgsFromMajorUsingReplacementReq::newhtid() const {
  // @@protoc_insertion_point(field_get:pb.TGetBattleArgsFromMajorUsingReplacementReq.NewHtid)
  return newhtid_;
}
inline void TGetBattleArgsFromMajorUsingReplacementReq::set_newhtid(::google::protobuf::uint32 value) {
  set_has_newhtid();
  newhtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGetBattleArgsFromMajorUsingReplacementReq.NewHtid)
}

// -------------------------------------------------------------------

// TRushInfo

// optional uint32 Army1Pos = 1;
inline bool TRushInfo::has_army1pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRushInfo::set_has_army1pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRushInfo::clear_has_army1pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRushInfo::clear_army1pos() {
  army1pos_ = 0u;
  clear_has_army1pos();
}
inline ::google::protobuf::uint32 TRushInfo::army1pos() const {
  // @@protoc_insertion_point(field_get:pb.TRushInfo.Army1Pos)
  return army1pos_;
}
inline void TRushInfo::set_army1pos(::google::protobuf::uint32 value) {
  set_has_army1pos();
  army1pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TRushInfo.Army1Pos)
}

// optional uint32 Army2Pos = 2;
inline bool TRushInfo::has_army2pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRushInfo::set_has_army2pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRushInfo::clear_has_army2pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRushInfo::clear_army2pos() {
  army2pos_ = 0u;
  clear_has_army2pos();
}
inline ::google::protobuf::uint32 TRushInfo::army2pos() const {
  // @@protoc_insertion_point(field_get:pb.TRushInfo.Army2Pos)
  return army2pos_;
}
inline void TRushInfo::set_army2pos(::google::protobuf::uint32 value) {
  set_has_army2pos();
  army2pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TRushInfo.Army2Pos)
}

// optional uint32 RushResult = 3;
inline bool TRushInfo::has_rushresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TRushInfo::set_has_rushresult() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TRushInfo::clear_has_rushresult() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TRushInfo::clear_rushresult() {
  rushresult_ = 0u;
  clear_has_rushresult();
}
inline ::google::protobuf::uint32 TRushInfo::rushresult() const {
  // @@protoc_insertion_point(field_get:pb.TRushInfo.RushResult)
  return rushresult_;
}
inline void TRushInfo::set_rushresult(::google::protobuf::uint32 value) {
  set_has_rushresult();
  rushresult_ = value;
  // @@protoc_insertion_point(field_set:pb.TRushInfo.RushResult)
}

// optional uint32 Army1HorseId = 4;
inline bool TRushInfo::has_army1horseid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TRushInfo::set_has_army1horseid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TRushInfo::clear_has_army1horseid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TRushInfo::clear_army1horseid() {
  army1horseid_ = 0u;
  clear_has_army1horseid();
}
inline ::google::protobuf::uint32 TRushInfo::army1horseid() const {
  // @@protoc_insertion_point(field_get:pb.TRushInfo.Army1HorseId)
  return army1horseid_;
}
inline void TRushInfo::set_army1horseid(::google::protobuf::uint32 value) {
  set_has_army1horseid();
  army1horseid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRushInfo.Army1HorseId)
}

// optional uint32 Army2HorseId = 5;
inline bool TRushInfo::has_army2horseid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TRushInfo::set_has_army2horseid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TRushInfo::clear_has_army2horseid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TRushInfo::clear_army2horseid() {
  army2horseid_ = 0u;
  clear_has_army2horseid();
}
inline ::google::protobuf::uint32 TRushInfo::army2horseid() const {
  // @@protoc_insertion_point(field_get:pb.TRushInfo.Army2HorseId)
  return army2horseid_;
}
inline void TRushInfo::set_army2horseid(::google::protobuf::uint32 value) {
  set_has_army2horseid();
  army2horseid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRushInfo.Army2HorseId)
}

// repeated uint32 TargetPosArr = 6;
inline int TRushInfo::targetposarr_size() const {
  return targetposarr_.size();
}
inline void TRushInfo::clear_targetposarr() {
  targetposarr_.Clear();
}
inline ::google::protobuf::uint32 TRushInfo::targetposarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TRushInfo.TargetPosArr)
  return targetposarr_.Get(index);
}
inline void TRushInfo::set_targetposarr(int index, ::google::protobuf::uint32 value) {
  targetposarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TRushInfo.TargetPosArr)
}
inline void TRushInfo::add_targetposarr(::google::protobuf::uint32 value) {
  targetposarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TRushInfo.TargetPosArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TRushInfo::targetposarr() const {
  // @@protoc_insertion_point(field_list:pb.TRushInfo.TargetPosArr)
  return targetposarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TRushInfo::mutable_targetposarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TRushInfo.TargetPosArr)
  return &targetposarr_;
}

// -------------------------------------------------------------------

// TTreadInfo

// optional uint32 ArmyId = 1;
inline bool TTreadInfo::has_armyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTreadInfo::set_has_armyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTreadInfo::clear_has_armyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTreadInfo::clear_armyid() {
  armyid_ = 0u;
  clear_has_armyid();
}
inline ::google::protobuf::uint32 TTreadInfo::armyid() const {
  // @@protoc_insertion_point(field_get:pb.TTreadInfo.ArmyId)
  return armyid_;
}
inline void TTreadInfo::set_armyid(::google::protobuf::uint32 value) {
  set_has_armyid();
  armyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreadInfo.ArmyId)
}

// optional uint32 Pos = 2;
inline bool TTreadInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTreadInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTreadInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTreadInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TTreadInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TTreadInfo.Pos)
  return pos_;
}
inline void TTreadInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreadInfo.Pos)
}

// repeated uint32 TargetPosArr = 3;
inline int TTreadInfo::targetposarr_size() const {
  return targetposarr_.size();
}
inline void TTreadInfo::clear_targetposarr() {
  targetposarr_.Clear();
}
inline ::google::protobuf::uint32 TTreadInfo::targetposarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTreadInfo.TargetPosArr)
  return targetposarr_.Get(index);
}
inline void TTreadInfo::set_targetposarr(int index, ::google::protobuf::uint32 value) {
  targetposarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TTreadInfo.TargetPosArr)
}
inline void TTreadInfo::add_targetposarr(::google::protobuf::uint32 value) {
  targetposarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TTreadInfo.TargetPosArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TTreadInfo::targetposarr() const {
  // @@protoc_insertion_point(field_list:pb.TTreadInfo.TargetPosArr)
  return targetposarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TTreadInfo::mutable_targetposarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTreadInfo.TargetPosArr)
  return &targetposarr_;
}

// -------------------------------------------------------------------

// TWinnerInfo

// optional uint32 Winner = 1;
inline bool TWinnerInfo::has_winner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TWinnerInfo::set_has_winner() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TWinnerInfo::clear_has_winner() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TWinnerInfo::clear_winner() {
  winner_ = 0u;
  clear_has_winner();
}
inline ::google::protobuf::uint32 TWinnerInfo::winner() const {
  // @@protoc_insertion_point(field_get:pb.TWinnerInfo.Winner)
  return winner_;
}
inline void TWinnerInfo::set_winner(::google::protobuf::uint32 value) {
  set_has_winner();
  winner_ = value;
  // @@protoc_insertion_point(field_set:pb.TWinnerInfo.Winner)
}

// repeated uint32 WinArr = 2;
inline int TWinnerInfo::winarr_size() const {
  return winarr_.size();
}
inline void TWinnerInfo::clear_winarr() {
  winarr_.Clear();
}
inline ::google::protobuf::uint32 TWinnerInfo::winarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TWinnerInfo.WinArr)
  return winarr_.Get(index);
}
inline void TWinnerInfo::set_winarr(int index, ::google::protobuf::uint32 value) {
  winarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TWinnerInfo.WinArr)
}
inline void TWinnerInfo::add_winarr(::google::protobuf::uint32 value) {
  winarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TWinnerInfo.WinArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TWinnerInfo::winarr() const {
  // @@protoc_insertion_point(field_list:pb.TWinnerInfo.WinArr)
  return winarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TWinnerInfo::mutable_winarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TWinnerInfo.WinArr)
  return &winarr_;
}

// -------------------------------------------------------------------

// TSpecialEntrance

// repeated .pb.TRushInfo RushInfoArr = 1;
inline int TSpecialEntrance::rushinfoarr_size() const {
  return rushinfoarr_.size();
}
inline void TSpecialEntrance::clear_rushinfoarr() {
  rushinfoarr_.Clear();
}
inline const ::pb::TRushInfo& TSpecialEntrance::rushinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSpecialEntrance.RushInfoArr)
  return rushinfoarr_.Get(index);
}
inline ::pb::TRushInfo* TSpecialEntrance::mutable_rushinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSpecialEntrance.RushInfoArr)
  return rushinfoarr_.Mutable(index);
}
inline ::pb::TRushInfo* TSpecialEntrance::add_rushinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TSpecialEntrance.RushInfoArr)
  return rushinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TRushInfo >&
TSpecialEntrance::rushinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TSpecialEntrance.RushInfoArr)
  return rushinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TRushInfo >*
TSpecialEntrance::mutable_rushinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSpecialEntrance.RushInfoArr)
  return &rushinfoarr_;
}

// repeated .pb.TTreadInfo TreadInfoArr = 2;
inline int TSpecialEntrance::treadinfoarr_size() const {
  return treadinfoarr_.size();
}
inline void TSpecialEntrance::clear_treadinfoarr() {
  treadinfoarr_.Clear();
}
inline const ::pb::TTreadInfo& TSpecialEntrance::treadinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSpecialEntrance.TreadInfoArr)
  return treadinfoarr_.Get(index);
}
inline ::pb::TTreadInfo* TSpecialEntrance::mutable_treadinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSpecialEntrance.TreadInfoArr)
  return treadinfoarr_.Mutable(index);
}
inline ::pb::TTreadInfo* TSpecialEntrance::add_treadinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TSpecialEntrance.TreadInfoArr)
  return treadinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreadInfo >&
TSpecialEntrance::treadinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TSpecialEntrance.TreadInfoArr)
  return treadinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTreadInfo >*
TSpecialEntrance::mutable_treadinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSpecialEntrance.TreadInfoArr)
  return &treadinfoarr_;
}

// optional .pb.TWinnerInfo WinnerInfo = 3;
inline bool TSpecialEntrance::has_winnerinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TSpecialEntrance::set_has_winnerinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TSpecialEntrance::clear_has_winnerinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TSpecialEntrance::clear_winnerinfo() {
  if (winnerinfo_ != NULL) winnerinfo_->::pb::TWinnerInfo::Clear();
  clear_has_winnerinfo();
}
inline const ::pb::TWinnerInfo& TSpecialEntrance::winnerinfo() const {
  // @@protoc_insertion_point(field_get:pb.TSpecialEntrance.WinnerInfo)
  return winnerinfo_ != NULL ? *winnerinfo_ : *default_instance_->winnerinfo_;
}
inline ::pb::TWinnerInfo* TSpecialEntrance::mutable_winnerinfo() {
  set_has_winnerinfo();
  if (winnerinfo_ == NULL) winnerinfo_ = new ::pb::TWinnerInfo;
  // @@protoc_insertion_point(field_mutable:pb.TSpecialEntrance.WinnerInfo)
  return winnerinfo_;
}
inline ::pb::TWinnerInfo* TSpecialEntrance::release_winnerinfo() {
  clear_has_winnerinfo();
  ::pb::TWinnerInfo* temp = winnerinfo_;
  winnerinfo_ = NULL;
  return temp;
}
inline void TSpecialEntrance::set_allocated_winnerinfo(::pb::TWinnerInfo* winnerinfo) {
  delete winnerinfo_;
  winnerinfo_ = winnerinfo;
  if (winnerinfo) {
    set_has_winnerinfo();
  } else {
    clear_has_winnerinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TSpecialEntrance.WinnerInfo)
}

// -------------------------------------------------------------------

// TWheelWarRidingInfo

// optional uint32 HasInfo = 1;
inline bool TWheelWarRidingInfo::has_hasinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TWheelWarRidingInfo::set_has_hasinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TWheelWarRidingInfo::clear_has_hasinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TWheelWarRidingInfo::clear_hasinfo() {
  hasinfo_ = 0u;
  clear_has_hasinfo();
}
inline ::google::protobuf::uint32 TWheelWarRidingInfo::hasinfo() const {
  // @@protoc_insertion_point(field_get:pb.TWheelWarRidingInfo.HasInfo)
  return hasinfo_;
}
inline void TWheelWarRidingInfo::set_hasinfo(::google::protobuf::uint32 value) {
  set_has_hasinfo();
  hasinfo_ = value;
  // @@protoc_insertion_point(field_set:pb.TWheelWarRidingInfo.HasInfo)
}

// repeated .pb.TWinnerInfo WinnerInfos = 2;
inline int TWheelWarRidingInfo::winnerinfos_size() const {
  return winnerinfos_.size();
}
inline void TWheelWarRidingInfo::clear_winnerinfos() {
  winnerinfos_.Clear();
}
inline const ::pb::TWinnerInfo& TWheelWarRidingInfo::winnerinfos(int index) const {
  // @@protoc_insertion_point(field_get:pb.TWheelWarRidingInfo.WinnerInfos)
  return winnerinfos_.Get(index);
}
inline ::pb::TWinnerInfo* TWheelWarRidingInfo::mutable_winnerinfos(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TWheelWarRidingInfo.WinnerInfos)
  return winnerinfos_.Mutable(index);
}
inline ::pb::TWinnerInfo* TWheelWarRidingInfo::add_winnerinfos() {
  // @@protoc_insertion_point(field_add:pb.TWheelWarRidingInfo.WinnerInfos)
  return winnerinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TWinnerInfo >&
TWheelWarRidingInfo::winnerinfos() const {
  // @@protoc_insertion_point(field_list:pb.TWheelWarRidingInfo.WinnerInfos)
  return winnerinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TWinnerInfo >*
TWheelWarRidingInfo::mutable_winnerinfos() {
  // @@protoc_insertion_point(field_mutable_list:pb.TWheelWarRidingInfo.WinnerInfos)
  return &winnerinfos_;
}

// -------------------------------------------------------------------

// TBattleResultArrayReq

// repeated uint64 ridArr = 1;
inline int TBattleResultArrayReq::ridarr_size() const {
  return ridarr_.size();
}
inline void TBattleResultArrayReq::clear_ridarr() {
  ridarr_.Clear();
}
inline ::google::protobuf::uint64 TBattleResultArrayReq::ridarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBattleResultArrayReq.ridArr)
  return ridarr_.Get(index);
}
inline void TBattleResultArrayReq::set_ridarr(int index, ::google::protobuf::uint64 value) {
  ridarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TBattleResultArrayReq.ridArr)
}
inline void TBattleResultArrayReq::add_ridarr(::google::protobuf::uint64 value) {
  ridarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TBattleResultArrayReq.ridArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TBattleResultArrayReq::ridarr() const {
  // @@protoc_insertion_point(field_list:pb.TBattleResultArrayReq.ridArr)
  return ridarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TBattleResultArrayReq::mutable_ridarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBattleResultArrayReq.ridArr)
  return &ridarr_;
}

// optional string ServerId = 2;
inline bool TBattleResultArrayReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBattleResultArrayReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBattleResultArrayReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBattleResultArrayReq::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TBattleResultArrayReq::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TBattleResultArrayReq.ServerId)
  return *serverid_;
}
inline void TBattleResultArrayReq::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBattleResultArrayReq.ServerId)
}
inline void TBattleResultArrayReq::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBattleResultArrayReq.ServerId)
}
inline void TBattleResultArrayReq::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBattleResultArrayReq.ServerId)
}
inline ::std::string* TBattleResultArrayReq::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBattleResultArrayReq.ServerId)
  return serverid_;
}
inline ::std::string* TBattleResultArrayReq::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBattleResultArrayReq::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleResultArrayReq.ServerId)
}

// -------------------------------------------------------------------

// TBattleResultArrayRsp

// repeated bytes battleResultArr = 1;
inline int TBattleResultArrayRsp::battleresultarr_size() const {
  return battleresultarr_.size();
}
inline void TBattleResultArrayRsp::clear_battleresultarr() {
  battleresultarr_.Clear();
}
inline const ::std::string& TBattleResultArrayRsp::battleresultarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBattleResultArrayRsp.battleResultArr)
  return battleresultarr_.Get(index);
}
inline ::std::string* TBattleResultArrayRsp::mutable_battleresultarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBattleResultArrayRsp.battleResultArr)
  return battleresultarr_.Mutable(index);
}
inline void TBattleResultArrayRsp::set_battleresultarr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TBattleResultArrayRsp.battleResultArr)
  battleresultarr_.Mutable(index)->assign(value);
}
inline void TBattleResultArrayRsp::set_battleresultarr(int index, const char* value) {
  battleresultarr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBattleResultArrayRsp.battleResultArr)
}
inline void TBattleResultArrayRsp::set_battleresultarr(int index, const void* value, size_t size) {
  battleresultarr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBattleResultArrayRsp.battleResultArr)
}
inline ::std::string* TBattleResultArrayRsp::add_battleresultarr() {
  return battleresultarr_.Add();
}
inline void TBattleResultArrayRsp::add_battleresultarr(const ::std::string& value) {
  battleresultarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TBattleResultArrayRsp.battleResultArr)
}
inline void TBattleResultArrayRsp::add_battleresultarr(const char* value) {
  battleresultarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TBattleResultArrayRsp.battleResultArr)
}
inline void TBattleResultArrayRsp::add_battleresultarr(const void* value, size_t size) {
  battleresultarr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TBattleResultArrayRsp.battleResultArr)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TBattleResultArrayRsp::battleresultarr() const {
  // @@protoc_insertion_point(field_list:pb.TBattleResultArrayRsp.battleResultArr)
  return battleresultarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TBattleResultArrayRsp::mutable_battleresultarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBattleResultArrayRsp.battleResultArr)
  return &battleresultarr_;
}

// -------------------------------------------------------------------

// TGetBattleArgsWithUidListReq

// repeated uint64 UidArr = 1;
inline int TGetBattleArgsWithUidListReq::uidarr_size() const {
  return uidarr_.size();
}
inline void TGetBattleArgsWithUidListReq::clear_uidarr() {
  uidarr_.Clear();
}
inline ::google::protobuf::uint64 TGetBattleArgsWithUidListReq::uidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGetBattleArgsWithUidListReq.UidArr)
  return uidarr_.Get(index);
}
inline void TGetBattleArgsWithUidListReq::set_uidarr(int index, ::google::protobuf::uint64 value) {
  uidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TGetBattleArgsWithUidListReq.UidArr)
}
inline void TGetBattleArgsWithUidListReq::add_uidarr(::google::protobuf::uint64 value) {
  uidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TGetBattleArgsWithUidListReq.UidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TGetBattleArgsWithUidListReq::uidarr() const {
  // @@protoc_insertion_point(field_list:pb.TGetBattleArgsWithUidListReq.UidArr)
  return uidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TGetBattleArgsWithUidListReq::mutable_uidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGetBattleArgsWithUidListReq.UidArr)
  return &uidarr_;
}

// -------------------------------------------------------------------

// TWarRidingInfo

// optional uint32 Tid = 1;
inline bool TWarRidingInfo::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TWarRidingInfo::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TWarRidingInfo::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TWarRidingInfo::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 TWarRidingInfo::tid() const {
  // @@protoc_insertion_point(field_get:pb.TWarRidingInfo.Tid)
  return tid_;
}
inline void TWarRidingInfo::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TWarRidingInfo.Tid)
}

// optional uint64 FightForce = 2;
inline bool TWarRidingInfo::has_fightforce() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TWarRidingInfo::set_has_fightforce() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TWarRidingInfo::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TWarRidingInfo::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TWarRidingInfo::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TWarRidingInfo.FightForce)
  return fightforce_;
}
inline void TWarRidingInfo::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TWarRidingInfo.FightForce)
}

// optional uint32 SkillId = 3;
inline bool TWarRidingInfo::has_skillid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TWarRidingInfo::set_has_skillid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TWarRidingInfo::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TWarRidingInfo::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 TWarRidingInfo::skillid() const {
  // @@protoc_insertion_point(field_get:pb.TWarRidingInfo.SkillId)
  return skillid_;
}
inline void TWarRidingInfo::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:pb.TWarRidingInfo.SkillId)
}

// optional uint32 TrampleSkillId = 4;
inline bool TWarRidingInfo::has_trampleskillid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TWarRidingInfo::set_has_trampleskillid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TWarRidingInfo::clear_has_trampleskillid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TWarRidingInfo::clear_trampleskillid() {
  trampleskillid_ = 0u;
  clear_has_trampleskillid();
}
inline ::google::protobuf::uint32 TWarRidingInfo::trampleskillid() const {
  // @@protoc_insertion_point(field_get:pb.TWarRidingInfo.TrampleSkillId)
  return trampleskillid_;
}
inline void TWarRidingInfo::set_trampleskillid(::google::protobuf::uint32 value) {
  set_has_trampleskillid();
  trampleskillid_ = value;
  // @@protoc_insertion_point(field_set:pb.TWarRidingInfo.TrampleSkillId)
}

// -------------------------------------------------------------------

// TGetBattleArgsWithUidReq

// optional uint64 Uid1 = 1;
inline bool TGetBattleArgsWithUidReq::has_uid1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGetBattleArgsWithUidReq::set_has_uid1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGetBattleArgsWithUidReq::clear_has_uid1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGetBattleArgsWithUidReq::clear_uid1() {
  uid1_ = GOOGLE_ULONGLONG(0);
  clear_has_uid1();
}
inline ::google::protobuf::uint64 TGetBattleArgsWithUidReq::uid1() const {
  // @@protoc_insertion_point(field_get:pb.TGetBattleArgsWithUidReq.Uid1)
  return uid1_;
}
inline void TGetBattleArgsWithUidReq::set_uid1(::google::protobuf::uint64 value) {
  set_has_uid1();
  uid1_ = value;
  // @@protoc_insertion_point(field_set:pb.TGetBattleArgsWithUidReq.Uid1)
}

// optional uint64 Uid2 = 2;
inline bool TGetBattleArgsWithUidReq::has_uid2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGetBattleArgsWithUidReq::set_has_uid2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGetBattleArgsWithUidReq::clear_has_uid2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGetBattleArgsWithUidReq::clear_uid2() {
  uid2_ = GOOGLE_ULONGLONG(0);
  clear_has_uid2();
}
inline ::google::protobuf::uint64 TGetBattleArgsWithUidReq::uid2() const {
  // @@protoc_insertion_point(field_get:pb.TGetBattleArgsWithUidReq.Uid2)
  return uid2_;
}
inline void TGetBattleArgsWithUidReq::set_uid2(::google::protobuf::uint64 value) {
  set_has_uid2();
  uid2_ = value;
  // @@protoc_insertion_point(field_set:pb.TGetBattleArgsWithUidReq.Uid2)
}

// optional uint32 BattleId = 3;
inline bool TGetBattleArgsWithUidReq::has_battleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGetBattleArgsWithUidReq::set_has_battleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGetBattleArgsWithUidReq::clear_has_battleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGetBattleArgsWithUidReq::clear_battleid() {
  battleid_ = 0u;
  clear_has_battleid();
}
inline ::google::protobuf::uint32 TGetBattleArgsWithUidReq::battleid() const {
  // @@protoc_insertion_point(field_get:pb.TGetBattleArgsWithUidReq.BattleId)
  return battleid_;
}
inline void TGetBattleArgsWithUidReq::set_battleid(::google::protobuf::uint32 value) {
  set_has_battleid();
  battleid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGetBattleArgsWithUidReq.BattleId)
}

// -------------------------------------------------------------------

// TGetBattleArgsFromMajorSpecifyWarRiding

// optional uint64 Uid = 1;
inline bool TGetBattleArgsFromMajorSpecifyWarRiding::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGetBattleArgsFromMajorSpecifyWarRiding::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGetBattleArgsFromMajorSpecifyWarRiding::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGetBattleArgsFromMajorSpecifyWarRiding::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TGetBattleArgsFromMajorSpecifyWarRiding::uid() const {
  // @@protoc_insertion_point(field_get:pb.TGetBattleArgsFromMajorSpecifyWarRiding.Uid)
  return uid_;
}
inline void TGetBattleArgsFromMajorSpecifyWarRiding::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGetBattleArgsFromMajorSpecifyWarRiding.Uid)
}

// repeated uint32 WarRidingTidArr = 2;
inline int TGetBattleArgsFromMajorSpecifyWarRiding::warridingtidarr_size() const {
  return warridingtidarr_.size();
}
inline void TGetBattleArgsFromMajorSpecifyWarRiding::clear_warridingtidarr() {
  warridingtidarr_.Clear();
}
inline ::google::protobuf::uint32 TGetBattleArgsFromMajorSpecifyWarRiding::warridingtidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGetBattleArgsFromMajorSpecifyWarRiding.WarRidingTidArr)
  return warridingtidarr_.Get(index);
}
inline void TGetBattleArgsFromMajorSpecifyWarRiding::set_warridingtidarr(int index, ::google::protobuf::uint32 value) {
  warridingtidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TGetBattleArgsFromMajorSpecifyWarRiding.WarRidingTidArr)
}
inline void TGetBattleArgsFromMajorSpecifyWarRiding::add_warridingtidarr(::google::protobuf::uint32 value) {
  warridingtidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TGetBattleArgsFromMajorSpecifyWarRiding.WarRidingTidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGetBattleArgsFromMajorSpecifyWarRiding::warridingtidarr() const {
  // @@protoc_insertion_point(field_list:pb.TGetBattleArgsFromMajorSpecifyWarRiding.WarRidingTidArr)
  return warridingtidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGetBattleArgsFromMajorSpecifyWarRiding::mutable_warridingtidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGetBattleArgsFromMajorSpecifyWarRiding.WarRidingTidArr)
  return &warridingtidarr_;
}

// optional uint32 WarRidingLevel = 3;
inline bool TGetBattleArgsFromMajorSpecifyWarRiding::has_warridinglevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGetBattleArgsFromMajorSpecifyWarRiding::set_has_warridinglevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGetBattleArgsFromMajorSpecifyWarRiding::clear_has_warridinglevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGetBattleArgsFromMajorSpecifyWarRiding::clear_warridinglevel() {
  warridinglevel_ = 0u;
  clear_has_warridinglevel();
}
inline ::google::protobuf::uint32 TGetBattleArgsFromMajorSpecifyWarRiding::warridinglevel() const {
  // @@protoc_insertion_point(field_get:pb.TGetBattleArgsFromMajorSpecifyWarRiding.WarRidingLevel)
  return warridinglevel_;
}
inline void TGetBattleArgsFromMajorSpecifyWarRiding::set_warridinglevel(::google::protobuf::uint32 value) {
  set_has_warridinglevel();
  warridinglevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TGetBattleArgsFromMajorSpecifyWarRiding.WarRidingLevel)
}

// optional uint32 WarRidingAdvLv = 4;
inline bool TGetBattleArgsFromMajorSpecifyWarRiding::has_warridingadvlv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGetBattleArgsFromMajorSpecifyWarRiding::set_has_warridingadvlv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGetBattleArgsFromMajorSpecifyWarRiding::clear_has_warridingadvlv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGetBattleArgsFromMajorSpecifyWarRiding::clear_warridingadvlv() {
  warridingadvlv_ = 0u;
  clear_has_warridingadvlv();
}
inline ::google::protobuf::uint32 TGetBattleArgsFromMajorSpecifyWarRiding::warridingadvlv() const {
  // @@protoc_insertion_point(field_get:pb.TGetBattleArgsFromMajorSpecifyWarRiding.WarRidingAdvLv)
  return warridingadvlv_;
}
inline void TGetBattleArgsFromMajorSpecifyWarRiding::set_warridingadvlv(::google::protobuf::uint32 value) {
  set_has_warridingadvlv();
  warridingadvlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TGetBattleArgsFromMajorSpecifyWarRiding.WarRidingAdvLv)
}

// optional uint32 WarRidingStar = 5;
inline bool TGetBattleArgsFromMajorSpecifyWarRiding::has_warridingstar() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGetBattleArgsFromMajorSpecifyWarRiding::set_has_warridingstar() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGetBattleArgsFromMajorSpecifyWarRiding::clear_has_warridingstar() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGetBattleArgsFromMajorSpecifyWarRiding::clear_warridingstar() {
  warridingstar_ = 0u;
  clear_has_warridingstar();
}
inline ::google::protobuf::uint32 TGetBattleArgsFromMajorSpecifyWarRiding::warridingstar() const {
  // @@protoc_insertion_point(field_get:pb.TGetBattleArgsFromMajorSpecifyWarRiding.WarRidingStar)
  return warridingstar_;
}
inline void TGetBattleArgsFromMajorSpecifyWarRiding::set_warridingstar(::google::protobuf::uint32 value) {
  set_has_warridingstar();
  warridingstar_ = value;
  // @@protoc_insertion_point(field_set:pb.TGetBattleArgsFromMajorSpecifyWarRiding.WarRidingStar)
}

// -------------------------------------------------------------------

// TBattleSoulInfo

// optional uint32 SkillId = 1;
inline bool TBattleSoulInfo::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBattleSoulInfo::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBattleSoulInfo::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBattleSoulInfo::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 TBattleSoulInfo::skillid() const {
  // @@protoc_insertion_point(field_get:pb.TBattleSoulInfo.SkillId)
  return skillid_;
}
inline void TBattleSoulInfo::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleSoulInfo.SkillId)
}

// repeated uint32 TriggerSkillIdArray = 2;
inline int TBattleSoulInfo::triggerskillidarray_size() const {
  return triggerskillidarray_.size();
}
inline void TBattleSoulInfo::clear_triggerskillidarray() {
  triggerskillidarray_.Clear();
}
inline ::google::protobuf::uint32 TBattleSoulInfo::triggerskillidarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBattleSoulInfo.TriggerSkillIdArray)
  return triggerskillidarray_.Get(index);
}
inline void TBattleSoulInfo::set_triggerskillidarray(int index, ::google::protobuf::uint32 value) {
  triggerskillidarray_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TBattleSoulInfo.TriggerSkillIdArray)
}
inline void TBattleSoulInfo::add_triggerskillidarray(::google::protobuf::uint32 value) {
  triggerskillidarray_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TBattleSoulInfo.TriggerSkillIdArray)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TBattleSoulInfo::triggerskillidarray() const {
  // @@protoc_insertion_point(field_list:pb.TBattleSoulInfo.TriggerSkillIdArray)
  return triggerskillidarray_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TBattleSoulInfo::mutable_triggerskillidarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBattleSoulInfo.TriggerSkillIdArray)
  return &triggerskillidarray_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EGroupMatchType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EGroupMatchType>() {
  return ::pb::EGroupMatchType_descriptor();
}
template <> struct is_proto_enum< ::pb::EBTAction> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EBTAction>() {
  return ::pb::EBTAction_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fBattleBase_2eproto__INCLUDED
