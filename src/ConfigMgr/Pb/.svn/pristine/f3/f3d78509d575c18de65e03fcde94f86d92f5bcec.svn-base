// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Guild.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Guild.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TGuildLimit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildLimit_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildDonate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildDonate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildTip_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildApplyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildApplyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildImpeachInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildImpeachInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildTreasMapFix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildTreasMapFix_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBaseGuildInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBaseGuildInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildSalaryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildSalaryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildUpdateOurGuildNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildUpdateOurGuildNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGetOtherInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGetOtherInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGetOtherInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGetOtherInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGetListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGetListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGetListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGetListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGetCanApplyListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGetCanApplyListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGetCanApplyListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGetCanApplyListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildCreateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildCreateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildSearchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildSearchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildSearchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildSearchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGetApplyListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGetApplyListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildApplyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildApplyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildCancelApplyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildCancelApplyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildVerifyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildVerifyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildVerifyAllReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildVerifyAllReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGetMemberListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGetMemberListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildModifyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildModifyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildDismissRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildDismissRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildAppointRpgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildAppointRpgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildDemiseReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildDemiseReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildRemoveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildRemoveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildDonateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildDonateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildLevelRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildLevelRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGetLevelRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGetLevelRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGetLevelRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGetLevelRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildFightForceRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildFightForceRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGetFightForceRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGetFightForceRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGetFightForceRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGetFightForceRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildTreasMapFixReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildTreasMapFixReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildTreasMapFixRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildTreasMapFixRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildTreasMapFixRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildTreasMapFixRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgGuildSyncMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgGuildSyncMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGetSyncInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGetSyncInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGetSyncInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGetSyncInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildChangeGnameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildChangeGnameReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EReviewMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EVerifyRet_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETipType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETMFRet_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fGuild_2eproto() {
  protobuf_AddDesc_net_2fGuild_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Guild.proto");
  GOOGLE_CHECK(file != NULL);
  TGuildLimit_descriptor_ = file->message_type(0);
  static const int TGuildLimit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildLimit, fightforce_),
  };
  TGuildLimit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildLimit_descriptor_,
      TGuildLimit::default_instance_,
      TGuildLimit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildLimit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildLimit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildLimit));
  TGuildDonate_descriptor_ = file->message_type(1);
  static const int TGuildDonate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildDonate, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildDonate, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildDonate, level_),
  };
  TGuildDonate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildDonate_descriptor_,
      TGuildDonate::default_instance_,
      TGuildDonate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildDonate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildDonate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildDonate));
  TGuildTip_descriptor_ = file->message_type(2);
  static const int TGuildTip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildTip, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildTip, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildTip, paramarr_),
  };
  TGuildTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildTip_descriptor_,
      TGuildTip::default_instance_,
      TGuildTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildTip));
  TGuildApplyInfo_descriptor_ = file->message_type(3);
  static const int TGuildApplyInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildApplyInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildApplyInfo, applytime_),
  };
  TGuildApplyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildApplyInfo_descriptor_,
      TGuildApplyInfo::default_instance_,
      TGuildApplyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildApplyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildApplyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildApplyInfo));
  TGuildImpeachInfo_descriptor_ = file->message_type(4);
  static const int TGuildImpeachInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildImpeachInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildImpeachInfo, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildImpeachInfo, time_),
  };
  TGuildImpeachInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildImpeachInfo_descriptor_,
      TGuildImpeachInfo::default_instance_,
      TGuildImpeachInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildImpeachInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildImpeachInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildImpeachInfo));
  TGuildTreasMapFix_descriptor_ = file->message_type(5);
  static const int TGuildTreasMapFix_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildTreasMapFix, resettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildTreasMapFix, fixprogress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildTreasMapFix, dayfixprogress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildTreasMapFix, historyresettimearr_),
  };
  TGuildTreasMapFix_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildTreasMapFix_descriptor_,
      TGuildTreasMapFix::default_instance_,
      TGuildTreasMapFix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildTreasMapFix, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildTreasMapFix, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildTreasMapFix));
  TGuildMemberInfo_descriptor_ = file->message_type(6);
  static const int TGuildMemberInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMemberInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMemberInfo, rpgpost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMemberInfo, donate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMemberInfo, weekdonate_),
  };
  TGuildMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildMemberInfo_descriptor_,
      TGuildMemberInfo::default_instance_,
      TGuildMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildMemberInfo));
  TBaseGuildInfo_descriptor_ = file->message_type(7);
  static const int TBaseGuildInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseGuildInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseGuildInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseGuildInfo, bannername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseGuildInfo, bannerbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseGuildInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseGuildInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseGuildInfo, membernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseGuildInfo, fightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseGuildInfo, summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseGuildInfo, reviewmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseGuildInfo, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseGuildInfo, leaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseGuildInfo, leadername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseGuildInfo, qq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseGuildInfo, sumdaydonate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseGuildInfo, kickoutnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseGuildInfo, lastweekscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseGuildInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseGuildInfo, linegroup_),
  };
  TBaseGuildInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBaseGuildInfo_descriptor_,
      TBaseGuildInfo::default_instance_,
      TBaseGuildInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseGuildInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBaseGuildInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBaseGuildInfo));
  TGuildSalaryInfo_descriptor_ = file->message_type(8);
  static const int TGuildSalaryInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildSalaryInfo, post_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildSalaryInfo, num_),
  };
  TGuildSalaryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildSalaryInfo_descriptor_,
      TGuildSalaryInfo::default_instance_,
      TGuildSalaryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildSalaryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildSalaryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildSalaryInfo));
  TGuildGetInfoRsp_descriptor_ = file->message_type(9);
  static const int TGuildGetInfoRsp_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetInfoRsp, myinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetInfoRsp, guildinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetInfoRsp, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetInfoRsp, tiparr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetInfoRsp, donatearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetInfoRsp, impeachinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetInfoRsp, dismisstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetInfoRsp, tmfinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetInfoRsp, sendemailnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetInfoRsp, salaryinfoarr_),
  };
  TGuildGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGetInfoRsp_descriptor_,
      TGuildGetInfoRsp::default_instance_,
      TGuildGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGetInfoRsp));
  TGuildUpdateOurGuildNotify_descriptor_ = file->message_type(10);
  static const int TGuildUpdateOurGuildNotify_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateOurGuildNotify, guildinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateOurGuildNotify, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateOurGuildNotify, tiparr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateOurGuildNotify, donatearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateOurGuildNotify, applynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateOurGuildNotify, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateOurGuildNotify, impeachinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateOurGuildNotify, dismisstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateOurGuildNotify, tmfinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateOurGuildNotify, salaryinfoarr_),
  };
  TGuildUpdateOurGuildNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildUpdateOurGuildNotify_descriptor_,
      TGuildUpdateOurGuildNotify::default_instance_,
      TGuildUpdateOurGuildNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateOurGuildNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateOurGuildNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildUpdateOurGuildNotify));
  TGuildGetOtherInfoReq_descriptor_ = file->message_type(11);
  static const int TGuildGetOtherInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetOtherInfoReq, guildid_),
  };
  TGuildGetOtherInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGetOtherInfoReq_descriptor_,
      TGuildGetOtherInfoReq::default_instance_,
      TGuildGetOtherInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetOtherInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetOtherInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGetOtherInfoReq));
  TGuildGetOtherInfoRsp_descriptor_ = file->message_type(12);
  static const int TGuildGetOtherInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetOtherInfoRsp, guildinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetOtherInfoRsp, rank_),
  };
  TGuildGetOtherInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGetOtherInfoRsp_descriptor_,
      TGuildGetOtherInfoRsp::default_instance_,
      TGuildGetOtherInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetOtherInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetOtherInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGetOtherInfoRsp));
  TGuildGetListReq_descriptor_ = file->message_type(13);
  static const int TGuildGetListReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetListReq, fromrank_),
  };
  TGuildGetListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGetListReq_descriptor_,
      TGuildGetListReq::default_instance_,
      TGuildGetListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGetListReq));
  TGuildGetListRsp_descriptor_ = file->message_type(14);
  static const int TGuildGetListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetListRsp, totalnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetListRsp, guildarr_),
  };
  TGuildGetListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGetListRsp_descriptor_,
      TGuildGetListRsp::default_instance_,
      TGuildGetListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGetListRsp));
  TGuildGetCanApplyListReq_descriptor_ = file->message_type(15);
  static const int TGuildGetCanApplyListReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetCanApplyListReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetCanApplyListReq, limit_),
  };
  TGuildGetCanApplyListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGetCanApplyListReq_descriptor_,
      TGuildGetCanApplyListReq::default_instance_,
      TGuildGetCanApplyListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetCanApplyListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetCanApplyListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGetCanApplyListReq));
  TGuildGetCanApplyListRsp_descriptor_ = file->message_type(16);
  static const int TGuildGetCanApplyListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetCanApplyListRsp, guildarr_),
  };
  TGuildGetCanApplyListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGetCanApplyListRsp_descriptor_,
      TGuildGetCanApplyListRsp::default_instance_,
      TGuildGetCanApplyListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetCanApplyListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetCanApplyListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGetCanApplyListRsp));
  TGuildCreateReq_descriptor_ = file->message_type(17);
  static const int TGuildCreateReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildCreateReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildCreateReq, summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildCreateReq, phonenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildCreateReq, authcode_),
  };
  TGuildCreateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildCreateReq_descriptor_,
      TGuildCreateReq::default_instance_,
      TGuildCreateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildCreateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildCreateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildCreateReq));
  TGuildSearchReq_descriptor_ = file->message_type(18);
  static const int TGuildSearchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildSearchReq, name_),
  };
  TGuildSearchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildSearchReq_descriptor_,
      TGuildSearchReq::default_instance_,
      TGuildSearchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildSearchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildSearchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildSearchReq));
  TGuildSearchRsp_descriptor_ = file->message_type(19);
  static const int TGuildSearchRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildSearchRsp, guildarr_),
  };
  TGuildSearchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildSearchRsp_descriptor_,
      TGuildSearchRsp::default_instance_,
      TGuildSearchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildSearchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildSearchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildSearchRsp));
  TGuildGetApplyListRsp_descriptor_ = file->message_type(20);
  static const int TGuildGetApplyListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetApplyListRsp, applyarr_),
  };
  TGuildGetApplyListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGetApplyListRsp_descriptor_,
      TGuildGetApplyListRsp::default_instance_,
      TGuildGetApplyListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetApplyListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetApplyListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGetApplyListRsp));
  TGuildApplyReq_descriptor_ = file->message_type(21);
  static const int TGuildApplyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildApplyReq, guildid_),
  };
  TGuildApplyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildApplyReq_descriptor_,
      TGuildApplyReq::default_instance_,
      TGuildApplyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildApplyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildApplyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildApplyReq));
  TGuildCancelApplyReq_descriptor_ = file->message_type(22);
  static const int TGuildCancelApplyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildCancelApplyReq, guildid_),
  };
  TGuildCancelApplyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildCancelApplyReq_descriptor_,
      TGuildCancelApplyReq::default_instance_,
      TGuildCancelApplyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildCancelApplyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildCancelApplyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildCancelApplyReq));
  TGuildVerifyReq_descriptor_ = file->message_type(23);
  static const int TGuildVerifyReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildVerifyReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildVerifyReq, ret_),
  };
  TGuildVerifyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildVerifyReq_descriptor_,
      TGuildVerifyReq::default_instance_,
      TGuildVerifyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildVerifyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildVerifyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildVerifyReq));
  TGuildVerifyAllReq_descriptor_ = file->message_type(24);
  static const int TGuildVerifyAllReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildVerifyAllReq, ret_),
  };
  TGuildVerifyAllReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildVerifyAllReq_descriptor_,
      TGuildVerifyAllReq::default_instance_,
      TGuildVerifyAllReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildVerifyAllReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildVerifyAllReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildVerifyAllReq));
  TGuildGetMemberListRsp_descriptor_ = file->message_type(25);
  static const int TGuildGetMemberListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetMemberListRsp, memberarr_),
  };
  TGuildGetMemberListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGetMemberListRsp_descriptor_,
      TGuildGetMemberListRsp::default_instance_,
      TGuildGetMemberListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetMemberListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetMemberListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGetMemberListRsp));
  TGuildModifyReq_descriptor_ = file->message_type(26);
  static const int TGuildModifyReq_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildModifyReq, bannername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildModifyReq, bannerbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildModifyReq, summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildModifyReq, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildModifyReq, reviewmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildModifyReq, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildModifyReq, qq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildModifyReq, linegroup_),
  };
  TGuildModifyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildModifyReq_descriptor_,
      TGuildModifyReq::default_instance_,
      TGuildModifyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildModifyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildModifyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildModifyReq));
  TGuildDismissRsp_descriptor_ = file->message_type(27);
  static const int TGuildDismissRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildDismissRsp, guildwarsign_),
  };
  TGuildDismissRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildDismissRsp_descriptor_,
      TGuildDismissRsp::default_instance_,
      TGuildDismissRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildDismissRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildDismissRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildDismissRsp));
  TGuildAppointRpgReq_descriptor_ = file->message_type(28);
  static const int TGuildAppointRpgReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildAppointRpgReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildAppointRpgReq, post_),
  };
  TGuildAppointRpgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildAppointRpgReq_descriptor_,
      TGuildAppointRpgReq::default_instance_,
      TGuildAppointRpgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildAppointRpgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildAppointRpgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildAppointRpgReq));
  TGuildDemiseReq_descriptor_ = file->message_type(29);
  static const int TGuildDemiseReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildDemiseReq, uid_),
  };
  TGuildDemiseReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildDemiseReq_descriptor_,
      TGuildDemiseReq::default_instance_,
      TGuildDemiseReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildDemiseReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildDemiseReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildDemiseReq));
  TGuildRemoveReq_descriptor_ = file->message_type(30);
  static const int TGuildRemoveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildRemoveReq, uid_),
  };
  TGuildRemoveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildRemoveReq_descriptor_,
      TGuildRemoveReq::default_instance_,
      TGuildRemoveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildRemoveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildRemoveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildRemoveReq));
  TGuildDonateReq_descriptor_ = file->message_type(31);
  static const int TGuildDonateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildDonateReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildDonateReq, index_),
  };
  TGuildDonateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildDonateReq_descriptor_,
      TGuildDonateReq::default_instance_,
      TGuildDonateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildDonateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildDonateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildDonateReq));
  TGuildLevelRankInfo_descriptor_ = file->message_type(32);
  static const int TGuildLevelRankInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildLevelRankInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildLevelRankInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildLevelRankInfo, guildlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildLevelRankInfo, bannername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildLevelRankInfo, bannerbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildLevelRankInfo, htid_),
  };
  TGuildLevelRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildLevelRankInfo_descriptor_,
      TGuildLevelRankInfo::default_instance_,
      TGuildLevelRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildLevelRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildLevelRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildLevelRankInfo));
  TGuildGetLevelRankReq_descriptor_ = file->message_type(33);
  static const int TGuildGetLevelRankReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetLevelRankReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetLevelRankReq, limit_),
  };
  TGuildGetLevelRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGetLevelRankReq_descriptor_,
      TGuildGetLevelRankReq::default_instance_,
      TGuildGetLevelRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetLevelRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetLevelRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGetLevelRankReq));
  TGuildGetLevelRankRsp_descriptor_ = file->message_type(34);
  static const int TGuildGetLevelRankRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetLevelRankRsp, rankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetLevelRankRsp, myrank_),
  };
  TGuildGetLevelRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGetLevelRankRsp_descriptor_,
      TGuildGetLevelRankRsp::default_instance_,
      TGuildGetLevelRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetLevelRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetLevelRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGetLevelRankRsp));
  TGuildFightForceRankInfo_descriptor_ = file->message_type(35);
  static const int TGuildFightForceRankInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildFightForceRankInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildFightForceRankInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildFightForceRankInfo, fightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildFightForceRankInfo, bannername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildFightForceRankInfo, bannerbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildFightForceRankInfo, htid_),
  };
  TGuildFightForceRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildFightForceRankInfo_descriptor_,
      TGuildFightForceRankInfo::default_instance_,
      TGuildFightForceRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildFightForceRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildFightForceRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildFightForceRankInfo));
  TGuildGetFightForceRankReq_descriptor_ = file->message_type(36);
  static const int TGuildGetFightForceRankReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetFightForceRankReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetFightForceRankReq, limit_),
  };
  TGuildGetFightForceRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGetFightForceRankReq_descriptor_,
      TGuildGetFightForceRankReq::default_instance_,
      TGuildGetFightForceRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetFightForceRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetFightForceRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGetFightForceRankReq));
  TGuildGetFightForceRankRsp_descriptor_ = file->message_type(37);
  static const int TGuildGetFightForceRankRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetFightForceRankRsp, rankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetFightForceRankRsp, myrank_),
  };
  TGuildGetFightForceRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGetFightForceRankRsp_descriptor_,
      TGuildGetFightForceRankRsp::default_instance_,
      TGuildGetFightForceRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetFightForceRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetFightForceRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGetFightForceRankRsp));
  TGuildTreasMapFixReq_descriptor_ = file->message_type(38);
  static const int TGuildTreasMapFixReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildTreasMapFixReq, fixnum_),
  };
  TGuildTreasMapFixReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildTreasMapFixReq_descriptor_,
      TGuildTreasMapFixReq::default_instance_,
      TGuildTreasMapFixReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildTreasMapFixReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildTreasMapFixReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildTreasMapFixReq));
  TGuildTreasMapFixRsp_descriptor_ = file->message_type(39);
  static const int TGuildTreasMapFixRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildTreasMapFixRsp, fixinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildTreasMapFixRsp, ret_),
  };
  TGuildTreasMapFixRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildTreasMapFixRsp_descriptor_,
      TGuildTreasMapFixRsp::default_instance_,
      TGuildTreasMapFixRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildTreasMapFixRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildTreasMapFixRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildTreasMapFixRsp));
  TGuildTreasMapFixRewardRsp_descriptor_ = file->message_type(40);
  static const int TGuildTreasMapFixRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildTreasMapFixRewardRsp, fixinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildTreasMapFixRewardRsp, rewardarray_),
  };
  TGuildTreasMapFixRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildTreasMapFixRewardRsp_descriptor_,
      TGuildTreasMapFixRewardRsp::default_instance_,
      TGuildTreasMapFixRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildTreasMapFixRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildTreasMapFixRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildTreasMapFixRewardRsp));
  TSlgGuildSyncMember_descriptor_ = file->message_type(41);
  static const int TSlgGuildSyncMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgGuildSyncMember, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgGuildSyncMember, post_),
  };
  TSlgGuildSyncMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgGuildSyncMember_descriptor_,
      TSlgGuildSyncMember::default_instance_,
      TSlgGuildSyncMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgGuildSyncMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgGuildSyncMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgGuildSyncMember));
  TGuildGetSyncInfoReq_descriptor_ = file->message_type(42);
  static const int TGuildGetSyncInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetSyncInfoReq, guildid_),
  };
  TGuildGetSyncInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGetSyncInfoReq_descriptor_,
      TGuildGetSyncInfoReq::default_instance_,
      TGuildGetSyncInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetSyncInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetSyncInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGetSyncInfoReq));
  TGuildGetSyncInfoRsp_descriptor_ = file->message_type(43);
  static const int TGuildGetSyncInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetSyncInfoRsp, memberarr_),
  };
  TGuildGetSyncInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGetSyncInfoRsp_descriptor_,
      TGuildGetSyncInfoRsp::default_instance_,
      TGuildGetSyncInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetSyncInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetSyncInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGetSyncInfoRsp));
  TGuildChangeGnameReq_descriptor_ = file->message_type(44);
  static const int TGuildChangeGnameReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildChangeGnameReq, gname_),
  };
  TGuildChangeGnameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildChangeGnameReq_descriptor_,
      TGuildChangeGnameReq::default_instance_,
      TGuildChangeGnameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildChangeGnameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildChangeGnameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildChangeGnameReq));
  EReviewMode_descriptor_ = file->enum_type(0);
  EVerifyRet_descriptor_ = file->enum_type(1);
  ETipType_descriptor_ = file->enum_type(2);
  ETMFRet_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fGuild_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildLimit_descriptor_, &TGuildLimit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildDonate_descriptor_, &TGuildDonate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildTip_descriptor_, &TGuildTip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildApplyInfo_descriptor_, &TGuildApplyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildImpeachInfo_descriptor_, &TGuildImpeachInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildTreasMapFix_descriptor_, &TGuildTreasMapFix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildMemberInfo_descriptor_, &TGuildMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBaseGuildInfo_descriptor_, &TBaseGuildInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildSalaryInfo_descriptor_, &TGuildSalaryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGetInfoRsp_descriptor_, &TGuildGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildUpdateOurGuildNotify_descriptor_, &TGuildUpdateOurGuildNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGetOtherInfoReq_descriptor_, &TGuildGetOtherInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGetOtherInfoRsp_descriptor_, &TGuildGetOtherInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGetListReq_descriptor_, &TGuildGetListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGetListRsp_descriptor_, &TGuildGetListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGetCanApplyListReq_descriptor_, &TGuildGetCanApplyListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGetCanApplyListRsp_descriptor_, &TGuildGetCanApplyListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildCreateReq_descriptor_, &TGuildCreateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildSearchReq_descriptor_, &TGuildSearchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildSearchRsp_descriptor_, &TGuildSearchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGetApplyListRsp_descriptor_, &TGuildGetApplyListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildApplyReq_descriptor_, &TGuildApplyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildCancelApplyReq_descriptor_, &TGuildCancelApplyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildVerifyReq_descriptor_, &TGuildVerifyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildVerifyAllReq_descriptor_, &TGuildVerifyAllReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGetMemberListRsp_descriptor_, &TGuildGetMemberListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildModifyReq_descriptor_, &TGuildModifyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildDismissRsp_descriptor_, &TGuildDismissRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildAppointRpgReq_descriptor_, &TGuildAppointRpgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildDemiseReq_descriptor_, &TGuildDemiseReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildRemoveReq_descriptor_, &TGuildRemoveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildDonateReq_descriptor_, &TGuildDonateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildLevelRankInfo_descriptor_, &TGuildLevelRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGetLevelRankReq_descriptor_, &TGuildGetLevelRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGetLevelRankRsp_descriptor_, &TGuildGetLevelRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildFightForceRankInfo_descriptor_, &TGuildFightForceRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGetFightForceRankReq_descriptor_, &TGuildGetFightForceRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGetFightForceRankRsp_descriptor_, &TGuildGetFightForceRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildTreasMapFixReq_descriptor_, &TGuildTreasMapFixReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildTreasMapFixRsp_descriptor_, &TGuildTreasMapFixRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildTreasMapFixRewardRsp_descriptor_, &TGuildTreasMapFixRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgGuildSyncMember_descriptor_, &TSlgGuildSyncMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGetSyncInfoReq_descriptor_, &TGuildGetSyncInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGetSyncInfoRsp_descriptor_, &TGuildGetSyncInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildChangeGnameReq_descriptor_, &TGuildChangeGnameReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fGuild_2eproto() {
  delete TGuildLimit::default_instance_;
  delete TGuildLimit_reflection_;
  delete TGuildDonate::default_instance_;
  delete TGuildDonate_reflection_;
  delete TGuildTip::default_instance_;
  delete TGuildTip_reflection_;
  delete TGuildApplyInfo::default_instance_;
  delete TGuildApplyInfo_reflection_;
  delete TGuildImpeachInfo::default_instance_;
  delete TGuildImpeachInfo_reflection_;
  delete TGuildTreasMapFix::default_instance_;
  delete TGuildTreasMapFix_reflection_;
  delete TGuildMemberInfo::default_instance_;
  delete TGuildMemberInfo_reflection_;
  delete TBaseGuildInfo::default_instance_;
  delete TBaseGuildInfo_reflection_;
  delete TGuildSalaryInfo::default_instance_;
  delete TGuildSalaryInfo_reflection_;
  delete TGuildGetInfoRsp::default_instance_;
  delete TGuildGetInfoRsp_reflection_;
  delete TGuildUpdateOurGuildNotify::default_instance_;
  delete TGuildUpdateOurGuildNotify_reflection_;
  delete TGuildGetOtherInfoReq::default_instance_;
  delete TGuildGetOtherInfoReq_reflection_;
  delete TGuildGetOtherInfoRsp::default_instance_;
  delete TGuildGetOtherInfoRsp_reflection_;
  delete TGuildGetListReq::default_instance_;
  delete TGuildGetListReq_reflection_;
  delete TGuildGetListRsp::default_instance_;
  delete TGuildGetListRsp_reflection_;
  delete TGuildGetCanApplyListReq::default_instance_;
  delete TGuildGetCanApplyListReq_reflection_;
  delete TGuildGetCanApplyListRsp::default_instance_;
  delete TGuildGetCanApplyListRsp_reflection_;
  delete TGuildCreateReq::default_instance_;
  delete TGuildCreateReq_reflection_;
  delete TGuildSearchReq::default_instance_;
  delete TGuildSearchReq_reflection_;
  delete TGuildSearchRsp::default_instance_;
  delete TGuildSearchRsp_reflection_;
  delete TGuildGetApplyListRsp::default_instance_;
  delete TGuildGetApplyListRsp_reflection_;
  delete TGuildApplyReq::default_instance_;
  delete TGuildApplyReq_reflection_;
  delete TGuildCancelApplyReq::default_instance_;
  delete TGuildCancelApplyReq_reflection_;
  delete TGuildVerifyReq::default_instance_;
  delete TGuildVerifyReq_reflection_;
  delete TGuildVerifyAllReq::default_instance_;
  delete TGuildVerifyAllReq_reflection_;
  delete TGuildGetMemberListRsp::default_instance_;
  delete TGuildGetMemberListRsp_reflection_;
  delete TGuildModifyReq::default_instance_;
  delete TGuildModifyReq_reflection_;
  delete TGuildDismissRsp::default_instance_;
  delete TGuildDismissRsp_reflection_;
  delete TGuildAppointRpgReq::default_instance_;
  delete TGuildAppointRpgReq_reflection_;
  delete TGuildDemiseReq::default_instance_;
  delete TGuildDemiseReq_reflection_;
  delete TGuildRemoveReq::default_instance_;
  delete TGuildRemoveReq_reflection_;
  delete TGuildDonateReq::default_instance_;
  delete TGuildDonateReq_reflection_;
  delete TGuildLevelRankInfo::default_instance_;
  delete TGuildLevelRankInfo_reflection_;
  delete TGuildGetLevelRankReq::default_instance_;
  delete TGuildGetLevelRankReq_reflection_;
  delete TGuildGetLevelRankRsp::default_instance_;
  delete TGuildGetLevelRankRsp_reflection_;
  delete TGuildFightForceRankInfo::default_instance_;
  delete TGuildFightForceRankInfo_reflection_;
  delete TGuildGetFightForceRankReq::default_instance_;
  delete TGuildGetFightForceRankReq_reflection_;
  delete TGuildGetFightForceRankRsp::default_instance_;
  delete TGuildGetFightForceRankRsp_reflection_;
  delete TGuildTreasMapFixReq::default_instance_;
  delete TGuildTreasMapFixReq_reflection_;
  delete TGuildTreasMapFixRsp::default_instance_;
  delete TGuildTreasMapFixRsp_reflection_;
  delete TGuildTreasMapFixRewardRsp::default_instance_;
  delete TGuildTreasMapFixRewardRsp_reflection_;
  delete TSlgGuildSyncMember::default_instance_;
  delete TSlgGuildSyncMember_reflection_;
  delete TGuildGetSyncInfoReq::default_instance_;
  delete TGuildGetSyncInfoReq_reflection_;
  delete TGuildGetSyncInfoRsp::default_instance_;
  delete TGuildGetSyncInfoRsp_reflection_;
  delete TGuildChangeGnameReq::default_instance_;
  delete TGuildChangeGnameReq_reflection_;
}

void protobuf_AddDesc_net_2fGuild_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::pb::protobuf_AddDesc_net_2fGuildUser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017net/Guild.proto\022\002pb\032\026net/CommonReward."
    "proto\032\016net/User.proto\032\023net/GuildUser.pro"
    "to\"!\n\013TGuildLimit\022\022\n\nFightForce\030\001 \001(\004\"8\n"
    "\014TGuildDonate\022\014\n\004Type\030\001 \001(\r\022\013\n\003Exp\030\002 \001(\r"
    "\022\r\n\005Level\030\003 \001(\r\"G\n\tTGuildTip\022\014\n\004Time\030\001 \001"
    "(\004\022\032\n\004Type\030\002 \001(\0162\014.pb.ETipType\022\020\n\010ParamA"
    "rr\030\003 \003(\t\"U\n\017TGuildApplyInfo\022/\n\010UserInfo\030"
    "\001 \001(\0132\035.pb.TUserSimpleInfoWithStatus\022\021\n\t"
    "ApplyTime\030\002 \001(\004\"=\n\021TGuildImpeachInfo\022\013\n\003"
    "Uid\030\001 \001(\004\022\r\n\005Uname\030\002 \001(\t\022\014\n\004Time\030\003 \001(\004\"p"
    "\n\021TGuildTreasMapFix\022\021\n\tResetTime\030\001 \001(\004\022\023"
    "\n\013FixProgress\030\002 \001(\r\022\026\n\016DayFixProgress\030\003 "
    "\001(\r\022\033\n\023HistoryResetTimeArr\030\004 \003(\004\"\210\001\n\020TGu"
    "ildMemberInfo\022/\n\010UserInfo\030\001 \001(\0132\035.pb.TUs"
    "erSimpleInfoWithStatus\022\037\n\007RpgPost\030\002 \001(\0162"
    "\016.pb.EGuildPost\022\016\n\006Donate\030\003 \001(\r\022\022\n\nWeekD"
    "onate\030\004 \001(\r\"\204\003\n\016TBaseGuildInfo\022\017\n\007GuildI"
    "d\030\001 \001(\004\022\014\n\004Name\030\002 \001(\t\022\022\n\nBannerName\030\003 \001("
    "\t\022\022\n\nBannerBase\030\004 \001(\r\022\r\n\005Level\030\005 \001(\r\022\013\n\003"
    "Exp\030\006 \001(\r\022\021\n\tMemberNum\030\007 \001(\r\022\022\n\nFightFor"
    "ce\030\010 \001(\004\022\017\n\007Summary\030\t \001(\t\022#\n\nReviewMode\030"
    "\n \001(\0162\017.pb.EReviewMode\022\036\n\005Limit\030\013 \001(\0132\017."
    "pb.TGuildLimit\022\020\n\010LeaderId\030\014 \001(\004\022\022\n\nLead"
    "erName\030\r \001(\t\022\n\n\002QQ\030\016 \001(\004\022\024\n\014SumDayDonate"
    "\030\017 \001(\r\022\022\n\nKickOutNum\030\020 \001(\r\022\025\n\rLastWeekSc"
    "ore\030\021 \001(\r\022\014\n\004Rank\030\022 \001(\r\022\021\n\tLineGroup\030\023 \001"
    "(\t\"-\n\020TGuildSalaryInfo\022\014\n\004Post\030\001 \001(\r\022\013\n\003"
    "Num\030\002 \001(\r\"\333\002\n\020TGuildGetInfoRsp\022 \n\006MyInfo"
    "\030\001 \001(\0132\020.pb.TGuildMyInfo\022%\n\tGuildInfo\030\002 "
    "\001(\0132\022.pb.TBaseGuildInfo\022\016\n\006Notice\030\003 \001(\t\022"
    "\035\n\006TipArr\030\004 \003(\0132\r.pb.TGuildTip\022#\n\tDonate"
    "Arr\030\005 \003(\0132\020.pb.TGuildDonate\022*\n\013ImpeachIn"
    "fo\030\006 \001(\0132\025.pb.TGuildImpeachInfo\022\023\n\013Dismi"
    "ssTime\030\007 \001(\004\022&\n\007TMFInfo\030\010 \001(\0132\025.pb.TGuil"
    "dTreasMapFix\022\024\n\014SendEmailNum\030\t \001(\r\022+\n\rSa"
    "laryInfoArr\030\n \003(\0132\024.pb.TGuildSalaryInfo\""
    "\323\002\n\032TGuildUpdateOurGuildNotify\022%\n\tGuildI"
    "nfo\030\001 \001(\0132\022.pb.TBaseGuildInfo\022\016\n\006Notice\030"
    "\002 \001(\t\022\035\n\006TipArr\030\003 \003(\0132\r.pb.TGuildTip\022#\n\t"
    "DonateArr\030\004 \003(\0132\020.pb.TGuildDonate\022\020\n\010App"
    "lyNum\030\005 \001(\r\022\022\n\nCreateTime\030\006 \001(\004\022*\n\013Impea"
    "chInfo\030\007 \001(\0132\025.pb.TGuildImpeachInfo\022\023\n\013D"
    "ismissTime\030\010 \001(\004\022&\n\007TMFInfo\030\t \001(\0132\025.pb.T"
    "GuildTreasMapFix\022+\n\rSalaryInfoArr\030\n \003(\0132"
    "\024.pb.TGuildSalaryInfo\"(\n\025TGuildGetOtherI"
    "nfoReq\022\017\n\007GuildId\030\001 \001(\004\"L\n\025TGuildGetOthe"
    "rInfoRsp\022%\n\tGuildInfo\030\001 \001(\0132\022.pb.TBaseGu"
    "ildInfo\022\014\n\004Rank\030\002 \001(\r\"$\n\020TGuildGetListRe"
    "q\022\020\n\010FromRank\030\001 \001(\r\"J\n\020TGuildGetListRsp\022"
    "\020\n\010TotalNum\030\001 \001(\r\022$\n\010GuildArr\030\002 \003(\0132\022.pb"
    ".TBaseGuildInfo\"9\n\030TGuildGetCanApplyList"
    "Req\022\016\n\006Offset\030\001 \001(\r\022\r\n\005Limit\030\002 \001(\r\"@\n\030TG"
    "uildGetCanApplyListRsp\022$\n\010GuildArr\030\001 \003(\013"
    "2\022.pb.TBaseGuildInfo\"W\n\017TGuildCreateReq\022"
    "\014\n\004Name\030\001 \001(\t\022\017\n\007Summary\030\002 \001(\t\022\023\n\013PhoneN"
    "umber\030\003 \001(\t\022\020\n\010AuthCode\030\004 \001(\t\"\037\n\017TGuildS"
    "earchReq\022\014\n\004Name\030\001 \001(\t\"7\n\017TGuildSearchRs"
    "p\022$\n\010GuildArr\030\001 \003(\0132\022.pb.TBaseGuildInfo\""
    ">\n\025TGuildGetApplyListRsp\022%\n\010ApplyArr\030\001 \003"
    "(\0132\023.pb.TGuildApplyInfo\"!\n\016TGuildApplyRe"
    "q\022\017\n\007GuildId\030\001 \001(\004\"\'\n\024TGuildCancelApplyR"
    "eq\022\017\n\007GuildId\030\001 \001(\004\";\n\017TGuildVerifyReq\022\013"
    "\n\003Uid\030\001 \001(\004\022\033\n\003Ret\030\002 \001(\0162\016.pb.EVerifyRet"
    "\"1\n\022TGuildVerifyAllReq\022\033\n\003Ret\030\001 \001(\0162\016.pb"
    ".EVerifyRet\"A\n\026TGuildGetMemberListRsp\022\'\n"
    "\tMemberArr\030\001 \003(\0132\024.pb.TGuildMemberInfo\"\276"
    "\001\n\017TGuildModifyReq\022\022\n\nBannerName\030\001 \001(\t\022\022"
    "\n\nBannerBase\030\002 \001(\r\022\017\n\007Summary\030\003 \001(\t\022\016\n\006N"
    "otice\030\004 \001(\t\022#\n\nReviewMode\030\005 \001(\0162\017.pb.ERe"
    "viewMode\022\036\n\005Limit\030\006 \001(\0132\017.pb.TGuildLimit"
    "\022\n\n\002QQ\030\007 \001(\004\022\021\n\tLineGroup\030\010 \001(\t\"(\n\020TGuil"
    "dDismissRsp\022\024\n\014GuildWarSign\030\001 \001(\r\"@\n\023TGu"
    "ildAppointRpgReq\022\013\n\003Uid\030\001 \001(\004\022\034\n\004Post\030\002 "
    "\001(\0162\016.pb.EGuildPost\"\036\n\017TGuildDemiseReq\022\013"
    "\n\003Uid\030\001 \001(\004\"\036\n\017TGuildRemoveReq\022\013\n\003Uid\030\001 "
    "\001(\004\".\n\017TGuildDonateReq\022\014\n\004Type\030\001 \001(\r\022\r\n\005"
    "Index\030\002 \001(\r\"\203\001\n\023TGuildLevelRankInfo\022\017\n\007G"
    "uildId\030\001 \001(\004\022\021\n\tGuildName\030\002 \001(\t\022\022\n\nGuild"
    "Level\030\003 \001(\r\022\022\n\nBannerName\030\004 \001(\t\022\022\n\nBanne"
    "rBase\030\005 \001(\r\022\014\n\004Htid\030\006 \001(\r\"6\n\025TGuildGetLe"
    "velRankReq\022\016\n\006Offset\030\001 \001(\r\022\r\n\005Limit\030\002 \001("
    "\r\"Q\n\025TGuildGetLevelRankRsp\022(\n\007RankArr\030\001 "
    "\003(\0132\027.pb.TGuildLevelRankInfo\022\016\n\006MyRank\030\002"
    " \001(\005\"\210\001\n\030TGuildFightForceRankInfo\022\017\n\007Gui"
    "ldId\030\001 \001(\004\022\021\n\tGuildName\030\002 \001(\t\022\022\n\nFightFo"
    "rce\030\003 \001(\004\022\022\n\nBannerName\030\004 \001(\t\022\022\n\nBannerB"
    "ase\030\005 \001(\r\022\014\n\004Htid\030\006 \001(\r\";\n\032TGuildGetFigh"
    "tForceRankReq\022\016\n\006Offset\030\001 \001(\r\022\r\n\005Limit\030\002"
    " \001(\r\"[\n\032TGuildGetFightForceRankRsp\022-\n\007Ra"
    "nkArr\030\001 \003(\0132\034.pb.TGuildFightForceRankInf"
    "o\022\016\n\006MyRank\030\002 \001(\005\"&\n\024TGuildTreasMapFixRe"
    "q\022\016\n\006FixNum\030\001 \001(\r\"K\n\024TGuildTreasMapFixRs"
    "p\022&\n\007fixInfo\030\001 \001(\0132\025.pb.TGuildTreasMapFi"
    "x\022\013\n\003ret\030\002 \001(\r\"l\n\032TGuildTreasMapFixRewar"
    "dRsp\022&\n\007fixInfo\030\001 \001(\0132\025.pb.TGuildTreasMa"
    "pFix\022&\n\013RewardArray\030\002 \003(\0132\021.pb.TCommonRe"
    "ward\"@\n\023TSlgGuildSyncMember\022\013\n\003Uid\030\001 \001(\004"
    "\022\034\n\004Post\030\002 \001(\0162\016.pb.EGuildPost\"\'\n\024TGuild"
    "GetSyncInfoReq\022\017\n\007GuildId\030\001 \001(\004\"B\n\024TGuil"
    "dGetSyncInfoRsp\022*\n\tMemberArr\030\001 \003(\0132\027.pb."
    "TSlgGuildSyncMember\"%\n\024TGuildChangeGname"
    "Req\022\r\n\005Gname\030\001 \001(\t*B\n\013EReviewMode\022\022\n\016REV"
    "IEW_DEFAULT\020\000\022\016\n\nREVIEW_MAN\020\001\022\017\n\013REVIEW_"
    "AUTO\020\002*2\n\nEVerifyRet\022\021\n\rVERIFY_ACCEPT\020\001\022"
    "\021\n\rVERIFY_REJECT\020\002*\275\001\n\010ETipType\022\016\n\nTIP_C"
    "REATE\020\001\022\014\n\010TIP_JOIN\020\002\022\014\n\010TIP_QUIT\020\003\022\016\n\nT"
    "IP_REMOVE\020\004\022\022\n\016TIP_APPOINT_UP\020\005\022\024\n\020TIP_A"
    "PPOINT_DOWN\020\006\022\025\n\021TIP_START_IMPEACH\020\007\022\023\n\017"
    "TIP_END_IMPEACH\020\010\022\016\n\nTIP_DEMISE\020\t\022\017\n\013TIP"
    "_DISMISS\020\n*,\n\007ETMFRet\022\r\n\tTMFRET_OK\020\001\022\022\n\016"
    "TMFRET_PRGFULL\020\002", 4416);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Guild.proto", &protobuf_RegisterTypes);
  TGuildLimit::default_instance_ = new TGuildLimit();
  TGuildDonate::default_instance_ = new TGuildDonate();
  TGuildTip::default_instance_ = new TGuildTip();
  TGuildApplyInfo::default_instance_ = new TGuildApplyInfo();
  TGuildImpeachInfo::default_instance_ = new TGuildImpeachInfo();
  TGuildTreasMapFix::default_instance_ = new TGuildTreasMapFix();
  TGuildMemberInfo::default_instance_ = new TGuildMemberInfo();
  TBaseGuildInfo::default_instance_ = new TBaseGuildInfo();
  TGuildSalaryInfo::default_instance_ = new TGuildSalaryInfo();
  TGuildGetInfoRsp::default_instance_ = new TGuildGetInfoRsp();
  TGuildUpdateOurGuildNotify::default_instance_ = new TGuildUpdateOurGuildNotify();
  TGuildGetOtherInfoReq::default_instance_ = new TGuildGetOtherInfoReq();
  TGuildGetOtherInfoRsp::default_instance_ = new TGuildGetOtherInfoRsp();
  TGuildGetListReq::default_instance_ = new TGuildGetListReq();
  TGuildGetListRsp::default_instance_ = new TGuildGetListRsp();
  TGuildGetCanApplyListReq::default_instance_ = new TGuildGetCanApplyListReq();
  TGuildGetCanApplyListRsp::default_instance_ = new TGuildGetCanApplyListRsp();
  TGuildCreateReq::default_instance_ = new TGuildCreateReq();
  TGuildSearchReq::default_instance_ = new TGuildSearchReq();
  TGuildSearchRsp::default_instance_ = new TGuildSearchRsp();
  TGuildGetApplyListRsp::default_instance_ = new TGuildGetApplyListRsp();
  TGuildApplyReq::default_instance_ = new TGuildApplyReq();
  TGuildCancelApplyReq::default_instance_ = new TGuildCancelApplyReq();
  TGuildVerifyReq::default_instance_ = new TGuildVerifyReq();
  TGuildVerifyAllReq::default_instance_ = new TGuildVerifyAllReq();
  TGuildGetMemberListRsp::default_instance_ = new TGuildGetMemberListRsp();
  TGuildModifyReq::default_instance_ = new TGuildModifyReq();
  TGuildDismissRsp::default_instance_ = new TGuildDismissRsp();
  TGuildAppointRpgReq::default_instance_ = new TGuildAppointRpgReq();
  TGuildDemiseReq::default_instance_ = new TGuildDemiseReq();
  TGuildRemoveReq::default_instance_ = new TGuildRemoveReq();
  TGuildDonateReq::default_instance_ = new TGuildDonateReq();
  TGuildLevelRankInfo::default_instance_ = new TGuildLevelRankInfo();
  TGuildGetLevelRankReq::default_instance_ = new TGuildGetLevelRankReq();
  TGuildGetLevelRankRsp::default_instance_ = new TGuildGetLevelRankRsp();
  TGuildFightForceRankInfo::default_instance_ = new TGuildFightForceRankInfo();
  TGuildGetFightForceRankReq::default_instance_ = new TGuildGetFightForceRankReq();
  TGuildGetFightForceRankRsp::default_instance_ = new TGuildGetFightForceRankRsp();
  TGuildTreasMapFixReq::default_instance_ = new TGuildTreasMapFixReq();
  TGuildTreasMapFixRsp::default_instance_ = new TGuildTreasMapFixRsp();
  TGuildTreasMapFixRewardRsp::default_instance_ = new TGuildTreasMapFixRewardRsp();
  TSlgGuildSyncMember::default_instance_ = new TSlgGuildSyncMember();
  TGuildGetSyncInfoReq::default_instance_ = new TGuildGetSyncInfoReq();
  TGuildGetSyncInfoRsp::default_instance_ = new TGuildGetSyncInfoRsp();
  TGuildChangeGnameReq::default_instance_ = new TGuildChangeGnameReq();
  TGuildLimit::default_instance_->InitAsDefaultInstance();
  TGuildDonate::default_instance_->InitAsDefaultInstance();
  TGuildTip::default_instance_->InitAsDefaultInstance();
  TGuildApplyInfo::default_instance_->InitAsDefaultInstance();
  TGuildImpeachInfo::default_instance_->InitAsDefaultInstance();
  TGuildTreasMapFix::default_instance_->InitAsDefaultInstance();
  TGuildMemberInfo::default_instance_->InitAsDefaultInstance();
  TBaseGuildInfo::default_instance_->InitAsDefaultInstance();
  TGuildSalaryInfo::default_instance_->InitAsDefaultInstance();
  TGuildGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TGuildUpdateOurGuildNotify::default_instance_->InitAsDefaultInstance();
  TGuildGetOtherInfoReq::default_instance_->InitAsDefaultInstance();
  TGuildGetOtherInfoRsp::default_instance_->InitAsDefaultInstance();
  TGuildGetListReq::default_instance_->InitAsDefaultInstance();
  TGuildGetListRsp::default_instance_->InitAsDefaultInstance();
  TGuildGetCanApplyListReq::default_instance_->InitAsDefaultInstance();
  TGuildGetCanApplyListRsp::default_instance_->InitAsDefaultInstance();
  TGuildCreateReq::default_instance_->InitAsDefaultInstance();
  TGuildSearchReq::default_instance_->InitAsDefaultInstance();
  TGuildSearchRsp::default_instance_->InitAsDefaultInstance();
  TGuildGetApplyListRsp::default_instance_->InitAsDefaultInstance();
  TGuildApplyReq::default_instance_->InitAsDefaultInstance();
  TGuildCancelApplyReq::default_instance_->InitAsDefaultInstance();
  TGuildVerifyReq::default_instance_->InitAsDefaultInstance();
  TGuildVerifyAllReq::default_instance_->InitAsDefaultInstance();
  TGuildGetMemberListRsp::default_instance_->InitAsDefaultInstance();
  TGuildModifyReq::default_instance_->InitAsDefaultInstance();
  TGuildDismissRsp::default_instance_->InitAsDefaultInstance();
  TGuildAppointRpgReq::default_instance_->InitAsDefaultInstance();
  TGuildDemiseReq::default_instance_->InitAsDefaultInstance();
  TGuildRemoveReq::default_instance_->InitAsDefaultInstance();
  TGuildDonateReq::default_instance_->InitAsDefaultInstance();
  TGuildLevelRankInfo::default_instance_->InitAsDefaultInstance();
  TGuildGetLevelRankReq::default_instance_->InitAsDefaultInstance();
  TGuildGetLevelRankRsp::default_instance_->InitAsDefaultInstance();
  TGuildFightForceRankInfo::default_instance_->InitAsDefaultInstance();
  TGuildGetFightForceRankReq::default_instance_->InitAsDefaultInstance();
  TGuildGetFightForceRankRsp::default_instance_->InitAsDefaultInstance();
  TGuildTreasMapFixReq::default_instance_->InitAsDefaultInstance();
  TGuildTreasMapFixRsp::default_instance_->InitAsDefaultInstance();
  TGuildTreasMapFixRewardRsp::default_instance_->InitAsDefaultInstance();
  TSlgGuildSyncMember::default_instance_->InitAsDefaultInstance();
  TGuildGetSyncInfoReq::default_instance_->InitAsDefaultInstance();
  TGuildGetSyncInfoRsp::default_instance_->InitAsDefaultInstance();
  TGuildChangeGnameReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fGuild_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fGuild_2eproto {
  StaticDescriptorInitializer_net_2fGuild_2eproto() {
    protobuf_AddDesc_net_2fGuild_2eproto();
  }
} static_descriptor_initializer_net_2fGuild_2eproto_;
const ::google::protobuf::EnumDescriptor* EReviewMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EReviewMode_descriptor_;
}
bool EReviewMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EVerifyRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EVerifyRet_descriptor_;
}
bool EVerifyRet_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETipType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETipType_descriptor_;
}
bool ETipType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETMFRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETMFRet_descriptor_;
}
bool ETMFRet_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildLimit::kFightForceFieldNumber;
#endif  // !_MSC_VER

TGuildLimit::TGuildLimit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildLimit)
}

void TGuildLimit::InitAsDefaultInstance() {
}

TGuildLimit::TGuildLimit(const TGuildLimit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildLimit)
}

void TGuildLimit::SharedCtor() {
  _cached_size_ = 0;
  fightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildLimit::~TGuildLimit() {
  // @@protoc_insertion_point(destructor:pb.TGuildLimit)
  SharedDtor();
}

void TGuildLimit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildLimit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildLimit_descriptor_;
}

const TGuildLimit& TGuildLimit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildLimit* TGuildLimit::default_instance_ = NULL;

TGuildLimit* TGuildLimit::New() const {
  return new TGuildLimit;
}

void TGuildLimit::Clear() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildLimit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 FightForce = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildLimit)
  return false;
#undef DO_
}

void TGuildLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildLimit)
  // optional uint64 FightForce = 1;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildLimit)
}

::google::protobuf::uint8* TGuildLimit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildLimit)
  // optional uint64 FightForce = 1;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildLimit)
  return target;
}

int TGuildLimit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 FightForce = 1;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildLimit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildLimit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildLimit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildLimit::MergeFrom(const TGuildLimit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildLimit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildLimit::CopyFrom(const TGuildLimit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildLimit::IsInitialized() const {

  return true;
}

void TGuildLimit::Swap(TGuildLimit* other) {
  if (other != this) {
    std::swap(fightforce_, other->fightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildLimit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildLimit_descriptor_;
  metadata.reflection = TGuildLimit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildDonate::kTypeFieldNumber;
const int TGuildDonate::kExpFieldNumber;
const int TGuildDonate::kLevelFieldNumber;
#endif  // !_MSC_VER

TGuildDonate::TGuildDonate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildDonate)
}

void TGuildDonate::InitAsDefaultInstance() {
}

TGuildDonate::TGuildDonate(const TGuildDonate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildDonate)
}

void TGuildDonate::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  exp_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildDonate::~TGuildDonate() {
  // @@protoc_insertion_point(destructor:pb.TGuildDonate)
  SharedDtor();
}

void TGuildDonate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildDonate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildDonate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildDonate_descriptor_;
}

const TGuildDonate& TGuildDonate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildDonate* TGuildDonate::default_instance_ = NULL;

TGuildDonate* TGuildDonate::New() const {
  return new TGuildDonate;
}

void TGuildDonate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildDonate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildDonate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildDonate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Exp;
        break;
      }

      // optional uint32 Exp = 2;
      case 2: {
        if (tag == 16) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 3;
      case 3: {
        if (tag == 24) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildDonate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildDonate)
  return false;
#undef DO_
}

void TGuildDonate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildDonate)
  // optional uint32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 Exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }

  // optional uint32 Level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildDonate)
}

::google::protobuf::uint8* TGuildDonate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildDonate)
  // optional uint32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 Exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exp(), target);
  }

  // optional uint32 Level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildDonate)
  return target;
}

int TGuildDonate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 Exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 Level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildDonate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildDonate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildDonate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildDonate::MergeFrom(const TGuildDonate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildDonate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildDonate::CopyFrom(const TGuildDonate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildDonate::IsInitialized() const {

  return true;
}

void TGuildDonate::Swap(TGuildDonate* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildDonate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildDonate_descriptor_;
  metadata.reflection = TGuildDonate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildTip::kTimeFieldNumber;
const int TGuildTip::kTypeFieldNumber;
const int TGuildTip::kParamArrFieldNumber;
#endif  // !_MSC_VER

TGuildTip::TGuildTip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildTip)
}

void TGuildTip::InitAsDefaultInstance() {
}

TGuildTip::TGuildTip(const TGuildTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildTip)
}

void TGuildTip::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildTip::~TGuildTip() {
  // @@protoc_insertion_point(destructor:pb.TGuildTip)
  SharedDtor();
}

void TGuildTip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildTip_descriptor_;
}

const TGuildTip& TGuildTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildTip* TGuildTip::default_instance_ = NULL;

TGuildTip* TGuildTip::New() const {
  return new TGuildTip;
}

void TGuildTip::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    time_ = GOOGLE_ULONGLONG(0);
    type_ = 1;
  }
  paramarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildTip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional .pb.ETipType Type = 2;
      case 2: {
        if (tag == 16) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ETipType_IsValid(value)) {
            set_type(static_cast< ::pb::ETipType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ParamArr;
        break;
      }

      // repeated string ParamArr = 3;
      case 3: {
        if (tag == 26) {
         parse_ParamArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_paramarr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->paramarr(this->paramarr_size() - 1).data(),
            this->paramarr(this->paramarr_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "paramarr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ParamArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildTip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildTip)
  return false;
#undef DO_
}

void TGuildTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildTip)
  // optional uint64 Time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->time(), output);
  }

  // optional .pb.ETipType Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated string ParamArr = 3;
  for (int i = 0; i < this->paramarr_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->paramarr(i).data(), this->paramarr(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "paramarr");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->paramarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildTip)
}

::google::protobuf::uint8* TGuildTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildTip)
  // optional uint64 Time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->time(), target);
  }

  // optional .pb.ETipType Type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated string ParamArr = 3;
  for (int i = 0; i < this->paramarr_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->paramarr(i).data(), this->paramarr(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "paramarr");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->paramarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildTip)
  return target;
}

int TGuildTip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional .pb.ETipType Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated string ParamArr = 3;
  total_size += 1 * this->paramarr_size();
  for (int i = 0; i < this->paramarr_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->paramarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildTip::MergeFrom(const TGuildTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  paramarr_.MergeFrom(from.paramarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildTip::CopyFrom(const TGuildTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildTip::IsInitialized() const {

  return true;
}

void TGuildTip::Swap(TGuildTip* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(type_, other->type_);
    paramarr_.Swap(&other->paramarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildTip_descriptor_;
  metadata.reflection = TGuildTip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildApplyInfo::kUserInfoFieldNumber;
const int TGuildApplyInfo::kApplyTimeFieldNumber;
#endif  // !_MSC_VER

TGuildApplyInfo::TGuildApplyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildApplyInfo)
}

void TGuildApplyInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfoWithStatus*>(&::pb::TUserSimpleInfoWithStatus::default_instance());
}

TGuildApplyInfo::TGuildApplyInfo(const TGuildApplyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildApplyInfo)
}

void TGuildApplyInfo::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  applytime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildApplyInfo::~TGuildApplyInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildApplyInfo)
  SharedDtor();
}

void TGuildApplyInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TGuildApplyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildApplyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildApplyInfo_descriptor_;
}

const TGuildApplyInfo& TGuildApplyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildApplyInfo* TGuildApplyInfo::default_instance_ = NULL;

TGuildApplyInfo* TGuildApplyInfo::New() const {
  return new TGuildApplyInfo;
}

void TGuildApplyInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfoWithStatus::Clear();
    }
    applytime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildApplyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildApplyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfoWithStatus UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ApplyTime;
        break;
      }

      // optional uint64 ApplyTime = 2;
      case 2: {
        if (tag == 16) {
         parse_ApplyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &applytime_)));
          set_has_applytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildApplyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildApplyInfo)
  return false;
#undef DO_
}

void TGuildApplyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildApplyInfo)
  // optional .pb.TUserSimpleInfoWithStatus UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint64 ApplyTime = 2;
  if (has_applytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->applytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildApplyInfo)
}

::google::protobuf::uint8* TGuildApplyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildApplyInfo)
  // optional .pb.TUserSimpleInfoWithStatus UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint64 ApplyTime = 2;
  if (has_applytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->applytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildApplyInfo)
  return target;
}

int TGuildApplyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfoWithStatus UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint64 ApplyTime = 2;
    if (has_applytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->applytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildApplyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildApplyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildApplyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildApplyInfo::MergeFrom(const TGuildApplyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfoWithStatus::MergeFrom(from.userinfo());
    }
    if (from.has_applytime()) {
      set_applytime(from.applytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildApplyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildApplyInfo::CopyFrom(const TGuildApplyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildApplyInfo::IsInitialized() const {

  return true;
}

void TGuildApplyInfo::Swap(TGuildApplyInfo* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(applytime_, other->applytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildApplyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildApplyInfo_descriptor_;
  metadata.reflection = TGuildApplyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildImpeachInfo::kUidFieldNumber;
const int TGuildImpeachInfo::kUnameFieldNumber;
const int TGuildImpeachInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

TGuildImpeachInfo::TGuildImpeachInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildImpeachInfo)
}

void TGuildImpeachInfo::InitAsDefaultInstance() {
}

TGuildImpeachInfo::TGuildImpeachInfo(const TGuildImpeachInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildImpeachInfo)
}

void TGuildImpeachInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildImpeachInfo::~TGuildImpeachInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildImpeachInfo)
  SharedDtor();
}

void TGuildImpeachInfo::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (this != default_instance_) {
  }
}

void TGuildImpeachInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildImpeachInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildImpeachInfo_descriptor_;
}

const TGuildImpeachInfo& TGuildImpeachInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildImpeachInfo* TGuildImpeachInfo::default_instance_ = NULL;

TGuildImpeachInfo* TGuildImpeachInfo::New() const {
  return new TGuildImpeachInfo;
}

void TGuildImpeachInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildImpeachInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildImpeachInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Uname;
        break;
      }

      // optional string Uname = 2;
      case 2: {
        if (tag == 18) {
         parse_Uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Time;
        break;
      }

      // optional uint64 Time = 3;
      case 3: {
        if (tag == 24) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildImpeachInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildImpeachInfo)
  return false;
#undef DO_
}

void TGuildImpeachInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildImpeachInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string Uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uname(), output);
  }

  // optional uint64 Time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildImpeachInfo)
}

::google::protobuf::uint8* TGuildImpeachInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildImpeachInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string Uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uname(), target);
  }

  // optional uint64 Time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildImpeachInfo)
  return target;
}

int TGuildImpeachInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string Uname = 2;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional uint64 Time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildImpeachInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildImpeachInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildImpeachInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildImpeachInfo::MergeFrom(const TGuildImpeachInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildImpeachInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildImpeachInfo::CopyFrom(const TGuildImpeachInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildImpeachInfo::IsInitialized() const {

  return true;
}

void TGuildImpeachInfo::Swap(TGuildImpeachInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(uname_, other->uname_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildImpeachInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildImpeachInfo_descriptor_;
  metadata.reflection = TGuildImpeachInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildTreasMapFix::kResetTimeFieldNumber;
const int TGuildTreasMapFix::kFixProgressFieldNumber;
const int TGuildTreasMapFix::kDayFixProgressFieldNumber;
const int TGuildTreasMapFix::kHistoryResetTimeArrFieldNumber;
#endif  // !_MSC_VER

TGuildTreasMapFix::TGuildTreasMapFix()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildTreasMapFix)
}

void TGuildTreasMapFix::InitAsDefaultInstance() {
}

TGuildTreasMapFix::TGuildTreasMapFix(const TGuildTreasMapFix& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildTreasMapFix)
}

void TGuildTreasMapFix::SharedCtor() {
  _cached_size_ = 0;
  resettime_ = GOOGLE_ULONGLONG(0);
  fixprogress_ = 0u;
  dayfixprogress_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildTreasMapFix::~TGuildTreasMapFix() {
  // @@protoc_insertion_point(destructor:pb.TGuildTreasMapFix)
  SharedDtor();
}

void TGuildTreasMapFix::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildTreasMapFix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildTreasMapFix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildTreasMapFix_descriptor_;
}

const TGuildTreasMapFix& TGuildTreasMapFix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildTreasMapFix* TGuildTreasMapFix::default_instance_ = NULL;

TGuildTreasMapFix* TGuildTreasMapFix::New() const {
  return new TGuildTreasMapFix;
}

void TGuildTreasMapFix::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildTreasMapFix*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(resettime_, dayfixprogress_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  historyresettimearr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildTreasMapFix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildTreasMapFix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ResetTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_FixProgress;
        break;
      }

      // optional uint32 FixProgress = 2;
      case 2: {
        if (tag == 16) {
         parse_FixProgress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fixprogress_)));
          set_has_fixprogress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DayFixProgress;
        break;
      }

      // optional uint32 DayFixProgress = 3;
      case 3: {
        if (tag == 24) {
         parse_DayFixProgress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dayfixprogress_)));
          set_has_dayfixprogress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_HistoryResetTimeArr;
        break;
      }

      // repeated uint64 HistoryResetTimeArr = 4;
      case 4: {
        if (tag == 32) {
         parse_HistoryResetTimeArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_historyresettimearr())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_historyresettimearr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_HistoryResetTimeArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildTreasMapFix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildTreasMapFix)
  return false;
#undef DO_
}

void TGuildTreasMapFix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildTreasMapFix)
  // optional uint64 ResetTime = 1;
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->resettime(), output);
  }

  // optional uint32 FixProgress = 2;
  if (has_fixprogress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fixprogress(), output);
  }

  // optional uint32 DayFixProgress = 3;
  if (has_dayfixprogress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dayfixprogress(), output);
  }

  // repeated uint64 HistoryResetTimeArr = 4;
  for (int i = 0; i < this->historyresettimearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->historyresettimearr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildTreasMapFix)
}

::google::protobuf::uint8* TGuildTreasMapFix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildTreasMapFix)
  // optional uint64 ResetTime = 1;
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->resettime(), target);
  }

  // optional uint32 FixProgress = 2;
  if (has_fixprogress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fixprogress(), target);
  }

  // optional uint32 DayFixProgress = 3;
  if (has_dayfixprogress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dayfixprogress(), target);
  }

  // repeated uint64 HistoryResetTimeArr = 4;
  for (int i = 0; i < this->historyresettimearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->historyresettimearr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildTreasMapFix)
  return target;
}

int TGuildTreasMapFix::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ResetTime = 1;
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->resettime());
    }

    // optional uint32 FixProgress = 2;
    if (has_fixprogress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fixprogress());
    }

    // optional uint32 DayFixProgress = 3;
    if (has_dayfixprogress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dayfixprogress());
    }

  }
  // repeated uint64 HistoryResetTimeArr = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->historyresettimearr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->historyresettimearr(i));
    }
    total_size += 1 * this->historyresettimearr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildTreasMapFix::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildTreasMapFix* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildTreasMapFix*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildTreasMapFix::MergeFrom(const TGuildTreasMapFix& from) {
  GOOGLE_CHECK_NE(&from, this);
  historyresettimearr_.MergeFrom(from.historyresettimearr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
    if (from.has_fixprogress()) {
      set_fixprogress(from.fixprogress());
    }
    if (from.has_dayfixprogress()) {
      set_dayfixprogress(from.dayfixprogress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildTreasMapFix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildTreasMapFix::CopyFrom(const TGuildTreasMapFix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildTreasMapFix::IsInitialized() const {

  return true;
}

void TGuildTreasMapFix::Swap(TGuildTreasMapFix* other) {
  if (other != this) {
    std::swap(resettime_, other->resettime_);
    std::swap(fixprogress_, other->fixprogress_);
    std::swap(dayfixprogress_, other->dayfixprogress_);
    historyresettimearr_.Swap(&other->historyresettimearr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildTreasMapFix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildTreasMapFix_descriptor_;
  metadata.reflection = TGuildTreasMapFix_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildMemberInfo::kUserInfoFieldNumber;
const int TGuildMemberInfo::kRpgPostFieldNumber;
const int TGuildMemberInfo::kDonateFieldNumber;
const int TGuildMemberInfo::kWeekDonateFieldNumber;
#endif  // !_MSC_VER

TGuildMemberInfo::TGuildMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildMemberInfo)
}

void TGuildMemberInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfoWithStatus*>(&::pb::TUserSimpleInfoWithStatus::default_instance());
}

TGuildMemberInfo::TGuildMemberInfo(const TGuildMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildMemberInfo)
}

void TGuildMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  rpgpost_ = 0;
  donate_ = 0u;
  weekdonate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildMemberInfo::~TGuildMemberInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildMemberInfo)
  SharedDtor();
}

void TGuildMemberInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TGuildMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildMemberInfo_descriptor_;
}

const TGuildMemberInfo& TGuildMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildMemberInfo* TGuildMemberInfo::default_instance_ = NULL;

TGuildMemberInfo* TGuildMemberInfo::New() const {
  return new TGuildMemberInfo;
}

void TGuildMemberInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildMemberInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(rpgpost_, weekdonate_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfoWithStatus::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildMemberInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfoWithStatus UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RpgPost;
        break;
      }

      // optional .pb.EGuildPost RpgPost = 2;
      case 2: {
        if (tag == 16) {
         parse_RpgPost:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EGuildPost_IsValid(value)) {
            set_rpgpost(static_cast< ::pb::EGuildPost >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Donate;
        break;
      }

      // optional uint32 Donate = 3;
      case 3: {
        if (tag == 24) {
         parse_Donate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donate_)));
          set_has_donate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_WeekDonate;
        break;
      }

      // optional uint32 WeekDonate = 4;
      case 4: {
        if (tag == 32) {
         parse_WeekDonate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekdonate_)));
          set_has_weekdonate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildMemberInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildMemberInfo)
  return false;
#undef DO_
}

void TGuildMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildMemberInfo)
  // optional .pb.TUserSimpleInfoWithStatus UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional .pb.EGuildPost RpgPost = 2;
  if (has_rpgpost()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->rpgpost(), output);
  }

  // optional uint32 Donate = 3;
  if (has_donate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->donate(), output);
  }

  // optional uint32 WeekDonate = 4;
  if (has_weekdonate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->weekdonate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildMemberInfo)
}

::google::protobuf::uint8* TGuildMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildMemberInfo)
  // optional .pb.TUserSimpleInfoWithStatus UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional .pb.EGuildPost RpgPost = 2;
  if (has_rpgpost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->rpgpost(), target);
  }

  // optional uint32 Donate = 3;
  if (has_donate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->donate(), target);
  }

  // optional uint32 WeekDonate = 4;
  if (has_weekdonate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->weekdonate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildMemberInfo)
  return target;
}

int TGuildMemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfoWithStatus UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional .pb.EGuildPost RpgPost = 2;
    if (has_rpgpost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rpgpost());
    }

    // optional uint32 Donate = 3;
    if (has_donate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donate());
    }

    // optional uint32 WeekDonate = 4;
    if (has_weekdonate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekdonate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildMemberInfo::MergeFrom(const TGuildMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfoWithStatus::MergeFrom(from.userinfo());
    }
    if (from.has_rpgpost()) {
      set_rpgpost(from.rpgpost());
    }
    if (from.has_donate()) {
      set_donate(from.donate());
    }
    if (from.has_weekdonate()) {
      set_weekdonate(from.weekdonate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildMemberInfo::CopyFrom(const TGuildMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildMemberInfo::IsInitialized() const {

  return true;
}

void TGuildMemberInfo::Swap(TGuildMemberInfo* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(rpgpost_, other->rpgpost_);
    std::swap(donate_, other->donate_);
    std::swap(weekdonate_, other->weekdonate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildMemberInfo_descriptor_;
  metadata.reflection = TGuildMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBaseGuildInfo::kGuildIdFieldNumber;
const int TBaseGuildInfo::kNameFieldNumber;
const int TBaseGuildInfo::kBannerNameFieldNumber;
const int TBaseGuildInfo::kBannerBaseFieldNumber;
const int TBaseGuildInfo::kLevelFieldNumber;
const int TBaseGuildInfo::kExpFieldNumber;
const int TBaseGuildInfo::kMemberNumFieldNumber;
const int TBaseGuildInfo::kFightForceFieldNumber;
const int TBaseGuildInfo::kSummaryFieldNumber;
const int TBaseGuildInfo::kReviewModeFieldNumber;
const int TBaseGuildInfo::kLimitFieldNumber;
const int TBaseGuildInfo::kLeaderIdFieldNumber;
const int TBaseGuildInfo::kLeaderNameFieldNumber;
const int TBaseGuildInfo::kQQFieldNumber;
const int TBaseGuildInfo::kSumDayDonateFieldNumber;
const int TBaseGuildInfo::kKickOutNumFieldNumber;
const int TBaseGuildInfo::kLastWeekScoreFieldNumber;
const int TBaseGuildInfo::kRankFieldNumber;
const int TBaseGuildInfo::kLineGroupFieldNumber;
#endif  // !_MSC_VER

TBaseGuildInfo::TBaseGuildInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBaseGuildInfo)
}

void TBaseGuildInfo::InitAsDefaultInstance() {
  limit_ = const_cast< ::pb::TGuildLimit*>(&::pb::TGuildLimit::default_instance());
}

TBaseGuildInfo::TBaseGuildInfo(const TBaseGuildInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBaseGuildInfo)
}

void TBaseGuildInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bannerbase_ = 0u;
  level_ = 0u;
  exp_ = 0u;
  membernum_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reviewmode_ = 0;
  limit_ = NULL;
  leaderid_ = GOOGLE_ULONGLONG(0);
  leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qq_ = GOOGLE_ULONGLONG(0);
  sumdaydonate_ = 0u;
  kickoutnum_ = 0u;
  lastweekscore_ = 0u;
  rank_ = 0u;
  linegroup_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBaseGuildInfo::~TBaseGuildInfo() {
  // @@protoc_insertion_point(destructor:pb.TBaseGuildInfo)
  SharedDtor();
}

void TBaseGuildInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete summary_;
  }
  if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leadername_;
  }
  if (linegroup_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete linegroup_;
  }
  if (this != default_instance_) {
    delete limit_;
  }
}

void TBaseGuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBaseGuildInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBaseGuildInfo_descriptor_;
}

const TBaseGuildInfo& TBaseGuildInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TBaseGuildInfo* TBaseGuildInfo::default_instance_ = NULL;

TBaseGuildInfo* TBaseGuildInfo::New() const {
  return new TBaseGuildInfo;
}

void TBaseGuildInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBaseGuildInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(bannerbase_, fightforce_);
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_bannername()) {
      if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bannername_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(leaderid_, sumdaydonate_);
    ZR_(qq_, kickoutnum_);
    if (has_summary()) {
      if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        summary_->clear();
      }
    }
    if (has_limit()) {
      if (limit_ != NULL) limit_->::pb::TGuildLimit::Clear();
    }
    if (has_leadername()) {
      if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        leadername_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 458752) {
    lastweekscore_ = 0u;
    rank_ = 0u;
    if (has_linegroup()) {
      if (linegroup_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        linegroup_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBaseGuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBaseGuildInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 GuildId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // optional string Name = 2;
      case 2: {
        if (tag == 18) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BannerName;
        break;
      }

      // optional string BannerName = 3;
      case 3: {
        if (tag == 26) {
         parse_BannerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bannername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bannername().data(), this->bannername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bannername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BannerBase;
        break;
      }

      // optional uint32 BannerBase = 4;
      case 4: {
        if (tag == 32) {
         parse_BannerBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bannerbase_)));
          set_has_bannerbase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 5;
      case 5: {
        if (tag == 40) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Exp;
        break;
      }

      // optional uint32 Exp = 6;
      case 6: {
        if (tag == 48) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_MemberNum;
        break;
      }

      // optional uint32 MemberNum = 7;
      case 7: {
        if (tag == 56) {
         parse_MemberNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membernum_)));
          set_has_membernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 8;
      case 8: {
        if (tag == 64) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Summary;
        break;
      }

      // optional string Summary = 9;
      case 9: {
        if (tag == 74) {
         parse_Summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_summary()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->summary().data(), this->summary().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "summary");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ReviewMode;
        break;
      }

      // optional .pb.EReviewMode ReviewMode = 10;
      case 10: {
        if (tag == 80) {
         parse_ReviewMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EReviewMode_IsValid(value)) {
            set_reviewmode(static_cast< ::pb::EReviewMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_Limit;
        break;
      }

      // optional .pb.TGuildLimit Limit = 11;
      case 11: {
        if (tag == 90) {
         parse_Limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_limit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_LeaderId;
        break;
      }

      // optional uint64 LeaderId = 12;
      case 12: {
        if (tag == 96) {
         parse_LeaderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leaderid_)));
          set_has_leaderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_LeaderName;
        break;
      }

      // optional string LeaderName = 13;
      case 13: {
        if (tag == 106) {
         parse_LeaderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leadername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leadername().data(), this->leadername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "leadername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_QQ;
        break;
      }

      // optional uint64 QQ = 14;
      case 14: {
        if (tag == 112) {
         parse_QQ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qq_)));
          set_has_qq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_SumDayDonate;
        break;
      }

      // optional uint32 SumDayDonate = 15;
      case 15: {
        if (tag == 120) {
         parse_SumDayDonate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sumdaydonate_)));
          set_has_sumdaydonate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_KickOutNum;
        break;
      }

      // optional uint32 KickOutNum = 16;
      case 16: {
        if (tag == 128) {
         parse_KickOutNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kickoutnum_)));
          set_has_kickoutnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_LastWeekScore;
        break;
      }

      // optional uint32 LastWeekScore = 17;
      case 17: {
        if (tag == 136) {
         parse_LastWeekScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastweekscore_)));
          set_has_lastweekscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 18;
      case 18: {
        if (tag == 144) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_LineGroup;
        break;
      }

      // optional string LineGroup = 19;
      case 19: {
        if (tag == 154) {
         parse_LineGroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linegroup()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->linegroup().data(), this->linegroup().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "linegroup");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBaseGuildInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBaseGuildInfo)
  return false;
#undef DO_
}

void TBaseGuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBaseGuildInfo)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string BannerName = 3;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bannername(), output);
  }

  // optional uint32 BannerBase = 4;
  if (has_bannerbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bannerbase(), output);
  }

  // optional uint32 Level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 Exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->exp(), output);
  }

  // optional uint32 MemberNum = 7;
  if (has_membernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->membernum(), output);
  }

  // optional uint64 FightForce = 8;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->fightforce(), output);
  }

  // optional string Summary = 9;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "summary");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->summary(), output);
  }

  // optional .pb.EReviewMode ReviewMode = 10;
  if (has_reviewmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->reviewmode(), output);
  }

  // optional .pb.TGuildLimit Limit = 11;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->limit(), output);
  }

  // optional uint64 LeaderId = 12;
  if (has_leaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->leaderid(), output);
  }

  // optional string LeaderName = 13;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leadername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->leadername(), output);
  }

  // optional uint64 QQ = 14;
  if (has_qq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->qq(), output);
  }

  // optional uint32 SumDayDonate = 15;
  if (has_sumdaydonate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->sumdaydonate(), output);
  }

  // optional uint32 KickOutNum = 16;
  if (has_kickoutnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->kickoutnum(), output);
  }

  // optional uint32 LastWeekScore = 17;
  if (has_lastweekscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->lastweekscore(), output);
  }

  // optional uint32 Rank = 18;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->rank(), output);
  }

  // optional string LineGroup = 19;
  if (has_linegroup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->linegroup().data(), this->linegroup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "linegroup");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->linegroup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBaseGuildInfo)
}

::google::protobuf::uint8* TBaseGuildInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBaseGuildInfo)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string BannerName = 3;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bannername(), target);
  }

  // optional uint32 BannerBase = 4;
  if (has_bannerbase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bannerbase(), target);
  }

  // optional uint32 Level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 Exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->exp(), target);
  }

  // optional uint32 MemberNum = 7;
  if (has_membernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->membernum(), target);
  }

  // optional uint64 FightForce = 8;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->fightforce(), target);
  }

  // optional string Summary = 9;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "summary");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->summary(), target);
  }

  // optional .pb.EReviewMode ReviewMode = 10;
  if (has_reviewmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->reviewmode(), target);
  }

  // optional .pb.TGuildLimit Limit = 11;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->limit(), target);
  }

  // optional uint64 LeaderId = 12;
  if (has_leaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->leaderid(), target);
  }

  // optional string LeaderName = 13;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leadername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->leadername(), target);
  }

  // optional uint64 QQ = 14;
  if (has_qq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->qq(), target);
  }

  // optional uint32 SumDayDonate = 15;
  if (has_sumdaydonate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->sumdaydonate(), target);
  }

  // optional uint32 KickOutNum = 16;
  if (has_kickoutnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->kickoutnum(), target);
  }

  // optional uint32 LastWeekScore = 17;
  if (has_lastweekscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->lastweekscore(), target);
  }

  // optional uint32 Rank = 18;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->rank(), target);
  }

  // optional string LineGroup = 19;
  if (has_linegroup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->linegroup().data(), this->linegroup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "linegroup");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->linegroup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBaseGuildInfo)
  return target;
}

int TBaseGuildInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 GuildId = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string BannerName = 3;
    if (has_bannername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bannername());
    }

    // optional uint32 BannerBase = 4;
    if (has_bannerbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bannerbase());
    }

    // optional uint32 Level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 Exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 MemberNum = 7;
    if (has_membernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->membernum());
    }

    // optional uint64 FightForce = 8;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string Summary = 9;
    if (has_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->summary());
    }

    // optional .pb.EReviewMode ReviewMode = 10;
    if (has_reviewmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reviewmode());
    }

    // optional .pb.TGuildLimit Limit = 11;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->limit());
    }

    // optional uint64 LeaderId = 12;
    if (has_leaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leaderid());
    }

    // optional string LeaderName = 13;
    if (has_leadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leadername());
    }

    // optional uint64 QQ = 14;
    if (has_qq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->qq());
    }

    // optional uint32 SumDayDonate = 15;
    if (has_sumdaydonate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sumdaydonate());
    }

    // optional uint32 KickOutNum = 16;
    if (has_kickoutnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kickoutnum());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 LastWeekScore = 17;
    if (has_lastweekscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastweekscore());
    }

    // optional uint32 Rank = 18;
    if (has_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional string LineGroup = 19;
    if (has_linegroup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->linegroup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBaseGuildInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBaseGuildInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBaseGuildInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBaseGuildInfo::MergeFrom(const TBaseGuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_bannername()) {
      set_bannername(from.bannername());
    }
    if (from.has_bannerbase()) {
      set_bannerbase(from.bannerbase());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_membernum()) {
      set_membernum(from.membernum());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_summary()) {
      set_summary(from.summary());
    }
    if (from.has_reviewmode()) {
      set_reviewmode(from.reviewmode());
    }
    if (from.has_limit()) {
      mutable_limit()->::pb::TGuildLimit::MergeFrom(from.limit());
    }
    if (from.has_leaderid()) {
      set_leaderid(from.leaderid());
    }
    if (from.has_leadername()) {
      set_leadername(from.leadername());
    }
    if (from.has_qq()) {
      set_qq(from.qq());
    }
    if (from.has_sumdaydonate()) {
      set_sumdaydonate(from.sumdaydonate());
    }
    if (from.has_kickoutnum()) {
      set_kickoutnum(from.kickoutnum());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lastweekscore()) {
      set_lastweekscore(from.lastweekscore());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_linegroup()) {
      set_linegroup(from.linegroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBaseGuildInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBaseGuildInfo::CopyFrom(const TBaseGuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBaseGuildInfo::IsInitialized() const {

  return true;
}

void TBaseGuildInfo::Swap(TBaseGuildInfo* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(name_, other->name_);
    std::swap(bannername_, other->bannername_);
    std::swap(bannerbase_, other->bannerbase_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(membernum_, other->membernum_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(summary_, other->summary_);
    std::swap(reviewmode_, other->reviewmode_);
    std::swap(limit_, other->limit_);
    std::swap(leaderid_, other->leaderid_);
    std::swap(leadername_, other->leadername_);
    std::swap(qq_, other->qq_);
    std::swap(sumdaydonate_, other->sumdaydonate_);
    std::swap(kickoutnum_, other->kickoutnum_);
    std::swap(lastweekscore_, other->lastweekscore_);
    std::swap(rank_, other->rank_);
    std::swap(linegroup_, other->linegroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBaseGuildInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBaseGuildInfo_descriptor_;
  metadata.reflection = TBaseGuildInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildSalaryInfo::kPostFieldNumber;
const int TGuildSalaryInfo::kNumFieldNumber;
#endif  // !_MSC_VER

TGuildSalaryInfo::TGuildSalaryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildSalaryInfo)
}

void TGuildSalaryInfo::InitAsDefaultInstance() {
}

TGuildSalaryInfo::TGuildSalaryInfo(const TGuildSalaryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildSalaryInfo)
}

void TGuildSalaryInfo::SharedCtor() {
  _cached_size_ = 0;
  post_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildSalaryInfo::~TGuildSalaryInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildSalaryInfo)
  SharedDtor();
}

void TGuildSalaryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildSalaryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildSalaryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildSalaryInfo_descriptor_;
}

const TGuildSalaryInfo& TGuildSalaryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildSalaryInfo* TGuildSalaryInfo::default_instance_ = NULL;

TGuildSalaryInfo* TGuildSalaryInfo::New() const {
  return new TGuildSalaryInfo;
}

void TGuildSalaryInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildSalaryInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(post_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildSalaryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildSalaryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Post = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &post_)));
          set_has_post();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildSalaryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildSalaryInfo)
  return false;
#undef DO_
}

void TGuildSalaryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildSalaryInfo)
  // optional uint32 Post = 1;
  if (has_post()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->post(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildSalaryInfo)
}

::google::protobuf::uint8* TGuildSalaryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildSalaryInfo)
  // optional uint32 Post = 1;
  if (has_post()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->post(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildSalaryInfo)
  return target;
}

int TGuildSalaryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Post = 1;
    if (has_post()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->post());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildSalaryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildSalaryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildSalaryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildSalaryInfo::MergeFrom(const TGuildSalaryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_post()) {
      set_post(from.post());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildSalaryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildSalaryInfo::CopyFrom(const TGuildSalaryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildSalaryInfo::IsInitialized() const {

  return true;
}

void TGuildSalaryInfo::Swap(TGuildSalaryInfo* other) {
  if (other != this) {
    std::swap(post_, other->post_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildSalaryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildSalaryInfo_descriptor_;
  metadata.reflection = TGuildSalaryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGetInfoRsp::kMyInfoFieldNumber;
const int TGuildGetInfoRsp::kGuildInfoFieldNumber;
const int TGuildGetInfoRsp::kNoticeFieldNumber;
const int TGuildGetInfoRsp::kTipArrFieldNumber;
const int TGuildGetInfoRsp::kDonateArrFieldNumber;
const int TGuildGetInfoRsp::kImpeachInfoFieldNumber;
const int TGuildGetInfoRsp::kDismissTimeFieldNumber;
const int TGuildGetInfoRsp::kTMFInfoFieldNumber;
const int TGuildGetInfoRsp::kSendEmailNumFieldNumber;
const int TGuildGetInfoRsp::kSalaryInfoArrFieldNumber;
#endif  // !_MSC_VER

TGuildGetInfoRsp::TGuildGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGetInfoRsp)
}

void TGuildGetInfoRsp::InitAsDefaultInstance() {
  myinfo_ = const_cast< ::pb::TGuildMyInfo*>(&::pb::TGuildMyInfo::default_instance());
  guildinfo_ = const_cast< ::pb::TBaseGuildInfo*>(&::pb::TBaseGuildInfo::default_instance());
  impeachinfo_ = const_cast< ::pb::TGuildImpeachInfo*>(&::pb::TGuildImpeachInfo::default_instance());
  tmfinfo_ = const_cast< ::pb::TGuildTreasMapFix*>(&::pb::TGuildTreasMapFix::default_instance());
}

TGuildGetInfoRsp::TGuildGetInfoRsp(const TGuildGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGetInfoRsp)
}

void TGuildGetInfoRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  myinfo_ = NULL;
  guildinfo_ = NULL;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  impeachinfo_ = NULL;
  dismisstime_ = GOOGLE_ULONGLONG(0);
  tmfinfo_ = NULL;
  sendemailnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGetInfoRsp::~TGuildGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildGetInfoRsp)
  SharedDtor();
}

void TGuildGetInfoRsp::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (this != default_instance_) {
    delete myinfo_;
    delete guildinfo_;
    delete impeachinfo_;
    delete tmfinfo_;
  }
}

void TGuildGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGetInfoRsp_descriptor_;
}

const TGuildGetInfoRsp& TGuildGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildGetInfoRsp* TGuildGetInfoRsp::default_instance_ = NULL;

TGuildGetInfoRsp* TGuildGetInfoRsp::New() const {
  return new TGuildGetInfoRsp;
}

void TGuildGetInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & 231) {
    if (has_myinfo()) {
      if (myinfo_ != NULL) myinfo_->::pb::TGuildMyInfo::Clear();
    }
    if (has_guildinfo()) {
      if (guildinfo_ != NULL) guildinfo_->::pb::TBaseGuildInfo::Clear();
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        notice_->clear();
      }
    }
    if (has_impeachinfo()) {
      if (impeachinfo_ != NULL) impeachinfo_->::pb::TGuildImpeachInfo::Clear();
    }
    dismisstime_ = GOOGLE_ULONGLONG(0);
    if (has_tmfinfo()) {
      if (tmfinfo_ != NULL) tmfinfo_->::pb::TGuildTreasMapFix::Clear();
    }
  }
  sendemailnum_ = 0u;
  tiparr_.Clear();
  donatearr_.Clear();
  salaryinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TGuildMyInfo MyInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GuildInfo;
        break;
      }

      // optional .pb.TBaseGuildInfo GuildInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_GuildInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Notice;
        break;
      }

      // optional string Notice = 3;
      case 3: {
        if (tag == 26) {
         parse_Notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "notice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_TipArr;
        break;
      }

      // repeated .pb.TGuildTip TipArr = 4;
      case 4: {
        if (tag == 34) {
         parse_TipArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tiparr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_TipArr;
        if (input->ExpectTag(42)) goto parse_DonateArr;
        break;
      }

      // repeated .pb.TGuildDonate DonateArr = 5;
      case 5: {
        if (tag == 42) {
         parse_DonateArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_donatearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DonateArr;
        if (input->ExpectTag(50)) goto parse_ImpeachInfo;
        break;
      }

      // optional .pb.TGuildImpeachInfo ImpeachInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_ImpeachInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_impeachinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_DismissTime;
        break;
      }

      // optional uint64 DismissTime = 7;
      case 7: {
        if (tag == 56) {
         parse_DismissTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dismisstime_)));
          set_has_dismisstime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_TMFInfo;
        break;
      }

      // optional .pb.TGuildTreasMapFix TMFInfo = 8;
      case 8: {
        if (tag == 66) {
         parse_TMFInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tmfinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_SendEmailNum;
        break;
      }

      // optional uint32 SendEmailNum = 9;
      case 9: {
        if (tag == 72) {
         parse_SendEmailNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sendemailnum_)));
          set_has_sendemailnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_SalaryInfoArr;
        break;
      }

      // repeated .pb.TGuildSalaryInfo SalaryInfoArr = 10;
      case 10: {
        if (tag == 82) {
         parse_SalaryInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_salaryinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_SalaryInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGetInfoRsp)
  return false;
#undef DO_
}

void TGuildGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGetInfoRsp)
  // optional .pb.TGuildMyInfo MyInfo = 1;
  if (has_myinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->myinfo(), output);
  }

  // optional .pb.TBaseGuildInfo GuildInfo = 2;
  if (has_guildinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guildinfo(), output);
  }

  // optional string Notice = 3;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->notice(), output);
  }

  // repeated .pb.TGuildTip TipArr = 4;
  for (int i = 0; i < this->tiparr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tiparr(i), output);
  }

  // repeated .pb.TGuildDonate DonateArr = 5;
  for (int i = 0; i < this->donatearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->donatearr(i), output);
  }

  // optional .pb.TGuildImpeachInfo ImpeachInfo = 6;
  if (has_impeachinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->impeachinfo(), output);
  }

  // optional uint64 DismissTime = 7;
  if (has_dismisstime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->dismisstime(), output);
  }

  // optional .pb.TGuildTreasMapFix TMFInfo = 8;
  if (has_tmfinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->tmfinfo(), output);
  }

  // optional uint32 SendEmailNum = 9;
  if (has_sendemailnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sendemailnum(), output);
  }

  // repeated .pb.TGuildSalaryInfo SalaryInfoArr = 10;
  for (int i = 0; i < this->salaryinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->salaryinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGetInfoRsp)
}

::google::protobuf::uint8* TGuildGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGetInfoRsp)
  // optional .pb.TGuildMyInfo MyInfo = 1;
  if (has_myinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->myinfo(), target);
  }

  // optional .pb.TBaseGuildInfo GuildInfo = 2;
  if (has_guildinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guildinfo(), target);
  }

  // optional string Notice = 3;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->notice(), target);
  }

  // repeated .pb.TGuildTip TipArr = 4;
  for (int i = 0; i < this->tiparr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tiparr(i), target);
  }

  // repeated .pb.TGuildDonate DonateArr = 5;
  for (int i = 0; i < this->donatearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->donatearr(i), target);
  }

  // optional .pb.TGuildImpeachInfo ImpeachInfo = 6;
  if (has_impeachinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->impeachinfo(), target);
  }

  // optional uint64 DismissTime = 7;
  if (has_dismisstime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->dismisstime(), target);
  }

  // optional .pb.TGuildTreasMapFix TMFInfo = 8;
  if (has_tmfinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->tmfinfo(), target);
  }

  // optional uint32 SendEmailNum = 9;
  if (has_sendemailnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sendemailnum(), target);
  }

  // repeated .pb.TGuildSalaryInfo SalaryInfoArr = 10;
  for (int i = 0; i < this->salaryinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->salaryinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGetInfoRsp)
  return target;
}

int TGuildGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TGuildMyInfo MyInfo = 1;
    if (has_myinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myinfo());
    }

    // optional .pb.TBaseGuildInfo GuildInfo = 2;
    if (has_guildinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildinfo());
    }

    // optional string Notice = 3;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional .pb.TGuildImpeachInfo ImpeachInfo = 6;
    if (has_impeachinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->impeachinfo());
    }

    // optional uint64 DismissTime = 7;
    if (has_dismisstime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dismisstime());
    }

    // optional .pb.TGuildTreasMapFix TMFInfo = 8;
    if (has_tmfinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tmfinfo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 SendEmailNum = 9;
    if (has_sendemailnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sendemailnum());
    }

  }
  // repeated .pb.TGuildTip TipArr = 4;
  total_size += 1 * this->tiparr_size();
  for (int i = 0; i < this->tiparr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tiparr(i));
  }

  // repeated .pb.TGuildDonate DonateArr = 5;
  total_size += 1 * this->donatearr_size();
  for (int i = 0; i < this->donatearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->donatearr(i));
  }

  // repeated .pb.TGuildSalaryInfo SalaryInfoArr = 10;
  total_size += 1 * this->salaryinfoarr_size();
  for (int i = 0; i < this->salaryinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->salaryinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGetInfoRsp::MergeFrom(const TGuildGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  tiparr_.MergeFrom(from.tiparr_);
  donatearr_.MergeFrom(from.donatearr_);
  salaryinfoarr_.MergeFrom(from.salaryinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myinfo()) {
      mutable_myinfo()->::pb::TGuildMyInfo::MergeFrom(from.myinfo());
    }
    if (from.has_guildinfo()) {
      mutable_guildinfo()->::pb::TBaseGuildInfo::MergeFrom(from.guildinfo());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_impeachinfo()) {
      mutable_impeachinfo()->::pb::TGuildImpeachInfo::MergeFrom(from.impeachinfo());
    }
    if (from.has_dismisstime()) {
      set_dismisstime(from.dismisstime());
    }
    if (from.has_tmfinfo()) {
      mutable_tmfinfo()->::pb::TGuildTreasMapFix::MergeFrom(from.tmfinfo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sendemailnum()) {
      set_sendemailnum(from.sendemailnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGetInfoRsp::CopyFrom(const TGuildGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGetInfoRsp::IsInitialized() const {

  return true;
}

void TGuildGetInfoRsp::Swap(TGuildGetInfoRsp* other) {
  if (other != this) {
    std::swap(myinfo_, other->myinfo_);
    std::swap(guildinfo_, other->guildinfo_);
    std::swap(notice_, other->notice_);
    tiparr_.Swap(&other->tiparr_);
    donatearr_.Swap(&other->donatearr_);
    std::swap(impeachinfo_, other->impeachinfo_);
    std::swap(dismisstime_, other->dismisstime_);
    std::swap(tmfinfo_, other->tmfinfo_);
    std::swap(sendemailnum_, other->sendemailnum_);
    salaryinfoarr_.Swap(&other->salaryinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGetInfoRsp_descriptor_;
  metadata.reflection = TGuildGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildUpdateOurGuildNotify::kGuildInfoFieldNumber;
const int TGuildUpdateOurGuildNotify::kNoticeFieldNumber;
const int TGuildUpdateOurGuildNotify::kTipArrFieldNumber;
const int TGuildUpdateOurGuildNotify::kDonateArrFieldNumber;
const int TGuildUpdateOurGuildNotify::kApplyNumFieldNumber;
const int TGuildUpdateOurGuildNotify::kCreateTimeFieldNumber;
const int TGuildUpdateOurGuildNotify::kImpeachInfoFieldNumber;
const int TGuildUpdateOurGuildNotify::kDismissTimeFieldNumber;
const int TGuildUpdateOurGuildNotify::kTMFInfoFieldNumber;
const int TGuildUpdateOurGuildNotify::kSalaryInfoArrFieldNumber;
#endif  // !_MSC_VER

TGuildUpdateOurGuildNotify::TGuildUpdateOurGuildNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildUpdateOurGuildNotify)
}

void TGuildUpdateOurGuildNotify::InitAsDefaultInstance() {
  guildinfo_ = const_cast< ::pb::TBaseGuildInfo*>(&::pb::TBaseGuildInfo::default_instance());
  impeachinfo_ = const_cast< ::pb::TGuildImpeachInfo*>(&::pb::TGuildImpeachInfo::default_instance());
  tmfinfo_ = const_cast< ::pb::TGuildTreasMapFix*>(&::pb::TGuildTreasMapFix::default_instance());
}

TGuildUpdateOurGuildNotify::TGuildUpdateOurGuildNotify(const TGuildUpdateOurGuildNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildUpdateOurGuildNotify)
}

void TGuildUpdateOurGuildNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guildinfo_ = NULL;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applynum_ = 0u;
  createtime_ = GOOGLE_ULONGLONG(0);
  impeachinfo_ = NULL;
  dismisstime_ = GOOGLE_ULONGLONG(0);
  tmfinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildUpdateOurGuildNotify::~TGuildUpdateOurGuildNotify() {
  // @@protoc_insertion_point(destructor:pb.TGuildUpdateOurGuildNotify)
  SharedDtor();
}

void TGuildUpdateOurGuildNotify::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (this != default_instance_) {
    delete guildinfo_;
    delete impeachinfo_;
    delete tmfinfo_;
  }
}

void TGuildUpdateOurGuildNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildUpdateOurGuildNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildUpdateOurGuildNotify_descriptor_;
}

const TGuildUpdateOurGuildNotify& TGuildUpdateOurGuildNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildUpdateOurGuildNotify* TGuildUpdateOurGuildNotify::default_instance_ = NULL;

TGuildUpdateOurGuildNotify* TGuildUpdateOurGuildNotify::New() const {
  return new TGuildUpdateOurGuildNotify;
}

void TGuildUpdateOurGuildNotify::Clear() {
  if (_has_bits_[0 / 32] & 243) {
    if (has_guildinfo()) {
      if (guildinfo_ != NULL) guildinfo_->::pb::TBaseGuildInfo::Clear();
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        notice_->clear();
      }
    }
    applynum_ = 0u;
    createtime_ = GOOGLE_ULONGLONG(0);
    if (has_impeachinfo()) {
      if (impeachinfo_ != NULL) impeachinfo_->::pb::TGuildImpeachInfo::Clear();
    }
    dismisstime_ = GOOGLE_ULONGLONG(0);
  }
  if (has_tmfinfo()) {
    if (tmfinfo_ != NULL) tmfinfo_->::pb::TGuildTreasMapFix::Clear();
  }
  tiparr_.Clear();
  donatearr_.Clear();
  salaryinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildUpdateOurGuildNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildUpdateOurGuildNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBaseGuildInfo GuildInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Notice;
        break;
      }

      // optional string Notice = 2;
      case 2: {
        if (tag == 18) {
         parse_Notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "notice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TipArr;
        break;
      }

      // repeated .pb.TGuildTip TipArr = 3;
      case 3: {
        if (tag == 26) {
         parse_TipArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tiparr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TipArr;
        if (input->ExpectTag(34)) goto parse_DonateArr;
        break;
      }

      // repeated .pb.TGuildDonate DonateArr = 4;
      case 4: {
        if (tag == 34) {
         parse_DonateArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_donatearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_DonateArr;
        if (input->ExpectTag(40)) goto parse_ApplyNum;
        break;
      }

      // optional uint32 ApplyNum = 5;
      case 5: {
        if (tag == 40) {
         parse_ApplyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applynum_)));
          set_has_applynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_CreateTime;
        break;
      }

      // optional uint64 CreateTime = 6;
      case 6: {
        if (tag == 48) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ImpeachInfo;
        break;
      }

      // optional .pb.TGuildImpeachInfo ImpeachInfo = 7;
      case 7: {
        if (tag == 58) {
         parse_ImpeachInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_impeachinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_DismissTime;
        break;
      }

      // optional uint64 DismissTime = 8;
      case 8: {
        if (tag == 64) {
         parse_DismissTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dismisstime_)));
          set_has_dismisstime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_TMFInfo;
        break;
      }

      // optional .pb.TGuildTreasMapFix TMFInfo = 9;
      case 9: {
        if (tag == 74) {
         parse_TMFInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tmfinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_SalaryInfoArr;
        break;
      }

      // repeated .pb.TGuildSalaryInfo SalaryInfoArr = 10;
      case 10: {
        if (tag == 82) {
         parse_SalaryInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_salaryinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_SalaryInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildUpdateOurGuildNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildUpdateOurGuildNotify)
  return false;
#undef DO_
}

void TGuildUpdateOurGuildNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildUpdateOurGuildNotify)
  // optional .pb.TBaseGuildInfo GuildInfo = 1;
  if (has_guildinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guildinfo(), output);
  }

  // optional string Notice = 2;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->notice(), output);
  }

  // repeated .pb.TGuildTip TipArr = 3;
  for (int i = 0; i < this->tiparr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tiparr(i), output);
  }

  // repeated .pb.TGuildDonate DonateArr = 4;
  for (int i = 0; i < this->donatearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->donatearr(i), output);
  }

  // optional uint32 ApplyNum = 5;
  if (has_applynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->applynum(), output);
  }

  // optional uint64 CreateTime = 6;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->createtime(), output);
  }

  // optional .pb.TGuildImpeachInfo ImpeachInfo = 7;
  if (has_impeachinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->impeachinfo(), output);
  }

  // optional uint64 DismissTime = 8;
  if (has_dismisstime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->dismisstime(), output);
  }

  // optional .pb.TGuildTreasMapFix TMFInfo = 9;
  if (has_tmfinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->tmfinfo(), output);
  }

  // repeated .pb.TGuildSalaryInfo SalaryInfoArr = 10;
  for (int i = 0; i < this->salaryinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->salaryinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildUpdateOurGuildNotify)
}

::google::protobuf::uint8* TGuildUpdateOurGuildNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildUpdateOurGuildNotify)
  // optional .pb.TBaseGuildInfo GuildInfo = 1;
  if (has_guildinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guildinfo(), target);
  }

  // optional string Notice = 2;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->notice(), target);
  }

  // repeated .pb.TGuildTip TipArr = 3;
  for (int i = 0; i < this->tiparr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tiparr(i), target);
  }

  // repeated .pb.TGuildDonate DonateArr = 4;
  for (int i = 0; i < this->donatearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->donatearr(i), target);
  }

  // optional uint32 ApplyNum = 5;
  if (has_applynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->applynum(), target);
  }

  // optional uint64 CreateTime = 6;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->createtime(), target);
  }

  // optional .pb.TGuildImpeachInfo ImpeachInfo = 7;
  if (has_impeachinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->impeachinfo(), target);
  }

  // optional uint64 DismissTime = 8;
  if (has_dismisstime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->dismisstime(), target);
  }

  // optional .pb.TGuildTreasMapFix TMFInfo = 9;
  if (has_tmfinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->tmfinfo(), target);
  }

  // repeated .pb.TGuildSalaryInfo SalaryInfoArr = 10;
  for (int i = 0; i < this->salaryinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->salaryinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildUpdateOurGuildNotify)
  return target;
}

int TGuildUpdateOurGuildNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBaseGuildInfo GuildInfo = 1;
    if (has_guildinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildinfo());
    }

    // optional string Notice = 2;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional uint32 ApplyNum = 5;
    if (has_applynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applynum());
    }

    // optional uint64 CreateTime = 6;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // optional .pb.TGuildImpeachInfo ImpeachInfo = 7;
    if (has_impeachinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->impeachinfo());
    }

    // optional uint64 DismissTime = 8;
    if (has_dismisstime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dismisstime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pb.TGuildTreasMapFix TMFInfo = 9;
    if (has_tmfinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tmfinfo());
    }

  }
  // repeated .pb.TGuildTip TipArr = 3;
  total_size += 1 * this->tiparr_size();
  for (int i = 0; i < this->tiparr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tiparr(i));
  }

  // repeated .pb.TGuildDonate DonateArr = 4;
  total_size += 1 * this->donatearr_size();
  for (int i = 0; i < this->donatearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->donatearr(i));
  }

  // repeated .pb.TGuildSalaryInfo SalaryInfoArr = 10;
  total_size += 1 * this->salaryinfoarr_size();
  for (int i = 0; i < this->salaryinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->salaryinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildUpdateOurGuildNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildUpdateOurGuildNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildUpdateOurGuildNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildUpdateOurGuildNotify::MergeFrom(const TGuildUpdateOurGuildNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  tiparr_.MergeFrom(from.tiparr_);
  donatearr_.MergeFrom(from.donatearr_);
  salaryinfoarr_.MergeFrom(from.salaryinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildinfo()) {
      mutable_guildinfo()->::pb::TBaseGuildInfo::MergeFrom(from.guildinfo());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_applynum()) {
      set_applynum(from.applynum());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_impeachinfo()) {
      mutable_impeachinfo()->::pb::TGuildImpeachInfo::MergeFrom(from.impeachinfo());
    }
    if (from.has_dismisstime()) {
      set_dismisstime(from.dismisstime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tmfinfo()) {
      mutable_tmfinfo()->::pb::TGuildTreasMapFix::MergeFrom(from.tmfinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildUpdateOurGuildNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildUpdateOurGuildNotify::CopyFrom(const TGuildUpdateOurGuildNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildUpdateOurGuildNotify::IsInitialized() const {

  return true;
}

void TGuildUpdateOurGuildNotify::Swap(TGuildUpdateOurGuildNotify* other) {
  if (other != this) {
    std::swap(guildinfo_, other->guildinfo_);
    std::swap(notice_, other->notice_);
    tiparr_.Swap(&other->tiparr_);
    donatearr_.Swap(&other->donatearr_);
    std::swap(applynum_, other->applynum_);
    std::swap(createtime_, other->createtime_);
    std::swap(impeachinfo_, other->impeachinfo_);
    std::swap(dismisstime_, other->dismisstime_);
    std::swap(tmfinfo_, other->tmfinfo_);
    salaryinfoarr_.Swap(&other->salaryinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildUpdateOurGuildNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildUpdateOurGuildNotify_descriptor_;
  metadata.reflection = TGuildUpdateOurGuildNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGetOtherInfoReq::kGuildIdFieldNumber;
#endif  // !_MSC_VER

TGuildGetOtherInfoReq::TGuildGetOtherInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGetOtherInfoReq)
}

void TGuildGetOtherInfoReq::InitAsDefaultInstance() {
}

TGuildGetOtherInfoReq::TGuildGetOtherInfoReq(const TGuildGetOtherInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGetOtherInfoReq)
}

void TGuildGetOtherInfoReq::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGetOtherInfoReq::~TGuildGetOtherInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildGetOtherInfoReq)
  SharedDtor();
}

void TGuildGetOtherInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildGetOtherInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGetOtherInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGetOtherInfoReq_descriptor_;
}

const TGuildGetOtherInfoReq& TGuildGetOtherInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildGetOtherInfoReq* TGuildGetOtherInfoReq::default_instance_ = NULL;

TGuildGetOtherInfoReq* TGuildGetOtherInfoReq::New() const {
  return new TGuildGetOtherInfoReq;
}

void TGuildGetOtherInfoReq::Clear() {
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGetOtherInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGetOtherInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 GuildId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGetOtherInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGetOtherInfoReq)
  return false;
#undef DO_
}

void TGuildGetOtherInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGetOtherInfoReq)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGetOtherInfoReq)
}

::google::protobuf::uint8* TGuildGetOtherInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGetOtherInfoReq)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGetOtherInfoReq)
  return target;
}

int TGuildGetOtherInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 GuildId = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGetOtherInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGetOtherInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGetOtherInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGetOtherInfoReq::MergeFrom(const TGuildGetOtherInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGetOtherInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGetOtherInfoReq::CopyFrom(const TGuildGetOtherInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGetOtherInfoReq::IsInitialized() const {

  return true;
}

void TGuildGetOtherInfoReq::Swap(TGuildGetOtherInfoReq* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGetOtherInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGetOtherInfoReq_descriptor_;
  metadata.reflection = TGuildGetOtherInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGetOtherInfoRsp::kGuildInfoFieldNumber;
const int TGuildGetOtherInfoRsp::kRankFieldNumber;
#endif  // !_MSC_VER

TGuildGetOtherInfoRsp::TGuildGetOtherInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGetOtherInfoRsp)
}

void TGuildGetOtherInfoRsp::InitAsDefaultInstance() {
  guildinfo_ = const_cast< ::pb::TBaseGuildInfo*>(&::pb::TBaseGuildInfo::default_instance());
}

TGuildGetOtherInfoRsp::TGuildGetOtherInfoRsp(const TGuildGetOtherInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGetOtherInfoRsp)
}

void TGuildGetOtherInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  guildinfo_ = NULL;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGetOtherInfoRsp::~TGuildGetOtherInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildGetOtherInfoRsp)
  SharedDtor();
}

void TGuildGetOtherInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete guildinfo_;
  }
}

void TGuildGetOtherInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGetOtherInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGetOtherInfoRsp_descriptor_;
}

const TGuildGetOtherInfoRsp& TGuildGetOtherInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildGetOtherInfoRsp* TGuildGetOtherInfoRsp::default_instance_ = NULL;

TGuildGetOtherInfoRsp* TGuildGetOtherInfoRsp::New() const {
  return new TGuildGetOtherInfoRsp;
}

void TGuildGetOtherInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_guildinfo()) {
      if (guildinfo_ != NULL) guildinfo_->::pb::TBaseGuildInfo::Clear();
    }
    rank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGetOtherInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGetOtherInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBaseGuildInfo GuildInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 2;
      case 2: {
        if (tag == 16) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGetOtherInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGetOtherInfoRsp)
  return false;
#undef DO_
}

void TGuildGetOtherInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGetOtherInfoRsp)
  // optional .pb.TBaseGuildInfo GuildInfo = 1;
  if (has_guildinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guildinfo(), output);
  }

  // optional uint32 Rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGetOtherInfoRsp)
}

::google::protobuf::uint8* TGuildGetOtherInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGetOtherInfoRsp)
  // optional .pb.TBaseGuildInfo GuildInfo = 1;
  if (has_guildinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guildinfo(), target);
  }

  // optional uint32 Rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGetOtherInfoRsp)
  return target;
}

int TGuildGetOtherInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBaseGuildInfo GuildInfo = 1;
    if (has_guildinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildinfo());
    }

    // optional uint32 Rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGetOtherInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGetOtherInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGetOtherInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGetOtherInfoRsp::MergeFrom(const TGuildGetOtherInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildinfo()) {
      mutable_guildinfo()->::pb::TBaseGuildInfo::MergeFrom(from.guildinfo());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGetOtherInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGetOtherInfoRsp::CopyFrom(const TGuildGetOtherInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGetOtherInfoRsp::IsInitialized() const {

  return true;
}

void TGuildGetOtherInfoRsp::Swap(TGuildGetOtherInfoRsp* other) {
  if (other != this) {
    std::swap(guildinfo_, other->guildinfo_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGetOtherInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGetOtherInfoRsp_descriptor_;
  metadata.reflection = TGuildGetOtherInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGetListReq::kFromRankFieldNumber;
#endif  // !_MSC_VER

TGuildGetListReq::TGuildGetListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGetListReq)
}

void TGuildGetListReq::InitAsDefaultInstance() {
}

TGuildGetListReq::TGuildGetListReq(const TGuildGetListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGetListReq)
}

void TGuildGetListReq::SharedCtor() {
  _cached_size_ = 0;
  fromrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGetListReq::~TGuildGetListReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildGetListReq)
  SharedDtor();
}

void TGuildGetListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildGetListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGetListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGetListReq_descriptor_;
}

const TGuildGetListReq& TGuildGetListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildGetListReq* TGuildGetListReq::default_instance_ = NULL;

TGuildGetListReq* TGuildGetListReq::New() const {
  return new TGuildGetListReq;
}

void TGuildGetListReq::Clear() {
  fromrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGetListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGetListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FromRank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromrank_)));
          set_has_fromrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGetListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGetListReq)
  return false;
#undef DO_
}

void TGuildGetListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGetListReq)
  // optional uint32 FromRank = 1;
  if (has_fromrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fromrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGetListReq)
}

::google::protobuf::uint8* TGuildGetListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGetListReq)
  // optional uint32 FromRank = 1;
  if (has_fromrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fromrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGetListReq)
  return target;
}

int TGuildGetListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FromRank = 1;
    if (has_fromrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromrank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGetListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGetListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGetListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGetListReq::MergeFrom(const TGuildGetListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromrank()) {
      set_fromrank(from.fromrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGetListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGetListReq::CopyFrom(const TGuildGetListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGetListReq::IsInitialized() const {

  return true;
}

void TGuildGetListReq::Swap(TGuildGetListReq* other) {
  if (other != this) {
    std::swap(fromrank_, other->fromrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGetListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGetListReq_descriptor_;
  metadata.reflection = TGuildGetListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGetListRsp::kTotalNumFieldNumber;
const int TGuildGetListRsp::kGuildArrFieldNumber;
#endif  // !_MSC_VER

TGuildGetListRsp::TGuildGetListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGetListRsp)
}

void TGuildGetListRsp::InitAsDefaultInstance() {
}

TGuildGetListRsp::TGuildGetListRsp(const TGuildGetListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGetListRsp)
}

void TGuildGetListRsp::SharedCtor() {
  _cached_size_ = 0;
  totalnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGetListRsp::~TGuildGetListRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildGetListRsp)
  SharedDtor();
}

void TGuildGetListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildGetListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGetListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGetListRsp_descriptor_;
}

const TGuildGetListRsp& TGuildGetListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildGetListRsp* TGuildGetListRsp::default_instance_ = NULL;

TGuildGetListRsp* TGuildGetListRsp::New() const {
  return new TGuildGetListRsp;
}

void TGuildGetListRsp::Clear() {
  totalnum_ = 0u;
  guildarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGetListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGetListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TotalNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalnum_)));
          set_has_totalnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GuildArr;
        break;
      }

      // repeated .pb.TBaseGuildInfo GuildArr = 2;
      case 2: {
        if (tag == 18) {
         parse_GuildArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GuildArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGetListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGetListRsp)
  return false;
#undef DO_
}

void TGuildGetListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGetListRsp)
  // optional uint32 TotalNum = 1;
  if (has_totalnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->totalnum(), output);
  }

  // repeated .pb.TBaseGuildInfo GuildArr = 2;
  for (int i = 0; i < this->guildarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guildarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGetListRsp)
}

::google::protobuf::uint8* TGuildGetListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGetListRsp)
  // optional uint32 TotalNum = 1;
  if (has_totalnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->totalnum(), target);
  }

  // repeated .pb.TBaseGuildInfo GuildArr = 2;
  for (int i = 0; i < this->guildarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guildarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGetListRsp)
  return target;
}

int TGuildGetListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TotalNum = 1;
    if (has_totalnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalnum());
    }

  }
  // repeated .pb.TBaseGuildInfo GuildArr = 2;
  total_size += 1 * this->guildarr_size();
  for (int i = 0; i < this->guildarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGetListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGetListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGetListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGetListRsp::MergeFrom(const TGuildGetListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildarr_.MergeFrom(from.guildarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalnum()) {
      set_totalnum(from.totalnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGetListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGetListRsp::CopyFrom(const TGuildGetListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGetListRsp::IsInitialized() const {

  return true;
}

void TGuildGetListRsp::Swap(TGuildGetListRsp* other) {
  if (other != this) {
    std::swap(totalnum_, other->totalnum_);
    guildarr_.Swap(&other->guildarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGetListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGetListRsp_descriptor_;
  metadata.reflection = TGuildGetListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGetCanApplyListReq::kOffsetFieldNumber;
const int TGuildGetCanApplyListReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TGuildGetCanApplyListReq::TGuildGetCanApplyListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGetCanApplyListReq)
}

void TGuildGetCanApplyListReq::InitAsDefaultInstance() {
}

TGuildGetCanApplyListReq::TGuildGetCanApplyListReq(const TGuildGetCanApplyListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGetCanApplyListReq)
}

void TGuildGetCanApplyListReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGetCanApplyListReq::~TGuildGetCanApplyListReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildGetCanApplyListReq)
  SharedDtor();
}

void TGuildGetCanApplyListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildGetCanApplyListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGetCanApplyListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGetCanApplyListReq_descriptor_;
}

const TGuildGetCanApplyListReq& TGuildGetCanApplyListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildGetCanApplyListReq* TGuildGetCanApplyListReq::default_instance_ = NULL;

TGuildGetCanApplyListReq* TGuildGetCanApplyListReq::New() const {
  return new TGuildGetCanApplyListReq;
}

void TGuildGetCanApplyListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildGetCanApplyListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGetCanApplyListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGetCanApplyListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGetCanApplyListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGetCanApplyListReq)
  return false;
#undef DO_
}

void TGuildGetCanApplyListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGetCanApplyListReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGetCanApplyListReq)
}

::google::protobuf::uint8* TGuildGetCanApplyListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGetCanApplyListReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGetCanApplyListReq)
  return target;
}

int TGuildGetCanApplyListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGetCanApplyListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGetCanApplyListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGetCanApplyListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGetCanApplyListReq::MergeFrom(const TGuildGetCanApplyListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGetCanApplyListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGetCanApplyListReq::CopyFrom(const TGuildGetCanApplyListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGetCanApplyListReq::IsInitialized() const {

  return true;
}

void TGuildGetCanApplyListReq::Swap(TGuildGetCanApplyListReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGetCanApplyListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGetCanApplyListReq_descriptor_;
  metadata.reflection = TGuildGetCanApplyListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGetCanApplyListRsp::kGuildArrFieldNumber;
#endif  // !_MSC_VER

TGuildGetCanApplyListRsp::TGuildGetCanApplyListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGetCanApplyListRsp)
}

void TGuildGetCanApplyListRsp::InitAsDefaultInstance() {
}

TGuildGetCanApplyListRsp::TGuildGetCanApplyListRsp(const TGuildGetCanApplyListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGetCanApplyListRsp)
}

void TGuildGetCanApplyListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGetCanApplyListRsp::~TGuildGetCanApplyListRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildGetCanApplyListRsp)
  SharedDtor();
}

void TGuildGetCanApplyListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildGetCanApplyListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGetCanApplyListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGetCanApplyListRsp_descriptor_;
}

const TGuildGetCanApplyListRsp& TGuildGetCanApplyListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildGetCanApplyListRsp* TGuildGetCanApplyListRsp::default_instance_ = NULL;

TGuildGetCanApplyListRsp* TGuildGetCanApplyListRsp::New() const {
  return new TGuildGetCanApplyListRsp;
}

void TGuildGetCanApplyListRsp::Clear() {
  guildarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGetCanApplyListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGetCanApplyListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TBaseGuildInfo GuildArr = 1;
      case 1: {
        if (tag == 10) {
         parse_GuildArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_GuildArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGetCanApplyListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGetCanApplyListRsp)
  return false;
#undef DO_
}

void TGuildGetCanApplyListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGetCanApplyListRsp)
  // repeated .pb.TBaseGuildInfo GuildArr = 1;
  for (int i = 0; i < this->guildarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guildarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGetCanApplyListRsp)
}

::google::protobuf::uint8* TGuildGetCanApplyListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGetCanApplyListRsp)
  // repeated .pb.TBaseGuildInfo GuildArr = 1;
  for (int i = 0; i < this->guildarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guildarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGetCanApplyListRsp)
  return target;
}

int TGuildGetCanApplyListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TBaseGuildInfo GuildArr = 1;
  total_size += 1 * this->guildarr_size();
  for (int i = 0; i < this->guildarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGetCanApplyListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGetCanApplyListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGetCanApplyListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGetCanApplyListRsp::MergeFrom(const TGuildGetCanApplyListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildarr_.MergeFrom(from.guildarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGetCanApplyListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGetCanApplyListRsp::CopyFrom(const TGuildGetCanApplyListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGetCanApplyListRsp::IsInitialized() const {

  return true;
}

void TGuildGetCanApplyListRsp::Swap(TGuildGetCanApplyListRsp* other) {
  if (other != this) {
    guildarr_.Swap(&other->guildarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGetCanApplyListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGetCanApplyListRsp_descriptor_;
  metadata.reflection = TGuildGetCanApplyListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildCreateReq::kNameFieldNumber;
const int TGuildCreateReq::kSummaryFieldNumber;
const int TGuildCreateReq::kPhoneNumberFieldNumber;
const int TGuildCreateReq::kAuthCodeFieldNumber;
#endif  // !_MSC_VER

TGuildCreateReq::TGuildCreateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildCreateReq)
}

void TGuildCreateReq::InitAsDefaultInstance() {
}

TGuildCreateReq::TGuildCreateReq(const TGuildCreateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildCreateReq)
}

void TGuildCreateReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phonenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  authcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildCreateReq::~TGuildCreateReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildCreateReq)
  SharedDtor();
}

void TGuildCreateReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete summary_;
  }
  if (phonenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phonenumber_;
  }
  if (authcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authcode_;
  }
  if (this != default_instance_) {
  }
}

void TGuildCreateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildCreateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildCreateReq_descriptor_;
}

const TGuildCreateReq& TGuildCreateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildCreateReq* TGuildCreateReq::default_instance_ = NULL;

TGuildCreateReq* TGuildCreateReq::New() const {
  return new TGuildCreateReq;
}

void TGuildCreateReq::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_summary()) {
      if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        summary_->clear();
      }
    }
    if (has_phonenumber()) {
      if (phonenumber_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phonenumber_->clear();
      }
    }
    if (has_authcode()) {
      if (authcode_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        authcode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildCreateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildCreateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Summary;
        break;
      }

      // optional string Summary = 2;
      case 2: {
        if (tag == 18) {
         parse_Summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_summary()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->summary().data(), this->summary().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "summary");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PhoneNumber;
        break;
      }

      // optional string PhoneNumber = 3;
      case 3: {
        if (tag == 26) {
         parse_PhoneNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phonenumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phonenumber().data(), this->phonenumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "phonenumber");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AuthCode;
        break;
      }

      // optional string AuthCode = 4;
      case 4: {
        if (tag == 34) {
         parse_AuthCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authcode().data(), this->authcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "authcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildCreateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildCreateReq)
  return false;
#undef DO_
}

void TGuildCreateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildCreateReq)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string Summary = 2;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "summary");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->summary(), output);
  }

  // optional string PhoneNumber = 3;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->phonenumber(), output);
  }

  // optional string AuthCode = 4;
  if (has_authcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authcode().data(), this->authcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authcode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->authcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildCreateReq)
}

::google::protobuf::uint8* TGuildCreateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildCreateReq)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string Summary = 2;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "summary");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->summary(), target);
  }

  // optional string PhoneNumber = 3;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phonenumber().data(), this->phonenumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phonenumber");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->phonenumber(), target);
  }

  // optional string AuthCode = 4;
  if (has_authcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authcode().data(), this->authcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authcode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->authcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildCreateReq)
  return target;
}

int TGuildCreateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string Summary = 2;
    if (has_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->summary());
    }

    // optional string PhoneNumber = 3;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phonenumber());
    }

    // optional string AuthCode = 4;
    if (has_authcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildCreateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildCreateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildCreateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildCreateReq::MergeFrom(const TGuildCreateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_summary()) {
      set_summary(from.summary());
    }
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_authcode()) {
      set_authcode(from.authcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildCreateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildCreateReq::CopyFrom(const TGuildCreateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildCreateReq::IsInitialized() const {

  return true;
}

void TGuildCreateReq::Swap(TGuildCreateReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(summary_, other->summary_);
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(authcode_, other->authcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildCreateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildCreateReq_descriptor_;
  metadata.reflection = TGuildCreateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildSearchReq::kNameFieldNumber;
#endif  // !_MSC_VER

TGuildSearchReq::TGuildSearchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildSearchReq)
}

void TGuildSearchReq::InitAsDefaultInstance() {
}

TGuildSearchReq::TGuildSearchReq(const TGuildSearchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildSearchReq)
}

void TGuildSearchReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildSearchReq::~TGuildSearchReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildSearchReq)
  SharedDtor();
}

void TGuildSearchReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TGuildSearchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildSearchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildSearchReq_descriptor_;
}

const TGuildSearchReq& TGuildSearchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildSearchReq* TGuildSearchReq::default_instance_ = NULL;

TGuildSearchReq* TGuildSearchReq::New() const {
  return new TGuildSearchReq;
}

void TGuildSearchReq::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildSearchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildSearchReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildSearchReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildSearchReq)
  return false;
#undef DO_
}

void TGuildSearchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildSearchReq)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildSearchReq)
}

::google::protobuf::uint8* TGuildSearchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildSearchReq)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildSearchReq)
  return target;
}

int TGuildSearchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildSearchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildSearchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildSearchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildSearchReq::MergeFrom(const TGuildSearchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildSearchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildSearchReq::CopyFrom(const TGuildSearchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildSearchReq::IsInitialized() const {

  return true;
}

void TGuildSearchReq::Swap(TGuildSearchReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildSearchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildSearchReq_descriptor_;
  metadata.reflection = TGuildSearchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildSearchRsp::kGuildArrFieldNumber;
#endif  // !_MSC_VER

TGuildSearchRsp::TGuildSearchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildSearchRsp)
}

void TGuildSearchRsp::InitAsDefaultInstance() {
}

TGuildSearchRsp::TGuildSearchRsp(const TGuildSearchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildSearchRsp)
}

void TGuildSearchRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildSearchRsp::~TGuildSearchRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildSearchRsp)
  SharedDtor();
}

void TGuildSearchRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildSearchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildSearchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildSearchRsp_descriptor_;
}

const TGuildSearchRsp& TGuildSearchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildSearchRsp* TGuildSearchRsp::default_instance_ = NULL;

TGuildSearchRsp* TGuildSearchRsp::New() const {
  return new TGuildSearchRsp;
}

void TGuildSearchRsp::Clear() {
  guildarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildSearchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildSearchRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TBaseGuildInfo GuildArr = 1;
      case 1: {
        if (tag == 10) {
         parse_GuildArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_GuildArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildSearchRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildSearchRsp)
  return false;
#undef DO_
}

void TGuildSearchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildSearchRsp)
  // repeated .pb.TBaseGuildInfo GuildArr = 1;
  for (int i = 0; i < this->guildarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guildarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildSearchRsp)
}

::google::protobuf::uint8* TGuildSearchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildSearchRsp)
  // repeated .pb.TBaseGuildInfo GuildArr = 1;
  for (int i = 0; i < this->guildarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guildarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildSearchRsp)
  return target;
}

int TGuildSearchRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TBaseGuildInfo GuildArr = 1;
  total_size += 1 * this->guildarr_size();
  for (int i = 0; i < this->guildarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildSearchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildSearchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildSearchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildSearchRsp::MergeFrom(const TGuildSearchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildarr_.MergeFrom(from.guildarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildSearchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildSearchRsp::CopyFrom(const TGuildSearchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildSearchRsp::IsInitialized() const {

  return true;
}

void TGuildSearchRsp::Swap(TGuildSearchRsp* other) {
  if (other != this) {
    guildarr_.Swap(&other->guildarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildSearchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildSearchRsp_descriptor_;
  metadata.reflection = TGuildSearchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGetApplyListRsp::kApplyArrFieldNumber;
#endif  // !_MSC_VER

TGuildGetApplyListRsp::TGuildGetApplyListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGetApplyListRsp)
}

void TGuildGetApplyListRsp::InitAsDefaultInstance() {
}

TGuildGetApplyListRsp::TGuildGetApplyListRsp(const TGuildGetApplyListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGetApplyListRsp)
}

void TGuildGetApplyListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGetApplyListRsp::~TGuildGetApplyListRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildGetApplyListRsp)
  SharedDtor();
}

void TGuildGetApplyListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildGetApplyListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGetApplyListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGetApplyListRsp_descriptor_;
}

const TGuildGetApplyListRsp& TGuildGetApplyListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildGetApplyListRsp* TGuildGetApplyListRsp::default_instance_ = NULL;

TGuildGetApplyListRsp* TGuildGetApplyListRsp::New() const {
  return new TGuildGetApplyListRsp;
}

void TGuildGetApplyListRsp::Clear() {
  applyarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGetApplyListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGetApplyListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildApplyInfo ApplyArr = 1;
      case 1: {
        if (tag == 10) {
         parse_ApplyArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applyarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ApplyArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGetApplyListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGetApplyListRsp)
  return false;
#undef DO_
}

void TGuildGetApplyListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGetApplyListRsp)
  // repeated .pb.TGuildApplyInfo ApplyArr = 1;
  for (int i = 0; i < this->applyarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->applyarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGetApplyListRsp)
}

::google::protobuf::uint8* TGuildGetApplyListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGetApplyListRsp)
  // repeated .pb.TGuildApplyInfo ApplyArr = 1;
  for (int i = 0; i < this->applyarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->applyarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGetApplyListRsp)
  return target;
}

int TGuildGetApplyListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TGuildApplyInfo ApplyArr = 1;
  total_size += 1 * this->applyarr_size();
  for (int i = 0; i < this->applyarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applyarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGetApplyListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGetApplyListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGetApplyListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGetApplyListRsp::MergeFrom(const TGuildGetApplyListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  applyarr_.MergeFrom(from.applyarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGetApplyListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGetApplyListRsp::CopyFrom(const TGuildGetApplyListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGetApplyListRsp::IsInitialized() const {

  return true;
}

void TGuildGetApplyListRsp::Swap(TGuildGetApplyListRsp* other) {
  if (other != this) {
    applyarr_.Swap(&other->applyarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGetApplyListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGetApplyListRsp_descriptor_;
  metadata.reflection = TGuildGetApplyListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildApplyReq::kGuildIdFieldNumber;
#endif  // !_MSC_VER

TGuildApplyReq::TGuildApplyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildApplyReq)
}

void TGuildApplyReq::InitAsDefaultInstance() {
}

TGuildApplyReq::TGuildApplyReq(const TGuildApplyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildApplyReq)
}

void TGuildApplyReq::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildApplyReq::~TGuildApplyReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildApplyReq)
  SharedDtor();
}

void TGuildApplyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildApplyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildApplyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildApplyReq_descriptor_;
}

const TGuildApplyReq& TGuildApplyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildApplyReq* TGuildApplyReq::default_instance_ = NULL;

TGuildApplyReq* TGuildApplyReq::New() const {
  return new TGuildApplyReq;
}

void TGuildApplyReq::Clear() {
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildApplyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildApplyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 GuildId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildApplyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildApplyReq)
  return false;
#undef DO_
}

void TGuildApplyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildApplyReq)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildApplyReq)
}

::google::protobuf::uint8* TGuildApplyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildApplyReq)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildApplyReq)
  return target;
}

int TGuildApplyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 GuildId = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildApplyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildApplyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildApplyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildApplyReq::MergeFrom(const TGuildApplyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildApplyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildApplyReq::CopyFrom(const TGuildApplyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildApplyReq::IsInitialized() const {

  return true;
}

void TGuildApplyReq::Swap(TGuildApplyReq* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildApplyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildApplyReq_descriptor_;
  metadata.reflection = TGuildApplyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildCancelApplyReq::kGuildIdFieldNumber;
#endif  // !_MSC_VER

TGuildCancelApplyReq::TGuildCancelApplyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildCancelApplyReq)
}

void TGuildCancelApplyReq::InitAsDefaultInstance() {
}

TGuildCancelApplyReq::TGuildCancelApplyReq(const TGuildCancelApplyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildCancelApplyReq)
}

void TGuildCancelApplyReq::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildCancelApplyReq::~TGuildCancelApplyReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildCancelApplyReq)
  SharedDtor();
}

void TGuildCancelApplyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildCancelApplyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildCancelApplyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildCancelApplyReq_descriptor_;
}

const TGuildCancelApplyReq& TGuildCancelApplyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildCancelApplyReq* TGuildCancelApplyReq::default_instance_ = NULL;

TGuildCancelApplyReq* TGuildCancelApplyReq::New() const {
  return new TGuildCancelApplyReq;
}

void TGuildCancelApplyReq::Clear() {
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildCancelApplyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildCancelApplyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 GuildId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildCancelApplyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildCancelApplyReq)
  return false;
#undef DO_
}

void TGuildCancelApplyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildCancelApplyReq)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildCancelApplyReq)
}

::google::protobuf::uint8* TGuildCancelApplyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildCancelApplyReq)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildCancelApplyReq)
  return target;
}

int TGuildCancelApplyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 GuildId = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildCancelApplyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildCancelApplyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildCancelApplyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildCancelApplyReq::MergeFrom(const TGuildCancelApplyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildCancelApplyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildCancelApplyReq::CopyFrom(const TGuildCancelApplyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildCancelApplyReq::IsInitialized() const {

  return true;
}

void TGuildCancelApplyReq::Swap(TGuildCancelApplyReq* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildCancelApplyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildCancelApplyReq_descriptor_;
  metadata.reflection = TGuildCancelApplyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildVerifyReq::kUidFieldNumber;
const int TGuildVerifyReq::kRetFieldNumber;
#endif  // !_MSC_VER

TGuildVerifyReq::TGuildVerifyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildVerifyReq)
}

void TGuildVerifyReq::InitAsDefaultInstance() {
}

TGuildVerifyReq::TGuildVerifyReq(const TGuildVerifyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildVerifyReq)
}

void TGuildVerifyReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildVerifyReq::~TGuildVerifyReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildVerifyReq)
  SharedDtor();
}

void TGuildVerifyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildVerifyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildVerifyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildVerifyReq_descriptor_;
}

const TGuildVerifyReq& TGuildVerifyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildVerifyReq* TGuildVerifyReq::default_instance_ = NULL;

TGuildVerifyReq* TGuildVerifyReq::New() const {
  return new TGuildVerifyReq;
}

void TGuildVerifyReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uid_ = GOOGLE_ULONGLONG(0);
    ret_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildVerifyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildVerifyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Ret;
        break;
      }

      // optional .pb.EVerifyRet Ret = 2;
      case 2: {
        if (tag == 16) {
         parse_Ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EVerifyRet_IsValid(value)) {
            set_ret(static_cast< ::pb::EVerifyRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildVerifyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildVerifyReq)
  return false;
#undef DO_
}

void TGuildVerifyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildVerifyReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional .pb.EVerifyRet Ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildVerifyReq)
}

::google::protobuf::uint8* TGuildVerifyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildVerifyReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional .pb.EVerifyRet Ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildVerifyReq)
  return target;
}

int TGuildVerifyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional .pb.EVerifyRet Ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildVerifyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildVerifyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildVerifyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildVerifyReq::MergeFrom(const TGuildVerifyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildVerifyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildVerifyReq::CopyFrom(const TGuildVerifyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildVerifyReq::IsInitialized() const {

  return true;
}

void TGuildVerifyReq::Swap(TGuildVerifyReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildVerifyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildVerifyReq_descriptor_;
  metadata.reflection = TGuildVerifyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildVerifyAllReq::kRetFieldNumber;
#endif  // !_MSC_VER

TGuildVerifyAllReq::TGuildVerifyAllReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildVerifyAllReq)
}

void TGuildVerifyAllReq::InitAsDefaultInstance() {
}

TGuildVerifyAllReq::TGuildVerifyAllReq(const TGuildVerifyAllReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildVerifyAllReq)
}

void TGuildVerifyAllReq::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildVerifyAllReq::~TGuildVerifyAllReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildVerifyAllReq)
  SharedDtor();
}

void TGuildVerifyAllReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildVerifyAllReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildVerifyAllReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildVerifyAllReq_descriptor_;
}

const TGuildVerifyAllReq& TGuildVerifyAllReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildVerifyAllReq* TGuildVerifyAllReq::default_instance_ = NULL;

TGuildVerifyAllReq* TGuildVerifyAllReq::New() const {
  return new TGuildVerifyAllReq;
}

void TGuildVerifyAllReq::Clear() {
  ret_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildVerifyAllReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildVerifyAllReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EVerifyRet Ret = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EVerifyRet_IsValid(value)) {
            set_ret(static_cast< ::pb::EVerifyRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildVerifyAllReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildVerifyAllReq)
  return false;
#undef DO_
}

void TGuildVerifyAllReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildVerifyAllReq)
  // optional .pb.EVerifyRet Ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildVerifyAllReq)
}

::google::protobuf::uint8* TGuildVerifyAllReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildVerifyAllReq)
  // optional .pb.EVerifyRet Ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildVerifyAllReq)
  return target;
}

int TGuildVerifyAllReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EVerifyRet Ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildVerifyAllReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildVerifyAllReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildVerifyAllReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildVerifyAllReq::MergeFrom(const TGuildVerifyAllReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildVerifyAllReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildVerifyAllReq::CopyFrom(const TGuildVerifyAllReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildVerifyAllReq::IsInitialized() const {

  return true;
}

void TGuildVerifyAllReq::Swap(TGuildVerifyAllReq* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildVerifyAllReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildVerifyAllReq_descriptor_;
  metadata.reflection = TGuildVerifyAllReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGetMemberListRsp::kMemberArrFieldNumber;
#endif  // !_MSC_VER

TGuildGetMemberListRsp::TGuildGetMemberListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGetMemberListRsp)
}

void TGuildGetMemberListRsp::InitAsDefaultInstance() {
}

TGuildGetMemberListRsp::TGuildGetMemberListRsp(const TGuildGetMemberListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGetMemberListRsp)
}

void TGuildGetMemberListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGetMemberListRsp::~TGuildGetMemberListRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildGetMemberListRsp)
  SharedDtor();
}

void TGuildGetMemberListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildGetMemberListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGetMemberListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGetMemberListRsp_descriptor_;
}

const TGuildGetMemberListRsp& TGuildGetMemberListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildGetMemberListRsp* TGuildGetMemberListRsp::default_instance_ = NULL;

TGuildGetMemberListRsp* TGuildGetMemberListRsp::New() const {
  return new TGuildGetMemberListRsp;
}

void TGuildGetMemberListRsp::Clear() {
  memberarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGetMemberListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGetMemberListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildMemberInfo MemberArr = 1;
      case 1: {
        if (tag == 10) {
         parse_MemberArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_MemberArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGetMemberListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGetMemberListRsp)
  return false;
#undef DO_
}

void TGuildGetMemberListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGetMemberListRsp)
  // repeated .pb.TGuildMemberInfo MemberArr = 1;
  for (int i = 0; i < this->memberarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->memberarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGetMemberListRsp)
}

::google::protobuf::uint8* TGuildGetMemberListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGetMemberListRsp)
  // repeated .pb.TGuildMemberInfo MemberArr = 1;
  for (int i = 0; i < this->memberarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->memberarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGetMemberListRsp)
  return target;
}

int TGuildGetMemberListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TGuildMemberInfo MemberArr = 1;
  total_size += 1 * this->memberarr_size();
  for (int i = 0; i < this->memberarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memberarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGetMemberListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGetMemberListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGetMemberListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGetMemberListRsp::MergeFrom(const TGuildGetMemberListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberarr_.MergeFrom(from.memberarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGetMemberListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGetMemberListRsp::CopyFrom(const TGuildGetMemberListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGetMemberListRsp::IsInitialized() const {

  return true;
}

void TGuildGetMemberListRsp::Swap(TGuildGetMemberListRsp* other) {
  if (other != this) {
    memberarr_.Swap(&other->memberarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGetMemberListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGetMemberListRsp_descriptor_;
  metadata.reflection = TGuildGetMemberListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildModifyReq::kBannerNameFieldNumber;
const int TGuildModifyReq::kBannerBaseFieldNumber;
const int TGuildModifyReq::kSummaryFieldNumber;
const int TGuildModifyReq::kNoticeFieldNumber;
const int TGuildModifyReq::kReviewModeFieldNumber;
const int TGuildModifyReq::kLimitFieldNumber;
const int TGuildModifyReq::kQQFieldNumber;
const int TGuildModifyReq::kLineGroupFieldNumber;
#endif  // !_MSC_VER

TGuildModifyReq::TGuildModifyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildModifyReq)
}

void TGuildModifyReq::InitAsDefaultInstance() {
  limit_ = const_cast< ::pb::TGuildLimit*>(&::pb::TGuildLimit::default_instance());
}

TGuildModifyReq::TGuildModifyReq(const TGuildModifyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildModifyReq)
}

void TGuildModifyReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bannerbase_ = 0u;
  summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reviewmode_ = 0;
  limit_ = NULL;
  qq_ = GOOGLE_ULONGLONG(0);
  linegroup_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildModifyReq::~TGuildModifyReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildModifyReq)
  SharedDtor();
}

void TGuildModifyReq::SharedDtor() {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete summary_;
  }
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (linegroup_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete linegroup_;
  }
  if (this != default_instance_) {
    delete limit_;
  }
}

void TGuildModifyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildModifyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildModifyReq_descriptor_;
}

const TGuildModifyReq& TGuildModifyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildModifyReq* TGuildModifyReq::default_instance_ = NULL;

TGuildModifyReq* TGuildModifyReq::New() const {
  return new TGuildModifyReq;
}

void TGuildModifyReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildModifyReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(bannerbase_, reviewmode_);
    if (has_bannername()) {
      if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bannername_->clear();
      }
    }
    if (has_summary()) {
      if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        summary_->clear();
      }
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        notice_->clear();
      }
    }
    if (has_limit()) {
      if (limit_ != NULL) limit_->::pb::TGuildLimit::Clear();
    }
    qq_ = GOOGLE_ULONGLONG(0);
    if (has_linegroup()) {
      if (linegroup_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        linegroup_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildModifyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildModifyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string BannerName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bannername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bannername().data(), this->bannername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bannername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BannerBase;
        break;
      }

      // optional uint32 BannerBase = 2;
      case 2: {
        if (tag == 16) {
         parse_BannerBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bannerbase_)));
          set_has_bannerbase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Summary;
        break;
      }

      // optional string Summary = 3;
      case 3: {
        if (tag == 26) {
         parse_Summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_summary()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->summary().data(), this->summary().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "summary");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Notice;
        break;
      }

      // optional string Notice = 4;
      case 4: {
        if (tag == 34) {
         parse_Notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "notice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ReviewMode;
        break;
      }

      // optional .pb.EReviewMode ReviewMode = 5;
      case 5: {
        if (tag == 40) {
         parse_ReviewMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EReviewMode_IsValid(value)) {
            set_reviewmode(static_cast< ::pb::EReviewMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Limit;
        break;
      }

      // optional .pb.TGuildLimit Limit = 6;
      case 6: {
        if (tag == 50) {
         parse_Limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_limit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_QQ;
        break;
      }

      // optional uint64 QQ = 7;
      case 7: {
        if (tag == 56) {
         parse_QQ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qq_)));
          set_has_qq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_LineGroup;
        break;
      }

      // optional string LineGroup = 8;
      case 8: {
        if (tag == 66) {
         parse_LineGroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_linegroup()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->linegroup().data(), this->linegroup().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "linegroup");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildModifyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildModifyReq)
  return false;
#undef DO_
}

void TGuildModifyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildModifyReq)
  // optional string BannerName = 1;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bannername(), output);
  }

  // optional uint32 BannerBase = 2;
  if (has_bannerbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bannerbase(), output);
  }

  // optional string Summary = 3;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "summary");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->summary(), output);
  }

  // optional string Notice = 4;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->notice(), output);
  }

  // optional .pb.EReviewMode ReviewMode = 5;
  if (has_reviewmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->reviewmode(), output);
  }

  // optional .pb.TGuildLimit Limit = 6;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->limit(), output);
  }

  // optional uint64 QQ = 7;
  if (has_qq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->qq(), output);
  }

  // optional string LineGroup = 8;
  if (has_linegroup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->linegroup().data(), this->linegroup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "linegroup");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->linegroup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildModifyReq)
}

::google::protobuf::uint8* TGuildModifyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildModifyReq)
  // optional string BannerName = 1;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bannername(), target);
  }

  // optional uint32 BannerBase = 2;
  if (has_bannerbase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bannerbase(), target);
  }

  // optional string Summary = 3;
  if (has_summary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->summary().data(), this->summary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "summary");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->summary(), target);
  }

  // optional string Notice = 4;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->notice(), target);
  }

  // optional .pb.EReviewMode ReviewMode = 5;
  if (has_reviewmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->reviewmode(), target);
  }

  // optional .pb.TGuildLimit Limit = 6;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->limit(), target);
  }

  // optional uint64 QQ = 7;
  if (has_qq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->qq(), target);
  }

  // optional string LineGroup = 8;
  if (has_linegroup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->linegroup().data(), this->linegroup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "linegroup");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->linegroup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildModifyReq)
  return target;
}

int TGuildModifyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string BannerName = 1;
    if (has_bannername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bannername());
    }

    // optional uint32 BannerBase = 2;
    if (has_bannerbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bannerbase());
    }

    // optional string Summary = 3;
    if (has_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->summary());
    }

    // optional string Notice = 4;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional .pb.EReviewMode ReviewMode = 5;
    if (has_reviewmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reviewmode());
    }

    // optional .pb.TGuildLimit Limit = 6;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->limit());
    }

    // optional uint64 QQ = 7;
    if (has_qq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->qq());
    }

    // optional string LineGroup = 8;
    if (has_linegroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->linegroup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildModifyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildModifyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildModifyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildModifyReq::MergeFrom(const TGuildModifyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bannername()) {
      set_bannername(from.bannername());
    }
    if (from.has_bannerbase()) {
      set_bannerbase(from.bannerbase());
    }
    if (from.has_summary()) {
      set_summary(from.summary());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_reviewmode()) {
      set_reviewmode(from.reviewmode());
    }
    if (from.has_limit()) {
      mutable_limit()->::pb::TGuildLimit::MergeFrom(from.limit());
    }
    if (from.has_qq()) {
      set_qq(from.qq());
    }
    if (from.has_linegroup()) {
      set_linegroup(from.linegroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildModifyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildModifyReq::CopyFrom(const TGuildModifyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildModifyReq::IsInitialized() const {

  return true;
}

void TGuildModifyReq::Swap(TGuildModifyReq* other) {
  if (other != this) {
    std::swap(bannername_, other->bannername_);
    std::swap(bannerbase_, other->bannerbase_);
    std::swap(summary_, other->summary_);
    std::swap(notice_, other->notice_);
    std::swap(reviewmode_, other->reviewmode_);
    std::swap(limit_, other->limit_);
    std::swap(qq_, other->qq_);
    std::swap(linegroup_, other->linegroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildModifyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildModifyReq_descriptor_;
  metadata.reflection = TGuildModifyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildDismissRsp::kGuildWarSignFieldNumber;
#endif  // !_MSC_VER

TGuildDismissRsp::TGuildDismissRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildDismissRsp)
}

void TGuildDismissRsp::InitAsDefaultInstance() {
}

TGuildDismissRsp::TGuildDismissRsp(const TGuildDismissRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildDismissRsp)
}

void TGuildDismissRsp::SharedCtor() {
  _cached_size_ = 0;
  guildwarsign_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildDismissRsp::~TGuildDismissRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildDismissRsp)
  SharedDtor();
}

void TGuildDismissRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildDismissRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildDismissRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildDismissRsp_descriptor_;
}

const TGuildDismissRsp& TGuildDismissRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildDismissRsp* TGuildDismissRsp::default_instance_ = NULL;

TGuildDismissRsp* TGuildDismissRsp::New() const {
  return new TGuildDismissRsp;
}

void TGuildDismissRsp::Clear() {
  guildwarsign_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildDismissRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildDismissRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GuildWarSign = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildwarsign_)));
          set_has_guildwarsign();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildDismissRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildDismissRsp)
  return false;
#undef DO_
}

void TGuildDismissRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildDismissRsp)
  // optional uint32 GuildWarSign = 1;
  if (has_guildwarsign()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guildwarsign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildDismissRsp)
}

::google::protobuf::uint8* TGuildDismissRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildDismissRsp)
  // optional uint32 GuildWarSign = 1;
  if (has_guildwarsign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guildwarsign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildDismissRsp)
  return target;
}

int TGuildDismissRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GuildWarSign = 1;
    if (has_guildwarsign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildwarsign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildDismissRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildDismissRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildDismissRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildDismissRsp::MergeFrom(const TGuildDismissRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildwarsign()) {
      set_guildwarsign(from.guildwarsign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildDismissRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildDismissRsp::CopyFrom(const TGuildDismissRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildDismissRsp::IsInitialized() const {

  return true;
}

void TGuildDismissRsp::Swap(TGuildDismissRsp* other) {
  if (other != this) {
    std::swap(guildwarsign_, other->guildwarsign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildDismissRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildDismissRsp_descriptor_;
  metadata.reflection = TGuildDismissRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildAppointRpgReq::kUidFieldNumber;
const int TGuildAppointRpgReq::kPostFieldNumber;
#endif  // !_MSC_VER

TGuildAppointRpgReq::TGuildAppointRpgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildAppointRpgReq)
}

void TGuildAppointRpgReq::InitAsDefaultInstance() {
}

TGuildAppointRpgReq::TGuildAppointRpgReq(const TGuildAppointRpgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildAppointRpgReq)
}

void TGuildAppointRpgReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  post_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildAppointRpgReq::~TGuildAppointRpgReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildAppointRpgReq)
  SharedDtor();
}

void TGuildAppointRpgReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildAppointRpgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildAppointRpgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildAppointRpgReq_descriptor_;
}

const TGuildAppointRpgReq& TGuildAppointRpgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildAppointRpgReq* TGuildAppointRpgReq::default_instance_ = NULL;

TGuildAppointRpgReq* TGuildAppointRpgReq::New() const {
  return new TGuildAppointRpgReq;
}

void TGuildAppointRpgReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildAppointRpgReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, post_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildAppointRpgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildAppointRpgReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Post;
        break;
      }

      // optional .pb.EGuildPost Post = 2;
      case 2: {
        if (tag == 16) {
         parse_Post:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EGuildPost_IsValid(value)) {
            set_post(static_cast< ::pb::EGuildPost >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildAppointRpgReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildAppointRpgReq)
  return false;
#undef DO_
}

void TGuildAppointRpgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildAppointRpgReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional .pb.EGuildPost Post = 2;
  if (has_post()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->post(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildAppointRpgReq)
}

::google::protobuf::uint8* TGuildAppointRpgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildAppointRpgReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional .pb.EGuildPost Post = 2;
  if (has_post()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->post(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildAppointRpgReq)
  return target;
}

int TGuildAppointRpgReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional .pb.EGuildPost Post = 2;
    if (has_post()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->post());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildAppointRpgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildAppointRpgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildAppointRpgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildAppointRpgReq::MergeFrom(const TGuildAppointRpgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_post()) {
      set_post(from.post());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildAppointRpgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildAppointRpgReq::CopyFrom(const TGuildAppointRpgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildAppointRpgReq::IsInitialized() const {

  return true;
}

void TGuildAppointRpgReq::Swap(TGuildAppointRpgReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(post_, other->post_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildAppointRpgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildAppointRpgReq_descriptor_;
  metadata.reflection = TGuildAppointRpgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildDemiseReq::kUidFieldNumber;
#endif  // !_MSC_VER

TGuildDemiseReq::TGuildDemiseReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildDemiseReq)
}

void TGuildDemiseReq::InitAsDefaultInstance() {
}

TGuildDemiseReq::TGuildDemiseReq(const TGuildDemiseReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildDemiseReq)
}

void TGuildDemiseReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildDemiseReq::~TGuildDemiseReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildDemiseReq)
  SharedDtor();
}

void TGuildDemiseReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildDemiseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildDemiseReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildDemiseReq_descriptor_;
}

const TGuildDemiseReq& TGuildDemiseReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildDemiseReq* TGuildDemiseReq::default_instance_ = NULL;

TGuildDemiseReq* TGuildDemiseReq::New() const {
  return new TGuildDemiseReq;
}

void TGuildDemiseReq::Clear() {
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildDemiseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildDemiseReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildDemiseReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildDemiseReq)
  return false;
#undef DO_
}

void TGuildDemiseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildDemiseReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildDemiseReq)
}

::google::protobuf::uint8* TGuildDemiseReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildDemiseReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildDemiseReq)
  return target;
}

int TGuildDemiseReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildDemiseReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildDemiseReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildDemiseReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildDemiseReq::MergeFrom(const TGuildDemiseReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildDemiseReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildDemiseReq::CopyFrom(const TGuildDemiseReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildDemiseReq::IsInitialized() const {

  return true;
}

void TGuildDemiseReq::Swap(TGuildDemiseReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildDemiseReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildDemiseReq_descriptor_;
  metadata.reflection = TGuildDemiseReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildRemoveReq::kUidFieldNumber;
#endif  // !_MSC_VER

TGuildRemoveReq::TGuildRemoveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildRemoveReq)
}

void TGuildRemoveReq::InitAsDefaultInstance() {
}

TGuildRemoveReq::TGuildRemoveReq(const TGuildRemoveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildRemoveReq)
}

void TGuildRemoveReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildRemoveReq::~TGuildRemoveReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildRemoveReq)
  SharedDtor();
}

void TGuildRemoveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildRemoveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildRemoveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildRemoveReq_descriptor_;
}

const TGuildRemoveReq& TGuildRemoveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildRemoveReq* TGuildRemoveReq::default_instance_ = NULL;

TGuildRemoveReq* TGuildRemoveReq::New() const {
  return new TGuildRemoveReq;
}

void TGuildRemoveReq::Clear() {
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildRemoveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildRemoveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildRemoveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildRemoveReq)
  return false;
#undef DO_
}

void TGuildRemoveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildRemoveReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildRemoveReq)
}

::google::protobuf::uint8* TGuildRemoveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildRemoveReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildRemoveReq)
  return target;
}

int TGuildRemoveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildRemoveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildRemoveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildRemoveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildRemoveReq::MergeFrom(const TGuildRemoveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildRemoveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildRemoveReq::CopyFrom(const TGuildRemoveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildRemoveReq::IsInitialized() const {

  return true;
}

void TGuildRemoveReq::Swap(TGuildRemoveReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildRemoveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildRemoveReq_descriptor_;
  metadata.reflection = TGuildRemoveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildDonateReq::kTypeFieldNumber;
const int TGuildDonateReq::kIndexFieldNumber;
#endif  // !_MSC_VER

TGuildDonateReq::TGuildDonateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildDonateReq)
}

void TGuildDonateReq::InitAsDefaultInstance() {
}

TGuildDonateReq::TGuildDonateReq(const TGuildDonateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildDonateReq)
}

void TGuildDonateReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildDonateReq::~TGuildDonateReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildDonateReq)
  SharedDtor();
}

void TGuildDonateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildDonateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildDonateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildDonateReq_descriptor_;
}

const TGuildDonateReq& TGuildDonateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildDonateReq* TGuildDonateReq::default_instance_ = NULL;

TGuildDonateReq* TGuildDonateReq::New() const {
  return new TGuildDonateReq;
}

void TGuildDonateReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildDonateReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildDonateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildDonateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Index;
        break;
      }

      // optional uint32 Index = 2;
      case 2: {
        if (tag == 16) {
         parse_Index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildDonateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildDonateReq)
  return false;
#undef DO_
}

void TGuildDonateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildDonateReq)
  // optional uint32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 Index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildDonateReq)
}

::google::protobuf::uint8* TGuildDonateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildDonateReq)
  // optional uint32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 Index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildDonateReq)
  return target;
}

int TGuildDonateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 Index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildDonateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildDonateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildDonateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildDonateReq::MergeFrom(const TGuildDonateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildDonateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildDonateReq::CopyFrom(const TGuildDonateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildDonateReq::IsInitialized() const {

  return true;
}

void TGuildDonateReq::Swap(TGuildDonateReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildDonateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildDonateReq_descriptor_;
  metadata.reflection = TGuildDonateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildLevelRankInfo::kGuildIdFieldNumber;
const int TGuildLevelRankInfo::kGuildNameFieldNumber;
const int TGuildLevelRankInfo::kGuildLevelFieldNumber;
const int TGuildLevelRankInfo::kBannerNameFieldNumber;
const int TGuildLevelRankInfo::kBannerBaseFieldNumber;
const int TGuildLevelRankInfo::kHtidFieldNumber;
#endif  // !_MSC_VER

TGuildLevelRankInfo::TGuildLevelRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildLevelRankInfo)
}

void TGuildLevelRankInfo::InitAsDefaultInstance() {
}

TGuildLevelRankInfo::TGuildLevelRankInfo(const TGuildLevelRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildLevelRankInfo)
}

void TGuildLevelRankInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildlevel_ = 0u;
  bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bannerbase_ = 0u;
  htid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildLevelRankInfo::~TGuildLevelRankInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildLevelRankInfo)
  SharedDtor();
}

void TGuildLevelRankInfo::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (this != default_instance_) {
  }
}

void TGuildLevelRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildLevelRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildLevelRankInfo_descriptor_;
}

const TGuildLevelRankInfo& TGuildLevelRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildLevelRankInfo* TGuildLevelRankInfo::default_instance_ = NULL;

TGuildLevelRankInfo* TGuildLevelRankInfo::New() const {
  return new TGuildLevelRankInfo;
}

void TGuildLevelRankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildLevelRankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(guildlevel_, htid_);
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
    if (has_bannername()) {
      if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bannername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildLevelRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildLevelRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 GuildId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GuildName;
        break;
      }

      // optional string GuildName = 2;
      case 2: {
        if (tag == 18) {
         parse_GuildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_GuildLevel;
        break;
      }

      // optional uint32 GuildLevel = 3;
      case 3: {
        if (tag == 24) {
         parse_GuildLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildlevel_)));
          set_has_guildlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BannerName;
        break;
      }

      // optional string BannerName = 4;
      case 4: {
        if (tag == 34) {
         parse_BannerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bannername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bannername().data(), this->bannername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bannername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BannerBase;
        break;
      }

      // optional uint32 BannerBase = 5;
      case 5: {
        if (tag == 40) {
         parse_BannerBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bannerbase_)));
          set_has_bannerbase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Htid;
        break;
      }

      // optional uint32 Htid = 6;
      case 6: {
        if (tag == 48) {
         parse_Htid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildLevelRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildLevelRankInfo)
  return false;
#undef DO_
}

void TGuildLevelRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildLevelRankInfo)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // optional string GuildName = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guildname(), output);
  }

  // optional uint32 GuildLevel = 3;
  if (has_guildlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->guildlevel(), output);
  }

  // optional string BannerName = 4;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bannername(), output);
  }

  // optional uint32 BannerBase = 5;
  if (has_bannerbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bannerbase(), output);
  }

  // optional uint32 Htid = 6;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->htid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildLevelRankInfo)
}

::google::protobuf::uint8* TGuildLevelRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildLevelRankInfo)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // optional string GuildName = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guildname(), target);
  }

  // optional uint32 GuildLevel = 3;
  if (has_guildlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->guildlevel(), target);
  }

  // optional string BannerName = 4;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bannername(), target);
  }

  // optional uint32 BannerBase = 5;
  if (has_bannerbase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bannerbase(), target);
  }

  // optional uint32 Htid = 6;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->htid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildLevelRankInfo)
  return target;
}

int TGuildLevelRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 GuildId = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string GuildName = 2;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional uint32 GuildLevel = 3;
    if (has_guildlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildlevel());
    }

    // optional string BannerName = 4;
    if (has_bannername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bannername());
    }

    // optional uint32 BannerBase = 5;
    if (has_bannerbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bannerbase());
    }

    // optional uint32 Htid = 6;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildLevelRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildLevelRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildLevelRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildLevelRankInfo::MergeFrom(const TGuildLevelRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_guildlevel()) {
      set_guildlevel(from.guildlevel());
    }
    if (from.has_bannername()) {
      set_bannername(from.bannername());
    }
    if (from.has_bannerbase()) {
      set_bannerbase(from.bannerbase());
    }
    if (from.has_htid()) {
      set_htid(from.htid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildLevelRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildLevelRankInfo::CopyFrom(const TGuildLevelRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildLevelRankInfo::IsInitialized() const {

  return true;
}

void TGuildLevelRankInfo::Swap(TGuildLevelRankInfo* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(guildlevel_, other->guildlevel_);
    std::swap(bannername_, other->bannername_);
    std::swap(bannerbase_, other->bannerbase_);
    std::swap(htid_, other->htid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildLevelRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildLevelRankInfo_descriptor_;
  metadata.reflection = TGuildLevelRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGetLevelRankReq::kOffsetFieldNumber;
const int TGuildGetLevelRankReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TGuildGetLevelRankReq::TGuildGetLevelRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGetLevelRankReq)
}

void TGuildGetLevelRankReq::InitAsDefaultInstance() {
}

TGuildGetLevelRankReq::TGuildGetLevelRankReq(const TGuildGetLevelRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGetLevelRankReq)
}

void TGuildGetLevelRankReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGetLevelRankReq::~TGuildGetLevelRankReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildGetLevelRankReq)
  SharedDtor();
}

void TGuildGetLevelRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildGetLevelRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGetLevelRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGetLevelRankReq_descriptor_;
}

const TGuildGetLevelRankReq& TGuildGetLevelRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildGetLevelRankReq* TGuildGetLevelRankReq::default_instance_ = NULL;

TGuildGetLevelRankReq* TGuildGetLevelRankReq::New() const {
  return new TGuildGetLevelRankReq;
}

void TGuildGetLevelRankReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildGetLevelRankReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGetLevelRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGetLevelRankReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGetLevelRankReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGetLevelRankReq)
  return false;
#undef DO_
}

void TGuildGetLevelRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGetLevelRankReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGetLevelRankReq)
}

::google::protobuf::uint8* TGuildGetLevelRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGetLevelRankReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGetLevelRankReq)
  return target;
}

int TGuildGetLevelRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGetLevelRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGetLevelRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGetLevelRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGetLevelRankReq::MergeFrom(const TGuildGetLevelRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGetLevelRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGetLevelRankReq::CopyFrom(const TGuildGetLevelRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGetLevelRankReq::IsInitialized() const {

  return true;
}

void TGuildGetLevelRankReq::Swap(TGuildGetLevelRankReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGetLevelRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGetLevelRankReq_descriptor_;
  metadata.reflection = TGuildGetLevelRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGetLevelRankRsp::kRankArrFieldNumber;
const int TGuildGetLevelRankRsp::kMyRankFieldNumber;
#endif  // !_MSC_VER

TGuildGetLevelRankRsp::TGuildGetLevelRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGetLevelRankRsp)
}

void TGuildGetLevelRankRsp::InitAsDefaultInstance() {
}

TGuildGetLevelRankRsp::TGuildGetLevelRankRsp(const TGuildGetLevelRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGetLevelRankRsp)
}

void TGuildGetLevelRankRsp::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGetLevelRankRsp::~TGuildGetLevelRankRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildGetLevelRankRsp)
  SharedDtor();
}

void TGuildGetLevelRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildGetLevelRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGetLevelRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGetLevelRankRsp_descriptor_;
}

const TGuildGetLevelRankRsp& TGuildGetLevelRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildGetLevelRankRsp* TGuildGetLevelRankRsp::default_instance_ = NULL;

TGuildGetLevelRankRsp* TGuildGetLevelRankRsp::New() const {
  return new TGuildGetLevelRankRsp;
}

void TGuildGetLevelRankRsp::Clear() {
  myrank_ = 0;
  rankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGetLevelRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGetLevelRankRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildLevelRankInfo RankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RankArr;
        if (input->ExpectTag(16)) goto parse_MyRank;
        break;
      }

      // optional int32 MyRank = 2;
      case 2: {
        if (tag == 16) {
         parse_MyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGetLevelRankRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGetLevelRankRsp)
  return false;
#undef DO_
}

void TGuildGetLevelRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGetLevelRankRsp)
  // repeated .pb.TGuildLevelRankInfo RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankarr(i), output);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->myrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGetLevelRankRsp)
}

::google::protobuf::uint8* TGuildGetLevelRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGetLevelRankRsp)
  // repeated .pb.TGuildLevelRankInfo RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankarr(i), target);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->myrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGetLevelRankRsp)
  return target;
}

int TGuildGetLevelRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 MyRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }

  }
  // repeated .pb.TGuildLevelRankInfo RankArr = 1;
  total_size += 1 * this->rankarr_size();
  for (int i = 0; i < this->rankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGetLevelRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGetLevelRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGetLevelRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGetLevelRankRsp::MergeFrom(const TGuildGetLevelRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankarr_.MergeFrom(from.rankarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGetLevelRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGetLevelRankRsp::CopyFrom(const TGuildGetLevelRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGetLevelRankRsp::IsInitialized() const {

  return true;
}

void TGuildGetLevelRankRsp::Swap(TGuildGetLevelRankRsp* other) {
  if (other != this) {
    rankarr_.Swap(&other->rankarr_);
    std::swap(myrank_, other->myrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGetLevelRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGetLevelRankRsp_descriptor_;
  metadata.reflection = TGuildGetLevelRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildFightForceRankInfo::kGuildIdFieldNumber;
const int TGuildFightForceRankInfo::kGuildNameFieldNumber;
const int TGuildFightForceRankInfo::kFightForceFieldNumber;
const int TGuildFightForceRankInfo::kBannerNameFieldNumber;
const int TGuildFightForceRankInfo::kBannerBaseFieldNumber;
const int TGuildFightForceRankInfo::kHtidFieldNumber;
#endif  // !_MSC_VER

TGuildFightForceRankInfo::TGuildFightForceRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildFightForceRankInfo)
}

void TGuildFightForceRankInfo::InitAsDefaultInstance() {
}

TGuildFightForceRankInfo::TGuildFightForceRankInfo(const TGuildFightForceRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildFightForceRankInfo)
}

void TGuildFightForceRankInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fightforce_ = GOOGLE_ULONGLONG(0);
  bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bannerbase_ = 0u;
  htid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildFightForceRankInfo::~TGuildFightForceRankInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildFightForceRankInfo)
  SharedDtor();
}

void TGuildFightForceRankInfo::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (this != default_instance_) {
  }
}

void TGuildFightForceRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildFightForceRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildFightForceRankInfo_descriptor_;
}

const TGuildFightForceRankInfo& TGuildFightForceRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildFightForceRankInfo* TGuildFightForceRankInfo::default_instance_ = NULL;

TGuildFightForceRankInfo* TGuildFightForceRankInfo::New() const {
  return new TGuildFightForceRankInfo;
}

void TGuildFightForceRankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildFightForceRankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(bannerbase_, htid_);
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
    fightforce_ = GOOGLE_ULONGLONG(0);
    if (has_bannername()) {
      if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bannername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildFightForceRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildFightForceRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 GuildId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GuildName;
        break;
      }

      // optional string GuildName = 2;
      case 2: {
        if (tag == 18) {
         parse_GuildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 3;
      case 3: {
        if (tag == 24) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BannerName;
        break;
      }

      // optional string BannerName = 4;
      case 4: {
        if (tag == 34) {
         parse_BannerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bannername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bannername().data(), this->bannername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bannername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BannerBase;
        break;
      }

      // optional uint32 BannerBase = 5;
      case 5: {
        if (tag == 40) {
         parse_BannerBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bannerbase_)));
          set_has_bannerbase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Htid;
        break;
      }

      // optional uint32 Htid = 6;
      case 6: {
        if (tag == 48) {
         parse_Htid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildFightForceRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildFightForceRankInfo)
  return false;
#undef DO_
}

void TGuildFightForceRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildFightForceRankInfo)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // optional string GuildName = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guildname(), output);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fightforce(), output);
  }

  // optional string BannerName = 4;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->bannername(), output);
  }

  // optional uint32 BannerBase = 5;
  if (has_bannerbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bannerbase(), output);
  }

  // optional uint32 Htid = 6;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->htid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildFightForceRankInfo)
}

::google::protobuf::uint8* TGuildFightForceRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildFightForceRankInfo)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // optional string GuildName = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guildname(), target);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fightforce(), target);
  }

  // optional string BannerName = 4;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bannername(), target);
  }

  // optional uint32 BannerBase = 5;
  if (has_bannerbase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bannerbase(), target);
  }

  // optional uint32 Htid = 6;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->htid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildFightForceRankInfo)
  return target;
}

int TGuildFightForceRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 GuildId = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string GuildName = 2;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional uint64 FightForce = 3;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

    // optional string BannerName = 4;
    if (has_bannername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bannername());
    }

    // optional uint32 BannerBase = 5;
    if (has_bannerbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bannerbase());
    }

    // optional uint32 Htid = 6;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildFightForceRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildFightForceRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildFightForceRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildFightForceRankInfo::MergeFrom(const TGuildFightForceRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
    if (from.has_bannername()) {
      set_bannername(from.bannername());
    }
    if (from.has_bannerbase()) {
      set_bannerbase(from.bannerbase());
    }
    if (from.has_htid()) {
      set_htid(from.htid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildFightForceRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildFightForceRankInfo::CopyFrom(const TGuildFightForceRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildFightForceRankInfo::IsInitialized() const {

  return true;
}

void TGuildFightForceRankInfo::Swap(TGuildFightForceRankInfo* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(bannername_, other->bannername_);
    std::swap(bannerbase_, other->bannerbase_);
    std::swap(htid_, other->htid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildFightForceRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildFightForceRankInfo_descriptor_;
  metadata.reflection = TGuildFightForceRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGetFightForceRankReq::kOffsetFieldNumber;
const int TGuildGetFightForceRankReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TGuildGetFightForceRankReq::TGuildGetFightForceRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGetFightForceRankReq)
}

void TGuildGetFightForceRankReq::InitAsDefaultInstance() {
}

TGuildGetFightForceRankReq::TGuildGetFightForceRankReq(const TGuildGetFightForceRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGetFightForceRankReq)
}

void TGuildGetFightForceRankReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGetFightForceRankReq::~TGuildGetFightForceRankReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildGetFightForceRankReq)
  SharedDtor();
}

void TGuildGetFightForceRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildGetFightForceRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGetFightForceRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGetFightForceRankReq_descriptor_;
}

const TGuildGetFightForceRankReq& TGuildGetFightForceRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildGetFightForceRankReq* TGuildGetFightForceRankReq::default_instance_ = NULL;

TGuildGetFightForceRankReq* TGuildGetFightForceRankReq::New() const {
  return new TGuildGetFightForceRankReq;
}

void TGuildGetFightForceRankReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildGetFightForceRankReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGetFightForceRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGetFightForceRankReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGetFightForceRankReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGetFightForceRankReq)
  return false;
#undef DO_
}

void TGuildGetFightForceRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGetFightForceRankReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGetFightForceRankReq)
}

::google::protobuf::uint8* TGuildGetFightForceRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGetFightForceRankReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGetFightForceRankReq)
  return target;
}

int TGuildGetFightForceRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGetFightForceRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGetFightForceRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGetFightForceRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGetFightForceRankReq::MergeFrom(const TGuildGetFightForceRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGetFightForceRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGetFightForceRankReq::CopyFrom(const TGuildGetFightForceRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGetFightForceRankReq::IsInitialized() const {

  return true;
}

void TGuildGetFightForceRankReq::Swap(TGuildGetFightForceRankReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGetFightForceRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGetFightForceRankReq_descriptor_;
  metadata.reflection = TGuildGetFightForceRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGetFightForceRankRsp::kRankArrFieldNumber;
const int TGuildGetFightForceRankRsp::kMyRankFieldNumber;
#endif  // !_MSC_VER

TGuildGetFightForceRankRsp::TGuildGetFightForceRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGetFightForceRankRsp)
}

void TGuildGetFightForceRankRsp::InitAsDefaultInstance() {
}

TGuildGetFightForceRankRsp::TGuildGetFightForceRankRsp(const TGuildGetFightForceRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGetFightForceRankRsp)
}

void TGuildGetFightForceRankRsp::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGetFightForceRankRsp::~TGuildGetFightForceRankRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildGetFightForceRankRsp)
  SharedDtor();
}

void TGuildGetFightForceRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildGetFightForceRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGetFightForceRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGetFightForceRankRsp_descriptor_;
}

const TGuildGetFightForceRankRsp& TGuildGetFightForceRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildGetFightForceRankRsp* TGuildGetFightForceRankRsp::default_instance_ = NULL;

TGuildGetFightForceRankRsp* TGuildGetFightForceRankRsp::New() const {
  return new TGuildGetFightForceRankRsp;
}

void TGuildGetFightForceRankRsp::Clear() {
  myrank_ = 0;
  rankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGetFightForceRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGetFightForceRankRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildFightForceRankInfo RankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RankArr;
        if (input->ExpectTag(16)) goto parse_MyRank;
        break;
      }

      // optional int32 MyRank = 2;
      case 2: {
        if (tag == 16) {
         parse_MyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGetFightForceRankRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGetFightForceRankRsp)
  return false;
#undef DO_
}

void TGuildGetFightForceRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGetFightForceRankRsp)
  // repeated .pb.TGuildFightForceRankInfo RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankarr(i), output);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->myrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGetFightForceRankRsp)
}

::google::protobuf::uint8* TGuildGetFightForceRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGetFightForceRankRsp)
  // repeated .pb.TGuildFightForceRankInfo RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankarr(i), target);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->myrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGetFightForceRankRsp)
  return target;
}

int TGuildGetFightForceRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 MyRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }

  }
  // repeated .pb.TGuildFightForceRankInfo RankArr = 1;
  total_size += 1 * this->rankarr_size();
  for (int i = 0; i < this->rankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGetFightForceRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGetFightForceRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGetFightForceRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGetFightForceRankRsp::MergeFrom(const TGuildGetFightForceRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankarr_.MergeFrom(from.rankarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGetFightForceRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGetFightForceRankRsp::CopyFrom(const TGuildGetFightForceRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGetFightForceRankRsp::IsInitialized() const {

  return true;
}

void TGuildGetFightForceRankRsp::Swap(TGuildGetFightForceRankRsp* other) {
  if (other != this) {
    rankarr_.Swap(&other->rankarr_);
    std::swap(myrank_, other->myrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGetFightForceRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGetFightForceRankRsp_descriptor_;
  metadata.reflection = TGuildGetFightForceRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildTreasMapFixReq::kFixNumFieldNumber;
#endif  // !_MSC_VER

TGuildTreasMapFixReq::TGuildTreasMapFixReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildTreasMapFixReq)
}

void TGuildTreasMapFixReq::InitAsDefaultInstance() {
}

TGuildTreasMapFixReq::TGuildTreasMapFixReq(const TGuildTreasMapFixReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildTreasMapFixReq)
}

void TGuildTreasMapFixReq::SharedCtor() {
  _cached_size_ = 0;
  fixnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildTreasMapFixReq::~TGuildTreasMapFixReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildTreasMapFixReq)
  SharedDtor();
}

void TGuildTreasMapFixReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildTreasMapFixReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildTreasMapFixReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildTreasMapFixReq_descriptor_;
}

const TGuildTreasMapFixReq& TGuildTreasMapFixReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildTreasMapFixReq* TGuildTreasMapFixReq::default_instance_ = NULL;

TGuildTreasMapFixReq* TGuildTreasMapFixReq::New() const {
  return new TGuildTreasMapFixReq;
}

void TGuildTreasMapFixReq::Clear() {
  fixnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildTreasMapFixReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildTreasMapFixReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FixNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fixnum_)));
          set_has_fixnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildTreasMapFixReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildTreasMapFixReq)
  return false;
#undef DO_
}

void TGuildTreasMapFixReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildTreasMapFixReq)
  // optional uint32 FixNum = 1;
  if (has_fixnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fixnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildTreasMapFixReq)
}

::google::protobuf::uint8* TGuildTreasMapFixReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildTreasMapFixReq)
  // optional uint32 FixNum = 1;
  if (has_fixnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fixnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildTreasMapFixReq)
  return target;
}

int TGuildTreasMapFixReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FixNum = 1;
    if (has_fixnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fixnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildTreasMapFixReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildTreasMapFixReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildTreasMapFixReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildTreasMapFixReq::MergeFrom(const TGuildTreasMapFixReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fixnum()) {
      set_fixnum(from.fixnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildTreasMapFixReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildTreasMapFixReq::CopyFrom(const TGuildTreasMapFixReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildTreasMapFixReq::IsInitialized() const {

  return true;
}

void TGuildTreasMapFixReq::Swap(TGuildTreasMapFixReq* other) {
  if (other != this) {
    std::swap(fixnum_, other->fixnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildTreasMapFixReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildTreasMapFixReq_descriptor_;
  metadata.reflection = TGuildTreasMapFixReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildTreasMapFixRsp::kFixInfoFieldNumber;
const int TGuildTreasMapFixRsp::kRetFieldNumber;
#endif  // !_MSC_VER

TGuildTreasMapFixRsp::TGuildTreasMapFixRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildTreasMapFixRsp)
}

void TGuildTreasMapFixRsp::InitAsDefaultInstance() {
  fixinfo_ = const_cast< ::pb::TGuildTreasMapFix*>(&::pb::TGuildTreasMapFix::default_instance());
}

TGuildTreasMapFixRsp::TGuildTreasMapFixRsp(const TGuildTreasMapFixRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildTreasMapFixRsp)
}

void TGuildTreasMapFixRsp::SharedCtor() {
  _cached_size_ = 0;
  fixinfo_ = NULL;
  ret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildTreasMapFixRsp::~TGuildTreasMapFixRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildTreasMapFixRsp)
  SharedDtor();
}

void TGuildTreasMapFixRsp::SharedDtor() {
  if (this != default_instance_) {
    delete fixinfo_;
  }
}

void TGuildTreasMapFixRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildTreasMapFixRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildTreasMapFixRsp_descriptor_;
}

const TGuildTreasMapFixRsp& TGuildTreasMapFixRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildTreasMapFixRsp* TGuildTreasMapFixRsp::default_instance_ = NULL;

TGuildTreasMapFixRsp* TGuildTreasMapFixRsp::New() const {
  return new TGuildTreasMapFixRsp;
}

void TGuildTreasMapFixRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_fixinfo()) {
      if (fixinfo_ != NULL) fixinfo_->::pb::TGuildTreasMapFix::Clear();
    }
    ret_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildTreasMapFixRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildTreasMapFixRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TGuildTreasMapFix fixInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildTreasMapFixRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildTreasMapFixRsp)
  return false;
#undef DO_
}

void TGuildTreasMapFixRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildTreasMapFixRsp)
  // optional .pb.TGuildTreasMapFix fixInfo = 1;
  if (has_fixinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fixinfo(), output);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildTreasMapFixRsp)
}

::google::protobuf::uint8* TGuildTreasMapFixRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildTreasMapFixRsp)
  // optional .pb.TGuildTreasMapFix fixInfo = 1;
  if (has_fixinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fixinfo(), target);
  }

  // optional uint32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildTreasMapFixRsp)
  return target;
}

int TGuildTreasMapFixRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TGuildTreasMapFix fixInfo = 1;
    if (has_fixinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fixinfo());
    }

    // optional uint32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildTreasMapFixRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildTreasMapFixRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildTreasMapFixRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildTreasMapFixRsp::MergeFrom(const TGuildTreasMapFixRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fixinfo()) {
      mutable_fixinfo()->::pb::TGuildTreasMapFix::MergeFrom(from.fixinfo());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildTreasMapFixRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildTreasMapFixRsp::CopyFrom(const TGuildTreasMapFixRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildTreasMapFixRsp::IsInitialized() const {

  return true;
}

void TGuildTreasMapFixRsp::Swap(TGuildTreasMapFixRsp* other) {
  if (other != this) {
    std::swap(fixinfo_, other->fixinfo_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildTreasMapFixRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildTreasMapFixRsp_descriptor_;
  metadata.reflection = TGuildTreasMapFixRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildTreasMapFixRewardRsp::kFixInfoFieldNumber;
const int TGuildTreasMapFixRewardRsp::kRewardArrayFieldNumber;
#endif  // !_MSC_VER

TGuildTreasMapFixRewardRsp::TGuildTreasMapFixRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildTreasMapFixRewardRsp)
}

void TGuildTreasMapFixRewardRsp::InitAsDefaultInstance() {
  fixinfo_ = const_cast< ::pb::TGuildTreasMapFix*>(&::pb::TGuildTreasMapFix::default_instance());
}

TGuildTreasMapFixRewardRsp::TGuildTreasMapFixRewardRsp(const TGuildTreasMapFixRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildTreasMapFixRewardRsp)
}

void TGuildTreasMapFixRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  fixinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildTreasMapFixRewardRsp::~TGuildTreasMapFixRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildTreasMapFixRewardRsp)
  SharedDtor();
}

void TGuildTreasMapFixRewardRsp::SharedDtor() {
  if (this != default_instance_) {
    delete fixinfo_;
  }
}

void TGuildTreasMapFixRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildTreasMapFixRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildTreasMapFixRewardRsp_descriptor_;
}

const TGuildTreasMapFixRewardRsp& TGuildTreasMapFixRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildTreasMapFixRewardRsp* TGuildTreasMapFixRewardRsp::default_instance_ = NULL;

TGuildTreasMapFixRewardRsp* TGuildTreasMapFixRewardRsp::New() const {
  return new TGuildTreasMapFixRewardRsp;
}

void TGuildTreasMapFixRewardRsp::Clear() {
  if (has_fixinfo()) {
    if (fixinfo_ != NULL) fixinfo_->::pb::TGuildTreasMapFix::Clear();
  }
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildTreasMapFixRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildTreasMapFixRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TGuildTreasMapFix fixInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArray;
        break;
      }

      // repeated .pb.TCommonReward RewardArray = 2;
      case 2: {
        if (tag == 18) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildTreasMapFixRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildTreasMapFixRewardRsp)
  return false;
#undef DO_
}

void TGuildTreasMapFixRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildTreasMapFixRewardRsp)
  // optional .pb.TGuildTreasMapFix fixInfo = 1;
  if (has_fixinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fixinfo(), output);
  }

  // repeated .pb.TCommonReward RewardArray = 2;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildTreasMapFixRewardRsp)
}

::google::protobuf::uint8* TGuildTreasMapFixRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildTreasMapFixRewardRsp)
  // optional .pb.TGuildTreasMapFix fixInfo = 1;
  if (has_fixinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fixinfo(), target);
  }

  // repeated .pb.TCommonReward RewardArray = 2;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildTreasMapFixRewardRsp)
  return target;
}

int TGuildTreasMapFixRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TGuildTreasMapFix fixInfo = 1;
    if (has_fixinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fixinfo());
    }

  }
  // repeated .pb.TCommonReward RewardArray = 2;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildTreasMapFixRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildTreasMapFixRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildTreasMapFixRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildTreasMapFixRewardRsp::MergeFrom(const TGuildTreasMapFixRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fixinfo()) {
      mutable_fixinfo()->::pb::TGuildTreasMapFix::MergeFrom(from.fixinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildTreasMapFixRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildTreasMapFixRewardRsp::CopyFrom(const TGuildTreasMapFixRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildTreasMapFixRewardRsp::IsInitialized() const {

  return true;
}

void TGuildTreasMapFixRewardRsp::Swap(TGuildTreasMapFixRewardRsp* other) {
  if (other != this) {
    std::swap(fixinfo_, other->fixinfo_);
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildTreasMapFixRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildTreasMapFixRewardRsp_descriptor_;
  metadata.reflection = TGuildTreasMapFixRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgGuildSyncMember::kUidFieldNumber;
const int TSlgGuildSyncMember::kPostFieldNumber;
#endif  // !_MSC_VER

TSlgGuildSyncMember::TSlgGuildSyncMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgGuildSyncMember)
}

void TSlgGuildSyncMember::InitAsDefaultInstance() {
}

TSlgGuildSyncMember::TSlgGuildSyncMember(const TSlgGuildSyncMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgGuildSyncMember)
}

void TSlgGuildSyncMember::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  post_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgGuildSyncMember::~TSlgGuildSyncMember() {
  // @@protoc_insertion_point(destructor:pb.TSlgGuildSyncMember)
  SharedDtor();
}

void TSlgGuildSyncMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgGuildSyncMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgGuildSyncMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgGuildSyncMember_descriptor_;
}

const TSlgGuildSyncMember& TSlgGuildSyncMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TSlgGuildSyncMember* TSlgGuildSyncMember::default_instance_ = NULL;

TSlgGuildSyncMember* TSlgGuildSyncMember::New() const {
  return new TSlgGuildSyncMember;
}

void TSlgGuildSyncMember::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSlgGuildSyncMember*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, post_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgGuildSyncMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgGuildSyncMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Post;
        break;
      }

      // optional .pb.EGuildPost Post = 2;
      case 2: {
        if (tag == 16) {
         parse_Post:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EGuildPost_IsValid(value)) {
            set_post(static_cast< ::pb::EGuildPost >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgGuildSyncMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgGuildSyncMember)
  return false;
#undef DO_
}

void TSlgGuildSyncMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgGuildSyncMember)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional .pb.EGuildPost Post = 2;
  if (has_post()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->post(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgGuildSyncMember)
}

::google::protobuf::uint8* TSlgGuildSyncMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgGuildSyncMember)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional .pb.EGuildPost Post = 2;
  if (has_post()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->post(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgGuildSyncMember)
  return target;
}

int TSlgGuildSyncMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional .pb.EGuildPost Post = 2;
    if (has_post()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->post());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgGuildSyncMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgGuildSyncMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgGuildSyncMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgGuildSyncMember::MergeFrom(const TSlgGuildSyncMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_post()) {
      set_post(from.post());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgGuildSyncMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgGuildSyncMember::CopyFrom(const TSlgGuildSyncMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgGuildSyncMember::IsInitialized() const {

  return true;
}

void TSlgGuildSyncMember::Swap(TSlgGuildSyncMember* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(post_, other->post_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgGuildSyncMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgGuildSyncMember_descriptor_;
  metadata.reflection = TSlgGuildSyncMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGetSyncInfoReq::kGuildIdFieldNumber;
#endif  // !_MSC_VER

TGuildGetSyncInfoReq::TGuildGetSyncInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGetSyncInfoReq)
}

void TGuildGetSyncInfoReq::InitAsDefaultInstance() {
}

TGuildGetSyncInfoReq::TGuildGetSyncInfoReq(const TGuildGetSyncInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGetSyncInfoReq)
}

void TGuildGetSyncInfoReq::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGetSyncInfoReq::~TGuildGetSyncInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildGetSyncInfoReq)
  SharedDtor();
}

void TGuildGetSyncInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildGetSyncInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGetSyncInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGetSyncInfoReq_descriptor_;
}

const TGuildGetSyncInfoReq& TGuildGetSyncInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildGetSyncInfoReq* TGuildGetSyncInfoReq::default_instance_ = NULL;

TGuildGetSyncInfoReq* TGuildGetSyncInfoReq::New() const {
  return new TGuildGetSyncInfoReq;
}

void TGuildGetSyncInfoReq::Clear() {
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGetSyncInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGetSyncInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 GuildId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGetSyncInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGetSyncInfoReq)
  return false;
#undef DO_
}

void TGuildGetSyncInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGetSyncInfoReq)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGetSyncInfoReq)
}

::google::protobuf::uint8* TGuildGetSyncInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGetSyncInfoReq)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGetSyncInfoReq)
  return target;
}

int TGuildGetSyncInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 GuildId = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGetSyncInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGetSyncInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGetSyncInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGetSyncInfoReq::MergeFrom(const TGuildGetSyncInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGetSyncInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGetSyncInfoReq::CopyFrom(const TGuildGetSyncInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGetSyncInfoReq::IsInitialized() const {

  return true;
}

void TGuildGetSyncInfoReq::Swap(TGuildGetSyncInfoReq* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGetSyncInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGetSyncInfoReq_descriptor_;
  metadata.reflection = TGuildGetSyncInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGetSyncInfoRsp::kMemberArrFieldNumber;
#endif  // !_MSC_VER

TGuildGetSyncInfoRsp::TGuildGetSyncInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGetSyncInfoRsp)
}

void TGuildGetSyncInfoRsp::InitAsDefaultInstance() {
}

TGuildGetSyncInfoRsp::TGuildGetSyncInfoRsp(const TGuildGetSyncInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGetSyncInfoRsp)
}

void TGuildGetSyncInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGetSyncInfoRsp::~TGuildGetSyncInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildGetSyncInfoRsp)
  SharedDtor();
}

void TGuildGetSyncInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildGetSyncInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGetSyncInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGetSyncInfoRsp_descriptor_;
}

const TGuildGetSyncInfoRsp& TGuildGetSyncInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildGetSyncInfoRsp* TGuildGetSyncInfoRsp::default_instance_ = NULL;

TGuildGetSyncInfoRsp* TGuildGetSyncInfoRsp::New() const {
  return new TGuildGetSyncInfoRsp;
}

void TGuildGetSyncInfoRsp::Clear() {
  memberarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGetSyncInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGetSyncInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TSlgGuildSyncMember MemberArr = 1;
      case 1: {
        if (tag == 10) {
         parse_MemberArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_MemberArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGetSyncInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGetSyncInfoRsp)
  return false;
#undef DO_
}

void TGuildGetSyncInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGetSyncInfoRsp)
  // repeated .pb.TSlgGuildSyncMember MemberArr = 1;
  for (int i = 0; i < this->memberarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->memberarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGetSyncInfoRsp)
}

::google::protobuf::uint8* TGuildGetSyncInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGetSyncInfoRsp)
  // repeated .pb.TSlgGuildSyncMember MemberArr = 1;
  for (int i = 0; i < this->memberarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->memberarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGetSyncInfoRsp)
  return target;
}

int TGuildGetSyncInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TSlgGuildSyncMember MemberArr = 1;
  total_size += 1 * this->memberarr_size();
  for (int i = 0; i < this->memberarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memberarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGetSyncInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGetSyncInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGetSyncInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGetSyncInfoRsp::MergeFrom(const TGuildGetSyncInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberarr_.MergeFrom(from.memberarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGetSyncInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGetSyncInfoRsp::CopyFrom(const TGuildGetSyncInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGetSyncInfoRsp::IsInitialized() const {

  return true;
}

void TGuildGetSyncInfoRsp::Swap(TGuildGetSyncInfoRsp* other) {
  if (other != this) {
    memberarr_.Swap(&other->memberarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGetSyncInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGetSyncInfoRsp_descriptor_;
  metadata.reflection = TGuildGetSyncInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildChangeGnameReq::kGnameFieldNumber;
#endif  // !_MSC_VER

TGuildChangeGnameReq::TGuildChangeGnameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildChangeGnameReq)
}

void TGuildChangeGnameReq::InitAsDefaultInstance() {
}

TGuildChangeGnameReq::TGuildChangeGnameReq(const TGuildChangeGnameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildChangeGnameReq)
}

void TGuildChangeGnameReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildChangeGnameReq::~TGuildChangeGnameReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildChangeGnameReq)
  SharedDtor();
}

void TGuildChangeGnameReq::SharedDtor() {
  if (gname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gname_;
  }
  if (this != default_instance_) {
  }
}

void TGuildChangeGnameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildChangeGnameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildChangeGnameReq_descriptor_;
}

const TGuildChangeGnameReq& TGuildChangeGnameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuild_2eproto();
  return *default_instance_;
}

TGuildChangeGnameReq* TGuildChangeGnameReq::default_instance_ = NULL;

TGuildChangeGnameReq* TGuildChangeGnameReq::New() const {
  return new TGuildChangeGnameReq;
}

void TGuildChangeGnameReq::Clear() {
  if (has_gname()) {
    if (gname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      gname_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildChangeGnameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildChangeGnameReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Gname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gname().data(), this->gname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildChangeGnameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildChangeGnameReq)
  return false;
#undef DO_
}

void TGuildChangeGnameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildChangeGnameReq)
  // optional string Gname = 1;
  if (has_gname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gname().data(), this->gname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildChangeGnameReq)
}

::google::protobuf::uint8* TGuildChangeGnameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildChangeGnameReq)
  // optional string Gname = 1;
  if (has_gname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gname().data(), this->gname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildChangeGnameReq)
  return target;
}

int TGuildChangeGnameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Gname = 1;
    if (has_gname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildChangeGnameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildChangeGnameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildChangeGnameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildChangeGnameReq::MergeFrom(const TGuildChangeGnameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gname()) {
      set_gname(from.gname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildChangeGnameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildChangeGnameReq::CopyFrom(const TGuildChangeGnameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildChangeGnameReq::IsInitialized() const {

  return true;
}

void TGuildChangeGnameReq::Swap(TGuildChangeGnameReq* other) {
  if (other != this) {
    std::swap(gname_, other->gname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildChangeGnameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildChangeGnameReq_descriptor_;
  metadata.reflection = TGuildChangeGnameReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
