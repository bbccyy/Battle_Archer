// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/AdventureNotify.proto

#ifndef PROTOBUF_net_2fAdventureNotify_2eproto__INCLUDED
#define PROTOBUF_net_2fAdventureNotify_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/AdventureBase.pb.h"
#include "net/AdventureTeam.pb.h"
#include "module/AdventureMap.pb.h"
#include "net/User.pb.h"
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fAdventureNotify_2eproto();
void protobuf_AssignDesc_net_2fAdventureNotify_2eproto();
void protobuf_ShutdownFile_net_2fAdventureNotify_2eproto();

class TAdventureUserStatusChangeNotify;
class TAdventureMateAnswerNotify;
class TAdventureAnswerEndNotify;
class TAdventurePassBlockNotify;
class TAdventureTeamChangeNotify;
class TAdventureEventStatusChangeNotify;
class TAdventureTeamRecordNotify;
class TAdventurePosNotify;
class TAdventureAddMapRewardNotify;
class TAdventureMysteryDoorOpenNotify;
class TAdventureAddObjectNotify;
class TAdventureCalledNotify;
class TAdventureRecvCompleteRewardNotify;
class TAdventureMonsterHpNotify;
class TAdventureQuitTeamMapNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TAdventureUserStatusChangeNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureNotify.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureUserStatusChangeNotify : public ::google::protobuf::Message {
 public:
  TAdventureUserStatusChangeNotify();
  virtual ~TAdventureUserStatusChangeNotify();

  TAdventureUserStatusChangeNotify(const TAdventureUserStatusChangeNotify& from);

  inline TAdventureUserStatusChangeNotify& operator=(const TAdventureUserStatusChangeNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureUserStatusChangeNotify& default_instance();

  void Swap(TAdventureUserStatusChangeNotify* other);

  // implements Message ----------------------------------------------

  TAdventureUserStatusChangeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureUserStatusChangeNotify& from);
  void MergeFrom(const TAdventureUserStatusChangeNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 UserId = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureUserStatusChangeNotify</name>
  	<Function>
  		<name>userid</name>
  		<replaceName>UserId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userid</name>
  		<replaceName>UserId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userid</name>
  		<replaceName>UserId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // optional .pb.EMapUserStatus UserStatus = 2;
  inline bool has_userstatus() const;
  inline void clear_userstatus();
  static const int kUserStatusFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureUserStatusChangeNotify</name>
  	<Function>
  		<name>userstatus</name>
  		<replaceName>UserStatus</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userstatus</name>
  		<replaceName>UserStatus</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userstatus</name>
  		<replaceName>UserStatus</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EMapUserStatus userstatus() const;
  inline void set_userstatus(::pb::EMapUserStatus value);

  // optional int32 BattleObjectIndex = 3;
  inline bool has_battleobjectindex() const;
  inline void clear_battleobjectindex();
  static const int kBattleObjectIndexFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureUserStatusChangeNotify</name>
  	<Function>
  		<name>battleobjectindex</name>
  		<replaceName>BattleObjectIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleobjectindex</name>
  		<replaceName>BattleObjectIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleobjectindex</name>
  		<replaceName>BattleObjectIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 battleobjectindex() const;
  inline void set_battleobjectindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureUserStatusChangeNotify)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_userstatus();
  inline void clear_has_userstatus();
  inline void set_has_battleobjectindex();
  inline void clear_has_battleobjectindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 userid_;
  int userstatus_;
  ::google::protobuf::int32 battleobjectindex_;
  friend void  protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureNotify_2eproto();

  void InitAsDefaultInstance();
  static TAdventureUserStatusChangeNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureMateAnswerNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureNotify.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureMateAnswerNotify : public ::google::protobuf::Message {
 public:
  TAdventureMateAnswerNotify();
  virtual ~TAdventureMateAnswerNotify();

  TAdventureMateAnswerNotify(const TAdventureMateAnswerNotify& from);

  inline TAdventureMateAnswerNotify& operator=(const TAdventureMateAnswerNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureMateAnswerNotify& default_instance();

  void Swap(TAdventureMateAnswerNotify* other);

  // implements Message ----------------------------------------------

  TAdventureMateAnswerNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureMateAnswerNotify& from);
  void MergeFrom(const TAdventureMateAnswerNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LayerIndex = 1;
  inline bool has_layerindex() const;
  inline void clear_layerindex();
  static const int kLayerIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureMateAnswerNotify</name>
  	<Function>
  		<name>layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerindex() const;
  inline void set_layerindex(::google::protobuf::uint32 value);

  // optional int32 X = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureMateAnswerNotify</name>
  	<Function>
  		<name>x</name>
  		<replaceName>X</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_x</name>
  		<replaceName>X</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_x</name>
  		<replaceName>X</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 Y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureMateAnswerNotify</name>
  	<Function>
  		<name>y</name>
  		<replaceName>Y</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_y</name>
  		<replaceName>Y</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_y</name>
  		<replaceName>Y</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // optional uint32 ChoseIndex = 4;
  inline bool has_choseindex() const;
  inline void clear_choseindex();
  static const int kChoseIndexFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureMateAnswerNotify</name>
  	<Function>
  		<name>choseindex</name>
  		<replaceName>ChoseIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_choseindex</name>
  		<replaceName>ChoseIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_choseindex</name>
  		<replaceName>ChoseIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 choseindex() const;
  inline void set_choseindex(::google::protobuf::uint32 value);

  // optional uint64 MateUid = 5;
  inline bool has_mateuid() const;
  inline void clear_mateuid();
  static const int kMateUidFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAdventureMateAnswerNotify</name>
  	<Function>
  		<name>mateuid</name>
  		<replaceName>MateUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mateuid</name>
  		<replaceName>MateUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mateuid</name>
  		<replaceName>MateUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 mateuid() const;
  inline void set_mateuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureMateAnswerNotify)
 private:
  inline void set_has_layerindex();
  inline void clear_has_layerindex();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_choseindex();
  inline void clear_has_choseindex();
  inline void set_has_mateuid();
  inline void clear_has_mateuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 layerindex_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::uint32 choseindex_;
  ::google::protobuf::uint64 mateuid_;
  friend void  protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureNotify_2eproto();

  void InitAsDefaultInstance();
  static TAdventureMateAnswerNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureAnswerEndNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureNotify.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureAnswerEndNotify : public ::google::protobuf::Message {
 public:
  TAdventureAnswerEndNotify();
  virtual ~TAdventureAnswerEndNotify();

  TAdventureAnswerEndNotify(const TAdventureAnswerEndNotify& from);

  inline TAdventureAnswerEndNotify& operator=(const TAdventureAnswerEndNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureAnswerEndNotify& default_instance();

  void Swap(TAdventureAnswerEndNotify* other);

  // implements Message ----------------------------------------------

  TAdventureAnswerEndNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureAnswerEndNotify& from);
  void MergeFrom(const TAdventureAnswerEndNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LayerIndex = 1;
  inline bool has_layerindex() const;
  inline void clear_layerindex();
  static const int kLayerIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureAnswerEndNotify</name>
  	<Function>
  		<name>layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerindex() const;
  inline void set_layerindex(::google::protobuf::uint32 value);

  // optional int32 X = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureAnswerEndNotify</name>
  	<Function>
  		<name>x</name>
  		<replaceName>X</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_x</name>
  		<replaceName>X</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_x</name>
  		<replaceName>X</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 Y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureAnswerEndNotify</name>
  	<Function>
  		<name>y</name>
  		<replaceName>Y</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_y</name>
  		<replaceName>Y</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_y</name>
  		<replaceName>Y</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // optional uint32 KeyIndex = 4;
  inline bool has_keyindex() const;
  inline void clear_keyindex();
  static const int kKeyIndexFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureAnswerEndNotify</name>
  	<Function>
  		<name>keyindex</name>
  		<replaceName>KeyIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_keyindex</name>
  		<replaceName>KeyIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_keyindex</name>
  		<replaceName>KeyIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 keyindex() const;
  inline void set_keyindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureAnswerEndNotify)
 private:
  inline void set_has_layerindex();
  inline void clear_has_layerindex();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_keyindex();
  inline void clear_has_keyindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 layerindex_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::uint32 keyindex_;
  friend void  protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureNotify_2eproto();

  void InitAsDefaultInstance();
  static TAdventureAnswerEndNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventurePassBlockNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureNotify.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventurePassBlockNotify : public ::google::protobuf::Message {
 public:
  TAdventurePassBlockNotify();
  virtual ~TAdventurePassBlockNotify();

  TAdventurePassBlockNotify(const TAdventurePassBlockNotify& from);

  inline TAdventurePassBlockNotify& operator=(const TAdventurePassBlockNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventurePassBlockNotify& default_instance();

  void Swap(TAdventurePassBlockNotify* other);

  // implements Message ----------------------------------------------

  TAdventurePassBlockNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventurePassBlockNotify& from);
  void MergeFrom(const TAdventurePassBlockNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TAdventurePassBlock BlockArr = 1;
  inline int blockarr_size() const;
  inline void clear_blockarr();
  static const int kBlockArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventurePassBlockNotify</name>
  	<Function>
  		<name>blockarr</name>
  		<replaceName>BlockArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_blockarr</name>
  		<replaceName>BlockArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_blockarr</name>
  		<replaceName>BlockArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_blockarr</name>
  		<replaceName>BlockArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>blockarr_size</name>
  		<replaceName>BlockArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventurePassBlock& blockarr(int index) const;
  inline ::pb::TAdventurePassBlock* mutable_blockarr(int index);
  inline ::pb::TAdventurePassBlock* add_blockarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventurePassBlock >&
      blockarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventurePassBlock >*
      mutable_blockarr();

  // @@protoc_insertion_point(class_scope:pb.TAdventurePassBlockNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventurePassBlock > blockarr_;
  friend void  protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureNotify_2eproto();

  void InitAsDefaultInstance();
  static TAdventurePassBlockNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTeamChangeNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureNotify.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTeamChangeNotify : public ::google::protobuf::Message {
 public:
  TAdventureTeamChangeNotify();
  virtual ~TAdventureTeamChangeNotify();

  TAdventureTeamChangeNotify(const TAdventureTeamChangeNotify& from);

  inline TAdventureTeamChangeNotify& operator=(const TAdventureTeamChangeNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTeamChangeNotify& default_instance();

  void Swap(TAdventureTeamChangeNotify* other);

  // implements Message ----------------------------------------------

  TAdventureTeamChangeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTeamChangeNotify& from);
  void MergeFrom(const TAdventureTeamChangeNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ETeamChangeType ChangType = 1;
  inline bool has_changtype() const;
  inline void clear_changtype();
  static const int kChangTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTeamChangeNotify</name>
  	<Function>
  		<name>changtype</name>
  		<replaceName>ChangType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_changtype</name>
  		<replaceName>ChangType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_changtype</name>
  		<replaceName>ChangType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ETeamChangeType changtype() const;
  inline void set_changtype(::pb::ETeamChangeType value);

  // optional uint64 TeamId = 2;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTeamChangeNotify</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional .pb.TAdventureUserSimpleInfo UserInfo = 3;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTeamChangeNotify</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureUserSimpleInfo& userinfo() const;
  inline ::pb::TAdventureUserSimpleInfo* mutable_userinfo();
  inline ::pb::TAdventureUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TAdventureUserSimpleInfo* userinfo);

  // repeated uint64 MemberUidArr = 4;
  inline int memberuidarr_size() const;
  inline void clear_memberuidarr();
  static const int kMemberUidArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTeamChangeNotify</name>
  	<Function>
  		<name>memberuidarr</name>
  		<replaceName>MemberUidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_memberuidarr</name>
  		<replaceName>MemberUidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_memberuidarr</name>
  		<replaceName>MemberUidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_memberuidarr</name>
  		<replaceName>MemberUidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>memberuidarr_size</name>
  		<replaceName>MemberUidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 memberuidarr(int index) const;
  inline void set_memberuidarr(int index, ::google::protobuf::uint64 value);
  inline void add_memberuidarr(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      memberuidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_memberuidarr();

  // optional uint64 CurLeader = 5;
  inline bool has_curleader() const;
  inline void clear_curleader();
  static const int kCurLeaderFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTeamChangeNotify</name>
  	<Function>
  		<name>curleader</name>
  		<replaceName>CurLeader</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curleader</name>
  		<replaceName>CurLeader</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curleader</name>
  		<replaceName>CurLeader</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 curleader() const;
  inline void set_curleader(::google::protobuf::uint64 value);

  // optional uint32 AddEnergy = 6;
  inline bool has_addenergy() const;
  inline void clear_addenergy();
  static const int kAddEnergyFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTeamChangeNotify</name>
  	<Function>
  		<name>addenergy</name>
  		<replaceName>AddEnergy</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_addenergy</name>
  		<replaceName>AddEnergy</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_addenergy</name>
  		<replaceName>AddEnergy</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 addenergy() const;
  inline void set_addenergy(::google::protobuf::uint32 value);

  // optional .pb.ETeamMode TeamMode = 7;
  inline bool has_teammode() const;
  inline void clear_teammode();
  static const int kTeamModeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTeamChangeNotify</name>
  	<Function>
  		<name>teammode</name>
  		<replaceName>TeamMode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teammode</name>
  		<replaceName>TeamMode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teammode</name>
  		<replaceName>TeamMode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ETeamMode teammode() const;
  inline void set_teammode(::pb::ETeamMode value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureTeamChangeNotify)
 private:
  inline void set_has_changtype();
  inline void clear_has_changtype();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_curleader();
  inline void clear_has_curleader();
  inline void set_has_addenergy();
  inline void clear_has_addenergy();
  inline void set_has_teammode();
  inline void clear_has_teammode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::pb::TAdventureUserSimpleInfo* userinfo_;
  int changtype_;
  ::google::protobuf::uint32 addenergy_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > memberuidarr_;
  ::google::protobuf::uint64 curleader_;
  int teammode_;
  friend void  protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureNotify_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTeamChangeNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureEventStatusChangeNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureNotify.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureEventStatusChangeNotify : public ::google::protobuf::Message {
 public:
  TAdventureEventStatusChangeNotify();
  virtual ~TAdventureEventStatusChangeNotify();

  TAdventureEventStatusChangeNotify(const TAdventureEventStatusChangeNotify& from);

  inline TAdventureEventStatusChangeNotify& operator=(const TAdventureEventStatusChangeNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureEventStatusChangeNotify& default_instance();

  void Swap(TAdventureEventStatusChangeNotify* other);

  // implements Message ----------------------------------------------

  TAdventureEventStatusChangeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureEventStatusChangeNotify& from);
  void MergeFrom(const TAdventureEventStatusChangeNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 MateUid = 1;
  inline bool has_mateuid() const;
  inline void clear_mateuid();
  static const int kMateUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEventStatusChangeNotify</name>
  	<Function>
  		<name>mateuid</name>
  		<replaceName>MateUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mateuid</name>
  		<replaceName>MateUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mateuid</name>
  		<replaceName>MateUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 mateuid() const;
  inline void set_mateuid(::google::protobuf::uint64 value);

  // optional uint32 LayerIndex = 2;
  inline bool has_layerindex() const;
  inline void clear_layerindex();
  static const int kLayerIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEventStatusChangeNotify</name>
  	<Function>
  		<name>layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerindex() const;
  inline void set_layerindex(::google::protobuf::uint32 value);

  // optional int32 ObjectPosX = 3;
  inline bool has_objectposx() const;
  inline void clear_objectposx();
  static const int kObjectPosXFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEventStatusChangeNotify</name>
  	<Function>
  		<name>objectposx</name>
  		<replaceName>ObjectPosX</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_objectposx</name>
  		<replaceName>ObjectPosX</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_objectposx</name>
  		<replaceName>ObjectPosX</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 objectposx() const;
  inline void set_objectposx(::google::protobuf::int32 value);

  // optional int32 ObjectPosY = 4;
  inline bool has_objectposy() const;
  inline void clear_objectposy();
  static const int kObjectPosYFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEventStatusChangeNotify</name>
  	<Function>
  		<name>objectposy</name>
  		<replaceName>ObjectPosY</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_objectposy</name>
  		<replaceName>ObjectPosY</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_objectposy</name>
  		<replaceName>ObjectPosY</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 objectposy() const;
  inline void set_objectposy(::google::protobuf::int32 value);

  // optional .pb.AdventureEvent EventInfo = 5;
  inline bool has_eventinfo() const;
  inline void clear_eventinfo();
  static const int kEventInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEventStatusChangeNotify</name>
  	<Function>
  		<name>eventinfo</name>
  		<replaceName>EventInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_eventinfo</name>
  		<replaceName>EventInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_eventinfo</name>
  		<replaceName>EventInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eventinfo</name>
  		<replaceName>EventInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::AdventureEvent& eventinfo() const;
  inline ::pb::AdventureEvent* mutable_eventinfo();
  inline ::pb::AdventureEvent* release_eventinfo();
  inline void set_allocated_eventinfo(::pb::AdventureEvent* eventinfo);

  // @@protoc_insertion_point(class_scope:pb.TAdventureEventStatusChangeNotify)
 private:
  inline void set_has_mateuid();
  inline void clear_has_mateuid();
  inline void set_has_layerindex();
  inline void clear_has_layerindex();
  inline void set_has_objectposx();
  inline void clear_has_objectposx();
  inline void set_has_objectposy();
  inline void clear_has_objectposy();
  inline void set_has_eventinfo();
  inline void clear_has_eventinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 mateuid_;
  ::google::protobuf::uint32 layerindex_;
  ::google::protobuf::int32 objectposx_;
  ::pb::AdventureEvent* eventinfo_;
  ::google::protobuf::int32 objectposy_;
  friend void  protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureNotify_2eproto();

  void InitAsDefaultInstance();
  static TAdventureEventStatusChangeNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTeamRecordNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureNotify.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTeamRecordNotify : public ::google::protobuf::Message {
 public:
  TAdventureTeamRecordNotify();
  virtual ~TAdventureTeamRecordNotify();

  TAdventureTeamRecordNotify(const TAdventureTeamRecordNotify& from);

  inline TAdventureTeamRecordNotify& operator=(const TAdventureTeamRecordNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTeamRecordNotify& default_instance();

  void Swap(TAdventureTeamRecordNotify* other);

  // implements Message ----------------------------------------------

  TAdventureTeamRecordNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTeamRecordNotify& from);
  void MergeFrom(const TAdventureTeamRecordNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TAdventureTeamRecord RecordArr = 1;
  inline int recordarr_size() const;
  inline void clear_recordarr();
  static const int kRecordArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTeamRecordNotify</name>
  	<Function>
  		<name>recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordarr_size</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureTeamRecord& recordarr(int index) const;
  inline ::pb::TAdventureTeamRecord* mutable_recordarr(int index);
  inline ::pb::TAdventureTeamRecord* add_recordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTeamRecord >&
      recordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTeamRecord >*
      mutable_recordarr();

  // @@protoc_insertion_point(class_scope:pb.TAdventureTeamRecordNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTeamRecord > recordarr_;
  friend void  protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureNotify_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTeamRecordNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventurePosNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureNotify.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventurePosNotify : public ::google::protobuf::Message {
 public:
  TAdventurePosNotify();
  virtual ~TAdventurePosNotify();

  TAdventurePosNotify(const TAdventurePosNotify& from);

  inline TAdventurePosNotify& operator=(const TAdventurePosNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventurePosNotify& default_instance();

  void Swap(TAdventurePosNotify* other);

  // implements Message ----------------------------------------------

  TAdventurePosNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventurePosNotify& from);
  void MergeFrom(const TAdventurePosNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EAdventurePosChangeType PosChangeType = 1;
  inline bool has_poschangetype() const;
  inline void clear_poschangetype();
  static const int kPosChangeTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventurePosNotify</name>
  	<Function>
  		<name>poschangetype</name>
  		<replaceName>PosChangeType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_poschangetype</name>
  		<replaceName>PosChangeType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_poschangetype</name>
  		<replaceName>PosChangeType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAdventurePosChangeType poschangetype() const;
  inline void set_poschangetype(::pb::EAdventurePosChangeType value);

  // optional uint64 MateUid = 2;
  inline bool has_mateuid() const;
  inline void clear_mateuid();
  static const int kMateUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventurePosNotify</name>
  	<Function>
  		<name>mateuid</name>
  		<replaceName>MateUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mateuid</name>
  		<replaceName>MateUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mateuid</name>
  		<replaceName>MateUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 mateuid() const;
  inline void set_mateuid(::google::protobuf::uint64 value);

  // optional uint32 LayerIndex = 3;
  inline bool has_layerindex() const;
  inline void clear_layerindex();
  static const int kLayerIndexFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventurePosNotify</name>
  	<Function>
  		<name>layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerindex() const;
  inline void set_layerindex(::google::protobuf::uint32 value);

  // optional int32 PosX = 4;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventurePosNotify</name>
  	<Function>
  		<name>posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posx() const;
  inline void set_posx(::google::protobuf::int32 value);

  // optional int32 PosY = 5;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAdventurePosNotify</name>
  	<Function>
  		<name>posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posy() const;
  inline void set_posy(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventurePosNotify)
 private:
  inline void set_has_poschangetype();
  inline void clear_has_poschangetype();
  inline void set_has_mateuid();
  inline void clear_has_mateuid();
  inline void set_has_layerindex();
  inline void clear_has_layerindex();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 mateuid_;
  int poschangetype_;
  ::google::protobuf::uint32 layerindex_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  friend void  protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureNotify_2eproto();

  void InitAsDefaultInstance();
  static TAdventurePosNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureAddMapRewardNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureNotify.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureAddMapRewardNotify : public ::google::protobuf::Message {
 public:
  TAdventureAddMapRewardNotify();
  virtual ~TAdventureAddMapRewardNotify();

  TAdventureAddMapRewardNotify(const TAdventureAddMapRewardNotify& from);

  inline TAdventureAddMapRewardNotify& operator=(const TAdventureAddMapRewardNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureAddMapRewardNotify& default_instance();

  void Swap(TAdventureAddMapRewardNotify* other);

  // implements Message ----------------------------------------------

  TAdventureAddMapRewardNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureAddMapRewardNotify& from);
  void MergeFrom(const TAdventureAddMapRewardNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArray = 1;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureAddMapRewardNotify</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // optional uint64 RewardUid = 2;
  inline bool has_rewarduid() const;
  inline void clear_rewarduid();
  static const int kRewardUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureAddMapRewardNotify</name>
  	<Function>
  		<name>rewarduid</name>
  		<replaceName>RewardUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewarduid</name>
  		<replaceName>RewardUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewarduid</name>
  		<replaceName>RewardUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rewarduid() const;
  inline void set_rewarduid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureAddMapRewardNotify)
 private:
  inline void set_has_rewarduid();
  inline void clear_has_rewarduid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  ::google::protobuf::uint64 rewarduid_;
  friend void  protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureNotify_2eproto();

  void InitAsDefaultInstance();
  static TAdventureAddMapRewardNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureMysteryDoorOpenNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureNotify.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureMysteryDoorOpenNotify : public ::google::protobuf::Message {
 public:
  TAdventureMysteryDoorOpenNotify();
  virtual ~TAdventureMysteryDoorOpenNotify();

  TAdventureMysteryDoorOpenNotify(const TAdventureMysteryDoorOpenNotify& from);

  inline TAdventureMysteryDoorOpenNotify& operator=(const TAdventureMysteryDoorOpenNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureMysteryDoorOpenNotify& default_instance();

  void Swap(TAdventureMysteryDoorOpenNotify* other);

  // implements Message ----------------------------------------------

  TAdventureMysteryDoorOpenNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureMysteryDoorOpenNotify& from);
  void MergeFrom(const TAdventureMysteryDoorOpenNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LayerIndex = 1;
  inline bool has_layerindex() const;
  inline void clear_layerindex();
  static const int kLayerIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureMysteryDoorOpenNotify</name>
  	<Function>
  		<name>layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerindex() const;
  inline void set_layerindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureMysteryDoorOpenNotify)
 private:
  inline void set_has_layerindex();
  inline void clear_has_layerindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 layerindex_;
  friend void  protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureNotify_2eproto();

  void InitAsDefaultInstance();
  static TAdventureMysteryDoorOpenNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureAddObjectNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureNotify.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureAddObjectNotify : public ::google::protobuf::Message {
 public:
  TAdventureAddObjectNotify();
  virtual ~TAdventureAddObjectNotify();

  TAdventureAddObjectNotify(const TAdventureAddObjectNotify& from);

  inline TAdventureAddObjectNotify& operator=(const TAdventureAddObjectNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureAddObjectNotify& default_instance();

  void Swap(TAdventureAddObjectNotify* other);

  // implements Message ----------------------------------------------

  TAdventureAddObjectNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureAddObjectNotify& from);
  void MergeFrom(const TAdventureAddObjectNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LayerIndex = 1;
  inline bool has_layerindex() const;
  inline void clear_layerindex();
  static const int kLayerIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureAddObjectNotify</name>
  	<Function>
  		<name>layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerindex() const;
  inline void set_layerindex(::google::protobuf::uint32 value);

  // optional int32 CenterPosX = 2;
  inline bool has_centerposx() const;
  inline void clear_centerposx();
  static const int kCenterPosXFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureAddObjectNotify</name>
  	<Function>
  		<name>centerposx</name>
  		<replaceName>CenterPosX</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_centerposx</name>
  		<replaceName>CenterPosX</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_centerposx</name>
  		<replaceName>CenterPosX</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 centerposx() const;
  inline void set_centerposx(::google::protobuf::int32 value);

  // optional int32 CenterPosY = 3;
  inline bool has_centerposy() const;
  inline void clear_centerposy();
  static const int kCenterPosYFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureAddObjectNotify</name>
  	<Function>
  		<name>centerposy</name>
  		<replaceName>CenterPosY</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_centerposy</name>
  		<replaceName>CenterPosY</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_centerposy</name>
  		<replaceName>CenterPosY</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 centerposy() const;
  inline void set_centerposy(::google::protobuf::int32 value);

  // repeated .pb.AdventureObject ObjectArray = 4;
  inline int objectarray_size() const;
  inline void clear_objectarray();
  static const int kObjectArrayFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureAddObjectNotify</name>
  	<Function>
  		<name>objectarray</name>
  		<replaceName>ObjectArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_objectarray</name>
  		<replaceName>ObjectArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_objectarray</name>
  		<replaceName>ObjectArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_objectarray</name>
  		<replaceName>ObjectArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>objectarray_size</name>
  		<replaceName>ObjectArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::AdventureObject& objectarray(int index) const;
  inline ::pb::AdventureObject* mutable_objectarray(int index);
  inline ::pb::AdventureObject* add_objectarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::AdventureObject >&
      objectarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::AdventureObject >*
      mutable_objectarray();

  // @@protoc_insertion_point(class_scope:pb.TAdventureAddObjectNotify)
 private:
  inline void set_has_layerindex();
  inline void clear_has_layerindex();
  inline void set_has_centerposx();
  inline void clear_has_centerposx();
  inline void set_has_centerposy();
  inline void clear_has_centerposy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 layerindex_;
  ::google::protobuf::int32 centerposx_;
  ::google::protobuf::RepeatedPtrField< ::pb::AdventureObject > objectarray_;
  ::google::protobuf::int32 centerposy_;
  friend void  protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureNotify_2eproto();

  void InitAsDefaultInstance();
  static TAdventureAddObjectNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureCalledNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureNotify.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureCalledNotify : public ::google::protobuf::Message {
 public:
  TAdventureCalledNotify();
  virtual ~TAdventureCalledNotify();

  TAdventureCalledNotify(const TAdventureCalledNotify& from);

  inline TAdventureCalledNotify& operator=(const TAdventureCalledNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureCalledNotify& default_instance();

  void Swap(TAdventureCalledNotify* other);

  // implements Message ----------------------------------------------

  TAdventureCalledNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureCalledNotify& from);
  void MergeFrom(const TAdventureCalledNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureCalledNotify</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint64 MateUid = 2;
  inline bool has_mateuid() const;
  inline void clear_mateuid();
  static const int kMateUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureCalledNotify</name>
  	<Function>
  		<name>mateuid</name>
  		<replaceName>MateUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mateuid</name>
  		<replaceName>MateUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mateuid</name>
  		<replaceName>MateUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 mateuid() const;
  inline void set_mateuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureCalledNotify)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_mateuid();
  inline void clear_has_mateuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint64 mateuid_;
  friend void  protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureNotify_2eproto();

  void InitAsDefaultInstance();
  static TAdventureCalledNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureRecvCompleteRewardNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureNotify.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureRecvCompleteRewardNotify : public ::google::protobuf::Message {
 public:
  TAdventureRecvCompleteRewardNotify();
  virtual ~TAdventureRecvCompleteRewardNotify();

  TAdventureRecvCompleteRewardNotify(const TAdventureRecvCompleteRewardNotify& from);

  inline TAdventureRecvCompleteRewardNotify& operator=(const TAdventureRecvCompleteRewardNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureRecvCompleteRewardNotify& default_instance();

  void Swap(TAdventureRecvCompleteRewardNotify* other);

  // implements Message ----------------------------------------------

  TAdventureRecvCompleteRewardNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureRecvCompleteRewardNotify& from);
  void MergeFrom(const TAdventureRecvCompleteRewardNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RecvUid = 1;
  inline bool has_recvuid() const;
  inline void clear_recvuid();
  static const int kRecvUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureRecvCompleteRewardNotify</name>
  	<Function>
  		<name>recvuid</name>
  		<replaceName>RecvUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recvuid</name>
  		<replaceName>RecvUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recvuid</name>
  		<replaceName>RecvUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recvuid() const;
  inline void set_recvuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureRecvCompleteRewardNotify)
 private:
  inline void set_has_recvuid();
  inline void clear_has_recvuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 recvuid_;
  friend void  protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureNotify_2eproto();

  void InitAsDefaultInstance();
  static TAdventureRecvCompleteRewardNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureMonsterHpNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureNotify.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureMonsterHpNotify : public ::google::protobuf::Message {
 public:
  TAdventureMonsterHpNotify();
  virtual ~TAdventureMonsterHpNotify();

  TAdventureMonsterHpNotify(const TAdventureMonsterHpNotify& from);

  inline TAdventureMonsterHpNotify& operator=(const TAdventureMonsterHpNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureMonsterHpNotify& default_instance();

  void Swap(TAdventureMonsterHpNotify* other);

  // implements Message ----------------------------------------------

  TAdventureMonsterHpNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureMonsterHpNotify& from);
  void MergeFrom(const TAdventureMonsterHpNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TAdventureMonsterInfo MonsterInfo = 1;
  inline bool has_monsterinfo() const;
  inline void clear_monsterinfo();
  static const int kMonsterInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureMonsterHpNotify</name>
  	<Function>
  		<name>monsterinfo</name>
  		<replaceName>MonsterInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_monsterinfo</name>
  		<replaceName>MonsterInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_monsterinfo</name>
  		<replaceName>MonsterInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterinfo</name>
  		<replaceName>MonsterInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureMonsterInfo& monsterinfo() const;
  inline ::pb::TAdventureMonsterInfo* mutable_monsterinfo();
  inline ::pb::TAdventureMonsterInfo* release_monsterinfo();
  inline void set_allocated_monsterinfo(::pb::TAdventureMonsterInfo* monsterinfo);

  // @@protoc_insertion_point(class_scope:pb.TAdventureMonsterHpNotify)
 private:
  inline void set_has_monsterinfo();
  inline void clear_has_monsterinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAdventureMonsterInfo* monsterinfo_;
  friend void  protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureNotify_2eproto();

  void InitAsDefaultInstance();
  static TAdventureMonsterHpNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureQuitTeamMapNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureNotify.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureQuitTeamMapNotify : public ::google::protobuf::Message {
 public:
  TAdventureQuitTeamMapNotify();
  virtual ~TAdventureQuitTeamMapNotify();

  TAdventureQuitTeamMapNotify(const TAdventureQuitTeamMapNotify& from);

  inline TAdventureQuitTeamMapNotify& operator=(const TAdventureQuitTeamMapNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureQuitTeamMapNotify& default_instance();

  void Swap(TAdventureQuitTeamMapNotify* other);

  // implements Message ----------------------------------------------

  TAdventureQuitTeamMapNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureQuitTeamMapNotify& from);
  void MergeFrom(const TAdventureQuitTeamMapNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureQuitTeamMapNotify</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureQuitTeamMapNotify)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  friend void  protobuf_AddDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureNotify_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureNotify_2eproto();

  void InitAsDefaultInstance();
  static TAdventureQuitTeamMapNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TAdventureUserStatusChangeNotify

// optional uint64 UserId = 1;
inline bool TAdventureUserStatusChangeNotify::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureUserStatusChangeNotify::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureUserStatusChangeNotify::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureUserStatusChangeNotify::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 TAdventureUserStatusChangeNotify::userid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureUserStatusChangeNotify.UserId)
  return userid_;
}
inline void TAdventureUserStatusChangeNotify::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureUserStatusChangeNotify.UserId)
}

// optional .pb.EMapUserStatus UserStatus = 2;
inline bool TAdventureUserStatusChangeNotify::has_userstatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureUserStatusChangeNotify::set_has_userstatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureUserStatusChangeNotify::clear_has_userstatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureUserStatusChangeNotify::clear_userstatus() {
  userstatus_ = 2;
  clear_has_userstatus();
}
inline ::pb::EMapUserStatus TAdventureUserStatusChangeNotify::userstatus() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureUserStatusChangeNotify.UserStatus)
  return static_cast< ::pb::EMapUserStatus >(userstatus_);
}
inline void TAdventureUserStatusChangeNotify::set_userstatus(::pb::EMapUserStatus value) {
  assert(::pb::EMapUserStatus_IsValid(value));
  set_has_userstatus();
  userstatus_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureUserStatusChangeNotify.UserStatus)
}

// optional int32 BattleObjectIndex = 3;
inline bool TAdventureUserStatusChangeNotify::has_battleobjectindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureUserStatusChangeNotify::set_has_battleobjectindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureUserStatusChangeNotify::clear_has_battleobjectindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureUserStatusChangeNotify::clear_battleobjectindex() {
  battleobjectindex_ = 0;
  clear_has_battleobjectindex();
}
inline ::google::protobuf::int32 TAdventureUserStatusChangeNotify::battleobjectindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureUserStatusChangeNotify.BattleObjectIndex)
  return battleobjectindex_;
}
inline void TAdventureUserStatusChangeNotify::set_battleobjectindex(::google::protobuf::int32 value) {
  set_has_battleobjectindex();
  battleobjectindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureUserStatusChangeNotify.BattleObjectIndex)
}

// -------------------------------------------------------------------

// TAdventureMateAnswerNotify

// optional uint32 LayerIndex = 1;
inline bool TAdventureMateAnswerNotify::has_layerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureMateAnswerNotify::set_has_layerindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureMateAnswerNotify::clear_has_layerindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureMateAnswerNotify::clear_layerindex() {
  layerindex_ = 0u;
  clear_has_layerindex();
}
inline ::google::protobuf::uint32 TAdventureMateAnswerNotify::layerindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureMateAnswerNotify.LayerIndex)
  return layerindex_;
}
inline void TAdventureMateAnswerNotify::set_layerindex(::google::protobuf::uint32 value) {
  set_has_layerindex();
  layerindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureMateAnswerNotify.LayerIndex)
}

// optional int32 X = 2;
inline bool TAdventureMateAnswerNotify::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureMateAnswerNotify::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureMateAnswerNotify::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureMateAnswerNotify::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 TAdventureMateAnswerNotify::x() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureMateAnswerNotify.X)
  return x_;
}
inline void TAdventureMateAnswerNotify::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureMateAnswerNotify.X)
}

// optional int32 Y = 3;
inline bool TAdventureMateAnswerNotify::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureMateAnswerNotify::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureMateAnswerNotify::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureMateAnswerNotify::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 TAdventureMateAnswerNotify::y() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureMateAnswerNotify.Y)
  return y_;
}
inline void TAdventureMateAnswerNotify::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureMateAnswerNotify.Y)
}

// optional uint32 ChoseIndex = 4;
inline bool TAdventureMateAnswerNotify::has_choseindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventureMateAnswerNotify::set_has_choseindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventureMateAnswerNotify::clear_has_choseindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventureMateAnswerNotify::clear_choseindex() {
  choseindex_ = 0u;
  clear_has_choseindex();
}
inline ::google::protobuf::uint32 TAdventureMateAnswerNotify::choseindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureMateAnswerNotify.ChoseIndex)
  return choseindex_;
}
inline void TAdventureMateAnswerNotify::set_choseindex(::google::protobuf::uint32 value) {
  set_has_choseindex();
  choseindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureMateAnswerNotify.ChoseIndex)
}

// optional uint64 MateUid = 5;
inline bool TAdventureMateAnswerNotify::has_mateuid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TAdventureMateAnswerNotify::set_has_mateuid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TAdventureMateAnswerNotify::clear_has_mateuid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TAdventureMateAnswerNotify::clear_mateuid() {
  mateuid_ = GOOGLE_ULONGLONG(0);
  clear_has_mateuid();
}
inline ::google::protobuf::uint64 TAdventureMateAnswerNotify::mateuid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureMateAnswerNotify.MateUid)
  return mateuid_;
}
inline void TAdventureMateAnswerNotify::set_mateuid(::google::protobuf::uint64 value) {
  set_has_mateuid();
  mateuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureMateAnswerNotify.MateUid)
}

// -------------------------------------------------------------------

// TAdventureAnswerEndNotify

// optional uint32 LayerIndex = 1;
inline bool TAdventureAnswerEndNotify::has_layerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureAnswerEndNotify::set_has_layerindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureAnswerEndNotify::clear_has_layerindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureAnswerEndNotify::clear_layerindex() {
  layerindex_ = 0u;
  clear_has_layerindex();
}
inline ::google::protobuf::uint32 TAdventureAnswerEndNotify::layerindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureAnswerEndNotify.LayerIndex)
  return layerindex_;
}
inline void TAdventureAnswerEndNotify::set_layerindex(::google::protobuf::uint32 value) {
  set_has_layerindex();
  layerindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureAnswerEndNotify.LayerIndex)
}

// optional int32 X = 2;
inline bool TAdventureAnswerEndNotify::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureAnswerEndNotify::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureAnswerEndNotify::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureAnswerEndNotify::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 TAdventureAnswerEndNotify::x() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureAnswerEndNotify.X)
  return x_;
}
inline void TAdventureAnswerEndNotify::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureAnswerEndNotify.X)
}

// optional int32 Y = 3;
inline bool TAdventureAnswerEndNotify::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureAnswerEndNotify::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureAnswerEndNotify::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureAnswerEndNotify::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 TAdventureAnswerEndNotify::y() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureAnswerEndNotify.Y)
  return y_;
}
inline void TAdventureAnswerEndNotify::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureAnswerEndNotify.Y)
}

// optional uint32 KeyIndex = 4;
inline bool TAdventureAnswerEndNotify::has_keyindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventureAnswerEndNotify::set_has_keyindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventureAnswerEndNotify::clear_has_keyindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventureAnswerEndNotify::clear_keyindex() {
  keyindex_ = 0u;
  clear_has_keyindex();
}
inline ::google::protobuf::uint32 TAdventureAnswerEndNotify::keyindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureAnswerEndNotify.KeyIndex)
  return keyindex_;
}
inline void TAdventureAnswerEndNotify::set_keyindex(::google::protobuf::uint32 value) {
  set_has_keyindex();
  keyindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureAnswerEndNotify.KeyIndex)
}

// -------------------------------------------------------------------

// TAdventurePassBlockNotify

// repeated .pb.TAdventurePassBlock BlockArr = 1;
inline int TAdventurePassBlockNotify::blockarr_size() const {
  return blockarr_.size();
}
inline void TAdventurePassBlockNotify::clear_blockarr() {
  blockarr_.Clear();
}
inline const ::pb::TAdventurePassBlock& TAdventurePassBlockNotify::blockarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventurePassBlockNotify.BlockArr)
  return blockarr_.Get(index);
}
inline ::pb::TAdventurePassBlock* TAdventurePassBlockNotify::mutable_blockarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventurePassBlockNotify.BlockArr)
  return blockarr_.Mutable(index);
}
inline ::pb::TAdventurePassBlock* TAdventurePassBlockNotify::add_blockarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventurePassBlockNotify.BlockArr)
  return blockarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventurePassBlock >&
TAdventurePassBlockNotify::blockarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventurePassBlockNotify.BlockArr)
  return blockarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventurePassBlock >*
TAdventurePassBlockNotify::mutable_blockarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventurePassBlockNotify.BlockArr)
  return &blockarr_;
}

// -------------------------------------------------------------------

// TAdventureTeamChangeNotify

// optional .pb.ETeamChangeType ChangType = 1;
inline bool TAdventureTeamChangeNotify::has_changtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTeamChangeNotify::set_has_changtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTeamChangeNotify::clear_has_changtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTeamChangeNotify::clear_changtype() {
  changtype_ = 1;
  clear_has_changtype();
}
inline ::pb::ETeamChangeType TAdventureTeamChangeNotify::changtype() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTeamChangeNotify.ChangType)
  return static_cast< ::pb::ETeamChangeType >(changtype_);
}
inline void TAdventureTeamChangeNotify::set_changtype(::pb::ETeamChangeType value) {
  assert(::pb::ETeamChangeType_IsValid(value));
  set_has_changtype();
  changtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTeamChangeNotify.ChangType)
}

// optional uint64 TeamId = 2;
inline bool TAdventureTeamChangeNotify::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureTeamChangeNotify::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureTeamChangeNotify::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureTeamChangeNotify::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TAdventureTeamChangeNotify::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTeamChangeNotify.TeamId)
  return teamid_;
}
inline void TAdventureTeamChangeNotify::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTeamChangeNotify.TeamId)
}

// optional .pb.TAdventureUserSimpleInfo UserInfo = 3;
inline bool TAdventureTeamChangeNotify::has_userinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureTeamChangeNotify::set_has_userinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureTeamChangeNotify::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureTeamChangeNotify::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TAdventureUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TAdventureUserSimpleInfo& TAdventureTeamChangeNotify::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTeamChangeNotify.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TAdventureUserSimpleInfo* TAdventureTeamChangeNotify::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TAdventureUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTeamChangeNotify.UserInfo)
  return userinfo_;
}
inline ::pb::TAdventureUserSimpleInfo* TAdventureTeamChangeNotify::release_userinfo() {
  clear_has_userinfo();
  ::pb::TAdventureUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TAdventureTeamChangeNotify::set_allocated_userinfo(::pb::TAdventureUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureTeamChangeNotify.UserInfo)
}

// repeated uint64 MemberUidArr = 4;
inline int TAdventureTeamChangeNotify::memberuidarr_size() const {
  return memberuidarr_.size();
}
inline void TAdventureTeamChangeNotify::clear_memberuidarr() {
  memberuidarr_.Clear();
}
inline ::google::protobuf::uint64 TAdventureTeamChangeNotify::memberuidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTeamChangeNotify.MemberUidArr)
  return memberuidarr_.Get(index);
}
inline void TAdventureTeamChangeNotify::set_memberuidarr(int index, ::google::protobuf::uint64 value) {
  memberuidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TAdventureTeamChangeNotify.MemberUidArr)
}
inline void TAdventureTeamChangeNotify::add_memberuidarr(::google::protobuf::uint64 value) {
  memberuidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TAdventureTeamChangeNotify.MemberUidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TAdventureTeamChangeNotify::memberuidarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTeamChangeNotify.MemberUidArr)
  return memberuidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TAdventureTeamChangeNotify::mutable_memberuidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTeamChangeNotify.MemberUidArr)
  return &memberuidarr_;
}

// optional uint64 CurLeader = 5;
inline bool TAdventureTeamChangeNotify::has_curleader() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TAdventureTeamChangeNotify::set_has_curleader() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TAdventureTeamChangeNotify::clear_has_curleader() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TAdventureTeamChangeNotify::clear_curleader() {
  curleader_ = GOOGLE_ULONGLONG(0);
  clear_has_curleader();
}
inline ::google::protobuf::uint64 TAdventureTeamChangeNotify::curleader() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTeamChangeNotify.CurLeader)
  return curleader_;
}
inline void TAdventureTeamChangeNotify::set_curleader(::google::protobuf::uint64 value) {
  set_has_curleader();
  curleader_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTeamChangeNotify.CurLeader)
}

// optional uint32 AddEnergy = 6;
inline bool TAdventureTeamChangeNotify::has_addenergy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TAdventureTeamChangeNotify::set_has_addenergy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TAdventureTeamChangeNotify::clear_has_addenergy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TAdventureTeamChangeNotify::clear_addenergy() {
  addenergy_ = 0u;
  clear_has_addenergy();
}
inline ::google::protobuf::uint32 TAdventureTeamChangeNotify::addenergy() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTeamChangeNotify.AddEnergy)
  return addenergy_;
}
inline void TAdventureTeamChangeNotify::set_addenergy(::google::protobuf::uint32 value) {
  set_has_addenergy();
  addenergy_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTeamChangeNotify.AddEnergy)
}

// optional .pb.ETeamMode TeamMode = 7;
inline bool TAdventureTeamChangeNotify::has_teammode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TAdventureTeamChangeNotify::set_has_teammode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TAdventureTeamChangeNotify::clear_has_teammode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TAdventureTeamChangeNotify::clear_teammode() {
  teammode_ = 0;
  clear_has_teammode();
}
inline ::pb::ETeamMode TAdventureTeamChangeNotify::teammode() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTeamChangeNotify.TeamMode)
  return static_cast< ::pb::ETeamMode >(teammode_);
}
inline void TAdventureTeamChangeNotify::set_teammode(::pb::ETeamMode value) {
  assert(::pb::ETeamMode_IsValid(value));
  set_has_teammode();
  teammode_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTeamChangeNotify.TeamMode)
}

// -------------------------------------------------------------------

// TAdventureEventStatusChangeNotify

// optional uint64 MateUid = 1;
inline bool TAdventureEventStatusChangeNotify::has_mateuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureEventStatusChangeNotify::set_has_mateuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureEventStatusChangeNotify::clear_has_mateuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureEventStatusChangeNotify::clear_mateuid() {
  mateuid_ = GOOGLE_ULONGLONG(0);
  clear_has_mateuid();
}
inline ::google::protobuf::uint64 TAdventureEventStatusChangeNotify::mateuid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEventStatusChangeNotify.MateUid)
  return mateuid_;
}
inline void TAdventureEventStatusChangeNotify::set_mateuid(::google::protobuf::uint64 value) {
  set_has_mateuid();
  mateuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEventStatusChangeNotify.MateUid)
}

// optional uint32 LayerIndex = 2;
inline bool TAdventureEventStatusChangeNotify::has_layerindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureEventStatusChangeNotify::set_has_layerindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureEventStatusChangeNotify::clear_has_layerindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureEventStatusChangeNotify::clear_layerindex() {
  layerindex_ = 0u;
  clear_has_layerindex();
}
inline ::google::protobuf::uint32 TAdventureEventStatusChangeNotify::layerindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEventStatusChangeNotify.LayerIndex)
  return layerindex_;
}
inline void TAdventureEventStatusChangeNotify::set_layerindex(::google::protobuf::uint32 value) {
  set_has_layerindex();
  layerindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEventStatusChangeNotify.LayerIndex)
}

// optional int32 ObjectPosX = 3;
inline bool TAdventureEventStatusChangeNotify::has_objectposx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureEventStatusChangeNotify::set_has_objectposx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureEventStatusChangeNotify::clear_has_objectposx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureEventStatusChangeNotify::clear_objectposx() {
  objectposx_ = 0;
  clear_has_objectposx();
}
inline ::google::protobuf::int32 TAdventureEventStatusChangeNotify::objectposx() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEventStatusChangeNotify.ObjectPosX)
  return objectposx_;
}
inline void TAdventureEventStatusChangeNotify::set_objectposx(::google::protobuf::int32 value) {
  set_has_objectposx();
  objectposx_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEventStatusChangeNotify.ObjectPosX)
}

// optional int32 ObjectPosY = 4;
inline bool TAdventureEventStatusChangeNotify::has_objectposy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventureEventStatusChangeNotify::set_has_objectposy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventureEventStatusChangeNotify::clear_has_objectposy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventureEventStatusChangeNotify::clear_objectposy() {
  objectposy_ = 0;
  clear_has_objectposy();
}
inline ::google::protobuf::int32 TAdventureEventStatusChangeNotify::objectposy() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEventStatusChangeNotify.ObjectPosY)
  return objectposy_;
}
inline void TAdventureEventStatusChangeNotify::set_objectposy(::google::protobuf::int32 value) {
  set_has_objectposy();
  objectposy_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEventStatusChangeNotify.ObjectPosY)
}

// optional .pb.AdventureEvent EventInfo = 5;
inline bool TAdventureEventStatusChangeNotify::has_eventinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TAdventureEventStatusChangeNotify::set_has_eventinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TAdventureEventStatusChangeNotify::clear_has_eventinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TAdventureEventStatusChangeNotify::clear_eventinfo() {
  if (eventinfo_ != NULL) eventinfo_->::pb::AdventureEvent::Clear();
  clear_has_eventinfo();
}
inline const ::pb::AdventureEvent& TAdventureEventStatusChangeNotify::eventinfo() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEventStatusChangeNotify.EventInfo)
  return eventinfo_ != NULL ? *eventinfo_ : *default_instance_->eventinfo_;
}
inline ::pb::AdventureEvent* TAdventureEventStatusChangeNotify::mutable_eventinfo() {
  set_has_eventinfo();
  if (eventinfo_ == NULL) eventinfo_ = new ::pb::AdventureEvent;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureEventStatusChangeNotify.EventInfo)
  return eventinfo_;
}
inline ::pb::AdventureEvent* TAdventureEventStatusChangeNotify::release_eventinfo() {
  clear_has_eventinfo();
  ::pb::AdventureEvent* temp = eventinfo_;
  eventinfo_ = NULL;
  return temp;
}
inline void TAdventureEventStatusChangeNotify::set_allocated_eventinfo(::pb::AdventureEvent* eventinfo) {
  delete eventinfo_;
  eventinfo_ = eventinfo;
  if (eventinfo) {
    set_has_eventinfo();
  } else {
    clear_has_eventinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureEventStatusChangeNotify.EventInfo)
}

// -------------------------------------------------------------------

// TAdventureTeamRecordNotify

// repeated .pb.TAdventureTeamRecord RecordArr = 1;
inline int TAdventureTeamRecordNotify::recordarr_size() const {
  return recordarr_.size();
}
inline void TAdventureTeamRecordNotify::clear_recordarr() {
  recordarr_.Clear();
}
inline const ::pb::TAdventureTeamRecord& TAdventureTeamRecordNotify::recordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTeamRecordNotify.RecordArr)
  return recordarr_.Get(index);
}
inline ::pb::TAdventureTeamRecord* TAdventureTeamRecordNotify::mutable_recordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTeamRecordNotify.RecordArr)
  return recordarr_.Mutable(index);
}
inline ::pb::TAdventureTeamRecord* TAdventureTeamRecordNotify::add_recordarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureTeamRecordNotify.RecordArr)
  return recordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTeamRecord >&
TAdventureTeamRecordNotify::recordarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTeamRecordNotify.RecordArr)
  return recordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureTeamRecord >*
TAdventureTeamRecordNotify::mutable_recordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTeamRecordNotify.RecordArr)
  return &recordarr_;
}

// -------------------------------------------------------------------

// TAdventurePosNotify

// optional .pb.EAdventurePosChangeType PosChangeType = 1;
inline bool TAdventurePosNotify::has_poschangetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventurePosNotify::set_has_poschangetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventurePosNotify::clear_has_poschangetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventurePosNotify::clear_poschangetype() {
  poschangetype_ = 1;
  clear_has_poschangetype();
}
inline ::pb::EAdventurePosChangeType TAdventurePosNotify::poschangetype() const {
  // @@protoc_insertion_point(field_get:pb.TAdventurePosNotify.PosChangeType)
  return static_cast< ::pb::EAdventurePosChangeType >(poschangetype_);
}
inline void TAdventurePosNotify::set_poschangetype(::pb::EAdventurePosChangeType value) {
  assert(::pb::EAdventurePosChangeType_IsValid(value));
  set_has_poschangetype();
  poschangetype_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventurePosNotify.PosChangeType)
}

// optional uint64 MateUid = 2;
inline bool TAdventurePosNotify::has_mateuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventurePosNotify::set_has_mateuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventurePosNotify::clear_has_mateuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventurePosNotify::clear_mateuid() {
  mateuid_ = GOOGLE_ULONGLONG(0);
  clear_has_mateuid();
}
inline ::google::protobuf::uint64 TAdventurePosNotify::mateuid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventurePosNotify.MateUid)
  return mateuid_;
}
inline void TAdventurePosNotify::set_mateuid(::google::protobuf::uint64 value) {
  set_has_mateuid();
  mateuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventurePosNotify.MateUid)
}

// optional uint32 LayerIndex = 3;
inline bool TAdventurePosNotify::has_layerindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventurePosNotify::set_has_layerindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventurePosNotify::clear_has_layerindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventurePosNotify::clear_layerindex() {
  layerindex_ = 0u;
  clear_has_layerindex();
}
inline ::google::protobuf::uint32 TAdventurePosNotify::layerindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventurePosNotify.LayerIndex)
  return layerindex_;
}
inline void TAdventurePosNotify::set_layerindex(::google::protobuf::uint32 value) {
  set_has_layerindex();
  layerindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventurePosNotify.LayerIndex)
}

// optional int32 PosX = 4;
inline bool TAdventurePosNotify::has_posx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventurePosNotify::set_has_posx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventurePosNotify::clear_has_posx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventurePosNotify::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 TAdventurePosNotify::posx() const {
  // @@protoc_insertion_point(field_get:pb.TAdventurePosNotify.PosX)
  return posx_;
}
inline void TAdventurePosNotify::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventurePosNotify.PosX)
}

// optional int32 PosY = 5;
inline bool TAdventurePosNotify::has_posy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TAdventurePosNotify::set_has_posy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TAdventurePosNotify::clear_has_posy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TAdventurePosNotify::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 TAdventurePosNotify::posy() const {
  // @@protoc_insertion_point(field_get:pb.TAdventurePosNotify.PosY)
  return posy_;
}
inline void TAdventurePosNotify::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventurePosNotify.PosY)
}

// -------------------------------------------------------------------

// TAdventureAddMapRewardNotify

// repeated .pb.TCommonReward RewardArray = 1;
inline int TAdventureAddMapRewardNotify::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TAdventureAddMapRewardNotify::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TAdventureAddMapRewardNotify::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureAddMapRewardNotify.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TAdventureAddMapRewardNotify::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureAddMapRewardNotify.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TAdventureAddMapRewardNotify::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TAdventureAddMapRewardNotify.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TAdventureAddMapRewardNotify::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureAddMapRewardNotify.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TAdventureAddMapRewardNotify::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureAddMapRewardNotify.RewardArray)
  return &rewardarray_;
}

// optional uint64 RewardUid = 2;
inline bool TAdventureAddMapRewardNotify::has_rewarduid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureAddMapRewardNotify::set_has_rewarduid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureAddMapRewardNotify::clear_has_rewarduid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureAddMapRewardNotify::clear_rewarduid() {
  rewarduid_ = GOOGLE_ULONGLONG(0);
  clear_has_rewarduid();
}
inline ::google::protobuf::uint64 TAdventureAddMapRewardNotify::rewarduid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureAddMapRewardNotify.RewardUid)
  return rewarduid_;
}
inline void TAdventureAddMapRewardNotify::set_rewarduid(::google::protobuf::uint64 value) {
  set_has_rewarduid();
  rewarduid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureAddMapRewardNotify.RewardUid)
}

// -------------------------------------------------------------------

// TAdventureMysteryDoorOpenNotify

// optional uint32 LayerIndex = 1;
inline bool TAdventureMysteryDoorOpenNotify::has_layerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureMysteryDoorOpenNotify::set_has_layerindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureMysteryDoorOpenNotify::clear_has_layerindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureMysteryDoorOpenNotify::clear_layerindex() {
  layerindex_ = 0u;
  clear_has_layerindex();
}
inline ::google::protobuf::uint32 TAdventureMysteryDoorOpenNotify::layerindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureMysteryDoorOpenNotify.LayerIndex)
  return layerindex_;
}
inline void TAdventureMysteryDoorOpenNotify::set_layerindex(::google::protobuf::uint32 value) {
  set_has_layerindex();
  layerindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureMysteryDoorOpenNotify.LayerIndex)
}

// -------------------------------------------------------------------

// TAdventureAddObjectNotify

// optional uint32 LayerIndex = 1;
inline bool TAdventureAddObjectNotify::has_layerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureAddObjectNotify::set_has_layerindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureAddObjectNotify::clear_has_layerindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureAddObjectNotify::clear_layerindex() {
  layerindex_ = 0u;
  clear_has_layerindex();
}
inline ::google::protobuf::uint32 TAdventureAddObjectNotify::layerindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureAddObjectNotify.LayerIndex)
  return layerindex_;
}
inline void TAdventureAddObjectNotify::set_layerindex(::google::protobuf::uint32 value) {
  set_has_layerindex();
  layerindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureAddObjectNotify.LayerIndex)
}

// optional int32 CenterPosX = 2;
inline bool TAdventureAddObjectNotify::has_centerposx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureAddObjectNotify::set_has_centerposx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureAddObjectNotify::clear_has_centerposx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureAddObjectNotify::clear_centerposx() {
  centerposx_ = 0;
  clear_has_centerposx();
}
inline ::google::protobuf::int32 TAdventureAddObjectNotify::centerposx() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureAddObjectNotify.CenterPosX)
  return centerposx_;
}
inline void TAdventureAddObjectNotify::set_centerposx(::google::protobuf::int32 value) {
  set_has_centerposx();
  centerposx_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureAddObjectNotify.CenterPosX)
}

// optional int32 CenterPosY = 3;
inline bool TAdventureAddObjectNotify::has_centerposy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureAddObjectNotify::set_has_centerposy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureAddObjectNotify::clear_has_centerposy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureAddObjectNotify::clear_centerposy() {
  centerposy_ = 0;
  clear_has_centerposy();
}
inline ::google::protobuf::int32 TAdventureAddObjectNotify::centerposy() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureAddObjectNotify.CenterPosY)
  return centerposy_;
}
inline void TAdventureAddObjectNotify::set_centerposy(::google::protobuf::int32 value) {
  set_has_centerposy();
  centerposy_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureAddObjectNotify.CenterPosY)
}

// repeated .pb.AdventureObject ObjectArray = 4;
inline int TAdventureAddObjectNotify::objectarray_size() const {
  return objectarray_.size();
}
inline void TAdventureAddObjectNotify::clear_objectarray() {
  objectarray_.Clear();
}
inline const ::pb::AdventureObject& TAdventureAddObjectNotify::objectarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureAddObjectNotify.ObjectArray)
  return objectarray_.Get(index);
}
inline ::pb::AdventureObject* TAdventureAddObjectNotify::mutable_objectarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureAddObjectNotify.ObjectArray)
  return objectarray_.Mutable(index);
}
inline ::pb::AdventureObject* TAdventureAddObjectNotify::add_objectarray() {
  // @@protoc_insertion_point(field_add:pb.TAdventureAddObjectNotify.ObjectArray)
  return objectarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::AdventureObject >&
TAdventureAddObjectNotify::objectarray() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureAddObjectNotify.ObjectArray)
  return objectarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::AdventureObject >*
TAdventureAddObjectNotify::mutable_objectarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureAddObjectNotify.ObjectArray)
  return &objectarray_;
}

// -------------------------------------------------------------------

// TAdventureCalledNotify

// optional uint64 TeamId = 1;
inline bool TAdventureCalledNotify::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureCalledNotify::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureCalledNotify::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureCalledNotify::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TAdventureCalledNotify::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureCalledNotify.TeamId)
  return teamid_;
}
inline void TAdventureCalledNotify::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureCalledNotify.TeamId)
}

// optional uint64 MateUid = 2;
inline bool TAdventureCalledNotify::has_mateuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureCalledNotify::set_has_mateuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureCalledNotify::clear_has_mateuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureCalledNotify::clear_mateuid() {
  mateuid_ = GOOGLE_ULONGLONG(0);
  clear_has_mateuid();
}
inline ::google::protobuf::uint64 TAdventureCalledNotify::mateuid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureCalledNotify.MateUid)
  return mateuid_;
}
inline void TAdventureCalledNotify::set_mateuid(::google::protobuf::uint64 value) {
  set_has_mateuid();
  mateuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureCalledNotify.MateUid)
}

// -------------------------------------------------------------------

// TAdventureRecvCompleteRewardNotify

// optional uint64 RecvUid = 1;
inline bool TAdventureRecvCompleteRewardNotify::has_recvuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureRecvCompleteRewardNotify::set_has_recvuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureRecvCompleteRewardNotify::clear_has_recvuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureRecvCompleteRewardNotify::clear_recvuid() {
  recvuid_ = GOOGLE_ULONGLONG(0);
  clear_has_recvuid();
}
inline ::google::protobuf::uint64 TAdventureRecvCompleteRewardNotify::recvuid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureRecvCompleteRewardNotify.RecvUid)
  return recvuid_;
}
inline void TAdventureRecvCompleteRewardNotify::set_recvuid(::google::protobuf::uint64 value) {
  set_has_recvuid();
  recvuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureRecvCompleteRewardNotify.RecvUid)
}

// -------------------------------------------------------------------

// TAdventureMonsterHpNotify

// optional .pb.TAdventureMonsterInfo MonsterInfo = 1;
inline bool TAdventureMonsterHpNotify::has_monsterinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureMonsterHpNotify::set_has_monsterinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureMonsterHpNotify::clear_has_monsterinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureMonsterHpNotify::clear_monsterinfo() {
  if (monsterinfo_ != NULL) monsterinfo_->::pb::TAdventureMonsterInfo::Clear();
  clear_has_monsterinfo();
}
inline const ::pb::TAdventureMonsterInfo& TAdventureMonsterHpNotify::monsterinfo() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureMonsterHpNotify.MonsterInfo)
  return monsterinfo_ != NULL ? *monsterinfo_ : *default_instance_->monsterinfo_;
}
inline ::pb::TAdventureMonsterInfo* TAdventureMonsterHpNotify::mutable_monsterinfo() {
  set_has_monsterinfo();
  if (monsterinfo_ == NULL) monsterinfo_ = new ::pb::TAdventureMonsterInfo;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureMonsterHpNotify.MonsterInfo)
  return monsterinfo_;
}
inline ::pb::TAdventureMonsterInfo* TAdventureMonsterHpNotify::release_monsterinfo() {
  clear_has_monsterinfo();
  ::pb::TAdventureMonsterInfo* temp = monsterinfo_;
  monsterinfo_ = NULL;
  return temp;
}
inline void TAdventureMonsterHpNotify::set_allocated_monsterinfo(::pb::TAdventureMonsterInfo* monsterinfo) {
  delete monsterinfo_;
  monsterinfo_ = monsterinfo;
  if (monsterinfo) {
    set_has_monsterinfo();
  } else {
    clear_has_monsterinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureMonsterHpNotify.MonsterInfo)
}

// -------------------------------------------------------------------

// TAdventureQuitTeamMapNotify

// optional uint64 TeamId = 1;
inline bool TAdventureQuitTeamMapNotify::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureQuitTeamMapNotify::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureQuitTeamMapNotify::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureQuitTeamMapNotify::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 TAdventureQuitTeamMapNotify::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureQuitTeamMapNotify.TeamId)
  return teamid_;
}
inline void TAdventureQuitTeamMapNotify::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureQuitTeamMapNotify.TeamId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fAdventureNotify_2eproto__INCLUDED
