// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Battle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Battle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TBTActionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBTActionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TModuleAttrInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TModuleAttrInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDebugExtraInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDebugExtraInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRankSingle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRankSingle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTDEnemy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTDEnemy_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTDFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTDFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUnitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUnitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArmyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArmyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSceneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSceneInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TExtraOption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TExtraOption_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBattleUserInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBattleUserInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBattleFieldInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBattleFieldInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBattleArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBattleArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUnitInfoAfterBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUnitInfoAfterBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArmyInfoAfterBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArmyInfoAfterBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBattleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBattleResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBattleBTRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBattleBTRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupMatchResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupMatchResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGroupMatchArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGroupMatchArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBattleResultReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBattleResultReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBattleLocalResultReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBattleLocalResultReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBattleResultRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBattleResultRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBattleCheckParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBattleCheckParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArmyFormation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArmyFormation_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUnitFormation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUnitFormation_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGetBattleArgsWithUidListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGetBattleArgsWithUidListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBatchBattleArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBatchBattleArgs_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBatchBattleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBatchBattleResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGetBattleArgsWithParamReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGetBattleArgsWithParamReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGetBattleArgsWithParamRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGetBattleArgsWithParamRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fBattle_2eproto() {
  protobuf_AddDesc_net_2fBattle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Battle.proto");
  GOOGLE_CHECK(file != NULL);
  TBTActionInfo_descriptor_ = file->message_type(0);
  static const int TBTActionInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBTActionInfo, cmdtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBTActionInfo, btaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBTActionInfo, paramints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBTActionInfo, paramstrings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBTActionInfo, fieldnum_),
  };
  TBTActionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBTActionInfo_descriptor_,
      TBTActionInfo::default_instance_,
      TBTActionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBTActionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBTActionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBTActionInfo));
  TModuleAttrInfo_descriptor_ = file->message_type(1);
  static const int TModuleAttrInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TModuleAttrInfo, modulename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TModuleAttrInfo, attrarr_),
  };
  TModuleAttrInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TModuleAttrInfo_descriptor_,
      TModuleAttrInfo::default_instance_,
      TModuleAttrInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TModuleAttrInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TModuleAttrInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TModuleAttrInfo));
  TDebugExtraInfo_descriptor_ = file->message_type(2);
  static const int TDebugExtraInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDebugExtraInfo, moduleattrinfo_),
  };
  TDebugExtraInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDebugExtraInfo_descriptor_,
      TDebugExtraInfo::default_instance_,
      TDebugExtraInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDebugExtraInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDebugExtraInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDebugExtraInfo));
  TRankSingle_descriptor_ = file->message_type(3);
  static const int TRankSingle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRankSingle, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRankSingle, rank_),
  };
  TRankSingle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRankSingle_descriptor_,
      TRankSingle::default_instance_,
      TRankSingle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRankSingle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRankSingle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRankSingle));
  TRankInfo_descriptor_ = file->message_type(4);
  static const int TRankInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRankInfo, rankself_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRankInfo, rankenemy_),
  };
  TRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRankInfo_descriptor_,
      TRankInfo::default_instance_,
      TRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRankInfo));
  TTDEnemy_descriptor_ = file->message_type(5);
  static const int TTDEnemy_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDEnemy, unitarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDEnemy, timeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDEnemy, skillcounter_),
  };
  TTDEnemy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTDEnemy_descriptor_,
      TTDEnemy::default_instance_,
      TTDEnemy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDEnemy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDEnemy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTDEnemy));
  TTDFriend_descriptor_ = file->message_type(6);
  static const int TTDFriend_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDFriend, unitarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDFriend, energylimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDFriend, pointbuffarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDFriend, energytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDFriend, maxarmy1num_),
  };
  TTDFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTDFriend_descriptor_,
      TTDFriend::default_instance_,
      TTDFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTDFriend));
  TUnitInfo_descriptor_ = file->message_type(7);
  static const int TUnitInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfo, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfo, htid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfo, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfo, currage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfo, skillarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfo, attrarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfo, basesizescale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfo, troopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfo, troopnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfo, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfo, advlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfo, debuginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfo, fightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfo, linkto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfo, warriding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfo, chainsoulto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfo, battlesoul_),
  };
  TUnitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUnitInfo_descriptor_,
      TUnitInfo::default_instance_,
      TUnitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUnitInfo));
  TArmyInfo_descriptor_ = file->message_type(8);
  static const int TArmyInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmyInfo, unitarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmyInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmyInfo, fightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmyInfo, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmyInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmyInfo, armyskillarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmyInfo, armyid_),
  };
  TArmyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArmyInfo_descriptor_,
      TArmyInfo::default_instance_,
      TArmyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArmyInfo));
  TSceneInfo_descriptor_ = file->message_type(9);
  static const int TSceneInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSceneInfo, confname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSceneInfo, confindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSceneInfo, timelimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSceneInfo, cutscenemethod_),
  };
  TSceneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSceneInfo_descriptor_,
      TSceneInfo::default_instance_,
      TSceneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSceneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSceneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSceneInfo));
  TExtraOption_descriptor_ = file->message_type(10);
  static const int TExtraOption_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExtraOption, needauto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExtraOption, layerhideauto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExtraOption, layerhideheadshot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExtraOption, layerhideskip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExtraOption, layerhidespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExtraOption, layerhidepause_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExtraOption, isfirstattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExtraOption, needdostatistics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExtraOption, layerskiphidetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExtraOption, unlocklevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExtraOption, layerhidetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExtraOption, layerhidecoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExtraOption, isstorybattle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExtraOption, layerhidecameraoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExtraOption, layerhidescreennum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExtraOption, layerhidechat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExtraOption, layerhiderestart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExtraOption, specialentrance_),
  };
  TExtraOption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TExtraOption_descriptor_,
      TExtraOption::default_instance_,
      TExtraOption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExtraOption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TExtraOption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TExtraOption));
  TBattleUserInput_descriptor_ = file->message_type(11);
  static const int TBattleUserInput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleUserInput, input_),
  };
  TBattleUserInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBattleUserInput_descriptor_,
      TBattleUserInput::default_instance_,
      TBattleUserInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleUserInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleUserInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBattleUserInput));
  TBattleFieldInput_descriptor_ = file->message_type(12);
  static const int TBattleFieldInput_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleFieldInput, frametime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleFieldInput, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleFieldInput, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleFieldInput, fieldnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleFieldInput, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleFieldInput, data1_),
  };
  TBattleFieldInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBattleFieldInput_descriptor_,
      TBattleFieldInput::default_instance_,
      TBattleFieldInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleFieldInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleFieldInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBattleFieldInput));
  TBattleArgs_descriptor_ = file->message_type(13);
  static const int TBattleArgs_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleArgs, battletype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleArgs, army1arr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleArgs, army2arr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleArgs, sceneconf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleArgs, behavioridarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleArgs, framedelt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleArgs, randomseed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleArgs, extraoption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleArgs, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleArgs, battlestarter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleArgs, recordinputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleArgs, hasuserinput_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleArgs, frontendversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleArgs, rankinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleArgs, tdenemy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleArgs, tdfriend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleArgs, tdrecordinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleArgs, wheelwarridinginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleArgs, backendversion_),
  };
  TBattleArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBattleArgs_descriptor_,
      TBattleArgs::default_instance_,
      TBattleArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBattleArgs));
  TUnitInfoAfterBattle_descriptor_ = file->message_type(14);
  static const int TUnitInfoAfterBattle_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfoAfterBattle, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfoAfterBattle, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfoAfterBattle, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfoAfterBattle, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfoAfterBattle, currage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfoAfterBattle, damageout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfoAfterBattle, damagein_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfoAfterBattle, injuredsoldier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfoAfterBattle, deadsoldier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfoAfterBattle, killenemysoldier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfoAfterBattle, htid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfoAfterBattle, unitstatistic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfoAfterBattle, healout_),
  };
  TUnitInfoAfterBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUnitInfoAfterBattle_descriptor_,
      TUnitInfoAfterBattle::default_instance_,
      TUnitInfoAfterBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfoAfterBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitInfoAfterBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUnitInfoAfterBattle));
  TArmyInfoAfterBattle_descriptor_ = file->message_type(15);
  static const int TArmyInfoAfterBattle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmyInfoAfterBattle, unitarr_),
  };
  TArmyInfoAfterBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArmyInfoAfterBattle_descriptor_,
      TArmyInfoAfterBattle::default_instance_,
      TArmyInfoAfterBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmyInfoAfterBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmyInfoAfterBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArmyInfoAfterBattle));
  TBattleResult_descriptor_ = file->message_type(16);
  static const int TBattleResult_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResult, battleargs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResult, starlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResult, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResult, army1arr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResult, army2arr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResult, battlereportstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResult, battletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResult, battlefirewallversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResult, screenindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResult, recordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResult, battlebtrecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResult, skillcountinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResult, validwavenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResult, tdrecordinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResult, resultid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResult, wheelwarfieldstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResult, questioned_),
  };
  TBattleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBattleResult_descriptor_,
      TBattleResult::default_instance_,
      TBattleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBattleResult));
  TBattleBTRecord_descriptor_ = file->message_type(17);
  static const int TBattleBTRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleBTRecord, btactioninfoarr_),
  };
  TBattleBTRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBattleBTRecord_descriptor_,
      TBattleBTRecord::default_instance_,
      TBattleBTRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleBTRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleBTRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBattleBTRecord));
  TGroupMatchResult_descriptor_ = file->message_type(18);
  static const int TGroupMatchResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupMatchResult, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupMatchResult, groupresults_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupMatchResult, grouparmys_),
  };
  TGroupMatchResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGroupMatchResult_descriptor_,
      TGroupMatchResult::default_instance_,
      TGroupMatchResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupMatchResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupMatchResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGroupMatchResult));
  TGroupMatchArgs_descriptor_ = file->message_type(19);
  static const int TGroupMatchArgs_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupMatchArgs, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupMatchArgs, basebattleargs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupMatchArgs, grouparmys_),
  };
  TGroupMatchArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGroupMatchArgs_descriptor_,
      TGroupMatchArgs::default_instance_,
      TGroupMatchArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupMatchArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGroupMatchArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGroupMatchArgs));
  TBattleResultReq_descriptor_ = file->message_type(20);
  static const int TBattleResultReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResultReq, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResultReq, serverid_),
  };
  TBattleResultReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBattleResultReq_descriptor_,
      TBattleResultReq::default_instance_,
      TBattleResultReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResultReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResultReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBattleResultReq));
  TBattleLocalResultReq_descriptor_ = file->message_type(21);
  static const int TBattleLocalResultReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleLocalResultReq, localid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleLocalResultReq, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleLocalResultReq, serverid_),
  };
  TBattleLocalResultReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBattleLocalResultReq_descriptor_,
      TBattleLocalResultReq::default_instance_,
      TBattleLocalResultReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleLocalResultReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleLocalResultReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBattleLocalResultReq));
  TBattleResultRsp_descriptor_ = file->message_type(22);
  static const int TBattleResultRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResultRsp, battleresult_),
  };
  TBattleResultRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBattleResultRsp_descriptor_,
      TBattleResultRsp::default_instance_,
      TBattleResultRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResultRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResultRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBattleResultRsp));
  TBattleCheckParam_descriptor_ = file->message_type(23);
  static const int TBattleCheckParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleCheckParam, battleconfver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleCheckParam, myarmyformation_),
  };
  TBattleCheckParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBattleCheckParam_descriptor_,
      TBattleCheckParam::default_instance_,
      TBattleCheckParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleCheckParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleCheckParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBattleCheckParam));
  TArmyFormation_descriptor_ = file->message_type(24);
  static const int TArmyFormation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmyFormation, teamformation_),
  };
  TArmyFormation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArmyFormation_descriptor_,
      TArmyFormation::default_instance_,
      TArmyFormation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmyFormation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmyFormation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArmyFormation));
  TUnitFormation_descriptor_ = file->message_type(25);
  static const int TUnitFormation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitFormation, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitFormation, pos_),
  };
  TUnitFormation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUnitFormation_descriptor_,
      TUnitFormation::default_instance_,
      TUnitFormation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitFormation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitFormation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUnitFormation));
  TGetBattleArgsWithUidListRsp_descriptor_ = file->message_type(26);
  static const int TGetBattleArgsWithUidListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsWithUidListRsp, otheruserarmyarr_),
  };
  TGetBattleArgsWithUidListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGetBattleArgsWithUidListRsp_descriptor_,
      TGetBattleArgsWithUidListRsp::default_instance_,
      TGetBattleArgsWithUidListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsWithUidListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsWithUidListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGetBattleArgsWithUidListRsp));
  TBatchBattleArgs_descriptor_ = file->message_type(27);
  static const int TBatchBattleArgs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBatchBattleArgs, battleargsarr_),
  };
  TBatchBattleArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBatchBattleArgs_descriptor_,
      TBatchBattleArgs::default_instance_,
      TBatchBattleArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBatchBattleArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBatchBattleArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBatchBattleArgs));
  TBatchBattleResult_descriptor_ = file->message_type(28);
  static const int TBatchBattleResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBatchBattleResult, battleresultarr_),
  };
  TBatchBattleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBatchBattleResult_descriptor_,
      TBatchBattleResult::default_instance_,
      TBatchBattleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBatchBattleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBatchBattleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBatchBattleResult));
  TGetBattleArgsWithParamReq_descriptor_ = file->message_type(29);
  static const int TGetBattleArgsWithParamReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsWithParamReq, battleinfoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsWithParamReq, battlestarter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsWithParamReq, battlecheckparam_),
  };
  TGetBattleArgsWithParamReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGetBattleArgsWithParamReq_descriptor_,
      TGetBattleArgsWithParamReq::default_instance_,
      TGetBattleArgsWithParamReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsWithParamReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsWithParamReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGetBattleArgsWithParamReq));
  TGetBattleArgsWithParamRsp_descriptor_ = file->message_type(30);
  static const int TGetBattleArgsWithParamRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsWithParamRsp, battleargs_),
  };
  TGetBattleArgsWithParamRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGetBattleArgsWithParamRsp_descriptor_,
      TGetBattleArgsWithParamRsp::default_instance_,
      TGetBattleArgsWithParamRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsWithParamRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsWithParamRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGetBattleArgsWithParamRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fBattle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBTActionInfo_descriptor_, &TBTActionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TModuleAttrInfo_descriptor_, &TModuleAttrInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDebugExtraInfo_descriptor_, &TDebugExtraInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRankSingle_descriptor_, &TRankSingle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRankInfo_descriptor_, &TRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTDEnemy_descriptor_, &TTDEnemy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTDFriend_descriptor_, &TTDFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUnitInfo_descriptor_, &TUnitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArmyInfo_descriptor_, &TArmyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSceneInfo_descriptor_, &TSceneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TExtraOption_descriptor_, &TExtraOption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBattleUserInput_descriptor_, &TBattleUserInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBattleFieldInput_descriptor_, &TBattleFieldInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBattleArgs_descriptor_, &TBattleArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUnitInfoAfterBattle_descriptor_, &TUnitInfoAfterBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArmyInfoAfterBattle_descriptor_, &TArmyInfoAfterBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBattleResult_descriptor_, &TBattleResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBattleBTRecord_descriptor_, &TBattleBTRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGroupMatchResult_descriptor_, &TGroupMatchResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGroupMatchArgs_descriptor_, &TGroupMatchArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBattleResultReq_descriptor_, &TBattleResultReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBattleLocalResultReq_descriptor_, &TBattleLocalResultReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBattleResultRsp_descriptor_, &TBattleResultRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBattleCheckParam_descriptor_, &TBattleCheckParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArmyFormation_descriptor_, &TArmyFormation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUnitFormation_descriptor_, &TUnitFormation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGetBattleArgsWithUidListRsp_descriptor_, &TGetBattleArgsWithUidListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBatchBattleArgs_descriptor_, &TBatchBattleArgs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBatchBattleResult_descriptor_, &TBatchBattleResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGetBattleArgsWithParamReq_descriptor_, &TGetBattleArgsWithParamReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGetBattleArgsWithParamRsp_descriptor_, &TGetBattleArgsWithParamRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fBattle_2eproto() {
  delete TBTActionInfo::default_instance_;
  delete TBTActionInfo_reflection_;
  delete TModuleAttrInfo::default_instance_;
  delete TModuleAttrInfo_reflection_;
  delete TDebugExtraInfo::default_instance_;
  delete TDebugExtraInfo_reflection_;
  delete TRankSingle::default_instance_;
  delete TRankSingle_reflection_;
  delete TRankInfo::default_instance_;
  delete TRankInfo_reflection_;
  delete TTDEnemy::default_instance_;
  delete TTDEnemy_reflection_;
  delete TTDFriend::default_instance_;
  delete TTDFriend_reflection_;
  delete TUnitInfo::default_instance_;
  delete TUnitInfo_reflection_;
  delete TArmyInfo::default_instance_;
  delete TArmyInfo_reflection_;
  delete TSceneInfo::default_instance_;
  delete TSceneInfo_reflection_;
  delete TExtraOption::default_instance_;
  delete TExtraOption_reflection_;
  delete TBattleUserInput::default_instance_;
  delete TBattleUserInput_reflection_;
  delete TBattleFieldInput::default_instance_;
  delete TBattleFieldInput_reflection_;
  delete TBattleArgs::default_instance_;
  delete TBattleArgs_reflection_;
  delete TUnitInfoAfterBattle::default_instance_;
  delete TUnitInfoAfterBattle_reflection_;
  delete TArmyInfoAfterBattle::default_instance_;
  delete TArmyInfoAfterBattle_reflection_;
  delete TBattleResult::default_instance_;
  delete TBattleResult_reflection_;
  delete TBattleBTRecord::default_instance_;
  delete TBattleBTRecord_reflection_;
  delete TGroupMatchResult::default_instance_;
  delete TGroupMatchResult_reflection_;
  delete TGroupMatchArgs::default_instance_;
  delete TGroupMatchArgs_reflection_;
  delete TBattleResultReq::default_instance_;
  delete TBattleResultReq_reflection_;
  delete TBattleLocalResultReq::default_instance_;
  delete TBattleLocalResultReq_reflection_;
  delete TBattleResultRsp::default_instance_;
  delete TBattleResultRsp_reflection_;
  delete TBattleCheckParam::default_instance_;
  delete TBattleCheckParam_reflection_;
  delete TArmyFormation::default_instance_;
  delete TArmyFormation_reflection_;
  delete TUnitFormation::default_instance_;
  delete TUnitFormation_reflection_;
  delete TGetBattleArgsWithUidListRsp::default_instance_;
  delete TGetBattleArgsWithUidListRsp_reflection_;
  delete TBatchBattleArgs::default_instance_;
  delete TBatchBattleArgs_reflection_;
  delete TBatchBattleResult::default_instance_;
  delete TBatchBattleResult_reflection_;
  delete TGetBattleArgsWithParamReq::default_instance_;
  delete TGetBattleArgsWithParamReq_reflection_;
  delete TGetBattleArgsWithParamRsp::default_instance_;
  delete TGetBattleArgsWithParamRsp_reflection_;
}

void protobuf_AddDesc_net_2fBattle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fAttributer_2eproto();
  ::pb::protobuf_AddDesc_net_2fBattleBase_2eproto();
  ::pb::protobuf_AddDesc_net_2fBattleStarter_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020net/Battle.proto\022\002pb\032\027module/Attribute"
    "r.proto\032\024net/BattleBase.proto\032\027net/Battl"
    "eStarter.proto\"|\n\rTBTActionInfo\022\017\n\007CmdTi"
    "me\030\001 \001(\005\022\037\n\010BTAction\030\002 \002(\0162\r.pb.EBTActio"
    "n\022\021\n\tParamInts\030\003 \003(\005\022\024\n\014ParamStrings\030\004 \003"
    "(\t\022\020\n\010FieldNum\030\005 \001(\005\"F\n\017TModuleAttrInfo\022"
    "\022\n\nModuleName\030\001 \002(\r\022\037\n\007AttrArr\030\002 \003(\0132\016.p"
    "b.TAttribute\">\n\017TDebugExtraInfo\022+\n\016Modul"
    "eAttrInfo\030\001 \003(\0132\023.pb.TModuleAttrInfo\"(\n\013"
    "TRankSingle\022\013\n\003Hid\030\001 \001(\r\022\014\n\004Rank\030\002 \001(\r\"R"
    "\n\tTRankInfo\022!\n\010RankSelf\030\001 \003(\0132\017.pb.TRank"
    "Single\022\"\n\tRankEnemy\030\002 \003(\0132\017.pb.TRankSing"
    "le\"t\n\010TTDEnemy\022\036\n\007UnitArr\030\001 \003(\0132\r.pb.TUn"
    "itInfo\022!\n\010TimeInfo\030\002 \003(\0132\017.pb.TTDTimeInf"
    "o\022%\n\014SkillCounter\030\003 \003(\0132\017.pb.TSkillCount"
    "\"\217\001\n\tTTDFriend\022\036\n\007UnitArr\030\001 \003(\0132\r.pb.TUn"
    "itInfo\022\023\n\013EnergyLimit\030\002 \001(\005\022$\n\014PointBuff"
    "Arr\030\003 \003(\0132\016.pb.TPointBuff\022\022\n\nEnergyType\030"
    "\004 \001(\005\022\023\n\013MaxArmy1Num\030\005 \001(\r\"\262\003\n\tTUnitInfo"
    "\022\013\n\003Hid\030\001 \002(\r\022\014\n\004Htid\030\002 \002(\r\022\013\n\003Pos\030\003 \002(\r"
    "\022\r\n\005Level\030\004 \002(\r\022\r\n\005CurHp\030\005 \001(\004\022\017\n\007CurRag"
    "e\030\006 \001(\r\022%\n\010SkillArr\030\007 \003(\0132\023.pb.TSkillAtt"
    "ribute\022\037\n\007AttrArr\030\010 \003(\0132\016.pb.TAttribute\022"
    "\025\n\rBaseSizeScale\030\t \001(\r\022\017\n\007TroopId\030\n \001(\r\022"
    "\020\n\010TroopNum\030\013 \001(\r\022\014\n\004Star\030\r \001(\r\022\r\n\005AdvLv"
    "\030\016 \001(\r\022&\n\tDebugInfo\030\017 \001(\0132\023.pb.TDebugExt"
    "raInfo\022\022\n\nFightForce\030\020 \001(\004\022\016\n\006LinkTo\030\021 \001"
    "(\r\022%\n\tWarRiding\030\022 \001(\0132\022.pb.TWarRidingInf"
    "o\022\023\n\013ChainSoulTo\030\023 \001(\r\022\'\n\nBattleSoul\030\024 \001"
    "(\0132\023.pb.TBattleSoulInfo\"\253\001\n\tTArmyInfo\022\036\n"
    "\007UnitArr\030\001 \003(\0132\r.pb.TUnitInfo\022\022\n\nPlayerN"
    "ame\030\002 \001(\t\022\022\n\nFightForce\030\003 \001(\004\022\016\n\006HeadId\030"
    "\004 \001(\r\022\013\n\003Uid\030\005 \001(\004\022)\n\014ArmySkillArr\030\006 \003(\013"
    "2\023.pb.TSkillAttribute\022\016\n\006ArmyId\030\007 \001(\005\"\\\n"
    "\nTSceneInfo\022\020\n\010ConfName\030\001 \002(\t\022\021\n\tConfInd"
    "ex\030\002 \002(\r\022\021\n\tTimeLimit\030\003 \002(\r\022\026\n\016CutSceneM"
    "ethod\030\004 \001(\r\"\332\003\n\014TExtraOption\022\020\n\010NeedAuto"
    "\030\001 \001(\010\022\025\n\rLayerHideAuto\030\002 \001(\010\022\031\n\021LayerHi"
    "deHeadShot\030\003 \001(\010\022\025\n\rLayerHideSkip\030\004 \001(\010\022"
    "\026\n\016LayerHideSpeed\030\005 \001(\010\022\026\n\016LayerHidePaus"
    "e\030\006 \001(\010\022\025\n\rIsFirstAttack\030\007 \001(\010\022\030\n\020NeedDo"
    "Statistics\030\010 \001(\010\022\031\n\021LayerSkipHideTime\030\t "
    "\001(\r\022\023\n\013UnlockLevel\030\n \001(\r\022\025\n\rLayerHideTim"
    "e\030\013 \001(\010\022\025\n\rLayerHideCoin\030\014 \001(\010\022\025\n\rIsStor"
    "yBattle\030\r \001(\010\022\035\n\025LayerHideCameraOffset\030\016"
    " \001(\010\022\032\n\022LayerHideScreenNum\030\017 \001(\010\022\025\n\rLaye"
    "rHideChat\030\020 \001(\010\022\030\n\020LayerHideRestart\030\021 \001("
    "\010\022-\n\017SpecialEntrance\030\022 \001(\0132\024.pb.TSpecial"
    "Entrance\"8\n\020TBattleUserInput\022$\n\005Input\030\001 "
    "\003(\0132\025.pb.TBattleFieldInput\"r\n\021TBattleFie"
    "ldInput\022\021\n\tFrameTime\030\001 \002(\005\022\013\n\003Eid\030\002 \001(\r\022"
    "\r\n\005Event\030\003 \002(\r\022\020\n\010FieldNum\030\004 \001(\r\022\r\n\005Inde"
    "x\030\005 \001(\r\022\r\n\005Data1\030\006 \001(\r\"\353\004\n\013TBattleArgs\022#"
    "\n\nBattleType\030\001 \002(\0162\017.pb.EBattleType\022\037\n\010A"
    "rmy1Arr\030\002 \003(\0132\r.pb.TArmyInfo\022\037\n\010Army2Arr"
    "\030\003 \003(\0132\r.pb.TArmyInfo\022!\n\tSceneConf\030\004 \003(\013"
    "2\016.pb.TSceneInfo\022\025\n\rBehaviorIdArr\030\005 \003(\r\022"
    "\021\n\tFrameDelt\030\006 \001(\r\022\022\n\nRandomSeed\030\007 \002(\r\022%"
    "\n\013ExtraOption\030\010 \001(\0132\020.pb.TExtraOption\022\020\n"
    "\010BattleId\030\t \001(\r\022)\n\rBattleStarter\030\n \001(\0162\022"
    ".pb.EBattleStarter\022*\n\014RecordInputs\030\r \001(\013"
    "2\024.pb.TBattleUserInput\022\024\n\014HasUserInput\030\014"
    " \001(\010\022\027\n\017FrontendVersion\030\016 \001(\t\022\037\n\010RankInf"
    "o\030\017 \001(\0132\r.pb.TRankInfo\022\035\n\007TDEnemy\030\020 \001(\0132"
    "\014.pb.TTDEnemy\022\037\n\010TDFriend\030\021 \001(\0132\r.pb.TTD"
    "Friend\022\'\n\014TDRecordInfo\030\022 \001(\0132\021.pb.TTDRec"
    "ordInfo\0223\n\022WheelWarRidingInfo\030\023 \001(\0132\027.pb"
    ".TWheelWarRidingInfo\022\026\n\016BackendVersion\030\024"
    " \001(\t\"\226\002\n\024TUnitInfoAfterBattle\022\013\n\003Hid\030\001 \002"
    "(\r\022\013\n\003Pos\030\002 \002(\r\022\r\n\005CurHp\030\003 \001(\004\022\r\n\005MaxHp\030"
    "\004 \001(\004\022\017\n\007CurRage\030\005 \001(\r\022\021\n\tDamageOut\030\006 \001("
    "\004\022\020\n\010DamageIn\030\007 \001(\004\022\026\n\016InjuredSoldier\030\010 "
    "\001(\r\022\023\n\013DeadSoldier\030\t \001(\r\022\030\n\020KillEnemySol"
    "dier\030\n \001(\r\022\014\n\004Htid\030\013 \001(\r\022*\n\rUnitStatisti"
    "c\030\014 \001(\0132\023.pb.TUnitStatistics\022\017\n\007HealOut\030"
    "\r \001(\004\"A\n\024TArmyInfoAfterBattle\022)\n\007UnitArr"
    "\030\001 \003(\0132\030.pb.TUnitInfoAfterBattle\"\233\004\n\rTBa"
    "ttleResult\022#\n\nBattleArgs\030\001 \002(\0132\017.pb.TBat"
    "tleArgs\022\021\n\tStarLevel\030\002 \002(\r\022\016\n\006ErrMsg\030\003 \001"
    "(\t\022*\n\010Army1Arr\030\005 \003(\0132\030.pb.TArmyInfoAfter"
    "Battle\022*\n\010Army2Arr\030\006 \003(\0132\030.pb.TArmyInfoA"
    "fterBattle\022\027\n\017BattleReportStr\030\007 \001(\014\022\022\n\nB"
    "attleTime\030\010 \001(\004\022\035\n\025BattleFirewallVersion"
    "\030\t \001(\t\022\023\n\013ScreenIndex\030\n \001(\r\022\020\n\010RecordId\030"
    "\013 \001(\004\022+\n\016BattleBTRecord\030\014 \001(\0132\023.pb.TBatt"
    "leBTRecord\022+\n\016SkillCountInfo\030\r \001(\0132\023.pb."
    "TSkillCountInfo\022\027\n\017ValidWaveNumber\030\016 \001(\r"
    "\022\'\n\014TDRecordInfo\030\017 \001(\0132\021.pb.TTDRecordInf"
    "o\022\020\n\010ResultId\030\020 \001(\r\0225\n\023WheelWarFieldStat"
    "us\030\021 \001(\0132\030.pb.TWheelWarFieldStatus\022\022\n\nQu"
    "estioned\030\022 \001(\010\"=\n\017TBattleBTRecord\022*\n\017BTA"
    "ctionInfoArr\030\001 \003(\0132\021.pb.TBTActionInfo\"\202\001"
    "\n\021TGroupMatchResult\022!\n\004Type\030\001 \002(\0162\023.pb.E"
    "GroupMatchType\022\'\n\014GroupResults\030\002 \003(\0132\021.p"
    "b.TBattleResult\022!\n\nGroupArmys\030\003 \003(\0132\r.pb"
    ".TArmyInfo\"\200\001\n\017TGroupMatchArgs\022!\n\004Type\030\001"
    " \002(\0162\023.pb.EGroupMatchType\022\'\n\016BaseBattleA"
    "rgs\030\002 \001(\0132\017.pb.TBattleArgs\022!\n\nGroupArmys"
    "\030\003 \003(\0132\r.pb.TArmyInfo\"1\n\020TBattleResultRe"
    "q\022\013\n\003rid\030\001 \001(\004\022\020\n\010ServerId\030\002 \001(\t\"G\n\025TBat"
    "tleLocalResultReq\022\017\n\007LocalId\030\001 \001(\t\022\013\n\003Ri"
    "d\030\002 \001(\004\022\020\n\010ServerId\030\003 \001(\t\";\n\020TBattleResu"
    "ltRsp\022\'\n\014battleResult\030\001 \001(\0132\021.pb.TBattle"
    "Result\"W\n\021TBattleCheckParam\022\025\n\rBattleCon"
    "fVer\030\001 \001(\t\022+\n\017MyArmyFormation\030\002 \003(\0132\022.pb"
    ".TArmyFormation\";\n\016TArmyFormation\022)\n\rTea"
    "mFormation\030\001 \003(\0132\022.pb.TUnitFormation\"*\n\016"
    "TUnitFormation\022\013\n\003Hid\030\001 \001(\r\022\013\n\003Pos\030\002 \001(\r"
    "\"G\n\034TGetBattleArgsWithUidListRsp\022\'\n\020Othe"
    "rUserArmyArr\030\001 \003(\0132\r.pb.TArmyInfo\":\n\020TBa"
    "tchBattleArgs\022&\n\rBattleArgsArr\030\001 \003(\0132\017.p"
    "b.TBattleArgs\"-\n\022TBatchBattleResult\022\027\n\017B"
    "attleResultArr\030\001 \003(\014\"\216\001\n\032TGetBattleArgsW"
    "ithParamReq\022\024\n\014BattleInfoId\030\001 \002(\r\022)\n\rBat"
    "tleStarter\030\002 \002(\0162\022.pb.EBattleStarter\022/\n\020"
    "BattleCheckParam\030\003 \001(\0132\025.pb.TBattleCheck"
    "Param\"A\n\032TGetBattleArgsWithParamRsp\022#\n\nB"
    "attleArgs\030\001 \001(\0132\017.pb.TBattleArgs", 4712);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Battle.proto", &protobuf_RegisterTypes);
  TBTActionInfo::default_instance_ = new TBTActionInfo();
  TModuleAttrInfo::default_instance_ = new TModuleAttrInfo();
  TDebugExtraInfo::default_instance_ = new TDebugExtraInfo();
  TRankSingle::default_instance_ = new TRankSingle();
  TRankInfo::default_instance_ = new TRankInfo();
  TTDEnemy::default_instance_ = new TTDEnemy();
  TTDFriend::default_instance_ = new TTDFriend();
  TUnitInfo::default_instance_ = new TUnitInfo();
  TArmyInfo::default_instance_ = new TArmyInfo();
  TSceneInfo::default_instance_ = new TSceneInfo();
  TExtraOption::default_instance_ = new TExtraOption();
  TBattleUserInput::default_instance_ = new TBattleUserInput();
  TBattleFieldInput::default_instance_ = new TBattleFieldInput();
  TBattleArgs::default_instance_ = new TBattleArgs();
  TUnitInfoAfterBattle::default_instance_ = new TUnitInfoAfterBattle();
  TArmyInfoAfterBattle::default_instance_ = new TArmyInfoAfterBattle();
  TBattleResult::default_instance_ = new TBattleResult();
  TBattleBTRecord::default_instance_ = new TBattleBTRecord();
  TGroupMatchResult::default_instance_ = new TGroupMatchResult();
  TGroupMatchArgs::default_instance_ = new TGroupMatchArgs();
  TBattleResultReq::default_instance_ = new TBattleResultReq();
  TBattleLocalResultReq::default_instance_ = new TBattleLocalResultReq();
  TBattleResultRsp::default_instance_ = new TBattleResultRsp();
  TBattleCheckParam::default_instance_ = new TBattleCheckParam();
  TArmyFormation::default_instance_ = new TArmyFormation();
  TUnitFormation::default_instance_ = new TUnitFormation();
  TGetBattleArgsWithUidListRsp::default_instance_ = new TGetBattleArgsWithUidListRsp();
  TBatchBattleArgs::default_instance_ = new TBatchBattleArgs();
  TBatchBattleResult::default_instance_ = new TBatchBattleResult();
  TGetBattleArgsWithParamReq::default_instance_ = new TGetBattleArgsWithParamReq();
  TGetBattleArgsWithParamRsp::default_instance_ = new TGetBattleArgsWithParamRsp();
  TBTActionInfo::default_instance_->InitAsDefaultInstance();
  TModuleAttrInfo::default_instance_->InitAsDefaultInstance();
  TDebugExtraInfo::default_instance_->InitAsDefaultInstance();
  TRankSingle::default_instance_->InitAsDefaultInstance();
  TRankInfo::default_instance_->InitAsDefaultInstance();
  TTDEnemy::default_instance_->InitAsDefaultInstance();
  TTDFriend::default_instance_->InitAsDefaultInstance();
  TUnitInfo::default_instance_->InitAsDefaultInstance();
  TArmyInfo::default_instance_->InitAsDefaultInstance();
  TSceneInfo::default_instance_->InitAsDefaultInstance();
  TExtraOption::default_instance_->InitAsDefaultInstance();
  TBattleUserInput::default_instance_->InitAsDefaultInstance();
  TBattleFieldInput::default_instance_->InitAsDefaultInstance();
  TBattleArgs::default_instance_->InitAsDefaultInstance();
  TUnitInfoAfterBattle::default_instance_->InitAsDefaultInstance();
  TArmyInfoAfterBattle::default_instance_->InitAsDefaultInstance();
  TBattleResult::default_instance_->InitAsDefaultInstance();
  TBattleBTRecord::default_instance_->InitAsDefaultInstance();
  TGroupMatchResult::default_instance_->InitAsDefaultInstance();
  TGroupMatchArgs::default_instance_->InitAsDefaultInstance();
  TBattleResultReq::default_instance_->InitAsDefaultInstance();
  TBattleLocalResultReq::default_instance_->InitAsDefaultInstance();
  TBattleResultRsp::default_instance_->InitAsDefaultInstance();
  TBattleCheckParam::default_instance_->InitAsDefaultInstance();
  TArmyFormation::default_instance_->InitAsDefaultInstance();
  TUnitFormation::default_instance_->InitAsDefaultInstance();
  TGetBattleArgsWithUidListRsp::default_instance_->InitAsDefaultInstance();
  TBatchBattleArgs::default_instance_->InitAsDefaultInstance();
  TBatchBattleResult::default_instance_->InitAsDefaultInstance();
  TGetBattleArgsWithParamReq::default_instance_->InitAsDefaultInstance();
  TGetBattleArgsWithParamRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fBattle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fBattle_2eproto {
  StaticDescriptorInitializer_net_2fBattle_2eproto() {
    protobuf_AddDesc_net_2fBattle_2eproto();
  }
} static_descriptor_initializer_net_2fBattle_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TBTActionInfo::kCmdTimeFieldNumber;
const int TBTActionInfo::kBTActionFieldNumber;
const int TBTActionInfo::kParamIntsFieldNumber;
const int TBTActionInfo::kParamStringsFieldNumber;
const int TBTActionInfo::kFieldNumFieldNumber;
#endif  // !_MSC_VER

TBTActionInfo::TBTActionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBTActionInfo)
}

void TBTActionInfo::InitAsDefaultInstance() {
}

TBTActionInfo::TBTActionInfo(const TBTActionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBTActionInfo)
}

void TBTActionInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmdtime_ = 0;
  btaction_ = 0;
  fieldnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBTActionInfo::~TBTActionInfo() {
  // @@protoc_insertion_point(destructor:pb.TBTActionInfo)
  SharedDtor();
}

void TBTActionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBTActionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBTActionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBTActionInfo_descriptor_;
}

const TBTActionInfo& TBTActionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TBTActionInfo* TBTActionInfo::default_instance_ = NULL;

TBTActionInfo* TBTActionInfo::New() const {
  return new TBTActionInfo;
}

void TBTActionInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBTActionInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 19) {
    ZR_(cmdtime_, btaction_);
    fieldnum_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  paramints_.Clear();
  paramstrings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBTActionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBTActionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CmdTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdtime_)));
          set_has_cmdtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BTAction;
        break;
      }

      // required .pb.EBTAction BTAction = 2;
      case 2: {
        if (tag == 16) {
         parse_BTAction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EBTAction_IsValid(value)) {
            set_btaction(static_cast< ::pb::EBTAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ParamInts;
        break;
      }

      // repeated int32 ParamInts = 3;
      case 3: {
        if (tag == 24) {
         parse_ParamInts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_paramints())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_paramints())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ParamInts;
        if (input->ExpectTag(34)) goto parse_ParamStrings;
        break;
      }

      // repeated string ParamStrings = 4;
      case 4: {
        if (tag == 34) {
         parse_ParamStrings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_paramstrings()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->paramstrings(this->paramstrings_size() - 1).data(),
            this->paramstrings(this->paramstrings_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "paramstrings");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ParamStrings;
        if (input->ExpectTag(40)) goto parse_FieldNum;
        break;
      }

      // optional int32 FieldNum = 5;
      case 5: {
        if (tag == 40) {
         parse_FieldNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fieldnum_)));
          set_has_fieldnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBTActionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBTActionInfo)
  return false;
#undef DO_
}

void TBTActionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBTActionInfo)
  // optional int32 CmdTime = 1;
  if (has_cmdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmdtime(), output);
  }

  // required .pb.EBTAction BTAction = 2;
  if (has_btaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->btaction(), output);
  }

  // repeated int32 ParamInts = 3;
  for (int i = 0; i < this->paramints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->paramints(i), output);
  }

  // repeated string ParamStrings = 4;
  for (int i = 0; i < this->paramstrings_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->paramstrings(i).data(), this->paramstrings(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "paramstrings");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->paramstrings(i), output);
  }

  // optional int32 FieldNum = 5;
  if (has_fieldnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fieldnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBTActionInfo)
}

::google::protobuf::uint8* TBTActionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBTActionInfo)
  // optional int32 CmdTime = 1;
  if (has_cmdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmdtime(), target);
  }

  // required .pb.EBTAction BTAction = 2;
  if (has_btaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->btaction(), target);
  }

  // repeated int32 ParamInts = 3;
  for (int i = 0; i < this->paramints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->paramints(i), target);
  }

  // repeated string ParamStrings = 4;
  for (int i = 0; i < this->paramstrings_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->paramstrings(i).data(), this->paramstrings(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "paramstrings");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->paramstrings(i), target);
  }

  // optional int32 FieldNum = 5;
  if (has_fieldnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fieldnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBTActionInfo)
  return target;
}

int TBTActionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CmdTime = 1;
    if (has_cmdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmdtime());
    }

    // required .pb.EBTAction BTAction = 2;
    if (has_btaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->btaction());
    }

    // optional int32 FieldNum = 5;
    if (has_fieldnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fieldnum());
    }

  }
  // repeated int32 ParamInts = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->paramints_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->paramints(i));
    }
    total_size += 1 * this->paramints_size() + data_size;
  }

  // repeated string ParamStrings = 4;
  total_size += 1 * this->paramstrings_size();
  for (int i = 0; i < this->paramstrings_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->paramstrings(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBTActionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBTActionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBTActionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBTActionInfo::MergeFrom(const TBTActionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  paramints_.MergeFrom(from.paramints_);
  paramstrings_.MergeFrom(from.paramstrings_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdtime()) {
      set_cmdtime(from.cmdtime());
    }
    if (from.has_btaction()) {
      set_btaction(from.btaction());
    }
    if (from.has_fieldnum()) {
      set_fieldnum(from.fieldnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBTActionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBTActionInfo::CopyFrom(const TBTActionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBTActionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void TBTActionInfo::Swap(TBTActionInfo* other) {
  if (other != this) {
    std::swap(cmdtime_, other->cmdtime_);
    std::swap(btaction_, other->btaction_);
    paramints_.Swap(&other->paramints_);
    paramstrings_.Swap(&other->paramstrings_);
    std::swap(fieldnum_, other->fieldnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBTActionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBTActionInfo_descriptor_;
  metadata.reflection = TBTActionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TModuleAttrInfo::kModuleNameFieldNumber;
const int TModuleAttrInfo::kAttrArrFieldNumber;
#endif  // !_MSC_VER

TModuleAttrInfo::TModuleAttrInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TModuleAttrInfo)
}

void TModuleAttrInfo::InitAsDefaultInstance() {
}

TModuleAttrInfo::TModuleAttrInfo(const TModuleAttrInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TModuleAttrInfo)
}

void TModuleAttrInfo::SharedCtor() {
  _cached_size_ = 0;
  modulename_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TModuleAttrInfo::~TModuleAttrInfo() {
  // @@protoc_insertion_point(destructor:pb.TModuleAttrInfo)
  SharedDtor();
}

void TModuleAttrInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TModuleAttrInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TModuleAttrInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TModuleAttrInfo_descriptor_;
}

const TModuleAttrInfo& TModuleAttrInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TModuleAttrInfo* TModuleAttrInfo::default_instance_ = NULL;

TModuleAttrInfo* TModuleAttrInfo::New() const {
  return new TModuleAttrInfo;
}

void TModuleAttrInfo::Clear() {
  modulename_ = 0u;
  attrarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TModuleAttrInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TModuleAttrInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ModuleName = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modulename_)));
          set_has_modulename();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AttrArr;
        break;
      }

      // repeated .pb.TAttribute AttrArr = 2;
      case 2: {
        if (tag == 18) {
         parse_AttrArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AttrArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TModuleAttrInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TModuleAttrInfo)
  return false;
#undef DO_
}

void TModuleAttrInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TModuleAttrInfo)
  // required uint32 ModuleName = 1;
  if (has_modulename()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->modulename(), output);
  }

  // repeated .pb.TAttribute AttrArr = 2;
  for (int i = 0; i < this->attrarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attrarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TModuleAttrInfo)
}

::google::protobuf::uint8* TModuleAttrInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TModuleAttrInfo)
  // required uint32 ModuleName = 1;
  if (has_modulename()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->modulename(), target);
  }

  // repeated .pb.TAttribute AttrArr = 2;
  for (int i = 0; i < this->attrarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attrarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TModuleAttrInfo)
  return target;
}

int TModuleAttrInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ModuleName = 1;
    if (has_modulename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modulename());
    }

  }
  // repeated .pb.TAttribute AttrArr = 2;
  total_size += 1 * this->attrarr_size();
  for (int i = 0; i < this->attrarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TModuleAttrInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TModuleAttrInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TModuleAttrInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TModuleAttrInfo::MergeFrom(const TModuleAttrInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrarr_.MergeFrom(from.attrarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modulename()) {
      set_modulename(from.modulename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TModuleAttrInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TModuleAttrInfo::CopyFrom(const TModuleAttrInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TModuleAttrInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->attrarr())) return false;
  return true;
}

void TModuleAttrInfo::Swap(TModuleAttrInfo* other) {
  if (other != this) {
    std::swap(modulename_, other->modulename_);
    attrarr_.Swap(&other->attrarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TModuleAttrInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TModuleAttrInfo_descriptor_;
  metadata.reflection = TModuleAttrInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDebugExtraInfo::kModuleAttrInfoFieldNumber;
#endif  // !_MSC_VER

TDebugExtraInfo::TDebugExtraInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDebugExtraInfo)
}

void TDebugExtraInfo::InitAsDefaultInstance() {
}

TDebugExtraInfo::TDebugExtraInfo(const TDebugExtraInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDebugExtraInfo)
}

void TDebugExtraInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDebugExtraInfo::~TDebugExtraInfo() {
  // @@protoc_insertion_point(destructor:pb.TDebugExtraInfo)
  SharedDtor();
}

void TDebugExtraInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDebugExtraInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDebugExtraInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDebugExtraInfo_descriptor_;
}

const TDebugExtraInfo& TDebugExtraInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TDebugExtraInfo* TDebugExtraInfo::default_instance_ = NULL;

TDebugExtraInfo* TDebugExtraInfo::New() const {
  return new TDebugExtraInfo;
}

void TDebugExtraInfo::Clear() {
  moduleattrinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDebugExtraInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDebugExtraInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TModuleAttrInfo ModuleAttrInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ModuleAttrInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_moduleattrinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ModuleAttrInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDebugExtraInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDebugExtraInfo)
  return false;
#undef DO_
}

void TDebugExtraInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDebugExtraInfo)
  // repeated .pb.TModuleAttrInfo ModuleAttrInfo = 1;
  for (int i = 0; i < this->moduleattrinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->moduleattrinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDebugExtraInfo)
}

::google::protobuf::uint8* TDebugExtraInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDebugExtraInfo)
  // repeated .pb.TModuleAttrInfo ModuleAttrInfo = 1;
  for (int i = 0; i < this->moduleattrinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->moduleattrinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDebugExtraInfo)
  return target;
}

int TDebugExtraInfo::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TModuleAttrInfo ModuleAttrInfo = 1;
  total_size += 1 * this->moduleattrinfo_size();
  for (int i = 0; i < this->moduleattrinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->moduleattrinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDebugExtraInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDebugExtraInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDebugExtraInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDebugExtraInfo::MergeFrom(const TDebugExtraInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  moduleattrinfo_.MergeFrom(from.moduleattrinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDebugExtraInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDebugExtraInfo::CopyFrom(const TDebugExtraInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDebugExtraInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->moduleattrinfo())) return false;
  return true;
}

void TDebugExtraInfo::Swap(TDebugExtraInfo* other) {
  if (other != this) {
    moduleattrinfo_.Swap(&other->moduleattrinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDebugExtraInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDebugExtraInfo_descriptor_;
  metadata.reflection = TDebugExtraInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRankSingle::kHidFieldNumber;
const int TRankSingle::kRankFieldNumber;
#endif  // !_MSC_VER

TRankSingle::TRankSingle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRankSingle)
}

void TRankSingle::InitAsDefaultInstance() {
}

TRankSingle::TRankSingle(const TRankSingle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRankSingle)
}

void TRankSingle::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRankSingle::~TRankSingle() {
  // @@protoc_insertion_point(destructor:pb.TRankSingle)
  SharedDtor();
}

void TRankSingle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRankSingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRankSingle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRankSingle_descriptor_;
}

const TRankSingle& TRankSingle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TRankSingle* TRankSingle::default_instance_ = NULL;

TRankSingle* TRankSingle::New() const {
  return new TRankSingle;
}

void TRankSingle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TRankSingle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hid_, rank_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRankSingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRankSingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 2;
      case 2: {
        if (tag == 16) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRankSingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRankSingle)
  return false;
#undef DO_
}

void TRankSingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRankSingle)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // optional uint32 Rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRankSingle)
}

::google::protobuf::uint8* TRankSingle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRankSingle)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // optional uint32 Rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRankSingle)
  return target;
}

int TRankSingle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint32 Rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRankSingle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRankSingle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRankSingle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRankSingle::MergeFrom(const TRankSingle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRankSingle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRankSingle::CopyFrom(const TRankSingle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRankSingle::IsInitialized() const {

  return true;
}

void TRankSingle::Swap(TRankSingle* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRankSingle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRankSingle_descriptor_;
  metadata.reflection = TRankSingle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRankInfo::kRankSelfFieldNumber;
const int TRankInfo::kRankEnemyFieldNumber;
#endif  // !_MSC_VER

TRankInfo::TRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRankInfo)
}

void TRankInfo::InitAsDefaultInstance() {
}

TRankInfo::TRankInfo(const TRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRankInfo)
}

void TRankInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRankInfo::~TRankInfo() {
  // @@protoc_insertion_point(destructor:pb.TRankInfo)
  SharedDtor();
}

void TRankInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRankInfo_descriptor_;
}

const TRankInfo& TRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TRankInfo* TRankInfo::default_instance_ = NULL;

TRankInfo* TRankInfo::New() const {
  return new TRankInfo;
}

void TRankInfo::Clear() {
  rankself_.Clear();
  rankenemy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TRankSingle RankSelf = 1;
      case 1: {
        if (tag == 10) {
         parse_RankSelf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankself()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RankSelf;
        if (input->ExpectTag(18)) goto parse_RankEnemy;
        break;
      }

      // repeated .pb.TRankSingle RankEnemy = 2;
      case 2: {
        if (tag == 18) {
         parse_RankEnemy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankenemy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RankEnemy;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRankInfo)
  return false;
#undef DO_
}

void TRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRankInfo)
  // repeated .pb.TRankSingle RankSelf = 1;
  for (int i = 0; i < this->rankself_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankself(i), output);
  }

  // repeated .pb.TRankSingle RankEnemy = 2;
  for (int i = 0; i < this->rankenemy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rankenemy(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRankInfo)
}

::google::protobuf::uint8* TRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRankInfo)
  // repeated .pb.TRankSingle RankSelf = 1;
  for (int i = 0; i < this->rankself_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankself(i), target);
  }

  // repeated .pb.TRankSingle RankEnemy = 2;
  for (int i = 0; i < this->rankenemy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rankenemy(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRankInfo)
  return target;
}

int TRankInfo::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TRankSingle RankSelf = 1;
  total_size += 1 * this->rankself_size();
  for (int i = 0; i < this->rankself_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankself(i));
  }

  // repeated .pb.TRankSingle RankEnemy = 2;
  total_size += 1 * this->rankenemy_size();
  for (int i = 0; i < this->rankenemy_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankenemy(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRankInfo::MergeFrom(const TRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankself_.MergeFrom(from.rankself_);
  rankenemy_.MergeFrom(from.rankenemy_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRankInfo::CopyFrom(const TRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRankInfo::IsInitialized() const {

  return true;
}

void TRankInfo::Swap(TRankInfo* other) {
  if (other != this) {
    rankself_.Swap(&other->rankself_);
    rankenemy_.Swap(&other->rankenemy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRankInfo_descriptor_;
  metadata.reflection = TRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTDEnemy::kUnitArrFieldNumber;
const int TTDEnemy::kTimeInfoFieldNumber;
const int TTDEnemy::kSkillCounterFieldNumber;
#endif  // !_MSC_VER

TTDEnemy::TTDEnemy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTDEnemy)
}

void TTDEnemy::InitAsDefaultInstance() {
}

TTDEnemy::TTDEnemy(const TTDEnemy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTDEnemy)
}

void TTDEnemy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTDEnemy::~TTDEnemy() {
  // @@protoc_insertion_point(destructor:pb.TTDEnemy)
  SharedDtor();
}

void TTDEnemy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTDEnemy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTDEnemy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTDEnemy_descriptor_;
}

const TTDEnemy& TTDEnemy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TTDEnemy* TTDEnemy::default_instance_ = NULL;

TTDEnemy* TTDEnemy::New() const {
  return new TTDEnemy;
}

void TTDEnemy::Clear() {
  unitarr_.Clear();
  timeinfo_.Clear();
  skillcounter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTDEnemy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTDEnemy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUnitInfo UnitArr = 1;
      case 1: {
        if (tag == 10) {
         parse_UnitArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UnitArr;
        if (input->ExpectTag(18)) goto parse_TimeInfo;
        break;
      }

      // repeated .pb.TTDTimeInfo TimeInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_TimeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TimeInfo;
        if (input->ExpectTag(26)) goto parse_SkillCounter;
        break;
      }

      // repeated .pb.TSkillCount SkillCounter = 3;
      case 3: {
        if (tag == 26) {
         parse_SkillCounter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillcounter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SkillCounter;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTDEnemy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTDEnemy)
  return false;
#undef DO_
}

void TTDEnemy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTDEnemy)
  // repeated .pb.TUnitInfo UnitArr = 1;
  for (int i = 0; i < this->unitarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unitarr(i), output);
  }

  // repeated .pb.TTDTimeInfo TimeInfo = 2;
  for (int i = 0; i < this->timeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->timeinfo(i), output);
  }

  // repeated .pb.TSkillCount SkillCounter = 3;
  for (int i = 0; i < this->skillcounter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skillcounter(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTDEnemy)
}

::google::protobuf::uint8* TTDEnemy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTDEnemy)
  // repeated .pb.TUnitInfo UnitArr = 1;
  for (int i = 0; i < this->unitarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unitarr(i), target);
  }

  // repeated .pb.TTDTimeInfo TimeInfo = 2;
  for (int i = 0; i < this->timeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->timeinfo(i), target);
  }

  // repeated .pb.TSkillCount SkillCounter = 3;
  for (int i = 0; i < this->skillcounter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skillcounter(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTDEnemy)
  return target;
}

int TTDEnemy::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TUnitInfo UnitArr = 1;
  total_size += 1 * this->unitarr_size();
  for (int i = 0; i < this->unitarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitarr(i));
  }

  // repeated .pb.TTDTimeInfo TimeInfo = 2;
  total_size += 1 * this->timeinfo_size();
  for (int i = 0; i < this->timeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timeinfo(i));
  }

  // repeated .pb.TSkillCount SkillCounter = 3;
  total_size += 1 * this->skillcounter_size();
  for (int i = 0; i < this->skillcounter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillcounter(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTDEnemy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTDEnemy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTDEnemy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTDEnemy::MergeFrom(const TTDEnemy& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitarr_.MergeFrom(from.unitarr_);
  timeinfo_.MergeFrom(from.timeinfo_);
  skillcounter_.MergeFrom(from.skillcounter_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTDEnemy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTDEnemy::CopyFrom(const TTDEnemy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTDEnemy::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->unitarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->timeinfo())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->skillcounter())) return false;
  return true;
}

void TTDEnemy::Swap(TTDEnemy* other) {
  if (other != this) {
    unitarr_.Swap(&other->unitarr_);
    timeinfo_.Swap(&other->timeinfo_);
    skillcounter_.Swap(&other->skillcounter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTDEnemy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTDEnemy_descriptor_;
  metadata.reflection = TTDEnemy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTDFriend::kUnitArrFieldNumber;
const int TTDFriend::kEnergyLimitFieldNumber;
const int TTDFriend::kPointBuffArrFieldNumber;
const int TTDFriend::kEnergyTypeFieldNumber;
const int TTDFriend::kMaxArmy1NumFieldNumber;
#endif  // !_MSC_VER

TTDFriend::TTDFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTDFriend)
}

void TTDFriend::InitAsDefaultInstance() {
}

TTDFriend::TTDFriend(const TTDFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTDFriend)
}

void TTDFriend::SharedCtor() {
  _cached_size_ = 0;
  energylimit_ = 0;
  energytype_ = 0;
  maxarmy1num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTDFriend::~TTDFriend() {
  // @@protoc_insertion_point(destructor:pb.TTDFriend)
  SharedDtor();
}

void TTDFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTDFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTDFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTDFriend_descriptor_;
}

const TTDFriend& TTDFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TTDFriend* TTDFriend::default_instance_ = NULL;

TTDFriend* TTDFriend::New() const {
  return new TTDFriend;
}

void TTDFriend::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTDFriend*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(energylimit_, maxarmy1num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  unitarr_.Clear();
  pointbuffarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTDFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTDFriend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUnitInfo UnitArr = 1;
      case 1: {
        if (tag == 10) {
         parse_UnitArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UnitArr;
        if (input->ExpectTag(16)) goto parse_EnergyLimit;
        break;
      }

      // optional int32 EnergyLimit = 2;
      case 2: {
        if (tag == 16) {
         parse_EnergyLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energylimit_)));
          set_has_energylimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PointBuffArr;
        break;
      }

      // repeated .pb.TPointBuff PointBuffArr = 3;
      case 3: {
        if (tag == 26) {
         parse_PointBuffArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pointbuffarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PointBuffArr;
        if (input->ExpectTag(32)) goto parse_EnergyType;
        break;
      }

      // optional int32 EnergyType = 4;
      case 4: {
        if (tag == 32) {
         parse_EnergyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energytype_)));
          set_has_energytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_MaxArmy1Num;
        break;
      }

      // optional uint32 MaxArmy1Num = 5;
      case 5: {
        if (tag == 40) {
         parse_MaxArmy1Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxarmy1num_)));
          set_has_maxarmy1num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTDFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTDFriend)
  return false;
#undef DO_
}

void TTDFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTDFriend)
  // repeated .pb.TUnitInfo UnitArr = 1;
  for (int i = 0; i < this->unitarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unitarr(i), output);
  }

  // optional int32 EnergyLimit = 2;
  if (has_energylimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->energylimit(), output);
  }

  // repeated .pb.TPointBuff PointBuffArr = 3;
  for (int i = 0; i < this->pointbuffarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pointbuffarr(i), output);
  }

  // optional int32 EnergyType = 4;
  if (has_energytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->energytype(), output);
  }

  // optional uint32 MaxArmy1Num = 5;
  if (has_maxarmy1num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maxarmy1num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTDFriend)
}

::google::protobuf::uint8* TTDFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTDFriend)
  // repeated .pb.TUnitInfo UnitArr = 1;
  for (int i = 0; i < this->unitarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unitarr(i), target);
  }

  // optional int32 EnergyLimit = 2;
  if (has_energylimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->energylimit(), target);
  }

  // repeated .pb.TPointBuff PointBuffArr = 3;
  for (int i = 0; i < this->pointbuffarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pointbuffarr(i), target);
  }

  // optional int32 EnergyType = 4;
  if (has_energytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->energytype(), target);
  }

  // optional uint32 MaxArmy1Num = 5;
  if (has_maxarmy1num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maxarmy1num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTDFriend)
  return target;
}

int TTDFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 EnergyLimit = 2;
    if (has_energylimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energylimit());
    }

    // optional int32 EnergyType = 4;
    if (has_energytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energytype());
    }

    // optional uint32 MaxArmy1Num = 5;
    if (has_maxarmy1num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxarmy1num());
    }

  }
  // repeated .pb.TUnitInfo UnitArr = 1;
  total_size += 1 * this->unitarr_size();
  for (int i = 0; i < this->unitarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitarr(i));
  }

  // repeated .pb.TPointBuff PointBuffArr = 3;
  total_size += 1 * this->pointbuffarr_size();
  for (int i = 0; i < this->pointbuffarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pointbuffarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTDFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTDFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTDFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTDFriend::MergeFrom(const TTDFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitarr_.MergeFrom(from.unitarr_);
  pointbuffarr_.MergeFrom(from.pointbuffarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_energylimit()) {
      set_energylimit(from.energylimit());
    }
    if (from.has_energytype()) {
      set_energytype(from.energytype());
    }
    if (from.has_maxarmy1num()) {
      set_maxarmy1num(from.maxarmy1num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTDFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTDFriend::CopyFrom(const TTDFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTDFriend::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->unitarr())) return false;
  return true;
}

void TTDFriend::Swap(TTDFriend* other) {
  if (other != this) {
    unitarr_.Swap(&other->unitarr_);
    std::swap(energylimit_, other->energylimit_);
    pointbuffarr_.Swap(&other->pointbuffarr_);
    std::swap(energytype_, other->energytype_);
    std::swap(maxarmy1num_, other->maxarmy1num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTDFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTDFriend_descriptor_;
  metadata.reflection = TTDFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUnitInfo::kHidFieldNumber;
const int TUnitInfo::kHtidFieldNumber;
const int TUnitInfo::kPosFieldNumber;
const int TUnitInfo::kLevelFieldNumber;
const int TUnitInfo::kCurHpFieldNumber;
const int TUnitInfo::kCurRageFieldNumber;
const int TUnitInfo::kSkillArrFieldNumber;
const int TUnitInfo::kAttrArrFieldNumber;
const int TUnitInfo::kBaseSizeScaleFieldNumber;
const int TUnitInfo::kTroopIdFieldNumber;
const int TUnitInfo::kTroopNumFieldNumber;
const int TUnitInfo::kStarFieldNumber;
const int TUnitInfo::kAdvLvFieldNumber;
const int TUnitInfo::kDebugInfoFieldNumber;
const int TUnitInfo::kFightForceFieldNumber;
const int TUnitInfo::kLinkToFieldNumber;
const int TUnitInfo::kWarRidingFieldNumber;
const int TUnitInfo::kChainSoulToFieldNumber;
const int TUnitInfo::kBattleSoulFieldNumber;
#endif  // !_MSC_VER

TUnitInfo::TUnitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUnitInfo)
}

void TUnitInfo::InitAsDefaultInstance() {
  debuginfo_ = const_cast< ::pb::TDebugExtraInfo*>(&::pb::TDebugExtraInfo::default_instance());
  warriding_ = const_cast< ::pb::TWarRidingInfo*>(&::pb::TWarRidingInfo::default_instance());
  battlesoul_ = const_cast< ::pb::TBattleSoulInfo*>(&::pb::TBattleSoulInfo::default_instance());
}

TUnitInfo::TUnitInfo(const TUnitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUnitInfo)
}

void TUnitInfo::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  htid_ = 0u;
  pos_ = 0u;
  level_ = 0u;
  curhp_ = GOOGLE_ULONGLONG(0);
  currage_ = 0u;
  basesizescale_ = 0u;
  troopid_ = 0u;
  troopnum_ = 0u;
  star_ = 0u;
  advlv_ = 0u;
  debuginfo_ = NULL;
  fightforce_ = GOOGLE_ULONGLONG(0);
  linkto_ = 0u;
  warriding_ = NULL;
  chainsoulto_ = 0u;
  battlesoul_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUnitInfo::~TUnitInfo() {
  // @@protoc_insertion_point(destructor:pb.TUnitInfo)
  SharedDtor();
}

void TUnitInfo::SharedDtor() {
  if (this != default_instance_) {
    delete debuginfo_;
    delete warriding_;
    delete battlesoul_;
  }
}

void TUnitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUnitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUnitInfo_descriptor_;
}

const TUnitInfo& TUnitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TUnitInfo* TUnitInfo::default_instance_ = NULL;

TUnitInfo* TUnitInfo::New() const {
  return new TUnitInfo;
}

void TUnitInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUnitInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(hid_, curhp_);
    currage_ = 0u;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(troopid_, advlv_);
    basesizescale_ = 0u;
    if (has_debuginfo()) {
      if (debuginfo_ != NULL) debuginfo_->::pb::TDebugExtraInfo::Clear();
    }
    fightforce_ = GOOGLE_ULONGLONG(0);
    linkto_ = 0u;
  }
  if (_has_bits_[16 / 32] & 458752) {
    if (has_warriding()) {
      if (warriding_ != NULL) warriding_->::pb::TWarRidingInfo::Clear();
    }
    chainsoulto_ = 0u;
    if (has_battlesoul()) {
      if (battlesoul_ != NULL) battlesoul_->::pb::TBattleSoulInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  skillarr_.Clear();
  attrarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUnitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUnitInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Htid;
        break;
      }

      // required uint32 Htid = 2;
      case 2: {
        if (tag == 16) {
         parse_Htid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Pos;
        break;
      }

      // required uint32 Pos = 3;
      case 3: {
        if (tag == 24) {
         parse_Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Level;
        break;
      }

      // required uint32 Level = 4;
      case 4: {
        if (tag == 32) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CurHp;
        break;
      }

      // optional uint64 CurHp = 5;
      case 5: {
        if (tag == 40) {
         parse_CurHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_CurRage;
        break;
      }

      // optional uint32 CurRage = 6;
      case 6: {
        if (tag == 48) {
         parse_CurRage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currage_)));
          set_has_currage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_SkillArr;
        break;
      }

      // repeated .pb.TSkillAttribute SkillArr = 7;
      case 7: {
        if (tag == 58) {
         parse_SkillArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_SkillArr;
        if (input->ExpectTag(66)) goto parse_AttrArr;
        break;
      }

      // repeated .pb.TAttribute AttrArr = 8;
      case 8: {
        if (tag == 66) {
         parse_AttrArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_AttrArr;
        if (input->ExpectTag(72)) goto parse_BaseSizeScale;
        break;
      }

      // optional uint32 BaseSizeScale = 9;
      case 9: {
        if (tag == 72) {
         parse_BaseSizeScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &basesizescale_)));
          set_has_basesizescale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_TroopId;
        break;
      }

      // optional uint32 TroopId = 10;
      case 10: {
        if (tag == 80) {
         parse_TroopId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &troopid_)));
          set_has_troopid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_TroopNum;
        break;
      }

      // optional uint32 TroopNum = 11;
      case 11: {
        if (tag == 88) {
         parse_TroopNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &troopnum_)));
          set_has_troopnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_Star;
        break;
      }

      // optional uint32 Star = 13;
      case 13: {
        if (tag == 104) {
         parse_Star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_AdvLv;
        break;
      }

      // optional uint32 AdvLv = 14;
      case 14: {
        if (tag == 112) {
         parse_AdvLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advlv_)));
          set_has_advlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_DebugInfo;
        break;
      }

      // optional .pb.TDebugExtraInfo DebugInfo = 15;
      case 15: {
        if (tag == 122) {
         parse_DebugInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debuginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 16;
      case 16: {
        if (tag == 128) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_LinkTo;
        break;
      }

      // optional uint32 LinkTo = 17;
      case 17: {
        if (tag == 136) {
         parse_LinkTo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linkto_)));
          set_has_linkto();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_WarRiding;
        break;
      }

      // optional .pb.TWarRidingInfo WarRiding = 18;
      case 18: {
        if (tag == 146) {
         parse_WarRiding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_warriding()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_ChainSoulTo;
        break;
      }

      // optional uint32 ChainSoulTo = 19;
      case 19: {
        if (tag == 152) {
         parse_ChainSoulTo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chainsoulto_)));
          set_has_chainsoulto();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_BattleSoul;
        break;
      }

      // optional .pb.TBattleSoulInfo BattleSoul = 20;
      case 20: {
        if (tag == 162) {
         parse_BattleSoul:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlesoul()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUnitInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUnitInfo)
  return false;
#undef DO_
}

void TUnitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUnitInfo)
  // required uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // required uint32 Htid = 2;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->htid(), output);
  }

  // required uint32 Pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  // required uint32 Level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint64 CurHp = 5;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->curhp(), output);
  }

  // optional uint32 CurRage = 6;
  if (has_currage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->currage(), output);
  }

  // repeated .pb.TSkillAttribute SkillArr = 7;
  for (int i = 0; i < this->skillarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->skillarr(i), output);
  }

  // repeated .pb.TAttribute AttrArr = 8;
  for (int i = 0; i < this->attrarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->attrarr(i), output);
  }

  // optional uint32 BaseSizeScale = 9;
  if (has_basesizescale()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->basesizescale(), output);
  }

  // optional uint32 TroopId = 10;
  if (has_troopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->troopid(), output);
  }

  // optional uint32 TroopNum = 11;
  if (has_troopnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->troopnum(), output);
  }

  // optional uint32 Star = 13;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->star(), output);
  }

  // optional uint32 AdvLv = 14;
  if (has_advlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->advlv(), output);
  }

  // optional .pb.TDebugExtraInfo DebugInfo = 15;
  if (has_debuginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->debuginfo(), output);
  }

  // optional uint64 FightForce = 16;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->fightforce(), output);
  }

  // optional uint32 LinkTo = 17;
  if (has_linkto()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->linkto(), output);
  }

  // optional .pb.TWarRidingInfo WarRiding = 18;
  if (has_warriding()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->warriding(), output);
  }

  // optional uint32 ChainSoulTo = 19;
  if (has_chainsoulto()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->chainsoulto(), output);
  }

  // optional .pb.TBattleSoulInfo BattleSoul = 20;
  if (has_battlesoul()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->battlesoul(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUnitInfo)
}

::google::protobuf::uint8* TUnitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUnitInfo)
  // required uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // required uint32 Htid = 2;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->htid(), target);
  }

  // required uint32 Pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  // required uint32 Level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint64 CurHp = 5;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->curhp(), target);
  }

  // optional uint32 CurRage = 6;
  if (has_currage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->currage(), target);
  }

  // repeated .pb.TSkillAttribute SkillArr = 7;
  for (int i = 0; i < this->skillarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->skillarr(i), target);
  }

  // repeated .pb.TAttribute AttrArr = 8;
  for (int i = 0; i < this->attrarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->attrarr(i), target);
  }

  // optional uint32 BaseSizeScale = 9;
  if (has_basesizescale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->basesizescale(), target);
  }

  // optional uint32 TroopId = 10;
  if (has_troopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->troopid(), target);
  }

  // optional uint32 TroopNum = 11;
  if (has_troopnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->troopnum(), target);
  }

  // optional uint32 Star = 13;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->star(), target);
  }

  // optional uint32 AdvLv = 14;
  if (has_advlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->advlv(), target);
  }

  // optional .pb.TDebugExtraInfo DebugInfo = 15;
  if (has_debuginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->debuginfo(), target);
  }

  // optional uint64 FightForce = 16;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->fightforce(), target);
  }

  // optional uint32 LinkTo = 17;
  if (has_linkto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->linkto(), target);
  }

  // optional .pb.TWarRidingInfo WarRiding = 18;
  if (has_warriding()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->warriding(), target);
  }

  // optional uint32 ChainSoulTo = 19;
  if (has_chainsoulto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->chainsoulto(), target);
  }

  // optional .pb.TBattleSoulInfo BattleSoul = 20;
  if (has_battlesoul()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->battlesoul(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUnitInfo)
  return target;
}

int TUnitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // required uint32 Htid = 2;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

    // required uint32 Pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // required uint32 Level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 CurHp = 5;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curhp());
    }

    // optional uint32 CurRage = 6;
    if (has_currage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currage());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 BaseSizeScale = 9;
    if (has_basesizescale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->basesizescale());
    }

    // optional uint32 TroopId = 10;
    if (has_troopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->troopid());
    }

    // optional uint32 TroopNum = 11;
    if (has_troopnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->troopnum());
    }

    // optional uint32 Star = 13;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional uint32 AdvLv = 14;
    if (has_advlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advlv());
    }

    // optional .pb.TDebugExtraInfo DebugInfo = 15;
    if (has_debuginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->debuginfo());
    }

    // optional uint64 FightForce = 16;
    if (has_fightforce()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

    // optional uint32 LinkTo = 17;
    if (has_linkto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linkto());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .pb.TWarRidingInfo WarRiding = 18;
    if (has_warriding()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->warriding());
    }

    // optional uint32 ChainSoulTo = 19;
    if (has_chainsoulto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chainsoulto());
    }

    // optional .pb.TBattleSoulInfo BattleSoul = 20;
    if (has_battlesoul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlesoul());
    }

  }
  // repeated .pb.TSkillAttribute SkillArr = 7;
  total_size += 1 * this->skillarr_size();
  for (int i = 0; i < this->skillarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillarr(i));
  }

  // repeated .pb.TAttribute AttrArr = 8;
  total_size += 1 * this->attrarr_size();
  for (int i = 0; i < this->attrarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUnitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUnitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUnitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUnitInfo::MergeFrom(const TUnitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillarr_.MergeFrom(from.skillarr_);
  attrarr_.MergeFrom(from.attrarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_htid()) {
      set_htid(from.htid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_currage()) {
      set_currage(from.currage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_basesizescale()) {
      set_basesizescale(from.basesizescale());
    }
    if (from.has_troopid()) {
      set_troopid(from.troopid());
    }
    if (from.has_troopnum()) {
      set_troopnum(from.troopnum());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_advlv()) {
      set_advlv(from.advlv());
    }
    if (from.has_debuginfo()) {
      mutable_debuginfo()->::pb::TDebugExtraInfo::MergeFrom(from.debuginfo());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
    if (from.has_linkto()) {
      set_linkto(from.linkto());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_warriding()) {
      mutable_warriding()->::pb::TWarRidingInfo::MergeFrom(from.warriding());
    }
    if (from.has_chainsoulto()) {
      set_chainsoulto(from.chainsoulto());
    }
    if (from.has_battlesoul()) {
      mutable_battlesoul()->::pb::TBattleSoulInfo::MergeFrom(from.battlesoul());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUnitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUnitInfo::CopyFrom(const TUnitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUnitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->skillarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->attrarr())) return false;
  if (has_debuginfo()) {
    if (!this->debuginfo().IsInitialized()) return false;
  }
  return true;
}

void TUnitInfo::Swap(TUnitInfo* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(htid_, other->htid_);
    std::swap(pos_, other->pos_);
    std::swap(level_, other->level_);
    std::swap(curhp_, other->curhp_);
    std::swap(currage_, other->currage_);
    skillarr_.Swap(&other->skillarr_);
    attrarr_.Swap(&other->attrarr_);
    std::swap(basesizescale_, other->basesizescale_);
    std::swap(troopid_, other->troopid_);
    std::swap(troopnum_, other->troopnum_);
    std::swap(star_, other->star_);
    std::swap(advlv_, other->advlv_);
    std::swap(debuginfo_, other->debuginfo_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(linkto_, other->linkto_);
    std::swap(warriding_, other->warriding_);
    std::swap(chainsoulto_, other->chainsoulto_);
    std::swap(battlesoul_, other->battlesoul_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUnitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUnitInfo_descriptor_;
  metadata.reflection = TUnitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArmyInfo::kUnitArrFieldNumber;
const int TArmyInfo::kPlayerNameFieldNumber;
const int TArmyInfo::kFightForceFieldNumber;
const int TArmyInfo::kHeadIdFieldNumber;
const int TArmyInfo::kUidFieldNumber;
const int TArmyInfo::kArmySkillArrFieldNumber;
const int TArmyInfo::kArmyIdFieldNumber;
#endif  // !_MSC_VER

TArmyInfo::TArmyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArmyInfo)
}

void TArmyInfo::InitAsDefaultInstance() {
}

TArmyInfo::TArmyInfo(const TArmyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArmyInfo)
}

void TArmyInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fightforce_ = GOOGLE_ULONGLONG(0);
  headid_ = 0u;
  uid_ = GOOGLE_ULONGLONG(0);
  armyid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArmyInfo::~TArmyInfo() {
  // @@protoc_insertion_point(destructor:pb.TArmyInfo)
  SharedDtor();
}

void TArmyInfo::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void TArmyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArmyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArmyInfo_descriptor_;
}

const TArmyInfo& TArmyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TArmyInfo* TArmyInfo::default_instance_ = NULL;

TArmyInfo* TArmyInfo::New() const {
  return new TArmyInfo;
}

void TArmyInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TArmyInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 94) {
    ZR_(fightforce_, armyid_);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        playername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  unitarr_.Clear();
  armyskillarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArmyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArmyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUnitInfo UnitArr = 1;
      case 1: {
        if (tag == 10) {
         parse_UnitArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UnitArr;
        if (input->ExpectTag(18)) goto parse_PlayerName;
        break;
      }

      // optional string PlayerName = 2;
      case 2: {
        if (tag == 18) {
         parse_PlayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "playername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 3;
      case 3: {
        if (tag == 24) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_HeadId;
        break;
      }

      // optional uint32 HeadId = 4;
      case 4: {
        if (tag == 32) {
         parse_HeadId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Uid;
        break;
      }

      // optional uint64 Uid = 5;
      case 5: {
        if (tag == 40) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ArmySkillArr;
        break;
      }

      // repeated .pb.TSkillAttribute ArmySkillArr = 6;
      case 6: {
        if (tag == 50) {
         parse_ArmySkillArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_armyskillarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ArmySkillArr;
        if (input->ExpectTag(56)) goto parse_ArmyId;
        break;
      }

      // optional int32 ArmyId = 7;
      case 7: {
        if (tag == 56) {
         parse_ArmyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armyid_)));
          set_has_armyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArmyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArmyInfo)
  return false;
#undef DO_
}

void TArmyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArmyInfo)
  // repeated .pb.TUnitInfo UnitArr = 1;
  for (int i = 0; i < this->unitarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unitarr(i), output);
  }

  // optional string PlayerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->playername(), output);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fightforce(), output);
  }

  // optional uint32 HeadId = 4;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->headid(), output);
  }

  // optional uint64 Uid = 5;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->uid(), output);
  }

  // repeated .pb.TSkillAttribute ArmySkillArr = 6;
  for (int i = 0; i < this->armyskillarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->armyskillarr(i), output);
  }

  // optional int32 ArmyId = 7;
  if (has_armyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->armyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArmyInfo)
}

::google::protobuf::uint8* TArmyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArmyInfo)
  // repeated .pb.TUnitInfo UnitArr = 1;
  for (int i = 0; i < this->unitarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unitarr(i), target);
  }

  // optional string PlayerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "playername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fightforce(), target);
  }

  // optional uint32 HeadId = 4;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->headid(), target);
  }

  // optional uint64 Uid = 5;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->uid(), target);
  }

  // repeated .pb.TSkillAttribute ArmySkillArr = 6;
  for (int i = 0; i < this->armyskillarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->armyskillarr(i), target);
  }

  // optional int32 ArmyId = 7;
  if (has_armyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->armyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArmyInfo)
  return target;
}

int TArmyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string PlayerName = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional uint64 FightForce = 3;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

    // optional uint32 HeadId = 4;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headid());
    }

    // optional uint64 Uid = 5;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional int32 ArmyId = 7;
    if (has_armyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armyid());
    }

  }
  // repeated .pb.TUnitInfo UnitArr = 1;
  total_size += 1 * this->unitarr_size();
  for (int i = 0; i < this->unitarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitarr(i));
  }

  // repeated .pb.TSkillAttribute ArmySkillArr = 6;
  total_size += 1 * this->armyskillarr_size();
  for (int i = 0; i < this->armyskillarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->armyskillarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArmyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArmyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArmyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArmyInfo::MergeFrom(const TArmyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitarr_.MergeFrom(from.unitarr_);
  armyskillarr_.MergeFrom(from.armyskillarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_armyid()) {
      set_armyid(from.armyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArmyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArmyInfo::CopyFrom(const TArmyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArmyInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->unitarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->armyskillarr())) return false;
  return true;
}

void TArmyInfo::Swap(TArmyInfo* other) {
  if (other != this) {
    unitarr_.Swap(&other->unitarr_);
    std::swap(playername_, other->playername_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(headid_, other->headid_);
    std::swap(uid_, other->uid_);
    armyskillarr_.Swap(&other->armyskillarr_);
    std::swap(armyid_, other->armyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArmyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArmyInfo_descriptor_;
  metadata.reflection = TArmyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSceneInfo::kConfNameFieldNumber;
const int TSceneInfo::kConfIndexFieldNumber;
const int TSceneInfo::kTimeLimitFieldNumber;
const int TSceneInfo::kCutSceneMethodFieldNumber;
#endif  // !_MSC_VER

TSceneInfo::TSceneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSceneInfo)
}

void TSceneInfo::InitAsDefaultInstance() {
}

TSceneInfo::TSceneInfo(const TSceneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSceneInfo)
}

void TSceneInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  confindex_ = 0u;
  timelimit_ = 0u;
  cutscenemethod_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSceneInfo::~TSceneInfo() {
  // @@protoc_insertion_point(destructor:pb.TSceneInfo)
  SharedDtor();
}

void TSceneInfo::SharedDtor() {
  if (confname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete confname_;
  }
  if (this != default_instance_) {
  }
}

void TSceneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSceneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSceneInfo_descriptor_;
}

const TSceneInfo& TSceneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TSceneInfo* TSceneInfo::default_instance_ = NULL;

TSceneInfo* TSceneInfo::New() const {
  return new TSceneInfo;
}

void TSceneInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSceneInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(confindex_, cutscenemethod_);
    if (has_confname()) {
      if (confname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        confname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSceneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSceneInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ConfName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_confname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->confname().data(), this->confname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "confname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ConfIndex;
        break;
      }

      // required uint32 ConfIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_ConfIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confindex_)));
          set_has_confindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TimeLimit;
        break;
      }

      // required uint32 TimeLimit = 3;
      case 3: {
        if (tag == 24) {
         parse_TimeLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timelimit_)));
          set_has_timelimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_CutSceneMethod;
        break;
      }

      // optional uint32 CutSceneMethod = 4;
      case 4: {
        if (tag == 32) {
         parse_CutSceneMethod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cutscenemethod_)));
          set_has_cutscenemethod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSceneInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSceneInfo)
  return false;
#undef DO_
}

void TSceneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSceneInfo)
  // required string ConfName = 1;
  if (has_confname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confname().data(), this->confname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "confname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->confname(), output);
  }

  // required uint32 ConfIndex = 2;
  if (has_confindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->confindex(), output);
  }

  // required uint32 TimeLimit = 3;
  if (has_timelimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timelimit(), output);
  }

  // optional uint32 CutSceneMethod = 4;
  if (has_cutscenemethod()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cutscenemethod(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSceneInfo)
}

::google::protobuf::uint8* TSceneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSceneInfo)
  // required string ConfName = 1;
  if (has_confname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->confname().data(), this->confname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "confname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->confname(), target);
  }

  // required uint32 ConfIndex = 2;
  if (has_confindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->confindex(), target);
  }

  // required uint32 TimeLimit = 3;
  if (has_timelimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timelimit(), target);
  }

  // optional uint32 CutSceneMethod = 4;
  if (has_cutscenemethod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cutscenemethod(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSceneInfo)
  return target;
}

int TSceneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ConfName = 1;
    if (has_confname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->confname());
    }

    // required uint32 ConfIndex = 2;
    if (has_confindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->confindex());
    }

    // required uint32 TimeLimit = 3;
    if (has_timelimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timelimit());
    }

    // optional uint32 CutSceneMethod = 4;
    if (has_cutscenemethod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cutscenemethod());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSceneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSceneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSceneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSceneInfo::MergeFrom(const TSceneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confname()) {
      set_confname(from.confname());
    }
    if (from.has_confindex()) {
      set_confindex(from.confindex());
    }
    if (from.has_timelimit()) {
      set_timelimit(from.timelimit());
    }
    if (from.has_cutscenemethod()) {
      set_cutscenemethod(from.cutscenemethod());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSceneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSceneInfo::CopyFrom(const TSceneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSceneInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TSceneInfo::Swap(TSceneInfo* other) {
  if (other != this) {
    std::swap(confname_, other->confname_);
    std::swap(confindex_, other->confindex_);
    std::swap(timelimit_, other->timelimit_);
    std::swap(cutscenemethod_, other->cutscenemethod_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSceneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSceneInfo_descriptor_;
  metadata.reflection = TSceneInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TExtraOption::kNeedAutoFieldNumber;
const int TExtraOption::kLayerHideAutoFieldNumber;
const int TExtraOption::kLayerHideHeadShotFieldNumber;
const int TExtraOption::kLayerHideSkipFieldNumber;
const int TExtraOption::kLayerHideSpeedFieldNumber;
const int TExtraOption::kLayerHidePauseFieldNumber;
const int TExtraOption::kIsFirstAttackFieldNumber;
const int TExtraOption::kNeedDoStatisticsFieldNumber;
const int TExtraOption::kLayerSkipHideTimeFieldNumber;
const int TExtraOption::kUnlockLevelFieldNumber;
const int TExtraOption::kLayerHideTimeFieldNumber;
const int TExtraOption::kLayerHideCoinFieldNumber;
const int TExtraOption::kIsStoryBattleFieldNumber;
const int TExtraOption::kLayerHideCameraOffsetFieldNumber;
const int TExtraOption::kLayerHideScreenNumFieldNumber;
const int TExtraOption::kLayerHideChatFieldNumber;
const int TExtraOption::kLayerHideRestartFieldNumber;
const int TExtraOption::kSpecialEntranceFieldNumber;
#endif  // !_MSC_VER

TExtraOption::TExtraOption()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TExtraOption)
}

void TExtraOption::InitAsDefaultInstance() {
  specialentrance_ = const_cast< ::pb::TSpecialEntrance*>(&::pb::TSpecialEntrance::default_instance());
}

TExtraOption::TExtraOption(const TExtraOption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TExtraOption)
}

void TExtraOption::SharedCtor() {
  _cached_size_ = 0;
  needauto_ = false;
  layerhideauto_ = false;
  layerhideheadshot_ = false;
  layerhideskip_ = false;
  layerhidespeed_ = false;
  layerhidepause_ = false;
  isfirstattack_ = false;
  needdostatistics_ = false;
  layerskiphidetime_ = 0u;
  unlocklevel_ = 0u;
  layerhidetime_ = false;
  layerhidecoin_ = false;
  isstorybattle_ = false;
  layerhidecameraoffset_ = false;
  layerhidescreennum_ = false;
  layerhidechat_ = false;
  layerhiderestart_ = false;
  specialentrance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TExtraOption::~TExtraOption() {
  // @@protoc_insertion_point(destructor:pb.TExtraOption)
  SharedDtor();
}

void TExtraOption::SharedDtor() {
  if (this != default_instance_) {
    delete specialentrance_;
  }
}

void TExtraOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TExtraOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TExtraOption_descriptor_;
}

const TExtraOption& TExtraOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TExtraOption* TExtraOption::default_instance_ = NULL;

TExtraOption* TExtraOption::New() const {
  return new TExtraOption;
}

void TExtraOption::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TExtraOption*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(needauto_, needdostatistics_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(layerskiphidetime_, layerhidechat_);
  }
  if (_has_bits_[16 / 32] & 196608) {
    layerhiderestart_ = false;
    if (has_specialentrance()) {
      if (specialentrance_ != NULL) specialentrance_->::pb::TSpecialEntrance::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TExtraOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TExtraOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool NeedAuto = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needauto_)));
          set_has_needauto();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LayerHideAuto;
        break;
      }

      // optional bool LayerHideAuto = 2;
      case 2: {
        if (tag == 16) {
         parse_LayerHideAuto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layerhideauto_)));
          set_has_layerhideauto();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_LayerHideHeadShot;
        break;
      }

      // optional bool LayerHideHeadShot = 3;
      case 3: {
        if (tag == 24) {
         parse_LayerHideHeadShot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layerhideheadshot_)));
          set_has_layerhideheadshot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_LayerHideSkip;
        break;
      }

      // optional bool LayerHideSkip = 4;
      case 4: {
        if (tag == 32) {
         parse_LayerHideSkip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layerhideskip_)));
          set_has_layerhideskip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_LayerHideSpeed;
        break;
      }

      // optional bool LayerHideSpeed = 5;
      case 5: {
        if (tag == 40) {
         parse_LayerHideSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layerhidespeed_)));
          set_has_layerhidespeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_LayerHidePause;
        break;
      }

      // optional bool LayerHidePause = 6;
      case 6: {
        if (tag == 48) {
         parse_LayerHidePause:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layerhidepause_)));
          set_has_layerhidepause();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_IsFirstAttack;
        break;
      }

      // optional bool IsFirstAttack = 7;
      case 7: {
        if (tag == 56) {
         parse_IsFirstAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfirstattack_)));
          set_has_isfirstattack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_NeedDoStatistics;
        break;
      }

      // optional bool NeedDoStatistics = 8;
      case 8: {
        if (tag == 64) {
         parse_NeedDoStatistics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needdostatistics_)));
          set_has_needdostatistics();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_LayerSkipHideTime;
        break;
      }

      // optional uint32 LayerSkipHideTime = 9;
      case 9: {
        if (tag == 72) {
         parse_LayerSkipHideTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerskiphidetime_)));
          set_has_layerskiphidetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_UnlockLevel;
        break;
      }

      // optional uint32 UnlockLevel = 10;
      case 10: {
        if (tag == 80) {
         parse_UnlockLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlocklevel_)));
          set_has_unlocklevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_LayerHideTime;
        break;
      }

      // optional bool LayerHideTime = 11;
      case 11: {
        if (tag == 88) {
         parse_LayerHideTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layerhidetime_)));
          set_has_layerhidetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_LayerHideCoin;
        break;
      }

      // optional bool LayerHideCoin = 12;
      case 12: {
        if (tag == 96) {
         parse_LayerHideCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layerhidecoin_)));
          set_has_layerhidecoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_IsStoryBattle;
        break;
      }

      // optional bool IsStoryBattle = 13;
      case 13: {
        if (tag == 104) {
         parse_IsStoryBattle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isstorybattle_)));
          set_has_isstorybattle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_LayerHideCameraOffset;
        break;
      }

      // optional bool LayerHideCameraOffset = 14;
      case 14: {
        if (tag == 112) {
         parse_LayerHideCameraOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layerhidecameraoffset_)));
          set_has_layerhidecameraoffset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_LayerHideScreenNum;
        break;
      }

      // optional bool LayerHideScreenNum = 15;
      case 15: {
        if (tag == 120) {
         parse_LayerHideScreenNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layerhidescreennum_)));
          set_has_layerhidescreennum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_LayerHideChat;
        break;
      }

      // optional bool LayerHideChat = 16;
      case 16: {
        if (tag == 128) {
         parse_LayerHideChat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layerhidechat_)));
          set_has_layerhidechat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_LayerHideRestart;
        break;
      }

      // optional bool LayerHideRestart = 17;
      case 17: {
        if (tag == 136) {
         parse_LayerHideRestart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &layerhiderestart_)));
          set_has_layerhiderestart();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_SpecialEntrance;
        break;
      }

      // optional .pb.TSpecialEntrance SpecialEntrance = 18;
      case 18: {
        if (tag == 146) {
         parse_SpecialEntrance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specialentrance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TExtraOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TExtraOption)
  return false;
#undef DO_
}

void TExtraOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TExtraOption)
  // optional bool NeedAuto = 1;
  if (has_needauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->needauto(), output);
  }

  // optional bool LayerHideAuto = 2;
  if (has_layerhideauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->layerhideauto(), output);
  }

  // optional bool LayerHideHeadShot = 3;
  if (has_layerhideheadshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->layerhideheadshot(), output);
  }

  // optional bool LayerHideSkip = 4;
  if (has_layerhideskip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->layerhideskip(), output);
  }

  // optional bool LayerHideSpeed = 5;
  if (has_layerhidespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->layerhidespeed(), output);
  }

  // optional bool LayerHidePause = 6;
  if (has_layerhidepause()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->layerhidepause(), output);
  }

  // optional bool IsFirstAttack = 7;
  if (has_isfirstattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isfirstattack(), output);
  }

  // optional bool NeedDoStatistics = 8;
  if (has_needdostatistics()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->needdostatistics(), output);
  }

  // optional uint32 LayerSkipHideTime = 9;
  if (has_layerskiphidetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->layerskiphidetime(), output);
  }

  // optional uint32 UnlockLevel = 10;
  if (has_unlocklevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->unlocklevel(), output);
  }

  // optional bool LayerHideTime = 11;
  if (has_layerhidetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->layerhidetime(), output);
  }

  // optional bool LayerHideCoin = 12;
  if (has_layerhidecoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->layerhidecoin(), output);
  }

  // optional bool IsStoryBattle = 13;
  if (has_isstorybattle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isstorybattle(), output);
  }

  // optional bool LayerHideCameraOffset = 14;
  if (has_layerhidecameraoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->layerhidecameraoffset(), output);
  }

  // optional bool LayerHideScreenNum = 15;
  if (has_layerhidescreennum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->layerhidescreennum(), output);
  }

  // optional bool LayerHideChat = 16;
  if (has_layerhidechat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->layerhidechat(), output);
  }

  // optional bool LayerHideRestart = 17;
  if (has_layerhiderestart()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->layerhiderestart(), output);
  }

  // optional .pb.TSpecialEntrance SpecialEntrance = 18;
  if (has_specialentrance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->specialentrance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TExtraOption)
}

::google::protobuf::uint8* TExtraOption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TExtraOption)
  // optional bool NeedAuto = 1;
  if (has_needauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->needauto(), target);
  }

  // optional bool LayerHideAuto = 2;
  if (has_layerhideauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->layerhideauto(), target);
  }

  // optional bool LayerHideHeadShot = 3;
  if (has_layerhideheadshot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->layerhideheadshot(), target);
  }

  // optional bool LayerHideSkip = 4;
  if (has_layerhideskip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->layerhideskip(), target);
  }

  // optional bool LayerHideSpeed = 5;
  if (has_layerhidespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->layerhidespeed(), target);
  }

  // optional bool LayerHidePause = 6;
  if (has_layerhidepause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->layerhidepause(), target);
  }

  // optional bool IsFirstAttack = 7;
  if (has_isfirstattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isfirstattack(), target);
  }

  // optional bool NeedDoStatistics = 8;
  if (has_needdostatistics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->needdostatistics(), target);
  }

  // optional uint32 LayerSkipHideTime = 9;
  if (has_layerskiphidetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->layerskiphidetime(), target);
  }

  // optional uint32 UnlockLevel = 10;
  if (has_unlocklevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->unlocklevel(), target);
  }

  // optional bool LayerHideTime = 11;
  if (has_layerhidetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->layerhidetime(), target);
  }

  // optional bool LayerHideCoin = 12;
  if (has_layerhidecoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->layerhidecoin(), target);
  }

  // optional bool IsStoryBattle = 13;
  if (has_isstorybattle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isstorybattle(), target);
  }

  // optional bool LayerHideCameraOffset = 14;
  if (has_layerhidecameraoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->layerhidecameraoffset(), target);
  }

  // optional bool LayerHideScreenNum = 15;
  if (has_layerhidescreennum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->layerhidescreennum(), target);
  }

  // optional bool LayerHideChat = 16;
  if (has_layerhidechat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->layerhidechat(), target);
  }

  // optional bool LayerHideRestart = 17;
  if (has_layerhiderestart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->layerhiderestart(), target);
  }

  // optional .pb.TSpecialEntrance SpecialEntrance = 18;
  if (has_specialentrance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->specialentrance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TExtraOption)
  return target;
}

int TExtraOption::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool NeedAuto = 1;
    if (has_needauto()) {
      total_size += 1 + 1;
    }

    // optional bool LayerHideAuto = 2;
    if (has_layerhideauto()) {
      total_size += 1 + 1;
    }

    // optional bool LayerHideHeadShot = 3;
    if (has_layerhideheadshot()) {
      total_size += 1 + 1;
    }

    // optional bool LayerHideSkip = 4;
    if (has_layerhideskip()) {
      total_size += 1 + 1;
    }

    // optional bool LayerHideSpeed = 5;
    if (has_layerhidespeed()) {
      total_size += 1 + 1;
    }

    // optional bool LayerHidePause = 6;
    if (has_layerhidepause()) {
      total_size += 1 + 1;
    }

    // optional bool IsFirstAttack = 7;
    if (has_isfirstattack()) {
      total_size += 1 + 1;
    }

    // optional bool NeedDoStatistics = 8;
    if (has_needdostatistics()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 LayerSkipHideTime = 9;
    if (has_layerskiphidetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerskiphidetime());
    }

    // optional uint32 UnlockLevel = 10;
    if (has_unlocklevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlocklevel());
    }

    // optional bool LayerHideTime = 11;
    if (has_layerhidetime()) {
      total_size += 1 + 1;
    }

    // optional bool LayerHideCoin = 12;
    if (has_layerhidecoin()) {
      total_size += 1 + 1;
    }

    // optional bool IsStoryBattle = 13;
    if (has_isstorybattle()) {
      total_size += 1 + 1;
    }

    // optional bool LayerHideCameraOffset = 14;
    if (has_layerhidecameraoffset()) {
      total_size += 1 + 1;
    }

    // optional bool LayerHideScreenNum = 15;
    if (has_layerhidescreennum()) {
      total_size += 1 + 1;
    }

    // optional bool LayerHideChat = 16;
    if (has_layerhidechat()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool LayerHideRestart = 17;
    if (has_layerhiderestart()) {
      total_size += 2 + 1;
    }

    // optional .pb.TSpecialEntrance SpecialEntrance = 18;
    if (has_specialentrance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->specialentrance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TExtraOption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TExtraOption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TExtraOption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TExtraOption::MergeFrom(const TExtraOption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_needauto()) {
      set_needauto(from.needauto());
    }
    if (from.has_layerhideauto()) {
      set_layerhideauto(from.layerhideauto());
    }
    if (from.has_layerhideheadshot()) {
      set_layerhideheadshot(from.layerhideheadshot());
    }
    if (from.has_layerhideskip()) {
      set_layerhideskip(from.layerhideskip());
    }
    if (from.has_layerhidespeed()) {
      set_layerhidespeed(from.layerhidespeed());
    }
    if (from.has_layerhidepause()) {
      set_layerhidepause(from.layerhidepause());
    }
    if (from.has_isfirstattack()) {
      set_isfirstattack(from.isfirstattack());
    }
    if (from.has_needdostatistics()) {
      set_needdostatistics(from.needdostatistics());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_layerskiphidetime()) {
      set_layerskiphidetime(from.layerskiphidetime());
    }
    if (from.has_unlocklevel()) {
      set_unlocklevel(from.unlocklevel());
    }
    if (from.has_layerhidetime()) {
      set_layerhidetime(from.layerhidetime());
    }
    if (from.has_layerhidecoin()) {
      set_layerhidecoin(from.layerhidecoin());
    }
    if (from.has_isstorybattle()) {
      set_isstorybattle(from.isstorybattle());
    }
    if (from.has_layerhidecameraoffset()) {
      set_layerhidecameraoffset(from.layerhidecameraoffset());
    }
    if (from.has_layerhidescreennum()) {
      set_layerhidescreennum(from.layerhidescreennum());
    }
    if (from.has_layerhidechat()) {
      set_layerhidechat(from.layerhidechat());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_layerhiderestart()) {
      set_layerhiderestart(from.layerhiderestart());
    }
    if (from.has_specialentrance()) {
      mutable_specialentrance()->::pb::TSpecialEntrance::MergeFrom(from.specialentrance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TExtraOption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TExtraOption::CopyFrom(const TExtraOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TExtraOption::IsInitialized() const {

  return true;
}

void TExtraOption::Swap(TExtraOption* other) {
  if (other != this) {
    std::swap(needauto_, other->needauto_);
    std::swap(layerhideauto_, other->layerhideauto_);
    std::swap(layerhideheadshot_, other->layerhideheadshot_);
    std::swap(layerhideskip_, other->layerhideskip_);
    std::swap(layerhidespeed_, other->layerhidespeed_);
    std::swap(layerhidepause_, other->layerhidepause_);
    std::swap(isfirstattack_, other->isfirstattack_);
    std::swap(needdostatistics_, other->needdostatistics_);
    std::swap(layerskiphidetime_, other->layerskiphidetime_);
    std::swap(unlocklevel_, other->unlocklevel_);
    std::swap(layerhidetime_, other->layerhidetime_);
    std::swap(layerhidecoin_, other->layerhidecoin_);
    std::swap(isstorybattle_, other->isstorybattle_);
    std::swap(layerhidecameraoffset_, other->layerhidecameraoffset_);
    std::swap(layerhidescreennum_, other->layerhidescreennum_);
    std::swap(layerhidechat_, other->layerhidechat_);
    std::swap(layerhiderestart_, other->layerhiderestart_);
    std::swap(specialentrance_, other->specialentrance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TExtraOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TExtraOption_descriptor_;
  metadata.reflection = TExtraOption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBattleUserInput::kInputFieldNumber;
#endif  // !_MSC_VER

TBattleUserInput::TBattleUserInput()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBattleUserInput)
}

void TBattleUserInput::InitAsDefaultInstance() {
}

TBattleUserInput::TBattleUserInput(const TBattleUserInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBattleUserInput)
}

void TBattleUserInput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBattleUserInput::~TBattleUserInput() {
  // @@protoc_insertion_point(destructor:pb.TBattleUserInput)
  SharedDtor();
}

void TBattleUserInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBattleUserInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBattleUserInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBattleUserInput_descriptor_;
}

const TBattleUserInput& TBattleUserInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TBattleUserInput* TBattleUserInput::default_instance_ = NULL;

TBattleUserInput* TBattleUserInput::New() const {
  return new TBattleUserInput;
}

void TBattleUserInput::Clear() {
  input_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBattleUserInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBattleUserInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TBattleFieldInput Input = 1;
      case 1: {
        if (tag == 10) {
         parse_Input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_input()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Input;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBattleUserInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBattleUserInput)
  return false;
#undef DO_
}

void TBattleUserInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBattleUserInput)
  // repeated .pb.TBattleFieldInput Input = 1;
  for (int i = 0; i < this->input_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->input(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBattleUserInput)
}

::google::protobuf::uint8* TBattleUserInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBattleUserInput)
  // repeated .pb.TBattleFieldInput Input = 1;
  for (int i = 0; i < this->input_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->input(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBattleUserInput)
  return target;
}

int TBattleUserInput::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TBattleFieldInput Input = 1;
  total_size += 1 * this->input_size();
  for (int i = 0; i < this->input_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->input(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBattleUserInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBattleUserInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBattleUserInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBattleUserInput::MergeFrom(const TBattleUserInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  input_.MergeFrom(from.input_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBattleUserInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBattleUserInput::CopyFrom(const TBattleUserInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBattleUserInput::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->input())) return false;
  return true;
}

void TBattleUserInput::Swap(TBattleUserInput* other) {
  if (other != this) {
    input_.Swap(&other->input_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBattleUserInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBattleUserInput_descriptor_;
  metadata.reflection = TBattleUserInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBattleFieldInput::kFrameTimeFieldNumber;
const int TBattleFieldInput::kEidFieldNumber;
const int TBattleFieldInput::kEventFieldNumber;
const int TBattleFieldInput::kFieldNumFieldNumber;
const int TBattleFieldInput::kIndexFieldNumber;
const int TBattleFieldInput::kData1FieldNumber;
#endif  // !_MSC_VER

TBattleFieldInput::TBattleFieldInput()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBattleFieldInput)
}

void TBattleFieldInput::InitAsDefaultInstance() {
}

TBattleFieldInput::TBattleFieldInput(const TBattleFieldInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBattleFieldInput)
}

void TBattleFieldInput::SharedCtor() {
  _cached_size_ = 0;
  frametime_ = 0;
  eid_ = 0u;
  event_ = 0u;
  fieldnum_ = 0u;
  index_ = 0u;
  data1_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBattleFieldInput::~TBattleFieldInput() {
  // @@protoc_insertion_point(destructor:pb.TBattleFieldInput)
  SharedDtor();
}

void TBattleFieldInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBattleFieldInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBattleFieldInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBattleFieldInput_descriptor_;
}

const TBattleFieldInput& TBattleFieldInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TBattleFieldInput* TBattleFieldInput::default_instance_ = NULL;

TBattleFieldInput* TBattleFieldInput::New() const {
  return new TBattleFieldInput;
}

void TBattleFieldInput::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBattleFieldInput*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(frametime_, data1_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBattleFieldInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBattleFieldInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 FrameTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frametime_)));
          set_has_frametime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Eid;
        break;
      }

      // optional uint32 Eid = 2;
      case 2: {
        if (tag == 16) {
         parse_Eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Event;
        break;
      }

      // required uint32 Event = 3;
      case 3: {
        if (tag == 24) {
         parse_Event:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_)));
          set_has_event();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_FieldNum;
        break;
      }

      // optional uint32 FieldNum = 4;
      case 4: {
        if (tag == 32) {
         parse_FieldNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fieldnum_)));
          set_has_fieldnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Index;
        break;
      }

      // optional uint32 Index = 5;
      case 5: {
        if (tag == 40) {
         parse_Index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Data1;
        break;
      }

      // optional uint32 Data1 = 6;
      case 6: {
        if (tag == 48) {
         parse_Data1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data1_)));
          set_has_data1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBattleFieldInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBattleFieldInput)
  return false;
#undef DO_
}

void TBattleFieldInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBattleFieldInput)
  // required int32 FrameTime = 1;
  if (has_frametime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frametime(), output);
  }

  // optional uint32 Eid = 2;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eid(), output);
  }

  // required uint32 Event = 3;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->event(), output);
  }

  // optional uint32 FieldNum = 4;
  if (has_fieldnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fieldnum(), output);
  }

  // optional uint32 Index = 5;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->index(), output);
  }

  // optional uint32 Data1 = 6;
  if (has_data1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->data1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBattleFieldInput)
}

::google::protobuf::uint8* TBattleFieldInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBattleFieldInput)
  // required int32 FrameTime = 1;
  if (has_frametime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->frametime(), target);
  }

  // optional uint32 Eid = 2;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eid(), target);
  }

  // required uint32 Event = 3;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->event(), target);
  }

  // optional uint32 FieldNum = 4;
  if (has_fieldnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fieldnum(), target);
  }

  // optional uint32 Index = 5;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->index(), target);
  }

  // optional uint32 Data1 = 6;
  if (has_data1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->data1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBattleFieldInput)
  return target;
}

int TBattleFieldInput::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 FrameTime = 1;
    if (has_frametime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frametime());
    }

    // optional uint32 Eid = 2;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eid());
    }

    // required uint32 Event = 3;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event());
    }

    // optional uint32 FieldNum = 4;
    if (has_fieldnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fieldnum());
    }

    // optional uint32 Index = 5;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 Data1 = 6;
    if (has_data1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBattleFieldInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBattleFieldInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBattleFieldInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBattleFieldInput::MergeFrom(const TBattleFieldInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frametime()) {
      set_frametime(from.frametime());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_event()) {
      set_event(from.event());
    }
    if (from.has_fieldnum()) {
      set_fieldnum(from.fieldnum());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_data1()) {
      set_data1(from.data1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBattleFieldInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBattleFieldInput::CopyFrom(const TBattleFieldInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBattleFieldInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void TBattleFieldInput::Swap(TBattleFieldInput* other) {
  if (other != this) {
    std::swap(frametime_, other->frametime_);
    std::swap(eid_, other->eid_);
    std::swap(event_, other->event_);
    std::swap(fieldnum_, other->fieldnum_);
    std::swap(index_, other->index_);
    std::swap(data1_, other->data1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBattleFieldInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBattleFieldInput_descriptor_;
  metadata.reflection = TBattleFieldInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBattleArgs::kBattleTypeFieldNumber;
const int TBattleArgs::kArmy1ArrFieldNumber;
const int TBattleArgs::kArmy2ArrFieldNumber;
const int TBattleArgs::kSceneConfFieldNumber;
const int TBattleArgs::kBehaviorIdArrFieldNumber;
const int TBattleArgs::kFrameDeltFieldNumber;
const int TBattleArgs::kRandomSeedFieldNumber;
const int TBattleArgs::kExtraOptionFieldNumber;
const int TBattleArgs::kBattleIdFieldNumber;
const int TBattleArgs::kBattleStarterFieldNumber;
const int TBattleArgs::kRecordInputsFieldNumber;
const int TBattleArgs::kHasUserInputFieldNumber;
const int TBattleArgs::kFrontendVersionFieldNumber;
const int TBattleArgs::kRankInfoFieldNumber;
const int TBattleArgs::kTDEnemyFieldNumber;
const int TBattleArgs::kTDFriendFieldNumber;
const int TBattleArgs::kTDRecordInfoFieldNumber;
const int TBattleArgs::kWheelWarRidingInfoFieldNumber;
const int TBattleArgs::kBackendVersionFieldNumber;
#endif  // !_MSC_VER

TBattleArgs::TBattleArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBattleArgs)
}

void TBattleArgs::InitAsDefaultInstance() {
  extraoption_ = const_cast< ::pb::TExtraOption*>(&::pb::TExtraOption::default_instance());
  recordinputs_ = const_cast< ::pb::TBattleUserInput*>(&::pb::TBattleUserInput::default_instance());
  rankinfo_ = const_cast< ::pb::TRankInfo*>(&::pb::TRankInfo::default_instance());
  tdenemy_ = const_cast< ::pb::TTDEnemy*>(&::pb::TTDEnemy::default_instance());
  tdfriend_ = const_cast< ::pb::TTDFriend*>(&::pb::TTDFriend::default_instance());
  tdrecordinfo_ = const_cast< ::pb::TTDRecordInfo*>(&::pb::TTDRecordInfo::default_instance());
  wheelwarridinginfo_ = const_cast< ::pb::TWheelWarRidingInfo*>(&::pb::TWheelWarRidingInfo::default_instance());
}

TBattleArgs::TBattleArgs(const TBattleArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBattleArgs)
}

void TBattleArgs::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  battletype_ = 1;
  framedelt_ = 0u;
  randomseed_ = 0u;
  extraoption_ = NULL;
  battleid_ = 0u;
  battlestarter_ = 0;
  recordinputs_ = NULL;
  hasuserinput_ = false;
  frontendversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rankinfo_ = NULL;
  tdenemy_ = NULL;
  tdfriend_ = NULL;
  tdrecordinfo_ = NULL;
  wheelwarridinginfo_ = NULL;
  backendversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBattleArgs::~TBattleArgs() {
  // @@protoc_insertion_point(destructor:pb.TBattleArgs)
  SharedDtor();
}

void TBattleArgs::SharedDtor() {
  if (frontendversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frontendversion_;
  }
  if (backendversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete backendversion_;
  }
  if (this != default_instance_) {
    delete extraoption_;
    delete recordinputs_;
    delete rankinfo_;
    delete tdenemy_;
    delete tdfriend_;
    delete tdrecordinfo_;
    delete wheelwarridinginfo_;
  }
}

void TBattleArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBattleArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBattleArgs_descriptor_;
}

const TBattleArgs& TBattleArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TBattleArgs* TBattleArgs::default_instance_ = NULL;

TBattleArgs* TBattleArgs::New() const {
  return new TBattleArgs;
}

void TBattleArgs::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBattleArgs*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 225) {
    battletype_ = 1;
    framedelt_ = 0u;
    randomseed_ = 0u;
    if (has_extraoption()) {
      if (extraoption_ != NULL) extraoption_->::pb::TExtraOption::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(battlestarter_, hasuserinput_);
    battleid_ = 0u;
    if (has_recordinputs()) {
      if (recordinputs_ != NULL) recordinputs_->::pb::TBattleUserInput::Clear();
    }
    if (has_frontendversion()) {
      if (frontendversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        frontendversion_->clear();
      }
    }
    if (has_rankinfo()) {
      if (rankinfo_ != NULL) rankinfo_->::pb::TRankInfo::Clear();
    }
    if (has_tdenemy()) {
      if (tdenemy_ != NULL) tdenemy_->::pb::TTDEnemy::Clear();
    }
    if (has_tdfriend()) {
      if (tdfriend_ != NULL) tdfriend_->::pb::TTDFriend::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 458752) {
    if (has_tdrecordinfo()) {
      if (tdrecordinfo_ != NULL) tdrecordinfo_->::pb::TTDRecordInfo::Clear();
    }
    if (has_wheelwarridinginfo()) {
      if (wheelwarridinginfo_ != NULL) wheelwarridinginfo_->::pb::TWheelWarRidingInfo::Clear();
    }
    if (has_backendversion()) {
      if (backendversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        backendversion_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  army1arr_.Clear();
  army2arr_.Clear();
  sceneconf_.Clear();
  behavioridarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBattleArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBattleArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.EBattleType BattleType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EBattleType_IsValid(value)) {
            set_battletype(static_cast< ::pb::EBattleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Army1Arr;
        break;
      }

      // repeated .pb.TArmyInfo Army1Arr = 2;
      case 2: {
        if (tag == 18) {
         parse_Army1Arr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_army1arr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Army1Arr;
        if (input->ExpectTag(26)) goto parse_Army2Arr;
        break;
      }

      // repeated .pb.TArmyInfo Army2Arr = 3;
      case 3: {
        if (tag == 26) {
         parse_Army2Arr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_army2arr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Army2Arr;
        if (input->ExpectTag(34)) goto parse_SceneConf;
        break;
      }

      // repeated .pb.TSceneInfo SceneConf = 4;
      case 4: {
        if (tag == 34) {
         parse_SceneConf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sceneconf()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_SceneConf;
        if (input->ExpectTag(40)) goto parse_BehaviorIdArr;
        break;
      }

      // repeated uint32 BehaviorIdArr = 5;
      case 5: {
        if (tag == 40) {
         parse_BehaviorIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_behavioridarr())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_behavioridarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BehaviorIdArr;
        if (input->ExpectTag(48)) goto parse_FrameDelt;
        break;
      }

      // optional uint32 FrameDelt = 6;
      case 6: {
        if (tag == 48) {
         parse_FrameDelt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framedelt_)));
          set_has_framedelt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_RandomSeed;
        break;
      }

      // required uint32 RandomSeed = 7;
      case 7: {
        if (tag == 56) {
         parse_RandomSeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &randomseed_)));
          set_has_randomseed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ExtraOption;
        break;
      }

      // optional .pb.TExtraOption ExtraOption = 8;
      case 8: {
        if (tag == 66) {
         parse_ExtraOption:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extraoption()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_BattleId;
        break;
      }

      // optional uint32 BattleId = 9;
      case 9: {
        if (tag == 72) {
         parse_BattleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_BattleStarter;
        break;
      }

      // optional .pb.EBattleStarter BattleStarter = 10;
      case 10: {
        if (tag == 80) {
         parse_BattleStarter:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EBattleStarter_IsValid(value)) {
            set_battlestarter(static_cast< ::pb::EBattleStarter >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_HasUserInput;
        break;
      }

      // optional bool HasUserInput = 12;
      case 12: {
        if (tag == 96) {
         parse_HasUserInput:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasuserinput_)));
          set_has_hasuserinput();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_RecordInputs;
        break;
      }

      // optional .pb.TBattleUserInput RecordInputs = 13;
      case 13: {
        if (tag == 106) {
         parse_RecordInputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recordinputs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_FrontendVersion;
        break;
      }

      // optional string FrontendVersion = 14;
      case 14: {
        if (tag == 114) {
         parse_FrontendVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frontendversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frontendversion().data(), this->frontendversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frontendversion");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_RankInfo;
        break;
      }

      // optional .pb.TRankInfo RankInfo = 15;
      case 15: {
        if (tag == 122) {
         parse_RankInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rankinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_TDEnemy;
        break;
      }

      // optional .pb.TTDEnemy TDEnemy = 16;
      case 16: {
        if (tag == 130) {
         parse_TDEnemy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tdenemy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_TDFriend;
        break;
      }

      // optional .pb.TTDFriend TDFriend = 17;
      case 17: {
        if (tag == 138) {
         parse_TDFriend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tdfriend()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_TDRecordInfo;
        break;
      }

      // optional .pb.TTDRecordInfo TDRecordInfo = 18;
      case 18: {
        if (tag == 146) {
         parse_TDRecordInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tdrecordinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_WheelWarRidingInfo;
        break;
      }

      // optional .pb.TWheelWarRidingInfo WheelWarRidingInfo = 19;
      case 19: {
        if (tag == 154) {
         parse_WheelWarRidingInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wheelwarridinginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_BackendVersion;
        break;
      }

      // optional string BackendVersion = 20;
      case 20: {
        if (tag == 162) {
         parse_BackendVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backendversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->backendversion().data(), this->backendversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "backendversion");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBattleArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBattleArgs)
  return false;
#undef DO_
}

void TBattleArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBattleArgs)
  // required .pb.EBattleType BattleType = 1;
  if (has_battletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->battletype(), output);
  }

  // repeated .pb.TArmyInfo Army1Arr = 2;
  for (int i = 0; i < this->army1arr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->army1arr(i), output);
  }

  // repeated .pb.TArmyInfo Army2Arr = 3;
  for (int i = 0; i < this->army2arr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->army2arr(i), output);
  }

  // repeated .pb.TSceneInfo SceneConf = 4;
  for (int i = 0; i < this->sceneconf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sceneconf(i), output);
  }

  // repeated uint32 BehaviorIdArr = 5;
  for (int i = 0; i < this->behavioridarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->behavioridarr(i), output);
  }

  // optional uint32 FrameDelt = 6;
  if (has_framedelt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->framedelt(), output);
  }

  // required uint32 RandomSeed = 7;
  if (has_randomseed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->randomseed(), output);
  }

  // optional .pb.TExtraOption ExtraOption = 8;
  if (has_extraoption()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->extraoption(), output);
  }

  // optional uint32 BattleId = 9;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->battleid(), output);
  }

  // optional .pb.EBattleStarter BattleStarter = 10;
  if (has_battlestarter()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->battlestarter(), output);
  }

  // optional bool HasUserInput = 12;
  if (has_hasuserinput()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->hasuserinput(), output);
  }

  // optional .pb.TBattleUserInput RecordInputs = 13;
  if (has_recordinputs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->recordinputs(), output);
  }

  // optional string FrontendVersion = 14;
  if (has_frontendversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frontendversion().data(), this->frontendversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frontendversion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->frontendversion(), output);
  }

  // optional .pb.TRankInfo RankInfo = 15;
  if (has_rankinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->rankinfo(), output);
  }

  // optional .pb.TTDEnemy TDEnemy = 16;
  if (has_tdenemy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->tdenemy(), output);
  }

  // optional .pb.TTDFriend TDFriend = 17;
  if (has_tdfriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->tdfriend(), output);
  }

  // optional .pb.TTDRecordInfo TDRecordInfo = 18;
  if (has_tdrecordinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->tdrecordinfo(), output);
  }

  // optional .pb.TWheelWarRidingInfo WheelWarRidingInfo = 19;
  if (has_wheelwarridinginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->wheelwarridinginfo(), output);
  }

  // optional string BackendVersion = 20;
  if (has_backendversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backendversion().data(), this->backendversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backendversion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->backendversion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBattleArgs)
}

::google::protobuf::uint8* TBattleArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBattleArgs)
  // required .pb.EBattleType BattleType = 1;
  if (has_battletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->battletype(), target);
  }

  // repeated .pb.TArmyInfo Army1Arr = 2;
  for (int i = 0; i < this->army1arr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->army1arr(i), target);
  }

  // repeated .pb.TArmyInfo Army2Arr = 3;
  for (int i = 0; i < this->army2arr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->army2arr(i), target);
  }

  // repeated .pb.TSceneInfo SceneConf = 4;
  for (int i = 0; i < this->sceneconf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sceneconf(i), target);
  }

  // repeated uint32 BehaviorIdArr = 5;
  for (int i = 0; i < this->behavioridarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->behavioridarr(i), target);
  }

  // optional uint32 FrameDelt = 6;
  if (has_framedelt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->framedelt(), target);
  }

  // required uint32 RandomSeed = 7;
  if (has_randomseed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->randomseed(), target);
  }

  // optional .pb.TExtraOption ExtraOption = 8;
  if (has_extraoption()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->extraoption(), target);
  }

  // optional uint32 BattleId = 9;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->battleid(), target);
  }

  // optional .pb.EBattleStarter BattleStarter = 10;
  if (has_battlestarter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->battlestarter(), target);
  }

  // optional bool HasUserInput = 12;
  if (has_hasuserinput()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->hasuserinput(), target);
  }

  // optional .pb.TBattleUserInput RecordInputs = 13;
  if (has_recordinputs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->recordinputs(), target);
  }

  // optional string FrontendVersion = 14;
  if (has_frontendversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frontendversion().data(), this->frontendversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frontendversion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->frontendversion(), target);
  }

  // optional .pb.TRankInfo RankInfo = 15;
  if (has_rankinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->rankinfo(), target);
  }

  // optional .pb.TTDEnemy TDEnemy = 16;
  if (has_tdenemy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->tdenemy(), target);
  }

  // optional .pb.TTDFriend TDFriend = 17;
  if (has_tdfriend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->tdfriend(), target);
  }

  // optional .pb.TTDRecordInfo TDRecordInfo = 18;
  if (has_tdrecordinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->tdrecordinfo(), target);
  }

  // optional .pb.TWheelWarRidingInfo WheelWarRidingInfo = 19;
  if (has_wheelwarridinginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->wheelwarridinginfo(), target);
  }

  // optional string BackendVersion = 20;
  if (has_backendversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->backendversion().data(), this->backendversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "backendversion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->backendversion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBattleArgs)
  return target;
}

int TBattleArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.EBattleType BattleType = 1;
    if (has_battletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->battletype());
    }

    // optional uint32 FrameDelt = 6;
    if (has_framedelt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framedelt());
    }

    // required uint32 RandomSeed = 7;
    if (has_randomseed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->randomseed());
    }

    // optional .pb.TExtraOption ExtraOption = 8;
    if (has_extraoption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extraoption());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 BattleId = 9;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleid());
    }

    // optional .pb.EBattleStarter BattleStarter = 10;
    if (has_battlestarter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->battlestarter());
    }

    // optional .pb.TBattleUserInput RecordInputs = 13;
    if (has_recordinputs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recordinputs());
    }

    // optional bool HasUserInput = 12;
    if (has_hasuserinput()) {
      total_size += 1 + 1;
    }

    // optional string FrontendVersion = 14;
    if (has_frontendversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frontendversion());
    }

    // optional .pb.TRankInfo RankInfo = 15;
    if (has_rankinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rankinfo());
    }

    // optional .pb.TTDEnemy TDEnemy = 16;
    if (has_tdenemy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tdenemy());
    }

    // optional .pb.TTDFriend TDFriend = 17;
    if (has_tdfriend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tdfriend());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .pb.TTDRecordInfo TDRecordInfo = 18;
    if (has_tdrecordinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tdrecordinfo());
    }

    // optional .pb.TWheelWarRidingInfo WheelWarRidingInfo = 19;
    if (has_wheelwarridinginfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wheelwarridinginfo());
    }

    // optional string BackendVersion = 20;
    if (has_backendversion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backendversion());
    }

  }
  // repeated .pb.TArmyInfo Army1Arr = 2;
  total_size += 1 * this->army1arr_size();
  for (int i = 0; i < this->army1arr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->army1arr(i));
  }

  // repeated .pb.TArmyInfo Army2Arr = 3;
  total_size += 1 * this->army2arr_size();
  for (int i = 0; i < this->army2arr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->army2arr(i));
  }

  // repeated .pb.TSceneInfo SceneConf = 4;
  total_size += 1 * this->sceneconf_size();
  for (int i = 0; i < this->sceneconf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sceneconf(i));
  }

  // repeated uint32 BehaviorIdArr = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->behavioridarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->behavioridarr(i));
    }
    total_size += 1 * this->behavioridarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBattleArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBattleArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBattleArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBattleArgs::MergeFrom(const TBattleArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  army1arr_.MergeFrom(from.army1arr_);
  army2arr_.MergeFrom(from.army2arr_);
  sceneconf_.MergeFrom(from.sceneconf_);
  behavioridarr_.MergeFrom(from.behavioridarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battletype()) {
      set_battletype(from.battletype());
    }
    if (from.has_framedelt()) {
      set_framedelt(from.framedelt());
    }
    if (from.has_randomseed()) {
      set_randomseed(from.randomseed());
    }
    if (from.has_extraoption()) {
      mutable_extraoption()->::pb::TExtraOption::MergeFrom(from.extraoption());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_battlestarter()) {
      set_battlestarter(from.battlestarter());
    }
    if (from.has_recordinputs()) {
      mutable_recordinputs()->::pb::TBattleUserInput::MergeFrom(from.recordinputs());
    }
    if (from.has_hasuserinput()) {
      set_hasuserinput(from.hasuserinput());
    }
    if (from.has_frontendversion()) {
      set_frontendversion(from.frontendversion());
    }
    if (from.has_rankinfo()) {
      mutable_rankinfo()->::pb::TRankInfo::MergeFrom(from.rankinfo());
    }
    if (from.has_tdenemy()) {
      mutable_tdenemy()->::pb::TTDEnemy::MergeFrom(from.tdenemy());
    }
    if (from.has_tdfriend()) {
      mutable_tdfriend()->::pb::TTDFriend::MergeFrom(from.tdfriend());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tdrecordinfo()) {
      mutable_tdrecordinfo()->::pb::TTDRecordInfo::MergeFrom(from.tdrecordinfo());
    }
    if (from.has_wheelwarridinginfo()) {
      mutable_wheelwarridinginfo()->::pb::TWheelWarRidingInfo::MergeFrom(from.wheelwarridinginfo());
    }
    if (from.has_backendversion()) {
      set_backendversion(from.backendversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBattleArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBattleArgs::CopyFrom(const TBattleArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBattleArgs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000041) != 0x00000041) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->army1arr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->army2arr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->sceneconf())) return false;
  if (has_recordinputs()) {
    if (!this->recordinputs().IsInitialized()) return false;
  }
  if (has_tdenemy()) {
    if (!this->tdenemy().IsInitialized()) return false;
  }
  if (has_tdfriend()) {
    if (!this->tdfriend().IsInitialized()) return false;
  }
  if (has_tdrecordinfo()) {
    if (!this->tdrecordinfo().IsInitialized()) return false;
  }
  return true;
}

void TBattleArgs::Swap(TBattleArgs* other) {
  if (other != this) {
    std::swap(battletype_, other->battletype_);
    army1arr_.Swap(&other->army1arr_);
    army2arr_.Swap(&other->army2arr_);
    sceneconf_.Swap(&other->sceneconf_);
    behavioridarr_.Swap(&other->behavioridarr_);
    std::swap(framedelt_, other->framedelt_);
    std::swap(randomseed_, other->randomseed_);
    std::swap(extraoption_, other->extraoption_);
    std::swap(battleid_, other->battleid_);
    std::swap(battlestarter_, other->battlestarter_);
    std::swap(recordinputs_, other->recordinputs_);
    std::swap(hasuserinput_, other->hasuserinput_);
    std::swap(frontendversion_, other->frontendversion_);
    std::swap(rankinfo_, other->rankinfo_);
    std::swap(tdenemy_, other->tdenemy_);
    std::swap(tdfriend_, other->tdfriend_);
    std::swap(tdrecordinfo_, other->tdrecordinfo_);
    std::swap(wheelwarridinginfo_, other->wheelwarridinginfo_);
    std::swap(backendversion_, other->backendversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBattleArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBattleArgs_descriptor_;
  metadata.reflection = TBattleArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUnitInfoAfterBattle::kHidFieldNumber;
const int TUnitInfoAfterBattle::kPosFieldNumber;
const int TUnitInfoAfterBattle::kCurHpFieldNumber;
const int TUnitInfoAfterBattle::kMaxHpFieldNumber;
const int TUnitInfoAfterBattle::kCurRageFieldNumber;
const int TUnitInfoAfterBattle::kDamageOutFieldNumber;
const int TUnitInfoAfterBattle::kDamageInFieldNumber;
const int TUnitInfoAfterBattle::kInjuredSoldierFieldNumber;
const int TUnitInfoAfterBattle::kDeadSoldierFieldNumber;
const int TUnitInfoAfterBattle::kKillEnemySoldierFieldNumber;
const int TUnitInfoAfterBattle::kHtidFieldNumber;
const int TUnitInfoAfterBattle::kUnitStatisticFieldNumber;
const int TUnitInfoAfterBattle::kHealOutFieldNumber;
#endif  // !_MSC_VER

TUnitInfoAfterBattle::TUnitInfoAfterBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUnitInfoAfterBattle)
}

void TUnitInfoAfterBattle::InitAsDefaultInstance() {
  unitstatistic_ = const_cast< ::pb::TUnitStatistics*>(&::pb::TUnitStatistics::default_instance());
}

TUnitInfoAfterBattle::TUnitInfoAfterBattle(const TUnitInfoAfterBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUnitInfoAfterBattle)
}

void TUnitInfoAfterBattle::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  pos_ = 0u;
  curhp_ = GOOGLE_ULONGLONG(0);
  maxhp_ = GOOGLE_ULONGLONG(0);
  currage_ = 0u;
  damageout_ = GOOGLE_ULONGLONG(0);
  damagein_ = GOOGLE_ULONGLONG(0);
  injuredsoldier_ = 0u;
  deadsoldier_ = 0u;
  killenemysoldier_ = 0u;
  htid_ = 0u;
  unitstatistic_ = NULL;
  healout_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUnitInfoAfterBattle::~TUnitInfoAfterBattle() {
  // @@protoc_insertion_point(destructor:pb.TUnitInfoAfterBattle)
  SharedDtor();
}

void TUnitInfoAfterBattle::SharedDtor() {
  if (this != default_instance_) {
    delete unitstatistic_;
  }
}

void TUnitInfoAfterBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUnitInfoAfterBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUnitInfoAfterBattle_descriptor_;
}

const TUnitInfoAfterBattle& TUnitInfoAfterBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TUnitInfoAfterBattle* TUnitInfoAfterBattle::default_instance_ = NULL;

TUnitInfoAfterBattle* TUnitInfoAfterBattle::New() const {
  return new TUnitInfoAfterBattle;
}

void TUnitInfoAfterBattle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUnitInfoAfterBattle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(hid_, damagein_);
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(deadsoldier_, killenemysoldier_);
    ZR_(healout_, htid_);
    if (has_unitstatistic()) {
      if (unitstatistic_ != NULL) unitstatistic_->::pb::TUnitStatistics::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUnitInfoAfterBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUnitInfoAfterBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Pos;
        break;
      }

      // required uint32 Pos = 2;
      case 2: {
        if (tag == 16) {
         parse_Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CurHp;
        break;
      }

      // optional uint64 CurHp = 3;
      case 3: {
        if (tag == 24) {
         parse_CurHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MaxHp;
        break;
      }

      // optional uint64 MaxHp = 4;
      case 4: {
        if (tag == 32) {
         parse_MaxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CurRage;
        break;
      }

      // optional uint32 CurRage = 5;
      case 5: {
        if (tag == 40) {
         parse_CurRage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currage_)));
          set_has_currage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_DamageOut;
        break;
      }

      // optional uint64 DamageOut = 6;
      case 6: {
        if (tag == 48) {
         parse_DamageOut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &damageout_)));
          set_has_damageout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_DamageIn;
        break;
      }

      // optional uint64 DamageIn = 7;
      case 7: {
        if (tag == 56) {
         parse_DamageIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &damagein_)));
          set_has_damagein();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_InjuredSoldier;
        break;
      }

      // optional uint32 InjuredSoldier = 8;
      case 8: {
        if (tag == 64) {
         parse_InjuredSoldier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &injuredsoldier_)));
          set_has_injuredsoldier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_DeadSoldier;
        break;
      }

      // optional uint32 DeadSoldier = 9;
      case 9: {
        if (tag == 72) {
         parse_DeadSoldier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deadsoldier_)));
          set_has_deadsoldier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_KillEnemySoldier;
        break;
      }

      // optional uint32 KillEnemySoldier = 10;
      case 10: {
        if (tag == 80) {
         parse_KillEnemySoldier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killenemysoldier_)));
          set_has_killenemysoldier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_Htid;
        break;
      }

      // optional uint32 Htid = 11;
      case 11: {
        if (tag == 88) {
         parse_Htid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_UnitStatistic;
        break;
      }

      // optional .pb.TUnitStatistics UnitStatistic = 12;
      case 12: {
        if (tag == 98) {
         parse_UnitStatistic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unitstatistic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_HealOut;
        break;
      }

      // optional uint64 HealOut = 13;
      case 13: {
        if (tag == 104) {
         parse_HealOut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &healout_)));
          set_has_healout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUnitInfoAfterBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUnitInfoAfterBattle)
  return false;
#undef DO_
}

void TUnitInfoAfterBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUnitInfoAfterBattle)
  // required uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // required uint32 Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional uint64 CurHp = 3;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->curhp(), output);
  }

  // optional uint64 MaxHp = 4;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->maxhp(), output);
  }

  // optional uint32 CurRage = 5;
  if (has_currage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->currage(), output);
  }

  // optional uint64 DamageOut = 6;
  if (has_damageout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->damageout(), output);
  }

  // optional uint64 DamageIn = 7;
  if (has_damagein()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->damagein(), output);
  }

  // optional uint32 InjuredSoldier = 8;
  if (has_injuredsoldier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->injuredsoldier(), output);
  }

  // optional uint32 DeadSoldier = 9;
  if (has_deadsoldier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->deadsoldier(), output);
  }

  // optional uint32 KillEnemySoldier = 10;
  if (has_killenemysoldier()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->killenemysoldier(), output);
  }

  // optional uint32 Htid = 11;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->htid(), output);
  }

  // optional .pb.TUnitStatistics UnitStatistic = 12;
  if (has_unitstatistic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->unitstatistic(), output);
  }

  // optional uint64 HealOut = 13;
  if (has_healout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->healout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUnitInfoAfterBattle)
}

::google::protobuf::uint8* TUnitInfoAfterBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUnitInfoAfterBattle)
  // required uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // required uint32 Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional uint64 CurHp = 3;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->curhp(), target);
  }

  // optional uint64 MaxHp = 4;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->maxhp(), target);
  }

  // optional uint32 CurRage = 5;
  if (has_currage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->currage(), target);
  }

  // optional uint64 DamageOut = 6;
  if (has_damageout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->damageout(), target);
  }

  // optional uint64 DamageIn = 7;
  if (has_damagein()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->damagein(), target);
  }

  // optional uint32 InjuredSoldier = 8;
  if (has_injuredsoldier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->injuredsoldier(), target);
  }

  // optional uint32 DeadSoldier = 9;
  if (has_deadsoldier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->deadsoldier(), target);
  }

  // optional uint32 KillEnemySoldier = 10;
  if (has_killenemysoldier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->killenemysoldier(), target);
  }

  // optional uint32 Htid = 11;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->htid(), target);
  }

  // optional .pb.TUnitStatistics UnitStatistic = 12;
  if (has_unitstatistic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->unitstatistic(), target);
  }

  // optional uint64 HealOut = 13;
  if (has_healout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->healout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUnitInfoAfterBattle)
  return target;
}

int TUnitInfoAfterBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // required uint32 Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint64 CurHp = 3;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curhp());
    }

    // optional uint64 MaxHp = 4;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxhp());
    }

    // optional uint32 CurRage = 5;
    if (has_currage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currage());
    }

    // optional uint64 DamageOut = 6;
    if (has_damageout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->damageout());
    }

    // optional uint64 DamageIn = 7;
    if (has_damagein()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->damagein());
    }

    // optional uint32 InjuredSoldier = 8;
    if (has_injuredsoldier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->injuredsoldier());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 DeadSoldier = 9;
    if (has_deadsoldier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deadsoldier());
    }

    // optional uint32 KillEnemySoldier = 10;
    if (has_killenemysoldier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killenemysoldier());
    }

    // optional uint32 Htid = 11;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

    // optional .pb.TUnitStatistics UnitStatistic = 12;
    if (has_unitstatistic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unitstatistic());
    }

    // optional uint64 HealOut = 13;
    if (has_healout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->healout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUnitInfoAfterBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUnitInfoAfterBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUnitInfoAfterBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUnitInfoAfterBattle::MergeFrom(const TUnitInfoAfterBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_currage()) {
      set_currage(from.currage());
    }
    if (from.has_damageout()) {
      set_damageout(from.damageout());
    }
    if (from.has_damagein()) {
      set_damagein(from.damagein());
    }
    if (from.has_injuredsoldier()) {
      set_injuredsoldier(from.injuredsoldier());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_deadsoldier()) {
      set_deadsoldier(from.deadsoldier());
    }
    if (from.has_killenemysoldier()) {
      set_killenemysoldier(from.killenemysoldier());
    }
    if (from.has_htid()) {
      set_htid(from.htid());
    }
    if (from.has_unitstatistic()) {
      mutable_unitstatistic()->::pb::TUnitStatistics::MergeFrom(from.unitstatistic());
    }
    if (from.has_healout()) {
      set_healout(from.healout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUnitInfoAfterBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUnitInfoAfterBattle::CopyFrom(const TUnitInfoAfterBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUnitInfoAfterBattle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TUnitInfoAfterBattle::Swap(TUnitInfoAfterBattle* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(pos_, other->pos_);
    std::swap(curhp_, other->curhp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(currage_, other->currage_);
    std::swap(damageout_, other->damageout_);
    std::swap(damagein_, other->damagein_);
    std::swap(injuredsoldier_, other->injuredsoldier_);
    std::swap(deadsoldier_, other->deadsoldier_);
    std::swap(killenemysoldier_, other->killenemysoldier_);
    std::swap(htid_, other->htid_);
    std::swap(unitstatistic_, other->unitstatistic_);
    std::swap(healout_, other->healout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUnitInfoAfterBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUnitInfoAfterBattle_descriptor_;
  metadata.reflection = TUnitInfoAfterBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArmyInfoAfterBattle::kUnitArrFieldNumber;
#endif  // !_MSC_VER

TArmyInfoAfterBattle::TArmyInfoAfterBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArmyInfoAfterBattle)
}

void TArmyInfoAfterBattle::InitAsDefaultInstance() {
}

TArmyInfoAfterBattle::TArmyInfoAfterBattle(const TArmyInfoAfterBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArmyInfoAfterBattle)
}

void TArmyInfoAfterBattle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArmyInfoAfterBattle::~TArmyInfoAfterBattle() {
  // @@protoc_insertion_point(destructor:pb.TArmyInfoAfterBattle)
  SharedDtor();
}

void TArmyInfoAfterBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArmyInfoAfterBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArmyInfoAfterBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArmyInfoAfterBattle_descriptor_;
}

const TArmyInfoAfterBattle& TArmyInfoAfterBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TArmyInfoAfterBattle* TArmyInfoAfterBattle::default_instance_ = NULL;

TArmyInfoAfterBattle* TArmyInfoAfterBattle::New() const {
  return new TArmyInfoAfterBattle;
}

void TArmyInfoAfterBattle::Clear() {
  unitarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArmyInfoAfterBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArmyInfoAfterBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUnitInfoAfterBattle UnitArr = 1;
      case 1: {
        if (tag == 10) {
         parse_UnitArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UnitArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArmyInfoAfterBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArmyInfoAfterBattle)
  return false;
#undef DO_
}

void TArmyInfoAfterBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArmyInfoAfterBattle)
  // repeated .pb.TUnitInfoAfterBattle UnitArr = 1;
  for (int i = 0; i < this->unitarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unitarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArmyInfoAfterBattle)
}

::google::protobuf::uint8* TArmyInfoAfterBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArmyInfoAfterBattle)
  // repeated .pb.TUnitInfoAfterBattle UnitArr = 1;
  for (int i = 0; i < this->unitarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unitarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArmyInfoAfterBattle)
  return target;
}

int TArmyInfoAfterBattle::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TUnitInfoAfterBattle UnitArr = 1;
  total_size += 1 * this->unitarr_size();
  for (int i = 0; i < this->unitarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArmyInfoAfterBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArmyInfoAfterBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArmyInfoAfterBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArmyInfoAfterBattle::MergeFrom(const TArmyInfoAfterBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitarr_.MergeFrom(from.unitarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArmyInfoAfterBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArmyInfoAfterBattle::CopyFrom(const TArmyInfoAfterBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArmyInfoAfterBattle::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->unitarr())) return false;
  return true;
}

void TArmyInfoAfterBattle::Swap(TArmyInfoAfterBattle* other) {
  if (other != this) {
    unitarr_.Swap(&other->unitarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArmyInfoAfterBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArmyInfoAfterBattle_descriptor_;
  metadata.reflection = TArmyInfoAfterBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBattleResult::kBattleArgsFieldNumber;
const int TBattleResult::kStarLevelFieldNumber;
const int TBattleResult::kErrMsgFieldNumber;
const int TBattleResult::kArmy1ArrFieldNumber;
const int TBattleResult::kArmy2ArrFieldNumber;
const int TBattleResult::kBattleReportStrFieldNumber;
const int TBattleResult::kBattleTimeFieldNumber;
const int TBattleResult::kBattleFirewallVersionFieldNumber;
const int TBattleResult::kScreenIndexFieldNumber;
const int TBattleResult::kRecordIdFieldNumber;
const int TBattleResult::kBattleBTRecordFieldNumber;
const int TBattleResult::kSkillCountInfoFieldNumber;
const int TBattleResult::kValidWaveNumberFieldNumber;
const int TBattleResult::kTDRecordInfoFieldNumber;
const int TBattleResult::kResultIdFieldNumber;
const int TBattleResult::kWheelWarFieldStatusFieldNumber;
const int TBattleResult::kQuestionedFieldNumber;
#endif  // !_MSC_VER

TBattleResult::TBattleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBattleResult)
}

void TBattleResult::InitAsDefaultInstance() {
  battleargs_ = const_cast< ::pb::TBattleArgs*>(&::pb::TBattleArgs::default_instance());
  battlebtrecord_ = const_cast< ::pb::TBattleBTRecord*>(&::pb::TBattleBTRecord::default_instance());
  skillcountinfo_ = const_cast< ::pb::TSkillCountInfo*>(&::pb::TSkillCountInfo::default_instance());
  tdrecordinfo_ = const_cast< ::pb::TTDRecordInfo*>(&::pb::TTDRecordInfo::default_instance());
  wheelwarfieldstatus_ = const_cast< ::pb::TWheelWarFieldStatus*>(&::pb::TWheelWarFieldStatus::default_instance());
}

TBattleResult::TBattleResult(const TBattleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBattleResult)
}

void TBattleResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  battleargs_ = NULL;
  starlevel_ = 0u;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battlereportstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battletime_ = GOOGLE_ULONGLONG(0);
  battlefirewallversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  screenindex_ = 0u;
  recordid_ = GOOGLE_ULONGLONG(0);
  battlebtrecord_ = NULL;
  skillcountinfo_ = NULL;
  validwavenumber_ = 0u;
  tdrecordinfo_ = NULL;
  resultid_ = 0u;
  wheelwarfieldstatus_ = NULL;
  questioned_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBattleResult::~TBattleResult() {
  // @@protoc_insertion_point(destructor:pb.TBattleResult)
  SharedDtor();
}

void TBattleResult::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (battlereportstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battlereportstr_;
  }
  if (battlefirewallversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battlefirewallversion_;
  }
  if (this != default_instance_) {
    delete battleargs_;
    delete battlebtrecord_;
    delete skillcountinfo_;
    delete tdrecordinfo_;
    delete wheelwarfieldstatus_;
  }
}

void TBattleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBattleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBattleResult_descriptor_;
}

const TBattleResult& TBattleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TBattleResult* TBattleResult::default_instance_ = NULL;

TBattleResult* TBattleResult::New() const {
  return new TBattleResult;
}

void TBattleResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBattleResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 231) {
    if (has_battleargs()) {
      if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
    }
    starlevel_ = 0u;
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    if (has_battlereportstr()) {
      if (battlereportstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battlereportstr_->clear();
      }
    }
    battletime_ = GOOGLE_ULONGLONG(0);
    if (has_battlefirewallversion()) {
      if (battlefirewallversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battlefirewallversion_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(validwavenumber_, resultid_);
    screenindex_ = 0u;
    recordid_ = GOOGLE_ULONGLONG(0);
    if (has_battlebtrecord()) {
      if (battlebtrecord_ != NULL) battlebtrecord_->::pb::TBattleBTRecord::Clear();
    }
    if (has_skillcountinfo()) {
      if (skillcountinfo_ != NULL) skillcountinfo_->::pb::TSkillCountInfo::Clear();
    }
    if (has_tdrecordinfo()) {
      if (tdrecordinfo_ != NULL) tdrecordinfo_->::pb::TTDRecordInfo::Clear();
    }
    if (has_wheelwarfieldstatus()) {
      if (wheelwarfieldstatus_ != NULL) wheelwarfieldstatus_->::pb::TWheelWarFieldStatus::Clear();
    }
  }
  questioned_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  army1arr_.Clear();
  army2arr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBattleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBattleResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.TBattleArgs BattleArgs = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_StarLevel;
        break;
      }

      // required uint32 StarLevel = 2;
      case 2: {
        if (tag == 16) {
         parse_StarLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starlevel_)));
          set_has_starlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ErrMsg;
        break;
      }

      // optional string ErrMsg = 3;
      case 3: {
        if (tag == 26) {
         parse_ErrMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Army1Arr;
        break;
      }

      // repeated .pb.TArmyInfoAfterBattle Army1Arr = 5;
      case 5: {
        if (tag == 42) {
         parse_Army1Arr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_army1arr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Army1Arr;
        if (input->ExpectTag(50)) goto parse_Army2Arr;
        break;
      }

      // repeated .pb.TArmyInfoAfterBattle Army2Arr = 6;
      case 6: {
        if (tag == 50) {
         parse_Army2Arr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_army2arr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Army2Arr;
        if (input->ExpectTag(58)) goto parse_BattleReportStr;
        break;
      }

      // optional bytes BattleReportStr = 7;
      case 7: {
        if (tag == 58) {
         parse_BattleReportStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battlereportstr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_BattleTime;
        break;
      }

      // optional uint64 BattleTime = 8;
      case 8: {
        if (tag == 64) {
         parse_BattleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battletime_)));
          set_has_battletime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_BattleFirewallVersion;
        break;
      }

      // optional string BattleFirewallVersion = 9;
      case 9: {
        if (tag == 74) {
         parse_BattleFirewallVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battlefirewallversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->battlefirewallversion().data(), this->battlefirewallversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "battlefirewallversion");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ScreenIndex;
        break;
      }

      // optional uint32 ScreenIndex = 10;
      case 10: {
        if (tag == 80) {
         parse_ScreenIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenindex_)));
          set_has_screenindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_RecordId;
        break;
      }

      // optional uint64 RecordId = 11;
      case 11: {
        if (tag == 88) {
         parse_RecordId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordid_)));
          set_has_recordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_BattleBTRecord;
        break;
      }

      // optional .pb.TBattleBTRecord BattleBTRecord = 12;
      case 12: {
        if (tag == 98) {
         parse_BattleBTRecord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlebtrecord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_SkillCountInfo;
        break;
      }

      // optional .pb.TSkillCountInfo SkillCountInfo = 13;
      case 13: {
        if (tag == 106) {
         parse_SkillCountInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skillcountinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_ValidWaveNumber;
        break;
      }

      // optional uint32 ValidWaveNumber = 14;
      case 14: {
        if (tag == 112) {
         parse_ValidWaveNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &validwavenumber_)));
          set_has_validwavenumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_TDRecordInfo;
        break;
      }

      // optional .pb.TTDRecordInfo TDRecordInfo = 15;
      case 15: {
        if (tag == 122) {
         parse_TDRecordInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tdrecordinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_ResultId;
        break;
      }

      // optional uint32 ResultId = 16;
      case 16: {
        if (tag == 128) {
         parse_ResultId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultid_)));
          set_has_resultid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_WheelWarFieldStatus;
        break;
      }

      // optional .pb.TWheelWarFieldStatus WheelWarFieldStatus = 17;
      case 17: {
        if (tag == 138) {
         parse_WheelWarFieldStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wheelwarfieldstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_Questioned;
        break;
      }

      // optional bool Questioned = 18;
      case 18: {
        if (tag == 144) {
         parse_Questioned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &questioned_)));
          set_has_questioned();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBattleResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBattleResult)
  return false;
#undef DO_
}

void TBattleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBattleResult)
  // required .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battleargs(), output);
  }

  // required uint32 StarLevel = 2;
  if (has_starlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->starlevel(), output);
  }

  // optional string ErrMsg = 3;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // repeated .pb.TArmyInfoAfterBattle Army1Arr = 5;
  for (int i = 0; i < this->army1arr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->army1arr(i), output);
  }

  // repeated .pb.TArmyInfoAfterBattle Army2Arr = 6;
  for (int i = 0; i < this->army2arr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->army2arr(i), output);
  }

  // optional bytes BattleReportStr = 7;
  if (has_battlereportstr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->battlereportstr(), output);
  }

  // optional uint64 BattleTime = 8;
  if (has_battletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->battletime(), output);
  }

  // optional string BattleFirewallVersion = 9;
  if (has_battlefirewallversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->battlefirewallversion().data(), this->battlefirewallversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "battlefirewallversion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->battlefirewallversion(), output);
  }

  // optional uint32 ScreenIndex = 10;
  if (has_screenindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->screenindex(), output);
  }

  // optional uint64 RecordId = 11;
  if (has_recordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->recordid(), output);
  }

  // optional .pb.TBattleBTRecord BattleBTRecord = 12;
  if (has_battlebtrecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->battlebtrecord(), output);
  }

  // optional .pb.TSkillCountInfo SkillCountInfo = 13;
  if (has_skillcountinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->skillcountinfo(), output);
  }

  // optional uint32 ValidWaveNumber = 14;
  if (has_validwavenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->validwavenumber(), output);
  }

  // optional .pb.TTDRecordInfo TDRecordInfo = 15;
  if (has_tdrecordinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->tdrecordinfo(), output);
  }

  // optional uint32 ResultId = 16;
  if (has_resultid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->resultid(), output);
  }

  // optional .pb.TWheelWarFieldStatus WheelWarFieldStatus = 17;
  if (has_wheelwarfieldstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->wheelwarfieldstatus(), output);
  }

  // optional bool Questioned = 18;
  if (has_questioned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->questioned(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBattleResult)
}

::google::protobuf::uint8* TBattleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBattleResult)
  // required .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battleargs(), target);
  }

  // required uint32 StarLevel = 2;
  if (has_starlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->starlevel(), target);
  }

  // optional string ErrMsg = 3;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // repeated .pb.TArmyInfoAfterBattle Army1Arr = 5;
  for (int i = 0; i < this->army1arr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->army1arr(i), target);
  }

  // repeated .pb.TArmyInfoAfterBattle Army2Arr = 6;
  for (int i = 0; i < this->army2arr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->army2arr(i), target);
  }

  // optional bytes BattleReportStr = 7;
  if (has_battlereportstr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->battlereportstr(), target);
  }

  // optional uint64 BattleTime = 8;
  if (has_battletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->battletime(), target);
  }

  // optional string BattleFirewallVersion = 9;
  if (has_battlefirewallversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->battlefirewallversion().data(), this->battlefirewallversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "battlefirewallversion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->battlefirewallversion(), target);
  }

  // optional uint32 ScreenIndex = 10;
  if (has_screenindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->screenindex(), target);
  }

  // optional uint64 RecordId = 11;
  if (has_recordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->recordid(), target);
  }

  // optional .pb.TBattleBTRecord BattleBTRecord = 12;
  if (has_battlebtrecord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->battlebtrecord(), target);
  }

  // optional .pb.TSkillCountInfo SkillCountInfo = 13;
  if (has_skillcountinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->skillcountinfo(), target);
  }

  // optional uint32 ValidWaveNumber = 14;
  if (has_validwavenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->validwavenumber(), target);
  }

  // optional .pb.TTDRecordInfo TDRecordInfo = 15;
  if (has_tdrecordinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->tdrecordinfo(), target);
  }

  // optional uint32 ResultId = 16;
  if (has_resultid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->resultid(), target);
  }

  // optional .pb.TWheelWarFieldStatus WheelWarFieldStatus = 17;
  if (has_wheelwarfieldstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->wheelwarfieldstatus(), target);
  }

  // optional bool Questioned = 18;
  if (has_questioned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->questioned(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBattleResult)
  return target;
}

int TBattleResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.TBattleArgs BattleArgs = 1;
    if (has_battleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleargs());
    }

    // required uint32 StarLevel = 2;
    if (has_starlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starlevel());
    }

    // optional string ErrMsg = 3;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional bytes BattleReportStr = 7;
    if (has_battlereportstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battlereportstr());
    }

    // optional uint64 BattleTime = 8;
    if (has_battletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battletime());
    }

    // optional string BattleFirewallVersion = 9;
    if (has_battlefirewallversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->battlefirewallversion());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 ScreenIndex = 10;
    if (has_screenindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenindex());
    }

    // optional uint64 RecordId = 11;
    if (has_recordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordid());
    }

    // optional .pb.TBattleBTRecord BattleBTRecord = 12;
    if (has_battlebtrecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlebtrecord());
    }

    // optional .pb.TSkillCountInfo SkillCountInfo = 13;
    if (has_skillcountinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skillcountinfo());
    }

    // optional uint32 ValidWaveNumber = 14;
    if (has_validwavenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->validwavenumber());
    }

    // optional .pb.TTDRecordInfo TDRecordInfo = 15;
    if (has_tdrecordinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tdrecordinfo());
    }

    // optional uint32 ResultId = 16;
    if (has_resultid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resultid());
    }

    // optional .pb.TWheelWarFieldStatus WheelWarFieldStatus = 17;
    if (has_wheelwarfieldstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wheelwarfieldstatus());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool Questioned = 18;
    if (has_questioned()) {
      total_size += 2 + 1;
    }

  }
  // repeated .pb.TArmyInfoAfterBattle Army1Arr = 5;
  total_size += 1 * this->army1arr_size();
  for (int i = 0; i < this->army1arr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->army1arr(i));
  }

  // repeated .pb.TArmyInfoAfterBattle Army2Arr = 6;
  total_size += 1 * this->army2arr_size();
  for (int i = 0; i < this->army2arr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->army2arr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBattleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBattleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBattleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBattleResult::MergeFrom(const TBattleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  army1arr_.MergeFrom(from.army1arr_);
  army2arr_.MergeFrom(from.army2arr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleargs()) {
      mutable_battleargs()->::pb::TBattleArgs::MergeFrom(from.battleargs());
    }
    if (from.has_starlevel()) {
      set_starlevel(from.starlevel());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_battlereportstr()) {
      set_battlereportstr(from.battlereportstr());
    }
    if (from.has_battletime()) {
      set_battletime(from.battletime());
    }
    if (from.has_battlefirewallversion()) {
      set_battlefirewallversion(from.battlefirewallversion());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_screenindex()) {
      set_screenindex(from.screenindex());
    }
    if (from.has_recordid()) {
      set_recordid(from.recordid());
    }
    if (from.has_battlebtrecord()) {
      mutable_battlebtrecord()->::pb::TBattleBTRecord::MergeFrom(from.battlebtrecord());
    }
    if (from.has_skillcountinfo()) {
      mutable_skillcountinfo()->::pb::TSkillCountInfo::MergeFrom(from.skillcountinfo());
    }
    if (from.has_validwavenumber()) {
      set_validwavenumber(from.validwavenumber());
    }
    if (from.has_tdrecordinfo()) {
      mutable_tdrecordinfo()->::pb::TTDRecordInfo::MergeFrom(from.tdrecordinfo());
    }
    if (from.has_resultid()) {
      set_resultid(from.resultid());
    }
    if (from.has_wheelwarfieldstatus()) {
      mutable_wheelwarfieldstatus()->::pb::TWheelWarFieldStatus::MergeFrom(from.wheelwarfieldstatus());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_questioned()) {
      set_questioned(from.questioned());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBattleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBattleResult::CopyFrom(const TBattleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBattleResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_battleargs()) {
    if (!this->battleargs().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->army1arr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->army2arr())) return false;
  if (has_battlebtrecord()) {
    if (!this->battlebtrecord().IsInitialized()) return false;
  }
  if (has_skillcountinfo()) {
    if (!this->skillcountinfo().IsInitialized()) return false;
  }
  if (has_tdrecordinfo()) {
    if (!this->tdrecordinfo().IsInitialized()) return false;
  }
  return true;
}

void TBattleResult::Swap(TBattleResult* other) {
  if (other != this) {
    std::swap(battleargs_, other->battleargs_);
    std::swap(starlevel_, other->starlevel_);
    std::swap(errmsg_, other->errmsg_);
    army1arr_.Swap(&other->army1arr_);
    army2arr_.Swap(&other->army2arr_);
    std::swap(battlereportstr_, other->battlereportstr_);
    std::swap(battletime_, other->battletime_);
    std::swap(battlefirewallversion_, other->battlefirewallversion_);
    std::swap(screenindex_, other->screenindex_);
    std::swap(recordid_, other->recordid_);
    std::swap(battlebtrecord_, other->battlebtrecord_);
    std::swap(skillcountinfo_, other->skillcountinfo_);
    std::swap(validwavenumber_, other->validwavenumber_);
    std::swap(tdrecordinfo_, other->tdrecordinfo_);
    std::swap(resultid_, other->resultid_);
    std::swap(wheelwarfieldstatus_, other->wheelwarfieldstatus_);
    std::swap(questioned_, other->questioned_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBattleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBattleResult_descriptor_;
  metadata.reflection = TBattleResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBattleBTRecord::kBTActionInfoArrFieldNumber;
#endif  // !_MSC_VER

TBattleBTRecord::TBattleBTRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBattleBTRecord)
}

void TBattleBTRecord::InitAsDefaultInstance() {
}

TBattleBTRecord::TBattleBTRecord(const TBattleBTRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBattleBTRecord)
}

void TBattleBTRecord::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBattleBTRecord::~TBattleBTRecord() {
  // @@protoc_insertion_point(destructor:pb.TBattleBTRecord)
  SharedDtor();
}

void TBattleBTRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBattleBTRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBattleBTRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBattleBTRecord_descriptor_;
}

const TBattleBTRecord& TBattleBTRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TBattleBTRecord* TBattleBTRecord::default_instance_ = NULL;

TBattleBTRecord* TBattleBTRecord::New() const {
  return new TBattleBTRecord;
}

void TBattleBTRecord::Clear() {
  btactioninfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBattleBTRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBattleBTRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TBTActionInfo BTActionInfoArr = 1;
      case 1: {
        if (tag == 10) {
         parse_BTActionInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_btactioninfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_BTActionInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBattleBTRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBattleBTRecord)
  return false;
#undef DO_
}

void TBattleBTRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBattleBTRecord)
  // repeated .pb.TBTActionInfo BTActionInfoArr = 1;
  for (int i = 0; i < this->btactioninfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->btactioninfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBattleBTRecord)
}

::google::protobuf::uint8* TBattleBTRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBattleBTRecord)
  // repeated .pb.TBTActionInfo BTActionInfoArr = 1;
  for (int i = 0; i < this->btactioninfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->btactioninfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBattleBTRecord)
  return target;
}

int TBattleBTRecord::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TBTActionInfo BTActionInfoArr = 1;
  total_size += 1 * this->btactioninfoarr_size();
  for (int i = 0; i < this->btactioninfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->btactioninfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBattleBTRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBattleBTRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBattleBTRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBattleBTRecord::MergeFrom(const TBattleBTRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  btactioninfoarr_.MergeFrom(from.btactioninfoarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBattleBTRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBattleBTRecord::CopyFrom(const TBattleBTRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBattleBTRecord::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->btactioninfoarr())) return false;
  return true;
}

void TBattleBTRecord::Swap(TBattleBTRecord* other) {
  if (other != this) {
    btactioninfoarr_.Swap(&other->btactioninfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBattleBTRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBattleBTRecord_descriptor_;
  metadata.reflection = TBattleBTRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGroupMatchResult::kTypeFieldNumber;
const int TGroupMatchResult::kGroupResultsFieldNumber;
const int TGroupMatchResult::kGroupArmysFieldNumber;
#endif  // !_MSC_VER

TGroupMatchResult::TGroupMatchResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGroupMatchResult)
}

void TGroupMatchResult::InitAsDefaultInstance() {
}

TGroupMatchResult::TGroupMatchResult(const TGroupMatchResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGroupMatchResult)
}

void TGroupMatchResult::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGroupMatchResult::~TGroupMatchResult() {
  // @@protoc_insertion_point(destructor:pb.TGroupMatchResult)
  SharedDtor();
}

void TGroupMatchResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGroupMatchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupMatchResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupMatchResult_descriptor_;
}

const TGroupMatchResult& TGroupMatchResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TGroupMatchResult* TGroupMatchResult::default_instance_ = NULL;

TGroupMatchResult* TGroupMatchResult::New() const {
  return new TGroupMatchResult;
}

void TGroupMatchResult::Clear() {
  type_ = 1;
  groupresults_.Clear();
  grouparmys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGroupMatchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGroupMatchResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.EGroupMatchType Type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EGroupMatchType_IsValid(value)) {
            set_type(static_cast< ::pb::EGroupMatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GroupResults;
        break;
      }

      // repeated .pb.TBattleResult GroupResults = 2;
      case 2: {
        if (tag == 18) {
         parse_GroupResults:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groupresults()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GroupResults;
        if (input->ExpectTag(26)) goto parse_GroupArmys;
        break;
      }

      // repeated .pb.TArmyInfo GroupArmys = 3;
      case 3: {
        if (tag == 26) {
         parse_GroupArmys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grouparmys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_GroupArmys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGroupMatchResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGroupMatchResult)
  return false;
#undef DO_
}

void TGroupMatchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGroupMatchResult)
  // required .pb.EGroupMatchType Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .pb.TBattleResult GroupResults = 2;
  for (int i = 0; i < this->groupresults_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->groupresults(i), output);
  }

  // repeated .pb.TArmyInfo GroupArmys = 3;
  for (int i = 0; i < this->grouparmys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->grouparmys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGroupMatchResult)
}

::google::protobuf::uint8* TGroupMatchResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGroupMatchResult)
  // required .pb.EGroupMatchType Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .pb.TBattleResult GroupResults = 2;
  for (int i = 0; i < this->groupresults_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->groupresults(i), target);
  }

  // repeated .pb.TArmyInfo GroupArmys = 3;
  for (int i = 0; i < this->grouparmys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->grouparmys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGroupMatchResult)
  return target;
}

int TGroupMatchResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.EGroupMatchType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .pb.TBattleResult GroupResults = 2;
  total_size += 1 * this->groupresults_size();
  for (int i = 0; i < this->groupresults_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groupresults(i));
  }

  // repeated .pb.TArmyInfo GroupArmys = 3;
  total_size += 1 * this->grouparmys_size();
  for (int i = 0; i < this->grouparmys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grouparmys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupMatchResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGroupMatchResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGroupMatchResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGroupMatchResult::MergeFrom(const TGroupMatchResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  groupresults_.MergeFrom(from.groupresults_);
  grouparmys_.MergeFrom(from.grouparmys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGroupMatchResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupMatchResult::CopyFrom(const TGroupMatchResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGroupMatchResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->groupresults())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->grouparmys())) return false;
  return true;
}

void TGroupMatchResult::Swap(TGroupMatchResult* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    groupresults_.Swap(&other->groupresults_);
    grouparmys_.Swap(&other->grouparmys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGroupMatchResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupMatchResult_descriptor_;
  metadata.reflection = TGroupMatchResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGroupMatchArgs::kTypeFieldNumber;
const int TGroupMatchArgs::kBaseBattleArgsFieldNumber;
const int TGroupMatchArgs::kGroupArmysFieldNumber;
#endif  // !_MSC_VER

TGroupMatchArgs::TGroupMatchArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGroupMatchArgs)
}

void TGroupMatchArgs::InitAsDefaultInstance() {
  basebattleargs_ = const_cast< ::pb::TBattleArgs*>(&::pb::TBattleArgs::default_instance());
}

TGroupMatchArgs::TGroupMatchArgs(const TGroupMatchArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGroupMatchArgs)
}

void TGroupMatchArgs::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  basebattleargs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGroupMatchArgs::~TGroupMatchArgs() {
  // @@protoc_insertion_point(destructor:pb.TGroupMatchArgs)
  SharedDtor();
}

void TGroupMatchArgs::SharedDtor() {
  if (this != default_instance_) {
    delete basebattleargs_;
  }
}

void TGroupMatchArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGroupMatchArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGroupMatchArgs_descriptor_;
}

const TGroupMatchArgs& TGroupMatchArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TGroupMatchArgs* TGroupMatchArgs::default_instance_ = NULL;

TGroupMatchArgs* TGroupMatchArgs::New() const {
  return new TGroupMatchArgs;
}

void TGroupMatchArgs::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    if (has_basebattleargs()) {
      if (basebattleargs_ != NULL) basebattleargs_->::pb::TBattleArgs::Clear();
    }
  }
  grouparmys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGroupMatchArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGroupMatchArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.EGroupMatchType Type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EGroupMatchType_IsValid(value)) {
            set_type(static_cast< ::pb::EGroupMatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BaseBattleArgs;
        break;
      }

      // optional .pb.TBattleArgs BaseBattleArgs = 2;
      case 2: {
        if (tag == 18) {
         parse_BaseBattleArgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basebattleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_GroupArmys;
        break;
      }

      // repeated .pb.TArmyInfo GroupArmys = 3;
      case 3: {
        if (tag == 26) {
         parse_GroupArmys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grouparmys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_GroupArmys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGroupMatchArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGroupMatchArgs)
  return false;
#undef DO_
}

void TGroupMatchArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGroupMatchArgs)
  // required .pb.EGroupMatchType Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .pb.TBattleArgs BaseBattleArgs = 2;
  if (has_basebattleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->basebattleargs(), output);
  }

  // repeated .pb.TArmyInfo GroupArmys = 3;
  for (int i = 0; i < this->grouparmys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->grouparmys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGroupMatchArgs)
}

::google::protobuf::uint8* TGroupMatchArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGroupMatchArgs)
  // required .pb.EGroupMatchType Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .pb.TBattleArgs BaseBattleArgs = 2;
  if (has_basebattleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->basebattleargs(), target);
  }

  // repeated .pb.TArmyInfo GroupArmys = 3;
  for (int i = 0; i < this->grouparmys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->grouparmys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGroupMatchArgs)
  return target;
}

int TGroupMatchArgs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.EGroupMatchType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .pb.TBattleArgs BaseBattleArgs = 2;
    if (has_basebattleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basebattleargs());
    }

  }
  // repeated .pb.TArmyInfo GroupArmys = 3;
  total_size += 1 * this->grouparmys_size();
  for (int i = 0; i < this->grouparmys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grouparmys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGroupMatchArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGroupMatchArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGroupMatchArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGroupMatchArgs::MergeFrom(const TGroupMatchArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  grouparmys_.MergeFrom(from.grouparmys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_basebattleargs()) {
      mutable_basebattleargs()->::pb::TBattleArgs::MergeFrom(from.basebattleargs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGroupMatchArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGroupMatchArgs::CopyFrom(const TGroupMatchArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGroupMatchArgs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_basebattleargs()) {
    if (!this->basebattleargs().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->grouparmys())) return false;
  return true;
}

void TGroupMatchArgs::Swap(TGroupMatchArgs* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(basebattleargs_, other->basebattleargs_);
    grouparmys_.Swap(&other->grouparmys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGroupMatchArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGroupMatchArgs_descriptor_;
  metadata.reflection = TGroupMatchArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBattleResultReq::kRidFieldNumber;
const int TBattleResultReq::kServerIdFieldNumber;
#endif  // !_MSC_VER

TBattleResultReq::TBattleResultReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBattleResultReq)
}

void TBattleResultReq::InitAsDefaultInstance() {
}

TBattleResultReq::TBattleResultReq(const TBattleResultReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBattleResultReq)
}

void TBattleResultReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rid_ = GOOGLE_ULONGLONG(0);
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBattleResultReq::~TBattleResultReq() {
  // @@protoc_insertion_point(destructor:pb.TBattleResultReq)
  SharedDtor();
}

void TBattleResultReq::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void TBattleResultReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBattleResultReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBattleResultReq_descriptor_;
}

const TBattleResultReq& TBattleResultReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TBattleResultReq* TBattleResultReq::default_instance_ = NULL;

TBattleResultReq* TBattleResultReq::New() const {
  return new TBattleResultReq;
}

void TBattleResultReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    rid_ = GOOGLE_ULONGLONG(0);
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBattleResultReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBattleResultReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 rid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 2;
      case 2: {
        if (tag == 18) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBattleResultReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBattleResultReq)
  return false;
#undef DO_
}

void TBattleResultReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBattleResultReq)
  // optional uint64 rid = 1;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->rid(), output);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBattleResultReq)
}

::google::protobuf::uint8* TBattleResultReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBattleResultReq)
  // optional uint64 rid = 1;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->rid(), target);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBattleResultReq)
  return target;
}

int TBattleResultReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 rid = 1;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rid());
    }

    // optional string ServerId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBattleResultReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBattleResultReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBattleResultReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBattleResultReq::MergeFrom(const TBattleResultReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBattleResultReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBattleResultReq::CopyFrom(const TBattleResultReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBattleResultReq::IsInitialized() const {

  return true;
}

void TBattleResultReq::Swap(TBattleResultReq* other) {
  if (other != this) {
    std::swap(rid_, other->rid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBattleResultReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBattleResultReq_descriptor_;
  metadata.reflection = TBattleResultReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBattleLocalResultReq::kLocalIdFieldNumber;
const int TBattleLocalResultReq::kRidFieldNumber;
const int TBattleLocalResultReq::kServerIdFieldNumber;
#endif  // !_MSC_VER

TBattleLocalResultReq::TBattleLocalResultReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBattleLocalResultReq)
}

void TBattleLocalResultReq::InitAsDefaultInstance() {
}

TBattleLocalResultReq::TBattleLocalResultReq(const TBattleLocalResultReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBattleLocalResultReq)
}

void TBattleLocalResultReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  localid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rid_ = GOOGLE_ULONGLONG(0);
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBattleLocalResultReq::~TBattleLocalResultReq() {
  // @@protoc_insertion_point(destructor:pb.TBattleLocalResultReq)
  SharedDtor();
}

void TBattleLocalResultReq::SharedDtor() {
  if (localid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete localid_;
  }
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void TBattleLocalResultReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBattleLocalResultReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBattleLocalResultReq_descriptor_;
}

const TBattleLocalResultReq& TBattleLocalResultReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TBattleLocalResultReq* TBattleLocalResultReq::default_instance_ = NULL;

TBattleLocalResultReq* TBattleLocalResultReq::New() const {
  return new TBattleLocalResultReq;
}

void TBattleLocalResultReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_localid()) {
      if (localid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        localid_->clear();
      }
    }
    rid_ = GOOGLE_ULONGLONG(0);
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBattleLocalResultReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBattleLocalResultReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string LocalId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->localid().data(), this->localid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "localid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Rid;
        break;
      }

      // optional uint64 Rid = 2;
      case 2: {
        if (tag == 16) {
         parse_Rid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 3;
      case 3: {
        if (tag == 26) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBattleLocalResultReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBattleLocalResultReq)
  return false;
#undef DO_
}

void TBattleLocalResultReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBattleLocalResultReq)
  // optional string LocalId = 1;
  if (has_localid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localid().data(), this->localid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "localid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->localid(), output);
  }

  // optional uint64 Rid = 2;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->rid(), output);
  }

  // optional string ServerId = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBattleLocalResultReq)
}

::google::protobuf::uint8* TBattleLocalResultReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBattleLocalResultReq)
  // optional string LocalId = 1;
  if (has_localid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localid().data(), this->localid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "localid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->localid(), target);
  }

  // optional uint64 Rid = 2;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->rid(), target);
  }

  // optional string ServerId = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBattleLocalResultReq)
  return target;
}

int TBattleLocalResultReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string LocalId = 1;
    if (has_localid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->localid());
    }

    // optional uint64 Rid = 2;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rid());
    }

    // optional string ServerId = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBattleLocalResultReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBattleLocalResultReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBattleLocalResultReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBattleLocalResultReq::MergeFrom(const TBattleLocalResultReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_localid()) {
      set_localid(from.localid());
    }
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBattleLocalResultReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBattleLocalResultReq::CopyFrom(const TBattleLocalResultReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBattleLocalResultReq::IsInitialized() const {

  return true;
}

void TBattleLocalResultReq::Swap(TBattleLocalResultReq* other) {
  if (other != this) {
    std::swap(localid_, other->localid_);
    std::swap(rid_, other->rid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBattleLocalResultReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBattleLocalResultReq_descriptor_;
  metadata.reflection = TBattleLocalResultReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBattleResultRsp::kBattleResultFieldNumber;
#endif  // !_MSC_VER

TBattleResultRsp::TBattleResultRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBattleResultRsp)
}

void TBattleResultRsp::InitAsDefaultInstance() {
  battleresult_ = const_cast< ::pb::TBattleResult*>(&::pb::TBattleResult::default_instance());
}

TBattleResultRsp::TBattleResultRsp(const TBattleResultRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBattleResultRsp)
}

void TBattleResultRsp::SharedCtor() {
  _cached_size_ = 0;
  battleresult_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBattleResultRsp::~TBattleResultRsp() {
  // @@protoc_insertion_point(destructor:pb.TBattleResultRsp)
  SharedDtor();
}

void TBattleResultRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battleresult_;
  }
}

void TBattleResultRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBattleResultRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBattleResultRsp_descriptor_;
}

const TBattleResultRsp& TBattleResultRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TBattleResultRsp* TBattleResultRsp::default_instance_ = NULL;

TBattleResultRsp* TBattleResultRsp::New() const {
  return new TBattleResultRsp;
}

void TBattleResultRsp::Clear() {
  if (has_battleresult()) {
    if (battleresult_ != NULL) battleresult_->::pb::TBattleResult::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBattleResultRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBattleResultRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBattleResult battleResult = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBattleResultRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBattleResultRsp)
  return false;
#undef DO_
}

void TBattleResultRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBattleResultRsp)
  // optional .pb.TBattleResult battleResult = 1;
  if (has_battleresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battleresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBattleResultRsp)
}

::google::protobuf::uint8* TBattleResultRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBattleResultRsp)
  // optional .pb.TBattleResult battleResult = 1;
  if (has_battleresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battleresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBattleResultRsp)
  return target;
}

int TBattleResultRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBattleResult battleResult = 1;
    if (has_battleresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBattleResultRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBattleResultRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBattleResultRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBattleResultRsp::MergeFrom(const TBattleResultRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleresult()) {
      mutable_battleresult()->::pb::TBattleResult::MergeFrom(from.battleresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBattleResultRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBattleResultRsp::CopyFrom(const TBattleResultRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBattleResultRsp::IsInitialized() const {

  if (has_battleresult()) {
    if (!this->battleresult().IsInitialized()) return false;
  }
  return true;
}

void TBattleResultRsp::Swap(TBattleResultRsp* other) {
  if (other != this) {
    std::swap(battleresult_, other->battleresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBattleResultRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBattleResultRsp_descriptor_;
  metadata.reflection = TBattleResultRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBattleCheckParam::kBattleConfVerFieldNumber;
const int TBattleCheckParam::kMyArmyFormationFieldNumber;
#endif  // !_MSC_VER

TBattleCheckParam::TBattleCheckParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBattleCheckParam)
}

void TBattleCheckParam::InitAsDefaultInstance() {
}

TBattleCheckParam::TBattleCheckParam(const TBattleCheckParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBattleCheckParam)
}

void TBattleCheckParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  battleconfver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBattleCheckParam::~TBattleCheckParam() {
  // @@protoc_insertion_point(destructor:pb.TBattleCheckParam)
  SharedDtor();
}

void TBattleCheckParam::SharedDtor() {
  if (battleconfver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleconfver_;
  }
  if (this != default_instance_) {
  }
}

void TBattleCheckParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBattleCheckParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBattleCheckParam_descriptor_;
}

const TBattleCheckParam& TBattleCheckParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TBattleCheckParam* TBattleCheckParam::default_instance_ = NULL;

TBattleCheckParam* TBattleCheckParam::New() const {
  return new TBattleCheckParam;
}

void TBattleCheckParam::Clear() {
  if (has_battleconfver()) {
    if (battleconfver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      battleconfver_->clear();
    }
  }
  myarmyformation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBattleCheckParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBattleCheckParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string BattleConfVer = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battleconfver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->battleconfver().data(), this->battleconfver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "battleconfver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MyArmyFormation;
        break;
      }

      // repeated .pb.TArmyFormation MyArmyFormation = 2;
      case 2: {
        if (tag == 18) {
         parse_MyArmyFormation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_myarmyformation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MyArmyFormation;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBattleCheckParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBattleCheckParam)
  return false;
#undef DO_
}

void TBattleCheckParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBattleCheckParam)
  // optional string BattleConfVer = 1;
  if (has_battleconfver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->battleconfver().data(), this->battleconfver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "battleconfver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->battleconfver(), output);
  }

  // repeated .pb.TArmyFormation MyArmyFormation = 2;
  for (int i = 0; i < this->myarmyformation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->myarmyformation(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBattleCheckParam)
}

::google::protobuf::uint8* TBattleCheckParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBattleCheckParam)
  // optional string BattleConfVer = 1;
  if (has_battleconfver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->battleconfver().data(), this->battleconfver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "battleconfver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->battleconfver(), target);
  }

  // repeated .pb.TArmyFormation MyArmyFormation = 2;
  for (int i = 0; i < this->myarmyformation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->myarmyformation(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBattleCheckParam)
  return target;
}

int TBattleCheckParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string BattleConfVer = 1;
    if (has_battleconfver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->battleconfver());
    }

  }
  // repeated .pb.TArmyFormation MyArmyFormation = 2;
  total_size += 1 * this->myarmyformation_size();
  for (int i = 0; i < this->myarmyformation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->myarmyformation(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBattleCheckParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBattleCheckParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBattleCheckParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBattleCheckParam::MergeFrom(const TBattleCheckParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  myarmyformation_.MergeFrom(from.myarmyformation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleconfver()) {
      set_battleconfver(from.battleconfver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBattleCheckParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBattleCheckParam::CopyFrom(const TBattleCheckParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBattleCheckParam::IsInitialized() const {

  return true;
}

void TBattleCheckParam::Swap(TBattleCheckParam* other) {
  if (other != this) {
    std::swap(battleconfver_, other->battleconfver_);
    myarmyformation_.Swap(&other->myarmyformation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBattleCheckParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBattleCheckParam_descriptor_;
  metadata.reflection = TBattleCheckParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArmyFormation::kTeamFormationFieldNumber;
#endif  // !_MSC_VER

TArmyFormation::TArmyFormation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArmyFormation)
}

void TArmyFormation::InitAsDefaultInstance() {
}

TArmyFormation::TArmyFormation(const TArmyFormation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArmyFormation)
}

void TArmyFormation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArmyFormation::~TArmyFormation() {
  // @@protoc_insertion_point(destructor:pb.TArmyFormation)
  SharedDtor();
}

void TArmyFormation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArmyFormation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArmyFormation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArmyFormation_descriptor_;
}

const TArmyFormation& TArmyFormation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TArmyFormation* TArmyFormation::default_instance_ = NULL;

TArmyFormation* TArmyFormation::New() const {
  return new TArmyFormation;
}

void TArmyFormation::Clear() {
  teamformation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArmyFormation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArmyFormation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUnitFormation TeamFormation = 1;
      case 1: {
        if (tag == 10) {
         parse_TeamFormation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teamformation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_TeamFormation;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArmyFormation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArmyFormation)
  return false;
#undef DO_
}

void TArmyFormation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArmyFormation)
  // repeated .pb.TUnitFormation TeamFormation = 1;
  for (int i = 0; i < this->teamformation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teamformation(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArmyFormation)
}

::google::protobuf::uint8* TArmyFormation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArmyFormation)
  // repeated .pb.TUnitFormation TeamFormation = 1;
  for (int i = 0; i < this->teamformation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teamformation(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArmyFormation)
  return target;
}

int TArmyFormation::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TUnitFormation TeamFormation = 1;
  total_size += 1 * this->teamformation_size();
  for (int i = 0; i < this->teamformation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teamformation(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArmyFormation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArmyFormation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArmyFormation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArmyFormation::MergeFrom(const TArmyFormation& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamformation_.MergeFrom(from.teamformation_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArmyFormation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArmyFormation::CopyFrom(const TArmyFormation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArmyFormation::IsInitialized() const {

  return true;
}

void TArmyFormation::Swap(TArmyFormation* other) {
  if (other != this) {
    teamformation_.Swap(&other->teamformation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArmyFormation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArmyFormation_descriptor_;
  metadata.reflection = TArmyFormation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUnitFormation::kHidFieldNumber;
const int TUnitFormation::kPosFieldNumber;
#endif  // !_MSC_VER

TUnitFormation::TUnitFormation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUnitFormation)
}

void TUnitFormation::InitAsDefaultInstance() {
}

TUnitFormation::TUnitFormation(const TUnitFormation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUnitFormation)
}

void TUnitFormation::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUnitFormation::~TUnitFormation() {
  // @@protoc_insertion_point(destructor:pb.TUnitFormation)
  SharedDtor();
}

void TUnitFormation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUnitFormation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUnitFormation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUnitFormation_descriptor_;
}

const TUnitFormation& TUnitFormation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TUnitFormation* TUnitFormation::default_instance_ = NULL;

TUnitFormation* TUnitFormation::New() const {
  return new TUnitFormation;
}

void TUnitFormation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUnitFormation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hid_, pos_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUnitFormation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUnitFormation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Pos;
        break;
      }

      // optional uint32 Pos = 2;
      case 2: {
        if (tag == 16) {
         parse_Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUnitFormation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUnitFormation)
  return false;
#undef DO_
}

void TUnitFormation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUnitFormation)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUnitFormation)
}

::google::protobuf::uint8* TUnitFormation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUnitFormation)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUnitFormation)
  return target;
}

int TUnitFormation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint32 Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUnitFormation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUnitFormation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUnitFormation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUnitFormation::MergeFrom(const TUnitFormation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUnitFormation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUnitFormation::CopyFrom(const TUnitFormation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUnitFormation::IsInitialized() const {

  return true;
}

void TUnitFormation::Swap(TUnitFormation* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUnitFormation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUnitFormation_descriptor_;
  metadata.reflection = TUnitFormation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGetBattleArgsWithUidListRsp::kOtherUserArmyArrFieldNumber;
#endif  // !_MSC_VER

TGetBattleArgsWithUidListRsp::TGetBattleArgsWithUidListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGetBattleArgsWithUidListRsp)
}

void TGetBattleArgsWithUidListRsp::InitAsDefaultInstance() {
}

TGetBattleArgsWithUidListRsp::TGetBattleArgsWithUidListRsp(const TGetBattleArgsWithUidListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGetBattleArgsWithUidListRsp)
}

void TGetBattleArgsWithUidListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGetBattleArgsWithUidListRsp::~TGetBattleArgsWithUidListRsp() {
  // @@protoc_insertion_point(destructor:pb.TGetBattleArgsWithUidListRsp)
  SharedDtor();
}

void TGetBattleArgsWithUidListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGetBattleArgsWithUidListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGetBattleArgsWithUidListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGetBattleArgsWithUidListRsp_descriptor_;
}

const TGetBattleArgsWithUidListRsp& TGetBattleArgsWithUidListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TGetBattleArgsWithUidListRsp* TGetBattleArgsWithUidListRsp::default_instance_ = NULL;

TGetBattleArgsWithUidListRsp* TGetBattleArgsWithUidListRsp::New() const {
  return new TGetBattleArgsWithUidListRsp;
}

void TGetBattleArgsWithUidListRsp::Clear() {
  otheruserarmyarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGetBattleArgsWithUidListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGetBattleArgsWithUidListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TArmyInfo OtherUserArmyArr = 1;
      case 1: {
        if (tag == 10) {
         parse_OtherUserArmyArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_otheruserarmyarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_OtherUserArmyArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGetBattleArgsWithUidListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGetBattleArgsWithUidListRsp)
  return false;
#undef DO_
}

void TGetBattleArgsWithUidListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGetBattleArgsWithUidListRsp)
  // repeated .pb.TArmyInfo OtherUserArmyArr = 1;
  for (int i = 0; i < this->otheruserarmyarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->otheruserarmyarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGetBattleArgsWithUidListRsp)
}

::google::protobuf::uint8* TGetBattleArgsWithUidListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGetBattleArgsWithUidListRsp)
  // repeated .pb.TArmyInfo OtherUserArmyArr = 1;
  for (int i = 0; i < this->otheruserarmyarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->otheruserarmyarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGetBattleArgsWithUidListRsp)
  return target;
}

int TGetBattleArgsWithUidListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TArmyInfo OtherUserArmyArr = 1;
  total_size += 1 * this->otheruserarmyarr_size();
  for (int i = 0; i < this->otheruserarmyarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->otheruserarmyarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGetBattleArgsWithUidListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGetBattleArgsWithUidListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGetBattleArgsWithUidListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGetBattleArgsWithUidListRsp::MergeFrom(const TGetBattleArgsWithUidListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  otheruserarmyarr_.MergeFrom(from.otheruserarmyarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGetBattleArgsWithUidListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGetBattleArgsWithUidListRsp::CopyFrom(const TGetBattleArgsWithUidListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGetBattleArgsWithUidListRsp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->otheruserarmyarr())) return false;
  return true;
}

void TGetBattleArgsWithUidListRsp::Swap(TGetBattleArgsWithUidListRsp* other) {
  if (other != this) {
    otheruserarmyarr_.Swap(&other->otheruserarmyarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGetBattleArgsWithUidListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGetBattleArgsWithUidListRsp_descriptor_;
  metadata.reflection = TGetBattleArgsWithUidListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBatchBattleArgs::kBattleArgsArrFieldNumber;
#endif  // !_MSC_VER

TBatchBattleArgs::TBatchBattleArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBatchBattleArgs)
}

void TBatchBattleArgs::InitAsDefaultInstance() {
}

TBatchBattleArgs::TBatchBattleArgs(const TBatchBattleArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBatchBattleArgs)
}

void TBatchBattleArgs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBatchBattleArgs::~TBatchBattleArgs() {
  // @@protoc_insertion_point(destructor:pb.TBatchBattleArgs)
  SharedDtor();
}

void TBatchBattleArgs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBatchBattleArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBatchBattleArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBatchBattleArgs_descriptor_;
}

const TBatchBattleArgs& TBatchBattleArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TBatchBattleArgs* TBatchBattleArgs::default_instance_ = NULL;

TBatchBattleArgs* TBatchBattleArgs::New() const {
  return new TBatchBattleArgs;
}

void TBatchBattleArgs::Clear() {
  battleargsarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBatchBattleArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBatchBattleArgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TBattleArgs BattleArgsArr = 1;
      case 1: {
        if (tag == 10) {
         parse_BattleArgsArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battleargsarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_BattleArgsArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBatchBattleArgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBatchBattleArgs)
  return false;
#undef DO_
}

void TBatchBattleArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBatchBattleArgs)
  // repeated .pb.TBattleArgs BattleArgsArr = 1;
  for (int i = 0; i < this->battleargsarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battleargsarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBatchBattleArgs)
}

::google::protobuf::uint8* TBatchBattleArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBatchBattleArgs)
  // repeated .pb.TBattleArgs BattleArgsArr = 1;
  for (int i = 0; i < this->battleargsarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battleargsarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBatchBattleArgs)
  return target;
}

int TBatchBattleArgs::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TBattleArgs BattleArgsArr = 1;
  total_size += 1 * this->battleargsarr_size();
  for (int i = 0; i < this->battleargsarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battleargsarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBatchBattleArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBatchBattleArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBatchBattleArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBatchBattleArgs::MergeFrom(const TBatchBattleArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  battleargsarr_.MergeFrom(from.battleargsarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBatchBattleArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBatchBattleArgs::CopyFrom(const TBatchBattleArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBatchBattleArgs::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->battleargsarr())) return false;
  return true;
}

void TBatchBattleArgs::Swap(TBatchBattleArgs* other) {
  if (other != this) {
    battleargsarr_.Swap(&other->battleargsarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBatchBattleArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBatchBattleArgs_descriptor_;
  metadata.reflection = TBatchBattleArgs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBatchBattleResult::kBattleResultArrFieldNumber;
#endif  // !_MSC_VER

TBatchBattleResult::TBatchBattleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBatchBattleResult)
}

void TBatchBattleResult::InitAsDefaultInstance() {
}

TBatchBattleResult::TBatchBattleResult(const TBatchBattleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBatchBattleResult)
}

void TBatchBattleResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBatchBattleResult::~TBatchBattleResult() {
  // @@protoc_insertion_point(destructor:pb.TBatchBattleResult)
  SharedDtor();
}

void TBatchBattleResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBatchBattleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBatchBattleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBatchBattleResult_descriptor_;
}

const TBatchBattleResult& TBatchBattleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TBatchBattleResult* TBatchBattleResult::default_instance_ = NULL;

TBatchBattleResult* TBatchBattleResult::New() const {
  return new TBatchBattleResult;
}

void TBatchBattleResult::Clear() {
  battleresultarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBatchBattleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBatchBattleResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes BattleResultArr = 1;
      case 1: {
        if (tag == 10) {
         parse_BattleResultArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_battleresultarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_BattleResultArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBatchBattleResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBatchBattleResult)
  return false;
#undef DO_
}

void TBatchBattleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBatchBattleResult)
  // repeated bytes BattleResultArr = 1;
  for (int i = 0; i < this->battleresultarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->battleresultarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBatchBattleResult)
}

::google::protobuf::uint8* TBatchBattleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBatchBattleResult)
  // repeated bytes BattleResultArr = 1;
  for (int i = 0; i < this->battleresultarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->battleresultarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBatchBattleResult)
  return target;
}

int TBatchBattleResult::ByteSize() const {
  int total_size = 0;

  // repeated bytes BattleResultArr = 1;
  total_size += 1 * this->battleresultarr_size();
  for (int i = 0; i < this->battleresultarr_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->battleresultarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBatchBattleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBatchBattleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBatchBattleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBatchBattleResult::MergeFrom(const TBatchBattleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  battleresultarr_.MergeFrom(from.battleresultarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBatchBattleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBatchBattleResult::CopyFrom(const TBatchBattleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBatchBattleResult::IsInitialized() const {

  return true;
}

void TBatchBattleResult::Swap(TBatchBattleResult* other) {
  if (other != this) {
    battleresultarr_.Swap(&other->battleresultarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBatchBattleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBatchBattleResult_descriptor_;
  metadata.reflection = TBatchBattleResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGetBattleArgsWithParamReq::kBattleInfoIdFieldNumber;
const int TGetBattleArgsWithParamReq::kBattleStarterFieldNumber;
const int TGetBattleArgsWithParamReq::kBattleCheckParamFieldNumber;
#endif  // !_MSC_VER

TGetBattleArgsWithParamReq::TGetBattleArgsWithParamReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGetBattleArgsWithParamReq)
}

void TGetBattleArgsWithParamReq::InitAsDefaultInstance() {
  battlecheckparam_ = const_cast< ::pb::TBattleCheckParam*>(&::pb::TBattleCheckParam::default_instance());
}

TGetBattleArgsWithParamReq::TGetBattleArgsWithParamReq(const TGetBattleArgsWithParamReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGetBattleArgsWithParamReq)
}

void TGetBattleArgsWithParamReq::SharedCtor() {
  _cached_size_ = 0;
  battleinfoid_ = 0u;
  battlestarter_ = 0;
  battlecheckparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGetBattleArgsWithParamReq::~TGetBattleArgsWithParamReq() {
  // @@protoc_insertion_point(destructor:pb.TGetBattleArgsWithParamReq)
  SharedDtor();
}

void TGetBattleArgsWithParamReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlecheckparam_;
  }
}

void TGetBattleArgsWithParamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGetBattleArgsWithParamReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGetBattleArgsWithParamReq_descriptor_;
}

const TGetBattleArgsWithParamReq& TGetBattleArgsWithParamReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TGetBattleArgsWithParamReq* TGetBattleArgsWithParamReq::default_instance_ = NULL;

TGetBattleArgsWithParamReq* TGetBattleArgsWithParamReq::New() const {
  return new TGetBattleArgsWithParamReq;
}

void TGetBattleArgsWithParamReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGetBattleArgsWithParamReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(battleinfoid_, battlestarter_);
    if (has_battlecheckparam()) {
      if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGetBattleArgsWithParamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGetBattleArgsWithParamReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 BattleInfoId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleinfoid_)));
          set_has_battleinfoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BattleStarter;
        break;
      }

      // required .pb.EBattleStarter BattleStarter = 2;
      case 2: {
        if (tag == 16) {
         parse_BattleStarter:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EBattleStarter_IsValid(value)) {
            set_battlestarter(static_cast< ::pb::EBattleStarter >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BattleCheckParam;
        break;
      }

      // optional .pb.TBattleCheckParam BattleCheckParam = 3;
      case 3: {
        if (tag == 26) {
         parse_BattleCheckParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecheckparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGetBattleArgsWithParamReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGetBattleArgsWithParamReq)
  return false;
#undef DO_
}

void TGetBattleArgsWithParamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGetBattleArgsWithParamReq)
  // required uint32 BattleInfoId = 1;
  if (has_battleinfoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->battleinfoid(), output);
  }

  // required .pb.EBattleStarter BattleStarter = 2;
  if (has_battlestarter()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->battlestarter(), output);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 3;
  if (has_battlecheckparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battlecheckparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGetBattleArgsWithParamReq)
}

::google::protobuf::uint8* TGetBattleArgsWithParamReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGetBattleArgsWithParamReq)
  // required uint32 BattleInfoId = 1;
  if (has_battleinfoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->battleinfoid(), target);
  }

  // required .pb.EBattleStarter BattleStarter = 2;
  if (has_battlestarter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->battlestarter(), target);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 3;
  if (has_battlecheckparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battlecheckparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGetBattleArgsWithParamReq)
  return target;
}

int TGetBattleArgsWithParamReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 BattleInfoId = 1;
    if (has_battleinfoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleinfoid());
    }

    // required .pb.EBattleStarter BattleStarter = 2;
    if (has_battlestarter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->battlestarter());
    }

    // optional .pb.TBattleCheckParam BattleCheckParam = 3;
    if (has_battlecheckparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecheckparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGetBattleArgsWithParamReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGetBattleArgsWithParamReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGetBattleArgsWithParamReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGetBattleArgsWithParamReq::MergeFrom(const TGetBattleArgsWithParamReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleinfoid()) {
      set_battleinfoid(from.battleinfoid());
    }
    if (from.has_battlestarter()) {
      set_battlestarter(from.battlestarter());
    }
    if (from.has_battlecheckparam()) {
      mutable_battlecheckparam()->::pb::TBattleCheckParam::MergeFrom(from.battlecheckparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGetBattleArgsWithParamReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGetBattleArgsWithParamReq::CopyFrom(const TGetBattleArgsWithParamReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGetBattleArgsWithParamReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TGetBattleArgsWithParamReq::Swap(TGetBattleArgsWithParamReq* other) {
  if (other != this) {
    std::swap(battleinfoid_, other->battleinfoid_);
    std::swap(battlestarter_, other->battlestarter_);
    std::swap(battlecheckparam_, other->battlecheckparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGetBattleArgsWithParamReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGetBattleArgsWithParamReq_descriptor_;
  metadata.reflection = TGetBattleArgsWithParamReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGetBattleArgsWithParamRsp::kBattleArgsFieldNumber;
#endif  // !_MSC_VER

TGetBattleArgsWithParamRsp::TGetBattleArgsWithParamRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGetBattleArgsWithParamRsp)
}

void TGetBattleArgsWithParamRsp::InitAsDefaultInstance() {
  battleargs_ = const_cast< ::pb::TBattleArgs*>(&::pb::TBattleArgs::default_instance());
}

TGetBattleArgsWithParamRsp::TGetBattleArgsWithParamRsp(const TGetBattleArgsWithParamRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGetBattleArgsWithParamRsp)
}

void TGetBattleArgsWithParamRsp::SharedCtor() {
  _cached_size_ = 0;
  battleargs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGetBattleArgsWithParamRsp::~TGetBattleArgsWithParamRsp() {
  // @@protoc_insertion_point(destructor:pb.TGetBattleArgsWithParamRsp)
  SharedDtor();
}

void TGetBattleArgsWithParamRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battleargs_;
  }
}

void TGetBattleArgsWithParamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGetBattleArgsWithParamRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGetBattleArgsWithParamRsp_descriptor_;
}

const TGetBattleArgsWithParamRsp& TGetBattleArgsWithParamRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattle_2eproto();
  return *default_instance_;
}

TGetBattleArgsWithParamRsp* TGetBattleArgsWithParamRsp::default_instance_ = NULL;

TGetBattleArgsWithParamRsp* TGetBattleArgsWithParamRsp::New() const {
  return new TGetBattleArgsWithParamRsp;
}

void TGetBattleArgsWithParamRsp::Clear() {
  if (has_battleargs()) {
    if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGetBattleArgsWithParamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGetBattleArgsWithParamRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBattleArgs BattleArgs = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGetBattleArgsWithParamRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGetBattleArgsWithParamRsp)
  return false;
#undef DO_
}

void TGetBattleArgsWithParamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGetBattleArgsWithParamRsp)
  // optional .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battleargs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGetBattleArgsWithParamRsp)
}

::google::protobuf::uint8* TGetBattleArgsWithParamRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGetBattleArgsWithParamRsp)
  // optional .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battleargs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGetBattleArgsWithParamRsp)
  return target;
}

int TGetBattleArgsWithParamRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBattleArgs BattleArgs = 1;
    if (has_battleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleargs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGetBattleArgsWithParamRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGetBattleArgsWithParamRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGetBattleArgsWithParamRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGetBattleArgsWithParamRsp::MergeFrom(const TGetBattleArgsWithParamRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleargs()) {
      mutable_battleargs()->::pb::TBattleArgs::MergeFrom(from.battleargs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGetBattleArgsWithParamRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGetBattleArgsWithParamRsp::CopyFrom(const TGetBattleArgsWithParamRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGetBattleArgsWithParamRsp::IsInitialized() const {

  if (has_battleargs()) {
    if (!this->battleargs().IsInitialized()) return false;
  }
  return true;
}

void TGetBattleArgsWithParamRsp::Swap(TGetBattleArgsWithParamRsp* other) {
  if (other != this) {
    std::swap(battleargs_, other->battleargs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGetBattleArgsWithParamRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGetBattleArgsWithParamRsp_descriptor_;
  metadata.reflection = TGetBattleArgsWithParamRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
