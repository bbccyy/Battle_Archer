// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActNewYearBlessing.proto

#ifndef PROTOBUF_net_2fActNewYearBlessing_2eproto__INCLUDED
#define PROTOBUF_net_2fActNewYearBlessing_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
#include "net/OpenActivity.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActNewYearBlessing_2eproto();
void protobuf_AssignDesc_net_2fActNewYearBlessing_2eproto();
void protobuf_ShutdownFile_net_2fActNewYearBlessing_2eproto();

class TActNewYearBlessingTaskInfo;
class TActNewYearBlessingDayInfo;
class TActNewYearBlessingGetInfoRsp;
class TActNewYearBlessingGetArrTaskRewardReq;
class TActNewYearBlessingGetArrLuckRewardReq;
class TActNewYearBlessingGetArrLuckRewardRsp;
class TActNewYearBlessingDrawRsp;
class TActNewYearBlessingNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TActNewYearBlessingTaskInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActNewYearBlessing.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActNewYearBlessingTaskInfo : public ::google::protobuf::Message {
 public:
  TActNewYearBlessingTaskInfo();
  virtual ~TActNewYearBlessingTaskInfo();

  TActNewYearBlessingTaskInfo(const TActNewYearBlessingTaskInfo& from);

  inline TActNewYearBlessingTaskInfo& operator=(const TActNewYearBlessingTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActNewYearBlessingTaskInfo& default_instance();

  void Swap(TActNewYearBlessingTaskInfo* other);

  // implements Message ----------------------------------------------

  TActNewYearBlessingTaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActNewYearBlessingTaskInfo& from);
  void MergeFrom(const TActNewYearBlessingTaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TaskType = 1;
  inline bool has_tasktype() const;
  inline void clear_tasktype();
  static const int kTaskTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActNewYearBlessingTaskInfo</name>
  	<Function>
  		<name>tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tasktype() const;
  inline void set_tasktype(::google::protobuf::uint32 value);

  // optional uint64 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActNewYearBlessingTaskInfo</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 num() const;
  inline void set_num(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TActNewYearBlessingTaskInfo)
 private:
  inline void set_has_tasktype();
  inline void clear_has_tasktype();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 num_;
  ::google::protobuf::uint32 tasktype_;
  friend void  protobuf_AddDesc_net_2fActNewYearBlessing_2eproto();
  friend void protobuf_AssignDesc_net_2fActNewYearBlessing_2eproto();
  friend void protobuf_ShutdownFile_net_2fActNewYearBlessing_2eproto();

  void InitAsDefaultInstance();
  static TActNewYearBlessingTaskInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActNewYearBlessingDayInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActNewYearBlessing.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActNewYearBlessingDayInfo : public ::google::protobuf::Message {
 public:
  TActNewYearBlessingDayInfo();
  virtual ~TActNewYearBlessingDayInfo();

  TActNewYearBlessingDayInfo(const TActNewYearBlessingDayInfo& from);

  inline TActNewYearBlessingDayInfo& operator=(const TActNewYearBlessingDayInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActNewYearBlessingDayInfo& default_instance();

  void Swap(TActNewYearBlessingDayInfo* other);

  // implements Message ----------------------------------------------

  TActNewYearBlessingDayInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActNewYearBlessingDayInfo& from);
  void MergeFrom(const TActNewYearBlessingDayInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Day = 1;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActNewYearBlessingDayInfo</name>
  	<Function>
  		<name>day</name>
  		<replaceName>Day</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_day</name>
  		<replaceName>Day</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_day</name>
  		<replaceName>Day</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // repeated .pb.TActNewYearBlessingTaskInfo ArrTaskInfo = 2;
  inline int arrtaskinfo_size() const;
  inline void clear_arrtaskinfo();
  static const int kArrTaskInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActNewYearBlessingDayInfo</name>
  	<Function>
  		<name>arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtaskinfo_size</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActNewYearBlessingTaskInfo& arrtaskinfo(int index) const;
  inline ::pb::TActNewYearBlessingTaskInfo* mutable_arrtaskinfo(int index);
  inline ::pb::TActNewYearBlessingTaskInfo* add_arrtaskinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActNewYearBlessingTaskInfo >&
      arrtaskinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActNewYearBlessingTaskInfo >*
      mutable_arrtaskinfo();

  // @@protoc_insertion_point(class_scope:pb.TActNewYearBlessingDayInfo)
 private:
  inline void set_has_day();
  inline void clear_has_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActNewYearBlessingTaskInfo > arrtaskinfo_;
  ::google::protobuf::uint32 day_;
  friend void  protobuf_AddDesc_net_2fActNewYearBlessing_2eproto();
  friend void protobuf_AssignDesc_net_2fActNewYearBlessing_2eproto();
  friend void protobuf_ShutdownFile_net_2fActNewYearBlessing_2eproto();

  void InitAsDefaultInstance();
  static TActNewYearBlessingDayInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActNewYearBlessingGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActNewYearBlessing.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActNewYearBlessingGetInfoRsp : public ::google::protobuf::Message {
 public:
  TActNewYearBlessingGetInfoRsp();
  virtual ~TActNewYearBlessingGetInfoRsp();

  TActNewYearBlessingGetInfoRsp(const TActNewYearBlessingGetInfoRsp& from);

  inline TActNewYearBlessingGetInfoRsp& operator=(const TActNewYearBlessingGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActNewYearBlessingGetInfoRsp& default_instance();

  void Swap(TActNewYearBlessingGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TActNewYearBlessingGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActNewYearBlessingGetInfoRsp& from);
  void MergeFrom(const TActNewYearBlessingGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Luck = 1;
  inline bool has_luck() const;
  inline void clear_luck();
  static const int kLuckFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActNewYearBlessingGetInfoRsp</name>
  	<Function>
  		<name>luck</name>
  		<replaceName>Luck</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_luck</name>
  		<replaceName>Luck</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_luck</name>
  		<replaceName>Luck</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 luck() const;
  inline void set_luck(::google::protobuf::uint32 value);

  // optional uint32 DrawNum = 2;
  inline bool has_drawnum() const;
  inline void clear_drawnum();
  static const int kDrawNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActNewYearBlessingGetInfoRsp</name>
  	<Function>
  		<name>drawnum</name>
  		<replaceName>DrawNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_drawnum</name>
  		<replaceName>DrawNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_drawnum</name>
  		<replaceName>DrawNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 drawnum() const;
  inline void set_drawnum(::google::protobuf::uint32 value);

  // optional uint32 DarkNum = 3;
  inline bool has_darknum() const;
  inline void clear_darknum();
  static const int kDarkNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActNewYearBlessingGetInfoRsp</name>
  	<Function>
  		<name>darknum</name>
  		<replaceName>DarkNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_darknum</name>
  		<replaceName>DarkNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_darknum</name>
  		<replaceName>DarkNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 darknum() const;
  inline void set_darknum(::google::protobuf::uint32 value);

  // repeated .pb.TActNewYearBlessingDayInfo ArrDayInfo = 4;
  inline int arrdayinfo_size() const;
  inline void clear_arrdayinfo();
  static const int kArrDayInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActNewYearBlessingGetInfoRsp</name>
  	<Function>
  		<name>arrdayinfo</name>
  		<replaceName>ArrDayInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrdayinfo</name>
  		<replaceName>ArrDayInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrdayinfo</name>
  		<replaceName>ArrDayInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrdayinfo</name>
  		<replaceName>ArrDayInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrdayinfo_size</name>
  		<replaceName>ArrDayInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActNewYearBlessingDayInfo& arrdayinfo(int index) const;
  inline ::pb::TActNewYearBlessingDayInfo* mutable_arrdayinfo(int index);
  inline ::pb::TActNewYearBlessingDayInfo* add_arrdayinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActNewYearBlessingDayInfo >&
      arrdayinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActNewYearBlessingDayInfo >*
      mutable_arrdayinfo();

  // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 5;
  inline int arrtaskrewardinfo_size() const;
  inline void clear_arrtaskrewardinfo();
  static const int kArrTaskRewardInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActNewYearBlessingGetInfoRsp</name>
  	<Function>
  		<name>arrtaskrewardinfo</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtaskrewardinfo</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtaskrewardinfo</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtaskrewardinfo</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtaskrewardinfo_size</name>
  		<replaceName>ArrTaskRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActivityRewardInfo& arrtaskrewardinfo(int index) const;
  inline ::pb::TActivityRewardInfo* mutable_arrtaskrewardinfo(int index);
  inline ::pb::TActivityRewardInfo* add_arrtaskrewardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
      arrtaskrewardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
      mutable_arrtaskrewardinfo();

  // repeated .pb.TActivityRewardInfo ArrLuckRewardInfo = 6;
  inline int arrluckrewardinfo_size() const;
  inline void clear_arrluckrewardinfo();
  static const int kArrLuckRewardInfoFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TActNewYearBlessingGetInfoRsp</name>
  	<Function>
  		<name>arrluckrewardinfo</name>
  		<replaceName>ArrLuckRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrluckrewardinfo</name>
  		<replaceName>ArrLuckRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrluckrewardinfo</name>
  		<replaceName>ArrLuckRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrluckrewardinfo</name>
  		<replaceName>ArrLuckRewardInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrluckrewardinfo_size</name>
  		<replaceName>ArrLuckRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActivityRewardInfo& arrluckrewardinfo(int index) const;
  inline ::pb::TActivityRewardInfo* mutable_arrluckrewardinfo(int index);
  inline ::pb::TActivityRewardInfo* add_arrluckrewardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
      arrluckrewardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
      mutable_arrluckrewardinfo();

  // @@protoc_insertion_point(class_scope:pb.TActNewYearBlessingGetInfoRsp)
 private:
  inline void set_has_luck();
  inline void clear_has_luck();
  inline void set_has_drawnum();
  inline void clear_has_drawnum();
  inline void set_has_darknum();
  inline void clear_has_darknum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 luck_;
  ::google::protobuf::uint32 drawnum_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActNewYearBlessingDayInfo > arrdayinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo > arrtaskrewardinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo > arrluckrewardinfo_;
  ::google::protobuf::uint32 darknum_;
  friend void  protobuf_AddDesc_net_2fActNewYearBlessing_2eproto();
  friend void protobuf_AssignDesc_net_2fActNewYearBlessing_2eproto();
  friend void protobuf_ShutdownFile_net_2fActNewYearBlessing_2eproto();

  void InitAsDefaultInstance();
  static TActNewYearBlessingGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActNewYearBlessingGetArrTaskRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActNewYearBlessing.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActNewYearBlessingGetArrTaskRewardReq : public ::google::protobuf::Message {
 public:
  TActNewYearBlessingGetArrTaskRewardReq();
  virtual ~TActNewYearBlessingGetArrTaskRewardReq();

  TActNewYearBlessingGetArrTaskRewardReq(const TActNewYearBlessingGetArrTaskRewardReq& from);

  inline TActNewYearBlessingGetArrTaskRewardReq& operator=(const TActNewYearBlessingGetArrTaskRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActNewYearBlessingGetArrTaskRewardReq& default_instance();

  void Swap(TActNewYearBlessingGetArrTaskRewardReq* other);

  // implements Message ----------------------------------------------

  TActNewYearBlessingGetArrTaskRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActNewYearBlessingGetArrTaskRewardReq& from);
  void MergeFrom(const TActNewYearBlessingGetArrTaskRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ArrId = 1;
  inline int arrid_size() const;
  inline void clear_arrid();
  static const int kArrIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActNewYearBlessingGetArrTaskRewardReq</name>
  	<Function>
  		<name>arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrid_size</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arrid(int index) const;
  inline void set_arrid(int index, ::google::protobuf::uint32 value);
  inline void add_arrid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      arrid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_arrid();

  // @@protoc_insertion_point(class_scope:pb.TActNewYearBlessingGetArrTaskRewardReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > arrid_;
  friend void  protobuf_AddDesc_net_2fActNewYearBlessing_2eproto();
  friend void protobuf_AssignDesc_net_2fActNewYearBlessing_2eproto();
  friend void protobuf_ShutdownFile_net_2fActNewYearBlessing_2eproto();

  void InitAsDefaultInstance();
  static TActNewYearBlessingGetArrTaskRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActNewYearBlessingGetArrLuckRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActNewYearBlessing.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActNewYearBlessingGetArrLuckRewardReq : public ::google::protobuf::Message {
 public:
  TActNewYearBlessingGetArrLuckRewardReq();
  virtual ~TActNewYearBlessingGetArrLuckRewardReq();

  TActNewYearBlessingGetArrLuckRewardReq(const TActNewYearBlessingGetArrLuckRewardReq& from);

  inline TActNewYearBlessingGetArrLuckRewardReq& operator=(const TActNewYearBlessingGetArrLuckRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActNewYearBlessingGetArrLuckRewardReq& default_instance();

  void Swap(TActNewYearBlessingGetArrLuckRewardReq* other);

  // implements Message ----------------------------------------------

  TActNewYearBlessingGetArrLuckRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActNewYearBlessingGetArrLuckRewardReq& from);
  void MergeFrom(const TActNewYearBlessingGetArrLuckRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ArrId = 1;
  inline int arrid_size() const;
  inline void clear_arrid();
  static const int kArrIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActNewYearBlessingGetArrLuckRewardReq</name>
  	<Function>
  		<name>arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrid_size</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arrid(int index) const;
  inline void set_arrid(int index, ::google::protobuf::uint32 value);
  inline void add_arrid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      arrid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_arrid();

  // @@protoc_insertion_point(class_scope:pb.TActNewYearBlessingGetArrLuckRewardReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > arrid_;
  friend void  protobuf_AddDesc_net_2fActNewYearBlessing_2eproto();
  friend void protobuf_AssignDesc_net_2fActNewYearBlessing_2eproto();
  friend void protobuf_ShutdownFile_net_2fActNewYearBlessing_2eproto();

  void InitAsDefaultInstance();
  static TActNewYearBlessingGetArrLuckRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActNewYearBlessingGetArrLuckRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActNewYearBlessing.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActNewYearBlessingGetArrLuckRewardRsp : public ::google::protobuf::Message {
 public:
  TActNewYearBlessingGetArrLuckRewardRsp();
  virtual ~TActNewYearBlessingGetArrLuckRewardRsp();

  TActNewYearBlessingGetArrLuckRewardRsp(const TActNewYearBlessingGetArrLuckRewardRsp& from);

  inline TActNewYearBlessingGetArrLuckRewardRsp& operator=(const TActNewYearBlessingGetArrLuckRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActNewYearBlessingGetArrLuckRewardRsp& default_instance();

  void Swap(TActNewYearBlessingGetArrLuckRewardRsp* other);

  // implements Message ----------------------------------------------

  TActNewYearBlessingGetArrLuckRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActNewYearBlessingGetArrLuckRewardRsp& from);
  void MergeFrom(const TActNewYearBlessingGetArrLuckRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrReward = 1;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActNewYearBlessingGetArrLuckRewardRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TActNewYearBlessingGetArrLuckRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fActNewYearBlessing_2eproto();
  friend void protobuf_AssignDesc_net_2fActNewYearBlessing_2eproto();
  friend void protobuf_ShutdownFile_net_2fActNewYearBlessing_2eproto();

  void InitAsDefaultInstance();
  static TActNewYearBlessingGetArrLuckRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActNewYearBlessingDrawRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActNewYearBlessing.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActNewYearBlessingDrawRsp : public ::google::protobuf::Message {
 public:
  TActNewYearBlessingDrawRsp();
  virtual ~TActNewYearBlessingDrawRsp();

  TActNewYearBlessingDrawRsp(const TActNewYearBlessingDrawRsp& from);

  inline TActNewYearBlessingDrawRsp& operator=(const TActNewYearBlessingDrawRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActNewYearBlessingDrawRsp& default_instance();

  void Swap(TActNewYearBlessingDrawRsp* other);

  // implements Message ----------------------------------------------

  TActNewYearBlessingDrawRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActNewYearBlessingDrawRsp& from);
  void MergeFrom(const TActNewYearBlessingDrawRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrReward = 1;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActNewYearBlessingDrawRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TActNewYearBlessingDrawRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fActNewYearBlessing_2eproto();
  friend void protobuf_AssignDesc_net_2fActNewYearBlessing_2eproto();
  friend void protobuf_ShutdownFile_net_2fActNewYearBlessing_2eproto();

  void InitAsDefaultInstance();
  static TActNewYearBlessingDrawRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActNewYearBlessingNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActNewYearBlessing.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActNewYearBlessingNotify : public ::google::protobuf::Message {
 public:
  TActNewYearBlessingNotify();
  virtual ~TActNewYearBlessingNotify();

  TActNewYearBlessingNotify(const TActNewYearBlessingNotify& from);

  inline TActNewYearBlessingNotify& operator=(const TActNewYearBlessingNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActNewYearBlessingNotify& default_instance();

  void Swap(TActNewYearBlessingNotify* other);

  // implements Message ----------------------------------------------

  TActNewYearBlessingNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActNewYearBlessingNotify& from);
  void MergeFrom(const TActNewYearBlessingNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActNewYearBlessingDayInfo ArrDayInfo = 1;
  inline int arrdayinfo_size() const;
  inline void clear_arrdayinfo();
  static const int kArrDayInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActNewYearBlessingNotify</name>
  	<Function>
  		<name>arrdayinfo</name>
  		<replaceName>ArrDayInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrdayinfo</name>
  		<replaceName>ArrDayInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrdayinfo</name>
  		<replaceName>ArrDayInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrdayinfo</name>
  		<replaceName>ArrDayInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrdayinfo_size</name>
  		<replaceName>ArrDayInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActNewYearBlessingDayInfo& arrdayinfo(int index) const;
  inline ::pb::TActNewYearBlessingDayInfo* mutable_arrdayinfo(int index);
  inline ::pb::TActNewYearBlessingDayInfo* add_arrdayinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActNewYearBlessingDayInfo >&
      arrdayinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActNewYearBlessingDayInfo >*
      mutable_arrdayinfo();

  // @@protoc_insertion_point(class_scope:pb.TActNewYearBlessingNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActNewYearBlessingDayInfo > arrdayinfo_;
  friend void  protobuf_AddDesc_net_2fActNewYearBlessing_2eproto();
  friend void protobuf_AssignDesc_net_2fActNewYearBlessing_2eproto();
  friend void protobuf_ShutdownFile_net_2fActNewYearBlessing_2eproto();

  void InitAsDefaultInstance();
  static TActNewYearBlessingNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TActNewYearBlessingTaskInfo

// optional uint32 TaskType = 1;
inline bool TActNewYearBlessingTaskInfo::has_tasktype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActNewYearBlessingTaskInfo::set_has_tasktype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActNewYearBlessingTaskInfo::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActNewYearBlessingTaskInfo::clear_tasktype() {
  tasktype_ = 0u;
  clear_has_tasktype();
}
inline ::google::protobuf::uint32 TActNewYearBlessingTaskInfo::tasktype() const {
  // @@protoc_insertion_point(field_get:pb.TActNewYearBlessingTaskInfo.TaskType)
  return tasktype_;
}
inline void TActNewYearBlessingTaskInfo::set_tasktype(::google::protobuf::uint32 value) {
  set_has_tasktype();
  tasktype_ = value;
  // @@protoc_insertion_point(field_set:pb.TActNewYearBlessingTaskInfo.TaskType)
}

// optional uint64 Num = 2;
inline bool TActNewYearBlessingTaskInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActNewYearBlessingTaskInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActNewYearBlessingTaskInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActNewYearBlessingTaskInfo::clear_num() {
  num_ = GOOGLE_ULONGLONG(0);
  clear_has_num();
}
inline ::google::protobuf::uint64 TActNewYearBlessingTaskInfo::num() const {
  // @@protoc_insertion_point(field_get:pb.TActNewYearBlessingTaskInfo.Num)
  return num_;
}
inline void TActNewYearBlessingTaskInfo::set_num(::google::protobuf::uint64 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActNewYearBlessingTaskInfo.Num)
}

// -------------------------------------------------------------------

// TActNewYearBlessingDayInfo

// optional uint32 Day = 1;
inline bool TActNewYearBlessingDayInfo::has_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActNewYearBlessingDayInfo::set_has_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActNewYearBlessingDayInfo::clear_has_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActNewYearBlessingDayInfo::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 TActNewYearBlessingDayInfo::day() const {
  // @@protoc_insertion_point(field_get:pb.TActNewYearBlessingDayInfo.Day)
  return day_;
}
inline void TActNewYearBlessingDayInfo::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:pb.TActNewYearBlessingDayInfo.Day)
}

// repeated .pb.TActNewYearBlessingTaskInfo ArrTaskInfo = 2;
inline int TActNewYearBlessingDayInfo::arrtaskinfo_size() const {
  return arrtaskinfo_.size();
}
inline void TActNewYearBlessingDayInfo::clear_arrtaskinfo() {
  arrtaskinfo_.Clear();
}
inline const ::pb::TActNewYearBlessingTaskInfo& TActNewYearBlessingDayInfo::arrtaskinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActNewYearBlessingDayInfo.ArrTaskInfo)
  return arrtaskinfo_.Get(index);
}
inline ::pb::TActNewYearBlessingTaskInfo* TActNewYearBlessingDayInfo::mutable_arrtaskinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActNewYearBlessingDayInfo.ArrTaskInfo)
  return arrtaskinfo_.Mutable(index);
}
inline ::pb::TActNewYearBlessingTaskInfo* TActNewYearBlessingDayInfo::add_arrtaskinfo() {
  // @@protoc_insertion_point(field_add:pb.TActNewYearBlessingDayInfo.ArrTaskInfo)
  return arrtaskinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActNewYearBlessingTaskInfo >&
TActNewYearBlessingDayInfo::arrtaskinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActNewYearBlessingDayInfo.ArrTaskInfo)
  return arrtaskinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActNewYearBlessingTaskInfo >*
TActNewYearBlessingDayInfo::mutable_arrtaskinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActNewYearBlessingDayInfo.ArrTaskInfo)
  return &arrtaskinfo_;
}

// -------------------------------------------------------------------

// TActNewYearBlessingGetInfoRsp

// optional uint32 Luck = 1;
inline bool TActNewYearBlessingGetInfoRsp::has_luck() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActNewYearBlessingGetInfoRsp::set_has_luck() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActNewYearBlessingGetInfoRsp::clear_has_luck() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActNewYearBlessingGetInfoRsp::clear_luck() {
  luck_ = 0u;
  clear_has_luck();
}
inline ::google::protobuf::uint32 TActNewYearBlessingGetInfoRsp::luck() const {
  // @@protoc_insertion_point(field_get:pb.TActNewYearBlessingGetInfoRsp.Luck)
  return luck_;
}
inline void TActNewYearBlessingGetInfoRsp::set_luck(::google::protobuf::uint32 value) {
  set_has_luck();
  luck_ = value;
  // @@protoc_insertion_point(field_set:pb.TActNewYearBlessingGetInfoRsp.Luck)
}

// optional uint32 DrawNum = 2;
inline bool TActNewYearBlessingGetInfoRsp::has_drawnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActNewYearBlessingGetInfoRsp::set_has_drawnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActNewYearBlessingGetInfoRsp::clear_has_drawnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActNewYearBlessingGetInfoRsp::clear_drawnum() {
  drawnum_ = 0u;
  clear_has_drawnum();
}
inline ::google::protobuf::uint32 TActNewYearBlessingGetInfoRsp::drawnum() const {
  // @@protoc_insertion_point(field_get:pb.TActNewYearBlessingGetInfoRsp.DrawNum)
  return drawnum_;
}
inline void TActNewYearBlessingGetInfoRsp::set_drawnum(::google::protobuf::uint32 value) {
  set_has_drawnum();
  drawnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActNewYearBlessingGetInfoRsp.DrawNum)
}

// optional uint32 DarkNum = 3;
inline bool TActNewYearBlessingGetInfoRsp::has_darknum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TActNewYearBlessingGetInfoRsp::set_has_darknum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TActNewYearBlessingGetInfoRsp::clear_has_darknum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TActNewYearBlessingGetInfoRsp::clear_darknum() {
  darknum_ = 0u;
  clear_has_darknum();
}
inline ::google::protobuf::uint32 TActNewYearBlessingGetInfoRsp::darknum() const {
  // @@protoc_insertion_point(field_get:pb.TActNewYearBlessingGetInfoRsp.DarkNum)
  return darknum_;
}
inline void TActNewYearBlessingGetInfoRsp::set_darknum(::google::protobuf::uint32 value) {
  set_has_darknum();
  darknum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActNewYearBlessingGetInfoRsp.DarkNum)
}

// repeated .pb.TActNewYearBlessingDayInfo ArrDayInfo = 4;
inline int TActNewYearBlessingGetInfoRsp::arrdayinfo_size() const {
  return arrdayinfo_.size();
}
inline void TActNewYearBlessingGetInfoRsp::clear_arrdayinfo() {
  arrdayinfo_.Clear();
}
inline const ::pb::TActNewYearBlessingDayInfo& TActNewYearBlessingGetInfoRsp::arrdayinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActNewYearBlessingGetInfoRsp.ArrDayInfo)
  return arrdayinfo_.Get(index);
}
inline ::pb::TActNewYearBlessingDayInfo* TActNewYearBlessingGetInfoRsp::mutable_arrdayinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActNewYearBlessingGetInfoRsp.ArrDayInfo)
  return arrdayinfo_.Mutable(index);
}
inline ::pb::TActNewYearBlessingDayInfo* TActNewYearBlessingGetInfoRsp::add_arrdayinfo() {
  // @@protoc_insertion_point(field_add:pb.TActNewYearBlessingGetInfoRsp.ArrDayInfo)
  return arrdayinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActNewYearBlessingDayInfo >&
TActNewYearBlessingGetInfoRsp::arrdayinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActNewYearBlessingGetInfoRsp.ArrDayInfo)
  return arrdayinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActNewYearBlessingDayInfo >*
TActNewYearBlessingGetInfoRsp::mutable_arrdayinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActNewYearBlessingGetInfoRsp.ArrDayInfo)
  return &arrdayinfo_;
}

// repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 5;
inline int TActNewYearBlessingGetInfoRsp::arrtaskrewardinfo_size() const {
  return arrtaskrewardinfo_.size();
}
inline void TActNewYearBlessingGetInfoRsp::clear_arrtaskrewardinfo() {
  arrtaskrewardinfo_.Clear();
}
inline const ::pb::TActivityRewardInfo& TActNewYearBlessingGetInfoRsp::arrtaskrewardinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActNewYearBlessingGetInfoRsp.ArrTaskRewardInfo)
  return arrtaskrewardinfo_.Get(index);
}
inline ::pb::TActivityRewardInfo* TActNewYearBlessingGetInfoRsp::mutable_arrtaskrewardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActNewYearBlessingGetInfoRsp.ArrTaskRewardInfo)
  return arrtaskrewardinfo_.Mutable(index);
}
inline ::pb::TActivityRewardInfo* TActNewYearBlessingGetInfoRsp::add_arrtaskrewardinfo() {
  // @@protoc_insertion_point(field_add:pb.TActNewYearBlessingGetInfoRsp.ArrTaskRewardInfo)
  return arrtaskrewardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
TActNewYearBlessingGetInfoRsp::arrtaskrewardinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActNewYearBlessingGetInfoRsp.ArrTaskRewardInfo)
  return arrtaskrewardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
TActNewYearBlessingGetInfoRsp::mutable_arrtaskrewardinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActNewYearBlessingGetInfoRsp.ArrTaskRewardInfo)
  return &arrtaskrewardinfo_;
}

// repeated .pb.TActivityRewardInfo ArrLuckRewardInfo = 6;
inline int TActNewYearBlessingGetInfoRsp::arrluckrewardinfo_size() const {
  return arrluckrewardinfo_.size();
}
inline void TActNewYearBlessingGetInfoRsp::clear_arrluckrewardinfo() {
  arrluckrewardinfo_.Clear();
}
inline const ::pb::TActivityRewardInfo& TActNewYearBlessingGetInfoRsp::arrluckrewardinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActNewYearBlessingGetInfoRsp.ArrLuckRewardInfo)
  return arrluckrewardinfo_.Get(index);
}
inline ::pb::TActivityRewardInfo* TActNewYearBlessingGetInfoRsp::mutable_arrluckrewardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActNewYearBlessingGetInfoRsp.ArrLuckRewardInfo)
  return arrluckrewardinfo_.Mutable(index);
}
inline ::pb::TActivityRewardInfo* TActNewYearBlessingGetInfoRsp::add_arrluckrewardinfo() {
  // @@protoc_insertion_point(field_add:pb.TActNewYearBlessingGetInfoRsp.ArrLuckRewardInfo)
  return arrluckrewardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
TActNewYearBlessingGetInfoRsp::arrluckrewardinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActNewYearBlessingGetInfoRsp.ArrLuckRewardInfo)
  return arrluckrewardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
TActNewYearBlessingGetInfoRsp::mutable_arrluckrewardinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActNewYearBlessingGetInfoRsp.ArrLuckRewardInfo)
  return &arrluckrewardinfo_;
}

// -------------------------------------------------------------------

// TActNewYearBlessingGetArrTaskRewardReq

// repeated uint32 ArrId = 1;
inline int TActNewYearBlessingGetArrTaskRewardReq::arrid_size() const {
  return arrid_.size();
}
inline void TActNewYearBlessingGetArrTaskRewardReq::clear_arrid() {
  arrid_.Clear();
}
inline ::google::protobuf::uint32 TActNewYearBlessingGetArrTaskRewardReq::arrid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActNewYearBlessingGetArrTaskRewardReq.ArrId)
  return arrid_.Get(index);
}
inline void TActNewYearBlessingGetArrTaskRewardReq::set_arrid(int index, ::google::protobuf::uint32 value) {
  arrid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActNewYearBlessingGetArrTaskRewardReq.ArrId)
}
inline void TActNewYearBlessingGetArrTaskRewardReq::add_arrid(::google::protobuf::uint32 value) {
  arrid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActNewYearBlessingGetArrTaskRewardReq.ArrId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActNewYearBlessingGetArrTaskRewardReq::arrid() const {
  // @@protoc_insertion_point(field_list:pb.TActNewYearBlessingGetArrTaskRewardReq.ArrId)
  return arrid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActNewYearBlessingGetArrTaskRewardReq::mutable_arrid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActNewYearBlessingGetArrTaskRewardReq.ArrId)
  return &arrid_;
}

// -------------------------------------------------------------------

// TActNewYearBlessingGetArrLuckRewardReq

// repeated uint32 ArrId = 1;
inline int TActNewYearBlessingGetArrLuckRewardReq::arrid_size() const {
  return arrid_.size();
}
inline void TActNewYearBlessingGetArrLuckRewardReq::clear_arrid() {
  arrid_.Clear();
}
inline ::google::protobuf::uint32 TActNewYearBlessingGetArrLuckRewardReq::arrid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActNewYearBlessingGetArrLuckRewardReq.ArrId)
  return arrid_.Get(index);
}
inline void TActNewYearBlessingGetArrLuckRewardReq::set_arrid(int index, ::google::protobuf::uint32 value) {
  arrid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActNewYearBlessingGetArrLuckRewardReq.ArrId)
}
inline void TActNewYearBlessingGetArrLuckRewardReq::add_arrid(::google::protobuf::uint32 value) {
  arrid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActNewYearBlessingGetArrLuckRewardReq.ArrId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActNewYearBlessingGetArrLuckRewardReq::arrid() const {
  // @@protoc_insertion_point(field_list:pb.TActNewYearBlessingGetArrLuckRewardReq.ArrId)
  return arrid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActNewYearBlessingGetArrLuckRewardReq::mutable_arrid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActNewYearBlessingGetArrLuckRewardReq.ArrId)
  return &arrid_;
}

// -------------------------------------------------------------------

// TActNewYearBlessingGetArrLuckRewardRsp

// repeated .pb.TCommonReward ArrReward = 1;
inline int TActNewYearBlessingGetArrLuckRewardRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TActNewYearBlessingGetArrLuckRewardRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TActNewYearBlessingGetArrLuckRewardRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActNewYearBlessingGetArrLuckRewardRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TActNewYearBlessingGetArrLuckRewardRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActNewYearBlessingGetArrLuckRewardRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TActNewYearBlessingGetArrLuckRewardRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TActNewYearBlessingGetArrLuckRewardRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActNewYearBlessingGetArrLuckRewardRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TActNewYearBlessingGetArrLuckRewardRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActNewYearBlessingGetArrLuckRewardRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActNewYearBlessingGetArrLuckRewardRsp.ArrReward)
  return &arrreward_;
}

// -------------------------------------------------------------------

// TActNewYearBlessingDrawRsp

// repeated .pb.TCommonReward ArrReward = 1;
inline int TActNewYearBlessingDrawRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TActNewYearBlessingDrawRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TActNewYearBlessingDrawRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActNewYearBlessingDrawRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TActNewYearBlessingDrawRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActNewYearBlessingDrawRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TActNewYearBlessingDrawRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TActNewYearBlessingDrawRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActNewYearBlessingDrawRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TActNewYearBlessingDrawRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActNewYearBlessingDrawRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActNewYearBlessingDrawRsp.ArrReward)
  return &arrreward_;
}

// -------------------------------------------------------------------

// TActNewYearBlessingNotify

// repeated .pb.TActNewYearBlessingDayInfo ArrDayInfo = 1;
inline int TActNewYearBlessingNotify::arrdayinfo_size() const {
  return arrdayinfo_.size();
}
inline void TActNewYearBlessingNotify::clear_arrdayinfo() {
  arrdayinfo_.Clear();
}
inline const ::pb::TActNewYearBlessingDayInfo& TActNewYearBlessingNotify::arrdayinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActNewYearBlessingNotify.ArrDayInfo)
  return arrdayinfo_.Get(index);
}
inline ::pb::TActNewYearBlessingDayInfo* TActNewYearBlessingNotify::mutable_arrdayinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActNewYearBlessingNotify.ArrDayInfo)
  return arrdayinfo_.Mutable(index);
}
inline ::pb::TActNewYearBlessingDayInfo* TActNewYearBlessingNotify::add_arrdayinfo() {
  // @@protoc_insertion_point(field_add:pb.TActNewYearBlessingNotify.ArrDayInfo)
  return arrdayinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActNewYearBlessingDayInfo >&
TActNewYearBlessingNotify::arrdayinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActNewYearBlessingNotify.ArrDayInfo)
  return arrdayinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActNewYearBlessingDayInfo >*
TActNewYearBlessingNotify::mutable_arrdayinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActNewYearBlessingNotify.ArrDayInfo)
  return &arrdayinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActNewYearBlessing_2eproto__INCLUDED
