// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Player.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Player.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCreateUserReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCreateUserReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCreateUserRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCreateUserRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGetUserListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGetUserListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGetUserIdByInnerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGetUserIdByInnerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGetUserIdByInnerRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGetUserIdByInnerRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPlayerBannedToPostReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPlayerBannedToPostReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fPlayer_2eproto() {
  protobuf_AddDesc_net_2fPlayer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Player.proto");
  GOOGLE_CHECK(file != NULL);
  TLoginReq_descriptor_ = file->message_type(0);
  static const int TLoginReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLoginReq, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLoginReq, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLoginReq, extendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLoginReq, os_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLoginReq, serverid_),
  };
  TLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLoginReq_descriptor_,
      TLoginReq::default_instance_,
      TLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLoginReq));
  TLoginRsp_descriptor_ = file->message_type(1);
  static const int TLoginRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLoginRsp, userarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLoginRsp, frontversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLoginRsp, isdebug_),
  };
  TLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLoginRsp_descriptor_,
      TLoginRsp::default_instance_,
      TLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLoginRsp));
  TUserInfo_descriptor_ = file->message_type(2);
  static const int TUserInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserInfo, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserInfo, createtime_),
  };
  TUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserInfo_descriptor_,
      TUserInfo::default_instance_,
      TUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserInfo));
  TCreateUserReq_descriptor_ = file->message_type(3);
  static const int TCreateUserReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCreateUserReq, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCreateUserReq, avatarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCreateUserReq, nametype_),
  };
  TCreateUserReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCreateUserReq_descriptor_,
      TCreateUserReq::default_instance_,
      TCreateUserReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCreateUserReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCreateUserReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCreateUserReq));
  TCreateUserRsp_descriptor_ = file->message_type(4);
  static const int TCreateUserRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCreateUserRsp, userinfo_),
  };
  TCreateUserRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCreateUserRsp_descriptor_,
      TCreateUserRsp::default_instance_,
      TCreateUserRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCreateUserRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCreateUserRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCreateUserRsp));
  TGetUserListRsp_descriptor_ = file->message_type(5);
  static const int TGetUserListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetUserListRsp, arruser_),
  };
  TGetUserListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGetUserListRsp_descriptor_,
      TGetUserListRsp::default_instance_,
      TGetUserListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetUserListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetUserListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGetUserListRsp));
  TGetUserIdByInnerReq_descriptor_ = file->message_type(6);
  static const int TGetUserIdByInnerReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetUserIdByInnerReq, pid_),
  };
  TGetUserIdByInnerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGetUserIdByInnerReq_descriptor_,
      TGetUserIdByInnerReq::default_instance_,
      TGetUserIdByInnerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetUserIdByInnerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetUserIdByInnerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGetUserIdByInnerReq));
  TGetUserIdByInnerRsp_descriptor_ = file->message_type(7);
  static const int TGetUserIdByInnerRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetUserIdByInnerRsp, arruser_),
  };
  TGetUserIdByInnerRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGetUserIdByInnerRsp_descriptor_,
      TGetUserIdByInnerRsp::default_instance_,
      TGetUserIdByInnerRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetUserIdByInnerRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetUserIdByInnerRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGetUserIdByInnerRsp));
  TPlayerBannedToPostReq_descriptor_ = file->message_type(8);
  static const int TPlayerBannedToPostReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlayerBannedToPostReq, uidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlayerBannedToPostReq, bantime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlayerBannedToPostReq, banmsg_),
  };
  TPlayerBannedToPostReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPlayerBannedToPostReq_descriptor_,
      TPlayerBannedToPostReq::default_instance_,
      TPlayerBannedToPostReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlayerBannedToPostReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPlayerBannedToPostReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPlayerBannedToPostReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fPlayer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLoginReq_descriptor_, &TLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLoginRsp_descriptor_, &TLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserInfo_descriptor_, &TUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCreateUserReq_descriptor_, &TCreateUserReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCreateUserRsp_descriptor_, &TCreateUserRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGetUserListRsp_descriptor_, &TGetUserListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGetUserIdByInnerReq_descriptor_, &TGetUserIdByInnerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGetUserIdByInnerRsp_descriptor_, &TGetUserIdByInnerRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPlayerBannedToPostReq_descriptor_, &TPlayerBannedToPostReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fPlayer_2eproto() {
  delete TLoginReq::default_instance_;
  delete TLoginReq_reflection_;
  delete TLoginRsp::default_instance_;
  delete TLoginRsp_reflection_;
  delete TUserInfo::default_instance_;
  delete TUserInfo_reflection_;
  delete TCreateUserReq::default_instance_;
  delete TCreateUserReq_reflection_;
  delete TCreateUserRsp::default_instance_;
  delete TCreateUserRsp_reflection_;
  delete TGetUserListRsp::default_instance_;
  delete TGetUserListRsp_reflection_;
  delete TGetUserIdByInnerReq::default_instance_;
  delete TGetUserIdByInnerReq_reflection_;
  delete TGetUserIdByInnerRsp::default_instance_;
  delete TGetUserIdByInnerRsp_reflection_;
  delete TPlayerBannedToPostReq::default_instance_;
  delete TPlayerBannedToPostReq_reflection_;
}

void protobuf_AddDesc_net_2fPlayer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020net/Player.proto\022\002pb\"X\n\tTLoginReq\022\013\n\003P"
    "id\030\001 \001(\t\022\014\n\004Hash\030\002 \001(\t\022\022\n\nExtendInfo\030\003 \001"
    "(\t\022\n\n\002Os\030\004 \001(\r\022\020\n\010ServerId\030\005 \001(\t\"R\n\tTLog"
    "inRsp\022\036\n\007UserArr\030\001 \003(\0132\r.pb.TUserInfo\022\024\n"
    "\014FrontVersion\030\002 \001(\t\022\017\n\007IsDebug\030\003 \001(\r\"J\n\t"
    "TUserInfo\022\013\n\003Uid\030\001 \001(\004\022\r\n\005Uname\030\002 \001(\t\022\r\n"
    "\005Level\030\003 \001(\005\022\022\n\nCreateTime\030\004 \001(\004\"C\n\016TCre"
    "ateUserReq\022\r\n\005Uname\030\001 \001(\t\022\020\n\010AvatarId\030\002 "
    "\001(\r\022\020\n\010NameType\030\003 \001(\r\"1\n\016TCreateUserRsp\022"
    "\037\n\010UserInfo\030\001 \001(\0132\r.pb.TUserInfo\"1\n\017TGet"
    "UserListRsp\022\036\n\007ArrUser\030\001 \003(\0132\r.pb.TUserI"
    "nfo\"#\n\024TGetUserIdByInnerReq\022\013\n\003Pid\030\001 \001(\004"
    "\"\'\n\024TGetUserIdByInnerRsp\022\017\n\007ArrUser\030\001 \003("
    "\004\"I\n\026TPlayerBannedToPostReq\022\016\n\006UidArr\030\001 "
    "\003(\004\022\017\n\007BanTime\030\002 \001(\r\022\016\n\006BanMsg\030\003 \001(\t", 596);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Player.proto", &protobuf_RegisterTypes);
  TLoginReq::default_instance_ = new TLoginReq();
  TLoginRsp::default_instance_ = new TLoginRsp();
  TUserInfo::default_instance_ = new TUserInfo();
  TCreateUserReq::default_instance_ = new TCreateUserReq();
  TCreateUserRsp::default_instance_ = new TCreateUserRsp();
  TGetUserListRsp::default_instance_ = new TGetUserListRsp();
  TGetUserIdByInnerReq::default_instance_ = new TGetUserIdByInnerReq();
  TGetUserIdByInnerRsp::default_instance_ = new TGetUserIdByInnerRsp();
  TPlayerBannedToPostReq::default_instance_ = new TPlayerBannedToPostReq();
  TLoginReq::default_instance_->InitAsDefaultInstance();
  TLoginRsp::default_instance_->InitAsDefaultInstance();
  TUserInfo::default_instance_->InitAsDefaultInstance();
  TCreateUserReq::default_instance_->InitAsDefaultInstance();
  TCreateUserRsp::default_instance_->InitAsDefaultInstance();
  TGetUserListRsp::default_instance_->InitAsDefaultInstance();
  TGetUserIdByInnerReq::default_instance_->InitAsDefaultInstance();
  TGetUserIdByInnerRsp::default_instance_->InitAsDefaultInstance();
  TPlayerBannedToPostReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fPlayer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fPlayer_2eproto {
  StaticDescriptorInitializer_net_2fPlayer_2eproto() {
    protobuf_AddDesc_net_2fPlayer_2eproto();
  }
} static_descriptor_initializer_net_2fPlayer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TLoginReq::kPidFieldNumber;
const int TLoginReq::kHashFieldNumber;
const int TLoginReq::kExtendInfoFieldNumber;
const int TLoginReq::kOsFieldNumber;
const int TLoginReq::kServerIdFieldNumber;
#endif  // !_MSC_VER

TLoginReq::TLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLoginReq)
}

void TLoginReq::InitAsDefaultInstance() {
}

TLoginReq::TLoginReq(const TLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLoginReq)
}

void TLoginReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extendinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_ = 0u;
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLoginReq::~TLoginReq() {
  // @@protoc_insertion_point(destructor:pb.TLoginReq)
  SharedDtor();
}

void TLoginReq::SharedDtor() {
  if (pid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pid_;
  }
  if (hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hash_;
  }
  if (extendinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extendinfo_;
  }
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void TLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLoginReq_descriptor_;
}

const TLoginReq& TLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlayer_2eproto();
  return *default_instance_;
}

TLoginReq* TLoginReq::default_instance_ = NULL;

TLoginReq* TLoginReq::New() const {
  return new TLoginReq;
}

void TLoginReq::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_pid()) {
      if (pid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pid_->clear();
      }
    }
    if (has_hash()) {
      if (hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hash_->clear();
      }
    }
    if (has_extendinfo()) {
      if (extendinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extendinfo_->clear();
      }
    }
    os_ = 0u;
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Pid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pid().data(), this->pid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Hash;
        break;
      }

      // optional string Hash = 2;
      case 2: {
        if (tag == 18) {
         parse_Hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hash");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ExtendInfo;
        break;
      }

      // optional string ExtendInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_ExtendInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extendinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->extendinfo().data(), this->extendinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "extendinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Os;
        break;
      }

      // optional uint32 Os = 4;
      case 4: {
        if (tag == 32) {
         parse_Os:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &os_)));
          set_has_os();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 5;
      case 5: {
        if (tag == 42) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLoginReq)
  return false;
#undef DO_
}

void TLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLoginReq)
  // optional string Pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pid(), output);
  }

  // optional string Hash = 2;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hash(), output);
  }

  // optional string ExtendInfo = 3;
  if (has_extendinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extendinfo().data(), this->extendinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extendinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->extendinfo(), output);
  }

  // optional uint32 Os = 4;
  if (has_os()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->os(), output);
  }

  // optional string ServerId = 5;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLoginReq)
}

::google::protobuf::uint8* TLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLoginReq)
  // optional string Pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pid().data(), this->pid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pid(), target);
  }

  // optional string Hash = 2;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hash(), target);
  }

  // optional string ExtendInfo = 3;
  if (has_extendinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->extendinfo().data(), this->extendinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "extendinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->extendinfo(), target);
  }

  // optional uint32 Os = 4;
  if (has_os()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->os(), target);
  }

  // optional string ServerId = 5;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLoginReq)
  return target;
}

int TLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pid());
    }

    // optional string Hash = 2;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hash());
    }

    // optional string ExtendInfo = 3;
    if (has_extendinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extendinfo());
    }

    // optional uint32 Os = 4;
    if (has_os()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->os());
    }

    // optional string ServerId = 5;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLoginReq::MergeFrom(const TLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_extendinfo()) {
      set_extendinfo(from.extendinfo());
    }
    if (from.has_os()) {
      set_os(from.os());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLoginReq::CopyFrom(const TLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLoginReq::IsInitialized() const {

  return true;
}

void TLoginReq::Swap(TLoginReq* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(hash_, other->hash_);
    std::swap(extendinfo_, other->extendinfo_);
    std::swap(os_, other->os_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLoginReq_descriptor_;
  metadata.reflection = TLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLoginRsp::kUserArrFieldNumber;
const int TLoginRsp::kFrontVersionFieldNumber;
const int TLoginRsp::kIsDebugFieldNumber;
#endif  // !_MSC_VER

TLoginRsp::TLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLoginRsp)
}

void TLoginRsp::InitAsDefaultInstance() {
}

TLoginRsp::TLoginRsp(const TLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLoginRsp)
}

void TLoginRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  frontversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  isdebug_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLoginRsp::~TLoginRsp() {
  // @@protoc_insertion_point(destructor:pb.TLoginRsp)
  SharedDtor();
}

void TLoginRsp::SharedDtor() {
  if (frontversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frontversion_;
  }
  if (this != default_instance_) {
  }
}

void TLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLoginRsp_descriptor_;
}

const TLoginRsp& TLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlayer_2eproto();
  return *default_instance_;
}

TLoginRsp* TLoginRsp::default_instance_ = NULL;

TLoginRsp* TLoginRsp::New() const {
  return new TLoginRsp;
}

void TLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    if (has_frontversion()) {
      if (frontversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        frontversion_->clear();
      }
    }
    isdebug_ = 0u;
  }
  userarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLoginRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUserInfo UserArr = 1;
      case 1: {
        if (tag == 10) {
         parse_UserArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UserArr;
        if (input->ExpectTag(18)) goto parse_FrontVersion;
        break;
      }

      // optional string FrontVersion = 2;
      case 2: {
        if (tag == 18) {
         parse_FrontVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frontversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->frontversion().data(), this->frontversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "frontversion");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsDebug;
        break;
      }

      // optional uint32 IsDebug = 3;
      case 3: {
        if (tag == 24) {
         parse_IsDebug:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isdebug_)));
          set_has_isdebug();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLoginRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLoginRsp)
  return false;
#undef DO_
}

void TLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLoginRsp)
  // repeated .pb.TUserInfo UserArr = 1;
  for (int i = 0; i < this->userarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userarr(i), output);
  }

  // optional string FrontVersion = 2;
  if (has_frontversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frontversion().data(), this->frontversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frontversion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->frontversion(), output);
  }

  // optional uint32 IsDebug = 3;
  if (has_isdebug()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->isdebug(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLoginRsp)
}

::google::protobuf::uint8* TLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLoginRsp)
  // repeated .pb.TUserInfo UserArr = 1;
  for (int i = 0; i < this->userarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userarr(i), target);
  }

  // optional string FrontVersion = 2;
  if (has_frontversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->frontversion().data(), this->frontversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "frontversion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->frontversion(), target);
  }

  // optional uint32 IsDebug = 3;
  if (has_isdebug()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->isdebug(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLoginRsp)
  return target;
}

int TLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string FrontVersion = 2;
    if (has_frontversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frontversion());
    }

    // optional uint32 IsDebug = 3;
    if (has_isdebug()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isdebug());
    }

  }
  // repeated .pb.TUserInfo UserArr = 1;
  total_size += 1 * this->userarr_size();
  for (int i = 0; i < this->userarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLoginRsp::MergeFrom(const TLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  userarr_.MergeFrom(from.userarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_frontversion()) {
      set_frontversion(from.frontversion());
    }
    if (from.has_isdebug()) {
      set_isdebug(from.isdebug());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLoginRsp::CopyFrom(const TLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLoginRsp::IsInitialized() const {

  return true;
}

void TLoginRsp::Swap(TLoginRsp* other) {
  if (other != this) {
    userarr_.Swap(&other->userarr_);
    std::swap(frontversion_, other->frontversion_);
    std::swap(isdebug_, other->isdebug_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLoginRsp_descriptor_;
  metadata.reflection = TLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserInfo::kUidFieldNumber;
const int TUserInfo::kUnameFieldNumber;
const int TUserInfo::kLevelFieldNumber;
const int TUserInfo::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

TUserInfo::TUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserInfo)
}

void TUserInfo::InitAsDefaultInstance() {
}

TUserInfo::TUserInfo(const TUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserInfo)
}

void TUserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  createtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserInfo::~TUserInfo() {
  // @@protoc_insertion_point(destructor:pb.TUserInfo)
  SharedDtor();
}

void TUserInfo::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (this != default_instance_) {
  }
}

void TUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserInfo_descriptor_;
}

const TUserInfo& TUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlayer_2eproto();
  return *default_instance_;
}

TUserInfo* TUserInfo::default_instance_ = NULL;

TUserInfo* TUserInfo::New() const {
  return new TUserInfo;
}

void TUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(createtime_, level_);
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Uname;
        break;
      }

      // optional string Uname = 2;
      case 2: {
        if (tag == 18) {
         parse_Uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }

      // optional int32 Level = 3;
      case 3: {
        if (tag == 24) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_CreateTime;
        break;
      }

      // optional uint64 CreateTime = 4;
      case 4: {
        if (tag == 32) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserInfo)
  return false;
#undef DO_
}

void TUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string Uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uname(), output);
  }

  // optional int32 Level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional uint64 CreateTime = 4;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->createtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserInfo)
}

::google::protobuf::uint8* TUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string Uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uname(), target);
  }

  // optional int32 Level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional uint64 CreateTime = 4;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->createtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserInfo)
  return target;
}

int TUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string Uname = 2;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional int32 Level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint64 CreateTime = 4;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserInfo::MergeFrom(const TUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserInfo::CopyFrom(const TUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserInfo::IsInitialized() const {

  return true;
}

void TUserInfo::Swap(TUserInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(uname_, other->uname_);
    std::swap(level_, other->level_);
    std::swap(createtime_, other->createtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserInfo_descriptor_;
  metadata.reflection = TUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCreateUserReq::kUnameFieldNumber;
const int TCreateUserReq::kAvatarIdFieldNumber;
const int TCreateUserReq::kNameTypeFieldNumber;
#endif  // !_MSC_VER

TCreateUserReq::TCreateUserReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCreateUserReq)
}

void TCreateUserReq::InitAsDefaultInstance() {
}

TCreateUserReq::TCreateUserReq(const TCreateUserReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCreateUserReq)
}

void TCreateUserReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatarid_ = 0u;
  nametype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCreateUserReq::~TCreateUserReq() {
  // @@protoc_insertion_point(destructor:pb.TCreateUserReq)
  SharedDtor();
}

void TCreateUserReq::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (this != default_instance_) {
  }
}

void TCreateUserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCreateUserReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCreateUserReq_descriptor_;
}

const TCreateUserReq& TCreateUserReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlayer_2eproto();
  return *default_instance_;
}

TCreateUserReq* TCreateUserReq::default_instance_ = NULL;

TCreateUserReq* TCreateUserReq::New() const {
  return new TCreateUserReq;
}

void TCreateUserReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCreateUserReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(avatarid_, nametype_);
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCreateUserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCreateUserReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Uname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AvatarId;
        break;
      }

      // optional uint32 AvatarId = 2;
      case 2: {
        if (tag == 16) {
         parse_AvatarId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatarid_)));
          set_has_avatarid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_NameType;
        break;
      }

      // optional uint32 NameType = 3;
      case 3: {
        if (tag == 24) {
         parse_NameType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nametype_)));
          set_has_nametype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCreateUserReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCreateUserReq)
  return false;
#undef DO_
}

void TCreateUserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCreateUserReq)
  // optional string Uname = 1;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uname(), output);
  }

  // optional uint32 AvatarId = 2;
  if (has_avatarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->avatarid(), output);
  }

  // optional uint32 NameType = 3;
  if (has_nametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nametype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCreateUserReq)
}

::google::protobuf::uint8* TCreateUserReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCreateUserReq)
  // optional string Uname = 1;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uname(), target);
  }

  // optional uint32 AvatarId = 2;
  if (has_avatarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->avatarid(), target);
  }

  // optional uint32 NameType = 3;
  if (has_nametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->nametype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCreateUserReq)
  return target;
}

int TCreateUserReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Uname = 1;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional uint32 AvatarId = 2;
    if (has_avatarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avatarid());
    }

    // optional uint32 NameType = 3;
    if (has_nametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nametype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCreateUserReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCreateUserReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCreateUserReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCreateUserReq::MergeFrom(const TCreateUserReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_avatarid()) {
      set_avatarid(from.avatarid());
    }
    if (from.has_nametype()) {
      set_nametype(from.nametype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCreateUserReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCreateUserReq::CopyFrom(const TCreateUserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCreateUserReq::IsInitialized() const {

  return true;
}

void TCreateUserReq::Swap(TCreateUserReq* other) {
  if (other != this) {
    std::swap(uname_, other->uname_);
    std::swap(avatarid_, other->avatarid_);
    std::swap(nametype_, other->nametype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCreateUserReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCreateUserReq_descriptor_;
  metadata.reflection = TCreateUserReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCreateUserRsp::kUserInfoFieldNumber;
#endif  // !_MSC_VER

TCreateUserRsp::TCreateUserRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCreateUserRsp)
}

void TCreateUserRsp::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserInfo*>(&::pb::TUserInfo::default_instance());
}

TCreateUserRsp::TCreateUserRsp(const TCreateUserRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCreateUserRsp)
}

void TCreateUserRsp::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCreateUserRsp::~TCreateUserRsp() {
  // @@protoc_insertion_point(destructor:pb.TCreateUserRsp)
  SharedDtor();
}

void TCreateUserRsp::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TCreateUserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCreateUserRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCreateUserRsp_descriptor_;
}

const TCreateUserRsp& TCreateUserRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlayer_2eproto();
  return *default_instance_;
}

TCreateUserRsp* TCreateUserRsp::default_instance_ = NULL;

TCreateUserRsp* TCreateUserRsp::New() const {
  return new TCreateUserRsp;
}

void TCreateUserRsp::Clear() {
  if (has_userinfo()) {
    if (userinfo_ != NULL) userinfo_->::pb::TUserInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCreateUserRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCreateUserRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCreateUserRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCreateUserRsp)
  return false;
#undef DO_
}

void TCreateUserRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCreateUserRsp)
  // optional .pb.TUserInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCreateUserRsp)
}

::google::protobuf::uint8* TCreateUserRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCreateUserRsp)
  // optional .pb.TUserInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCreateUserRsp)
  return target;
}

int TCreateUserRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCreateUserRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCreateUserRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCreateUserRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCreateUserRsp::MergeFrom(const TCreateUserRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCreateUserRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCreateUserRsp::CopyFrom(const TCreateUserRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCreateUserRsp::IsInitialized() const {

  return true;
}

void TCreateUserRsp::Swap(TCreateUserRsp* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCreateUserRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCreateUserRsp_descriptor_;
  metadata.reflection = TCreateUserRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGetUserListRsp::kArrUserFieldNumber;
#endif  // !_MSC_VER

TGetUserListRsp::TGetUserListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGetUserListRsp)
}

void TGetUserListRsp::InitAsDefaultInstance() {
}

TGetUserListRsp::TGetUserListRsp(const TGetUserListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGetUserListRsp)
}

void TGetUserListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGetUserListRsp::~TGetUserListRsp() {
  // @@protoc_insertion_point(destructor:pb.TGetUserListRsp)
  SharedDtor();
}

void TGetUserListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGetUserListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGetUserListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGetUserListRsp_descriptor_;
}

const TGetUserListRsp& TGetUserListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlayer_2eproto();
  return *default_instance_;
}

TGetUserListRsp* TGetUserListRsp::default_instance_ = NULL;

TGetUserListRsp* TGetUserListRsp::New() const {
  return new TGetUserListRsp;
}

void TGetUserListRsp::Clear() {
  arruser_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGetUserListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGetUserListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUserInfo ArrUser = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrUser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arruser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrUser;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGetUserListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGetUserListRsp)
  return false;
#undef DO_
}

void TGetUserListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGetUserListRsp)
  // repeated .pb.TUserInfo ArrUser = 1;
  for (int i = 0; i < this->arruser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arruser(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGetUserListRsp)
}

::google::protobuf::uint8* TGetUserListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGetUserListRsp)
  // repeated .pb.TUserInfo ArrUser = 1;
  for (int i = 0; i < this->arruser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arruser(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGetUserListRsp)
  return target;
}

int TGetUserListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TUserInfo ArrUser = 1;
  total_size += 1 * this->arruser_size();
  for (int i = 0; i < this->arruser_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arruser(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGetUserListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGetUserListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGetUserListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGetUserListRsp::MergeFrom(const TGetUserListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arruser_.MergeFrom(from.arruser_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGetUserListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGetUserListRsp::CopyFrom(const TGetUserListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGetUserListRsp::IsInitialized() const {

  return true;
}

void TGetUserListRsp::Swap(TGetUserListRsp* other) {
  if (other != this) {
    arruser_.Swap(&other->arruser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGetUserListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGetUserListRsp_descriptor_;
  metadata.reflection = TGetUserListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGetUserIdByInnerReq::kPidFieldNumber;
#endif  // !_MSC_VER

TGetUserIdByInnerReq::TGetUserIdByInnerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGetUserIdByInnerReq)
}

void TGetUserIdByInnerReq::InitAsDefaultInstance() {
}

TGetUserIdByInnerReq::TGetUserIdByInnerReq(const TGetUserIdByInnerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGetUserIdByInnerReq)
}

void TGetUserIdByInnerReq::SharedCtor() {
  _cached_size_ = 0;
  pid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGetUserIdByInnerReq::~TGetUserIdByInnerReq() {
  // @@protoc_insertion_point(destructor:pb.TGetUserIdByInnerReq)
  SharedDtor();
}

void TGetUserIdByInnerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGetUserIdByInnerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGetUserIdByInnerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGetUserIdByInnerReq_descriptor_;
}

const TGetUserIdByInnerReq& TGetUserIdByInnerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlayer_2eproto();
  return *default_instance_;
}

TGetUserIdByInnerReq* TGetUserIdByInnerReq::default_instance_ = NULL;

TGetUserIdByInnerReq* TGetUserIdByInnerReq::New() const {
  return new TGetUserIdByInnerReq;
}

void TGetUserIdByInnerReq::Clear() {
  pid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGetUserIdByInnerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGetUserIdByInnerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Pid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGetUserIdByInnerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGetUserIdByInnerReq)
  return false;
#undef DO_
}

void TGetUserIdByInnerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGetUserIdByInnerReq)
  // optional uint64 Pid = 1;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGetUserIdByInnerReq)
}

::google::protobuf::uint8* TGetUserIdByInnerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGetUserIdByInnerReq)
  // optional uint64 Pid = 1;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGetUserIdByInnerReq)
  return target;
}

int TGetUserIdByInnerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Pid = 1;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGetUserIdByInnerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGetUserIdByInnerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGetUserIdByInnerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGetUserIdByInnerReq::MergeFrom(const TGetUserIdByInnerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGetUserIdByInnerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGetUserIdByInnerReq::CopyFrom(const TGetUserIdByInnerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGetUserIdByInnerReq::IsInitialized() const {

  return true;
}

void TGetUserIdByInnerReq::Swap(TGetUserIdByInnerReq* other) {
  if (other != this) {
    std::swap(pid_, other->pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGetUserIdByInnerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGetUserIdByInnerReq_descriptor_;
  metadata.reflection = TGetUserIdByInnerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGetUserIdByInnerRsp::kArrUserFieldNumber;
#endif  // !_MSC_VER

TGetUserIdByInnerRsp::TGetUserIdByInnerRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGetUserIdByInnerRsp)
}

void TGetUserIdByInnerRsp::InitAsDefaultInstance() {
}

TGetUserIdByInnerRsp::TGetUserIdByInnerRsp(const TGetUserIdByInnerRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGetUserIdByInnerRsp)
}

void TGetUserIdByInnerRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGetUserIdByInnerRsp::~TGetUserIdByInnerRsp() {
  // @@protoc_insertion_point(destructor:pb.TGetUserIdByInnerRsp)
  SharedDtor();
}

void TGetUserIdByInnerRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGetUserIdByInnerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGetUserIdByInnerRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGetUserIdByInnerRsp_descriptor_;
}

const TGetUserIdByInnerRsp& TGetUserIdByInnerRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlayer_2eproto();
  return *default_instance_;
}

TGetUserIdByInnerRsp* TGetUserIdByInnerRsp::default_instance_ = NULL;

TGetUserIdByInnerRsp* TGetUserIdByInnerRsp::New() const {
  return new TGetUserIdByInnerRsp;
}

void TGetUserIdByInnerRsp::Clear() {
  arruser_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGetUserIdByInnerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGetUserIdByInnerRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 ArrUser = 1;
      case 1: {
        if (tag == 8) {
         parse_ArrUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_arruser())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_arruser())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_ArrUser;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGetUserIdByInnerRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGetUserIdByInnerRsp)
  return false;
#undef DO_
}

void TGetUserIdByInnerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGetUserIdByInnerRsp)
  // repeated uint64 ArrUser = 1;
  for (int i = 0; i < this->arruser_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->arruser(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGetUserIdByInnerRsp)
}

::google::protobuf::uint8* TGetUserIdByInnerRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGetUserIdByInnerRsp)
  // repeated uint64 ArrUser = 1;
  for (int i = 0; i < this->arruser_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->arruser(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGetUserIdByInnerRsp)
  return target;
}

int TGetUserIdByInnerRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint64 ArrUser = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->arruser_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->arruser(i));
    }
    total_size += 1 * this->arruser_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGetUserIdByInnerRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGetUserIdByInnerRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGetUserIdByInnerRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGetUserIdByInnerRsp::MergeFrom(const TGetUserIdByInnerRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arruser_.MergeFrom(from.arruser_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGetUserIdByInnerRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGetUserIdByInnerRsp::CopyFrom(const TGetUserIdByInnerRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGetUserIdByInnerRsp::IsInitialized() const {

  return true;
}

void TGetUserIdByInnerRsp::Swap(TGetUserIdByInnerRsp* other) {
  if (other != this) {
    arruser_.Swap(&other->arruser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGetUserIdByInnerRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGetUserIdByInnerRsp_descriptor_;
  metadata.reflection = TGetUserIdByInnerRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPlayerBannedToPostReq::kUidArrFieldNumber;
const int TPlayerBannedToPostReq::kBanTimeFieldNumber;
const int TPlayerBannedToPostReq::kBanMsgFieldNumber;
#endif  // !_MSC_VER

TPlayerBannedToPostReq::TPlayerBannedToPostReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPlayerBannedToPostReq)
}

void TPlayerBannedToPostReq::InitAsDefaultInstance() {
}

TPlayerBannedToPostReq::TPlayerBannedToPostReq(const TPlayerBannedToPostReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPlayerBannedToPostReq)
}

void TPlayerBannedToPostReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bantime_ = 0u;
  banmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPlayerBannedToPostReq::~TPlayerBannedToPostReq() {
  // @@protoc_insertion_point(destructor:pb.TPlayerBannedToPostReq)
  SharedDtor();
}

void TPlayerBannedToPostReq::SharedDtor() {
  if (banmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete banmsg_;
  }
  if (this != default_instance_) {
  }
}

void TPlayerBannedToPostReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPlayerBannedToPostReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPlayerBannedToPostReq_descriptor_;
}

const TPlayerBannedToPostReq& TPlayerBannedToPostReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPlayer_2eproto();
  return *default_instance_;
}

TPlayerBannedToPostReq* TPlayerBannedToPostReq::default_instance_ = NULL;

TPlayerBannedToPostReq* TPlayerBannedToPostReq::New() const {
  return new TPlayerBannedToPostReq;
}

void TPlayerBannedToPostReq::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    bantime_ = 0u;
    if (has_banmsg()) {
      if (banmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        banmsg_->clear();
      }
    }
  }
  uidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPlayerBannedToPostReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPlayerBannedToPostReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 UidArr = 1;
      case 1: {
        if (tag == 8) {
         parse_UidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_uidarr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_UidArr;
        if (input->ExpectTag(16)) goto parse_BanTime;
        break;
      }

      // optional uint32 BanTime = 2;
      case 2: {
        if (tag == 16) {
         parse_BanTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bantime_)));
          set_has_bantime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BanMsg;
        break;
      }

      // optional string BanMsg = 3;
      case 3: {
        if (tag == 26) {
         parse_BanMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_banmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->banmsg().data(), this->banmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "banmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPlayerBannedToPostReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPlayerBannedToPostReq)
  return false;
#undef DO_
}

void TPlayerBannedToPostReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPlayerBannedToPostReq)
  // repeated uint64 UidArr = 1;
  for (int i = 0; i < this->uidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->uidarr(i), output);
  }

  // optional uint32 BanTime = 2;
  if (has_bantime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bantime(), output);
  }

  // optional string BanMsg = 3;
  if (has_banmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->banmsg().data(), this->banmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "banmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->banmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPlayerBannedToPostReq)
}

::google::protobuf::uint8* TPlayerBannedToPostReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPlayerBannedToPostReq)
  // repeated uint64 UidArr = 1;
  for (int i = 0; i < this->uidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->uidarr(i), target);
  }

  // optional uint32 BanTime = 2;
  if (has_bantime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bantime(), target);
  }

  // optional string BanMsg = 3;
  if (has_banmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->banmsg().data(), this->banmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "banmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->banmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPlayerBannedToPostReq)
  return target;
}

int TPlayerBannedToPostReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 BanTime = 2;
    if (has_bantime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bantime());
    }

    // optional string BanMsg = 3;
    if (has_banmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->banmsg());
    }

  }
  // repeated uint64 UidArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->uidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uidarr(i));
    }
    total_size += 1 * this->uidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPlayerBannedToPostReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPlayerBannedToPostReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPlayerBannedToPostReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPlayerBannedToPostReq::MergeFrom(const TPlayerBannedToPostReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  uidarr_.MergeFrom(from.uidarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_bantime()) {
      set_bantime(from.bantime());
    }
    if (from.has_banmsg()) {
      set_banmsg(from.banmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPlayerBannedToPostReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPlayerBannedToPostReq::CopyFrom(const TPlayerBannedToPostReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPlayerBannedToPostReq::IsInitialized() const {

  return true;
}

void TPlayerBannedToPostReq::Swap(TPlayerBannedToPostReq* other) {
  if (other != this) {
    uidarr_.Swap(&other->uidarr_);
    std::swap(bantime_, other->bantime_);
    std::swap(banmsg_, other->banmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPlayerBannedToPostReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPlayerBannedToPostReq_descriptor_;
  metadata.reflection = TPlayerBannedToPostReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
