// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: editortool/SceneHeightEditorData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "editortool/SceneHeightEditorData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* LimitArea_Editor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitArea_Editor_reflection_ = NULL;
const ::google::protobuf::Descriptor* CellData_Editor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellData_Editor_reflection_ = NULL;
const ::google::protobuf::Descriptor* LimitAreaInfo_Editor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitAreaInfo_Editor_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeightDataInfo_Editor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeightDataInfo_Editor_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_editortool_2fSceneHeightEditorData_2eproto() {
  protobuf_AddDesc_editortool_2fSceneHeightEditorData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "editortool/SceneHeightEditorData.proto");
  GOOGLE_CHECK(file != NULL);
  LimitArea_Editor_descriptor_ = file->message_type(0);
  static const int LimitArea_Editor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitArea_Editor, areaname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitArea_Editor, pointarr_),
  };
  LimitArea_Editor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LimitArea_Editor_descriptor_,
      LimitArea_Editor::default_instance_,
      LimitArea_Editor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitArea_Editor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitArea_Editor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LimitArea_Editor));
  CellData_Editor_descriptor_ = file->message_type(1);
  static const int CellData_Editor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellData_Editor, cellindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellData_Editor, height_),
  };
  CellData_Editor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellData_Editor_descriptor_,
      CellData_Editor::default_instance_,
      CellData_Editor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellData_Editor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellData_Editor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellData_Editor));
  LimitAreaInfo_Editor_descriptor_ = file->message_type(2);
  static const int LimitAreaInfo_Editor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitAreaInfo_Editor, sceneconfname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitAreaInfo_Editor, artscenepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitAreaInfo_Editor, limitareaarr_),
  };
  LimitAreaInfo_Editor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LimitAreaInfo_Editor_descriptor_,
      LimitAreaInfo_Editor::default_instance_,
      LimitAreaInfo_Editor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitAreaInfo_Editor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitAreaInfo_Editor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LimitAreaInfo_Editor));
  HeightDataInfo_Editor_descriptor_ = file->message_type(3);
  static const int HeightDataInfo_Editor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightDataInfo_Editor, coordinateorigin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightDataInfo_Editor, cellsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightDataInfo_Editor, areasize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightDataInfo_Editor, celldataarr_),
  };
  HeightDataInfo_Editor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeightDataInfo_Editor_descriptor_,
      HeightDataInfo_Editor::default_instance_,
      HeightDataInfo_Editor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightDataInfo_Editor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeightDataInfo_Editor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeightDataInfo_Editor));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_editortool_2fSceneHeightEditorData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LimitArea_Editor_descriptor_, &LimitArea_Editor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellData_Editor_descriptor_, &CellData_Editor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LimitAreaInfo_Editor_descriptor_, &LimitAreaInfo_Editor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeightDataInfo_Editor_descriptor_, &HeightDataInfo_Editor::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_editortool_2fSceneHeightEditorData_2eproto() {
  delete LimitArea_Editor::default_instance_;
  delete LimitArea_Editor_reflection_;
  delete CellData_Editor::default_instance_;
  delete CellData_Editor_reflection_;
  delete LimitAreaInfo_Editor::default_instance_;
  delete LimitAreaInfo_Editor_reflection_;
  delete HeightDataInfo_Editor::default_instance_;
  delete HeightDataInfo_Editor_reflection_;
}

void protobuf_AddDesc_editortool_2fSceneHeightEditorData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fUtil_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&editortool/SceneHeightEditorData.proto"
    "\022\002pb\032\021module/Util.proto\"E\n\020LimitArea_Edi"
    "tor\022\020\n\010AreaName\030\001 \001(\t\022\037\n\010PointArr\030\002 \003(\0132"
    "\r.pb.PbVector2\"4\n\017CellData_Editor\022\021\n\tCel"
    "lIndex\030\001 \001(\005\022\016\n\006Height\030\002 \001(\002\"o\n\024LimitAre"
    "aInfo_Editor\022\025\n\rSceneConfName\030\001 \001(\t\022\024\n\014A"
    "rtScenePath\030\002 \001(\t\022*\n\014LimitAreaArr\030\003 \003(\0132"
    "\024.pb.LimitArea_Editor\"\260\001\n\025HeightDataInfo"
    "_Editor\022\'\n\020CoordinateOrigin\030\001 \001(\0132\r.pb.P"
    "bVector2\022\037\n\010CellSize\030\002 \001(\0132\r.pb.PbVector"
    "2\022#\n\010AreaSize\030\003 \001(\0132\021.pb.PbVector2_Int\022("
    "\n\013CellDataArr\030\004 \003(\0132\023.pb.CellData_Editor", 480);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "editortool/SceneHeightEditorData.proto", &protobuf_RegisterTypes);
  LimitArea_Editor::default_instance_ = new LimitArea_Editor();
  CellData_Editor::default_instance_ = new CellData_Editor();
  LimitAreaInfo_Editor::default_instance_ = new LimitAreaInfo_Editor();
  HeightDataInfo_Editor::default_instance_ = new HeightDataInfo_Editor();
  LimitArea_Editor::default_instance_->InitAsDefaultInstance();
  CellData_Editor::default_instance_->InitAsDefaultInstance();
  LimitAreaInfo_Editor::default_instance_->InitAsDefaultInstance();
  HeightDataInfo_Editor::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_editortool_2fSceneHeightEditorData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_editortool_2fSceneHeightEditorData_2eproto {
  StaticDescriptorInitializer_editortool_2fSceneHeightEditorData_2eproto() {
    protobuf_AddDesc_editortool_2fSceneHeightEditorData_2eproto();
  }
} static_descriptor_initializer_editortool_2fSceneHeightEditorData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LimitArea_Editor::kAreaNameFieldNumber;
const int LimitArea_Editor::kPointArrFieldNumber;
#endif  // !_MSC_VER

LimitArea_Editor::LimitArea_Editor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.LimitArea_Editor)
}

void LimitArea_Editor::InitAsDefaultInstance() {
}

LimitArea_Editor::LimitArea_Editor(const LimitArea_Editor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.LimitArea_Editor)
}

void LimitArea_Editor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  areaname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LimitArea_Editor::~LimitArea_Editor() {
  // @@protoc_insertion_point(destructor:pb.LimitArea_Editor)
  SharedDtor();
}

void LimitArea_Editor::SharedDtor() {
  if (areaname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete areaname_;
  }
  if (this != default_instance_) {
  }
}

void LimitArea_Editor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitArea_Editor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitArea_Editor_descriptor_;
}

const LimitArea_Editor& LimitArea_Editor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_editortool_2fSceneHeightEditorData_2eproto();
  return *default_instance_;
}

LimitArea_Editor* LimitArea_Editor::default_instance_ = NULL;

LimitArea_Editor* LimitArea_Editor::New() const {
  return new LimitArea_Editor;
}

void LimitArea_Editor::Clear() {
  if (has_areaname()) {
    if (areaname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      areaname_->clear();
    }
  }
  pointarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LimitArea_Editor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.LimitArea_Editor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string AreaName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_areaname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->areaname().data(), this->areaname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "areaname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PointArr;
        break;
      }

      // repeated .pb.PbVector2 PointArr = 2;
      case 2: {
        if (tag == 18) {
         parse_PointArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pointarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PointArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.LimitArea_Editor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.LimitArea_Editor)
  return false;
#undef DO_
}

void LimitArea_Editor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.LimitArea_Editor)
  // optional string AreaName = 1;
  if (has_areaname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->areaname().data(), this->areaname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "areaname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->areaname(), output);
  }

  // repeated .pb.PbVector2 PointArr = 2;
  for (int i = 0; i < this->pointarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pointarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.LimitArea_Editor)
}

::google::protobuf::uint8* LimitArea_Editor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.LimitArea_Editor)
  // optional string AreaName = 1;
  if (has_areaname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->areaname().data(), this->areaname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "areaname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->areaname(), target);
  }

  // repeated .pb.PbVector2 PointArr = 2;
  for (int i = 0; i < this->pointarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pointarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.LimitArea_Editor)
  return target;
}

int LimitArea_Editor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string AreaName = 1;
    if (has_areaname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->areaname());
    }

  }
  // repeated .pb.PbVector2 PointArr = 2;
  total_size += 1 * this->pointarr_size();
  for (int i = 0; i < this->pointarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pointarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimitArea_Editor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LimitArea_Editor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LimitArea_Editor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LimitArea_Editor::MergeFrom(const LimitArea_Editor& from) {
  GOOGLE_CHECK_NE(&from, this);
  pointarr_.MergeFrom(from.pointarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_areaname()) {
      set_areaname(from.areaname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LimitArea_Editor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitArea_Editor::CopyFrom(const LimitArea_Editor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitArea_Editor::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->pointarr())) return false;
  return true;
}

void LimitArea_Editor::Swap(LimitArea_Editor* other) {
  if (other != this) {
    std::swap(areaname_, other->areaname_);
    pointarr_.Swap(&other->pointarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LimitArea_Editor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitArea_Editor_descriptor_;
  metadata.reflection = LimitArea_Editor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CellData_Editor::kCellIndexFieldNumber;
const int CellData_Editor::kHeightFieldNumber;
#endif  // !_MSC_VER

CellData_Editor::CellData_Editor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CellData_Editor)
}

void CellData_Editor::InitAsDefaultInstance() {
}

CellData_Editor::CellData_Editor(const CellData_Editor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.CellData_Editor)
}

void CellData_Editor::SharedCtor() {
  _cached_size_ = 0;
  cellindex_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellData_Editor::~CellData_Editor() {
  // @@protoc_insertion_point(destructor:pb.CellData_Editor)
  SharedDtor();
}

void CellData_Editor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CellData_Editor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellData_Editor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellData_Editor_descriptor_;
}

const CellData_Editor& CellData_Editor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_editortool_2fSceneHeightEditorData_2eproto();
  return *default_instance_;
}

CellData_Editor* CellData_Editor::default_instance_ = NULL;

CellData_Editor* CellData_Editor::New() const {
  return new CellData_Editor;
}

void CellData_Editor::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CellData_Editor*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cellindex_, height_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellData_Editor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CellData_Editor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CellIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellindex_)));
          set_has_cellindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_Height;
        break;
      }

      // optional float Height = 2;
      case 2: {
        if (tag == 21) {
         parse_Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CellData_Editor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CellData_Editor)
  return false;
#undef DO_
}

void CellData_Editor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CellData_Editor)
  // optional int32 CellIndex = 1;
  if (has_cellindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cellindex(), output);
  }

  // optional float Height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CellData_Editor)
}

::google::protobuf::uint8* CellData_Editor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CellData_Editor)
  // optional int32 CellIndex = 1;
  if (has_cellindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cellindex(), target);
  }

  // optional float Height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CellData_Editor)
  return target;
}

int CellData_Editor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CellIndex = 1;
    if (has_cellindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cellindex());
    }

    // optional float Height = 2;
    if (has_height()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellData_Editor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellData_Editor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellData_Editor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellData_Editor::MergeFrom(const CellData_Editor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellindex()) {
      set_cellindex(from.cellindex());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellData_Editor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellData_Editor::CopyFrom(const CellData_Editor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellData_Editor::IsInitialized() const {

  return true;
}

void CellData_Editor::Swap(CellData_Editor* other) {
  if (other != this) {
    std::swap(cellindex_, other->cellindex_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellData_Editor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellData_Editor_descriptor_;
  metadata.reflection = CellData_Editor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LimitAreaInfo_Editor::kSceneConfNameFieldNumber;
const int LimitAreaInfo_Editor::kArtScenePathFieldNumber;
const int LimitAreaInfo_Editor::kLimitAreaArrFieldNumber;
#endif  // !_MSC_VER

LimitAreaInfo_Editor::LimitAreaInfo_Editor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.LimitAreaInfo_Editor)
}

void LimitAreaInfo_Editor::InitAsDefaultInstance() {
}

LimitAreaInfo_Editor::LimitAreaInfo_Editor(const LimitAreaInfo_Editor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.LimitAreaInfo_Editor)
}

void LimitAreaInfo_Editor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sceneconfname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  artscenepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LimitAreaInfo_Editor::~LimitAreaInfo_Editor() {
  // @@protoc_insertion_point(destructor:pb.LimitAreaInfo_Editor)
  SharedDtor();
}

void LimitAreaInfo_Editor::SharedDtor() {
  if (sceneconfname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sceneconfname_;
  }
  if (artscenepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete artscenepath_;
  }
  if (this != default_instance_) {
  }
}

void LimitAreaInfo_Editor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitAreaInfo_Editor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitAreaInfo_Editor_descriptor_;
}

const LimitAreaInfo_Editor& LimitAreaInfo_Editor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_editortool_2fSceneHeightEditorData_2eproto();
  return *default_instance_;
}

LimitAreaInfo_Editor* LimitAreaInfo_Editor::default_instance_ = NULL;

LimitAreaInfo_Editor* LimitAreaInfo_Editor::New() const {
  return new LimitAreaInfo_Editor;
}

void LimitAreaInfo_Editor::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_sceneconfname()) {
      if (sceneconfname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sceneconfname_->clear();
      }
    }
    if (has_artscenepath()) {
      if (artscenepath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        artscenepath_->clear();
      }
    }
  }
  limitareaarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LimitAreaInfo_Editor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.LimitAreaInfo_Editor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string SceneConfName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sceneconfname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sceneconfname().data(), this->sceneconfname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sceneconfname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArtScenePath;
        break;
      }

      // optional string ArtScenePath = 2;
      case 2: {
        if (tag == 18) {
         parse_ArtScenePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artscenepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->artscenepath().data(), this->artscenepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artscenepath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_LimitAreaArr;
        break;
      }

      // repeated .pb.LimitArea_Editor LimitAreaArr = 3;
      case 3: {
        if (tag == 26) {
         parse_LimitAreaArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_limitareaarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_LimitAreaArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.LimitAreaInfo_Editor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.LimitAreaInfo_Editor)
  return false;
#undef DO_
}

void LimitAreaInfo_Editor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.LimitAreaInfo_Editor)
  // optional string SceneConfName = 1;
  if (has_sceneconfname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sceneconfname().data(), this->sceneconfname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sceneconfname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sceneconfname(), output);
  }

  // optional string ArtScenePath = 2;
  if (has_artscenepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artscenepath().data(), this->artscenepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artscenepath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->artscenepath(), output);
  }

  // repeated .pb.LimitArea_Editor LimitAreaArr = 3;
  for (int i = 0; i < this->limitareaarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->limitareaarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.LimitAreaInfo_Editor)
}

::google::protobuf::uint8* LimitAreaInfo_Editor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.LimitAreaInfo_Editor)
  // optional string SceneConfName = 1;
  if (has_sceneconfname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sceneconfname().data(), this->sceneconfname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sceneconfname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sceneconfname(), target);
  }

  // optional string ArtScenePath = 2;
  if (has_artscenepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artscenepath().data(), this->artscenepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artscenepath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->artscenepath(), target);
  }

  // repeated .pb.LimitArea_Editor LimitAreaArr = 3;
  for (int i = 0; i < this->limitareaarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->limitareaarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.LimitAreaInfo_Editor)
  return target;
}

int LimitAreaInfo_Editor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string SceneConfName = 1;
    if (has_sceneconfname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sceneconfname());
    }

    // optional string ArtScenePath = 2;
    if (has_artscenepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artscenepath());
    }

  }
  // repeated .pb.LimitArea_Editor LimitAreaArr = 3;
  total_size += 1 * this->limitareaarr_size();
  for (int i = 0; i < this->limitareaarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->limitareaarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimitAreaInfo_Editor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LimitAreaInfo_Editor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LimitAreaInfo_Editor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LimitAreaInfo_Editor::MergeFrom(const LimitAreaInfo_Editor& from) {
  GOOGLE_CHECK_NE(&from, this);
  limitareaarr_.MergeFrom(from.limitareaarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneconfname()) {
      set_sceneconfname(from.sceneconfname());
    }
    if (from.has_artscenepath()) {
      set_artscenepath(from.artscenepath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LimitAreaInfo_Editor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitAreaInfo_Editor::CopyFrom(const LimitAreaInfo_Editor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitAreaInfo_Editor::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->limitareaarr())) return false;
  return true;
}

void LimitAreaInfo_Editor::Swap(LimitAreaInfo_Editor* other) {
  if (other != this) {
    std::swap(sceneconfname_, other->sceneconfname_);
    std::swap(artscenepath_, other->artscenepath_);
    limitareaarr_.Swap(&other->limitareaarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LimitAreaInfo_Editor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitAreaInfo_Editor_descriptor_;
  metadata.reflection = LimitAreaInfo_Editor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeightDataInfo_Editor::kCoordinateOriginFieldNumber;
const int HeightDataInfo_Editor::kCellSizeFieldNumber;
const int HeightDataInfo_Editor::kAreaSizeFieldNumber;
const int HeightDataInfo_Editor::kCellDataArrFieldNumber;
#endif  // !_MSC_VER

HeightDataInfo_Editor::HeightDataInfo_Editor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.HeightDataInfo_Editor)
}

void HeightDataInfo_Editor::InitAsDefaultInstance() {
  coordinateorigin_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
  cellsize_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
  areasize_ = const_cast< ::pb::PbVector2_Int*>(&::pb::PbVector2_Int::default_instance());
}

HeightDataInfo_Editor::HeightDataInfo_Editor(const HeightDataInfo_Editor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.HeightDataInfo_Editor)
}

void HeightDataInfo_Editor::SharedCtor() {
  _cached_size_ = 0;
  coordinateorigin_ = NULL;
  cellsize_ = NULL;
  areasize_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeightDataInfo_Editor::~HeightDataInfo_Editor() {
  // @@protoc_insertion_point(destructor:pb.HeightDataInfo_Editor)
  SharedDtor();
}

void HeightDataInfo_Editor::SharedDtor() {
  if (this != default_instance_) {
    delete coordinateorigin_;
    delete cellsize_;
    delete areasize_;
  }
}

void HeightDataInfo_Editor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeightDataInfo_Editor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeightDataInfo_Editor_descriptor_;
}

const HeightDataInfo_Editor& HeightDataInfo_Editor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_editortool_2fSceneHeightEditorData_2eproto();
  return *default_instance_;
}

HeightDataInfo_Editor* HeightDataInfo_Editor::default_instance_ = NULL;

HeightDataInfo_Editor* HeightDataInfo_Editor::New() const {
  return new HeightDataInfo_Editor;
}

void HeightDataInfo_Editor::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_coordinateorigin()) {
      if (coordinateorigin_ != NULL) coordinateorigin_->::pb::PbVector2::Clear();
    }
    if (has_cellsize()) {
      if (cellsize_ != NULL) cellsize_->::pb::PbVector2::Clear();
    }
    if (has_areasize()) {
      if (areasize_ != NULL) areasize_->::pb::PbVector2_Int::Clear();
    }
  }
  celldataarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeightDataInfo_Editor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.HeightDataInfo_Editor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.PbVector2 CoordinateOrigin = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coordinateorigin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CellSize;
        break;
      }

      // optional .pb.PbVector2 CellSize = 2;
      case 2: {
        if (tag == 18) {
         parse_CellSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cellsize()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AreaSize;
        break;
      }

      // optional .pb.PbVector2_Int AreaSize = 3;
      case 3: {
        if (tag == 26) {
         parse_AreaSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_areasize()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_CellDataArr;
        break;
      }

      // repeated .pb.CellData_Editor CellDataArr = 4;
      case 4: {
        if (tag == 34) {
         parse_CellDataArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_celldataarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_CellDataArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.HeightDataInfo_Editor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.HeightDataInfo_Editor)
  return false;
#undef DO_
}

void HeightDataInfo_Editor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.HeightDataInfo_Editor)
  // optional .pb.PbVector2 CoordinateOrigin = 1;
  if (has_coordinateorigin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->coordinateorigin(), output);
  }

  // optional .pb.PbVector2 CellSize = 2;
  if (has_cellsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cellsize(), output);
  }

  // optional .pb.PbVector2_Int AreaSize = 3;
  if (has_areasize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->areasize(), output);
  }

  // repeated .pb.CellData_Editor CellDataArr = 4;
  for (int i = 0; i < this->celldataarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->celldataarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.HeightDataInfo_Editor)
}

::google::protobuf::uint8* HeightDataInfo_Editor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.HeightDataInfo_Editor)
  // optional .pb.PbVector2 CoordinateOrigin = 1;
  if (has_coordinateorigin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->coordinateorigin(), target);
  }

  // optional .pb.PbVector2 CellSize = 2;
  if (has_cellsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cellsize(), target);
  }

  // optional .pb.PbVector2_Int AreaSize = 3;
  if (has_areasize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->areasize(), target);
  }

  // repeated .pb.CellData_Editor CellDataArr = 4;
  for (int i = 0; i < this->celldataarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->celldataarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.HeightDataInfo_Editor)
  return target;
}

int HeightDataInfo_Editor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.PbVector2 CoordinateOrigin = 1;
    if (has_coordinateorigin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coordinateorigin());
    }

    // optional .pb.PbVector2 CellSize = 2;
    if (has_cellsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cellsize());
    }

    // optional .pb.PbVector2_Int AreaSize = 3;
    if (has_areasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->areasize());
    }

  }
  // repeated .pb.CellData_Editor CellDataArr = 4;
  total_size += 1 * this->celldataarr_size();
  for (int i = 0; i < this->celldataarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->celldataarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeightDataInfo_Editor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeightDataInfo_Editor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeightDataInfo_Editor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeightDataInfo_Editor::MergeFrom(const HeightDataInfo_Editor& from) {
  GOOGLE_CHECK_NE(&from, this);
  celldataarr_.MergeFrom(from.celldataarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coordinateorigin()) {
      mutable_coordinateorigin()->::pb::PbVector2::MergeFrom(from.coordinateorigin());
    }
    if (from.has_cellsize()) {
      mutable_cellsize()->::pb::PbVector2::MergeFrom(from.cellsize());
    }
    if (from.has_areasize()) {
      mutable_areasize()->::pb::PbVector2_Int::MergeFrom(from.areasize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeightDataInfo_Editor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeightDataInfo_Editor::CopyFrom(const HeightDataInfo_Editor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeightDataInfo_Editor::IsInitialized() const {

  if (has_coordinateorigin()) {
    if (!this->coordinateorigin().IsInitialized()) return false;
  }
  if (has_cellsize()) {
    if (!this->cellsize().IsInitialized()) return false;
  }
  return true;
}

void HeightDataInfo_Editor::Swap(HeightDataInfo_Editor* other) {
  if (other != this) {
    std::swap(coordinateorigin_, other->coordinateorigin_);
    std::swap(cellsize_, other->cellsize_);
    std::swap(areasize_, other->areasize_);
    celldataarr_.Swap(&other->celldataarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeightDataInfo_Editor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeightDataInfo_Editor_descriptor_;
  metadata.reflection = HeightDataInfo_Editor_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
