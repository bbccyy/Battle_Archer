// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActCarnival.proto

#ifndef PROTOBUF_net_2fActCarnival_2eproto__INCLUDED
#define PROTOBUF_net_2fActCarnival_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActCarnival_2eproto();
void protobuf_AssignDesc_net_2fActCarnival_2eproto();
void protobuf_ShutdownFile_net_2fActCarnival_2eproto();

class TActCarnivalGoodsInfo;
class TActCarnivalGetInfoRsp;
class TActCarnivalBuyGoodsReq;
class TActCarnivalExchangeReq;
class TActCarnivalNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TActCarnivalGoodsInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCarnival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCarnivalGoodsInfo : public ::google::protobuf::Message {
 public:
  TActCarnivalGoodsInfo();
  virtual ~TActCarnivalGoodsInfo();

  TActCarnivalGoodsInfo(const TActCarnivalGoodsInfo& from);

  inline TActCarnivalGoodsInfo& operator=(const TActCarnivalGoodsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCarnivalGoodsInfo& default_instance();

  void Swap(TActCarnivalGoodsInfo* other);

  // implements Message ----------------------------------------------

  TActCarnivalGoodsInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCarnivalGoodsInfo& from);
  void MergeFrom(const TActCarnivalGoodsInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCarnivalGoodsInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActCarnivalGoodsInfo</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActCarnivalGoodsInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fActCarnival_2eproto();
  friend void protobuf_AssignDesc_net_2fActCarnival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCarnival_2eproto();

  void InitAsDefaultInstance();
  static TActCarnivalGoodsInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActCarnivalGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCarnival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCarnivalGetInfoRsp : public ::google::protobuf::Message {
 public:
  TActCarnivalGetInfoRsp();
  virtual ~TActCarnivalGetInfoRsp();

  TActCarnivalGetInfoRsp(const TActCarnivalGetInfoRsp& from);

  inline TActCarnivalGetInfoRsp& operator=(const TActCarnivalGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCarnivalGetInfoRsp& default_instance();

  void Swap(TActCarnivalGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TActCarnivalGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCarnivalGetInfoRsp& from);
  void MergeFrom(const TActCarnivalGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActCarnivalGoodsInfo ArrRmbGoodsInfo = 1;
  inline int arrrmbgoodsinfo_size() const;
  inline void clear_arrrmbgoodsinfo();
  static const int kArrRmbGoodsInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCarnivalGetInfoRsp</name>
  	<Function>
  		<name>arrrmbgoodsinfo</name>
  		<replaceName>ArrRmbGoodsInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrmbgoodsinfo</name>
  		<replaceName>ArrRmbGoodsInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrmbgoodsinfo</name>
  		<replaceName>ArrRmbGoodsInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrmbgoodsinfo</name>
  		<replaceName>ArrRmbGoodsInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrmbgoodsinfo_size</name>
  		<replaceName>ArrRmbGoodsInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActCarnivalGoodsInfo& arrrmbgoodsinfo(int index) const;
  inline ::pb::TActCarnivalGoodsInfo* mutable_arrrmbgoodsinfo(int index);
  inline ::pb::TActCarnivalGoodsInfo* add_arrrmbgoodsinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCarnivalGoodsInfo >&
      arrrmbgoodsinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActCarnivalGoodsInfo >*
      mutable_arrrmbgoodsinfo();

  // repeated .pb.TActCarnivalGoodsInfo ArrGoodsInfo = 2;
  inline int arrgoodsinfo_size() const;
  inline void clear_arrgoodsinfo();
  static const int kArrGoodsInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActCarnivalGetInfoRsp</name>
  	<Function>
  		<name>arrgoodsinfo</name>
  		<replaceName>ArrGoodsInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrgoodsinfo</name>
  		<replaceName>ArrGoodsInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrgoodsinfo</name>
  		<replaceName>ArrGoodsInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrgoodsinfo</name>
  		<replaceName>ArrGoodsInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrgoodsinfo_size</name>
  		<replaceName>ArrGoodsInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActCarnivalGoodsInfo& arrgoodsinfo(int index) const;
  inline ::pb::TActCarnivalGoodsInfo* mutable_arrgoodsinfo(int index);
  inline ::pb::TActCarnivalGoodsInfo* add_arrgoodsinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCarnivalGoodsInfo >&
      arrgoodsinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActCarnivalGoodsInfo >*
      mutable_arrgoodsinfo();

  // repeated .pb.TActCarnivalGoodsInfo ArrExchangeInfo = 3;
  inline int arrexchangeinfo_size() const;
  inline void clear_arrexchangeinfo();
  static const int kArrExchangeInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActCarnivalGetInfoRsp</name>
  	<Function>
  		<name>arrexchangeinfo</name>
  		<replaceName>ArrExchangeInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrexchangeinfo</name>
  		<replaceName>ArrExchangeInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrexchangeinfo</name>
  		<replaceName>ArrExchangeInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrexchangeinfo</name>
  		<replaceName>ArrExchangeInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrexchangeinfo_size</name>
  		<replaceName>ArrExchangeInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActCarnivalGoodsInfo& arrexchangeinfo(int index) const;
  inline ::pb::TActCarnivalGoodsInfo* mutable_arrexchangeinfo(int index);
  inline ::pb::TActCarnivalGoodsInfo* add_arrexchangeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCarnivalGoodsInfo >&
      arrexchangeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActCarnivalGoodsInfo >*
      mutable_arrexchangeinfo();

  // @@protoc_insertion_point(class_scope:pb.TActCarnivalGetInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActCarnivalGoodsInfo > arrrmbgoodsinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActCarnivalGoodsInfo > arrgoodsinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActCarnivalGoodsInfo > arrexchangeinfo_;
  friend void  protobuf_AddDesc_net_2fActCarnival_2eproto();
  friend void protobuf_AssignDesc_net_2fActCarnival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCarnival_2eproto();

  void InitAsDefaultInstance();
  static TActCarnivalGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActCarnivalBuyGoodsReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCarnival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCarnivalBuyGoodsReq : public ::google::protobuf::Message {
 public:
  TActCarnivalBuyGoodsReq();
  virtual ~TActCarnivalBuyGoodsReq();

  TActCarnivalBuyGoodsReq(const TActCarnivalBuyGoodsReq& from);

  inline TActCarnivalBuyGoodsReq& operator=(const TActCarnivalBuyGoodsReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCarnivalBuyGoodsReq& default_instance();

  void Swap(TActCarnivalBuyGoodsReq* other);

  // implements Message ----------------------------------------------

  TActCarnivalBuyGoodsReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCarnivalBuyGoodsReq& from);
  void MergeFrom(const TActCarnivalBuyGoodsReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCarnivalBuyGoodsReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActCarnivalBuyGoodsReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActCarnivalBuyGoodsReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fActCarnival_2eproto();
  friend void protobuf_AssignDesc_net_2fActCarnival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCarnival_2eproto();

  void InitAsDefaultInstance();
  static TActCarnivalBuyGoodsReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActCarnivalExchangeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCarnival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCarnivalExchangeReq : public ::google::protobuf::Message {
 public:
  TActCarnivalExchangeReq();
  virtual ~TActCarnivalExchangeReq();

  TActCarnivalExchangeReq(const TActCarnivalExchangeReq& from);

  inline TActCarnivalExchangeReq& operator=(const TActCarnivalExchangeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCarnivalExchangeReq& default_instance();

  void Swap(TActCarnivalExchangeReq* other);

  // implements Message ----------------------------------------------

  TActCarnivalExchangeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCarnivalExchangeReq& from);
  void MergeFrom(const TActCarnivalExchangeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCarnivalExchangeReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActCarnivalExchangeReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActCarnivalExchangeReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fActCarnival_2eproto();
  friend void protobuf_AssignDesc_net_2fActCarnival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCarnival_2eproto();

  void InitAsDefaultInstance();
  static TActCarnivalExchangeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActCarnivalNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActCarnival.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActCarnivalNotify : public ::google::protobuf::Message {
 public:
  TActCarnivalNotify();
  virtual ~TActCarnivalNotify();

  TActCarnivalNotify(const TActCarnivalNotify& from);

  inline TActCarnivalNotify& operator=(const TActCarnivalNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActCarnivalNotify& default_instance();

  void Swap(TActCarnivalNotify* other);

  // implements Message ----------------------------------------------

  TActCarnivalNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActCarnivalNotify& from);
  void MergeFrom(const TActCarnivalNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActCarnivalGoodsInfo ArrRmbGoodsInfo = 1;
  inline int arrrmbgoodsinfo_size() const;
  inline void clear_arrrmbgoodsinfo();
  static const int kArrRmbGoodsInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActCarnivalNotify</name>
  	<Function>
  		<name>arrrmbgoodsinfo</name>
  		<replaceName>ArrRmbGoodsInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrmbgoodsinfo</name>
  		<replaceName>ArrRmbGoodsInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrmbgoodsinfo</name>
  		<replaceName>ArrRmbGoodsInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrmbgoodsinfo</name>
  		<replaceName>ArrRmbGoodsInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrmbgoodsinfo_size</name>
  		<replaceName>ArrRmbGoodsInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActCarnivalGoodsInfo& arrrmbgoodsinfo(int index) const;
  inline ::pb::TActCarnivalGoodsInfo* mutable_arrrmbgoodsinfo(int index);
  inline ::pb::TActCarnivalGoodsInfo* add_arrrmbgoodsinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCarnivalGoodsInfo >&
      arrrmbgoodsinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActCarnivalGoodsInfo >*
      mutable_arrrmbgoodsinfo();

  // @@protoc_insertion_point(class_scope:pb.TActCarnivalNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActCarnivalGoodsInfo > arrrmbgoodsinfo_;
  friend void  protobuf_AddDesc_net_2fActCarnival_2eproto();
  friend void protobuf_AssignDesc_net_2fActCarnival_2eproto();
  friend void protobuf_ShutdownFile_net_2fActCarnival_2eproto();

  void InitAsDefaultInstance();
  static TActCarnivalNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TActCarnivalGoodsInfo

// optional uint32 Id = 1;
inline bool TActCarnivalGoodsInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActCarnivalGoodsInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActCarnivalGoodsInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActCarnivalGoodsInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActCarnivalGoodsInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TActCarnivalGoodsInfo.Id)
  return id_;
}
inline void TActCarnivalGoodsInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCarnivalGoodsInfo.Id)
}

// optional uint32 Num = 2;
inline bool TActCarnivalGoodsInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActCarnivalGoodsInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActCarnivalGoodsInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActCarnivalGoodsInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TActCarnivalGoodsInfo::num() const {
  // @@protoc_insertion_point(field_get:pb.TActCarnivalGoodsInfo.Num)
  return num_;
}
inline void TActCarnivalGoodsInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCarnivalGoodsInfo.Num)
}

// -------------------------------------------------------------------

// TActCarnivalGetInfoRsp

// repeated .pb.TActCarnivalGoodsInfo ArrRmbGoodsInfo = 1;
inline int TActCarnivalGetInfoRsp::arrrmbgoodsinfo_size() const {
  return arrrmbgoodsinfo_.size();
}
inline void TActCarnivalGetInfoRsp::clear_arrrmbgoodsinfo() {
  arrrmbgoodsinfo_.Clear();
}
inline const ::pb::TActCarnivalGoodsInfo& TActCarnivalGetInfoRsp::arrrmbgoodsinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActCarnivalGetInfoRsp.ArrRmbGoodsInfo)
  return arrrmbgoodsinfo_.Get(index);
}
inline ::pb::TActCarnivalGoodsInfo* TActCarnivalGetInfoRsp::mutable_arrrmbgoodsinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActCarnivalGetInfoRsp.ArrRmbGoodsInfo)
  return arrrmbgoodsinfo_.Mutable(index);
}
inline ::pb::TActCarnivalGoodsInfo* TActCarnivalGetInfoRsp::add_arrrmbgoodsinfo() {
  // @@protoc_insertion_point(field_add:pb.TActCarnivalGetInfoRsp.ArrRmbGoodsInfo)
  return arrrmbgoodsinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCarnivalGoodsInfo >&
TActCarnivalGetInfoRsp::arrrmbgoodsinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActCarnivalGetInfoRsp.ArrRmbGoodsInfo)
  return arrrmbgoodsinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActCarnivalGoodsInfo >*
TActCarnivalGetInfoRsp::mutable_arrrmbgoodsinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActCarnivalGetInfoRsp.ArrRmbGoodsInfo)
  return &arrrmbgoodsinfo_;
}

// repeated .pb.TActCarnivalGoodsInfo ArrGoodsInfo = 2;
inline int TActCarnivalGetInfoRsp::arrgoodsinfo_size() const {
  return arrgoodsinfo_.size();
}
inline void TActCarnivalGetInfoRsp::clear_arrgoodsinfo() {
  arrgoodsinfo_.Clear();
}
inline const ::pb::TActCarnivalGoodsInfo& TActCarnivalGetInfoRsp::arrgoodsinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActCarnivalGetInfoRsp.ArrGoodsInfo)
  return arrgoodsinfo_.Get(index);
}
inline ::pb::TActCarnivalGoodsInfo* TActCarnivalGetInfoRsp::mutable_arrgoodsinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActCarnivalGetInfoRsp.ArrGoodsInfo)
  return arrgoodsinfo_.Mutable(index);
}
inline ::pb::TActCarnivalGoodsInfo* TActCarnivalGetInfoRsp::add_arrgoodsinfo() {
  // @@protoc_insertion_point(field_add:pb.TActCarnivalGetInfoRsp.ArrGoodsInfo)
  return arrgoodsinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCarnivalGoodsInfo >&
TActCarnivalGetInfoRsp::arrgoodsinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActCarnivalGetInfoRsp.ArrGoodsInfo)
  return arrgoodsinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActCarnivalGoodsInfo >*
TActCarnivalGetInfoRsp::mutable_arrgoodsinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActCarnivalGetInfoRsp.ArrGoodsInfo)
  return &arrgoodsinfo_;
}

// repeated .pb.TActCarnivalGoodsInfo ArrExchangeInfo = 3;
inline int TActCarnivalGetInfoRsp::arrexchangeinfo_size() const {
  return arrexchangeinfo_.size();
}
inline void TActCarnivalGetInfoRsp::clear_arrexchangeinfo() {
  arrexchangeinfo_.Clear();
}
inline const ::pb::TActCarnivalGoodsInfo& TActCarnivalGetInfoRsp::arrexchangeinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActCarnivalGetInfoRsp.ArrExchangeInfo)
  return arrexchangeinfo_.Get(index);
}
inline ::pb::TActCarnivalGoodsInfo* TActCarnivalGetInfoRsp::mutable_arrexchangeinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActCarnivalGetInfoRsp.ArrExchangeInfo)
  return arrexchangeinfo_.Mutable(index);
}
inline ::pb::TActCarnivalGoodsInfo* TActCarnivalGetInfoRsp::add_arrexchangeinfo() {
  // @@protoc_insertion_point(field_add:pb.TActCarnivalGetInfoRsp.ArrExchangeInfo)
  return arrexchangeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCarnivalGoodsInfo >&
TActCarnivalGetInfoRsp::arrexchangeinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActCarnivalGetInfoRsp.ArrExchangeInfo)
  return arrexchangeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActCarnivalGoodsInfo >*
TActCarnivalGetInfoRsp::mutable_arrexchangeinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActCarnivalGetInfoRsp.ArrExchangeInfo)
  return &arrexchangeinfo_;
}

// -------------------------------------------------------------------

// TActCarnivalBuyGoodsReq

// optional uint32 Id = 1;
inline bool TActCarnivalBuyGoodsReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActCarnivalBuyGoodsReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActCarnivalBuyGoodsReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActCarnivalBuyGoodsReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActCarnivalBuyGoodsReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TActCarnivalBuyGoodsReq.Id)
  return id_;
}
inline void TActCarnivalBuyGoodsReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCarnivalBuyGoodsReq.Id)
}

// optional uint32 Num = 2;
inline bool TActCarnivalBuyGoodsReq::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActCarnivalBuyGoodsReq::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActCarnivalBuyGoodsReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActCarnivalBuyGoodsReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TActCarnivalBuyGoodsReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TActCarnivalBuyGoodsReq.Num)
  return num_;
}
inline void TActCarnivalBuyGoodsReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCarnivalBuyGoodsReq.Num)
}

// -------------------------------------------------------------------

// TActCarnivalExchangeReq

// optional uint32 Id = 1;
inline bool TActCarnivalExchangeReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActCarnivalExchangeReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActCarnivalExchangeReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActCarnivalExchangeReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActCarnivalExchangeReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TActCarnivalExchangeReq.Id)
  return id_;
}
inline void TActCarnivalExchangeReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCarnivalExchangeReq.Id)
}

// optional uint32 Num = 2;
inline bool TActCarnivalExchangeReq::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActCarnivalExchangeReq::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActCarnivalExchangeReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActCarnivalExchangeReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TActCarnivalExchangeReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TActCarnivalExchangeReq.Num)
  return num_;
}
inline void TActCarnivalExchangeReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActCarnivalExchangeReq.Num)
}

// -------------------------------------------------------------------

// TActCarnivalNotify

// repeated .pb.TActCarnivalGoodsInfo ArrRmbGoodsInfo = 1;
inline int TActCarnivalNotify::arrrmbgoodsinfo_size() const {
  return arrrmbgoodsinfo_.size();
}
inline void TActCarnivalNotify::clear_arrrmbgoodsinfo() {
  arrrmbgoodsinfo_.Clear();
}
inline const ::pb::TActCarnivalGoodsInfo& TActCarnivalNotify::arrrmbgoodsinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActCarnivalNotify.ArrRmbGoodsInfo)
  return arrrmbgoodsinfo_.Get(index);
}
inline ::pb::TActCarnivalGoodsInfo* TActCarnivalNotify::mutable_arrrmbgoodsinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActCarnivalNotify.ArrRmbGoodsInfo)
  return arrrmbgoodsinfo_.Mutable(index);
}
inline ::pb::TActCarnivalGoodsInfo* TActCarnivalNotify::add_arrrmbgoodsinfo() {
  // @@protoc_insertion_point(field_add:pb.TActCarnivalNotify.ArrRmbGoodsInfo)
  return arrrmbgoodsinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActCarnivalGoodsInfo >&
TActCarnivalNotify::arrrmbgoodsinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActCarnivalNotify.ArrRmbGoodsInfo)
  return arrrmbgoodsinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActCarnivalGoodsInfo >*
TActCarnivalNotify::mutable_arrrmbgoodsinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActCarnivalNotify.ArrRmbGoodsInfo)
  return &arrrmbgoodsinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActCarnival_2eproto__INCLUDED
