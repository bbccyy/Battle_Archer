// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Achievement.proto

#ifndef PROTOBUF_net_2fAchievement_2eproto__INCLUDED
#define PROTOBUF_net_2fAchievement_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/TaskBase.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fAchievement_2eproto();
void protobuf_AssignDesc_net_2fAchievement_2eproto();
void protobuf_ShutdownFile_net_2fAchievement_2eproto();

class TAchievementCell;
class TAchievementInfoRsp;
class TAchievementReceiveSingleAwardReq;
class TAchievementReceivePointAwardReq;
class TAchievementInfoNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TAchievementCell</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Achievement.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAchievementCell : public ::google::protobuf::Message {
 public:
  TAchievementCell();
  virtual ~TAchievementCell();

  TAchievementCell(const TAchievementCell& from);

  inline TAchievementCell& operator=(const TAchievementCell& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAchievementCell& default_instance();

  void Swap(TAchievementCell* other);

  // implements Message ----------------------------------------------

  TAchievementCell* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAchievementCell& from);
  void MergeFrom(const TAchievementCell& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAchievementCell</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional .pb.ETaskStatus Status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAchievementCell</name>
  	<Function>
  		<name>status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ETaskStatus status() const;
  inline void set_status(::pb::ETaskStatus value);

  // @@protoc_insertion_point(class_scope:pb.TAchievementCell)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tid_;
  int status_;
  friend void  protobuf_AddDesc_net_2fAchievement_2eproto();
  friend void protobuf_AssignDesc_net_2fAchievement_2eproto();
  friend void protobuf_ShutdownFile_net_2fAchievement_2eproto();

  void InitAsDefaultInstance();
  static TAchievementCell* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAchievementInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Achievement.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAchievementInfoRsp : public ::google::protobuf::Message {
 public:
  TAchievementInfoRsp();
  virtual ~TAchievementInfoRsp();

  TAchievementInfoRsp(const TAchievementInfoRsp& from);

  inline TAchievementInfoRsp& operator=(const TAchievementInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAchievementInfoRsp& default_instance();

  void Swap(TAchievementInfoRsp* other);

  // implements Message ----------------------------------------------

  TAchievementInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAchievementInfoRsp& from);
  void MergeFrom(const TAchievementInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TAchievementCell TaskStatusArr = 1;
  inline int taskstatusarr_size() const;
  inline void clear_taskstatusarr();
  static const int kTaskStatusArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAchievementInfoRsp</name>
  	<Function>
  		<name>taskstatusarr</name>
  		<replaceName>TaskStatusArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_taskstatusarr</name>
  		<replaceName>TaskStatusArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_taskstatusarr</name>
  		<replaceName>TaskStatusArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskstatusarr</name>
  		<replaceName>TaskStatusArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>taskstatusarr_size</name>
  		<replaceName>TaskStatusArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAchievementCell& taskstatusarr(int index) const;
  inline ::pb::TAchievementCell* mutable_taskstatusarr(int index);
  inline ::pb::TAchievementCell* add_taskstatusarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAchievementCell >&
      taskstatusarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAchievementCell >*
      mutable_taskstatusarr();

  // repeated uint32 ReceivedAwardTidArr = 2;
  inline int receivedawardtidarr_size() const;
  inline void clear_receivedawardtidarr();
  static const int kReceivedAwardTidArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAchievementInfoRsp</name>
  	<Function>
  		<name>receivedawardtidarr</name>
  		<replaceName>ReceivedAwardTidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_receivedawardtidarr</name>
  		<replaceName>ReceivedAwardTidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_receivedawardtidarr</name>
  		<replaceName>ReceivedAwardTidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receivedawardtidarr</name>
  		<replaceName>ReceivedAwardTidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>receivedawardtidarr_size</name>
  		<replaceName>ReceivedAwardTidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 receivedawardtidarr(int index) const;
  inline void set_receivedawardtidarr(int index, ::google::protobuf::uint32 value);
  inline void add_receivedawardtidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      receivedawardtidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_receivedawardtidarr();

  // optional uint32 PointNum = 3;
  inline bool has_pointnum() const;
  inline void clear_pointnum();
  static const int kPointNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAchievementInfoRsp</name>
  	<Function>
  		<name>pointnum</name>
  		<replaceName>PointNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pointnum</name>
  		<replaceName>PointNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pointnum</name>
  		<replaceName>PointNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pointnum() const;
  inline void set_pointnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAchievementInfoRsp)
 private:
  inline void set_has_pointnum();
  inline void clear_has_pointnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAchievementCell > taskstatusarr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > receivedawardtidarr_;
  ::google::protobuf::uint32 pointnum_;
  friend void  protobuf_AddDesc_net_2fAchievement_2eproto();
  friend void protobuf_AssignDesc_net_2fAchievement_2eproto();
  friend void protobuf_ShutdownFile_net_2fAchievement_2eproto();

  void InitAsDefaultInstance();
  static TAchievementInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAchievementReceiveSingleAwardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Achievement.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAchievementReceiveSingleAwardReq : public ::google::protobuf::Message {
 public:
  TAchievementReceiveSingleAwardReq();
  virtual ~TAchievementReceiveSingleAwardReq();

  TAchievementReceiveSingleAwardReq(const TAchievementReceiveSingleAwardReq& from);

  inline TAchievementReceiveSingleAwardReq& operator=(const TAchievementReceiveSingleAwardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAchievementReceiveSingleAwardReq& default_instance();

  void Swap(TAchievementReceiveSingleAwardReq* other);

  // implements Message ----------------------------------------------

  TAchievementReceiveSingleAwardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAchievementReceiveSingleAwardReq& from);
  void MergeFrom(const TAchievementReceiveSingleAwardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AchievementTid = 1;
  inline bool has_achievementtid() const;
  inline void clear_achievementtid();
  static const int kAchievementTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAchievementReceiveSingleAwardReq</name>
  	<Function>
  		<name>achievementtid</name>
  		<replaceName>AchievementTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_achievementtid</name>
  		<replaceName>AchievementTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_achievementtid</name>
  		<replaceName>AchievementTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 achievementtid() const;
  inline void set_achievementtid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAchievementReceiveSingleAwardReq)
 private:
  inline void set_has_achievementtid();
  inline void clear_has_achievementtid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 achievementtid_;
  friend void  protobuf_AddDesc_net_2fAchievement_2eproto();
  friend void protobuf_AssignDesc_net_2fAchievement_2eproto();
  friend void protobuf_ShutdownFile_net_2fAchievement_2eproto();

  void InitAsDefaultInstance();
  static TAchievementReceiveSingleAwardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAchievementReceivePointAwardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Achievement.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAchievementReceivePointAwardReq : public ::google::protobuf::Message {
 public:
  TAchievementReceivePointAwardReq();
  virtual ~TAchievementReceivePointAwardReq();

  TAchievementReceivePointAwardReq(const TAchievementReceivePointAwardReq& from);

  inline TAchievementReceivePointAwardReq& operator=(const TAchievementReceivePointAwardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAchievementReceivePointAwardReq& default_instance();

  void Swap(TAchievementReceivePointAwardReq* other);

  // implements Message ----------------------------------------------

  TAchievementReceivePointAwardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAchievementReceivePointAwardReq& from);
  void MergeFrom(const TAchievementReceivePointAwardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AchiPointTid = 1;
  inline bool has_achipointtid() const;
  inline void clear_achipointtid();
  static const int kAchiPointTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAchievementReceivePointAwardReq</name>
  	<Function>
  		<name>achipointtid</name>
  		<replaceName>AchiPointTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_achipointtid</name>
  		<replaceName>AchiPointTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_achipointtid</name>
  		<replaceName>AchiPointTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 achipointtid() const;
  inline void set_achipointtid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAchievementReceivePointAwardReq)
 private:
  inline void set_has_achipointtid();
  inline void clear_has_achipointtid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 achipointtid_;
  friend void  protobuf_AddDesc_net_2fAchievement_2eproto();
  friend void protobuf_AssignDesc_net_2fAchievement_2eproto();
  friend void protobuf_ShutdownFile_net_2fAchievement_2eproto();

  void InitAsDefaultInstance();
  static TAchievementReceivePointAwardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAchievementInfoNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Achievement.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAchievementInfoNotify : public ::google::protobuf::Message {
 public:
  TAchievementInfoNotify();
  virtual ~TAchievementInfoNotify();

  TAchievementInfoNotify(const TAchievementInfoNotify& from);

  inline TAchievementInfoNotify& operator=(const TAchievementInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAchievementInfoNotify& default_instance();

  void Swap(TAchievementInfoNotify* other);

  // implements Message ----------------------------------------------

  TAchievementInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAchievementInfoNotify& from);
  void MergeFrom(const TAchievementInfoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TAchievementCell TaskStatusArr = 1;
  inline int taskstatusarr_size() const;
  inline void clear_taskstatusarr();
  static const int kTaskStatusArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAchievementInfoNotify</name>
  	<Function>
  		<name>taskstatusarr</name>
  		<replaceName>TaskStatusArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_taskstatusarr</name>
  		<replaceName>TaskStatusArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_taskstatusarr</name>
  		<replaceName>TaskStatusArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskstatusarr</name>
  		<replaceName>TaskStatusArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>taskstatusarr_size</name>
  		<replaceName>TaskStatusArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAchievementCell& taskstatusarr(int index) const;
  inline ::pb::TAchievementCell* mutable_taskstatusarr(int index);
  inline ::pb::TAchievementCell* add_taskstatusarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAchievementCell >&
      taskstatusarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAchievementCell >*
      mutable_taskstatusarr();

  // repeated uint32 ReceivedAwardTidArr = 2;
  inline int receivedawardtidarr_size() const;
  inline void clear_receivedawardtidarr();
  static const int kReceivedAwardTidArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAchievementInfoNotify</name>
  	<Function>
  		<name>receivedawardtidarr</name>
  		<replaceName>ReceivedAwardTidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_receivedawardtidarr</name>
  		<replaceName>ReceivedAwardTidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_receivedawardtidarr</name>
  		<replaceName>ReceivedAwardTidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receivedawardtidarr</name>
  		<replaceName>ReceivedAwardTidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>receivedawardtidarr_size</name>
  		<replaceName>ReceivedAwardTidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 receivedawardtidarr(int index) const;
  inline void set_receivedawardtidarr(int index, ::google::protobuf::uint32 value);
  inline void add_receivedawardtidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      receivedawardtidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_receivedawardtidarr();

  // optional uint32 PointNum = 3;
  inline bool has_pointnum() const;
  inline void clear_pointnum();
  static const int kPointNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAchievementInfoNotify</name>
  	<Function>
  		<name>pointnum</name>
  		<replaceName>PointNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pointnum</name>
  		<replaceName>PointNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pointnum</name>
  		<replaceName>PointNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pointnum() const;
  inline void set_pointnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAchievementInfoNotify)
 private:
  inline void set_has_pointnum();
  inline void clear_has_pointnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAchievementCell > taskstatusarr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > receivedawardtidarr_;
  ::google::protobuf::uint32 pointnum_;
  friend void  protobuf_AddDesc_net_2fAchievement_2eproto();
  friend void protobuf_AssignDesc_net_2fAchievement_2eproto();
  friend void protobuf_ShutdownFile_net_2fAchievement_2eproto();

  void InitAsDefaultInstance();
  static TAchievementInfoNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TAchievementCell

// optional uint32 Tid = 1;
inline bool TAchievementCell::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAchievementCell::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAchievementCell::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAchievementCell::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 TAchievementCell::tid() const {
  // @@protoc_insertion_point(field_get:pb.TAchievementCell.Tid)
  return tid_;
}
inline void TAchievementCell::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAchievementCell.Tid)
}

// optional .pb.ETaskStatus Status = 2;
inline bool TAchievementCell::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAchievementCell::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAchievementCell::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAchievementCell::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::pb::ETaskStatus TAchievementCell::status() const {
  // @@protoc_insertion_point(field_get:pb.TAchievementCell.Status)
  return static_cast< ::pb::ETaskStatus >(status_);
}
inline void TAchievementCell::set_status(::pb::ETaskStatus value) {
  assert(::pb::ETaskStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.TAchievementCell.Status)
}

// -------------------------------------------------------------------

// TAchievementInfoRsp

// repeated .pb.TAchievementCell TaskStatusArr = 1;
inline int TAchievementInfoRsp::taskstatusarr_size() const {
  return taskstatusarr_.size();
}
inline void TAchievementInfoRsp::clear_taskstatusarr() {
  taskstatusarr_.Clear();
}
inline const ::pb::TAchievementCell& TAchievementInfoRsp::taskstatusarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAchievementInfoRsp.TaskStatusArr)
  return taskstatusarr_.Get(index);
}
inline ::pb::TAchievementCell* TAchievementInfoRsp::mutable_taskstatusarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAchievementInfoRsp.TaskStatusArr)
  return taskstatusarr_.Mutable(index);
}
inline ::pb::TAchievementCell* TAchievementInfoRsp::add_taskstatusarr() {
  // @@protoc_insertion_point(field_add:pb.TAchievementInfoRsp.TaskStatusArr)
  return taskstatusarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAchievementCell >&
TAchievementInfoRsp::taskstatusarr() const {
  // @@protoc_insertion_point(field_list:pb.TAchievementInfoRsp.TaskStatusArr)
  return taskstatusarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAchievementCell >*
TAchievementInfoRsp::mutable_taskstatusarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAchievementInfoRsp.TaskStatusArr)
  return &taskstatusarr_;
}

// repeated uint32 ReceivedAwardTidArr = 2;
inline int TAchievementInfoRsp::receivedawardtidarr_size() const {
  return receivedawardtidarr_.size();
}
inline void TAchievementInfoRsp::clear_receivedawardtidarr() {
  receivedawardtidarr_.Clear();
}
inline ::google::protobuf::uint32 TAchievementInfoRsp::receivedawardtidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAchievementInfoRsp.ReceivedAwardTidArr)
  return receivedawardtidarr_.Get(index);
}
inline void TAchievementInfoRsp::set_receivedawardtidarr(int index, ::google::protobuf::uint32 value) {
  receivedawardtidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TAchievementInfoRsp.ReceivedAwardTidArr)
}
inline void TAchievementInfoRsp::add_receivedawardtidarr(::google::protobuf::uint32 value) {
  receivedawardtidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TAchievementInfoRsp.ReceivedAwardTidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TAchievementInfoRsp::receivedawardtidarr() const {
  // @@protoc_insertion_point(field_list:pb.TAchievementInfoRsp.ReceivedAwardTidArr)
  return receivedawardtidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TAchievementInfoRsp::mutable_receivedawardtidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAchievementInfoRsp.ReceivedAwardTidArr)
  return &receivedawardtidarr_;
}

// optional uint32 PointNum = 3;
inline bool TAchievementInfoRsp::has_pointnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAchievementInfoRsp::set_has_pointnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAchievementInfoRsp::clear_has_pointnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAchievementInfoRsp::clear_pointnum() {
  pointnum_ = 0u;
  clear_has_pointnum();
}
inline ::google::protobuf::uint32 TAchievementInfoRsp::pointnum() const {
  // @@protoc_insertion_point(field_get:pb.TAchievementInfoRsp.PointNum)
  return pointnum_;
}
inline void TAchievementInfoRsp::set_pointnum(::google::protobuf::uint32 value) {
  set_has_pointnum();
  pointnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAchievementInfoRsp.PointNum)
}

// -------------------------------------------------------------------

// TAchievementReceiveSingleAwardReq

// optional uint32 AchievementTid = 1;
inline bool TAchievementReceiveSingleAwardReq::has_achievementtid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAchievementReceiveSingleAwardReq::set_has_achievementtid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAchievementReceiveSingleAwardReq::clear_has_achievementtid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAchievementReceiveSingleAwardReq::clear_achievementtid() {
  achievementtid_ = 0u;
  clear_has_achievementtid();
}
inline ::google::protobuf::uint32 TAchievementReceiveSingleAwardReq::achievementtid() const {
  // @@protoc_insertion_point(field_get:pb.TAchievementReceiveSingleAwardReq.AchievementTid)
  return achievementtid_;
}
inline void TAchievementReceiveSingleAwardReq::set_achievementtid(::google::protobuf::uint32 value) {
  set_has_achievementtid();
  achievementtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAchievementReceiveSingleAwardReq.AchievementTid)
}

// -------------------------------------------------------------------

// TAchievementReceivePointAwardReq

// optional uint32 AchiPointTid = 1;
inline bool TAchievementReceivePointAwardReq::has_achipointtid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAchievementReceivePointAwardReq::set_has_achipointtid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAchievementReceivePointAwardReq::clear_has_achipointtid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAchievementReceivePointAwardReq::clear_achipointtid() {
  achipointtid_ = 0u;
  clear_has_achipointtid();
}
inline ::google::protobuf::uint32 TAchievementReceivePointAwardReq::achipointtid() const {
  // @@protoc_insertion_point(field_get:pb.TAchievementReceivePointAwardReq.AchiPointTid)
  return achipointtid_;
}
inline void TAchievementReceivePointAwardReq::set_achipointtid(::google::protobuf::uint32 value) {
  set_has_achipointtid();
  achipointtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAchievementReceivePointAwardReq.AchiPointTid)
}

// -------------------------------------------------------------------

// TAchievementInfoNotify

// repeated .pb.TAchievementCell TaskStatusArr = 1;
inline int TAchievementInfoNotify::taskstatusarr_size() const {
  return taskstatusarr_.size();
}
inline void TAchievementInfoNotify::clear_taskstatusarr() {
  taskstatusarr_.Clear();
}
inline const ::pb::TAchievementCell& TAchievementInfoNotify::taskstatusarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAchievementInfoNotify.TaskStatusArr)
  return taskstatusarr_.Get(index);
}
inline ::pb::TAchievementCell* TAchievementInfoNotify::mutable_taskstatusarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAchievementInfoNotify.TaskStatusArr)
  return taskstatusarr_.Mutable(index);
}
inline ::pb::TAchievementCell* TAchievementInfoNotify::add_taskstatusarr() {
  // @@protoc_insertion_point(field_add:pb.TAchievementInfoNotify.TaskStatusArr)
  return taskstatusarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAchievementCell >&
TAchievementInfoNotify::taskstatusarr() const {
  // @@protoc_insertion_point(field_list:pb.TAchievementInfoNotify.TaskStatusArr)
  return taskstatusarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAchievementCell >*
TAchievementInfoNotify::mutable_taskstatusarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAchievementInfoNotify.TaskStatusArr)
  return &taskstatusarr_;
}

// repeated uint32 ReceivedAwardTidArr = 2;
inline int TAchievementInfoNotify::receivedawardtidarr_size() const {
  return receivedawardtidarr_.size();
}
inline void TAchievementInfoNotify::clear_receivedawardtidarr() {
  receivedawardtidarr_.Clear();
}
inline ::google::protobuf::uint32 TAchievementInfoNotify::receivedawardtidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAchievementInfoNotify.ReceivedAwardTidArr)
  return receivedawardtidarr_.Get(index);
}
inline void TAchievementInfoNotify::set_receivedawardtidarr(int index, ::google::protobuf::uint32 value) {
  receivedawardtidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TAchievementInfoNotify.ReceivedAwardTidArr)
}
inline void TAchievementInfoNotify::add_receivedawardtidarr(::google::protobuf::uint32 value) {
  receivedawardtidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TAchievementInfoNotify.ReceivedAwardTidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TAchievementInfoNotify::receivedawardtidarr() const {
  // @@protoc_insertion_point(field_list:pb.TAchievementInfoNotify.ReceivedAwardTidArr)
  return receivedawardtidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TAchievementInfoNotify::mutable_receivedawardtidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAchievementInfoNotify.ReceivedAwardTidArr)
  return &receivedawardtidarr_;
}

// optional uint32 PointNum = 3;
inline bool TAchievementInfoNotify::has_pointnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAchievementInfoNotify::set_has_pointnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAchievementInfoNotify::clear_has_pointnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAchievementInfoNotify::clear_pointnum() {
  pointnum_ = 0u;
  clear_has_pointnum();
}
inline ::google::protobuf::uint32 TAchievementInfoNotify::pointnum() const {
  // @@protoc_insertion_point(field_get:pb.TAchievementInfoNotify.PointNum)
  return pointnum_;
}
inline void TAchievementInfoNotify::set_pointnum(::google::protobuf::uint32 value) {
  set_has_pointnum();
  pointnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAchievementInfoNotify.PointNum)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fAchievement_2eproto__INCLUDED
