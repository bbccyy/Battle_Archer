// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Arena.proto

#ifndef PROTOBUF_net_2fArena_2eproto__INCLUDED
#define PROTOBUF_net_2fArena_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
#include "net/Battle.pb.h"
#include "net/Hero.pb.h"
#include "net/User.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fArena_2eproto();
void protobuf_AssignDesc_net_2fArena_2eproto();
void protobuf_ShutdownFile_net_2fArena_2eproto();

class TArenaUser;
class TArenaRankInfo;
class TArenaReport;
class TArenaGetInfoRsp;
class TArenaGetRankListReq;
class TArenaGetRankListRsp;
class TArenaGetBattleReportsRsp;
class TArenaRefreshPlayerListRsp;
class TArenaChallengeReq;
class TArenaChallengeRsp;
class TArenaQuickChallengeReq;
class TArenaQuickChallengeReward;
class TArenaQuickChallengeRsp;
class TArenaRevengeReq;
class TArenaRevengeRsp;
class TArenaBuyChallengeNumReq;
class TArenaUpdateArenaDataNotify;
class TArenaExchangeReq;
class TArenaExchangeRsp;
class TArenaRecordInfo;
class TArenaGetTopRecordsRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TArenaUser</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Arena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaUser : public ::google::protobuf::Message {
 public:
  TArenaUser();
  virtual ~TArenaUser();

  TArenaUser(const TArenaUser& from);

  inline TArenaUser& operator=(const TArenaUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaUser& default_instance();

  void Swap(TArenaUser* other);

  // implements Message ----------------------------------------------

  TArenaUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaUser& from);
  void MergeFrom(const TArenaUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaUser</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 Position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaUser</name>
  	<Function>
  		<name>position</name>
  		<replaceName>Position</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_position</name>
  		<replaceName>Position</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_position</name>
  		<replaceName>Position</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 position() const;
  inline void set_position(::google::protobuf::uint32 value);

  // optional string Uname = 3;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaUser</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional uint32 Level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TArenaUser</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint64 FightForce = 5;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TArenaUser</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // optional uint32 Htid = 6;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TArenaUser</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaUser)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();
  inline void set_has_htid();
  inline void clear_has_htid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* uname_;
  ::google::protobuf::uint32 position_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint32 htid_;
  friend void  protobuf_AddDesc_net_2fArena_2eproto();
  friend void protobuf_AssignDesc_net_2fArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fArena_2eproto();

  void InitAsDefaultInstance();
  static TArenaUser* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaRankInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Arena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaRankInfo : public ::google::protobuf::Message {
 public:
  TArenaRankInfo();
  virtual ~TArenaRankInfo();

  TArenaRankInfo(const TArenaRankInfo& from);

  inline TArenaRankInfo& operator=(const TArenaRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaRankInfo& default_instance();

  void Swap(TArenaRankInfo* other);

  // implements Message ----------------------------------------------

  TArenaRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaRankInfo& from);
  void MergeFrom(const TArenaRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaRankInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint32 Position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaRankInfo</name>
  	<Function>
  		<name>position</name>
  		<replaceName>Position</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_position</name>
  		<replaceName>Position</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_position</name>
  		<replaceName>Position</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 position() const;
  inline void set_position(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaRankInfo)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint32 position_;
  friend void  protobuf_AddDesc_net_2fArena_2eproto();
  friend void protobuf_AssignDesc_net_2fArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fArena_2eproto();

  void InitAsDefaultInstance();
  static TArenaRankInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaReport</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Arena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaReport : public ::google::protobuf::Message {
 public:
  TArenaReport();
  virtual ~TArenaReport();

  TArenaReport(const TArenaReport& from);

  inline TArenaReport& operator=(const TArenaReport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaReport& default_instance();

  void Swap(TArenaReport* other);

  // implements Message ----------------------------------------------

  TArenaReport* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaReport& from);
  void MergeFrom(const TArenaReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaReport</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional bool IsWin = 2;
  inline bool has_iswin() const;
  inline void clear_iswin();
  static const int kIsWinFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaReport</name>
  	<Function>
  		<name>iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool iswin() const;
  inline void set_iswin(bool value);

  // optional uint32 ReportId = 3;
  inline bool has_reportid() const;
  inline void clear_reportid();
  static const int kReportIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaReport</name>
  	<Function>
  		<name>reportid</name>
  		<replaceName>ReportId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_reportid</name>
  		<replaceName>ReportId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reportid</name>
  		<replaceName>ReportId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 reportid() const;
  inline void set_reportid(::google::protobuf::uint32 value);

  // optional bool IsAttack = 4;
  inline bool has_isattack() const;
  inline void clear_isattack();
  static const int kIsAttackFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TArenaReport</name>
  	<Function>
  		<name>isattack</name>
  		<replaceName>IsAttack</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isattack</name>
  		<replaceName>IsAttack</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isattack</name>
  		<replaceName>IsAttack</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isattack() const;
  inline void set_isattack(bool value);

  // @@protoc_insertion_point(class_scope:pb.TArenaReport)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_iswin();
  inline void clear_has_iswin();
  inline void set_has_reportid();
  inline void clear_has_reportid();
  inline void set_has_isattack();
  inline void clear_has_isattack();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint32 reportid_;
  bool iswin_;
  bool isattack_;
  friend void  protobuf_AddDesc_net_2fArena_2eproto();
  friend void protobuf_AssignDesc_net_2fArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fArena_2eproto();

  void InitAsDefaultInstance();
  static TArenaReport* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Arena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaGetInfoRsp : public ::google::protobuf::Message {
 public:
  TArenaGetInfoRsp();
  virtual ~TArenaGetInfoRsp();

  TArenaGetInfoRsp(const TArenaGetInfoRsp& from);

  inline TArenaGetInfoRsp& operator=(const TArenaGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaGetInfoRsp& default_instance();

  void Swap(TArenaGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TArenaGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaGetInfoRsp& from);
  void MergeFrom(const TArenaGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaGetInfoRsp</name>
  	<Function>
  		<name>position</name>
  		<replaceName>Position</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_position</name>
  		<replaceName>Position</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_position</name>
  		<replaceName>Position</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 position() const;
  inline void set_position(::google::protobuf::uint32 value);

  // optional uint32 BestPosition = 2;
  inline bool has_bestposition() const;
  inline void clear_bestposition();
  static const int kBestPositionFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaGetInfoRsp</name>
  	<Function>
  		<name>bestposition</name>
  		<replaceName>BestPosition</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bestposition</name>
  		<replaceName>BestPosition</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bestposition</name>
  		<replaceName>BestPosition</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bestposition() const;
  inline void set_bestposition(::google::protobuf::uint32 value);

  // optional uint32 ChallengeNum = 3;
  inline bool has_challengenum() const;
  inline void clear_challengenum();
  static const int kChallengeNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaGetInfoRsp</name>
  	<Function>
  		<name>challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 challengenum() const;
  inline void set_challengenum(::google::protobuf::uint32 value);

  // optional uint32 BuyNum = 4;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TArenaGetInfoRsp</name>
  	<Function>
  		<name>buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // optional uint32 BuyChallengeNum = 5;
  inline bool has_buychallengenum() const;
  inline void clear_buychallengenum();
  static const int kBuyChallengeNumFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TArenaGetInfoRsp</name>
  	<Function>
  		<name>buychallengenum</name>
  		<replaceName>BuyChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buychallengenum</name>
  		<replaceName>BuyChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buychallengenum</name>
  		<replaceName>BuyChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buychallengenum() const;
  inline void set_buychallengenum(::google::protobuf::uint32 value);

  // optional uint32 RefreshNum = 6;
  inline bool has_refreshnum() const;
  inline void clear_refreshnum();
  static const int kRefreshNumFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TArenaGetInfoRsp</name>
  	<Function>
  		<name>refreshnum</name>
  		<replaceName>RefreshNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refreshnum</name>
  		<replaceName>RefreshNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refreshnum</name>
  		<replaceName>RefreshNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 refreshnum() const;
  inline void set_refreshnum(::google::protobuf::uint32 value);

  // optional uint64 RewardTime = 7;
  inline bool has_rewardtime() const;
  inline void clear_rewardtime();
  static const int kRewardTimeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TArenaGetInfoRsp</name>
  	<Function>
  		<name>rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rewardtime() const;
  inline void set_rewardtime(::google::protobuf::uint64 value);

  // repeated .pb.TArenaUser OpponentArray = 8;
  inline int opponentarray_size() const;
  inline void clear_opponentarray();
  static const int kOpponentArrayFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TArenaGetInfoRsp</name>
  	<Function>
  		<name>opponentarray</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_opponentarray</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_opponentarray</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_opponentarray</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>opponentarray_size</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaUser& opponentarray(int index) const;
  inline ::pb::TArenaUser* mutable_opponentarray(int index);
  inline ::pb::TArenaUser* add_opponentarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >&
      opponentarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >*
      mutable_opponentarray();

  // repeated .pb.TArenaUser TopArray = 9;
  inline int toparray_size() const;
  inline void clear_toparray();
  static const int kTopArrayFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TArenaGetInfoRsp</name>
  	<Function>
  		<name>toparray</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_toparray</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_toparray</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_toparray</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>toparray_size</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaUser& toparray(int index) const;
  inline ::pb::TArenaUser* mutable_toparray(int index);
  inline ::pb::TArenaUser* add_toparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >&
      toparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >*
      mutable_toparray();

  // optional uint32 ChallengeTotal = 10;
  inline bool has_challengetotal() const;
  inline void clear_challengetotal();
  static const int kChallengeTotalFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TArenaGetInfoRsp</name>
  	<Function>
  		<name>challengetotal</name>
  		<replaceName>ChallengeTotal</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_challengetotal</name>
  		<replaceName>ChallengeTotal</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_challengetotal</name>
  		<replaceName>ChallengeTotal</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 challengetotal() const;
  inline void set_challengetotal(::google::protobuf::uint32 value);

  // optional uint32 WinTotal = 11;
  inline bool has_wintotal() const;
  inline void clear_wintotal();
  static const int kWinTotalFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TArenaGetInfoRsp</name>
  	<Function>
  		<name>wintotal</name>
  		<replaceName>WinTotal</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_wintotal</name>
  		<replaceName>WinTotal</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_wintotal</name>
  		<replaceName>WinTotal</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 wintotal() const;
  inline void set_wintotal(::google::protobuf::uint32 value);

  // repeated uint32 BuyArray = 12;
  inline int buyarray_size() const;
  inline void clear_buyarray();
  static const int kBuyArrayFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TArenaGetInfoRsp</name>
  	<Function>
  		<name>buyarray</name>
  		<replaceName>BuyArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buyarray</name>
  		<replaceName>BuyArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buyarray</name>
  		<replaceName>BuyArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buyarray</name>
  		<replaceName>BuyArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buyarray_size</name>
  		<replaceName>BuyArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buyarray(int index) const;
  inline void set_buyarray(int index, ::google::protobuf::uint32 value);
  inline void add_buyarray(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      buyarray() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_buyarray();

  // @@protoc_insertion_point(class_scope:pb.TArenaGetInfoRsp)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_bestposition();
  inline void clear_has_bestposition();
  inline void set_has_challengenum();
  inline void clear_has_challengenum();
  inline void set_has_buynum();
  inline void clear_has_buynum();
  inline void set_has_buychallengenum();
  inline void clear_has_buychallengenum();
  inline void set_has_refreshnum();
  inline void clear_has_refreshnum();
  inline void set_has_rewardtime();
  inline void clear_has_rewardtime();
  inline void set_has_challengetotal();
  inline void clear_has_challengetotal();
  inline void set_has_wintotal();
  inline void clear_has_wintotal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 position_;
  ::google::protobuf::uint32 bestposition_;
  ::google::protobuf::uint32 challengenum_;
  ::google::protobuf::uint32 buynum_;
  ::google::protobuf::uint32 buychallengenum_;
  ::google::protobuf::uint32 refreshnum_;
  ::google::protobuf::uint64 rewardtime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser > opponentarray_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser > toparray_;
  ::google::protobuf::uint32 challengetotal_;
  ::google::protobuf::uint32 wintotal_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > buyarray_;
  friend void  protobuf_AddDesc_net_2fArena_2eproto();
  friend void protobuf_AssignDesc_net_2fArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fArena_2eproto();

  void InitAsDefaultInstance();
  static TArenaGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaGetRankListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Arena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaGetRankListReq : public ::google::protobuf::Message {
 public:
  TArenaGetRankListReq();
  virtual ~TArenaGetRankListReq();

  TArenaGetRankListReq(const TArenaGetRankListReq& from);

  inline TArenaGetRankListReq& operator=(const TArenaGetRankListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaGetRankListReq& default_instance();

  void Swap(TArenaGetRankListReq* other);

  // implements Message ----------------------------------------------

  TArenaGetRankListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaGetRankListReq& from);
  void MergeFrom(const TArenaGetRankListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaGetRankListReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaGetRankListReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaGetRankListReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fArena_2eproto();
  friend void protobuf_AssignDesc_net_2fArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fArena_2eproto();

  void InitAsDefaultInstance();
  static TArenaGetRankListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaGetRankListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Arena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaGetRankListRsp : public ::google::protobuf::Message {
 public:
  TArenaGetRankListRsp();
  virtual ~TArenaGetRankListRsp();

  TArenaGetRankListRsp(const TArenaGetRankListRsp& from);

  inline TArenaGetRankListRsp& operator=(const TArenaGetRankListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaGetRankListRsp& default_instance();

  void Swap(TArenaGetRankListRsp* other);

  // implements Message ----------------------------------------------

  TArenaGetRankListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaGetRankListRsp& from);
  void MergeFrom(const TArenaGetRankListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TArenaRankInfo RankArr = 1;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaGetRankListRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaRankInfo& rankarr(int index) const;
  inline ::pb::TArenaRankInfo* mutable_rankarr(int index);
  inline ::pb::TArenaRankInfo* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaRankInfo >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaRankInfo >*
      mutable_rankarr();

  // optional int32 MyRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaGetRankListRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaGetRankListRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaRankInfo > rankarr_;
  ::google::protobuf::int32 myrank_;
  friend void  protobuf_AddDesc_net_2fArena_2eproto();
  friend void protobuf_AssignDesc_net_2fArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fArena_2eproto();

  void InitAsDefaultInstance();
  static TArenaGetRankListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaGetBattleReportsRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Arena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaGetBattleReportsRsp : public ::google::protobuf::Message {
 public:
  TArenaGetBattleReportsRsp();
  virtual ~TArenaGetBattleReportsRsp();

  TArenaGetBattleReportsRsp(const TArenaGetBattleReportsRsp& from);

  inline TArenaGetBattleReportsRsp& operator=(const TArenaGetBattleReportsRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaGetBattleReportsRsp& default_instance();

  void Swap(TArenaGetBattleReportsRsp* other);

  // implements Message ----------------------------------------------

  TArenaGetBattleReportsRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaGetBattleReportsRsp& from);
  void MergeFrom(const TArenaGetBattleReportsRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TArenaReport ReportArray = 1;
  inline int reportarray_size() const;
  inline void clear_reportarray();
  static const int kReportArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaGetBattleReportsRsp</name>
  	<Function>
  		<name>reportarray</name>
  		<replaceName>ReportArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_reportarray</name>
  		<replaceName>ReportArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_reportarray</name>
  		<replaceName>ReportArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reportarray</name>
  		<replaceName>ReportArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>reportarray_size</name>
  		<replaceName>ReportArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaReport& reportarray(int index) const;
  inline ::pb::TArenaReport* mutable_reportarray(int index);
  inline ::pb::TArenaReport* add_reportarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaReport >&
      reportarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaReport >*
      mutable_reportarray();

  // @@protoc_insertion_point(class_scope:pb.TArenaGetBattleReportsRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaReport > reportarray_;
  friend void  protobuf_AddDesc_net_2fArena_2eproto();
  friend void protobuf_AssignDesc_net_2fArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fArena_2eproto();

  void InitAsDefaultInstance();
  static TArenaGetBattleReportsRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaRefreshPlayerListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Arena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaRefreshPlayerListRsp : public ::google::protobuf::Message {
 public:
  TArenaRefreshPlayerListRsp();
  virtual ~TArenaRefreshPlayerListRsp();

  TArenaRefreshPlayerListRsp(const TArenaRefreshPlayerListRsp& from);

  inline TArenaRefreshPlayerListRsp& operator=(const TArenaRefreshPlayerListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaRefreshPlayerListRsp& default_instance();

  void Swap(TArenaRefreshPlayerListRsp* other);

  // implements Message ----------------------------------------------

  TArenaRefreshPlayerListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaRefreshPlayerListRsp& from);
  void MergeFrom(const TArenaRefreshPlayerListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TArenaUser OpponentArray = 1;
  inline int opponentarray_size() const;
  inline void clear_opponentarray();
  static const int kOpponentArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaRefreshPlayerListRsp</name>
  	<Function>
  		<name>opponentarray</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_opponentarray</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_opponentarray</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_opponentarray</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>opponentarray_size</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaUser& opponentarray(int index) const;
  inline ::pb::TArenaUser* mutable_opponentarray(int index);
  inline ::pb::TArenaUser* add_opponentarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >&
      opponentarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >*
      mutable_opponentarray();

  // repeated .pb.TArenaUser TopArray = 2;
  inline int toparray_size() const;
  inline void clear_toparray();
  static const int kTopArrayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaRefreshPlayerListRsp</name>
  	<Function>
  		<name>toparray</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_toparray</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_toparray</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_toparray</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>toparray_size</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaUser& toparray(int index) const;
  inline ::pb::TArenaUser* mutable_toparray(int index);
  inline ::pb::TArenaUser* add_toparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >&
      toparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >*
      mutable_toparray();

  // @@protoc_insertion_point(class_scope:pb.TArenaRefreshPlayerListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser > opponentarray_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser > toparray_;
  friend void  protobuf_AddDesc_net_2fArena_2eproto();
  friend void protobuf_AssignDesc_net_2fArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fArena_2eproto();

  void InitAsDefaultInstance();
  static TArenaRefreshPlayerListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaChallengeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Arena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaChallengeReq : public ::google::protobuf::Message {
 public:
  TArenaChallengeReq();
  virtual ~TArenaChallengeReq();

  TArenaChallengeReq(const TArenaChallengeReq& from);

  inline TArenaChallengeReq& operator=(const TArenaChallengeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaChallengeReq& default_instance();

  void Swap(TArenaChallengeReq* other);

  // implements Message ----------------------------------------------

  TArenaChallengeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaChallengeReq& from);
  void MergeFrom(const TArenaChallengeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AttackPos = 1;
  inline bool has_attackpos() const;
  inline void clear_attackpos();
  static const int kAttackPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaChallengeReq</name>
  	<Function>
  		<name>attackpos</name>
  		<replaceName>AttackPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attackpos</name>
  		<replaceName>AttackPos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attackpos</name>
  		<replaceName>AttackPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attackpos() const;
  inline void set_attackpos(::google::protobuf::uint32 value);

  // optional uint32 DefendPos = 2;
  inline bool has_defendpos() const;
  inline void clear_defendpos();
  static const int kDefendPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaChallengeReq</name>
  	<Function>
  		<name>defendpos</name>
  		<replaceName>DefendPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defendpos</name>
  		<replaceName>DefendPos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defendpos</name>
  		<replaceName>DefendPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 defendpos() const;
  inline void set_defendpos(::google::protobuf::uint32 value);

  // optional uint64 DefendUid = 3;
  inline bool has_defenduid() const;
  inline void clear_defenduid();
  static const int kDefendUidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaChallengeReq</name>
  	<Function>
  		<name>defenduid</name>
  		<replaceName>DefendUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defenduid</name>
  		<replaceName>DefendUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defenduid</name>
  		<replaceName>DefendUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 defenduid() const;
  inline void set_defenduid(::google::protobuf::uint64 value);

  // repeated uint32 HidArray = 4;
  inline int hidarray_size() const;
  inline void clear_hidarray();
  static const int kHidArrayFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TArenaChallengeReq</name>
  	<Function>
  		<name>hidarray</name>
  		<replaceName>HidArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_hidarray</name>
  		<replaceName>HidArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_hidarray</name>
  		<replaceName>HidArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hidarray</name>
  		<replaceName>HidArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>hidarray_size</name>
  		<replaceName>HidArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hidarray(int index) const;
  inline void set_hidarray(int index, ::google::protobuf::uint32 value);
  inline void add_hidarray(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      hidarray() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_hidarray();

  // @@protoc_insertion_point(class_scope:pb.TArenaChallengeReq)
 private:
  inline void set_has_attackpos();
  inline void clear_has_attackpos();
  inline void set_has_defendpos();
  inline void clear_has_defendpos();
  inline void set_has_defenduid();
  inline void clear_has_defenduid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 attackpos_;
  ::google::protobuf::uint32 defendpos_;
  ::google::protobuf::uint64 defenduid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > hidarray_;
  friend void  protobuf_AddDesc_net_2fArena_2eproto();
  friend void protobuf_AssignDesc_net_2fArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fArena_2eproto();

  void InitAsDefaultInstance();
  static TArenaChallengeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaChallengeRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Arena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaChallengeRsp : public ::google::protobuf::Message {
 public:
  TArenaChallengeRsp();
  virtual ~TArenaChallengeRsp();

  TArenaChallengeRsp(const TArenaChallengeRsp& from);

  inline TArenaChallengeRsp& operator=(const TArenaChallengeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaChallengeRsp& default_instance();

  void Swap(TArenaChallengeRsp* other);

  // implements Message ----------------------------------------------

  TArenaChallengeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaChallengeRsp& from);
  void MergeFrom(const TArenaChallengeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool RefreshOppt = 1;
  inline bool has_refreshoppt() const;
  inline void clear_refreshoppt();
  static const int kRefreshOpptFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaChallengeRsp</name>
  	<Function>
  		<name>refreshoppt</name>
  		<replaceName>RefreshOppt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refreshoppt</name>
  		<replaceName>RefreshOppt</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refreshoppt</name>
  		<replaceName>RefreshOppt</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool refreshoppt() const;
  inline void set_refreshoppt(bool value);

  // optional uint32 Position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaChallengeRsp</name>
  	<Function>
  		<name>position</name>
  		<replaceName>Position</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_position</name>
  		<replaceName>Position</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_position</name>
  		<replaceName>Position</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 position() const;
  inline void set_position(::google::protobuf::uint32 value);

  // optional bool IsWin = 3;
  inline bool has_iswin() const;
  inline void clear_iswin();
  static const int kIsWinFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaChallengeRsp</name>
  	<Function>
  		<name>iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool iswin() const;
  inline void set_iswin(bool value);

  // optional .pb.TBattleResult FightRet = 4;
  inline bool has_fightret() const;
  inline void clear_fightret();
  static const int kFightRetFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TArenaChallengeRsp</name>
  	<Function>
  		<name>fightret</name>
  		<replaceName>FightRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightret</name>
  		<replaceName>FightRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_fightret</name>
  		<replaceName>FightRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightret</name>
  		<replaceName>FightRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleResult& fightret() const;
  inline ::pb::TBattleResult* mutable_fightret();
  inline ::pb::TBattleResult* release_fightret();
  inline void set_allocated_fightret(::pb::TBattleResult* fightret);

  // repeated .pb.TArenaUser TopArray = 5;
  inline int toparray_size() const;
  inline void clear_toparray();
  static const int kTopArrayFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TArenaChallengeRsp</name>
  	<Function>
  		<name>toparray</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_toparray</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_toparray</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_toparray</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>toparray_size</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaUser& toparray(int index) const;
  inline ::pb::TArenaUser* mutable_toparray(int index);
  inline ::pb::TArenaUser* add_toparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >&
      toparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >*
      mutable_toparray();

  // repeated .pb.TArenaUser OpponentArray = 6;
  inline int opponentarray_size() const;
  inline void clear_opponentarray();
  static const int kOpponentArrayFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TArenaChallengeRsp</name>
  	<Function>
  		<name>opponentarray</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_opponentarray</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_opponentarray</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_opponentarray</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>opponentarray_size</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaUser& opponentarray(int index) const;
  inline ::pb::TArenaUser* mutable_opponentarray(int index);
  inline ::pb::TArenaUser* add_opponentarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >&
      opponentarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >*
      mutable_opponentarray();

  // optional uint32 BreakoutReward = 7;
  inline bool has_breakoutreward() const;
  inline void clear_breakoutreward();
  static const int kBreakoutRewardFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TArenaChallengeRsp</name>
  	<Function>
  		<name>breakoutreward</name>
  		<replaceName>BreakoutReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_breakoutreward</name>
  		<replaceName>BreakoutReward</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_breakoutreward</name>
  		<replaceName>BreakoutReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 breakoutreward() const;
  inline void set_breakoutreward(::google::protobuf::uint32 value);

  // optional uint32 UserExp = 8;
  inline bool has_userexp() const;
  inline void clear_userexp();
  static const int kUserExpFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TArenaChallengeRsp</name>
  	<Function>
  		<name>userexp</name>
  		<replaceName>UserExp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userexp</name>
  		<replaceName>UserExp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userexp</name>
  		<replaceName>UserExp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 userexp() const;
  inline void set_userexp(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward CoinReward = 9;
  inline int coinreward_size() const;
  inline void clear_coinreward();
  static const int kCoinRewardFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TArenaChallengeRsp</name>
  	<Function>
  		<name>coinreward</name>
  		<replaceName>CoinReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_coinreward</name>
  		<replaceName>CoinReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_coinreward</name>
  		<replaceName>CoinReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_coinreward</name>
  		<replaceName>CoinReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>coinreward_size</name>
  		<replaceName>CoinReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& coinreward(int index) const;
  inline ::pb::TCommonReward* mutable_coinreward(int index);
  inline ::pb::TCommonReward* add_coinreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      coinreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_coinreward();

  // repeated .pb.TCommonReward FlopReward = 10;
  inline int flopreward_size() const;
  inline void clear_flopreward();
  static const int kFlopRewardFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TArenaChallengeRsp</name>
  	<Function>
  		<name>flopreward</name>
  		<replaceName>FlopReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_flopreward</name>
  		<replaceName>FlopReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_flopreward</name>
  		<replaceName>FlopReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_flopreward</name>
  		<replaceName>FlopReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>flopreward_size</name>
  		<replaceName>FlopReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& flopreward(int index) const;
  inline ::pb::TCommonReward* mutable_flopreward(int index);
  inline ::pb::TCommonReward* add_flopreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      flopreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_flopreward();

  // @@protoc_insertion_point(class_scope:pb.TArenaChallengeRsp)
 private:
  inline void set_has_refreshoppt();
  inline void clear_has_refreshoppt();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_iswin();
  inline void clear_has_iswin();
  inline void set_has_fightret();
  inline void clear_has_fightret();
  inline void set_has_breakoutreward();
  inline void clear_has_breakoutreward();
  inline void set_has_userexp();
  inline void clear_has_userexp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 position_;
  bool refreshoppt_;
  bool iswin_;
  ::pb::TBattleResult* fightret_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser > toparray_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser > opponentarray_;
  ::google::protobuf::uint32 breakoutreward_;
  ::google::protobuf::uint32 userexp_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > coinreward_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > flopreward_;
  friend void  protobuf_AddDesc_net_2fArena_2eproto();
  friend void protobuf_AssignDesc_net_2fArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fArena_2eproto();

  void InitAsDefaultInstance();
  static TArenaChallengeRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaQuickChallengeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Arena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaQuickChallengeReq : public ::google::protobuf::Message {
 public:
  TArenaQuickChallengeReq();
  virtual ~TArenaQuickChallengeReq();

  TArenaQuickChallengeReq(const TArenaQuickChallengeReq& from);

  inline TArenaQuickChallengeReq& operator=(const TArenaQuickChallengeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaQuickChallengeReq& default_instance();

  void Swap(TArenaQuickChallengeReq* other);

  // implements Message ----------------------------------------------

  TArenaQuickChallengeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaQuickChallengeReq& from);
  void MergeFrom(const TArenaQuickChallengeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AttackPos = 1;
  inline bool has_attackpos() const;
  inline void clear_attackpos();
  static const int kAttackPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaQuickChallengeReq</name>
  	<Function>
  		<name>attackpos</name>
  		<replaceName>AttackPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attackpos</name>
  		<replaceName>AttackPos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attackpos</name>
  		<replaceName>AttackPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attackpos() const;
  inline void set_attackpos(::google::protobuf::uint32 value);

  // optional uint32 DefendPos = 2;
  inline bool has_defendpos() const;
  inline void clear_defendpos();
  static const int kDefendPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaQuickChallengeReq</name>
  	<Function>
  		<name>defendpos</name>
  		<replaceName>DefendPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defendpos</name>
  		<replaceName>DefendPos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defendpos</name>
  		<replaceName>DefendPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 defendpos() const;
  inline void set_defendpos(::google::protobuf::uint32 value);

  // optional uint64 DefendUid = 3;
  inline bool has_defenduid() const;
  inline void clear_defenduid();
  static const int kDefendUidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaQuickChallengeReq</name>
  	<Function>
  		<name>defenduid</name>
  		<replaceName>DefendUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defenduid</name>
  		<replaceName>DefendUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defenduid</name>
  		<replaceName>DefendUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 defenduid() const;
  inline void set_defenduid(::google::protobuf::uint64 value);

  // optional uint32 Num = 4;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TArenaQuickChallengeReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaQuickChallengeReq)
 private:
  inline void set_has_attackpos();
  inline void clear_has_attackpos();
  inline void set_has_defendpos();
  inline void clear_has_defendpos();
  inline void set_has_defenduid();
  inline void clear_has_defenduid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 attackpos_;
  ::google::protobuf::uint32 defendpos_;
  ::google::protobuf::uint64 defenduid_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fArena_2eproto();
  friend void protobuf_AssignDesc_net_2fArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fArena_2eproto();

  void InitAsDefaultInstance();
  static TArenaQuickChallengeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaQuickChallengeReward</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Arena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaQuickChallengeReward : public ::google::protobuf::Message {
 public:
  TArenaQuickChallengeReward();
  virtual ~TArenaQuickChallengeReward();

  TArenaQuickChallengeReward(const TArenaQuickChallengeReward& from);

  inline TArenaQuickChallengeReward& operator=(const TArenaQuickChallengeReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaQuickChallengeReward& default_instance();

  void Swap(TArenaQuickChallengeReward* other);

  // implements Message ----------------------------------------------

  TArenaQuickChallengeReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaQuickChallengeReward& from);
  void MergeFrom(const TArenaQuickChallengeReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 UserExp = 1;
  inline bool has_userexp() const;
  inline void clear_userexp();
  static const int kUserExpFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaQuickChallengeReward</name>
  	<Function>
  		<name>userexp</name>
  		<replaceName>UserExp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userexp</name>
  		<replaceName>UserExp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userexp</name>
  		<replaceName>UserExp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 userexp() const;
  inline void set_userexp(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward CoinReward = 2;
  inline int coinreward_size() const;
  inline void clear_coinreward();
  static const int kCoinRewardFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaQuickChallengeReward</name>
  	<Function>
  		<name>coinreward</name>
  		<replaceName>CoinReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_coinreward</name>
  		<replaceName>CoinReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_coinreward</name>
  		<replaceName>CoinReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_coinreward</name>
  		<replaceName>CoinReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>coinreward_size</name>
  		<replaceName>CoinReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& coinreward(int index) const;
  inline ::pb::TCommonReward* mutable_coinreward(int index);
  inline ::pb::TCommonReward* add_coinreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      coinreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_coinreward();

  // repeated .pb.TCommonReward FlopReward = 3;
  inline int flopreward_size() const;
  inline void clear_flopreward();
  static const int kFlopRewardFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaQuickChallengeReward</name>
  	<Function>
  		<name>flopreward</name>
  		<replaceName>FlopReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_flopreward</name>
  		<replaceName>FlopReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_flopreward</name>
  		<replaceName>FlopReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_flopreward</name>
  		<replaceName>FlopReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>flopreward_size</name>
  		<replaceName>FlopReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& flopreward(int index) const;
  inline ::pb::TCommonReward* mutable_flopreward(int index);
  inline ::pb::TCommonReward* add_flopreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      flopreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_flopreward();

  // @@protoc_insertion_point(class_scope:pb.TArenaQuickChallengeReward)
 private:
  inline void set_has_userexp();
  inline void clear_has_userexp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > coinreward_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > flopreward_;
  ::google::protobuf::uint32 userexp_;
  friend void  protobuf_AddDesc_net_2fArena_2eproto();
  friend void protobuf_AssignDesc_net_2fArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fArena_2eproto();

  void InitAsDefaultInstance();
  static TArenaQuickChallengeReward* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaQuickChallengeRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Arena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaQuickChallengeRsp : public ::google::protobuf::Message {
 public:
  TArenaQuickChallengeRsp();
  virtual ~TArenaQuickChallengeRsp();

  TArenaQuickChallengeRsp(const TArenaQuickChallengeRsp& from);

  inline TArenaQuickChallengeRsp& operator=(const TArenaQuickChallengeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaQuickChallengeRsp& default_instance();

  void Swap(TArenaQuickChallengeRsp* other);

  // implements Message ----------------------------------------------

  TArenaQuickChallengeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaQuickChallengeRsp& from);
  void MergeFrom(const TArenaQuickChallengeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool RefreshOppt = 1;
  inline bool has_refreshoppt() const;
  inline void clear_refreshoppt();
  static const int kRefreshOpptFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaQuickChallengeRsp</name>
  	<Function>
  		<name>refreshoppt</name>
  		<replaceName>RefreshOppt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refreshoppt</name>
  		<replaceName>RefreshOppt</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refreshoppt</name>
  		<replaceName>RefreshOppt</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool refreshoppt() const;
  inline void set_refreshoppt(bool value);

  // optional uint32 Position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaQuickChallengeRsp</name>
  	<Function>
  		<name>position</name>
  		<replaceName>Position</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_position</name>
  		<replaceName>Position</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_position</name>
  		<replaceName>Position</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 position() const;
  inline void set_position(::google::protobuf::uint32 value);

  // repeated .pb.TArenaUser OpponentArray = 3;
  inline int opponentarray_size() const;
  inline void clear_opponentarray();
  static const int kOpponentArrayFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaQuickChallengeRsp</name>
  	<Function>
  		<name>opponentarray</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_opponentarray</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_opponentarray</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_opponentarray</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>opponentarray_size</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaUser& opponentarray(int index) const;
  inline ::pb::TArenaUser* mutable_opponentarray(int index);
  inline ::pb::TArenaUser* add_opponentarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >&
      opponentarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >*
      mutable_opponentarray();

  // repeated .pb.TArenaUser TopArray = 4;
  inline int toparray_size() const;
  inline void clear_toparray();
  static const int kTopArrayFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TArenaQuickChallengeRsp</name>
  	<Function>
  		<name>toparray</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_toparray</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_toparray</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_toparray</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>toparray_size</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaUser& toparray(int index) const;
  inline ::pb::TArenaUser* mutable_toparray(int index);
  inline ::pb::TArenaUser* add_toparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >&
      toparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >*
      mutable_toparray();

  // repeated .pb.TArenaQuickChallengeReward RewardArr = 5;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TArenaQuickChallengeRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaQuickChallengeReward& rewardarr(int index) const;
  inline ::pb::TArenaQuickChallengeReward* mutable_rewardarr(int index);
  inline ::pb::TArenaQuickChallengeReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaQuickChallengeReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaQuickChallengeReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TArenaQuickChallengeRsp)
 private:
  inline void set_has_refreshoppt();
  inline void clear_has_refreshoppt();
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool refreshoppt_;
  ::google::protobuf::uint32 position_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser > opponentarray_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser > toparray_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaQuickChallengeReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fArena_2eproto();
  friend void protobuf_AssignDesc_net_2fArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fArena_2eproto();

  void InitAsDefaultInstance();
  static TArenaQuickChallengeRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaRevengeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Arena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaRevengeReq : public ::google::protobuf::Message {
 public:
  TArenaRevengeReq();
  virtual ~TArenaRevengeReq();

  TArenaRevengeReq(const TArenaRevengeReq& from);

  inline TArenaRevengeReq& operator=(const TArenaRevengeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaRevengeReq& default_instance();

  void Swap(TArenaRevengeReq* other);

  // implements Message ----------------------------------------------

  TArenaRevengeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaRevengeReq& from);
  void MergeFrom(const TArenaRevengeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 EnemyUid = 1;
  inline bool has_enemyuid() const;
  inline void clear_enemyuid();
  static const int kEnemyUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaRevengeReq</name>
  	<Function>
  		<name>enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 enemyuid() const;
  inline void set_enemyuid(::google::protobuf::uint64 value);

  // repeated uint32 HidArray = 2;
  inline int hidarray_size() const;
  inline void clear_hidarray();
  static const int kHidArrayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaRevengeReq</name>
  	<Function>
  		<name>hidarray</name>
  		<replaceName>HidArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_hidarray</name>
  		<replaceName>HidArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_hidarray</name>
  		<replaceName>HidArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hidarray</name>
  		<replaceName>HidArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>hidarray_size</name>
  		<replaceName>HidArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hidarray(int index) const;
  inline void set_hidarray(int index, ::google::protobuf::uint32 value);
  inline void add_hidarray(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      hidarray() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_hidarray();

  // @@protoc_insertion_point(class_scope:pb.TArenaRevengeReq)
 private:
  inline void set_has_enemyuid();
  inline void clear_has_enemyuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 enemyuid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > hidarray_;
  friend void  protobuf_AddDesc_net_2fArena_2eproto();
  friend void protobuf_AssignDesc_net_2fArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fArena_2eproto();

  void InitAsDefaultInstance();
  static TArenaRevengeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaRevengeRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Arena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaRevengeRsp : public ::google::protobuf::Message {
 public:
  TArenaRevengeRsp();
  virtual ~TArenaRevengeRsp();

  TArenaRevengeRsp(const TArenaRevengeRsp& from);

  inline TArenaRevengeRsp& operator=(const TArenaRevengeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaRevengeRsp& default_instance();

  void Swap(TArenaRevengeRsp* other);

  // implements Message ----------------------------------------------

  TArenaRevengeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaRevengeRsp& from);
  void MergeFrom(const TArenaRevengeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AttackPos = 1;
  inline bool has_attackpos() const;
  inline void clear_attackpos();
  static const int kAttackPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaRevengeRsp</name>
  	<Function>
  		<name>attackpos</name>
  		<replaceName>AttackPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attackpos</name>
  		<replaceName>AttackPos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attackpos</name>
  		<replaceName>AttackPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attackpos() const;
  inline void set_attackpos(::google::protobuf::uint32 value);

  // optional uint32 EnemyPos = 2;
  inline bool has_enemypos() const;
  inline void clear_enemypos();
  static const int kEnemyPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaRevengeRsp</name>
  	<Function>
  		<name>enemypos</name>
  		<replaceName>EnemyPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemypos</name>
  		<replaceName>EnemyPos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemypos</name>
  		<replaceName>EnemyPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 enemypos() const;
  inline void set_enemypos(::google::protobuf::uint32 value);

  // optional uint64 EnemyUid = 3;
  inline bool has_enemyuid() const;
  inline void clear_enemyuid();
  static const int kEnemyUidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaRevengeRsp</name>
  	<Function>
  		<name>enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 enemyuid() const;
  inline void set_enemyuid(::google::protobuf::uint64 value);

  // optional .pb.TArenaChallengeRsp ChallengeRsp = 4;
  inline bool has_challengersp() const;
  inline void clear_challengersp();
  static const int kChallengeRspFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TArenaRevengeRsp</name>
  	<Function>
  		<name>challengersp</name>
  		<replaceName>ChallengeRsp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_challengersp</name>
  		<replaceName>ChallengeRsp</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_challengersp</name>
  		<replaceName>ChallengeRsp</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_challengersp</name>
  		<replaceName>ChallengeRsp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaChallengeRsp& challengersp() const;
  inline ::pb::TArenaChallengeRsp* mutable_challengersp();
  inline ::pb::TArenaChallengeRsp* release_challengersp();
  inline void set_allocated_challengersp(::pb::TArenaChallengeRsp* challengersp);

  // @@protoc_insertion_point(class_scope:pb.TArenaRevengeRsp)
 private:
  inline void set_has_attackpos();
  inline void clear_has_attackpos();
  inline void set_has_enemypos();
  inline void clear_has_enemypos();
  inline void set_has_enemyuid();
  inline void clear_has_enemyuid();
  inline void set_has_challengersp();
  inline void clear_has_challengersp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 attackpos_;
  ::google::protobuf::uint32 enemypos_;
  ::google::protobuf::uint64 enemyuid_;
  ::pb::TArenaChallengeRsp* challengersp_;
  friend void  protobuf_AddDesc_net_2fArena_2eproto();
  friend void protobuf_AssignDesc_net_2fArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fArena_2eproto();

  void InitAsDefaultInstance();
  static TArenaRevengeRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaBuyChallengeNumReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Arena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaBuyChallengeNumReq : public ::google::protobuf::Message {
 public:
  TArenaBuyChallengeNumReq();
  virtual ~TArenaBuyChallengeNumReq();

  TArenaBuyChallengeNumReq(const TArenaBuyChallengeNumReq& from);

  inline TArenaBuyChallengeNumReq& operator=(const TArenaBuyChallengeNumReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaBuyChallengeNumReq& default_instance();

  void Swap(TArenaBuyChallengeNumReq* other);

  // implements Message ----------------------------------------------

  TArenaBuyChallengeNumReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaBuyChallengeNumReq& from);
  void MergeFrom(const TArenaBuyChallengeNumReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BuyNum = 1;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaBuyChallengeNumReq</name>
  	<Function>
  		<name>buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaBuyChallengeNumReq)
 private:
  inline void set_has_buynum();
  inline void clear_has_buynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 buynum_;
  friend void  protobuf_AddDesc_net_2fArena_2eproto();
  friend void protobuf_AssignDesc_net_2fArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fArena_2eproto();

  void InitAsDefaultInstance();
  static TArenaBuyChallengeNumReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaUpdateArenaDataNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Arena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaUpdateArenaDataNotify : public ::google::protobuf::Message {
 public:
  TArenaUpdateArenaDataNotify();
  virtual ~TArenaUpdateArenaDataNotify();

  TArenaUpdateArenaDataNotify(const TArenaUpdateArenaDataNotify& from);

  inline TArenaUpdateArenaDataNotify& operator=(const TArenaUpdateArenaDataNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaUpdateArenaDataNotify& default_instance();

  void Swap(TArenaUpdateArenaDataNotify* other);

  // implements Message ----------------------------------------------

  TArenaUpdateArenaDataNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaUpdateArenaDataNotify& from);
  void MergeFrom(const TArenaUpdateArenaDataNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaUpdateArenaDataNotify</name>
  	<Function>
  		<name>position</name>
  		<replaceName>Position</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_position</name>
  		<replaceName>Position</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_position</name>
  		<replaceName>Position</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 position() const;
  inline void set_position(::google::protobuf::uint32 value);

  // repeated .pb.TArenaUser OpponentArray = 2;
  inline int opponentarray_size() const;
  inline void clear_opponentarray();
  static const int kOpponentArrayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaUpdateArenaDataNotify</name>
  	<Function>
  		<name>opponentarray</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_opponentarray</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_opponentarray</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_opponentarray</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>opponentarray_size</name>
  		<replaceName>OpponentArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaUser& opponentarray(int index) const;
  inline ::pb::TArenaUser* mutable_opponentarray(int index);
  inline ::pb::TArenaUser* add_opponentarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >&
      opponentarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >*
      mutable_opponentarray();

  // repeated .pb.TArenaUser TopArray = 3;
  inline int toparray_size() const;
  inline void clear_toparray();
  static const int kTopArrayFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaUpdateArenaDataNotify</name>
  	<Function>
  		<name>toparray</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_toparray</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_toparray</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_toparray</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>toparray_size</name>
  		<replaceName>TopArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaUser& toparray(int index) const;
  inline ::pb::TArenaUser* mutable_toparray(int index);
  inline ::pb::TArenaUser* add_toparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >&
      toparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >*
      mutable_toparray();

  // @@protoc_insertion_point(class_scope:pb.TArenaUpdateArenaDataNotify)
 private:
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser > opponentarray_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser > toparray_;
  ::google::protobuf::uint32 position_;
  friend void  protobuf_AddDesc_net_2fArena_2eproto();
  friend void protobuf_AssignDesc_net_2fArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fArena_2eproto();

  void InitAsDefaultInstance();
  static TArenaUpdateArenaDataNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaExchangeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Arena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaExchangeReq : public ::google::protobuf::Message {
 public:
  TArenaExchangeReq();
  virtual ~TArenaExchangeReq();

  TArenaExchangeReq(const TArenaExchangeReq& from);

  inline TArenaExchangeReq& operator=(const TArenaExchangeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaExchangeReq& default_instance();

  void Swap(TArenaExchangeReq* other);

  // implements Message ----------------------------------------------

  TArenaExchangeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaExchangeReq& from);
  void MergeFrom(const TArenaExchangeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaExchangeReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaExchangeReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fArena_2eproto();
  friend void protobuf_AssignDesc_net_2fArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fArena_2eproto();

  void InitAsDefaultInstance();
  static TArenaExchangeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaExchangeRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Arena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaExchangeRsp : public ::google::protobuf::Message {
 public:
  TArenaExchangeRsp();
  virtual ~TArenaExchangeRsp();

  TArenaExchangeRsp(const TArenaExchangeRsp& from);

  inline TArenaExchangeRsp& operator=(const TArenaExchangeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaExchangeRsp& default_instance();

  void Swap(TArenaExchangeRsp* other);

  // implements Message ----------------------------------------------

  TArenaExchangeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaExchangeRsp& from);
  void MergeFrom(const TArenaExchangeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArray = 1;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaExchangeRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // @@protoc_insertion_point(class_scope:pb.TArenaExchangeRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  friend void  protobuf_AddDesc_net_2fArena_2eproto();
  friend void protobuf_AssignDesc_net_2fArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fArena_2eproto();

  void InitAsDefaultInstance();
  static TArenaExchangeRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaRecordInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Arena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaRecordInfo : public ::google::protobuf::Message {
 public:
  TArenaRecordInfo();
  virtual ~TArenaRecordInfo();

  TArenaRecordInfo(const TArenaRecordInfo& from);

  inline TArenaRecordInfo& operator=(const TArenaRecordInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaRecordInfo& default_instance();

  void Swap(TArenaRecordInfo* other);

  // implements Message ----------------------------------------------

  TArenaRecordInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaRecordInfo& from);
  void MergeFrom(const TArenaRecordInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo AttackUserInfo = 1;
  inline bool has_attackuserinfo() const;
  inline void clear_attackuserinfo();
  static const int kAttackUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaRecordInfo</name>
  	<Function>
  		<name>attackuserinfo</name>
  		<replaceName>AttackUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attackuserinfo</name>
  		<replaceName>AttackUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_attackuserinfo</name>
  		<replaceName>AttackUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attackuserinfo</name>
  		<replaceName>AttackUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& attackuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_attackuserinfo();
  inline ::pb::TUserSimpleInfo* release_attackuserinfo();
  inline void set_allocated_attackuserinfo(::pb::TUserSimpleInfo* attackuserinfo);

  // optional .pb.TUserSimpleInfo DefendUserInfo = 2;
  inline bool has_defenduserinfo() const;
  inline void clear_defenduserinfo();
  static const int kDefendUserInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArenaRecordInfo</name>
  	<Function>
  		<name>defenduserinfo</name>
  		<replaceName>DefendUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defenduserinfo</name>
  		<replaceName>DefendUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_defenduserinfo</name>
  		<replaceName>DefendUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defenduserinfo</name>
  		<replaceName>DefendUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& defenduserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_defenduserinfo();
  inline ::pb::TUserSimpleInfo* release_defenduserinfo();
  inline void set_allocated_defenduserinfo(::pb::TUserSimpleInfo* defenduserinfo);

  // optional uint32 AttackPos = 3;
  inline bool has_attackpos() const;
  inline void clear_attackpos();
  static const int kAttackPosFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArenaRecordInfo</name>
  	<Function>
  		<name>attackpos</name>
  		<replaceName>AttackPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attackpos</name>
  		<replaceName>AttackPos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attackpos</name>
  		<replaceName>AttackPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attackpos() const;
  inline void set_attackpos(::google::protobuf::uint32 value);

  // optional uint32 DefendPos = 4;
  inline bool has_defendpos() const;
  inline void clear_defendpos();
  static const int kDefendPosFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TArenaRecordInfo</name>
  	<Function>
  		<name>defendpos</name>
  		<replaceName>DefendPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defendpos</name>
  		<replaceName>DefendPos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defendpos</name>
  		<replaceName>DefendPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 defendpos() const;
  inline void set_defendpos(::google::protobuf::uint32 value);

  // optional bool IsWin = 5;
  inline bool has_iswin() const;
  inline void clear_iswin();
  static const int kIsWinFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TArenaRecordInfo</name>
  	<Function>
  		<name>iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool iswin() const;
  inline void set_iswin(bool value);

  // optional uint32 RecordId = 6;
  inline bool has_recordid() const;
  inline void clear_recordid();
  static const int kRecordIdFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TArenaRecordInfo</name>
  	<Function>
  		<name>recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 recordid() const;
  inline void set_recordid(::google::protobuf::uint32 value);

  // optional uint64 RecordTime = 7;
  inline bool has_recordtime() const;
  inline void clear_recordtime();
  static const int kRecordTimeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TArenaRecordInfo</name>
  	<Function>
  		<name>recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recordtime() const;
  inline void set_recordtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TArenaRecordInfo)
 private:
  inline void set_has_attackuserinfo();
  inline void clear_has_attackuserinfo();
  inline void set_has_defenduserinfo();
  inline void clear_has_defenduserinfo();
  inline void set_has_attackpos();
  inline void clear_has_attackpos();
  inline void set_has_defendpos();
  inline void clear_has_defendpos();
  inline void set_has_iswin();
  inline void clear_has_iswin();
  inline void set_has_recordid();
  inline void clear_has_recordid();
  inline void set_has_recordtime();
  inline void clear_has_recordtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* attackuserinfo_;
  ::pb::TUserSimpleInfo* defenduserinfo_;
  ::google::protobuf::uint32 attackpos_;
  ::google::protobuf::uint32 defendpos_;
  bool iswin_;
  ::google::protobuf::uint32 recordid_;
  ::google::protobuf::uint64 recordtime_;
  friend void  protobuf_AddDesc_net_2fArena_2eproto();
  friend void protobuf_AssignDesc_net_2fArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fArena_2eproto();

  void InitAsDefaultInstance();
  static TArenaRecordInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArenaGetTopRecordsRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Arena.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArenaGetTopRecordsRsp : public ::google::protobuf::Message {
 public:
  TArenaGetTopRecordsRsp();
  virtual ~TArenaGetTopRecordsRsp();

  TArenaGetTopRecordsRsp(const TArenaGetTopRecordsRsp& from);

  inline TArenaGetTopRecordsRsp& operator=(const TArenaGetTopRecordsRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArenaGetTopRecordsRsp& default_instance();

  void Swap(TArenaGetTopRecordsRsp* other);

  // implements Message ----------------------------------------------

  TArenaGetTopRecordsRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArenaGetTopRecordsRsp& from);
  void MergeFrom(const TArenaGetTopRecordsRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TArenaRecordInfo RecordArray = 1;
  inline int recordarray_size() const;
  inline void clear_recordarray();
  static const int kRecordArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArenaGetTopRecordsRsp</name>
  	<Function>
  		<name>recordarray</name>
  		<replaceName>RecordArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordarray</name>
  		<replaceName>RecordArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordarray</name>
  		<replaceName>RecordArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordarray</name>
  		<replaceName>RecordArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordarray_size</name>
  		<replaceName>RecordArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArenaRecordInfo& recordarray(int index) const;
  inline ::pb::TArenaRecordInfo* mutable_recordarray(int index);
  inline ::pb::TArenaRecordInfo* add_recordarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaRecordInfo >&
      recordarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaRecordInfo >*
      mutable_recordarray();

  // @@protoc_insertion_point(class_scope:pb.TArenaGetTopRecordsRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArenaRecordInfo > recordarray_;
  friend void  protobuf_AddDesc_net_2fArena_2eproto();
  friend void protobuf_AssignDesc_net_2fArena_2eproto();
  friend void protobuf_ShutdownFile_net_2fArena_2eproto();

  void InitAsDefaultInstance();
  static TArenaGetTopRecordsRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TArenaUser

// optional uint64 Uid = 1;
inline bool TArenaUser::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaUser::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaUser::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaUser::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TArenaUser::uid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaUser.Uid)
  return uid_;
}
inline void TArenaUser::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaUser.Uid)
}

// optional uint32 Position = 2;
inline bool TArenaUser::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaUser::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaUser::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaUser::clear_position() {
  position_ = 0u;
  clear_has_position();
}
inline ::google::protobuf::uint32 TArenaUser::position() const {
  // @@protoc_insertion_point(field_get:pb.TArenaUser.Position)
  return position_;
}
inline void TArenaUser::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaUser.Position)
}

// optional string Uname = 3;
inline bool TArenaUser::has_uname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TArenaUser::set_has_uname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TArenaUser::clear_has_uname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TArenaUser::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TArenaUser::uname() const {
  // @@protoc_insertion_point(field_get:pb.TArenaUser.Uname)
  return *uname_;
}
inline void TArenaUser::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TArenaUser.Uname)
}
inline void TArenaUser::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TArenaUser.Uname)
}
inline void TArenaUser::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TArenaUser.Uname)
}
inline ::std::string* TArenaUser::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TArenaUser.Uname)
  return uname_;
}
inline ::std::string* TArenaUser::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TArenaUser::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaUser.Uname)
}

// optional uint32 Level = 4;
inline bool TArenaUser::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TArenaUser::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TArenaUser::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TArenaUser::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TArenaUser::level() const {
  // @@protoc_insertion_point(field_get:pb.TArenaUser.Level)
  return level_;
}
inline void TArenaUser::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaUser.Level)
}

// optional uint64 FightForce = 5;
inline bool TArenaUser::has_fightforce() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TArenaUser::set_has_fightforce() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TArenaUser::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TArenaUser::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TArenaUser::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TArenaUser.FightForce)
  return fightforce_;
}
inline void TArenaUser::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaUser.FightForce)
}

// optional uint32 Htid = 6;
inline bool TArenaUser::has_htid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TArenaUser::set_has_htid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TArenaUser::clear_has_htid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TArenaUser::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TArenaUser::htid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaUser.Htid)
  return htid_;
}
inline void TArenaUser::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaUser.Htid)
}

// -------------------------------------------------------------------

// TArenaRankInfo

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TArenaRankInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaRankInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaRankInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaRankInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TArenaRankInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TArenaRankInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TArenaRankInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TArenaRankInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TArenaRankInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TArenaRankInfo::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaRankInfo.UserInfo)
}

// optional uint32 Position = 2;
inline bool TArenaRankInfo::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaRankInfo::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaRankInfo::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaRankInfo::clear_position() {
  position_ = 0u;
  clear_has_position();
}
inline ::google::protobuf::uint32 TArenaRankInfo::position() const {
  // @@protoc_insertion_point(field_get:pb.TArenaRankInfo.Position)
  return position_;
}
inline void TArenaRankInfo::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaRankInfo.Position)
}

// -------------------------------------------------------------------

// TArenaReport

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TArenaReport::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaReport::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaReport::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaReport::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TArenaReport::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TArenaReport.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TArenaReport::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TArenaReport.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TArenaReport::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TArenaReport::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaReport.UserInfo)
}

// optional bool IsWin = 2;
inline bool TArenaReport::has_iswin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaReport::set_has_iswin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaReport::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaReport::clear_iswin() {
  iswin_ = false;
  clear_has_iswin();
}
inline bool TArenaReport::iswin() const {
  // @@protoc_insertion_point(field_get:pb.TArenaReport.IsWin)
  return iswin_;
}
inline void TArenaReport::set_iswin(bool value) {
  set_has_iswin();
  iswin_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaReport.IsWin)
}

// optional uint32 ReportId = 3;
inline bool TArenaReport::has_reportid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TArenaReport::set_has_reportid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TArenaReport::clear_has_reportid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TArenaReport::clear_reportid() {
  reportid_ = 0u;
  clear_has_reportid();
}
inline ::google::protobuf::uint32 TArenaReport::reportid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaReport.ReportId)
  return reportid_;
}
inline void TArenaReport::set_reportid(::google::protobuf::uint32 value) {
  set_has_reportid();
  reportid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaReport.ReportId)
}

// optional bool IsAttack = 4;
inline bool TArenaReport::has_isattack() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TArenaReport::set_has_isattack() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TArenaReport::clear_has_isattack() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TArenaReport::clear_isattack() {
  isattack_ = false;
  clear_has_isattack();
}
inline bool TArenaReport::isattack() const {
  // @@protoc_insertion_point(field_get:pb.TArenaReport.IsAttack)
  return isattack_;
}
inline void TArenaReport::set_isattack(bool value) {
  set_has_isattack();
  isattack_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaReport.IsAttack)
}

// -------------------------------------------------------------------

// TArenaGetInfoRsp

// optional uint32 Position = 1;
inline bool TArenaGetInfoRsp::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaGetInfoRsp::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaGetInfoRsp::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaGetInfoRsp::clear_position() {
  position_ = 0u;
  clear_has_position();
}
inline ::google::protobuf::uint32 TArenaGetInfoRsp::position() const {
  // @@protoc_insertion_point(field_get:pb.TArenaGetInfoRsp.Position)
  return position_;
}
inline void TArenaGetInfoRsp::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaGetInfoRsp.Position)
}

// optional uint32 BestPosition = 2;
inline bool TArenaGetInfoRsp::has_bestposition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaGetInfoRsp::set_has_bestposition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaGetInfoRsp::clear_has_bestposition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaGetInfoRsp::clear_bestposition() {
  bestposition_ = 0u;
  clear_has_bestposition();
}
inline ::google::protobuf::uint32 TArenaGetInfoRsp::bestposition() const {
  // @@protoc_insertion_point(field_get:pb.TArenaGetInfoRsp.BestPosition)
  return bestposition_;
}
inline void TArenaGetInfoRsp::set_bestposition(::google::protobuf::uint32 value) {
  set_has_bestposition();
  bestposition_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaGetInfoRsp.BestPosition)
}

// optional uint32 ChallengeNum = 3;
inline bool TArenaGetInfoRsp::has_challengenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TArenaGetInfoRsp::set_has_challengenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TArenaGetInfoRsp::clear_has_challengenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TArenaGetInfoRsp::clear_challengenum() {
  challengenum_ = 0u;
  clear_has_challengenum();
}
inline ::google::protobuf::uint32 TArenaGetInfoRsp::challengenum() const {
  // @@protoc_insertion_point(field_get:pb.TArenaGetInfoRsp.ChallengeNum)
  return challengenum_;
}
inline void TArenaGetInfoRsp::set_challengenum(::google::protobuf::uint32 value) {
  set_has_challengenum();
  challengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaGetInfoRsp.ChallengeNum)
}

// optional uint32 BuyNum = 4;
inline bool TArenaGetInfoRsp::has_buynum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TArenaGetInfoRsp::set_has_buynum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TArenaGetInfoRsp::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TArenaGetInfoRsp::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 TArenaGetInfoRsp::buynum() const {
  // @@protoc_insertion_point(field_get:pb.TArenaGetInfoRsp.BuyNum)
  return buynum_;
}
inline void TArenaGetInfoRsp::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaGetInfoRsp.BuyNum)
}

// optional uint32 BuyChallengeNum = 5;
inline bool TArenaGetInfoRsp::has_buychallengenum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TArenaGetInfoRsp::set_has_buychallengenum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TArenaGetInfoRsp::clear_has_buychallengenum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TArenaGetInfoRsp::clear_buychallengenum() {
  buychallengenum_ = 0u;
  clear_has_buychallengenum();
}
inline ::google::protobuf::uint32 TArenaGetInfoRsp::buychallengenum() const {
  // @@protoc_insertion_point(field_get:pb.TArenaGetInfoRsp.BuyChallengeNum)
  return buychallengenum_;
}
inline void TArenaGetInfoRsp::set_buychallengenum(::google::protobuf::uint32 value) {
  set_has_buychallengenum();
  buychallengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaGetInfoRsp.BuyChallengeNum)
}

// optional uint32 RefreshNum = 6;
inline bool TArenaGetInfoRsp::has_refreshnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TArenaGetInfoRsp::set_has_refreshnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TArenaGetInfoRsp::clear_has_refreshnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TArenaGetInfoRsp::clear_refreshnum() {
  refreshnum_ = 0u;
  clear_has_refreshnum();
}
inline ::google::protobuf::uint32 TArenaGetInfoRsp::refreshnum() const {
  // @@protoc_insertion_point(field_get:pb.TArenaGetInfoRsp.RefreshNum)
  return refreshnum_;
}
inline void TArenaGetInfoRsp::set_refreshnum(::google::protobuf::uint32 value) {
  set_has_refreshnum();
  refreshnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaGetInfoRsp.RefreshNum)
}

// optional uint64 RewardTime = 7;
inline bool TArenaGetInfoRsp::has_rewardtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TArenaGetInfoRsp::set_has_rewardtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TArenaGetInfoRsp::clear_has_rewardtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TArenaGetInfoRsp::clear_rewardtime() {
  rewardtime_ = GOOGLE_ULONGLONG(0);
  clear_has_rewardtime();
}
inline ::google::protobuf::uint64 TArenaGetInfoRsp::rewardtime() const {
  // @@protoc_insertion_point(field_get:pb.TArenaGetInfoRsp.RewardTime)
  return rewardtime_;
}
inline void TArenaGetInfoRsp::set_rewardtime(::google::protobuf::uint64 value) {
  set_has_rewardtime();
  rewardtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaGetInfoRsp.RewardTime)
}

// repeated .pb.TArenaUser OpponentArray = 8;
inline int TArenaGetInfoRsp::opponentarray_size() const {
  return opponentarray_.size();
}
inline void TArenaGetInfoRsp::clear_opponentarray() {
  opponentarray_.Clear();
}
inline const ::pb::TArenaUser& TArenaGetInfoRsp::opponentarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaGetInfoRsp.OpponentArray)
  return opponentarray_.Get(index);
}
inline ::pb::TArenaUser* TArenaGetInfoRsp::mutable_opponentarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaGetInfoRsp.OpponentArray)
  return opponentarray_.Mutable(index);
}
inline ::pb::TArenaUser* TArenaGetInfoRsp::add_opponentarray() {
  // @@protoc_insertion_point(field_add:pb.TArenaGetInfoRsp.OpponentArray)
  return opponentarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >&
TArenaGetInfoRsp::opponentarray() const {
  // @@protoc_insertion_point(field_list:pb.TArenaGetInfoRsp.OpponentArray)
  return opponentarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >*
TArenaGetInfoRsp::mutable_opponentarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaGetInfoRsp.OpponentArray)
  return &opponentarray_;
}

// repeated .pb.TArenaUser TopArray = 9;
inline int TArenaGetInfoRsp::toparray_size() const {
  return toparray_.size();
}
inline void TArenaGetInfoRsp::clear_toparray() {
  toparray_.Clear();
}
inline const ::pb::TArenaUser& TArenaGetInfoRsp::toparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaGetInfoRsp.TopArray)
  return toparray_.Get(index);
}
inline ::pb::TArenaUser* TArenaGetInfoRsp::mutable_toparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaGetInfoRsp.TopArray)
  return toparray_.Mutable(index);
}
inline ::pb::TArenaUser* TArenaGetInfoRsp::add_toparray() {
  // @@protoc_insertion_point(field_add:pb.TArenaGetInfoRsp.TopArray)
  return toparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >&
TArenaGetInfoRsp::toparray() const {
  // @@protoc_insertion_point(field_list:pb.TArenaGetInfoRsp.TopArray)
  return toparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >*
TArenaGetInfoRsp::mutable_toparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaGetInfoRsp.TopArray)
  return &toparray_;
}

// optional uint32 ChallengeTotal = 10;
inline bool TArenaGetInfoRsp::has_challengetotal() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TArenaGetInfoRsp::set_has_challengetotal() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TArenaGetInfoRsp::clear_has_challengetotal() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TArenaGetInfoRsp::clear_challengetotal() {
  challengetotal_ = 0u;
  clear_has_challengetotal();
}
inline ::google::protobuf::uint32 TArenaGetInfoRsp::challengetotal() const {
  // @@protoc_insertion_point(field_get:pb.TArenaGetInfoRsp.ChallengeTotal)
  return challengetotal_;
}
inline void TArenaGetInfoRsp::set_challengetotal(::google::protobuf::uint32 value) {
  set_has_challengetotal();
  challengetotal_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaGetInfoRsp.ChallengeTotal)
}

// optional uint32 WinTotal = 11;
inline bool TArenaGetInfoRsp::has_wintotal() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TArenaGetInfoRsp::set_has_wintotal() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TArenaGetInfoRsp::clear_has_wintotal() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TArenaGetInfoRsp::clear_wintotal() {
  wintotal_ = 0u;
  clear_has_wintotal();
}
inline ::google::protobuf::uint32 TArenaGetInfoRsp::wintotal() const {
  // @@protoc_insertion_point(field_get:pb.TArenaGetInfoRsp.WinTotal)
  return wintotal_;
}
inline void TArenaGetInfoRsp::set_wintotal(::google::protobuf::uint32 value) {
  set_has_wintotal();
  wintotal_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaGetInfoRsp.WinTotal)
}

// repeated uint32 BuyArray = 12;
inline int TArenaGetInfoRsp::buyarray_size() const {
  return buyarray_.size();
}
inline void TArenaGetInfoRsp::clear_buyarray() {
  buyarray_.Clear();
}
inline ::google::protobuf::uint32 TArenaGetInfoRsp::buyarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaGetInfoRsp.BuyArray)
  return buyarray_.Get(index);
}
inline void TArenaGetInfoRsp::set_buyarray(int index, ::google::protobuf::uint32 value) {
  buyarray_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TArenaGetInfoRsp.BuyArray)
}
inline void TArenaGetInfoRsp::add_buyarray(::google::protobuf::uint32 value) {
  buyarray_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TArenaGetInfoRsp.BuyArray)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TArenaGetInfoRsp::buyarray() const {
  // @@protoc_insertion_point(field_list:pb.TArenaGetInfoRsp.BuyArray)
  return buyarray_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TArenaGetInfoRsp::mutable_buyarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaGetInfoRsp.BuyArray)
  return &buyarray_;
}

// -------------------------------------------------------------------

// TArenaGetRankListReq

// optional uint32 Offset = 1;
inline bool TArenaGetRankListReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaGetRankListReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaGetRankListReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaGetRankListReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TArenaGetRankListReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TArenaGetRankListReq.Offset)
  return offset_;
}
inline void TArenaGetRankListReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaGetRankListReq.Offset)
}

// optional uint32 Limit = 2;
inline bool TArenaGetRankListReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaGetRankListReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaGetRankListReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaGetRankListReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TArenaGetRankListReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TArenaGetRankListReq.Limit)
  return limit_;
}
inline void TArenaGetRankListReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaGetRankListReq.Limit)
}

// -------------------------------------------------------------------

// TArenaGetRankListRsp

// repeated .pb.TArenaRankInfo RankArr = 1;
inline int TArenaGetRankListRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TArenaGetRankListRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TArenaRankInfo& TArenaGetRankListRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaGetRankListRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TArenaRankInfo* TArenaGetRankListRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaGetRankListRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TArenaRankInfo* TArenaGetRankListRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TArenaGetRankListRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaRankInfo >&
TArenaGetRankListRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaGetRankListRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaRankInfo >*
TArenaGetRankListRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaGetRankListRsp.RankArr)
  return &rankarr_;
}

// optional int32 MyRank = 2;
inline bool TArenaGetRankListRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaGetRankListRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaGetRankListRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaGetRankListRsp::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 TArenaGetRankListRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TArenaGetRankListRsp.MyRank)
  return myrank_;
}
inline void TArenaGetRankListRsp::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaGetRankListRsp.MyRank)
}

// -------------------------------------------------------------------

// TArenaGetBattleReportsRsp

// repeated .pb.TArenaReport ReportArray = 1;
inline int TArenaGetBattleReportsRsp::reportarray_size() const {
  return reportarray_.size();
}
inline void TArenaGetBattleReportsRsp::clear_reportarray() {
  reportarray_.Clear();
}
inline const ::pb::TArenaReport& TArenaGetBattleReportsRsp::reportarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaGetBattleReportsRsp.ReportArray)
  return reportarray_.Get(index);
}
inline ::pb::TArenaReport* TArenaGetBattleReportsRsp::mutable_reportarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaGetBattleReportsRsp.ReportArray)
  return reportarray_.Mutable(index);
}
inline ::pb::TArenaReport* TArenaGetBattleReportsRsp::add_reportarray() {
  // @@protoc_insertion_point(field_add:pb.TArenaGetBattleReportsRsp.ReportArray)
  return reportarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaReport >&
TArenaGetBattleReportsRsp::reportarray() const {
  // @@protoc_insertion_point(field_list:pb.TArenaGetBattleReportsRsp.ReportArray)
  return reportarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaReport >*
TArenaGetBattleReportsRsp::mutable_reportarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaGetBattleReportsRsp.ReportArray)
  return &reportarray_;
}

// -------------------------------------------------------------------

// TArenaRefreshPlayerListRsp

// repeated .pb.TArenaUser OpponentArray = 1;
inline int TArenaRefreshPlayerListRsp::opponentarray_size() const {
  return opponentarray_.size();
}
inline void TArenaRefreshPlayerListRsp::clear_opponentarray() {
  opponentarray_.Clear();
}
inline const ::pb::TArenaUser& TArenaRefreshPlayerListRsp::opponentarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaRefreshPlayerListRsp.OpponentArray)
  return opponentarray_.Get(index);
}
inline ::pb::TArenaUser* TArenaRefreshPlayerListRsp::mutable_opponentarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaRefreshPlayerListRsp.OpponentArray)
  return opponentarray_.Mutable(index);
}
inline ::pb::TArenaUser* TArenaRefreshPlayerListRsp::add_opponentarray() {
  // @@protoc_insertion_point(field_add:pb.TArenaRefreshPlayerListRsp.OpponentArray)
  return opponentarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >&
TArenaRefreshPlayerListRsp::opponentarray() const {
  // @@protoc_insertion_point(field_list:pb.TArenaRefreshPlayerListRsp.OpponentArray)
  return opponentarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >*
TArenaRefreshPlayerListRsp::mutable_opponentarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaRefreshPlayerListRsp.OpponentArray)
  return &opponentarray_;
}

// repeated .pb.TArenaUser TopArray = 2;
inline int TArenaRefreshPlayerListRsp::toparray_size() const {
  return toparray_.size();
}
inline void TArenaRefreshPlayerListRsp::clear_toparray() {
  toparray_.Clear();
}
inline const ::pb::TArenaUser& TArenaRefreshPlayerListRsp::toparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaRefreshPlayerListRsp.TopArray)
  return toparray_.Get(index);
}
inline ::pb::TArenaUser* TArenaRefreshPlayerListRsp::mutable_toparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaRefreshPlayerListRsp.TopArray)
  return toparray_.Mutable(index);
}
inline ::pb::TArenaUser* TArenaRefreshPlayerListRsp::add_toparray() {
  // @@protoc_insertion_point(field_add:pb.TArenaRefreshPlayerListRsp.TopArray)
  return toparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >&
TArenaRefreshPlayerListRsp::toparray() const {
  // @@protoc_insertion_point(field_list:pb.TArenaRefreshPlayerListRsp.TopArray)
  return toparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >*
TArenaRefreshPlayerListRsp::mutable_toparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaRefreshPlayerListRsp.TopArray)
  return &toparray_;
}

// -------------------------------------------------------------------

// TArenaChallengeReq

// optional uint32 AttackPos = 1;
inline bool TArenaChallengeReq::has_attackpos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaChallengeReq::set_has_attackpos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaChallengeReq::clear_has_attackpos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaChallengeReq::clear_attackpos() {
  attackpos_ = 0u;
  clear_has_attackpos();
}
inline ::google::protobuf::uint32 TArenaChallengeReq::attackpos() const {
  // @@protoc_insertion_point(field_get:pb.TArenaChallengeReq.AttackPos)
  return attackpos_;
}
inline void TArenaChallengeReq::set_attackpos(::google::protobuf::uint32 value) {
  set_has_attackpos();
  attackpos_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaChallengeReq.AttackPos)
}

// optional uint32 DefendPos = 2;
inline bool TArenaChallengeReq::has_defendpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaChallengeReq::set_has_defendpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaChallengeReq::clear_has_defendpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaChallengeReq::clear_defendpos() {
  defendpos_ = 0u;
  clear_has_defendpos();
}
inline ::google::protobuf::uint32 TArenaChallengeReq::defendpos() const {
  // @@protoc_insertion_point(field_get:pb.TArenaChallengeReq.DefendPos)
  return defendpos_;
}
inline void TArenaChallengeReq::set_defendpos(::google::protobuf::uint32 value) {
  set_has_defendpos();
  defendpos_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaChallengeReq.DefendPos)
}

// optional uint64 DefendUid = 3;
inline bool TArenaChallengeReq::has_defenduid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TArenaChallengeReq::set_has_defenduid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TArenaChallengeReq::clear_has_defenduid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TArenaChallengeReq::clear_defenduid() {
  defenduid_ = GOOGLE_ULONGLONG(0);
  clear_has_defenduid();
}
inline ::google::protobuf::uint64 TArenaChallengeReq::defenduid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaChallengeReq.DefendUid)
  return defenduid_;
}
inline void TArenaChallengeReq::set_defenduid(::google::protobuf::uint64 value) {
  set_has_defenduid();
  defenduid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaChallengeReq.DefendUid)
}

// repeated uint32 HidArray = 4;
inline int TArenaChallengeReq::hidarray_size() const {
  return hidarray_.size();
}
inline void TArenaChallengeReq::clear_hidarray() {
  hidarray_.Clear();
}
inline ::google::protobuf::uint32 TArenaChallengeReq::hidarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaChallengeReq.HidArray)
  return hidarray_.Get(index);
}
inline void TArenaChallengeReq::set_hidarray(int index, ::google::protobuf::uint32 value) {
  hidarray_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TArenaChallengeReq.HidArray)
}
inline void TArenaChallengeReq::add_hidarray(::google::protobuf::uint32 value) {
  hidarray_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TArenaChallengeReq.HidArray)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TArenaChallengeReq::hidarray() const {
  // @@protoc_insertion_point(field_list:pb.TArenaChallengeReq.HidArray)
  return hidarray_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TArenaChallengeReq::mutable_hidarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaChallengeReq.HidArray)
  return &hidarray_;
}

// -------------------------------------------------------------------

// TArenaChallengeRsp

// optional bool RefreshOppt = 1;
inline bool TArenaChallengeRsp::has_refreshoppt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaChallengeRsp::set_has_refreshoppt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaChallengeRsp::clear_has_refreshoppt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaChallengeRsp::clear_refreshoppt() {
  refreshoppt_ = false;
  clear_has_refreshoppt();
}
inline bool TArenaChallengeRsp::refreshoppt() const {
  // @@protoc_insertion_point(field_get:pb.TArenaChallengeRsp.RefreshOppt)
  return refreshoppt_;
}
inline void TArenaChallengeRsp::set_refreshoppt(bool value) {
  set_has_refreshoppt();
  refreshoppt_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaChallengeRsp.RefreshOppt)
}

// optional uint32 Position = 2;
inline bool TArenaChallengeRsp::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaChallengeRsp::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaChallengeRsp::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaChallengeRsp::clear_position() {
  position_ = 0u;
  clear_has_position();
}
inline ::google::protobuf::uint32 TArenaChallengeRsp::position() const {
  // @@protoc_insertion_point(field_get:pb.TArenaChallengeRsp.Position)
  return position_;
}
inline void TArenaChallengeRsp::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaChallengeRsp.Position)
}

// optional bool IsWin = 3;
inline bool TArenaChallengeRsp::has_iswin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TArenaChallengeRsp::set_has_iswin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TArenaChallengeRsp::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TArenaChallengeRsp::clear_iswin() {
  iswin_ = false;
  clear_has_iswin();
}
inline bool TArenaChallengeRsp::iswin() const {
  // @@protoc_insertion_point(field_get:pb.TArenaChallengeRsp.IsWin)
  return iswin_;
}
inline void TArenaChallengeRsp::set_iswin(bool value) {
  set_has_iswin();
  iswin_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaChallengeRsp.IsWin)
}

// optional .pb.TBattleResult FightRet = 4;
inline bool TArenaChallengeRsp::has_fightret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TArenaChallengeRsp::set_has_fightret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TArenaChallengeRsp::clear_has_fightret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TArenaChallengeRsp::clear_fightret() {
  if (fightret_ != NULL) fightret_->::pb::TBattleResult::Clear();
  clear_has_fightret();
}
inline const ::pb::TBattleResult& TArenaChallengeRsp::fightret() const {
  // @@protoc_insertion_point(field_get:pb.TArenaChallengeRsp.FightRet)
  return fightret_ != NULL ? *fightret_ : *default_instance_->fightret_;
}
inline ::pb::TBattleResult* TArenaChallengeRsp::mutable_fightret() {
  set_has_fightret();
  if (fightret_ == NULL) fightret_ = new ::pb::TBattleResult;
  // @@protoc_insertion_point(field_mutable:pb.TArenaChallengeRsp.FightRet)
  return fightret_;
}
inline ::pb::TBattleResult* TArenaChallengeRsp::release_fightret() {
  clear_has_fightret();
  ::pb::TBattleResult* temp = fightret_;
  fightret_ = NULL;
  return temp;
}
inline void TArenaChallengeRsp::set_allocated_fightret(::pb::TBattleResult* fightret) {
  delete fightret_;
  fightret_ = fightret;
  if (fightret) {
    set_has_fightret();
  } else {
    clear_has_fightret();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaChallengeRsp.FightRet)
}

// repeated .pb.TArenaUser TopArray = 5;
inline int TArenaChallengeRsp::toparray_size() const {
  return toparray_.size();
}
inline void TArenaChallengeRsp::clear_toparray() {
  toparray_.Clear();
}
inline const ::pb::TArenaUser& TArenaChallengeRsp::toparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaChallengeRsp.TopArray)
  return toparray_.Get(index);
}
inline ::pb::TArenaUser* TArenaChallengeRsp::mutable_toparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaChallengeRsp.TopArray)
  return toparray_.Mutable(index);
}
inline ::pb::TArenaUser* TArenaChallengeRsp::add_toparray() {
  // @@protoc_insertion_point(field_add:pb.TArenaChallengeRsp.TopArray)
  return toparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >&
TArenaChallengeRsp::toparray() const {
  // @@protoc_insertion_point(field_list:pb.TArenaChallengeRsp.TopArray)
  return toparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >*
TArenaChallengeRsp::mutable_toparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaChallengeRsp.TopArray)
  return &toparray_;
}

// repeated .pb.TArenaUser OpponentArray = 6;
inline int TArenaChallengeRsp::opponentarray_size() const {
  return opponentarray_.size();
}
inline void TArenaChallengeRsp::clear_opponentarray() {
  opponentarray_.Clear();
}
inline const ::pb::TArenaUser& TArenaChallengeRsp::opponentarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaChallengeRsp.OpponentArray)
  return opponentarray_.Get(index);
}
inline ::pb::TArenaUser* TArenaChallengeRsp::mutable_opponentarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaChallengeRsp.OpponentArray)
  return opponentarray_.Mutable(index);
}
inline ::pb::TArenaUser* TArenaChallengeRsp::add_opponentarray() {
  // @@protoc_insertion_point(field_add:pb.TArenaChallengeRsp.OpponentArray)
  return opponentarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >&
TArenaChallengeRsp::opponentarray() const {
  // @@protoc_insertion_point(field_list:pb.TArenaChallengeRsp.OpponentArray)
  return opponentarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >*
TArenaChallengeRsp::mutable_opponentarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaChallengeRsp.OpponentArray)
  return &opponentarray_;
}

// optional uint32 BreakoutReward = 7;
inline bool TArenaChallengeRsp::has_breakoutreward() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TArenaChallengeRsp::set_has_breakoutreward() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TArenaChallengeRsp::clear_has_breakoutreward() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TArenaChallengeRsp::clear_breakoutreward() {
  breakoutreward_ = 0u;
  clear_has_breakoutreward();
}
inline ::google::protobuf::uint32 TArenaChallengeRsp::breakoutreward() const {
  // @@protoc_insertion_point(field_get:pb.TArenaChallengeRsp.BreakoutReward)
  return breakoutreward_;
}
inline void TArenaChallengeRsp::set_breakoutreward(::google::protobuf::uint32 value) {
  set_has_breakoutreward();
  breakoutreward_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaChallengeRsp.BreakoutReward)
}

// optional uint32 UserExp = 8;
inline bool TArenaChallengeRsp::has_userexp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TArenaChallengeRsp::set_has_userexp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TArenaChallengeRsp::clear_has_userexp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TArenaChallengeRsp::clear_userexp() {
  userexp_ = 0u;
  clear_has_userexp();
}
inline ::google::protobuf::uint32 TArenaChallengeRsp::userexp() const {
  // @@protoc_insertion_point(field_get:pb.TArenaChallengeRsp.UserExp)
  return userexp_;
}
inline void TArenaChallengeRsp::set_userexp(::google::protobuf::uint32 value) {
  set_has_userexp();
  userexp_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaChallengeRsp.UserExp)
}

// repeated .pb.TCommonReward CoinReward = 9;
inline int TArenaChallengeRsp::coinreward_size() const {
  return coinreward_.size();
}
inline void TArenaChallengeRsp::clear_coinreward() {
  coinreward_.Clear();
}
inline const ::pb::TCommonReward& TArenaChallengeRsp::coinreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaChallengeRsp.CoinReward)
  return coinreward_.Get(index);
}
inline ::pb::TCommonReward* TArenaChallengeRsp::mutable_coinreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaChallengeRsp.CoinReward)
  return coinreward_.Mutable(index);
}
inline ::pb::TCommonReward* TArenaChallengeRsp::add_coinreward() {
  // @@protoc_insertion_point(field_add:pb.TArenaChallengeRsp.CoinReward)
  return coinreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TArenaChallengeRsp::coinreward() const {
  // @@protoc_insertion_point(field_list:pb.TArenaChallengeRsp.CoinReward)
  return coinreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TArenaChallengeRsp::mutable_coinreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaChallengeRsp.CoinReward)
  return &coinreward_;
}

// repeated .pb.TCommonReward FlopReward = 10;
inline int TArenaChallengeRsp::flopreward_size() const {
  return flopreward_.size();
}
inline void TArenaChallengeRsp::clear_flopreward() {
  flopreward_.Clear();
}
inline const ::pb::TCommonReward& TArenaChallengeRsp::flopreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaChallengeRsp.FlopReward)
  return flopreward_.Get(index);
}
inline ::pb::TCommonReward* TArenaChallengeRsp::mutable_flopreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaChallengeRsp.FlopReward)
  return flopreward_.Mutable(index);
}
inline ::pb::TCommonReward* TArenaChallengeRsp::add_flopreward() {
  // @@protoc_insertion_point(field_add:pb.TArenaChallengeRsp.FlopReward)
  return flopreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TArenaChallengeRsp::flopreward() const {
  // @@protoc_insertion_point(field_list:pb.TArenaChallengeRsp.FlopReward)
  return flopreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TArenaChallengeRsp::mutable_flopreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaChallengeRsp.FlopReward)
  return &flopreward_;
}

// -------------------------------------------------------------------

// TArenaQuickChallengeReq

// optional uint32 AttackPos = 1;
inline bool TArenaQuickChallengeReq::has_attackpos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaQuickChallengeReq::set_has_attackpos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaQuickChallengeReq::clear_has_attackpos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaQuickChallengeReq::clear_attackpos() {
  attackpos_ = 0u;
  clear_has_attackpos();
}
inline ::google::protobuf::uint32 TArenaQuickChallengeReq::attackpos() const {
  // @@protoc_insertion_point(field_get:pb.TArenaQuickChallengeReq.AttackPos)
  return attackpos_;
}
inline void TArenaQuickChallengeReq::set_attackpos(::google::protobuf::uint32 value) {
  set_has_attackpos();
  attackpos_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaQuickChallengeReq.AttackPos)
}

// optional uint32 DefendPos = 2;
inline bool TArenaQuickChallengeReq::has_defendpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaQuickChallengeReq::set_has_defendpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaQuickChallengeReq::clear_has_defendpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaQuickChallengeReq::clear_defendpos() {
  defendpos_ = 0u;
  clear_has_defendpos();
}
inline ::google::protobuf::uint32 TArenaQuickChallengeReq::defendpos() const {
  // @@protoc_insertion_point(field_get:pb.TArenaQuickChallengeReq.DefendPos)
  return defendpos_;
}
inline void TArenaQuickChallengeReq::set_defendpos(::google::protobuf::uint32 value) {
  set_has_defendpos();
  defendpos_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaQuickChallengeReq.DefendPos)
}

// optional uint64 DefendUid = 3;
inline bool TArenaQuickChallengeReq::has_defenduid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TArenaQuickChallengeReq::set_has_defenduid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TArenaQuickChallengeReq::clear_has_defenduid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TArenaQuickChallengeReq::clear_defenduid() {
  defenduid_ = GOOGLE_ULONGLONG(0);
  clear_has_defenduid();
}
inline ::google::protobuf::uint64 TArenaQuickChallengeReq::defenduid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaQuickChallengeReq.DefendUid)
  return defenduid_;
}
inline void TArenaQuickChallengeReq::set_defenduid(::google::protobuf::uint64 value) {
  set_has_defenduid();
  defenduid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaQuickChallengeReq.DefendUid)
}

// optional uint32 Num = 4;
inline bool TArenaQuickChallengeReq::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TArenaQuickChallengeReq::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TArenaQuickChallengeReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TArenaQuickChallengeReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TArenaQuickChallengeReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TArenaQuickChallengeReq.Num)
  return num_;
}
inline void TArenaQuickChallengeReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaQuickChallengeReq.Num)
}

// -------------------------------------------------------------------

// TArenaQuickChallengeReward

// optional uint32 UserExp = 1;
inline bool TArenaQuickChallengeReward::has_userexp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaQuickChallengeReward::set_has_userexp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaQuickChallengeReward::clear_has_userexp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaQuickChallengeReward::clear_userexp() {
  userexp_ = 0u;
  clear_has_userexp();
}
inline ::google::protobuf::uint32 TArenaQuickChallengeReward::userexp() const {
  // @@protoc_insertion_point(field_get:pb.TArenaQuickChallengeReward.UserExp)
  return userexp_;
}
inline void TArenaQuickChallengeReward::set_userexp(::google::protobuf::uint32 value) {
  set_has_userexp();
  userexp_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaQuickChallengeReward.UserExp)
}

// repeated .pb.TCommonReward CoinReward = 2;
inline int TArenaQuickChallengeReward::coinreward_size() const {
  return coinreward_.size();
}
inline void TArenaQuickChallengeReward::clear_coinreward() {
  coinreward_.Clear();
}
inline const ::pb::TCommonReward& TArenaQuickChallengeReward::coinreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaQuickChallengeReward.CoinReward)
  return coinreward_.Get(index);
}
inline ::pb::TCommonReward* TArenaQuickChallengeReward::mutable_coinreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaQuickChallengeReward.CoinReward)
  return coinreward_.Mutable(index);
}
inline ::pb::TCommonReward* TArenaQuickChallengeReward::add_coinreward() {
  // @@protoc_insertion_point(field_add:pb.TArenaQuickChallengeReward.CoinReward)
  return coinreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TArenaQuickChallengeReward::coinreward() const {
  // @@protoc_insertion_point(field_list:pb.TArenaQuickChallengeReward.CoinReward)
  return coinreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TArenaQuickChallengeReward::mutable_coinreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaQuickChallengeReward.CoinReward)
  return &coinreward_;
}

// repeated .pb.TCommonReward FlopReward = 3;
inline int TArenaQuickChallengeReward::flopreward_size() const {
  return flopreward_.size();
}
inline void TArenaQuickChallengeReward::clear_flopreward() {
  flopreward_.Clear();
}
inline const ::pb::TCommonReward& TArenaQuickChallengeReward::flopreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaQuickChallengeReward.FlopReward)
  return flopreward_.Get(index);
}
inline ::pb::TCommonReward* TArenaQuickChallengeReward::mutable_flopreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaQuickChallengeReward.FlopReward)
  return flopreward_.Mutable(index);
}
inline ::pb::TCommonReward* TArenaQuickChallengeReward::add_flopreward() {
  // @@protoc_insertion_point(field_add:pb.TArenaQuickChallengeReward.FlopReward)
  return flopreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TArenaQuickChallengeReward::flopreward() const {
  // @@protoc_insertion_point(field_list:pb.TArenaQuickChallengeReward.FlopReward)
  return flopreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TArenaQuickChallengeReward::mutable_flopreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaQuickChallengeReward.FlopReward)
  return &flopreward_;
}

// -------------------------------------------------------------------

// TArenaQuickChallengeRsp

// optional bool RefreshOppt = 1;
inline bool TArenaQuickChallengeRsp::has_refreshoppt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaQuickChallengeRsp::set_has_refreshoppt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaQuickChallengeRsp::clear_has_refreshoppt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaQuickChallengeRsp::clear_refreshoppt() {
  refreshoppt_ = false;
  clear_has_refreshoppt();
}
inline bool TArenaQuickChallengeRsp::refreshoppt() const {
  // @@protoc_insertion_point(field_get:pb.TArenaQuickChallengeRsp.RefreshOppt)
  return refreshoppt_;
}
inline void TArenaQuickChallengeRsp::set_refreshoppt(bool value) {
  set_has_refreshoppt();
  refreshoppt_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaQuickChallengeRsp.RefreshOppt)
}

// optional uint32 Position = 2;
inline bool TArenaQuickChallengeRsp::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaQuickChallengeRsp::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaQuickChallengeRsp::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaQuickChallengeRsp::clear_position() {
  position_ = 0u;
  clear_has_position();
}
inline ::google::protobuf::uint32 TArenaQuickChallengeRsp::position() const {
  // @@protoc_insertion_point(field_get:pb.TArenaQuickChallengeRsp.Position)
  return position_;
}
inline void TArenaQuickChallengeRsp::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaQuickChallengeRsp.Position)
}

// repeated .pb.TArenaUser OpponentArray = 3;
inline int TArenaQuickChallengeRsp::opponentarray_size() const {
  return opponentarray_.size();
}
inline void TArenaQuickChallengeRsp::clear_opponentarray() {
  opponentarray_.Clear();
}
inline const ::pb::TArenaUser& TArenaQuickChallengeRsp::opponentarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaQuickChallengeRsp.OpponentArray)
  return opponentarray_.Get(index);
}
inline ::pb::TArenaUser* TArenaQuickChallengeRsp::mutable_opponentarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaQuickChallengeRsp.OpponentArray)
  return opponentarray_.Mutable(index);
}
inline ::pb::TArenaUser* TArenaQuickChallengeRsp::add_opponentarray() {
  // @@protoc_insertion_point(field_add:pb.TArenaQuickChallengeRsp.OpponentArray)
  return opponentarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >&
TArenaQuickChallengeRsp::opponentarray() const {
  // @@protoc_insertion_point(field_list:pb.TArenaQuickChallengeRsp.OpponentArray)
  return opponentarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >*
TArenaQuickChallengeRsp::mutable_opponentarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaQuickChallengeRsp.OpponentArray)
  return &opponentarray_;
}

// repeated .pb.TArenaUser TopArray = 4;
inline int TArenaQuickChallengeRsp::toparray_size() const {
  return toparray_.size();
}
inline void TArenaQuickChallengeRsp::clear_toparray() {
  toparray_.Clear();
}
inline const ::pb::TArenaUser& TArenaQuickChallengeRsp::toparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaQuickChallengeRsp.TopArray)
  return toparray_.Get(index);
}
inline ::pb::TArenaUser* TArenaQuickChallengeRsp::mutable_toparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaQuickChallengeRsp.TopArray)
  return toparray_.Mutable(index);
}
inline ::pb::TArenaUser* TArenaQuickChallengeRsp::add_toparray() {
  // @@protoc_insertion_point(field_add:pb.TArenaQuickChallengeRsp.TopArray)
  return toparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >&
TArenaQuickChallengeRsp::toparray() const {
  // @@protoc_insertion_point(field_list:pb.TArenaQuickChallengeRsp.TopArray)
  return toparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >*
TArenaQuickChallengeRsp::mutable_toparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaQuickChallengeRsp.TopArray)
  return &toparray_;
}

// repeated .pb.TArenaQuickChallengeReward RewardArr = 5;
inline int TArenaQuickChallengeRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TArenaQuickChallengeRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TArenaQuickChallengeReward& TArenaQuickChallengeRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaQuickChallengeRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TArenaQuickChallengeReward* TArenaQuickChallengeRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaQuickChallengeRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TArenaQuickChallengeReward* TArenaQuickChallengeRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TArenaQuickChallengeRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaQuickChallengeReward >&
TArenaQuickChallengeRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TArenaQuickChallengeRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaQuickChallengeReward >*
TArenaQuickChallengeRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaQuickChallengeRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TArenaRevengeReq

// optional uint64 EnemyUid = 1;
inline bool TArenaRevengeReq::has_enemyuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaRevengeReq::set_has_enemyuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaRevengeReq::clear_has_enemyuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaRevengeReq::clear_enemyuid() {
  enemyuid_ = GOOGLE_ULONGLONG(0);
  clear_has_enemyuid();
}
inline ::google::protobuf::uint64 TArenaRevengeReq::enemyuid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaRevengeReq.EnemyUid)
  return enemyuid_;
}
inline void TArenaRevengeReq::set_enemyuid(::google::protobuf::uint64 value) {
  set_has_enemyuid();
  enemyuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaRevengeReq.EnemyUid)
}

// repeated uint32 HidArray = 2;
inline int TArenaRevengeReq::hidarray_size() const {
  return hidarray_.size();
}
inline void TArenaRevengeReq::clear_hidarray() {
  hidarray_.Clear();
}
inline ::google::protobuf::uint32 TArenaRevengeReq::hidarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaRevengeReq.HidArray)
  return hidarray_.Get(index);
}
inline void TArenaRevengeReq::set_hidarray(int index, ::google::protobuf::uint32 value) {
  hidarray_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TArenaRevengeReq.HidArray)
}
inline void TArenaRevengeReq::add_hidarray(::google::protobuf::uint32 value) {
  hidarray_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TArenaRevengeReq.HidArray)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TArenaRevengeReq::hidarray() const {
  // @@protoc_insertion_point(field_list:pb.TArenaRevengeReq.HidArray)
  return hidarray_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TArenaRevengeReq::mutable_hidarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaRevengeReq.HidArray)
  return &hidarray_;
}

// -------------------------------------------------------------------

// TArenaRevengeRsp

// optional uint32 AttackPos = 1;
inline bool TArenaRevengeRsp::has_attackpos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaRevengeRsp::set_has_attackpos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaRevengeRsp::clear_has_attackpos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaRevengeRsp::clear_attackpos() {
  attackpos_ = 0u;
  clear_has_attackpos();
}
inline ::google::protobuf::uint32 TArenaRevengeRsp::attackpos() const {
  // @@protoc_insertion_point(field_get:pb.TArenaRevengeRsp.AttackPos)
  return attackpos_;
}
inline void TArenaRevengeRsp::set_attackpos(::google::protobuf::uint32 value) {
  set_has_attackpos();
  attackpos_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaRevengeRsp.AttackPos)
}

// optional uint32 EnemyPos = 2;
inline bool TArenaRevengeRsp::has_enemypos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaRevengeRsp::set_has_enemypos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaRevengeRsp::clear_has_enemypos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaRevengeRsp::clear_enemypos() {
  enemypos_ = 0u;
  clear_has_enemypos();
}
inline ::google::protobuf::uint32 TArenaRevengeRsp::enemypos() const {
  // @@protoc_insertion_point(field_get:pb.TArenaRevengeRsp.EnemyPos)
  return enemypos_;
}
inline void TArenaRevengeRsp::set_enemypos(::google::protobuf::uint32 value) {
  set_has_enemypos();
  enemypos_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaRevengeRsp.EnemyPos)
}

// optional uint64 EnemyUid = 3;
inline bool TArenaRevengeRsp::has_enemyuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TArenaRevengeRsp::set_has_enemyuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TArenaRevengeRsp::clear_has_enemyuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TArenaRevengeRsp::clear_enemyuid() {
  enemyuid_ = GOOGLE_ULONGLONG(0);
  clear_has_enemyuid();
}
inline ::google::protobuf::uint64 TArenaRevengeRsp::enemyuid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaRevengeRsp.EnemyUid)
  return enemyuid_;
}
inline void TArenaRevengeRsp::set_enemyuid(::google::protobuf::uint64 value) {
  set_has_enemyuid();
  enemyuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaRevengeRsp.EnemyUid)
}

// optional .pb.TArenaChallengeRsp ChallengeRsp = 4;
inline bool TArenaRevengeRsp::has_challengersp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TArenaRevengeRsp::set_has_challengersp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TArenaRevengeRsp::clear_has_challengersp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TArenaRevengeRsp::clear_challengersp() {
  if (challengersp_ != NULL) challengersp_->::pb::TArenaChallengeRsp::Clear();
  clear_has_challengersp();
}
inline const ::pb::TArenaChallengeRsp& TArenaRevengeRsp::challengersp() const {
  // @@protoc_insertion_point(field_get:pb.TArenaRevengeRsp.ChallengeRsp)
  return challengersp_ != NULL ? *challengersp_ : *default_instance_->challengersp_;
}
inline ::pb::TArenaChallengeRsp* TArenaRevengeRsp::mutable_challengersp() {
  set_has_challengersp();
  if (challengersp_ == NULL) challengersp_ = new ::pb::TArenaChallengeRsp;
  // @@protoc_insertion_point(field_mutable:pb.TArenaRevengeRsp.ChallengeRsp)
  return challengersp_;
}
inline ::pb::TArenaChallengeRsp* TArenaRevengeRsp::release_challengersp() {
  clear_has_challengersp();
  ::pb::TArenaChallengeRsp* temp = challengersp_;
  challengersp_ = NULL;
  return temp;
}
inline void TArenaRevengeRsp::set_allocated_challengersp(::pb::TArenaChallengeRsp* challengersp) {
  delete challengersp_;
  challengersp_ = challengersp;
  if (challengersp) {
    set_has_challengersp();
  } else {
    clear_has_challengersp();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaRevengeRsp.ChallengeRsp)
}

// -------------------------------------------------------------------

// TArenaBuyChallengeNumReq

// optional uint32 BuyNum = 1;
inline bool TArenaBuyChallengeNumReq::has_buynum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaBuyChallengeNumReq::set_has_buynum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaBuyChallengeNumReq::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaBuyChallengeNumReq::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 TArenaBuyChallengeNumReq::buynum() const {
  // @@protoc_insertion_point(field_get:pb.TArenaBuyChallengeNumReq.BuyNum)
  return buynum_;
}
inline void TArenaBuyChallengeNumReq::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaBuyChallengeNumReq.BuyNum)
}

// -------------------------------------------------------------------

// TArenaUpdateArenaDataNotify

// optional uint32 Position = 1;
inline bool TArenaUpdateArenaDataNotify::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaUpdateArenaDataNotify::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaUpdateArenaDataNotify::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaUpdateArenaDataNotify::clear_position() {
  position_ = 0u;
  clear_has_position();
}
inline ::google::protobuf::uint32 TArenaUpdateArenaDataNotify::position() const {
  // @@protoc_insertion_point(field_get:pb.TArenaUpdateArenaDataNotify.Position)
  return position_;
}
inline void TArenaUpdateArenaDataNotify::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaUpdateArenaDataNotify.Position)
}

// repeated .pb.TArenaUser OpponentArray = 2;
inline int TArenaUpdateArenaDataNotify::opponentarray_size() const {
  return opponentarray_.size();
}
inline void TArenaUpdateArenaDataNotify::clear_opponentarray() {
  opponentarray_.Clear();
}
inline const ::pb::TArenaUser& TArenaUpdateArenaDataNotify::opponentarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaUpdateArenaDataNotify.OpponentArray)
  return opponentarray_.Get(index);
}
inline ::pb::TArenaUser* TArenaUpdateArenaDataNotify::mutable_opponentarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaUpdateArenaDataNotify.OpponentArray)
  return opponentarray_.Mutable(index);
}
inline ::pb::TArenaUser* TArenaUpdateArenaDataNotify::add_opponentarray() {
  // @@protoc_insertion_point(field_add:pb.TArenaUpdateArenaDataNotify.OpponentArray)
  return opponentarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >&
TArenaUpdateArenaDataNotify::opponentarray() const {
  // @@protoc_insertion_point(field_list:pb.TArenaUpdateArenaDataNotify.OpponentArray)
  return opponentarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >*
TArenaUpdateArenaDataNotify::mutable_opponentarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaUpdateArenaDataNotify.OpponentArray)
  return &opponentarray_;
}

// repeated .pb.TArenaUser TopArray = 3;
inline int TArenaUpdateArenaDataNotify::toparray_size() const {
  return toparray_.size();
}
inline void TArenaUpdateArenaDataNotify::clear_toparray() {
  toparray_.Clear();
}
inline const ::pb::TArenaUser& TArenaUpdateArenaDataNotify::toparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaUpdateArenaDataNotify.TopArray)
  return toparray_.Get(index);
}
inline ::pb::TArenaUser* TArenaUpdateArenaDataNotify::mutable_toparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaUpdateArenaDataNotify.TopArray)
  return toparray_.Mutable(index);
}
inline ::pb::TArenaUser* TArenaUpdateArenaDataNotify::add_toparray() {
  // @@protoc_insertion_point(field_add:pb.TArenaUpdateArenaDataNotify.TopArray)
  return toparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >&
TArenaUpdateArenaDataNotify::toparray() const {
  // @@protoc_insertion_point(field_list:pb.TArenaUpdateArenaDataNotify.TopArray)
  return toparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaUser >*
TArenaUpdateArenaDataNotify::mutable_toparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaUpdateArenaDataNotify.TopArray)
  return &toparray_;
}

// -------------------------------------------------------------------

// TArenaExchangeReq

// optional uint32 Id = 1;
inline bool TArenaExchangeReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaExchangeReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaExchangeReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaExchangeReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TArenaExchangeReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TArenaExchangeReq.Id)
  return id_;
}
inline void TArenaExchangeReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaExchangeReq.Id)
}

// -------------------------------------------------------------------

// TArenaExchangeRsp

// repeated .pb.TCommonReward RewardArray = 1;
inline int TArenaExchangeRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TArenaExchangeRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TArenaExchangeRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaExchangeRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TArenaExchangeRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaExchangeRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TArenaExchangeRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TArenaExchangeRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TArenaExchangeRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TArenaExchangeRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TArenaExchangeRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaExchangeRsp.RewardArray)
  return &rewardarray_;
}

// -------------------------------------------------------------------

// TArenaRecordInfo

// optional .pb.TUserSimpleInfo AttackUserInfo = 1;
inline bool TArenaRecordInfo::has_attackuserinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TArenaRecordInfo::set_has_attackuserinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TArenaRecordInfo::clear_has_attackuserinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TArenaRecordInfo::clear_attackuserinfo() {
  if (attackuserinfo_ != NULL) attackuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_attackuserinfo();
}
inline const ::pb::TUserSimpleInfo& TArenaRecordInfo::attackuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TArenaRecordInfo.AttackUserInfo)
  return attackuserinfo_ != NULL ? *attackuserinfo_ : *default_instance_->attackuserinfo_;
}
inline ::pb::TUserSimpleInfo* TArenaRecordInfo::mutable_attackuserinfo() {
  set_has_attackuserinfo();
  if (attackuserinfo_ == NULL) attackuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TArenaRecordInfo.AttackUserInfo)
  return attackuserinfo_;
}
inline ::pb::TUserSimpleInfo* TArenaRecordInfo::release_attackuserinfo() {
  clear_has_attackuserinfo();
  ::pb::TUserSimpleInfo* temp = attackuserinfo_;
  attackuserinfo_ = NULL;
  return temp;
}
inline void TArenaRecordInfo::set_allocated_attackuserinfo(::pb::TUserSimpleInfo* attackuserinfo) {
  delete attackuserinfo_;
  attackuserinfo_ = attackuserinfo;
  if (attackuserinfo) {
    set_has_attackuserinfo();
  } else {
    clear_has_attackuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaRecordInfo.AttackUserInfo)
}

// optional .pb.TUserSimpleInfo DefendUserInfo = 2;
inline bool TArenaRecordInfo::has_defenduserinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArenaRecordInfo::set_has_defenduserinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArenaRecordInfo::clear_has_defenduserinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArenaRecordInfo::clear_defenduserinfo() {
  if (defenduserinfo_ != NULL) defenduserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_defenduserinfo();
}
inline const ::pb::TUserSimpleInfo& TArenaRecordInfo::defenduserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TArenaRecordInfo.DefendUserInfo)
  return defenduserinfo_ != NULL ? *defenduserinfo_ : *default_instance_->defenduserinfo_;
}
inline ::pb::TUserSimpleInfo* TArenaRecordInfo::mutable_defenduserinfo() {
  set_has_defenduserinfo();
  if (defenduserinfo_ == NULL) defenduserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TArenaRecordInfo.DefendUserInfo)
  return defenduserinfo_;
}
inline ::pb::TUserSimpleInfo* TArenaRecordInfo::release_defenduserinfo() {
  clear_has_defenduserinfo();
  ::pb::TUserSimpleInfo* temp = defenduserinfo_;
  defenduserinfo_ = NULL;
  return temp;
}
inline void TArenaRecordInfo::set_allocated_defenduserinfo(::pb::TUserSimpleInfo* defenduserinfo) {
  delete defenduserinfo_;
  defenduserinfo_ = defenduserinfo;
  if (defenduserinfo) {
    set_has_defenduserinfo();
  } else {
    clear_has_defenduserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArenaRecordInfo.DefendUserInfo)
}

// optional uint32 AttackPos = 3;
inline bool TArenaRecordInfo::has_attackpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TArenaRecordInfo::set_has_attackpos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TArenaRecordInfo::clear_has_attackpos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TArenaRecordInfo::clear_attackpos() {
  attackpos_ = 0u;
  clear_has_attackpos();
}
inline ::google::protobuf::uint32 TArenaRecordInfo::attackpos() const {
  // @@protoc_insertion_point(field_get:pb.TArenaRecordInfo.AttackPos)
  return attackpos_;
}
inline void TArenaRecordInfo::set_attackpos(::google::protobuf::uint32 value) {
  set_has_attackpos();
  attackpos_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaRecordInfo.AttackPos)
}

// optional uint32 DefendPos = 4;
inline bool TArenaRecordInfo::has_defendpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TArenaRecordInfo::set_has_defendpos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TArenaRecordInfo::clear_has_defendpos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TArenaRecordInfo::clear_defendpos() {
  defendpos_ = 0u;
  clear_has_defendpos();
}
inline ::google::protobuf::uint32 TArenaRecordInfo::defendpos() const {
  // @@protoc_insertion_point(field_get:pb.TArenaRecordInfo.DefendPos)
  return defendpos_;
}
inline void TArenaRecordInfo::set_defendpos(::google::protobuf::uint32 value) {
  set_has_defendpos();
  defendpos_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaRecordInfo.DefendPos)
}

// optional bool IsWin = 5;
inline bool TArenaRecordInfo::has_iswin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TArenaRecordInfo::set_has_iswin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TArenaRecordInfo::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TArenaRecordInfo::clear_iswin() {
  iswin_ = false;
  clear_has_iswin();
}
inline bool TArenaRecordInfo::iswin() const {
  // @@protoc_insertion_point(field_get:pb.TArenaRecordInfo.IsWin)
  return iswin_;
}
inline void TArenaRecordInfo::set_iswin(bool value) {
  set_has_iswin();
  iswin_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaRecordInfo.IsWin)
}

// optional uint32 RecordId = 6;
inline bool TArenaRecordInfo::has_recordid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TArenaRecordInfo::set_has_recordid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TArenaRecordInfo::clear_has_recordid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TArenaRecordInfo::clear_recordid() {
  recordid_ = 0u;
  clear_has_recordid();
}
inline ::google::protobuf::uint32 TArenaRecordInfo::recordid() const {
  // @@protoc_insertion_point(field_get:pb.TArenaRecordInfo.RecordId)
  return recordid_;
}
inline void TArenaRecordInfo::set_recordid(::google::protobuf::uint32 value) {
  set_has_recordid();
  recordid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaRecordInfo.RecordId)
}

// optional uint64 RecordTime = 7;
inline bool TArenaRecordInfo::has_recordtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TArenaRecordInfo::set_has_recordtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TArenaRecordInfo::clear_has_recordtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TArenaRecordInfo::clear_recordtime() {
  recordtime_ = GOOGLE_ULONGLONG(0);
  clear_has_recordtime();
}
inline ::google::protobuf::uint64 TArenaRecordInfo::recordtime() const {
  // @@protoc_insertion_point(field_get:pb.TArenaRecordInfo.RecordTime)
  return recordtime_;
}
inline void TArenaRecordInfo::set_recordtime(::google::protobuf::uint64 value) {
  set_has_recordtime();
  recordtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TArenaRecordInfo.RecordTime)
}

// -------------------------------------------------------------------

// TArenaGetTopRecordsRsp

// repeated .pb.TArenaRecordInfo RecordArray = 1;
inline int TArenaGetTopRecordsRsp::recordarray_size() const {
  return recordarray_.size();
}
inline void TArenaGetTopRecordsRsp::clear_recordarray() {
  recordarray_.Clear();
}
inline const ::pb::TArenaRecordInfo& TArenaGetTopRecordsRsp::recordarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArenaGetTopRecordsRsp.RecordArray)
  return recordarray_.Get(index);
}
inline ::pb::TArenaRecordInfo* TArenaGetTopRecordsRsp::mutable_recordarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArenaGetTopRecordsRsp.RecordArray)
  return recordarray_.Mutable(index);
}
inline ::pb::TArenaRecordInfo* TArenaGetTopRecordsRsp::add_recordarray() {
  // @@protoc_insertion_point(field_add:pb.TArenaGetTopRecordsRsp.RecordArray)
  return recordarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArenaRecordInfo >&
TArenaGetTopRecordsRsp::recordarray() const {
  // @@protoc_insertion_point(field_list:pb.TArenaGetTopRecordsRsp.RecordArray)
  return recordarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArenaRecordInfo >*
TArenaGetTopRecordsRsp::mutable_recordarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArenaGetTopRecordsRsp.RecordArray)
  return &recordarray_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fArena_2eproto__INCLUDED
