// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/TowerDefenseNew.proto

#ifndef PROTOBUF_net_2fTowerDefenseNew_2eproto__INCLUDED
#define PROTOBUF_net_2fTowerDefenseNew_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/Battle.pb.h"
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

class TTowerDefenseNewRewardInfo;
class TTowerDefenseNewExchangeInfo;
class TTowerDefenseNewBuffInfo;
class TTowerDefenseNewWaveDropInfo;
class TTowerDefenseNewMapSimpleInfo;
class TTowerDefenseNewMapDetailInfo;
class TTowerDefenseNewMapTypeInfo;
class TTowerDefenseNewGetSimpleInfoRsp;
class TTowerDefenseNewGetInfoReq;
class TTowerDefenseNewGetInfoRsp;
class TTowerDefenseNewSetPlotEndReq;
class TTowerDefenseNewSetFormationReq;
class TTowerDefenseNewDoBattleReq;
class TTowerDefenseNewDoBattleRsp;
class TTowerDefenseNewReportBattleReq;
class TTowerDefenseNewReportBattleRsp;
class TTowerDefenseNewEndBattleReq;
class TTowerDefenseNewEndBattleRsp;
class TTowerDefenseNewReceiveAchievementRewardReq;
class TTowerDefenseNewReceiveAchievementRewardRsp;
class TTowerDefenseNewReceiveAllAchievementRewardReq;
class TTowerDefenseNewReceiveAllAchievementRewardRsp;
class TTowerDefenseNewSweepMapReq;
class TTowerDefenseNewSweepMapRsp;
class TTowerDefenseNewActExchangeReq;
class TTowerDefenseNewActExchangeRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewRewardInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewRewardInfo : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewRewardInfo();
  virtual ~TTowerDefenseNewRewardInfo();

  TTowerDefenseNewRewardInfo(const TTowerDefenseNewRewardInfo& from);

  inline TTowerDefenseNewRewardInfo& operator=(const TTowerDefenseNewRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewRewardInfo& default_instance();

  void Swap(TTowerDefenseNewRewardInfo* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewRewardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewRewardInfo& from);
  void MergeFrom(const TTowerDefenseNewRewardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewRewardInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 RewardTime = 2;
  inline bool has_rewardtime() const;
  inline void clear_rewardtime();
  static const int kRewardTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewRewardInfo</name>
  	<Function>
  		<name>rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rewardtime() const;
  inline void set_rewardtime(::google::protobuf::uint64 value);

  // optional uint64 FightForce = 3;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewRewardInfo</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewRewardInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rewardtime();
  inline void clear_has_rewardtime();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rewardtime_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewRewardInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewExchangeInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewExchangeInfo : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewExchangeInfo();
  virtual ~TTowerDefenseNewExchangeInfo();

  TTowerDefenseNewExchangeInfo(const TTowerDefenseNewExchangeInfo& from);

  inline TTowerDefenseNewExchangeInfo& operator=(const TTowerDefenseNewExchangeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewExchangeInfo& default_instance();

  void Swap(TTowerDefenseNewExchangeInfo* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewExchangeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewExchangeInfo& from);
  void MergeFrom(const TTowerDefenseNewExchangeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewExchangeInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewExchangeInfo</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint64 ExchangeTime = 3;
  inline bool has_exchangetime() const;
  inline void clear_exchangetime();
  static const int kExchangeTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewExchangeInfo</name>
  	<Function>
  		<name>exchangetime</name>
  		<replaceName>ExchangeTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_exchangetime</name>
  		<replaceName>ExchangeTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_exchangetime</name>
  		<replaceName>ExchangeTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 exchangetime() const;
  inline void set_exchangetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewExchangeInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_exchangetime();
  inline void clear_has_exchangetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint64 exchangetime_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewExchangeInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewBuffInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewBuffInfo : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewBuffInfo();
  virtual ~TTowerDefenseNewBuffInfo();

  TTowerDefenseNewBuffInfo(const TTowerDefenseNewBuffInfo& from);

  inline TTowerDefenseNewBuffInfo& operator=(const TTowerDefenseNewBuffInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewBuffInfo& default_instance();

  void Swap(TTowerDefenseNewBuffInfo* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewBuffInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewBuffInfo& from);
  void MergeFrom(const TTowerDefenseNewBuffInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewBuffInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 BuffConfId = 2;
  inline bool has_buffconfid() const;
  inline void clear_buffconfid();
  static const int kBuffConfIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewBuffInfo</name>
  	<Function>
  		<name>buffconfid</name>
  		<replaceName>BuffConfId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buffconfid</name>
  		<replaceName>BuffConfId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffconfid</name>
  		<replaceName>BuffConfId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buffconfid() const;
  inline void set_buffconfid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewBuffInfo)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_buffconfid();
  inline void clear_has_buffconfid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 buffconfid_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewBuffInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewWaveDropInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewWaveDropInfo : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewWaveDropInfo();
  virtual ~TTowerDefenseNewWaveDropInfo();

  TTowerDefenseNewWaveDropInfo(const TTowerDefenseNewWaveDropInfo& from);

  inline TTowerDefenseNewWaveDropInfo& operator=(const TTowerDefenseNewWaveDropInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewWaveDropInfo& default_instance();

  void Swap(TTowerDefenseNewWaveDropInfo* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewWaveDropInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewWaveDropInfo& from);
  void MergeFrom(const TTowerDefenseNewWaveDropInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 WaveNum = 1;
  inline bool has_wavenum() const;
  inline void clear_wavenum();
  static const int kWaveNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewWaveDropInfo</name>
  	<Function>
  		<name>wavenum</name>
  		<replaceName>WaveNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_wavenum</name>
  		<replaceName>WaveNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_wavenum</name>
  		<replaceName>WaveNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 wavenum() const;
  inline void set_wavenum(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward DropArray = 2;
  inline int droparray_size() const;
  inline void clear_droparray();
  static const int kDropArrayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewWaveDropInfo</name>
  	<Function>
  		<name>droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparray_size</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparray(int index) const;
  inline ::pb::TCommonReward* mutable_droparray(int index);
  inline ::pb::TCommonReward* add_droparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparray();

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewWaveDropInfo)
 private:
  inline void set_has_wavenum();
  inline void clear_has_wavenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparray_;
  ::google::protobuf::uint32 wavenum_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewWaveDropInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewMapSimpleInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewMapSimpleInfo : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewMapSimpleInfo();
  virtual ~TTowerDefenseNewMapSimpleInfo();

  TTowerDefenseNewMapSimpleInfo(const TTowerDefenseNewMapSimpleInfo& from);

  inline TTowerDefenseNewMapSimpleInfo& operator=(const TTowerDefenseNewMapSimpleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewMapSimpleInfo& default_instance();

  void Swap(TTowerDefenseNewMapSimpleInfo* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewMapSimpleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewMapSimpleInfo& from);
  void MergeFrom(const TTowerDefenseNewMapSimpleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MapId = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewMapSimpleInfo</name>
  	<Function>
  		<name>mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional uint32 CurRoundNum = 2;
  inline bool has_curroundnum() const;
  inline void clear_curroundnum();
  static const int kCurRoundNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewMapSimpleInfo</name>
  	<Function>
  		<name>curroundnum</name>
  		<replaceName>CurRoundNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curroundnum</name>
  		<replaceName>CurRoundNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curroundnum</name>
  		<replaceName>CurRoundNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curroundnum() const;
  inline void set_curroundnum(::google::protobuf::uint32 value);

  // optional uint32 MaxWaveNum = 3;
  inline bool has_maxwavenum() const;
  inline void clear_maxwavenum();
  static const int kMaxWaveNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewMapSimpleInfo</name>
  	<Function>
  		<name>maxwavenum</name>
  		<replaceName>MaxWaveNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxwavenum</name>
  		<replaceName>MaxWaveNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxwavenum</name>
  		<replaceName>MaxWaveNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxwavenum() const;
  inline void set_maxwavenum(::google::protobuf::uint32 value);

  // optional uint64 BeginFightForce = 4;
  inline bool has_beginfightforce() const;
  inline void clear_beginfightforce();
  static const int kBeginFightForceFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewMapSimpleInfo</name>
  	<Function>
  		<name>beginfightforce</name>
  		<replaceName>BeginFightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beginfightforce</name>
  		<replaceName>BeginFightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beginfightforce</name>
  		<replaceName>BeginFightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 beginfightforce() const;
  inline void set_beginfightforce(::google::protobuf::uint64 value);

  // repeated .pb.TTowerDefenseNewRewardInfo ArrAchievementInfo = 5;
  inline int arrachievementinfo_size() const;
  inline void clear_arrachievementinfo();
  static const int kArrAchievementInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewMapSimpleInfo</name>
  	<Function>
  		<name>arrachievementinfo</name>
  		<replaceName>ArrAchievementInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrachievementinfo</name>
  		<replaceName>ArrAchievementInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrachievementinfo</name>
  		<replaceName>ArrAchievementInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrachievementinfo</name>
  		<replaceName>ArrAchievementInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrachievementinfo_size</name>
  		<replaceName>ArrAchievementInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerDefenseNewRewardInfo& arrachievementinfo(int index) const;
  inline ::pb::TTowerDefenseNewRewardInfo* mutable_arrachievementinfo(int index);
  inline ::pb::TTowerDefenseNewRewardInfo* add_arrachievementinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewRewardInfo >&
      arrachievementinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewRewardInfo >*
      mutable_arrachievementinfo();

  // optional uint32 AchievementWaveNum = 6;
  inline bool has_achievementwavenum() const;
  inline void clear_achievementwavenum();
  static const int kAchievementWaveNumFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewMapSimpleInfo</name>
  	<Function>
  		<name>achievementwavenum</name>
  		<replaceName>AchievementWaveNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_achievementwavenum</name>
  		<replaceName>AchievementWaveNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_achievementwavenum</name>
  		<replaceName>AchievementWaveNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 achievementwavenum() const;
  inline void set_achievementwavenum(::google::protobuf::uint32 value);

  // optional uint64 PlotEndTime = 7;
  inline bool has_plotendtime() const;
  inline void clear_plotendtime();
  static const int kPlotEndTimeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewMapSimpleInfo</name>
  	<Function>
  		<name>plotendtime</name>
  		<replaceName>PlotEndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_plotendtime</name>
  		<replaceName>PlotEndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_plotendtime</name>
  		<replaceName>PlotEndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 plotendtime() const;
  inline void set_plotendtime(::google::protobuf::uint64 value);

  // optional uint64 FirstFinishTime = 8;
  inline bool has_firstfinishtime() const;
  inline void clear_firstfinishtime();
  static const int kFirstFinishTimeFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewMapSimpleInfo</name>
  	<Function>
  		<name>firstfinishtime</name>
  		<replaceName>FirstFinishTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_firstfinishtime</name>
  		<replaceName>FirstFinishTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_firstfinishtime</name>
  		<replaceName>FirstFinishTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 firstfinishtime() const;
  inline void set_firstfinishtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewMapSimpleInfo)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_curroundnum();
  inline void clear_has_curroundnum();
  inline void set_has_maxwavenum();
  inline void clear_has_maxwavenum();
  inline void set_has_beginfightforce();
  inline void clear_has_beginfightforce();
  inline void set_has_achievementwavenum();
  inline void clear_has_achievementwavenum();
  inline void set_has_plotendtime();
  inline void clear_has_plotendtime();
  inline void set_has_firstfinishtime();
  inline void clear_has_firstfinishtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 curroundnum_;
  ::google::protobuf::uint64 beginfightforce_;
  ::google::protobuf::uint32 maxwavenum_;
  ::google::protobuf::uint32 achievementwavenum_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewRewardInfo > arrachievementinfo_;
  ::google::protobuf::uint64 plotendtime_;
  ::google::protobuf::uint64 firstfinishtime_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewMapSimpleInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewMapDetailInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewMapDetailInfo : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewMapDetailInfo();
  virtual ~TTowerDefenseNewMapDetailInfo();

  TTowerDefenseNewMapDetailInfo(const TTowerDefenseNewMapDetailInfo& from);

  inline TTowerDefenseNewMapDetailInfo& operator=(const TTowerDefenseNewMapDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewMapDetailInfo& default_instance();

  void Swap(TTowerDefenseNewMapDetailInfo* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewMapDetailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewMapDetailInfo& from);
  void MergeFrom(const TTowerDefenseNewMapDetailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TTowerDefenseNewMapSimpleInfo SimpleInfo = 1;
  inline bool has_simpleinfo() const;
  inline void clear_simpleinfo();
  static const int kSimpleInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewMapDetailInfo</name>
  	<Function>
  		<name>simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerDefenseNewMapSimpleInfo& simpleinfo() const;
  inline ::pb::TTowerDefenseNewMapSimpleInfo* mutable_simpleinfo();
  inline ::pb::TTowerDefenseNewMapSimpleInfo* release_simpleinfo();
  inline void set_allocated_simpleinfo(::pb::TTowerDefenseNewMapSimpleInfo* simpleinfo);

  // repeated .pb.TUnitFormation ArrFormation = 2;
  inline int arrformation_size() const;
  inline void clear_arrformation();
  static const int kArrFormationFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewMapDetailInfo</name>
  	<Function>
  		<name>arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrformation_size</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnitFormation& arrformation(int index) const;
  inline ::pb::TUnitFormation* mutable_arrformation(int index);
  inline ::pb::TUnitFormation* add_arrformation();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation >&
      arrformation() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation >*
      mutable_arrformation();

  // optional bytes CurBattleArgsData = 3;
  inline bool has_curbattleargsdata() const;
  inline void clear_curbattleargsdata();
  static const int kCurBattleArgsDataFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewMapDetailInfo</name>
  	<Function>
  		<name>curbattleargsdata</name>
  		<replaceName>CurBattleArgsData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curbattleargsdata</name>
  		<replaceName>CurBattleArgsData</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curbattleargsdata</name>
  		<replaceName>CurBattleArgsData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& curbattleargsdata() const;
  inline void set_curbattleargsdata(const ::std::string& value);
  inline void set_curbattleargsdata(const char* value);
  inline void set_curbattleargsdata(const void* value, size_t size);
  inline ::std::string* mutable_curbattleargsdata();
  inline ::std::string* release_curbattleargsdata();
  inline void set_allocated_curbattleargsdata(::std::string* curbattleargsdata);

  // repeated .pb.TTowerDefenseNewBuffInfo ArrBuffInfo = 4;
  inline int arrbuffinfo_size() const;
  inline void clear_arrbuffinfo();
  static const int kArrBuffInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewMapDetailInfo</name>
  	<Function>
  		<name>arrbuffinfo</name>
  		<replaceName>ArrBuffInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrbuffinfo</name>
  		<replaceName>ArrBuffInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrbuffinfo</name>
  		<replaceName>ArrBuffInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrbuffinfo</name>
  		<replaceName>ArrBuffInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrbuffinfo_size</name>
  		<replaceName>ArrBuffInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerDefenseNewBuffInfo& arrbuffinfo(int index) const;
  inline ::pb::TTowerDefenseNewBuffInfo* mutable_arrbuffinfo(int index);
  inline ::pb::TTowerDefenseNewBuffInfo* add_arrbuffinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewBuffInfo >&
      arrbuffinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewBuffInfo >*
      mutable_arrbuffinfo();

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewMapDetailInfo)
 private:
  inline void set_has_simpleinfo();
  inline void clear_has_simpleinfo();
  inline void set_has_curbattleargsdata();
  inline void clear_has_curbattleargsdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TTowerDefenseNewMapSimpleInfo* simpleinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation > arrformation_;
  ::std::string* curbattleargsdata_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewBuffInfo > arrbuffinfo_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewMapDetailInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewMapTypeInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewMapTypeInfo : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewMapTypeInfo();
  virtual ~TTowerDefenseNewMapTypeInfo();

  TTowerDefenseNewMapTypeInfo(const TTowerDefenseNewMapTypeInfo& from);

  inline TTowerDefenseNewMapTypeInfo& operator=(const TTowerDefenseNewMapTypeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewMapTypeInfo& default_instance();

  void Swap(TTowerDefenseNewMapTypeInfo* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewMapTypeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewMapTypeInfo& from);
  void MergeFrom(const TTowerDefenseNewMapTypeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MapType = 1;
  inline bool has_maptype() const;
  inline void clear_maptype();
  static const int kMapTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewMapTypeInfo</name>
  	<Function>
  		<name>maptype</name>
  		<replaceName>MapType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maptype</name>
  		<replaceName>MapType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maptype</name>
  		<replaceName>MapType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maptype() const;
  inline void set_maptype(::google::protobuf::uint32 value);

  // optional uint32 ChallengeNum = 2;
  inline bool has_challengenum() const;
  inline void clear_challengenum();
  static const int kChallengeNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewMapTypeInfo</name>
  	<Function>
  		<name>challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 challengenum() const;
  inline void set_challengenum(::google::protobuf::uint32 value);

  // optional uint32 IncChallengeNum = 3;
  inline bool has_incchallengenum() const;
  inline void clear_incchallengenum();
  static const int kIncChallengeNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewMapTypeInfo</name>
  	<Function>
  		<name>incchallengenum</name>
  		<replaceName>IncChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_incchallengenum</name>
  		<replaceName>IncChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_incchallengenum</name>
  		<replaceName>IncChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 incchallengenum() const;
  inline void set_incchallengenum(::google::protobuf::uint32 value);

  // optional uint64 RefreshTime = 4;
  inline bool has_refreshtime() const;
  inline void clear_refreshtime();
  static const int kRefreshTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewMapTypeInfo</name>
  	<Function>
  		<name>refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 refreshtime() const;
  inline void set_refreshtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewMapTypeInfo)
 private:
  inline void set_has_maptype();
  inline void clear_has_maptype();
  inline void set_has_challengenum();
  inline void clear_has_challengenum();
  inline void set_has_incchallengenum();
  inline void clear_has_incchallengenum();
  inline void set_has_refreshtime();
  inline void clear_has_refreshtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 maptype_;
  ::google::protobuf::uint32 challengenum_;
  ::google::protobuf::uint64 refreshtime_;
  ::google::protobuf::uint32 incchallengenum_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewMapTypeInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewGetSimpleInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewGetSimpleInfoRsp : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewGetSimpleInfoRsp();
  virtual ~TTowerDefenseNewGetSimpleInfoRsp();

  TTowerDefenseNewGetSimpleInfoRsp(const TTowerDefenseNewGetSimpleInfoRsp& from);

  inline TTowerDefenseNewGetSimpleInfoRsp& operator=(const TTowerDefenseNewGetSimpleInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewGetSimpleInfoRsp& default_instance();

  void Swap(TTowerDefenseNewGetSimpleInfoRsp* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewGetSimpleInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewGetSimpleInfoRsp& from);
  void MergeFrom(const TTowerDefenseNewGetSimpleInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TTowerDefenseNewMapSimpleInfo ArrSimpleInfo = 1;
  inline int arrsimpleinfo_size() const;
  inline void clear_arrsimpleinfo();
  static const int kArrSimpleInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewGetSimpleInfoRsp</name>
  	<Function>
  		<name>arrsimpleinfo</name>
  		<replaceName>ArrSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrsimpleinfo</name>
  		<replaceName>ArrSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrsimpleinfo</name>
  		<replaceName>ArrSimpleInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrsimpleinfo</name>
  		<replaceName>ArrSimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrsimpleinfo_size</name>
  		<replaceName>ArrSimpleInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerDefenseNewMapSimpleInfo& arrsimpleinfo(int index) const;
  inline ::pb::TTowerDefenseNewMapSimpleInfo* mutable_arrsimpleinfo(int index);
  inline ::pb::TTowerDefenseNewMapSimpleInfo* add_arrsimpleinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewMapSimpleInfo >&
      arrsimpleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewMapSimpleInfo >*
      mutable_arrsimpleinfo();

  // repeated .pb.TTowerDefenseNewMapTypeInfo ArrTypeInfo = 2;
  inline int arrtypeinfo_size() const;
  inline void clear_arrtypeinfo();
  static const int kArrTypeInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewGetSimpleInfoRsp</name>
  	<Function>
  		<name>arrtypeinfo</name>
  		<replaceName>ArrTypeInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtypeinfo</name>
  		<replaceName>ArrTypeInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtypeinfo</name>
  		<replaceName>ArrTypeInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtypeinfo</name>
  		<replaceName>ArrTypeInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtypeinfo_size</name>
  		<replaceName>ArrTypeInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerDefenseNewMapTypeInfo& arrtypeinfo(int index) const;
  inline ::pb::TTowerDefenseNewMapTypeInfo* mutable_arrtypeinfo(int index);
  inline ::pb::TTowerDefenseNewMapTypeInfo* add_arrtypeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewMapTypeInfo >&
      arrtypeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewMapTypeInfo >*
      mutable_arrtypeinfo();

  // repeated .pb.TTowerDefenseNewExchangeInfo ArrActExchangeInfo = 3;
  inline int arractexchangeinfo_size() const;
  inline void clear_arractexchangeinfo();
  static const int kArrActExchangeInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewGetSimpleInfoRsp</name>
  	<Function>
  		<name>arractexchangeinfo</name>
  		<replaceName>ArrActExchangeInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arractexchangeinfo</name>
  		<replaceName>ArrActExchangeInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arractexchangeinfo</name>
  		<replaceName>ArrActExchangeInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arractexchangeinfo</name>
  		<replaceName>ArrActExchangeInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arractexchangeinfo_size</name>
  		<replaceName>ArrActExchangeInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerDefenseNewExchangeInfo& arractexchangeinfo(int index) const;
  inline ::pb::TTowerDefenseNewExchangeInfo* mutable_arractexchangeinfo(int index);
  inline ::pb::TTowerDefenseNewExchangeInfo* add_arractexchangeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewExchangeInfo >&
      arractexchangeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewExchangeInfo >*
      mutable_arractexchangeinfo();

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewGetSimpleInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewMapSimpleInfo > arrsimpleinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewMapTypeInfo > arrtypeinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewExchangeInfo > arractexchangeinfo_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewGetSimpleInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewGetInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewGetInfoReq : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewGetInfoReq();
  virtual ~TTowerDefenseNewGetInfoReq();

  TTowerDefenseNewGetInfoReq(const TTowerDefenseNewGetInfoReq& from);

  inline TTowerDefenseNewGetInfoReq& operator=(const TTowerDefenseNewGetInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewGetInfoReq& default_instance();

  void Swap(TTowerDefenseNewGetInfoReq* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewGetInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewGetInfoReq& from);
  void MergeFrom(const TTowerDefenseNewGetInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MapId = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewGetInfoReq</name>
  	<Function>
  		<name>mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewGetInfoReq)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mapid_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewGetInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewGetInfoRsp : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewGetInfoRsp();
  virtual ~TTowerDefenseNewGetInfoRsp();

  TTowerDefenseNewGetInfoRsp(const TTowerDefenseNewGetInfoRsp& from);

  inline TTowerDefenseNewGetInfoRsp& operator=(const TTowerDefenseNewGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewGetInfoRsp& default_instance();

  void Swap(TTowerDefenseNewGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewGetInfoRsp& from);
  void MergeFrom(const TTowerDefenseNewGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TTowerDefenseNewMapDetailInfo DetailInfo = 1;
  inline bool has_detailinfo() const;
  inline void clear_detailinfo();
  static const int kDetailInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewGetInfoRsp</name>
  	<Function>
  		<name>detailinfo</name>
  		<replaceName>DetailInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_detailinfo</name>
  		<replaceName>DetailInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_detailinfo</name>
  		<replaceName>DetailInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_detailinfo</name>
  		<replaceName>DetailInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerDefenseNewMapDetailInfo& detailinfo() const;
  inline ::pb::TTowerDefenseNewMapDetailInfo* mutable_detailinfo();
  inline ::pb::TTowerDefenseNewMapDetailInfo* release_detailinfo();
  inline void set_allocated_detailinfo(::pb::TTowerDefenseNewMapDetailInfo* detailinfo);

  // optional .pb.TTowerDefenseNewMapTypeInfo TypeInfo = 2;
  inline bool has_typeinfo() const;
  inline void clear_typeinfo();
  static const int kTypeInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewGetInfoRsp</name>
  	<Function>
  		<name>typeinfo</name>
  		<replaceName>TypeInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_typeinfo</name>
  		<replaceName>TypeInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_typeinfo</name>
  		<replaceName>TypeInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_typeinfo</name>
  		<replaceName>TypeInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerDefenseNewMapTypeInfo& typeinfo() const;
  inline ::pb::TTowerDefenseNewMapTypeInfo* mutable_typeinfo();
  inline ::pb::TTowerDefenseNewMapTypeInfo* release_typeinfo();
  inline void set_allocated_typeinfo(::pb::TTowerDefenseNewMapTypeInfo* typeinfo);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewGetInfoRsp)
 private:
  inline void set_has_detailinfo();
  inline void clear_has_detailinfo();
  inline void set_has_typeinfo();
  inline void clear_has_typeinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TTowerDefenseNewMapDetailInfo* detailinfo_;
  ::pb::TTowerDefenseNewMapTypeInfo* typeinfo_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewSetPlotEndReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewSetPlotEndReq : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewSetPlotEndReq();
  virtual ~TTowerDefenseNewSetPlotEndReq();

  TTowerDefenseNewSetPlotEndReq(const TTowerDefenseNewSetPlotEndReq& from);

  inline TTowerDefenseNewSetPlotEndReq& operator=(const TTowerDefenseNewSetPlotEndReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewSetPlotEndReq& default_instance();

  void Swap(TTowerDefenseNewSetPlotEndReq* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewSetPlotEndReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewSetPlotEndReq& from);
  void MergeFrom(const TTowerDefenseNewSetPlotEndReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MapId = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewSetPlotEndReq</name>
  	<Function>
  		<name>mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewSetPlotEndReq)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mapid_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewSetPlotEndReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewSetFormationReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewSetFormationReq : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewSetFormationReq();
  virtual ~TTowerDefenseNewSetFormationReq();

  TTowerDefenseNewSetFormationReq(const TTowerDefenseNewSetFormationReq& from);

  inline TTowerDefenseNewSetFormationReq& operator=(const TTowerDefenseNewSetFormationReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewSetFormationReq& default_instance();

  void Swap(TTowerDefenseNewSetFormationReq* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewSetFormationReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewSetFormationReq& from);
  void MergeFrom(const TTowerDefenseNewSetFormationReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MapId = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewSetFormationReq</name>
  	<Function>
  		<name>mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // repeated .pb.TUnitFormation ArrFormation = 2;
  inline int arrformation_size() const;
  inline void clear_arrformation();
  static const int kArrFormationFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewSetFormationReq</name>
  	<Function>
  		<name>arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrformation_size</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnitFormation& arrformation(int index) const;
  inline ::pb::TUnitFormation* mutable_arrformation(int index);
  inline ::pb::TUnitFormation* add_arrformation();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation >&
      arrformation() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation >*
      mutable_arrformation();

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewSetFormationReq)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation > arrformation_;
  ::google::protobuf::uint32 mapid_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewSetFormationReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewDoBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewDoBattleReq : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewDoBattleReq();
  virtual ~TTowerDefenseNewDoBattleReq();

  TTowerDefenseNewDoBattleReq(const TTowerDefenseNewDoBattleReq& from);

  inline TTowerDefenseNewDoBattleReq& operator=(const TTowerDefenseNewDoBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewDoBattleReq& default_instance();

  void Swap(TTowerDefenseNewDoBattleReq* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewDoBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewDoBattleReq& from);
  void MergeFrom(const TTowerDefenseNewDoBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MapId = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewDoBattleReq</name>
  	<Function>
  		<name>mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewDoBattleReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // optional uint32 RoundNum = 3;
  inline bool has_roundnum() const;
  inline void clear_roundnum();
  static const int kRoundNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewDoBattleReq</name>
  	<Function>
  		<name>roundnum</name>
  		<replaceName>RoundNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_roundnum</name>
  		<replaceName>RoundNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_roundnum</name>
  		<replaceName>RoundNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 roundnum() const;
  inline void set_roundnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewDoBattleReq)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();
  inline void set_has_roundnum();
  inline void clear_has_roundnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 roundnum_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewDoBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewDoBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewDoBattleRsp : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewDoBattleRsp();
  virtual ~TTowerDefenseNewDoBattleRsp();

  TTowerDefenseNewDoBattleRsp(const TTowerDefenseNewDoBattleRsp& from);

  inline TTowerDefenseNewDoBattleRsp& operator=(const TTowerDefenseNewDoBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewDoBattleRsp& default_instance();

  void Swap(TTowerDefenseNewDoBattleRsp* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewDoBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewDoBattleRsp& from);
  void MergeFrom(const TTowerDefenseNewDoBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TTowerDefenseNewWaveDropInfo WavesDropArray = 1;
  inline int wavesdroparray_size() const;
  inline void clear_wavesdroparray();
  static const int kWavesDropArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewDoBattleRsp</name>
  	<Function>
  		<name>wavesdroparray</name>
  		<replaceName>WavesDropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_wavesdroparray</name>
  		<replaceName>WavesDropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_wavesdroparray</name>
  		<replaceName>WavesDropArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_wavesdroparray</name>
  		<replaceName>WavesDropArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>wavesdroparray_size</name>
  		<replaceName>WavesDropArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerDefenseNewWaveDropInfo& wavesdroparray(int index) const;
  inline ::pb::TTowerDefenseNewWaveDropInfo* mutable_wavesdroparray(int index);
  inline ::pb::TTowerDefenseNewWaveDropInfo* add_wavesdroparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewWaveDropInfo >&
      wavesdroparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewWaveDropInfo >*
      mutable_wavesdroparray();

  // optional bytes BattleArgsData = 2;
  inline bool has_battleargsdata() const;
  inline void clear_battleargsdata();
  static const int kBattleArgsDataFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewDoBattleRsp</name>
  	<Function>
  		<name>battleargsdata</name>
  		<replaceName>BattleArgsData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargsdata</name>
  		<replaceName>BattleArgsData</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargsdata</name>
  		<replaceName>BattleArgsData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleargsdata() const;
  inline void set_battleargsdata(const ::std::string& value);
  inline void set_battleargsdata(const char* value);
  inline void set_battleargsdata(const void* value, size_t size);
  inline ::std::string* mutable_battleargsdata();
  inline ::std::string* release_battleargsdata();
  inline void set_allocated_battleargsdata(::std::string* battleargsdata);

  // optional uint32 RoundNum = 3;
  inline bool has_roundnum() const;
  inline void clear_roundnum();
  static const int kRoundNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewDoBattleRsp</name>
  	<Function>
  		<name>roundnum</name>
  		<replaceName>RoundNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_roundnum</name>
  		<replaceName>RoundNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_roundnum</name>
  		<replaceName>RoundNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 roundnum() const;
  inline void set_roundnum(::google::protobuf::uint32 value);

  // optional uint32 BattleId = 4;
  inline bool has_battleid() const;
  inline void clear_battleid();
  static const int kBattleIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewDoBattleRsp</name>
  	<Function>
  		<name>battleid</name>
  		<replaceName>BattleId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleid</name>
  		<replaceName>BattleId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleid</name>
  		<replaceName>BattleId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 battleid() const;
  inline void set_battleid(::google::protobuf::uint32 value);

  // repeated .pb.TTowerDefenseNewBuffInfo ArrBuffInfo = 5;
  inline int arrbuffinfo_size() const;
  inline void clear_arrbuffinfo();
  static const int kArrBuffInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewDoBattleRsp</name>
  	<Function>
  		<name>arrbuffinfo</name>
  		<replaceName>ArrBuffInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrbuffinfo</name>
  		<replaceName>ArrBuffInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrbuffinfo</name>
  		<replaceName>ArrBuffInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrbuffinfo</name>
  		<replaceName>ArrBuffInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrbuffinfo_size</name>
  		<replaceName>ArrBuffInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerDefenseNewBuffInfo& arrbuffinfo(int index) const;
  inline ::pb::TTowerDefenseNewBuffInfo* mutable_arrbuffinfo(int index);
  inline ::pb::TTowerDefenseNewBuffInfo* add_arrbuffinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewBuffInfo >&
      arrbuffinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewBuffInfo >*
      mutable_arrbuffinfo();

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewDoBattleRsp)
 private:
  inline void set_has_battleargsdata();
  inline void clear_has_battleargsdata();
  inline void set_has_roundnum();
  inline void clear_has_roundnum();
  inline void set_has_battleid();
  inline void clear_has_battleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewWaveDropInfo > wavesdroparray_;
  ::std::string* battleargsdata_;
  ::google::protobuf::uint32 roundnum_;
  ::google::protobuf::uint32 battleid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewBuffInfo > arrbuffinfo_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewDoBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewReportBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewReportBattleReq : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewReportBattleReq();
  virtual ~TTowerDefenseNewReportBattleReq();

  TTowerDefenseNewReportBattleReq(const TTowerDefenseNewReportBattleReq& from);

  inline TTowerDefenseNewReportBattleReq& operator=(const TTowerDefenseNewReportBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewReportBattleReq& default_instance();

  void Swap(TTowerDefenseNewReportBattleReq* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewReportBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewReportBattleReq& from);
  void MergeFrom(const TTowerDefenseNewReportBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MapId = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewReportBattleReq</name>
  	<Function>
  		<name>mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional bytes BattleResultBytes = 2;
  inline bool has_battleresultbytes() const;
  inline void clear_battleresultbytes();
  static const int kBattleResultBytesFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewReportBattleReq</name>
  	<Function>
  		<name>battleresultbytes</name>
  		<replaceName>BattleResultBytes</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleresultbytes</name>
  		<replaceName>BattleResultBytes</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleresultbytes</name>
  		<replaceName>BattleResultBytes</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleresultbytes() const;
  inline void set_battleresultbytes(const ::std::string& value);
  inline void set_battleresultbytes(const char* value);
  inline void set_battleresultbytes(const void* value, size_t size);
  inline ::std::string* mutable_battleresultbytes();
  inline ::std::string* release_battleresultbytes();
  inline void set_allocated_battleresultbytes(::std::string* battleresultbytes);

  // optional uint32 RoundNum = 3;
  inline bool has_roundnum() const;
  inline void clear_roundnum();
  static const int kRoundNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewReportBattleReq</name>
  	<Function>
  		<name>roundnum</name>
  		<replaceName>RoundNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_roundnum</name>
  		<replaceName>RoundNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_roundnum</name>
  		<replaceName>RoundNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 roundnum() const;
  inline void set_roundnum(::google::protobuf::uint32 value);

  // optional uint32 BattleId = 4;
  inline bool has_battleid() const;
  inline void clear_battleid();
  static const int kBattleIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewReportBattleReq</name>
  	<Function>
  		<name>battleid</name>
  		<replaceName>BattleId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleid</name>
  		<replaceName>BattleId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleid</name>
  		<replaceName>BattleId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 battleid() const;
  inline void set_battleid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewReportBattleReq)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_battleresultbytes();
  inline void clear_has_battleresultbytes();
  inline void set_has_roundnum();
  inline void clear_has_roundnum();
  inline void set_has_battleid();
  inline void clear_has_battleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* battleresultbytes_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 roundnum_;
  ::google::protobuf::uint32 battleid_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewReportBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewReportBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewReportBattleRsp : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewReportBattleRsp();
  virtual ~TTowerDefenseNewReportBattleRsp();

  TTowerDefenseNewReportBattleRsp(const TTowerDefenseNewReportBattleRsp& from);

  inline TTowerDefenseNewReportBattleRsp& operator=(const TTowerDefenseNewReportBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewReportBattleRsp& default_instance();

  void Swap(TTowerDefenseNewReportBattleRsp* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewReportBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewReportBattleRsp& from);
  void MergeFrom(const TTowerDefenseNewReportBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward DropArray = 1;
  inline int droparray_size() const;
  inline void clear_droparray();
  static const int kDropArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewReportBattleRsp</name>
  	<Function>
  		<name>droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparray_size</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparray(int index) const;
  inline ::pb::TCommonReward* mutable_droparray(int index);
  inline ::pb::TCommonReward* add_droparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparray();

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewReportBattleRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparray_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewReportBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewEndBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewEndBattleReq : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewEndBattleReq();
  virtual ~TTowerDefenseNewEndBattleReq();

  TTowerDefenseNewEndBattleReq(const TTowerDefenseNewEndBattleReq& from);

  inline TTowerDefenseNewEndBattleReq& operator=(const TTowerDefenseNewEndBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewEndBattleReq& default_instance();

  void Swap(TTowerDefenseNewEndBattleReq* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewEndBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewEndBattleReq& from);
  void MergeFrom(const TTowerDefenseNewEndBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MapId = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewEndBattleReq</name>
  	<Function>
  		<name>mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewEndBattleReq)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mapid_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewEndBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewEndBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewEndBattleRsp : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewEndBattleRsp();
  virtual ~TTowerDefenseNewEndBattleRsp();

  TTowerDefenseNewEndBattleRsp(const TTowerDefenseNewEndBattleRsp& from);

  inline TTowerDefenseNewEndBattleRsp& operator=(const TTowerDefenseNewEndBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewEndBattleRsp& default_instance();

  void Swap(TTowerDefenseNewEndBattleRsp* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewEndBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewEndBattleRsp& from);
  void MergeFrom(const TTowerDefenseNewEndBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward DropArray = 1;
  inline int droparray_size() const;
  inline void clear_droparray();
  static const int kDropArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewEndBattleRsp</name>
  	<Function>
  		<name>droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparray_size</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparray(int index) const;
  inline ::pb::TCommonReward* mutable_droparray(int index);
  inline ::pb::TCommonReward* add_droparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparray();

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewEndBattleRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparray_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewEndBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewReceiveAchievementRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewReceiveAchievementRewardReq : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewReceiveAchievementRewardReq();
  virtual ~TTowerDefenseNewReceiveAchievementRewardReq();

  TTowerDefenseNewReceiveAchievementRewardReq(const TTowerDefenseNewReceiveAchievementRewardReq& from);

  inline TTowerDefenseNewReceiveAchievementRewardReq& operator=(const TTowerDefenseNewReceiveAchievementRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewReceiveAchievementRewardReq& default_instance();

  void Swap(TTowerDefenseNewReceiveAchievementRewardReq* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewReceiveAchievementRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewReceiveAchievementRewardReq& from);
  void MergeFrom(const TTowerDefenseNewReceiveAchievementRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MapId = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewReceiveAchievementRewardReq</name>
  	<Function>
  		<name>mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional uint32 Id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewReceiveAchievementRewardReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewReceiveAchievementRewardReq)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewReceiveAchievementRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewReceiveAchievementRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewReceiveAchievementRewardRsp : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewReceiveAchievementRewardRsp();
  virtual ~TTowerDefenseNewReceiveAchievementRewardRsp();

  TTowerDefenseNewReceiveAchievementRewardRsp(const TTowerDefenseNewReceiveAchievementRewardRsp& from);

  inline TTowerDefenseNewReceiveAchievementRewardRsp& operator=(const TTowerDefenseNewReceiveAchievementRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewReceiveAchievementRewardRsp& default_instance();

  void Swap(TTowerDefenseNewReceiveAchievementRewardRsp* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewReceiveAchievementRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewReceiveAchievementRewardRsp& from);
  void MergeFrom(const TTowerDefenseNewReceiveAchievementRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward DropArray = 1;
  inline int droparray_size() const;
  inline void clear_droparray();
  static const int kDropArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewReceiveAchievementRewardRsp</name>
  	<Function>
  		<name>droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparray_size</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparray(int index) const;
  inline ::pb::TCommonReward* mutable_droparray(int index);
  inline ::pb::TCommonReward* add_droparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparray();

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewReceiveAchievementRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparray_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewReceiveAchievementRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewReceiveAllAchievementRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewReceiveAllAchievementRewardReq : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewReceiveAllAchievementRewardReq();
  virtual ~TTowerDefenseNewReceiveAllAchievementRewardReq();

  TTowerDefenseNewReceiveAllAchievementRewardReq(const TTowerDefenseNewReceiveAllAchievementRewardReq& from);

  inline TTowerDefenseNewReceiveAllAchievementRewardReq& operator=(const TTowerDefenseNewReceiveAllAchievementRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewReceiveAllAchievementRewardReq& default_instance();

  void Swap(TTowerDefenseNewReceiveAllAchievementRewardReq* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewReceiveAllAchievementRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewReceiveAllAchievementRewardReq& from);
  void MergeFrom(const TTowerDefenseNewReceiveAllAchievementRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MapId = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewReceiveAllAchievementRewardReq</name>
  	<Function>
  		<name>mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewReceiveAllAchievementRewardReq)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mapid_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewReceiveAllAchievementRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewReceiveAllAchievementRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewReceiveAllAchievementRewardRsp : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewReceiveAllAchievementRewardRsp();
  virtual ~TTowerDefenseNewReceiveAllAchievementRewardRsp();

  TTowerDefenseNewReceiveAllAchievementRewardRsp(const TTowerDefenseNewReceiveAllAchievementRewardRsp& from);

  inline TTowerDefenseNewReceiveAllAchievementRewardRsp& operator=(const TTowerDefenseNewReceiveAllAchievementRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewReceiveAllAchievementRewardRsp& default_instance();

  void Swap(TTowerDefenseNewReceiveAllAchievementRewardRsp* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewReceiveAllAchievementRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewReceiveAllAchievementRewardRsp& from);
  void MergeFrom(const TTowerDefenseNewReceiveAllAchievementRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward DropArray = 2;
  inline int droparray_size() const;
  inline void clear_droparray();
  static const int kDropArrayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewReceiveAllAchievementRewardRsp</name>
  	<Function>
  		<name>droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparray_size</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparray(int index) const;
  inline ::pb::TCommonReward* mutable_droparray(int index);
  inline ::pb::TCommonReward* add_droparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparray();

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewReceiveAllAchievementRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparray_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewReceiveAllAchievementRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewSweepMapReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewSweepMapReq : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewSweepMapReq();
  virtual ~TTowerDefenseNewSweepMapReq();

  TTowerDefenseNewSweepMapReq(const TTowerDefenseNewSweepMapReq& from);

  inline TTowerDefenseNewSweepMapReq& operator=(const TTowerDefenseNewSweepMapReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewSweepMapReq& default_instance();

  void Swap(TTowerDefenseNewSweepMapReq* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewSweepMapReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewSweepMapReq& from);
  void MergeFrom(const TTowerDefenseNewSweepMapReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MapId = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewSweepMapReq</name>
  	<Function>
  		<name>mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewSweepMapReq)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mapid_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewSweepMapReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewSweepMapRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewSweepMapRsp : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewSweepMapRsp();
  virtual ~TTowerDefenseNewSweepMapRsp();

  TTowerDefenseNewSweepMapRsp(const TTowerDefenseNewSweepMapRsp& from);

  inline TTowerDefenseNewSweepMapRsp& operator=(const TTowerDefenseNewSweepMapRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewSweepMapRsp& default_instance();

  void Swap(TTowerDefenseNewSweepMapRsp* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewSweepMapRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewSweepMapRsp& from);
  void MergeFrom(const TTowerDefenseNewSweepMapRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward DropArray = 2;
  inline int droparray_size() const;
  inline void clear_droparray();
  static const int kDropArrayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewSweepMapRsp</name>
  	<Function>
  		<name>droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparray_size</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparray(int index) const;
  inline ::pb::TCommonReward* mutable_droparray(int index);
  inline ::pb::TCommonReward* add_droparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparray();

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewSweepMapRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparray_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewSweepMapRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewActExchangeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewActExchangeReq : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewActExchangeReq();
  virtual ~TTowerDefenseNewActExchangeReq();

  TTowerDefenseNewActExchangeReq(const TTowerDefenseNewActExchangeReq& from);

  inline TTowerDefenseNewActExchangeReq& operator=(const TTowerDefenseNewActExchangeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewActExchangeReq& default_instance();

  void Swap(TTowerDefenseNewActExchangeReq* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewActExchangeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewActExchangeReq& from);
  void MergeFrom(const TTowerDefenseNewActExchangeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ExchangeId = 1;
  inline bool has_exchangeid() const;
  inline void clear_exchangeid();
  static const int kExchangeIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewActExchangeReq</name>
  	<Function>
  		<name>exchangeid</name>
  		<replaceName>ExchangeId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_exchangeid</name>
  		<replaceName>ExchangeId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_exchangeid</name>
  		<replaceName>ExchangeId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 exchangeid() const;
  inline void set_exchangeid(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewActExchangeReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewActExchangeReq)
 private:
  inline void set_has_exchangeid();
  inline void clear_has_exchangeid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 exchangeid_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewActExchangeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseNewActExchangeRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefenseNew.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseNewActExchangeRsp : public ::google::protobuf::Message {
 public:
  TTowerDefenseNewActExchangeRsp();
  virtual ~TTowerDefenseNewActExchangeRsp();

  TTowerDefenseNewActExchangeRsp(const TTowerDefenseNewActExchangeRsp& from);

  inline TTowerDefenseNewActExchangeRsp& operator=(const TTowerDefenseNewActExchangeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseNewActExchangeRsp& default_instance();

  void Swap(TTowerDefenseNewActExchangeRsp* other);

  // implements Message ----------------------------------------------

  TTowerDefenseNewActExchangeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseNewActExchangeRsp& from);
  void MergeFrom(const TTowerDefenseNewActExchangeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrReward = 1;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseNewActExchangeRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseNewActExchangeRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefenseNew_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefenseNew_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseNewActExchangeRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TTowerDefenseNewRewardInfo

// optional uint32 Id = 1;
inline bool TTowerDefenseNewRewardInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseNewRewardInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseNewRewardInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseNewRewardInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TTowerDefenseNewRewardInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewRewardInfo.Id)
  return id_;
}
inline void TTowerDefenseNewRewardInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewRewardInfo.Id)
}

// optional uint64 RewardTime = 2;
inline bool TTowerDefenseNewRewardInfo::has_rewardtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseNewRewardInfo::set_has_rewardtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseNewRewardInfo::clear_has_rewardtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseNewRewardInfo::clear_rewardtime() {
  rewardtime_ = GOOGLE_ULONGLONG(0);
  clear_has_rewardtime();
}
inline ::google::protobuf::uint64 TTowerDefenseNewRewardInfo::rewardtime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewRewardInfo.RewardTime)
  return rewardtime_;
}
inline void TTowerDefenseNewRewardInfo::set_rewardtime(::google::protobuf::uint64 value) {
  set_has_rewardtime();
  rewardtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewRewardInfo.RewardTime)
}

// optional uint64 FightForce = 3;
inline bool TTowerDefenseNewRewardInfo::has_fightforce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerDefenseNewRewardInfo::set_has_fightforce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerDefenseNewRewardInfo::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerDefenseNewRewardInfo::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TTowerDefenseNewRewardInfo::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewRewardInfo.FightForce)
  return fightforce_;
}
inline void TTowerDefenseNewRewardInfo::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewRewardInfo.FightForce)
}

// -------------------------------------------------------------------

// TTowerDefenseNewExchangeInfo

// optional uint32 Id = 1;
inline bool TTowerDefenseNewExchangeInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseNewExchangeInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseNewExchangeInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseNewExchangeInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TTowerDefenseNewExchangeInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewExchangeInfo.Id)
  return id_;
}
inline void TTowerDefenseNewExchangeInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewExchangeInfo.Id)
}

// optional uint32 Num = 2;
inline bool TTowerDefenseNewExchangeInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseNewExchangeInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseNewExchangeInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseNewExchangeInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TTowerDefenseNewExchangeInfo::num() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewExchangeInfo.Num)
  return num_;
}
inline void TTowerDefenseNewExchangeInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewExchangeInfo.Num)
}

// optional uint64 ExchangeTime = 3;
inline bool TTowerDefenseNewExchangeInfo::has_exchangetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerDefenseNewExchangeInfo::set_has_exchangetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerDefenseNewExchangeInfo::clear_has_exchangetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerDefenseNewExchangeInfo::clear_exchangetime() {
  exchangetime_ = GOOGLE_ULONGLONG(0);
  clear_has_exchangetime();
}
inline ::google::protobuf::uint64 TTowerDefenseNewExchangeInfo::exchangetime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewExchangeInfo.ExchangeTime)
  return exchangetime_;
}
inline void TTowerDefenseNewExchangeInfo::set_exchangetime(::google::protobuf::uint64 value) {
  set_has_exchangetime();
  exchangetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewExchangeInfo.ExchangeTime)
}

// -------------------------------------------------------------------

// TTowerDefenseNewBuffInfo

// optional uint32 Pos = 1;
inline bool TTowerDefenseNewBuffInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseNewBuffInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseNewBuffInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseNewBuffInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TTowerDefenseNewBuffInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewBuffInfo.Pos)
  return pos_;
}
inline void TTowerDefenseNewBuffInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewBuffInfo.Pos)
}

// optional uint32 BuffConfId = 2;
inline bool TTowerDefenseNewBuffInfo::has_buffconfid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseNewBuffInfo::set_has_buffconfid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseNewBuffInfo::clear_has_buffconfid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseNewBuffInfo::clear_buffconfid() {
  buffconfid_ = 0u;
  clear_has_buffconfid();
}
inline ::google::protobuf::uint32 TTowerDefenseNewBuffInfo::buffconfid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewBuffInfo.BuffConfId)
  return buffconfid_;
}
inline void TTowerDefenseNewBuffInfo::set_buffconfid(::google::protobuf::uint32 value) {
  set_has_buffconfid();
  buffconfid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewBuffInfo.BuffConfId)
}

// -------------------------------------------------------------------

// TTowerDefenseNewWaveDropInfo

// optional uint32 WaveNum = 1;
inline bool TTowerDefenseNewWaveDropInfo::has_wavenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseNewWaveDropInfo::set_has_wavenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseNewWaveDropInfo::clear_has_wavenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseNewWaveDropInfo::clear_wavenum() {
  wavenum_ = 0u;
  clear_has_wavenum();
}
inline ::google::protobuf::uint32 TTowerDefenseNewWaveDropInfo::wavenum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewWaveDropInfo.WaveNum)
  return wavenum_;
}
inline void TTowerDefenseNewWaveDropInfo::set_wavenum(::google::protobuf::uint32 value) {
  set_has_wavenum();
  wavenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewWaveDropInfo.WaveNum)
}

// repeated .pb.TCommonReward DropArray = 2;
inline int TTowerDefenseNewWaveDropInfo::droparray_size() const {
  return droparray_.size();
}
inline void TTowerDefenseNewWaveDropInfo::clear_droparray() {
  droparray_.Clear();
}
inline const ::pb::TCommonReward& TTowerDefenseNewWaveDropInfo::droparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewWaveDropInfo.DropArray)
  return droparray_.Get(index);
}
inline ::pb::TCommonReward* TTowerDefenseNewWaveDropInfo::mutable_droparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseNewWaveDropInfo.DropArray)
  return droparray_.Mutable(index);
}
inline ::pb::TCommonReward* TTowerDefenseNewWaveDropInfo::add_droparray() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseNewWaveDropInfo.DropArray)
  return droparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTowerDefenseNewWaveDropInfo::droparray() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseNewWaveDropInfo.DropArray)
  return droparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTowerDefenseNewWaveDropInfo::mutable_droparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseNewWaveDropInfo.DropArray)
  return &droparray_;
}

// -------------------------------------------------------------------

// TTowerDefenseNewMapSimpleInfo

// optional uint32 MapId = 1;
inline bool TTowerDefenseNewMapSimpleInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseNewMapSimpleInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseNewMapSimpleInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseNewMapSimpleInfo::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 TTowerDefenseNewMapSimpleInfo::mapid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewMapSimpleInfo.MapId)
  return mapid_;
}
inline void TTowerDefenseNewMapSimpleInfo::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewMapSimpleInfo.MapId)
}

// optional uint32 CurRoundNum = 2;
inline bool TTowerDefenseNewMapSimpleInfo::has_curroundnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseNewMapSimpleInfo::set_has_curroundnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseNewMapSimpleInfo::clear_has_curroundnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseNewMapSimpleInfo::clear_curroundnum() {
  curroundnum_ = 0u;
  clear_has_curroundnum();
}
inline ::google::protobuf::uint32 TTowerDefenseNewMapSimpleInfo::curroundnum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewMapSimpleInfo.CurRoundNum)
  return curroundnum_;
}
inline void TTowerDefenseNewMapSimpleInfo::set_curroundnum(::google::protobuf::uint32 value) {
  set_has_curroundnum();
  curroundnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewMapSimpleInfo.CurRoundNum)
}

// optional uint32 MaxWaveNum = 3;
inline bool TTowerDefenseNewMapSimpleInfo::has_maxwavenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerDefenseNewMapSimpleInfo::set_has_maxwavenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerDefenseNewMapSimpleInfo::clear_has_maxwavenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerDefenseNewMapSimpleInfo::clear_maxwavenum() {
  maxwavenum_ = 0u;
  clear_has_maxwavenum();
}
inline ::google::protobuf::uint32 TTowerDefenseNewMapSimpleInfo::maxwavenum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewMapSimpleInfo.MaxWaveNum)
  return maxwavenum_;
}
inline void TTowerDefenseNewMapSimpleInfo::set_maxwavenum(::google::protobuf::uint32 value) {
  set_has_maxwavenum();
  maxwavenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewMapSimpleInfo.MaxWaveNum)
}

// optional uint64 BeginFightForce = 4;
inline bool TTowerDefenseNewMapSimpleInfo::has_beginfightforce() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TTowerDefenseNewMapSimpleInfo::set_has_beginfightforce() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TTowerDefenseNewMapSimpleInfo::clear_has_beginfightforce() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TTowerDefenseNewMapSimpleInfo::clear_beginfightforce() {
  beginfightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_beginfightforce();
}
inline ::google::protobuf::uint64 TTowerDefenseNewMapSimpleInfo::beginfightforce() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewMapSimpleInfo.BeginFightForce)
  return beginfightforce_;
}
inline void TTowerDefenseNewMapSimpleInfo::set_beginfightforce(::google::protobuf::uint64 value) {
  set_has_beginfightforce();
  beginfightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewMapSimpleInfo.BeginFightForce)
}

// repeated .pb.TTowerDefenseNewRewardInfo ArrAchievementInfo = 5;
inline int TTowerDefenseNewMapSimpleInfo::arrachievementinfo_size() const {
  return arrachievementinfo_.size();
}
inline void TTowerDefenseNewMapSimpleInfo::clear_arrachievementinfo() {
  arrachievementinfo_.Clear();
}
inline const ::pb::TTowerDefenseNewRewardInfo& TTowerDefenseNewMapSimpleInfo::arrachievementinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewMapSimpleInfo.ArrAchievementInfo)
  return arrachievementinfo_.Get(index);
}
inline ::pb::TTowerDefenseNewRewardInfo* TTowerDefenseNewMapSimpleInfo::mutable_arrachievementinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseNewMapSimpleInfo.ArrAchievementInfo)
  return arrachievementinfo_.Mutable(index);
}
inline ::pb::TTowerDefenseNewRewardInfo* TTowerDefenseNewMapSimpleInfo::add_arrachievementinfo() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseNewMapSimpleInfo.ArrAchievementInfo)
  return arrachievementinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewRewardInfo >&
TTowerDefenseNewMapSimpleInfo::arrachievementinfo() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseNewMapSimpleInfo.ArrAchievementInfo)
  return arrachievementinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewRewardInfo >*
TTowerDefenseNewMapSimpleInfo::mutable_arrachievementinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseNewMapSimpleInfo.ArrAchievementInfo)
  return &arrachievementinfo_;
}

// optional uint32 AchievementWaveNum = 6;
inline bool TTowerDefenseNewMapSimpleInfo::has_achievementwavenum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TTowerDefenseNewMapSimpleInfo::set_has_achievementwavenum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TTowerDefenseNewMapSimpleInfo::clear_has_achievementwavenum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TTowerDefenseNewMapSimpleInfo::clear_achievementwavenum() {
  achievementwavenum_ = 0u;
  clear_has_achievementwavenum();
}
inline ::google::protobuf::uint32 TTowerDefenseNewMapSimpleInfo::achievementwavenum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewMapSimpleInfo.AchievementWaveNum)
  return achievementwavenum_;
}
inline void TTowerDefenseNewMapSimpleInfo::set_achievementwavenum(::google::protobuf::uint32 value) {
  set_has_achievementwavenum();
  achievementwavenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewMapSimpleInfo.AchievementWaveNum)
}

// optional uint64 PlotEndTime = 7;
inline bool TTowerDefenseNewMapSimpleInfo::has_plotendtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TTowerDefenseNewMapSimpleInfo::set_has_plotendtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TTowerDefenseNewMapSimpleInfo::clear_has_plotendtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TTowerDefenseNewMapSimpleInfo::clear_plotendtime() {
  plotendtime_ = GOOGLE_ULONGLONG(0);
  clear_has_plotendtime();
}
inline ::google::protobuf::uint64 TTowerDefenseNewMapSimpleInfo::plotendtime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewMapSimpleInfo.PlotEndTime)
  return plotendtime_;
}
inline void TTowerDefenseNewMapSimpleInfo::set_plotendtime(::google::protobuf::uint64 value) {
  set_has_plotendtime();
  plotendtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewMapSimpleInfo.PlotEndTime)
}

// optional uint64 FirstFinishTime = 8;
inline bool TTowerDefenseNewMapSimpleInfo::has_firstfinishtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TTowerDefenseNewMapSimpleInfo::set_has_firstfinishtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TTowerDefenseNewMapSimpleInfo::clear_has_firstfinishtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TTowerDefenseNewMapSimpleInfo::clear_firstfinishtime() {
  firstfinishtime_ = GOOGLE_ULONGLONG(0);
  clear_has_firstfinishtime();
}
inline ::google::protobuf::uint64 TTowerDefenseNewMapSimpleInfo::firstfinishtime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewMapSimpleInfo.FirstFinishTime)
  return firstfinishtime_;
}
inline void TTowerDefenseNewMapSimpleInfo::set_firstfinishtime(::google::protobuf::uint64 value) {
  set_has_firstfinishtime();
  firstfinishtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewMapSimpleInfo.FirstFinishTime)
}

// -------------------------------------------------------------------

// TTowerDefenseNewMapDetailInfo

// optional .pb.TTowerDefenseNewMapSimpleInfo SimpleInfo = 1;
inline bool TTowerDefenseNewMapDetailInfo::has_simpleinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseNewMapDetailInfo::set_has_simpleinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseNewMapDetailInfo::clear_has_simpleinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseNewMapDetailInfo::clear_simpleinfo() {
  if (simpleinfo_ != NULL) simpleinfo_->::pb::TTowerDefenseNewMapSimpleInfo::Clear();
  clear_has_simpleinfo();
}
inline const ::pb::TTowerDefenseNewMapSimpleInfo& TTowerDefenseNewMapDetailInfo::simpleinfo() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewMapDetailInfo.SimpleInfo)
  return simpleinfo_ != NULL ? *simpleinfo_ : *default_instance_->simpleinfo_;
}
inline ::pb::TTowerDefenseNewMapSimpleInfo* TTowerDefenseNewMapDetailInfo::mutable_simpleinfo() {
  set_has_simpleinfo();
  if (simpleinfo_ == NULL) simpleinfo_ = new ::pb::TTowerDefenseNewMapSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseNewMapDetailInfo.SimpleInfo)
  return simpleinfo_;
}
inline ::pb::TTowerDefenseNewMapSimpleInfo* TTowerDefenseNewMapDetailInfo::release_simpleinfo() {
  clear_has_simpleinfo();
  ::pb::TTowerDefenseNewMapSimpleInfo* temp = simpleinfo_;
  simpleinfo_ = NULL;
  return temp;
}
inline void TTowerDefenseNewMapDetailInfo::set_allocated_simpleinfo(::pb::TTowerDefenseNewMapSimpleInfo* simpleinfo) {
  delete simpleinfo_;
  simpleinfo_ = simpleinfo;
  if (simpleinfo) {
    set_has_simpleinfo();
  } else {
    clear_has_simpleinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerDefenseNewMapDetailInfo.SimpleInfo)
}

// repeated .pb.TUnitFormation ArrFormation = 2;
inline int TTowerDefenseNewMapDetailInfo::arrformation_size() const {
  return arrformation_.size();
}
inline void TTowerDefenseNewMapDetailInfo::clear_arrformation() {
  arrformation_.Clear();
}
inline const ::pb::TUnitFormation& TTowerDefenseNewMapDetailInfo::arrformation(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewMapDetailInfo.ArrFormation)
  return arrformation_.Get(index);
}
inline ::pb::TUnitFormation* TTowerDefenseNewMapDetailInfo::mutable_arrformation(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseNewMapDetailInfo.ArrFormation)
  return arrformation_.Mutable(index);
}
inline ::pb::TUnitFormation* TTowerDefenseNewMapDetailInfo::add_arrformation() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseNewMapDetailInfo.ArrFormation)
  return arrformation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation >&
TTowerDefenseNewMapDetailInfo::arrformation() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseNewMapDetailInfo.ArrFormation)
  return arrformation_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation >*
TTowerDefenseNewMapDetailInfo::mutable_arrformation() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseNewMapDetailInfo.ArrFormation)
  return &arrformation_;
}

// optional bytes CurBattleArgsData = 3;
inline bool TTowerDefenseNewMapDetailInfo::has_curbattleargsdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerDefenseNewMapDetailInfo::set_has_curbattleargsdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerDefenseNewMapDetailInfo::clear_has_curbattleargsdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerDefenseNewMapDetailInfo::clear_curbattleargsdata() {
  if (curbattleargsdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curbattleargsdata_->clear();
  }
  clear_has_curbattleargsdata();
}
inline const ::std::string& TTowerDefenseNewMapDetailInfo::curbattleargsdata() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewMapDetailInfo.CurBattleArgsData)
  return *curbattleargsdata_;
}
inline void TTowerDefenseNewMapDetailInfo::set_curbattleargsdata(const ::std::string& value) {
  set_has_curbattleargsdata();
  if (curbattleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curbattleargsdata_ = new ::std::string;
  }
  curbattleargsdata_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewMapDetailInfo.CurBattleArgsData)
}
inline void TTowerDefenseNewMapDetailInfo::set_curbattleargsdata(const char* value) {
  set_has_curbattleargsdata();
  if (curbattleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curbattleargsdata_ = new ::std::string;
  }
  curbattleargsdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TTowerDefenseNewMapDetailInfo.CurBattleArgsData)
}
inline void TTowerDefenseNewMapDetailInfo::set_curbattleargsdata(const void* value, size_t size) {
  set_has_curbattleargsdata();
  if (curbattleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curbattleargsdata_ = new ::std::string;
  }
  curbattleargsdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TTowerDefenseNewMapDetailInfo.CurBattleArgsData)
}
inline ::std::string* TTowerDefenseNewMapDetailInfo::mutable_curbattleargsdata() {
  set_has_curbattleargsdata();
  if (curbattleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curbattleargsdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseNewMapDetailInfo.CurBattleArgsData)
  return curbattleargsdata_;
}
inline ::std::string* TTowerDefenseNewMapDetailInfo::release_curbattleargsdata() {
  clear_has_curbattleargsdata();
  if (curbattleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = curbattleargsdata_;
    curbattleargsdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TTowerDefenseNewMapDetailInfo::set_allocated_curbattleargsdata(::std::string* curbattleargsdata) {
  if (curbattleargsdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete curbattleargsdata_;
  }
  if (curbattleargsdata) {
    set_has_curbattleargsdata();
    curbattleargsdata_ = curbattleargsdata;
  } else {
    clear_has_curbattleargsdata();
    curbattleargsdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerDefenseNewMapDetailInfo.CurBattleArgsData)
}

// repeated .pb.TTowerDefenseNewBuffInfo ArrBuffInfo = 4;
inline int TTowerDefenseNewMapDetailInfo::arrbuffinfo_size() const {
  return arrbuffinfo_.size();
}
inline void TTowerDefenseNewMapDetailInfo::clear_arrbuffinfo() {
  arrbuffinfo_.Clear();
}
inline const ::pb::TTowerDefenseNewBuffInfo& TTowerDefenseNewMapDetailInfo::arrbuffinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewMapDetailInfo.ArrBuffInfo)
  return arrbuffinfo_.Get(index);
}
inline ::pb::TTowerDefenseNewBuffInfo* TTowerDefenseNewMapDetailInfo::mutable_arrbuffinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseNewMapDetailInfo.ArrBuffInfo)
  return arrbuffinfo_.Mutable(index);
}
inline ::pb::TTowerDefenseNewBuffInfo* TTowerDefenseNewMapDetailInfo::add_arrbuffinfo() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseNewMapDetailInfo.ArrBuffInfo)
  return arrbuffinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewBuffInfo >&
TTowerDefenseNewMapDetailInfo::arrbuffinfo() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseNewMapDetailInfo.ArrBuffInfo)
  return arrbuffinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewBuffInfo >*
TTowerDefenseNewMapDetailInfo::mutable_arrbuffinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseNewMapDetailInfo.ArrBuffInfo)
  return &arrbuffinfo_;
}

// -------------------------------------------------------------------

// TTowerDefenseNewMapTypeInfo

// optional uint32 MapType = 1;
inline bool TTowerDefenseNewMapTypeInfo::has_maptype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseNewMapTypeInfo::set_has_maptype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseNewMapTypeInfo::clear_has_maptype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseNewMapTypeInfo::clear_maptype() {
  maptype_ = 0u;
  clear_has_maptype();
}
inline ::google::protobuf::uint32 TTowerDefenseNewMapTypeInfo::maptype() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewMapTypeInfo.MapType)
  return maptype_;
}
inline void TTowerDefenseNewMapTypeInfo::set_maptype(::google::protobuf::uint32 value) {
  set_has_maptype();
  maptype_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewMapTypeInfo.MapType)
}

// optional uint32 ChallengeNum = 2;
inline bool TTowerDefenseNewMapTypeInfo::has_challengenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseNewMapTypeInfo::set_has_challengenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseNewMapTypeInfo::clear_has_challengenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseNewMapTypeInfo::clear_challengenum() {
  challengenum_ = 0u;
  clear_has_challengenum();
}
inline ::google::protobuf::uint32 TTowerDefenseNewMapTypeInfo::challengenum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewMapTypeInfo.ChallengeNum)
  return challengenum_;
}
inline void TTowerDefenseNewMapTypeInfo::set_challengenum(::google::protobuf::uint32 value) {
  set_has_challengenum();
  challengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewMapTypeInfo.ChallengeNum)
}

// optional uint32 IncChallengeNum = 3;
inline bool TTowerDefenseNewMapTypeInfo::has_incchallengenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerDefenseNewMapTypeInfo::set_has_incchallengenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerDefenseNewMapTypeInfo::clear_has_incchallengenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerDefenseNewMapTypeInfo::clear_incchallengenum() {
  incchallengenum_ = 0u;
  clear_has_incchallengenum();
}
inline ::google::protobuf::uint32 TTowerDefenseNewMapTypeInfo::incchallengenum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewMapTypeInfo.IncChallengeNum)
  return incchallengenum_;
}
inline void TTowerDefenseNewMapTypeInfo::set_incchallengenum(::google::protobuf::uint32 value) {
  set_has_incchallengenum();
  incchallengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewMapTypeInfo.IncChallengeNum)
}

// optional uint64 RefreshTime = 4;
inline bool TTowerDefenseNewMapTypeInfo::has_refreshtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TTowerDefenseNewMapTypeInfo::set_has_refreshtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TTowerDefenseNewMapTypeInfo::clear_has_refreshtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TTowerDefenseNewMapTypeInfo::clear_refreshtime() {
  refreshtime_ = GOOGLE_ULONGLONG(0);
  clear_has_refreshtime();
}
inline ::google::protobuf::uint64 TTowerDefenseNewMapTypeInfo::refreshtime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewMapTypeInfo.RefreshTime)
  return refreshtime_;
}
inline void TTowerDefenseNewMapTypeInfo::set_refreshtime(::google::protobuf::uint64 value) {
  set_has_refreshtime();
  refreshtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewMapTypeInfo.RefreshTime)
}

// -------------------------------------------------------------------

// TTowerDefenseNewGetSimpleInfoRsp

// repeated .pb.TTowerDefenseNewMapSimpleInfo ArrSimpleInfo = 1;
inline int TTowerDefenseNewGetSimpleInfoRsp::arrsimpleinfo_size() const {
  return arrsimpleinfo_.size();
}
inline void TTowerDefenseNewGetSimpleInfoRsp::clear_arrsimpleinfo() {
  arrsimpleinfo_.Clear();
}
inline const ::pb::TTowerDefenseNewMapSimpleInfo& TTowerDefenseNewGetSimpleInfoRsp::arrsimpleinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewGetSimpleInfoRsp.ArrSimpleInfo)
  return arrsimpleinfo_.Get(index);
}
inline ::pb::TTowerDefenseNewMapSimpleInfo* TTowerDefenseNewGetSimpleInfoRsp::mutable_arrsimpleinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseNewGetSimpleInfoRsp.ArrSimpleInfo)
  return arrsimpleinfo_.Mutable(index);
}
inline ::pb::TTowerDefenseNewMapSimpleInfo* TTowerDefenseNewGetSimpleInfoRsp::add_arrsimpleinfo() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseNewGetSimpleInfoRsp.ArrSimpleInfo)
  return arrsimpleinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewMapSimpleInfo >&
TTowerDefenseNewGetSimpleInfoRsp::arrsimpleinfo() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseNewGetSimpleInfoRsp.ArrSimpleInfo)
  return arrsimpleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewMapSimpleInfo >*
TTowerDefenseNewGetSimpleInfoRsp::mutable_arrsimpleinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseNewGetSimpleInfoRsp.ArrSimpleInfo)
  return &arrsimpleinfo_;
}

// repeated .pb.TTowerDefenseNewMapTypeInfo ArrTypeInfo = 2;
inline int TTowerDefenseNewGetSimpleInfoRsp::arrtypeinfo_size() const {
  return arrtypeinfo_.size();
}
inline void TTowerDefenseNewGetSimpleInfoRsp::clear_arrtypeinfo() {
  arrtypeinfo_.Clear();
}
inline const ::pb::TTowerDefenseNewMapTypeInfo& TTowerDefenseNewGetSimpleInfoRsp::arrtypeinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewGetSimpleInfoRsp.ArrTypeInfo)
  return arrtypeinfo_.Get(index);
}
inline ::pb::TTowerDefenseNewMapTypeInfo* TTowerDefenseNewGetSimpleInfoRsp::mutable_arrtypeinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseNewGetSimpleInfoRsp.ArrTypeInfo)
  return arrtypeinfo_.Mutable(index);
}
inline ::pb::TTowerDefenseNewMapTypeInfo* TTowerDefenseNewGetSimpleInfoRsp::add_arrtypeinfo() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseNewGetSimpleInfoRsp.ArrTypeInfo)
  return arrtypeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewMapTypeInfo >&
TTowerDefenseNewGetSimpleInfoRsp::arrtypeinfo() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseNewGetSimpleInfoRsp.ArrTypeInfo)
  return arrtypeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewMapTypeInfo >*
TTowerDefenseNewGetSimpleInfoRsp::mutable_arrtypeinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseNewGetSimpleInfoRsp.ArrTypeInfo)
  return &arrtypeinfo_;
}

// repeated .pb.TTowerDefenseNewExchangeInfo ArrActExchangeInfo = 3;
inline int TTowerDefenseNewGetSimpleInfoRsp::arractexchangeinfo_size() const {
  return arractexchangeinfo_.size();
}
inline void TTowerDefenseNewGetSimpleInfoRsp::clear_arractexchangeinfo() {
  arractexchangeinfo_.Clear();
}
inline const ::pb::TTowerDefenseNewExchangeInfo& TTowerDefenseNewGetSimpleInfoRsp::arractexchangeinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewGetSimpleInfoRsp.ArrActExchangeInfo)
  return arractexchangeinfo_.Get(index);
}
inline ::pb::TTowerDefenseNewExchangeInfo* TTowerDefenseNewGetSimpleInfoRsp::mutable_arractexchangeinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseNewGetSimpleInfoRsp.ArrActExchangeInfo)
  return arractexchangeinfo_.Mutable(index);
}
inline ::pb::TTowerDefenseNewExchangeInfo* TTowerDefenseNewGetSimpleInfoRsp::add_arractexchangeinfo() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseNewGetSimpleInfoRsp.ArrActExchangeInfo)
  return arractexchangeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewExchangeInfo >&
TTowerDefenseNewGetSimpleInfoRsp::arractexchangeinfo() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseNewGetSimpleInfoRsp.ArrActExchangeInfo)
  return arractexchangeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewExchangeInfo >*
TTowerDefenseNewGetSimpleInfoRsp::mutable_arractexchangeinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseNewGetSimpleInfoRsp.ArrActExchangeInfo)
  return &arractexchangeinfo_;
}

// -------------------------------------------------------------------

// TTowerDefenseNewGetInfoReq

// optional uint32 MapId = 1;
inline bool TTowerDefenseNewGetInfoReq::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseNewGetInfoReq::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseNewGetInfoReq::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseNewGetInfoReq::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 TTowerDefenseNewGetInfoReq::mapid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewGetInfoReq.MapId)
  return mapid_;
}
inline void TTowerDefenseNewGetInfoReq::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewGetInfoReq.MapId)
}

// -------------------------------------------------------------------

// TTowerDefenseNewGetInfoRsp

// optional .pb.TTowerDefenseNewMapDetailInfo DetailInfo = 1;
inline bool TTowerDefenseNewGetInfoRsp::has_detailinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseNewGetInfoRsp::set_has_detailinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseNewGetInfoRsp::clear_has_detailinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseNewGetInfoRsp::clear_detailinfo() {
  if (detailinfo_ != NULL) detailinfo_->::pb::TTowerDefenseNewMapDetailInfo::Clear();
  clear_has_detailinfo();
}
inline const ::pb::TTowerDefenseNewMapDetailInfo& TTowerDefenseNewGetInfoRsp::detailinfo() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewGetInfoRsp.DetailInfo)
  return detailinfo_ != NULL ? *detailinfo_ : *default_instance_->detailinfo_;
}
inline ::pb::TTowerDefenseNewMapDetailInfo* TTowerDefenseNewGetInfoRsp::mutable_detailinfo() {
  set_has_detailinfo();
  if (detailinfo_ == NULL) detailinfo_ = new ::pb::TTowerDefenseNewMapDetailInfo;
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseNewGetInfoRsp.DetailInfo)
  return detailinfo_;
}
inline ::pb::TTowerDefenseNewMapDetailInfo* TTowerDefenseNewGetInfoRsp::release_detailinfo() {
  clear_has_detailinfo();
  ::pb::TTowerDefenseNewMapDetailInfo* temp = detailinfo_;
  detailinfo_ = NULL;
  return temp;
}
inline void TTowerDefenseNewGetInfoRsp::set_allocated_detailinfo(::pb::TTowerDefenseNewMapDetailInfo* detailinfo) {
  delete detailinfo_;
  detailinfo_ = detailinfo;
  if (detailinfo) {
    set_has_detailinfo();
  } else {
    clear_has_detailinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerDefenseNewGetInfoRsp.DetailInfo)
}

// optional .pb.TTowerDefenseNewMapTypeInfo TypeInfo = 2;
inline bool TTowerDefenseNewGetInfoRsp::has_typeinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseNewGetInfoRsp::set_has_typeinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseNewGetInfoRsp::clear_has_typeinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseNewGetInfoRsp::clear_typeinfo() {
  if (typeinfo_ != NULL) typeinfo_->::pb::TTowerDefenseNewMapTypeInfo::Clear();
  clear_has_typeinfo();
}
inline const ::pb::TTowerDefenseNewMapTypeInfo& TTowerDefenseNewGetInfoRsp::typeinfo() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewGetInfoRsp.TypeInfo)
  return typeinfo_ != NULL ? *typeinfo_ : *default_instance_->typeinfo_;
}
inline ::pb::TTowerDefenseNewMapTypeInfo* TTowerDefenseNewGetInfoRsp::mutable_typeinfo() {
  set_has_typeinfo();
  if (typeinfo_ == NULL) typeinfo_ = new ::pb::TTowerDefenseNewMapTypeInfo;
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseNewGetInfoRsp.TypeInfo)
  return typeinfo_;
}
inline ::pb::TTowerDefenseNewMapTypeInfo* TTowerDefenseNewGetInfoRsp::release_typeinfo() {
  clear_has_typeinfo();
  ::pb::TTowerDefenseNewMapTypeInfo* temp = typeinfo_;
  typeinfo_ = NULL;
  return temp;
}
inline void TTowerDefenseNewGetInfoRsp::set_allocated_typeinfo(::pb::TTowerDefenseNewMapTypeInfo* typeinfo) {
  delete typeinfo_;
  typeinfo_ = typeinfo;
  if (typeinfo) {
    set_has_typeinfo();
  } else {
    clear_has_typeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerDefenseNewGetInfoRsp.TypeInfo)
}

// -------------------------------------------------------------------

// TTowerDefenseNewSetPlotEndReq

// optional uint32 MapId = 1;
inline bool TTowerDefenseNewSetPlotEndReq::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseNewSetPlotEndReq::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseNewSetPlotEndReq::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseNewSetPlotEndReq::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 TTowerDefenseNewSetPlotEndReq::mapid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewSetPlotEndReq.MapId)
  return mapid_;
}
inline void TTowerDefenseNewSetPlotEndReq::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewSetPlotEndReq.MapId)
}

// -------------------------------------------------------------------

// TTowerDefenseNewSetFormationReq

// optional uint32 MapId = 1;
inline bool TTowerDefenseNewSetFormationReq::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseNewSetFormationReq::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseNewSetFormationReq::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseNewSetFormationReq::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 TTowerDefenseNewSetFormationReq::mapid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewSetFormationReq.MapId)
  return mapid_;
}
inline void TTowerDefenseNewSetFormationReq::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewSetFormationReq.MapId)
}

// repeated .pb.TUnitFormation ArrFormation = 2;
inline int TTowerDefenseNewSetFormationReq::arrformation_size() const {
  return arrformation_.size();
}
inline void TTowerDefenseNewSetFormationReq::clear_arrformation() {
  arrformation_.Clear();
}
inline const ::pb::TUnitFormation& TTowerDefenseNewSetFormationReq::arrformation(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewSetFormationReq.ArrFormation)
  return arrformation_.Get(index);
}
inline ::pb::TUnitFormation* TTowerDefenseNewSetFormationReq::mutable_arrformation(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseNewSetFormationReq.ArrFormation)
  return arrformation_.Mutable(index);
}
inline ::pb::TUnitFormation* TTowerDefenseNewSetFormationReq::add_arrformation() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseNewSetFormationReq.ArrFormation)
  return arrformation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation >&
TTowerDefenseNewSetFormationReq::arrformation() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseNewSetFormationReq.ArrFormation)
  return arrformation_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation >*
TTowerDefenseNewSetFormationReq::mutable_arrformation() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseNewSetFormationReq.ArrFormation)
  return &arrformation_;
}

// -------------------------------------------------------------------

// TTowerDefenseNewDoBattleReq

// optional uint32 MapId = 1;
inline bool TTowerDefenseNewDoBattleReq::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseNewDoBattleReq::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseNewDoBattleReq::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseNewDoBattleReq::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 TTowerDefenseNewDoBattleReq::mapid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewDoBattleReq.MapId)
  return mapid_;
}
inline void TTowerDefenseNewDoBattleReq::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewDoBattleReq.MapId)
}

// optional .pb.TBattleCheckParam BattleCheckParam = 2;
inline bool TTowerDefenseNewDoBattleReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseNewDoBattleReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseNewDoBattleReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseNewDoBattleReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TTowerDefenseNewDoBattleReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewDoBattleReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TTowerDefenseNewDoBattleReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseNewDoBattleReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TTowerDefenseNewDoBattleReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TTowerDefenseNewDoBattleReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerDefenseNewDoBattleReq.BattleCheckParam)
}

// optional uint32 RoundNum = 3;
inline bool TTowerDefenseNewDoBattleReq::has_roundnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerDefenseNewDoBattleReq::set_has_roundnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerDefenseNewDoBattleReq::clear_has_roundnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerDefenseNewDoBattleReq::clear_roundnum() {
  roundnum_ = 0u;
  clear_has_roundnum();
}
inline ::google::protobuf::uint32 TTowerDefenseNewDoBattleReq::roundnum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewDoBattleReq.RoundNum)
  return roundnum_;
}
inline void TTowerDefenseNewDoBattleReq::set_roundnum(::google::protobuf::uint32 value) {
  set_has_roundnum();
  roundnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewDoBattleReq.RoundNum)
}

// -------------------------------------------------------------------

// TTowerDefenseNewDoBattleRsp

// repeated .pb.TTowerDefenseNewWaveDropInfo WavesDropArray = 1;
inline int TTowerDefenseNewDoBattleRsp::wavesdroparray_size() const {
  return wavesdroparray_.size();
}
inline void TTowerDefenseNewDoBattleRsp::clear_wavesdroparray() {
  wavesdroparray_.Clear();
}
inline const ::pb::TTowerDefenseNewWaveDropInfo& TTowerDefenseNewDoBattleRsp::wavesdroparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewDoBattleRsp.WavesDropArray)
  return wavesdroparray_.Get(index);
}
inline ::pb::TTowerDefenseNewWaveDropInfo* TTowerDefenseNewDoBattleRsp::mutable_wavesdroparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseNewDoBattleRsp.WavesDropArray)
  return wavesdroparray_.Mutable(index);
}
inline ::pb::TTowerDefenseNewWaveDropInfo* TTowerDefenseNewDoBattleRsp::add_wavesdroparray() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseNewDoBattleRsp.WavesDropArray)
  return wavesdroparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewWaveDropInfo >&
TTowerDefenseNewDoBattleRsp::wavesdroparray() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseNewDoBattleRsp.WavesDropArray)
  return wavesdroparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewWaveDropInfo >*
TTowerDefenseNewDoBattleRsp::mutable_wavesdroparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseNewDoBattleRsp.WavesDropArray)
  return &wavesdroparray_;
}

// optional bytes BattleArgsData = 2;
inline bool TTowerDefenseNewDoBattleRsp::has_battleargsdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseNewDoBattleRsp::set_has_battleargsdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseNewDoBattleRsp::clear_has_battleargsdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseNewDoBattleRsp::clear_battleargsdata() {
  if (battleargsdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_->clear();
  }
  clear_has_battleargsdata();
}
inline const ::std::string& TTowerDefenseNewDoBattleRsp::battleargsdata() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewDoBattleRsp.BattleArgsData)
  return *battleargsdata_;
}
inline void TTowerDefenseNewDoBattleRsp::set_battleargsdata(const ::std::string& value) {
  set_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_ = new ::std::string;
  }
  battleargsdata_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewDoBattleRsp.BattleArgsData)
}
inline void TTowerDefenseNewDoBattleRsp::set_battleargsdata(const char* value) {
  set_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_ = new ::std::string;
  }
  battleargsdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TTowerDefenseNewDoBattleRsp.BattleArgsData)
}
inline void TTowerDefenseNewDoBattleRsp::set_battleargsdata(const void* value, size_t size) {
  set_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_ = new ::std::string;
  }
  battleargsdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TTowerDefenseNewDoBattleRsp.BattleArgsData)
}
inline ::std::string* TTowerDefenseNewDoBattleRsp::mutable_battleargsdata() {
  set_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleargsdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseNewDoBattleRsp.BattleArgsData)
  return battleargsdata_;
}
inline ::std::string* TTowerDefenseNewDoBattleRsp::release_battleargsdata() {
  clear_has_battleargsdata();
  if (battleargsdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleargsdata_;
    battleargsdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TTowerDefenseNewDoBattleRsp::set_allocated_battleargsdata(::std::string* battleargsdata) {
  if (battleargsdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleargsdata_;
  }
  if (battleargsdata) {
    set_has_battleargsdata();
    battleargsdata_ = battleargsdata;
  } else {
    clear_has_battleargsdata();
    battleargsdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerDefenseNewDoBattleRsp.BattleArgsData)
}

// optional uint32 RoundNum = 3;
inline bool TTowerDefenseNewDoBattleRsp::has_roundnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerDefenseNewDoBattleRsp::set_has_roundnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerDefenseNewDoBattleRsp::clear_has_roundnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerDefenseNewDoBattleRsp::clear_roundnum() {
  roundnum_ = 0u;
  clear_has_roundnum();
}
inline ::google::protobuf::uint32 TTowerDefenseNewDoBattleRsp::roundnum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewDoBattleRsp.RoundNum)
  return roundnum_;
}
inline void TTowerDefenseNewDoBattleRsp::set_roundnum(::google::protobuf::uint32 value) {
  set_has_roundnum();
  roundnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewDoBattleRsp.RoundNum)
}

// optional uint32 BattleId = 4;
inline bool TTowerDefenseNewDoBattleRsp::has_battleid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TTowerDefenseNewDoBattleRsp::set_has_battleid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TTowerDefenseNewDoBattleRsp::clear_has_battleid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TTowerDefenseNewDoBattleRsp::clear_battleid() {
  battleid_ = 0u;
  clear_has_battleid();
}
inline ::google::protobuf::uint32 TTowerDefenseNewDoBattleRsp::battleid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewDoBattleRsp.BattleId)
  return battleid_;
}
inline void TTowerDefenseNewDoBattleRsp::set_battleid(::google::protobuf::uint32 value) {
  set_has_battleid();
  battleid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewDoBattleRsp.BattleId)
}

// repeated .pb.TTowerDefenseNewBuffInfo ArrBuffInfo = 5;
inline int TTowerDefenseNewDoBattleRsp::arrbuffinfo_size() const {
  return arrbuffinfo_.size();
}
inline void TTowerDefenseNewDoBattleRsp::clear_arrbuffinfo() {
  arrbuffinfo_.Clear();
}
inline const ::pb::TTowerDefenseNewBuffInfo& TTowerDefenseNewDoBattleRsp::arrbuffinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewDoBattleRsp.ArrBuffInfo)
  return arrbuffinfo_.Get(index);
}
inline ::pb::TTowerDefenseNewBuffInfo* TTowerDefenseNewDoBattleRsp::mutable_arrbuffinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseNewDoBattleRsp.ArrBuffInfo)
  return arrbuffinfo_.Mutable(index);
}
inline ::pb::TTowerDefenseNewBuffInfo* TTowerDefenseNewDoBattleRsp::add_arrbuffinfo() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseNewDoBattleRsp.ArrBuffInfo)
  return arrbuffinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewBuffInfo >&
TTowerDefenseNewDoBattleRsp::arrbuffinfo() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseNewDoBattleRsp.ArrBuffInfo)
  return arrbuffinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseNewBuffInfo >*
TTowerDefenseNewDoBattleRsp::mutable_arrbuffinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseNewDoBattleRsp.ArrBuffInfo)
  return &arrbuffinfo_;
}

// -------------------------------------------------------------------

// TTowerDefenseNewReportBattleReq

// optional uint32 MapId = 1;
inline bool TTowerDefenseNewReportBattleReq::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseNewReportBattleReq::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseNewReportBattleReq::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseNewReportBattleReq::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 TTowerDefenseNewReportBattleReq::mapid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewReportBattleReq.MapId)
  return mapid_;
}
inline void TTowerDefenseNewReportBattleReq::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewReportBattleReq.MapId)
}

// optional bytes BattleResultBytes = 2;
inline bool TTowerDefenseNewReportBattleReq::has_battleresultbytes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseNewReportBattleReq::set_has_battleresultbytes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseNewReportBattleReq::clear_has_battleresultbytes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseNewReportBattleReq::clear_battleresultbytes() {
  if (battleresultbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_->clear();
  }
  clear_has_battleresultbytes();
}
inline const ::std::string& TTowerDefenseNewReportBattleReq::battleresultbytes() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewReportBattleReq.BattleResultBytes)
  return *battleresultbytes_;
}
inline void TTowerDefenseNewReportBattleReq::set_battleresultbytes(const ::std::string& value) {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  battleresultbytes_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewReportBattleReq.BattleResultBytes)
}
inline void TTowerDefenseNewReportBattleReq::set_battleresultbytes(const char* value) {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  battleresultbytes_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TTowerDefenseNewReportBattleReq.BattleResultBytes)
}
inline void TTowerDefenseNewReportBattleReq::set_battleresultbytes(const void* value, size_t size) {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  battleresultbytes_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TTowerDefenseNewReportBattleReq.BattleResultBytes)
}
inline ::std::string* TTowerDefenseNewReportBattleReq::mutable_battleresultbytes() {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseNewReportBattleReq.BattleResultBytes)
  return battleresultbytes_;
}
inline ::std::string* TTowerDefenseNewReportBattleReq::release_battleresultbytes() {
  clear_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleresultbytes_;
    battleresultbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TTowerDefenseNewReportBattleReq::set_allocated_battleresultbytes(::std::string* battleresultbytes) {
  if (battleresultbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleresultbytes_;
  }
  if (battleresultbytes) {
    set_has_battleresultbytes();
    battleresultbytes_ = battleresultbytes;
  } else {
    clear_has_battleresultbytes();
    battleresultbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerDefenseNewReportBattleReq.BattleResultBytes)
}

// optional uint32 RoundNum = 3;
inline bool TTowerDefenseNewReportBattleReq::has_roundnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerDefenseNewReportBattleReq::set_has_roundnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerDefenseNewReportBattleReq::clear_has_roundnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerDefenseNewReportBattleReq::clear_roundnum() {
  roundnum_ = 0u;
  clear_has_roundnum();
}
inline ::google::protobuf::uint32 TTowerDefenseNewReportBattleReq::roundnum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewReportBattleReq.RoundNum)
  return roundnum_;
}
inline void TTowerDefenseNewReportBattleReq::set_roundnum(::google::protobuf::uint32 value) {
  set_has_roundnum();
  roundnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewReportBattleReq.RoundNum)
}

// optional uint32 BattleId = 4;
inline bool TTowerDefenseNewReportBattleReq::has_battleid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TTowerDefenseNewReportBattleReq::set_has_battleid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TTowerDefenseNewReportBattleReq::clear_has_battleid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TTowerDefenseNewReportBattleReq::clear_battleid() {
  battleid_ = 0u;
  clear_has_battleid();
}
inline ::google::protobuf::uint32 TTowerDefenseNewReportBattleReq::battleid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewReportBattleReq.BattleId)
  return battleid_;
}
inline void TTowerDefenseNewReportBattleReq::set_battleid(::google::protobuf::uint32 value) {
  set_has_battleid();
  battleid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewReportBattleReq.BattleId)
}

// -------------------------------------------------------------------

// TTowerDefenseNewReportBattleRsp

// repeated .pb.TCommonReward DropArray = 1;
inline int TTowerDefenseNewReportBattleRsp::droparray_size() const {
  return droparray_.size();
}
inline void TTowerDefenseNewReportBattleRsp::clear_droparray() {
  droparray_.Clear();
}
inline const ::pb::TCommonReward& TTowerDefenseNewReportBattleRsp::droparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewReportBattleRsp.DropArray)
  return droparray_.Get(index);
}
inline ::pb::TCommonReward* TTowerDefenseNewReportBattleRsp::mutable_droparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseNewReportBattleRsp.DropArray)
  return droparray_.Mutable(index);
}
inline ::pb::TCommonReward* TTowerDefenseNewReportBattleRsp::add_droparray() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseNewReportBattleRsp.DropArray)
  return droparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTowerDefenseNewReportBattleRsp::droparray() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseNewReportBattleRsp.DropArray)
  return droparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTowerDefenseNewReportBattleRsp::mutable_droparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseNewReportBattleRsp.DropArray)
  return &droparray_;
}

// -------------------------------------------------------------------

// TTowerDefenseNewEndBattleReq

// optional uint32 MapId = 1;
inline bool TTowerDefenseNewEndBattleReq::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseNewEndBattleReq::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseNewEndBattleReq::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseNewEndBattleReq::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 TTowerDefenseNewEndBattleReq::mapid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewEndBattleReq.MapId)
  return mapid_;
}
inline void TTowerDefenseNewEndBattleReq::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewEndBattleReq.MapId)
}

// -------------------------------------------------------------------

// TTowerDefenseNewEndBattleRsp

// repeated .pb.TCommonReward DropArray = 1;
inline int TTowerDefenseNewEndBattleRsp::droparray_size() const {
  return droparray_.size();
}
inline void TTowerDefenseNewEndBattleRsp::clear_droparray() {
  droparray_.Clear();
}
inline const ::pb::TCommonReward& TTowerDefenseNewEndBattleRsp::droparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewEndBattleRsp.DropArray)
  return droparray_.Get(index);
}
inline ::pb::TCommonReward* TTowerDefenseNewEndBattleRsp::mutable_droparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseNewEndBattleRsp.DropArray)
  return droparray_.Mutable(index);
}
inline ::pb::TCommonReward* TTowerDefenseNewEndBattleRsp::add_droparray() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseNewEndBattleRsp.DropArray)
  return droparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTowerDefenseNewEndBattleRsp::droparray() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseNewEndBattleRsp.DropArray)
  return droparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTowerDefenseNewEndBattleRsp::mutable_droparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseNewEndBattleRsp.DropArray)
  return &droparray_;
}

// -------------------------------------------------------------------

// TTowerDefenseNewReceiveAchievementRewardReq

// optional uint32 MapId = 1;
inline bool TTowerDefenseNewReceiveAchievementRewardReq::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseNewReceiveAchievementRewardReq::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseNewReceiveAchievementRewardReq::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseNewReceiveAchievementRewardReq::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 TTowerDefenseNewReceiveAchievementRewardReq::mapid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewReceiveAchievementRewardReq.MapId)
  return mapid_;
}
inline void TTowerDefenseNewReceiveAchievementRewardReq::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewReceiveAchievementRewardReq.MapId)
}

// optional uint32 Id = 2;
inline bool TTowerDefenseNewReceiveAchievementRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseNewReceiveAchievementRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseNewReceiveAchievementRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseNewReceiveAchievementRewardReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TTowerDefenseNewReceiveAchievementRewardReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewReceiveAchievementRewardReq.Id)
  return id_;
}
inline void TTowerDefenseNewReceiveAchievementRewardReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewReceiveAchievementRewardReq.Id)
}

// -------------------------------------------------------------------

// TTowerDefenseNewReceiveAchievementRewardRsp

// repeated .pb.TCommonReward DropArray = 1;
inline int TTowerDefenseNewReceiveAchievementRewardRsp::droparray_size() const {
  return droparray_.size();
}
inline void TTowerDefenseNewReceiveAchievementRewardRsp::clear_droparray() {
  droparray_.Clear();
}
inline const ::pb::TCommonReward& TTowerDefenseNewReceiveAchievementRewardRsp::droparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewReceiveAchievementRewardRsp.DropArray)
  return droparray_.Get(index);
}
inline ::pb::TCommonReward* TTowerDefenseNewReceiveAchievementRewardRsp::mutable_droparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseNewReceiveAchievementRewardRsp.DropArray)
  return droparray_.Mutable(index);
}
inline ::pb::TCommonReward* TTowerDefenseNewReceiveAchievementRewardRsp::add_droparray() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseNewReceiveAchievementRewardRsp.DropArray)
  return droparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTowerDefenseNewReceiveAchievementRewardRsp::droparray() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseNewReceiveAchievementRewardRsp.DropArray)
  return droparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTowerDefenseNewReceiveAchievementRewardRsp::mutable_droparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseNewReceiveAchievementRewardRsp.DropArray)
  return &droparray_;
}

// -------------------------------------------------------------------

// TTowerDefenseNewReceiveAllAchievementRewardReq

// optional uint32 MapId = 1;
inline bool TTowerDefenseNewReceiveAllAchievementRewardReq::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseNewReceiveAllAchievementRewardReq::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseNewReceiveAllAchievementRewardReq::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseNewReceiveAllAchievementRewardReq::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 TTowerDefenseNewReceiveAllAchievementRewardReq::mapid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewReceiveAllAchievementRewardReq.MapId)
  return mapid_;
}
inline void TTowerDefenseNewReceiveAllAchievementRewardReq::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewReceiveAllAchievementRewardReq.MapId)
}

// -------------------------------------------------------------------

// TTowerDefenseNewReceiveAllAchievementRewardRsp

// repeated .pb.TCommonReward DropArray = 2;
inline int TTowerDefenseNewReceiveAllAchievementRewardRsp::droparray_size() const {
  return droparray_.size();
}
inline void TTowerDefenseNewReceiveAllAchievementRewardRsp::clear_droparray() {
  droparray_.Clear();
}
inline const ::pb::TCommonReward& TTowerDefenseNewReceiveAllAchievementRewardRsp::droparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewReceiveAllAchievementRewardRsp.DropArray)
  return droparray_.Get(index);
}
inline ::pb::TCommonReward* TTowerDefenseNewReceiveAllAchievementRewardRsp::mutable_droparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseNewReceiveAllAchievementRewardRsp.DropArray)
  return droparray_.Mutable(index);
}
inline ::pb::TCommonReward* TTowerDefenseNewReceiveAllAchievementRewardRsp::add_droparray() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseNewReceiveAllAchievementRewardRsp.DropArray)
  return droparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTowerDefenseNewReceiveAllAchievementRewardRsp::droparray() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseNewReceiveAllAchievementRewardRsp.DropArray)
  return droparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTowerDefenseNewReceiveAllAchievementRewardRsp::mutable_droparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseNewReceiveAllAchievementRewardRsp.DropArray)
  return &droparray_;
}

// -------------------------------------------------------------------

// TTowerDefenseNewSweepMapReq

// optional uint32 MapId = 1;
inline bool TTowerDefenseNewSweepMapReq::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseNewSweepMapReq::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseNewSweepMapReq::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseNewSweepMapReq::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 TTowerDefenseNewSweepMapReq::mapid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewSweepMapReq.MapId)
  return mapid_;
}
inline void TTowerDefenseNewSweepMapReq::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewSweepMapReq.MapId)
}

// -------------------------------------------------------------------

// TTowerDefenseNewSweepMapRsp

// repeated .pb.TCommonReward DropArray = 2;
inline int TTowerDefenseNewSweepMapRsp::droparray_size() const {
  return droparray_.size();
}
inline void TTowerDefenseNewSweepMapRsp::clear_droparray() {
  droparray_.Clear();
}
inline const ::pb::TCommonReward& TTowerDefenseNewSweepMapRsp::droparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewSweepMapRsp.DropArray)
  return droparray_.Get(index);
}
inline ::pb::TCommonReward* TTowerDefenseNewSweepMapRsp::mutable_droparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseNewSweepMapRsp.DropArray)
  return droparray_.Mutable(index);
}
inline ::pb::TCommonReward* TTowerDefenseNewSweepMapRsp::add_droparray() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseNewSweepMapRsp.DropArray)
  return droparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTowerDefenseNewSweepMapRsp::droparray() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseNewSweepMapRsp.DropArray)
  return droparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTowerDefenseNewSweepMapRsp::mutable_droparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseNewSweepMapRsp.DropArray)
  return &droparray_;
}

// -------------------------------------------------------------------

// TTowerDefenseNewActExchangeReq

// optional uint32 ExchangeId = 1;
inline bool TTowerDefenseNewActExchangeReq::has_exchangeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseNewActExchangeReq::set_has_exchangeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseNewActExchangeReq::clear_has_exchangeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseNewActExchangeReq::clear_exchangeid() {
  exchangeid_ = 0u;
  clear_has_exchangeid();
}
inline ::google::protobuf::uint32 TTowerDefenseNewActExchangeReq::exchangeid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewActExchangeReq.ExchangeId)
  return exchangeid_;
}
inline void TTowerDefenseNewActExchangeReq::set_exchangeid(::google::protobuf::uint32 value) {
  set_has_exchangeid();
  exchangeid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewActExchangeReq.ExchangeId)
}

// optional uint32 Num = 2;
inline bool TTowerDefenseNewActExchangeReq::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseNewActExchangeReq::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseNewActExchangeReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseNewActExchangeReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TTowerDefenseNewActExchangeReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewActExchangeReq.Num)
  return num_;
}
inline void TTowerDefenseNewActExchangeReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseNewActExchangeReq.Num)
}

// -------------------------------------------------------------------

// TTowerDefenseNewActExchangeRsp

// repeated .pb.TCommonReward ArrReward = 1;
inline int TTowerDefenseNewActExchangeRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TTowerDefenseNewActExchangeRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TTowerDefenseNewActExchangeRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseNewActExchangeRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TTowerDefenseNewActExchangeRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseNewActExchangeRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TTowerDefenseNewActExchangeRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseNewActExchangeRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTowerDefenseNewActExchangeRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseNewActExchangeRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTowerDefenseNewActExchangeRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseNewActExchangeRsp.ArrReward)
  return &arrreward_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fTowerDefenseNew_2eproto__INCLUDED
