// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/LimitGift.proto

#ifndef PROTOBUF_net_2fLimitGift_2eproto__INCLUDED
#define PROTOBUF_net_2fLimitGift_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fLimitGift_2eproto();
void protobuf_AssignDesc_net_2fLimitGift_2eproto();
void protobuf_ShutdownFile_net_2fLimitGift_2eproto();

class TGiftInfo;
class TLimitGiftGetInfoRsp;
class TLimitGiftInfoNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TGiftInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LimitGift.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGiftInfo : public ::google::protobuf::Message {
 public:
  TGiftInfo();
  virtual ~TGiftInfo();

  TGiftInfo(const TGiftInfo& from);

  inline TGiftInfo& operator=(const TGiftInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGiftInfo& default_instance();

  void Swap(TGiftInfo* other);

  // implements Message ----------------------------------------------

  TGiftInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGiftInfo& from);
  void MergeFrom(const TGiftInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GiftId = 1;
  inline bool has_giftid() const;
  inline void clear_giftid();
  static const int kGiftIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGiftInfo</name>
  	<Function>
  		<name>giftid</name>
  		<replaceName>GiftId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_giftid</name>
  		<replaceName>GiftId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_giftid</name>
  		<replaceName>GiftId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 giftid() const;
  inline void set_giftid(::google::protobuf::uint32 value);

  // optional uint32 BuyNum = 2;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGiftInfo</name>
  	<Function>
  		<name>buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGiftInfo)
 private:
  inline void set_has_giftid();
  inline void clear_has_giftid();
  inline void set_has_buynum();
  inline void clear_has_buynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 giftid_;
  ::google::protobuf::uint32 buynum_;
  friend void  protobuf_AddDesc_net_2fLimitGift_2eproto();
  friend void protobuf_AssignDesc_net_2fLimitGift_2eproto();
  friend void protobuf_ShutdownFile_net_2fLimitGift_2eproto();

  void InitAsDefaultInstance();
  static TGiftInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLimitGiftGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LimitGift.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLimitGiftGetInfoRsp : public ::google::protobuf::Message {
 public:
  TLimitGiftGetInfoRsp();
  virtual ~TLimitGiftGetInfoRsp();

  TLimitGiftGetInfoRsp(const TLimitGiftGetInfoRsp& from);

  inline TLimitGiftGetInfoRsp& operator=(const TLimitGiftGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLimitGiftGetInfoRsp& default_instance();

  void Swap(TLimitGiftGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TLimitGiftGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLimitGiftGetInfoRsp& from);
  void MergeFrom(const TLimitGiftGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGiftInfo ArrGiftInfo = 1;
  inline int arrgiftinfo_size() const;
  inline void clear_arrgiftinfo();
  static const int kArrGiftInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLimitGiftGetInfoRsp</name>
  	<Function>
  		<name>arrgiftinfo</name>
  		<replaceName>ArrGiftInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrgiftinfo</name>
  		<replaceName>ArrGiftInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrgiftinfo</name>
  		<replaceName>ArrGiftInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrgiftinfo</name>
  		<replaceName>ArrGiftInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrgiftinfo_size</name>
  		<replaceName>ArrGiftInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGiftInfo& arrgiftinfo(int index) const;
  inline ::pb::TGiftInfo* mutable_arrgiftinfo(int index);
  inline ::pb::TGiftInfo* add_arrgiftinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGiftInfo >&
      arrgiftinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGiftInfo >*
      mutable_arrgiftinfo();

  // @@protoc_insertion_point(class_scope:pb.TLimitGiftGetInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGiftInfo > arrgiftinfo_;
  friend void  protobuf_AddDesc_net_2fLimitGift_2eproto();
  friend void protobuf_AssignDesc_net_2fLimitGift_2eproto();
  friend void protobuf_ShutdownFile_net_2fLimitGift_2eproto();

  void InitAsDefaultInstance();
  static TLimitGiftGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLimitGiftInfoNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/LimitGift.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLimitGiftInfoNotify : public ::google::protobuf::Message {
 public:
  TLimitGiftInfoNotify();
  virtual ~TLimitGiftInfoNotify();

  TLimitGiftInfoNotify(const TLimitGiftInfoNotify& from);

  inline TLimitGiftInfoNotify& operator=(const TLimitGiftInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLimitGiftInfoNotify& default_instance();

  void Swap(TLimitGiftInfoNotify* other);

  // implements Message ----------------------------------------------

  TLimitGiftInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLimitGiftInfoNotify& from);
  void MergeFrom(const TLimitGiftInfoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TGiftInfo GiftInfo = 1;
  inline bool has_giftinfo() const;
  inline void clear_giftinfo();
  static const int kGiftInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLimitGiftInfoNotify</name>
  	<Function>
  		<name>giftinfo</name>
  		<replaceName>GiftInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_giftinfo</name>
  		<replaceName>GiftInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_giftinfo</name>
  		<replaceName>GiftInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_giftinfo</name>
  		<replaceName>GiftInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGiftInfo& giftinfo() const;
  inline ::pb::TGiftInfo* mutable_giftinfo();
  inline ::pb::TGiftInfo* release_giftinfo();
  inline void set_allocated_giftinfo(::pb::TGiftInfo* giftinfo);

  // @@protoc_insertion_point(class_scope:pb.TLimitGiftInfoNotify)
 private:
  inline void set_has_giftinfo();
  inline void clear_has_giftinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGiftInfo* giftinfo_;
  friend void  protobuf_AddDesc_net_2fLimitGift_2eproto();
  friend void protobuf_AssignDesc_net_2fLimitGift_2eproto();
  friend void protobuf_ShutdownFile_net_2fLimitGift_2eproto();

  void InitAsDefaultInstance();
  static TLimitGiftInfoNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TGiftInfo

// optional uint32 GiftId = 1;
inline bool TGiftInfo::has_giftid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGiftInfo::set_has_giftid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGiftInfo::clear_has_giftid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGiftInfo::clear_giftid() {
  giftid_ = 0u;
  clear_has_giftid();
}
inline ::google::protobuf::uint32 TGiftInfo::giftid() const {
  // @@protoc_insertion_point(field_get:pb.TGiftInfo.GiftId)
  return giftid_;
}
inline void TGiftInfo::set_giftid(::google::protobuf::uint32 value) {
  set_has_giftid();
  giftid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGiftInfo.GiftId)
}

// optional uint32 BuyNum = 2;
inline bool TGiftInfo::has_buynum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGiftInfo::set_has_buynum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGiftInfo::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGiftInfo::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 TGiftInfo::buynum() const {
  // @@protoc_insertion_point(field_get:pb.TGiftInfo.BuyNum)
  return buynum_;
}
inline void TGiftInfo::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGiftInfo.BuyNum)
}

// -------------------------------------------------------------------

// TLimitGiftGetInfoRsp

// repeated .pb.TGiftInfo ArrGiftInfo = 1;
inline int TLimitGiftGetInfoRsp::arrgiftinfo_size() const {
  return arrgiftinfo_.size();
}
inline void TLimitGiftGetInfoRsp::clear_arrgiftinfo() {
  arrgiftinfo_.Clear();
}
inline const ::pb::TGiftInfo& TLimitGiftGetInfoRsp::arrgiftinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLimitGiftGetInfoRsp.ArrGiftInfo)
  return arrgiftinfo_.Get(index);
}
inline ::pb::TGiftInfo* TLimitGiftGetInfoRsp::mutable_arrgiftinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLimitGiftGetInfoRsp.ArrGiftInfo)
  return arrgiftinfo_.Mutable(index);
}
inline ::pb::TGiftInfo* TLimitGiftGetInfoRsp::add_arrgiftinfo() {
  // @@protoc_insertion_point(field_add:pb.TLimitGiftGetInfoRsp.ArrGiftInfo)
  return arrgiftinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGiftInfo >&
TLimitGiftGetInfoRsp::arrgiftinfo() const {
  // @@protoc_insertion_point(field_list:pb.TLimitGiftGetInfoRsp.ArrGiftInfo)
  return arrgiftinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGiftInfo >*
TLimitGiftGetInfoRsp::mutable_arrgiftinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLimitGiftGetInfoRsp.ArrGiftInfo)
  return &arrgiftinfo_;
}

// -------------------------------------------------------------------

// TLimitGiftInfoNotify

// optional .pb.TGiftInfo GiftInfo = 1;
inline bool TLimitGiftInfoNotify::has_giftinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLimitGiftInfoNotify::set_has_giftinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLimitGiftInfoNotify::clear_has_giftinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLimitGiftInfoNotify::clear_giftinfo() {
  if (giftinfo_ != NULL) giftinfo_->::pb::TGiftInfo::Clear();
  clear_has_giftinfo();
}
inline const ::pb::TGiftInfo& TLimitGiftInfoNotify::giftinfo() const {
  // @@protoc_insertion_point(field_get:pb.TLimitGiftInfoNotify.GiftInfo)
  return giftinfo_ != NULL ? *giftinfo_ : *default_instance_->giftinfo_;
}
inline ::pb::TGiftInfo* TLimitGiftInfoNotify::mutable_giftinfo() {
  set_has_giftinfo();
  if (giftinfo_ == NULL) giftinfo_ = new ::pb::TGiftInfo;
  // @@protoc_insertion_point(field_mutable:pb.TLimitGiftInfoNotify.GiftInfo)
  return giftinfo_;
}
inline ::pb::TGiftInfo* TLimitGiftInfoNotify::release_giftinfo() {
  clear_has_giftinfo();
  ::pb::TGiftInfo* temp = giftinfo_;
  giftinfo_ = NULL;
  return temp;
}
inline void TLimitGiftInfoNotify::set_allocated_giftinfo(::pb::TGiftInfo* giftinfo) {
  delete giftinfo_;
  giftinfo_ = giftinfo;
  if (giftinfo) {
    set_has_giftinfo();
  } else {
    clear_has_giftinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLimitGiftInfoNotify.GiftInfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fLimitGift_2eproto__INCLUDED
