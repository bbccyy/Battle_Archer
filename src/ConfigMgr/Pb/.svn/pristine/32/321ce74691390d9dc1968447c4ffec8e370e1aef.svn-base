// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Friend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Friend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TFriendFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendGetSimpleInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendGetSimpleInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendGetSimpleInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendGetSimpleInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendGetFriendListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendGetFriendListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendGetFriendListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendGetFriendListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendGetFriendsInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendGetFriendsInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendGetFriendsInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendGetFriendsInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendGetBlackListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendGetBlackListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendGetBlackListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendGetBlackListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendGetRecommendFriendsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendGetRecommendFriendsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendGetRecommendFriendsRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendGetRecommendFriendsRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendGetRecommendByNameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendGetRecommendByNameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendGetRecommendByNameRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendGetRecommendByNameRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendGetRecommendByCaesarUniqueIdReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendGetRecommendByCaesarUniqueIdReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendGetRecommendByCaesarUniqueIdRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendGetRecommendByCaesarUniqueIdRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendGetAppliedListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendGetAppliedListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendGetAppliedListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendGetAppliedListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendAddFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendAddFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendAddApplyUserFromOtherServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendAddApplyUserFromOtherServerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendDelFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendDelFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendRejectApplyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendRejectApplyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendAgreeApplyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendAgreeApplyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendAgreeApplyFromOtherServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendAgreeApplyFromOtherServerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendIsFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendIsFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendIsFriendRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendIsFriendRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendAddBlackReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendAddBlackReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendDelBlackReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendDelBlackReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendIsBlackReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendIsBlackReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendIsBlackRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendIsBlackRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendAgreeAllApplyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendAgreeAllApplyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendAgreeAllApplyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendAgreeAllApplyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendRejectAllApplyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendRejectAllApplyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendSendGiftToFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendSendGiftToFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendSendGiftToFriendByOtherServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendSendGiftToFriendByOtherServerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendSendGiftToAllFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendSendGiftToAllFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendSendGiftToAllFriendRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendSendGiftToAllFriendRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendReceiveFriendGiftReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendReceiveFriendGiftReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendReceiveAllGiftReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendReceiveAllGiftReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendReceiveAllGiftRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendReceiveAllGiftRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendGetCheckInfoByOtherServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendGetCheckInfoByOtherServerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendGetCheckInfoByOtherServerRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendGetCheckInfoByOtherServerRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendAddBlackByOtherServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendAddBlackByOtherServerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendDelFriendByOtherServerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendDelFriendByOtherServerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EFriendReceiveStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fFriend_2eproto() {
  protobuf_AddDesc_net_2fFriend_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Friend.proto");
  GOOGLE_CHECK(file != NULL);
  TFriendFriendInfo_descriptor_ = file->message_type(0);
  static const int TFriendFriendInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendFriendInfo, friendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendFriendInfo, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendFriendInfo, gettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendFriendInfo, receivestatus_),
  };
  TFriendFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendFriendInfo_descriptor_,
      TFriendFriendInfo::default_instance_,
      TFriendFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendFriendInfo));
  TFriendGetSimpleInfoReq_descriptor_ = file->message_type(1);
  static const int TFriendGetSimpleInfoReq_offsets_[1] = {
  };
  TFriendGetSimpleInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendGetSimpleInfoReq_descriptor_,
      TFriendGetSimpleInfoReq::default_instance_,
      TFriendGetSimpleInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetSimpleInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetSimpleInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendGetSimpleInfoReq));
  TFriendGetSimpleInfoRsp_descriptor_ = file->message_type(2);
  static const int TFriendGetSimpleInfoRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetSimpleInfoRsp, sendnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetSimpleInfoRsp, receivenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetSimpleInfoRsp, frienduids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetSimpleInfoRsp, blackuids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetSimpleInfoRsp, applieduids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetSimpleInfoRsp, canreceiveuids_),
  };
  TFriendGetSimpleInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendGetSimpleInfoRsp_descriptor_,
      TFriendGetSimpleInfoRsp::default_instance_,
      TFriendGetSimpleInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetSimpleInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetSimpleInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendGetSimpleInfoRsp));
  TFriendGetFriendListReq_descriptor_ = file->message_type(3);
  static const int TFriendGetFriendListReq_offsets_[1] = {
  };
  TFriendGetFriendListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendGetFriendListReq_descriptor_,
      TFriendGetFriendListReq::default_instance_,
      TFriendGetFriendListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetFriendListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetFriendListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendGetFriendListReq));
  TFriendGetFriendListRsp_descriptor_ = file->message_type(4);
  static const int TFriendGetFriendListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetFriendListRsp, friendarray_),
  };
  TFriendGetFriendListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendGetFriendListRsp_descriptor_,
      TFriendGetFriendListRsp::default_instance_,
      TFriendGetFriendListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetFriendListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetFriendListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendGetFriendListRsp));
  TFriendGetFriendsInfoReq_descriptor_ = file->message_type(5);
  static const int TFriendGetFriendsInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetFriendsInfoReq, fuids_),
  };
  TFriendGetFriendsInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendGetFriendsInfoReq_descriptor_,
      TFriendGetFriendsInfoReq::default_instance_,
      TFriendGetFriendsInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetFriendsInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetFriendsInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendGetFriendsInfoReq));
  TFriendGetFriendsInfoRsp_descriptor_ = file->message_type(6);
  static const int TFriendGetFriendsInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetFriendsInfoRsp, friendarray_),
  };
  TFriendGetFriendsInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendGetFriendsInfoRsp_descriptor_,
      TFriendGetFriendsInfoRsp::default_instance_,
      TFriendGetFriendsInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetFriendsInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetFriendsInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendGetFriendsInfoRsp));
  TFriendGetBlackListReq_descriptor_ = file->message_type(7);
  static const int TFriendGetBlackListReq_offsets_[1] = {
  };
  TFriendGetBlackListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendGetBlackListReq_descriptor_,
      TFriendGetBlackListReq::default_instance_,
      TFriendGetBlackListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetBlackListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetBlackListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendGetBlackListReq));
  TFriendGetBlackListRsp_descriptor_ = file->message_type(8);
  static const int TFriendGetBlackListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetBlackListRsp, blackarray_),
  };
  TFriendGetBlackListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendGetBlackListRsp_descriptor_,
      TFriendGetBlackListRsp::default_instance_,
      TFriendGetBlackListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetBlackListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetBlackListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendGetBlackListRsp));
  TFriendGetRecommendFriendsReq_descriptor_ = file->message_type(9);
  static const int TFriendGetRecommendFriendsReq_offsets_[1] = {
  };
  TFriendGetRecommendFriendsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendGetRecommendFriendsReq_descriptor_,
      TFriendGetRecommendFriendsReq::default_instance_,
      TFriendGetRecommendFriendsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetRecommendFriendsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetRecommendFriendsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendGetRecommendFriendsReq));
  TFriendGetRecommendFriendsRsp_descriptor_ = file->message_type(10);
  static const int TFriendGetRecommendFriendsRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetRecommendFriendsRsp, recommendarray_),
  };
  TFriendGetRecommendFriendsRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendGetRecommendFriendsRsp_descriptor_,
      TFriendGetRecommendFriendsRsp::default_instance_,
      TFriendGetRecommendFriendsRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetRecommendFriendsRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetRecommendFriendsRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendGetRecommendFriendsRsp));
  TFriendGetRecommendByNameReq_descriptor_ = file->message_type(11);
  static const int TFriendGetRecommendByNameReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetRecommendByNameReq, uname_),
  };
  TFriendGetRecommendByNameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendGetRecommendByNameReq_descriptor_,
      TFriendGetRecommendByNameReq::default_instance_,
      TFriendGetRecommendByNameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetRecommendByNameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetRecommendByNameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendGetRecommendByNameReq));
  TFriendGetRecommendByNameRsp_descriptor_ = file->message_type(12);
  static const int TFriendGetRecommendByNameRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetRecommendByNameRsp, recommendarray_),
  };
  TFriendGetRecommendByNameRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendGetRecommendByNameRsp_descriptor_,
      TFriendGetRecommendByNameRsp::default_instance_,
      TFriendGetRecommendByNameRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetRecommendByNameRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetRecommendByNameRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendGetRecommendByNameRsp));
  TFriendGetRecommendByCaesarUniqueIdReq_descriptor_ = file->message_type(13);
  static const int TFriendGetRecommendByCaesarUniqueIdReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetRecommendByCaesarUniqueIdReq, caesaruniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetRecommendByCaesarUniqueIdReq, serverid_),
  };
  TFriendGetRecommendByCaesarUniqueIdReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendGetRecommendByCaesarUniqueIdReq_descriptor_,
      TFriendGetRecommendByCaesarUniqueIdReq::default_instance_,
      TFriendGetRecommendByCaesarUniqueIdReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetRecommendByCaesarUniqueIdReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetRecommendByCaesarUniqueIdReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendGetRecommendByCaesarUniqueIdReq));
  TFriendGetRecommendByCaesarUniqueIdRsp_descriptor_ = file->message_type(14);
  static const int TFriendGetRecommendByCaesarUniqueIdRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetRecommendByCaesarUniqueIdRsp, recommendarray_),
  };
  TFriendGetRecommendByCaesarUniqueIdRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendGetRecommendByCaesarUniqueIdRsp_descriptor_,
      TFriendGetRecommendByCaesarUniqueIdRsp::default_instance_,
      TFriendGetRecommendByCaesarUniqueIdRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetRecommendByCaesarUniqueIdRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetRecommendByCaesarUniqueIdRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendGetRecommendByCaesarUniqueIdRsp));
  TFriendGetAppliedListReq_descriptor_ = file->message_type(15);
  static const int TFriendGetAppliedListReq_offsets_[1] = {
  };
  TFriendGetAppliedListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendGetAppliedListReq_descriptor_,
      TFriendGetAppliedListReq::default_instance_,
      TFriendGetAppliedListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetAppliedListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetAppliedListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendGetAppliedListReq));
  TFriendGetAppliedListRsp_descriptor_ = file->message_type(16);
  static const int TFriendGetAppliedListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetAppliedListRsp, appliedarray_),
  };
  TFriendGetAppliedListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendGetAppliedListRsp_descriptor_,
      TFriendGetAppliedListRsp::default_instance_,
      TFriendGetAppliedListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetAppliedListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetAppliedListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendGetAppliedListRsp));
  TFriendAddFriendReq_descriptor_ = file->message_type(17);
  static const int TFriendAddFriendReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAddFriendReq, fuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAddFriendReq, serverid_),
  };
  TFriendAddFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendAddFriendReq_descriptor_,
      TFriendAddFriendReq::default_instance_,
      TFriendAddFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAddFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAddFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendAddFriendReq));
  TFriendAddApplyUserFromOtherServerReq_descriptor_ = file->message_type(18);
  static const int TFriendAddApplyUserFromOtherServerReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAddApplyUserFromOtherServerReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAddApplyUserFromOtherServerReq, fuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAddApplyUserFromOtherServerReq, fserverid_),
  };
  TFriendAddApplyUserFromOtherServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendAddApplyUserFromOtherServerReq_descriptor_,
      TFriendAddApplyUserFromOtherServerReq::default_instance_,
      TFriendAddApplyUserFromOtherServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAddApplyUserFromOtherServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAddApplyUserFromOtherServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendAddApplyUserFromOtherServerReq));
  TFriendDelFriendReq_descriptor_ = file->message_type(19);
  static const int TFriendDelFriendReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendDelFriendReq, fuid_),
  };
  TFriendDelFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendDelFriendReq_descriptor_,
      TFriendDelFriendReq::default_instance_,
      TFriendDelFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendDelFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendDelFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendDelFriendReq));
  TFriendRejectApplyReq_descriptor_ = file->message_type(20);
  static const int TFriendRejectApplyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendRejectApplyReq, fuid_),
  };
  TFriendRejectApplyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendRejectApplyReq_descriptor_,
      TFriendRejectApplyReq::default_instance_,
      TFriendRejectApplyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendRejectApplyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendRejectApplyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendRejectApplyReq));
  TFriendAgreeApplyReq_descriptor_ = file->message_type(21);
  static const int TFriendAgreeApplyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAgreeApplyReq, fuid_),
  };
  TFriendAgreeApplyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendAgreeApplyReq_descriptor_,
      TFriendAgreeApplyReq::default_instance_,
      TFriendAgreeApplyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAgreeApplyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAgreeApplyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendAgreeApplyReq));
  TFriendAgreeApplyFromOtherServerReq_descriptor_ = file->message_type(22);
  static const int TFriendAgreeApplyFromOtherServerReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAgreeApplyFromOtherServerReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAgreeApplyFromOtherServerReq, fuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAgreeApplyFromOtherServerReq, fserverid_),
  };
  TFriendAgreeApplyFromOtherServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendAgreeApplyFromOtherServerReq_descriptor_,
      TFriendAgreeApplyFromOtherServerReq::default_instance_,
      TFriendAgreeApplyFromOtherServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAgreeApplyFromOtherServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAgreeApplyFromOtherServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendAgreeApplyFromOtherServerReq));
  TFriendIsFriendReq_descriptor_ = file->message_type(23);
  static const int TFriendIsFriendReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendIsFriendReq, fuid_),
  };
  TFriendIsFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendIsFriendReq_descriptor_,
      TFriendIsFriendReq::default_instance_,
      TFriendIsFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendIsFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendIsFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendIsFriendReq));
  TFriendIsFriendRsp_descriptor_ = file->message_type(24);
  static const int TFriendIsFriendRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendIsFriendRsp, isfriend_),
  };
  TFriendIsFriendRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendIsFriendRsp_descriptor_,
      TFriendIsFriendRsp::default_instance_,
      TFriendIsFriendRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendIsFriendRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendIsFriendRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendIsFriendRsp));
  TFriendAddBlackReq_descriptor_ = file->message_type(25);
  static const int TFriendAddBlackReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAddBlackReq, buid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAddBlackReq, serverid_),
  };
  TFriendAddBlackReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendAddBlackReq_descriptor_,
      TFriendAddBlackReq::default_instance_,
      TFriendAddBlackReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAddBlackReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAddBlackReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendAddBlackReq));
  TFriendDelBlackReq_descriptor_ = file->message_type(26);
  static const int TFriendDelBlackReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendDelBlackReq, buid_),
  };
  TFriendDelBlackReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendDelBlackReq_descriptor_,
      TFriendDelBlackReq::default_instance_,
      TFriendDelBlackReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendDelBlackReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendDelBlackReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendDelBlackReq));
  TFriendIsBlackReq_descriptor_ = file->message_type(27);
  static const int TFriendIsBlackReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendIsBlackReq, buid_),
  };
  TFriendIsBlackReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendIsBlackReq_descriptor_,
      TFriendIsBlackReq::default_instance_,
      TFriendIsBlackReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendIsBlackReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendIsBlackReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendIsBlackReq));
  TFriendIsBlackRsp_descriptor_ = file->message_type(28);
  static const int TFriendIsBlackRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendIsBlackRsp, isblack_),
  };
  TFriendIsBlackRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendIsBlackRsp_descriptor_,
      TFriendIsBlackRsp::default_instance_,
      TFriendIsBlackRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendIsBlackRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendIsBlackRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendIsBlackRsp));
  TFriendAgreeAllApplyReq_descriptor_ = file->message_type(29);
  static const int TFriendAgreeAllApplyReq_offsets_[1] = {
  };
  TFriendAgreeAllApplyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendAgreeAllApplyReq_descriptor_,
      TFriendAgreeAllApplyReq::default_instance_,
      TFriendAgreeAllApplyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAgreeAllApplyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAgreeAllApplyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendAgreeAllApplyReq));
  TFriendAgreeAllApplyRsp_descriptor_ = file->message_type(30);
  static const int TFriendAgreeAllApplyRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAgreeAllApplyRsp, addnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAgreeAllApplyRsp, adduidarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAgreeAllApplyRsp, failuidarray_),
  };
  TFriendAgreeAllApplyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendAgreeAllApplyRsp_descriptor_,
      TFriendAgreeAllApplyRsp::default_instance_,
      TFriendAgreeAllApplyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAgreeAllApplyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAgreeAllApplyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendAgreeAllApplyRsp));
  TFriendRejectAllApplyReq_descriptor_ = file->message_type(31);
  static const int TFriendRejectAllApplyReq_offsets_[1] = {
  };
  TFriendRejectAllApplyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendRejectAllApplyReq_descriptor_,
      TFriendRejectAllApplyReq::default_instance_,
      TFriendRejectAllApplyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendRejectAllApplyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendRejectAllApplyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendRejectAllApplyReq));
  TFriendSendGiftToFriendReq_descriptor_ = file->message_type(32);
  static const int TFriendSendGiftToFriendReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendSendGiftToFriendReq, fuid_),
  };
  TFriendSendGiftToFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendSendGiftToFriendReq_descriptor_,
      TFriendSendGiftToFriendReq::default_instance_,
      TFriendSendGiftToFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendSendGiftToFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendSendGiftToFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendSendGiftToFriendReq));
  TFriendSendGiftToFriendByOtherServerReq_descriptor_ = file->message_type(33);
  static const int TFriendSendGiftToFriendByOtherServerReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendSendGiftToFriendByOtherServerReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendSendGiftToFriendByOtherServerReq, fuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendSendGiftToFriendByOtherServerReq, fserverid_),
  };
  TFriendSendGiftToFriendByOtherServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendSendGiftToFriendByOtherServerReq_descriptor_,
      TFriendSendGiftToFriendByOtherServerReq::default_instance_,
      TFriendSendGiftToFriendByOtherServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendSendGiftToFriendByOtherServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendSendGiftToFriendByOtherServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendSendGiftToFriendByOtherServerReq));
  TFriendSendGiftToAllFriendReq_descriptor_ = file->message_type(34);
  static const int TFriendSendGiftToAllFriendReq_offsets_[1] = {
  };
  TFriendSendGiftToAllFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendSendGiftToAllFriendReq_descriptor_,
      TFriendSendGiftToAllFriendReq::default_instance_,
      TFriendSendGiftToAllFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendSendGiftToAllFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendSendGiftToAllFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendSendGiftToAllFriendReq));
  TFriendSendGiftToAllFriendRsp_descriptor_ = file->message_type(35);
  static const int TFriendSendGiftToAllFriendRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendSendGiftToAllFriendRsp, senduids_),
  };
  TFriendSendGiftToAllFriendRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendSendGiftToAllFriendRsp_descriptor_,
      TFriendSendGiftToAllFriendRsp::default_instance_,
      TFriendSendGiftToAllFriendRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendSendGiftToAllFriendRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendSendGiftToAllFriendRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendSendGiftToAllFriendRsp));
  TFriendReceiveFriendGiftReq_descriptor_ = file->message_type(36);
  static const int TFriendReceiveFriendGiftReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendReceiveFriendGiftReq, fuid_),
  };
  TFriendReceiveFriendGiftReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendReceiveFriendGiftReq_descriptor_,
      TFriendReceiveFriendGiftReq::default_instance_,
      TFriendReceiveFriendGiftReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendReceiveFriendGiftReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendReceiveFriendGiftReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendReceiveFriendGiftReq));
  TFriendReceiveAllGiftReq_descriptor_ = file->message_type(37);
  static const int TFriendReceiveAllGiftReq_offsets_[1] = {
  };
  TFriendReceiveAllGiftReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendReceiveAllGiftReq_descriptor_,
      TFriendReceiveAllGiftReq::default_instance_,
      TFriendReceiveAllGiftReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendReceiveAllGiftReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendReceiveAllGiftReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendReceiveAllGiftReq));
  TFriendReceiveAllGiftRsp_descriptor_ = file->message_type(38);
  static const int TFriendReceiveAllGiftRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendReceiveAllGiftRsp, receiveuids_),
  };
  TFriendReceiveAllGiftRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendReceiveAllGiftRsp_descriptor_,
      TFriendReceiveAllGiftRsp::default_instance_,
      TFriendReceiveAllGiftRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendReceiveAllGiftRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendReceiveAllGiftRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendReceiveAllGiftRsp));
  TFriendGetCheckInfoByOtherServerReq_descriptor_ = file->message_type(39);
  static const int TFriendGetCheckInfoByOtherServerReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetCheckInfoByOtherServerReq, fuid_),
  };
  TFriendGetCheckInfoByOtherServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendGetCheckInfoByOtherServerReq_descriptor_,
      TFriendGetCheckInfoByOtherServerReq::default_instance_,
      TFriendGetCheckInfoByOtherServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetCheckInfoByOtherServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetCheckInfoByOtherServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendGetCheckInfoByOtherServerReq));
  TFriendGetCheckInfoByOtherServerRsp_descriptor_ = file->message_type(40);
  static const int TFriendGetCheckInfoByOtherServerRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetCheckInfoByOtherServerRsp, instanceserialnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetCheckInfoByOtherServerRsp, level_),
  };
  TFriendGetCheckInfoByOtherServerRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendGetCheckInfoByOtherServerRsp_descriptor_,
      TFriendGetCheckInfoByOtherServerRsp::default_instance_,
      TFriendGetCheckInfoByOtherServerRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetCheckInfoByOtherServerRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendGetCheckInfoByOtherServerRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendGetCheckInfoByOtherServerRsp));
  TFriendAddBlackByOtherServerReq_descriptor_ = file->message_type(41);
  static const int TFriendAddBlackByOtherServerReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAddBlackByOtherServerReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAddBlackByOtherServerReq, fuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAddBlackByOtherServerReq, fserverid_),
  };
  TFriendAddBlackByOtherServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendAddBlackByOtherServerReq_descriptor_,
      TFriendAddBlackByOtherServerReq::default_instance_,
      TFriendAddBlackByOtherServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAddBlackByOtherServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendAddBlackByOtherServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendAddBlackByOtherServerReq));
  TFriendDelFriendByOtherServerReq_descriptor_ = file->message_type(42);
  static const int TFriendDelFriendByOtherServerReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendDelFriendByOtherServerReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendDelFriendByOtherServerReq, fuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendDelFriendByOtherServerReq, fserverid_),
  };
  TFriendDelFriendByOtherServerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendDelFriendByOtherServerReq_descriptor_,
      TFriendDelFriendByOtherServerReq::default_instance_,
      TFriendDelFriendByOtherServerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendDelFriendByOtherServerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendDelFriendByOtherServerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendDelFriendByOtherServerReq));
  TFriendNotify_descriptor_ = file->message_type(43);
  static const int TFriendNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendNotify, newfrienduids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendNotify, deletefrienduids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendNotify, newapplieduids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendNotify, deleteapplieduids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendNotify, friendsenduids_),
  };
  TFriendNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendNotify_descriptor_,
      TFriendNotify::default_instance_,
      TFriendNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendNotify));
  EFriendReceiveStatus_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fFriend_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendFriendInfo_descriptor_, &TFriendFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendGetSimpleInfoReq_descriptor_, &TFriendGetSimpleInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendGetSimpleInfoRsp_descriptor_, &TFriendGetSimpleInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendGetFriendListReq_descriptor_, &TFriendGetFriendListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendGetFriendListRsp_descriptor_, &TFriendGetFriendListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendGetFriendsInfoReq_descriptor_, &TFriendGetFriendsInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendGetFriendsInfoRsp_descriptor_, &TFriendGetFriendsInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendGetBlackListReq_descriptor_, &TFriendGetBlackListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendGetBlackListRsp_descriptor_, &TFriendGetBlackListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendGetRecommendFriendsReq_descriptor_, &TFriendGetRecommendFriendsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendGetRecommendFriendsRsp_descriptor_, &TFriendGetRecommendFriendsRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendGetRecommendByNameReq_descriptor_, &TFriendGetRecommendByNameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendGetRecommendByNameRsp_descriptor_, &TFriendGetRecommendByNameRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendGetRecommendByCaesarUniqueIdReq_descriptor_, &TFriendGetRecommendByCaesarUniqueIdReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendGetRecommendByCaesarUniqueIdRsp_descriptor_, &TFriendGetRecommendByCaesarUniqueIdRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendGetAppliedListReq_descriptor_, &TFriendGetAppliedListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendGetAppliedListRsp_descriptor_, &TFriendGetAppliedListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendAddFriendReq_descriptor_, &TFriendAddFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendAddApplyUserFromOtherServerReq_descriptor_, &TFriendAddApplyUserFromOtherServerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendDelFriendReq_descriptor_, &TFriendDelFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendRejectApplyReq_descriptor_, &TFriendRejectApplyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendAgreeApplyReq_descriptor_, &TFriendAgreeApplyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendAgreeApplyFromOtherServerReq_descriptor_, &TFriendAgreeApplyFromOtherServerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendIsFriendReq_descriptor_, &TFriendIsFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendIsFriendRsp_descriptor_, &TFriendIsFriendRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendAddBlackReq_descriptor_, &TFriendAddBlackReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendDelBlackReq_descriptor_, &TFriendDelBlackReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendIsBlackReq_descriptor_, &TFriendIsBlackReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendIsBlackRsp_descriptor_, &TFriendIsBlackRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendAgreeAllApplyReq_descriptor_, &TFriendAgreeAllApplyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendAgreeAllApplyRsp_descriptor_, &TFriendAgreeAllApplyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendRejectAllApplyReq_descriptor_, &TFriendRejectAllApplyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendSendGiftToFriendReq_descriptor_, &TFriendSendGiftToFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendSendGiftToFriendByOtherServerReq_descriptor_, &TFriendSendGiftToFriendByOtherServerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendSendGiftToAllFriendReq_descriptor_, &TFriendSendGiftToAllFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendSendGiftToAllFriendRsp_descriptor_, &TFriendSendGiftToAllFriendRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendReceiveFriendGiftReq_descriptor_, &TFriendReceiveFriendGiftReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendReceiveAllGiftReq_descriptor_, &TFriendReceiveAllGiftReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendReceiveAllGiftRsp_descriptor_, &TFriendReceiveAllGiftRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendGetCheckInfoByOtherServerReq_descriptor_, &TFriendGetCheckInfoByOtherServerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendGetCheckInfoByOtherServerRsp_descriptor_, &TFriendGetCheckInfoByOtherServerRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendAddBlackByOtherServerReq_descriptor_, &TFriendAddBlackByOtherServerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendDelFriendByOtherServerReq_descriptor_, &TFriendDelFriendByOtherServerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendNotify_descriptor_, &TFriendNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fFriend_2eproto() {
  delete TFriendFriendInfo::default_instance_;
  delete TFriendFriendInfo_reflection_;
  delete TFriendGetSimpleInfoReq::default_instance_;
  delete TFriendGetSimpleInfoReq_reflection_;
  delete TFriendGetSimpleInfoRsp::default_instance_;
  delete TFriendGetSimpleInfoRsp_reflection_;
  delete TFriendGetFriendListReq::default_instance_;
  delete TFriendGetFriendListReq_reflection_;
  delete TFriendGetFriendListRsp::default_instance_;
  delete TFriendGetFriendListRsp_reflection_;
  delete TFriendGetFriendsInfoReq::default_instance_;
  delete TFriendGetFriendsInfoReq_reflection_;
  delete TFriendGetFriendsInfoRsp::default_instance_;
  delete TFriendGetFriendsInfoRsp_reflection_;
  delete TFriendGetBlackListReq::default_instance_;
  delete TFriendGetBlackListReq_reflection_;
  delete TFriendGetBlackListRsp::default_instance_;
  delete TFriendGetBlackListRsp_reflection_;
  delete TFriendGetRecommendFriendsReq::default_instance_;
  delete TFriendGetRecommendFriendsReq_reflection_;
  delete TFriendGetRecommendFriendsRsp::default_instance_;
  delete TFriendGetRecommendFriendsRsp_reflection_;
  delete TFriendGetRecommendByNameReq::default_instance_;
  delete TFriendGetRecommendByNameReq_reflection_;
  delete TFriendGetRecommendByNameRsp::default_instance_;
  delete TFriendGetRecommendByNameRsp_reflection_;
  delete TFriendGetRecommendByCaesarUniqueIdReq::default_instance_;
  delete TFriendGetRecommendByCaesarUniqueIdReq_reflection_;
  delete TFriendGetRecommendByCaesarUniqueIdRsp::default_instance_;
  delete TFriendGetRecommendByCaesarUniqueIdRsp_reflection_;
  delete TFriendGetAppliedListReq::default_instance_;
  delete TFriendGetAppliedListReq_reflection_;
  delete TFriendGetAppliedListRsp::default_instance_;
  delete TFriendGetAppliedListRsp_reflection_;
  delete TFriendAddFriendReq::default_instance_;
  delete TFriendAddFriendReq_reflection_;
  delete TFriendAddApplyUserFromOtherServerReq::default_instance_;
  delete TFriendAddApplyUserFromOtherServerReq_reflection_;
  delete TFriendDelFriendReq::default_instance_;
  delete TFriendDelFriendReq_reflection_;
  delete TFriendRejectApplyReq::default_instance_;
  delete TFriendRejectApplyReq_reflection_;
  delete TFriendAgreeApplyReq::default_instance_;
  delete TFriendAgreeApplyReq_reflection_;
  delete TFriendAgreeApplyFromOtherServerReq::default_instance_;
  delete TFriendAgreeApplyFromOtherServerReq_reflection_;
  delete TFriendIsFriendReq::default_instance_;
  delete TFriendIsFriendReq_reflection_;
  delete TFriendIsFriendRsp::default_instance_;
  delete TFriendIsFriendRsp_reflection_;
  delete TFriendAddBlackReq::default_instance_;
  delete TFriendAddBlackReq_reflection_;
  delete TFriendDelBlackReq::default_instance_;
  delete TFriendDelBlackReq_reflection_;
  delete TFriendIsBlackReq::default_instance_;
  delete TFriendIsBlackReq_reflection_;
  delete TFriendIsBlackRsp::default_instance_;
  delete TFriendIsBlackRsp_reflection_;
  delete TFriendAgreeAllApplyReq::default_instance_;
  delete TFriendAgreeAllApplyReq_reflection_;
  delete TFriendAgreeAllApplyRsp::default_instance_;
  delete TFriendAgreeAllApplyRsp_reflection_;
  delete TFriendRejectAllApplyReq::default_instance_;
  delete TFriendRejectAllApplyReq_reflection_;
  delete TFriendSendGiftToFriendReq::default_instance_;
  delete TFriendSendGiftToFriendReq_reflection_;
  delete TFriendSendGiftToFriendByOtherServerReq::default_instance_;
  delete TFriendSendGiftToFriendByOtherServerReq_reflection_;
  delete TFriendSendGiftToAllFriendReq::default_instance_;
  delete TFriendSendGiftToAllFriendReq_reflection_;
  delete TFriendSendGiftToAllFriendRsp::default_instance_;
  delete TFriendSendGiftToAllFriendRsp_reflection_;
  delete TFriendReceiveFriendGiftReq::default_instance_;
  delete TFriendReceiveFriendGiftReq_reflection_;
  delete TFriendReceiveAllGiftReq::default_instance_;
  delete TFriendReceiveAllGiftReq_reflection_;
  delete TFriendReceiveAllGiftRsp::default_instance_;
  delete TFriendReceiveAllGiftRsp_reflection_;
  delete TFriendGetCheckInfoByOtherServerReq::default_instance_;
  delete TFriendGetCheckInfoByOtherServerReq_reflection_;
  delete TFriendGetCheckInfoByOtherServerRsp::default_instance_;
  delete TFriendGetCheckInfoByOtherServerRsp_reflection_;
  delete TFriendAddBlackByOtherServerReq::default_instance_;
  delete TFriendAddBlackByOtherServerReq_reflection_;
  delete TFriendDelFriendByOtherServerReq::default_instance_;
  delete TFriendDelFriendByOtherServerReq_reflection_;
  delete TFriendNotify::default_instance_;
  delete TFriendNotify_reflection_;
}

void protobuf_AddDesc_net_2fFriend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020net/Friend.proto\022\002pb\032\016net/User.proto\"\200"
    "\001\n\021TFriendFriendInfo\0221\n\nFriendInfo\030\001 \001(\013"
    "2\035.pb.TUserSimpleInfoWithStatus\022\020\n\010SendT"
    "ime\030\002 \001(\004\022\017\n\007GetTime\030\003 \001(\004\022\025\n\rReceiveSta"
    "tus\030\004 \001(\r\"\031\n\027TFriendGetSimpleInfoReq\"\222\001\n"
    "\027TFriendGetSimpleInfoRsp\022\017\n\007SendNum\030\001 \001("
    "\r\022\022\n\nReceiveNum\030\002 \001(\r\022\022\n\nFriendUids\030\003 \003("
    "\004\022\021\n\tBlackUids\030\004 \003(\004\022\023\n\013AppliedUids\030\005 \003("
    "\004\022\026\n\016CanReceiveUids\030\006 \003(\004\"\031\n\027TFriendGetF"
    "riendListReq\"E\n\027TFriendGetFriendListRsp\022"
    "*\n\013FriendArray\030\001 \003(\0132\025.pb.TFriendFriendI"
    "nfo\")\n\030TFriendGetFriendsInfoReq\022\r\n\005FUids"
    "\030\001 \003(\004\"F\n\030TFriendGetFriendsInfoRsp\022*\n\013Fr"
    "iendArray\030\001 \003(\0132\025.pb.TFriendFriendInfo\"\030"
    "\n\026TFriendGetBlackListReq\"K\n\026TFriendGetBl"
    "ackListRsp\0221\n\nBlackArray\030\001 \003(\0132\035.pb.TUse"
    "rSimpleInfoWithStatus\"\037\n\035TFriendGetRecom"
    "mendFriendsReq\"V\n\035TFriendGetRecommendFri"
    "endsRsp\0225\n\016RecommendArray\030\001 \003(\0132\035.pb.TUs"
    "erSimpleInfoWithStatus\"-\n\034TFriendGetReco"
    "mmendByNameReq\022\r\n\005Uname\030\001 \001(\t\"U\n\034TFriend"
    "GetRecommendByNameRsp\0225\n\016RecommendArray\030"
    "\001 \003(\0132\035.pb.TUserSimpleInfoWithStatus\"R\n&"
    "TFriendGetRecommendByCaesarUniqueIdReq\022\026"
    "\n\016CaesarUniqueId\030\001 \001(\t\022\020\n\010ServerId\030\002 \001(\t"
    "\"_\n&TFriendGetRecommendByCaesarUniqueIdR"
    "sp\0225\n\016RecommendArray\030\001 \003(\0132\035.pb.TUserSim"
    "pleInfoWithStatus\"\032\n\030TFriendGetAppliedLi"
    "stReq\"O\n\030TFriendGetAppliedListRsp\0223\n\014App"
    "liedArray\030\001 \003(\0132\035.pb.TUserSimpleInfoWith"
    "Status\"5\n\023TFriendAddFriendReq\022\014\n\004FUid\030\001 "
    "\001(\004\022\020\n\010ServerId\030\002 \001(\t\"U\n%TFriendAddApply"
    "UserFromOtherServerReq\022\013\n\003Uid\030\001 \001(\004\022\014\n\004F"
    "Uid\030\002 \001(\004\022\021\n\tFServerId\030\003 \001(\t\"#\n\023TFriendD"
    "elFriendReq\022\014\n\004FUid\030\001 \001(\004\"%\n\025TFriendReje"
    "ctApplyReq\022\014\n\004FUid\030\001 \001(\004\"$\n\024TFriendAgree"
    "ApplyReq\022\014\n\004FUid\030\001 \001(\004\"S\n#TFriendAgreeAp"
    "plyFromOtherServerReq\022\013\n\003Uid\030\001 \001(\004\022\014\n\004FU"
    "id\030\002 \001(\004\022\021\n\tFServerId\030\003 \001(\t\"\"\n\022TFriendIs"
    "FriendReq\022\014\n\004FUid\030\001 \001(\004\"&\n\022TFriendIsFrie"
    "ndRsp\022\020\n\010IsFriend\030\001 \001(\r\"4\n\022TFriendAddBla"
    "ckReq\022\014\n\004BUid\030\001 \001(\004\022\020\n\010ServerId\030\002 \001(\t\"\"\n"
    "\022TFriendDelBlackReq\022\014\n\004BUid\030\001 \001(\004\"!\n\021TFr"
    "iendIsBlackReq\022\014\n\004BUid\030\001 \001(\004\"$\n\021TFriendI"
    "sBlackRsp\022\017\n\007IsBlack\030\001 \001(\r\"\031\n\027TFriendAgr"
    "eeAllApplyReq\"T\n\027TFriendAgreeAllApplyRsp"
    "\022\016\n\006AddNum\030\001 \001(\r\022\023\n\013AddUidArray\030\002 \003(\004\022\024\n"
    "\014FailUidArray\030\003 \003(\004\"\032\n\030TFriendRejectAllA"
    "pplyReq\"*\n\032TFriendSendGiftToFriendReq\022\014\n"
    "\004FUid\030\001 \001(\004\"W\n\'TFriendSendGiftToFriendBy"
    "OtherServerReq\022\013\n\003Uid\030\001 \001(\004\022\014\n\004FUid\030\002 \001("
    "\004\022\021\n\tFServerId\030\003 \001(\t\"\037\n\035TFriendSendGiftT"
    "oAllFriendReq\"1\n\035TFriendSendGiftToAllFri"
    "endRsp\022\020\n\010SendUids\030\001 \003(\004\"+\n\033TFriendRecei"
    "veFriendGiftReq\022\014\n\004FUid\030\001 \001(\004\"\032\n\030TFriend"
    "ReceiveAllGiftReq\"/\n\030TFriendReceiveAllGi"
    "ftRsp\022\023\n\013ReceiveUids\030\001 \003(\004\"3\n#TFriendGet"
    "CheckInfoByOtherServerReq\022\014\n\004FUid\030\001 \001(\004\""
    "O\n#TFriendGetCheckInfoByOtherServerRsp\022\031"
    "\n\021InstanceSerialNum\030\001 \001(\r\022\r\n\005Level\030\002 \001(\r"
    "\"O\n\037TFriendAddBlackByOtherServerReq\022\013\n\003U"
    "id\030\001 \001(\004\022\014\n\004FUid\030\002 \001(\004\022\021\n\tFServerId\030\003 \001("
    "\t\"P\n TFriendDelFriendByOtherServerReq\022\013\n"
    "\003Uid\030\001 \001(\004\022\014\n\004FUid\030\002 \001(\004\022\021\n\tFServerId\030\003 "
    "\001(\t\"\213\001\n\rTFriendNotify\022\025\n\rNewFriendUids\030\001"
    " \003(\004\022\030\n\020DeleteFriendUids\030\002 \003(\004\022\026\n\016NewApp"
    "liedUids\030\003 \003(\004\022\031\n\021DeleteAppliedUids\030\004 \003("
    "\004\022\026\n\016FriendSendUids\030\005 \003(\004*M\n\024EFriendRece"
    "iveStatus\022\022\n\016CANNOT_RECEIVE\020\000\022\017\n\013NOT_REC"
    "EIVE\020\001\022\020\n\014HAS_RECEIVED\020\002", 2784);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Friend.proto", &protobuf_RegisterTypes);
  TFriendFriendInfo::default_instance_ = new TFriendFriendInfo();
  TFriendGetSimpleInfoReq::default_instance_ = new TFriendGetSimpleInfoReq();
  TFriendGetSimpleInfoRsp::default_instance_ = new TFriendGetSimpleInfoRsp();
  TFriendGetFriendListReq::default_instance_ = new TFriendGetFriendListReq();
  TFriendGetFriendListRsp::default_instance_ = new TFriendGetFriendListRsp();
  TFriendGetFriendsInfoReq::default_instance_ = new TFriendGetFriendsInfoReq();
  TFriendGetFriendsInfoRsp::default_instance_ = new TFriendGetFriendsInfoRsp();
  TFriendGetBlackListReq::default_instance_ = new TFriendGetBlackListReq();
  TFriendGetBlackListRsp::default_instance_ = new TFriendGetBlackListRsp();
  TFriendGetRecommendFriendsReq::default_instance_ = new TFriendGetRecommendFriendsReq();
  TFriendGetRecommendFriendsRsp::default_instance_ = new TFriendGetRecommendFriendsRsp();
  TFriendGetRecommendByNameReq::default_instance_ = new TFriendGetRecommendByNameReq();
  TFriendGetRecommendByNameRsp::default_instance_ = new TFriendGetRecommendByNameRsp();
  TFriendGetRecommendByCaesarUniqueIdReq::default_instance_ = new TFriendGetRecommendByCaesarUniqueIdReq();
  TFriendGetRecommendByCaesarUniqueIdRsp::default_instance_ = new TFriendGetRecommendByCaesarUniqueIdRsp();
  TFriendGetAppliedListReq::default_instance_ = new TFriendGetAppliedListReq();
  TFriendGetAppliedListRsp::default_instance_ = new TFriendGetAppliedListRsp();
  TFriendAddFriendReq::default_instance_ = new TFriendAddFriendReq();
  TFriendAddApplyUserFromOtherServerReq::default_instance_ = new TFriendAddApplyUserFromOtherServerReq();
  TFriendDelFriendReq::default_instance_ = new TFriendDelFriendReq();
  TFriendRejectApplyReq::default_instance_ = new TFriendRejectApplyReq();
  TFriendAgreeApplyReq::default_instance_ = new TFriendAgreeApplyReq();
  TFriendAgreeApplyFromOtherServerReq::default_instance_ = new TFriendAgreeApplyFromOtherServerReq();
  TFriendIsFriendReq::default_instance_ = new TFriendIsFriendReq();
  TFriendIsFriendRsp::default_instance_ = new TFriendIsFriendRsp();
  TFriendAddBlackReq::default_instance_ = new TFriendAddBlackReq();
  TFriendDelBlackReq::default_instance_ = new TFriendDelBlackReq();
  TFriendIsBlackReq::default_instance_ = new TFriendIsBlackReq();
  TFriendIsBlackRsp::default_instance_ = new TFriendIsBlackRsp();
  TFriendAgreeAllApplyReq::default_instance_ = new TFriendAgreeAllApplyReq();
  TFriendAgreeAllApplyRsp::default_instance_ = new TFriendAgreeAllApplyRsp();
  TFriendRejectAllApplyReq::default_instance_ = new TFriendRejectAllApplyReq();
  TFriendSendGiftToFriendReq::default_instance_ = new TFriendSendGiftToFriendReq();
  TFriendSendGiftToFriendByOtherServerReq::default_instance_ = new TFriendSendGiftToFriendByOtherServerReq();
  TFriendSendGiftToAllFriendReq::default_instance_ = new TFriendSendGiftToAllFriendReq();
  TFriendSendGiftToAllFriendRsp::default_instance_ = new TFriendSendGiftToAllFriendRsp();
  TFriendReceiveFriendGiftReq::default_instance_ = new TFriendReceiveFriendGiftReq();
  TFriendReceiveAllGiftReq::default_instance_ = new TFriendReceiveAllGiftReq();
  TFriendReceiveAllGiftRsp::default_instance_ = new TFriendReceiveAllGiftRsp();
  TFriendGetCheckInfoByOtherServerReq::default_instance_ = new TFriendGetCheckInfoByOtherServerReq();
  TFriendGetCheckInfoByOtherServerRsp::default_instance_ = new TFriendGetCheckInfoByOtherServerRsp();
  TFriendAddBlackByOtherServerReq::default_instance_ = new TFriendAddBlackByOtherServerReq();
  TFriendDelFriendByOtherServerReq::default_instance_ = new TFriendDelFriendByOtherServerReq();
  TFriendNotify::default_instance_ = new TFriendNotify();
  TFriendFriendInfo::default_instance_->InitAsDefaultInstance();
  TFriendGetSimpleInfoReq::default_instance_->InitAsDefaultInstance();
  TFriendGetSimpleInfoRsp::default_instance_->InitAsDefaultInstance();
  TFriendGetFriendListReq::default_instance_->InitAsDefaultInstance();
  TFriendGetFriendListRsp::default_instance_->InitAsDefaultInstance();
  TFriendGetFriendsInfoReq::default_instance_->InitAsDefaultInstance();
  TFriendGetFriendsInfoRsp::default_instance_->InitAsDefaultInstance();
  TFriendGetBlackListReq::default_instance_->InitAsDefaultInstance();
  TFriendGetBlackListRsp::default_instance_->InitAsDefaultInstance();
  TFriendGetRecommendFriendsReq::default_instance_->InitAsDefaultInstance();
  TFriendGetRecommendFriendsRsp::default_instance_->InitAsDefaultInstance();
  TFriendGetRecommendByNameReq::default_instance_->InitAsDefaultInstance();
  TFriendGetRecommendByNameRsp::default_instance_->InitAsDefaultInstance();
  TFriendGetRecommendByCaesarUniqueIdReq::default_instance_->InitAsDefaultInstance();
  TFriendGetRecommendByCaesarUniqueIdRsp::default_instance_->InitAsDefaultInstance();
  TFriendGetAppliedListReq::default_instance_->InitAsDefaultInstance();
  TFriendGetAppliedListRsp::default_instance_->InitAsDefaultInstance();
  TFriendAddFriendReq::default_instance_->InitAsDefaultInstance();
  TFriendAddApplyUserFromOtherServerReq::default_instance_->InitAsDefaultInstance();
  TFriendDelFriendReq::default_instance_->InitAsDefaultInstance();
  TFriendRejectApplyReq::default_instance_->InitAsDefaultInstance();
  TFriendAgreeApplyReq::default_instance_->InitAsDefaultInstance();
  TFriendAgreeApplyFromOtherServerReq::default_instance_->InitAsDefaultInstance();
  TFriendIsFriendReq::default_instance_->InitAsDefaultInstance();
  TFriendIsFriendRsp::default_instance_->InitAsDefaultInstance();
  TFriendAddBlackReq::default_instance_->InitAsDefaultInstance();
  TFriendDelBlackReq::default_instance_->InitAsDefaultInstance();
  TFriendIsBlackReq::default_instance_->InitAsDefaultInstance();
  TFriendIsBlackRsp::default_instance_->InitAsDefaultInstance();
  TFriendAgreeAllApplyReq::default_instance_->InitAsDefaultInstance();
  TFriendAgreeAllApplyRsp::default_instance_->InitAsDefaultInstance();
  TFriendRejectAllApplyReq::default_instance_->InitAsDefaultInstance();
  TFriendSendGiftToFriendReq::default_instance_->InitAsDefaultInstance();
  TFriendSendGiftToFriendByOtherServerReq::default_instance_->InitAsDefaultInstance();
  TFriendSendGiftToAllFriendReq::default_instance_->InitAsDefaultInstance();
  TFriendSendGiftToAllFriendRsp::default_instance_->InitAsDefaultInstance();
  TFriendReceiveFriendGiftReq::default_instance_->InitAsDefaultInstance();
  TFriendReceiveAllGiftReq::default_instance_->InitAsDefaultInstance();
  TFriendReceiveAllGiftRsp::default_instance_->InitAsDefaultInstance();
  TFriendGetCheckInfoByOtherServerReq::default_instance_->InitAsDefaultInstance();
  TFriendGetCheckInfoByOtherServerRsp::default_instance_->InitAsDefaultInstance();
  TFriendAddBlackByOtherServerReq::default_instance_->InitAsDefaultInstance();
  TFriendDelFriendByOtherServerReq::default_instance_->InitAsDefaultInstance();
  TFriendNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fFriend_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fFriend_2eproto {
  StaticDescriptorInitializer_net_2fFriend_2eproto() {
    protobuf_AddDesc_net_2fFriend_2eproto();
  }
} static_descriptor_initializer_net_2fFriend_2eproto_;
const ::google::protobuf::EnumDescriptor* EFriendReceiveStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EFriendReceiveStatus_descriptor_;
}
bool EFriendReceiveStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendFriendInfo::kFriendInfoFieldNumber;
const int TFriendFriendInfo::kSendTimeFieldNumber;
const int TFriendFriendInfo::kGetTimeFieldNumber;
const int TFriendFriendInfo::kReceiveStatusFieldNumber;
#endif  // !_MSC_VER

TFriendFriendInfo::TFriendFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendFriendInfo)
}

void TFriendFriendInfo::InitAsDefaultInstance() {
  friendinfo_ = const_cast< ::pb::TUserSimpleInfoWithStatus*>(&::pb::TUserSimpleInfoWithStatus::default_instance());
}

TFriendFriendInfo::TFriendFriendInfo(const TFriendFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendFriendInfo)
}

void TFriendFriendInfo::SharedCtor() {
  _cached_size_ = 0;
  friendinfo_ = NULL;
  sendtime_ = GOOGLE_ULONGLONG(0);
  gettime_ = GOOGLE_ULONGLONG(0);
  receivestatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendFriendInfo::~TFriendFriendInfo() {
  // @@protoc_insertion_point(destructor:pb.TFriendFriendInfo)
  SharedDtor();
}

void TFriendFriendInfo::SharedDtor() {
  if (this != default_instance_) {
    delete friendinfo_;
  }
}

void TFriendFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendFriendInfo_descriptor_;
}

const TFriendFriendInfo& TFriendFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendFriendInfo* TFriendFriendInfo::default_instance_ = NULL;

TFriendFriendInfo* TFriendFriendInfo::New() const {
  return new TFriendFriendInfo;
}

void TFriendFriendInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TFriendFriendInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(sendtime_, receivestatus_);
    if (has_friendinfo()) {
      if (friendinfo_ != NULL) friendinfo_->::pb::TUserSimpleInfoWithStatus::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendFriendInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfoWithStatus FriendInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SendTime;
        break;
      }

      // optional uint64 SendTime = 2;
      case 2: {
        if (tag == 16) {
         parse_SendTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_GetTime;
        break;
      }

      // optional uint64 GetTime = 3;
      case 3: {
        if (tag == 24) {
         parse_GetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gettime_)));
          set_has_gettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ReceiveStatus;
        break;
      }

      // optional uint32 ReceiveStatus = 4;
      case 4: {
        if (tag == 32) {
         parse_ReceiveStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receivestatus_)));
          set_has_receivestatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendFriendInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendFriendInfo)
  return false;
#undef DO_
}

void TFriendFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendFriendInfo)
  // optional .pb.TUserSimpleInfoWithStatus FriendInfo = 1;
  if (has_friendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friendinfo(), output);
  }

  // optional uint64 SendTime = 2;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sendtime(), output);
  }

  // optional uint64 GetTime = 3;
  if (has_gettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->gettime(), output);
  }

  // optional uint32 ReceiveStatus = 4;
  if (has_receivestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->receivestatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendFriendInfo)
}

::google::protobuf::uint8* TFriendFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendFriendInfo)
  // optional .pb.TUserSimpleInfoWithStatus FriendInfo = 1;
  if (has_friendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friendinfo(), target);
  }

  // optional uint64 SendTime = 2;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sendtime(), target);
  }

  // optional uint64 GetTime = 3;
  if (has_gettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->gettime(), target);
  }

  // optional uint32 ReceiveStatus = 4;
  if (has_receivestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->receivestatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendFriendInfo)
  return target;
}

int TFriendFriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfoWithStatus FriendInfo = 1;
    if (has_friendinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendinfo());
    }

    // optional uint64 SendTime = 2;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sendtime());
    }

    // optional uint64 GetTime = 3;
    if (has_gettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gettime());
    }

    // optional uint32 ReceiveStatus = 4;
    if (has_receivestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receivestatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendFriendInfo::MergeFrom(const TFriendFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendinfo()) {
      mutable_friendinfo()->::pb::TUserSimpleInfoWithStatus::MergeFrom(from.friendinfo());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_gettime()) {
      set_gettime(from.gettime());
    }
    if (from.has_receivestatus()) {
      set_receivestatus(from.receivestatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendFriendInfo::CopyFrom(const TFriendFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendFriendInfo::IsInitialized() const {

  return true;
}

void TFriendFriendInfo::Swap(TFriendFriendInfo* other) {
  if (other != this) {
    std::swap(friendinfo_, other->friendinfo_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(gettime_, other->gettime_);
    std::swap(receivestatus_, other->receivestatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendFriendInfo_descriptor_;
  metadata.reflection = TFriendFriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TFriendGetSimpleInfoReq::TFriendGetSimpleInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendGetSimpleInfoReq)
}

void TFriendGetSimpleInfoReq::InitAsDefaultInstance() {
}

TFriendGetSimpleInfoReq::TFriendGetSimpleInfoReq(const TFriendGetSimpleInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendGetSimpleInfoReq)
}

void TFriendGetSimpleInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendGetSimpleInfoReq::~TFriendGetSimpleInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendGetSimpleInfoReq)
  SharedDtor();
}

void TFriendGetSimpleInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendGetSimpleInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendGetSimpleInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendGetSimpleInfoReq_descriptor_;
}

const TFriendGetSimpleInfoReq& TFriendGetSimpleInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendGetSimpleInfoReq* TFriendGetSimpleInfoReq::default_instance_ = NULL;

TFriendGetSimpleInfoReq* TFriendGetSimpleInfoReq::New() const {
  return new TFriendGetSimpleInfoReq;
}

void TFriendGetSimpleInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendGetSimpleInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendGetSimpleInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendGetSimpleInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendGetSimpleInfoReq)
  return false;
#undef DO_
}

void TFriendGetSimpleInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendGetSimpleInfoReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendGetSimpleInfoReq)
}

::google::protobuf::uint8* TFriendGetSimpleInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendGetSimpleInfoReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendGetSimpleInfoReq)
  return target;
}

int TFriendGetSimpleInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendGetSimpleInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendGetSimpleInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendGetSimpleInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendGetSimpleInfoReq::MergeFrom(const TFriendGetSimpleInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendGetSimpleInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendGetSimpleInfoReq::CopyFrom(const TFriendGetSimpleInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendGetSimpleInfoReq::IsInitialized() const {

  return true;
}

void TFriendGetSimpleInfoReq::Swap(TFriendGetSimpleInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendGetSimpleInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendGetSimpleInfoReq_descriptor_;
  metadata.reflection = TFriendGetSimpleInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendGetSimpleInfoRsp::kSendNumFieldNumber;
const int TFriendGetSimpleInfoRsp::kReceiveNumFieldNumber;
const int TFriendGetSimpleInfoRsp::kFriendUidsFieldNumber;
const int TFriendGetSimpleInfoRsp::kBlackUidsFieldNumber;
const int TFriendGetSimpleInfoRsp::kAppliedUidsFieldNumber;
const int TFriendGetSimpleInfoRsp::kCanReceiveUidsFieldNumber;
#endif  // !_MSC_VER

TFriendGetSimpleInfoRsp::TFriendGetSimpleInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendGetSimpleInfoRsp)
}

void TFriendGetSimpleInfoRsp::InitAsDefaultInstance() {
}

TFriendGetSimpleInfoRsp::TFriendGetSimpleInfoRsp(const TFriendGetSimpleInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendGetSimpleInfoRsp)
}

void TFriendGetSimpleInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  sendnum_ = 0u;
  receivenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendGetSimpleInfoRsp::~TFriendGetSimpleInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TFriendGetSimpleInfoRsp)
  SharedDtor();
}

void TFriendGetSimpleInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendGetSimpleInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendGetSimpleInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendGetSimpleInfoRsp_descriptor_;
}

const TFriendGetSimpleInfoRsp& TFriendGetSimpleInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendGetSimpleInfoRsp* TFriendGetSimpleInfoRsp::default_instance_ = NULL;

TFriendGetSimpleInfoRsp* TFriendGetSimpleInfoRsp::New() const {
  return new TFriendGetSimpleInfoRsp;
}

void TFriendGetSimpleInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TFriendGetSimpleInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sendnum_, receivenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  frienduids_.Clear();
  blackuids_.Clear();
  applieduids_.Clear();
  canreceiveuids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendGetSimpleInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendGetSimpleInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SendNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sendnum_)));
          set_has_sendnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ReceiveNum;
        break;
      }

      // optional uint32 ReceiveNum = 2;
      case 2: {
        if (tag == 16) {
         parse_ReceiveNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receivenum_)));
          set_has_receivenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FriendUids;
        break;
      }

      // repeated uint64 FriendUids = 3;
      case 3: {
        if (tag == 24) {
         parse_FriendUids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_frienduids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_frienduids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FriendUids;
        if (input->ExpectTag(32)) goto parse_BlackUids;
        break;
      }

      // repeated uint64 BlackUids = 4;
      case 4: {
        if (tag == 32) {
         parse_BlackUids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_blackuids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_blackuids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BlackUids;
        if (input->ExpectTag(40)) goto parse_AppliedUids;
        break;
      }

      // repeated uint64 AppliedUids = 5;
      case 5: {
        if (tag == 40) {
         parse_AppliedUids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_applieduids())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_applieduids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_AppliedUids;
        if (input->ExpectTag(48)) goto parse_CanReceiveUids;
        break;
      }

      // repeated uint64 CanReceiveUids = 6;
      case 6: {
        if (tag == 48) {
         parse_CanReceiveUids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48, input, this->mutable_canreceiveuids())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_canreceiveuids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_CanReceiveUids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendGetSimpleInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendGetSimpleInfoRsp)
  return false;
#undef DO_
}

void TFriendGetSimpleInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendGetSimpleInfoRsp)
  // optional uint32 SendNum = 1;
  if (has_sendnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sendnum(), output);
  }

  // optional uint32 ReceiveNum = 2;
  if (has_receivenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->receivenum(), output);
  }

  // repeated uint64 FriendUids = 3;
  for (int i = 0; i < this->frienduids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->frienduids(i), output);
  }

  // repeated uint64 BlackUids = 4;
  for (int i = 0; i < this->blackuids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->blackuids(i), output);
  }

  // repeated uint64 AppliedUids = 5;
  for (int i = 0; i < this->applieduids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->applieduids(i), output);
  }

  // repeated uint64 CanReceiveUids = 6;
  for (int i = 0; i < this->canreceiveuids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->canreceiveuids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendGetSimpleInfoRsp)
}

::google::protobuf::uint8* TFriendGetSimpleInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendGetSimpleInfoRsp)
  // optional uint32 SendNum = 1;
  if (has_sendnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sendnum(), target);
  }

  // optional uint32 ReceiveNum = 2;
  if (has_receivenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->receivenum(), target);
  }

  // repeated uint64 FriendUids = 3;
  for (int i = 0; i < this->frienduids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->frienduids(i), target);
  }

  // repeated uint64 BlackUids = 4;
  for (int i = 0; i < this->blackuids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->blackuids(i), target);
  }

  // repeated uint64 AppliedUids = 5;
  for (int i = 0; i < this->applieduids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->applieduids(i), target);
  }

  // repeated uint64 CanReceiveUids = 6;
  for (int i = 0; i < this->canreceiveuids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(6, this->canreceiveuids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendGetSimpleInfoRsp)
  return target;
}

int TFriendGetSimpleInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SendNum = 1;
    if (has_sendnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sendnum());
    }

    // optional uint32 ReceiveNum = 2;
    if (has_receivenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receivenum());
    }

  }
  // repeated uint64 FriendUids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->frienduids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->frienduids(i));
    }
    total_size += 1 * this->frienduids_size() + data_size;
  }

  // repeated uint64 BlackUids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->blackuids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->blackuids(i));
    }
    total_size += 1 * this->blackuids_size() + data_size;
  }

  // repeated uint64 AppliedUids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->applieduids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->applieduids(i));
    }
    total_size += 1 * this->applieduids_size() + data_size;
  }

  // repeated uint64 CanReceiveUids = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->canreceiveuids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->canreceiveuids(i));
    }
    total_size += 1 * this->canreceiveuids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendGetSimpleInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendGetSimpleInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendGetSimpleInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendGetSimpleInfoRsp::MergeFrom(const TFriendGetSimpleInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  frienduids_.MergeFrom(from.frienduids_);
  blackuids_.MergeFrom(from.blackuids_);
  applieduids_.MergeFrom(from.applieduids_);
  canreceiveuids_.MergeFrom(from.canreceiveuids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendnum()) {
      set_sendnum(from.sendnum());
    }
    if (from.has_receivenum()) {
      set_receivenum(from.receivenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendGetSimpleInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendGetSimpleInfoRsp::CopyFrom(const TFriendGetSimpleInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendGetSimpleInfoRsp::IsInitialized() const {

  return true;
}

void TFriendGetSimpleInfoRsp::Swap(TFriendGetSimpleInfoRsp* other) {
  if (other != this) {
    std::swap(sendnum_, other->sendnum_);
    std::swap(receivenum_, other->receivenum_);
    frienduids_.Swap(&other->frienduids_);
    blackuids_.Swap(&other->blackuids_);
    applieduids_.Swap(&other->applieduids_);
    canreceiveuids_.Swap(&other->canreceiveuids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendGetSimpleInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendGetSimpleInfoRsp_descriptor_;
  metadata.reflection = TFriendGetSimpleInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TFriendGetFriendListReq::TFriendGetFriendListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendGetFriendListReq)
}

void TFriendGetFriendListReq::InitAsDefaultInstance() {
}

TFriendGetFriendListReq::TFriendGetFriendListReq(const TFriendGetFriendListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendGetFriendListReq)
}

void TFriendGetFriendListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendGetFriendListReq::~TFriendGetFriendListReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendGetFriendListReq)
  SharedDtor();
}

void TFriendGetFriendListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendGetFriendListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendGetFriendListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendGetFriendListReq_descriptor_;
}

const TFriendGetFriendListReq& TFriendGetFriendListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendGetFriendListReq* TFriendGetFriendListReq::default_instance_ = NULL;

TFriendGetFriendListReq* TFriendGetFriendListReq::New() const {
  return new TFriendGetFriendListReq;
}

void TFriendGetFriendListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendGetFriendListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendGetFriendListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendGetFriendListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendGetFriendListReq)
  return false;
#undef DO_
}

void TFriendGetFriendListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendGetFriendListReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendGetFriendListReq)
}

::google::protobuf::uint8* TFriendGetFriendListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendGetFriendListReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendGetFriendListReq)
  return target;
}

int TFriendGetFriendListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendGetFriendListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendGetFriendListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendGetFriendListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendGetFriendListReq::MergeFrom(const TFriendGetFriendListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendGetFriendListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendGetFriendListReq::CopyFrom(const TFriendGetFriendListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendGetFriendListReq::IsInitialized() const {

  return true;
}

void TFriendGetFriendListReq::Swap(TFriendGetFriendListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendGetFriendListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendGetFriendListReq_descriptor_;
  metadata.reflection = TFriendGetFriendListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendGetFriendListRsp::kFriendArrayFieldNumber;
#endif  // !_MSC_VER

TFriendGetFriendListRsp::TFriendGetFriendListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendGetFriendListRsp)
}

void TFriendGetFriendListRsp::InitAsDefaultInstance() {
}

TFriendGetFriendListRsp::TFriendGetFriendListRsp(const TFriendGetFriendListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendGetFriendListRsp)
}

void TFriendGetFriendListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendGetFriendListRsp::~TFriendGetFriendListRsp() {
  // @@protoc_insertion_point(destructor:pb.TFriendGetFriendListRsp)
  SharedDtor();
}

void TFriendGetFriendListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendGetFriendListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendGetFriendListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendGetFriendListRsp_descriptor_;
}

const TFriendGetFriendListRsp& TFriendGetFriendListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendGetFriendListRsp* TFriendGetFriendListRsp::default_instance_ = NULL;

TFriendGetFriendListRsp* TFriendGetFriendListRsp::New() const {
  return new TFriendGetFriendListRsp;
}

void TFriendGetFriendListRsp::Clear() {
  friendarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendGetFriendListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendGetFriendListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TFriendFriendInfo FriendArray = 1;
      case 1: {
        if (tag == 10) {
         parse_FriendArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FriendArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendGetFriendListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendGetFriendListRsp)
  return false;
#undef DO_
}

void TFriendGetFriendListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendGetFriendListRsp)
  // repeated .pb.TFriendFriendInfo FriendArray = 1;
  for (int i = 0; i < this->friendarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friendarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendGetFriendListRsp)
}

::google::protobuf::uint8* TFriendGetFriendListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendGetFriendListRsp)
  // repeated .pb.TFriendFriendInfo FriendArray = 1;
  for (int i = 0; i < this->friendarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friendarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendGetFriendListRsp)
  return target;
}

int TFriendGetFriendListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TFriendFriendInfo FriendArray = 1;
  total_size += 1 * this->friendarray_size();
  for (int i = 0; i < this->friendarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendGetFriendListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendGetFriendListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendGetFriendListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendGetFriendListRsp::MergeFrom(const TFriendGetFriendListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendarray_.MergeFrom(from.friendarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendGetFriendListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendGetFriendListRsp::CopyFrom(const TFriendGetFriendListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendGetFriendListRsp::IsInitialized() const {

  return true;
}

void TFriendGetFriendListRsp::Swap(TFriendGetFriendListRsp* other) {
  if (other != this) {
    friendarray_.Swap(&other->friendarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendGetFriendListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendGetFriendListRsp_descriptor_;
  metadata.reflection = TFriendGetFriendListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendGetFriendsInfoReq::kFUidsFieldNumber;
#endif  // !_MSC_VER

TFriendGetFriendsInfoReq::TFriendGetFriendsInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendGetFriendsInfoReq)
}

void TFriendGetFriendsInfoReq::InitAsDefaultInstance() {
}

TFriendGetFriendsInfoReq::TFriendGetFriendsInfoReq(const TFriendGetFriendsInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendGetFriendsInfoReq)
}

void TFriendGetFriendsInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendGetFriendsInfoReq::~TFriendGetFriendsInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendGetFriendsInfoReq)
  SharedDtor();
}

void TFriendGetFriendsInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendGetFriendsInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendGetFriendsInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendGetFriendsInfoReq_descriptor_;
}

const TFriendGetFriendsInfoReq& TFriendGetFriendsInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendGetFriendsInfoReq* TFriendGetFriendsInfoReq::default_instance_ = NULL;

TFriendGetFriendsInfoReq* TFriendGetFriendsInfoReq::New() const {
  return new TFriendGetFriendsInfoReq;
}

void TFriendGetFriendsInfoReq::Clear() {
  fuids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendGetFriendsInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendGetFriendsInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 FUids = 1;
      case 1: {
        if (tag == 8) {
         parse_FUids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_fuids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_fuids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_FUids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendGetFriendsInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendGetFriendsInfoReq)
  return false;
#undef DO_
}

void TFriendGetFriendsInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendGetFriendsInfoReq)
  // repeated uint64 FUids = 1;
  for (int i = 0; i < this->fuids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->fuids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendGetFriendsInfoReq)
}

::google::protobuf::uint8* TFriendGetFriendsInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendGetFriendsInfoReq)
  // repeated uint64 FUids = 1;
  for (int i = 0; i < this->fuids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->fuids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendGetFriendsInfoReq)
  return target;
}

int TFriendGetFriendsInfoReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 FUids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->fuids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->fuids(i));
    }
    total_size += 1 * this->fuids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendGetFriendsInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendGetFriendsInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendGetFriendsInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendGetFriendsInfoReq::MergeFrom(const TFriendGetFriendsInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  fuids_.MergeFrom(from.fuids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendGetFriendsInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendGetFriendsInfoReq::CopyFrom(const TFriendGetFriendsInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendGetFriendsInfoReq::IsInitialized() const {

  return true;
}

void TFriendGetFriendsInfoReq::Swap(TFriendGetFriendsInfoReq* other) {
  if (other != this) {
    fuids_.Swap(&other->fuids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendGetFriendsInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendGetFriendsInfoReq_descriptor_;
  metadata.reflection = TFriendGetFriendsInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendGetFriendsInfoRsp::kFriendArrayFieldNumber;
#endif  // !_MSC_VER

TFriendGetFriendsInfoRsp::TFriendGetFriendsInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendGetFriendsInfoRsp)
}

void TFriendGetFriendsInfoRsp::InitAsDefaultInstance() {
}

TFriendGetFriendsInfoRsp::TFriendGetFriendsInfoRsp(const TFriendGetFriendsInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendGetFriendsInfoRsp)
}

void TFriendGetFriendsInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendGetFriendsInfoRsp::~TFriendGetFriendsInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TFriendGetFriendsInfoRsp)
  SharedDtor();
}

void TFriendGetFriendsInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendGetFriendsInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendGetFriendsInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendGetFriendsInfoRsp_descriptor_;
}

const TFriendGetFriendsInfoRsp& TFriendGetFriendsInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendGetFriendsInfoRsp* TFriendGetFriendsInfoRsp::default_instance_ = NULL;

TFriendGetFriendsInfoRsp* TFriendGetFriendsInfoRsp::New() const {
  return new TFriendGetFriendsInfoRsp;
}

void TFriendGetFriendsInfoRsp::Clear() {
  friendarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendGetFriendsInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendGetFriendsInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TFriendFriendInfo FriendArray = 1;
      case 1: {
        if (tag == 10) {
         parse_FriendArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FriendArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendGetFriendsInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendGetFriendsInfoRsp)
  return false;
#undef DO_
}

void TFriendGetFriendsInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendGetFriendsInfoRsp)
  // repeated .pb.TFriendFriendInfo FriendArray = 1;
  for (int i = 0; i < this->friendarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friendarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendGetFriendsInfoRsp)
}

::google::protobuf::uint8* TFriendGetFriendsInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendGetFriendsInfoRsp)
  // repeated .pb.TFriendFriendInfo FriendArray = 1;
  for (int i = 0; i < this->friendarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friendarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendGetFriendsInfoRsp)
  return target;
}

int TFriendGetFriendsInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TFriendFriendInfo FriendArray = 1;
  total_size += 1 * this->friendarray_size();
  for (int i = 0; i < this->friendarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendGetFriendsInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendGetFriendsInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendGetFriendsInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendGetFriendsInfoRsp::MergeFrom(const TFriendGetFriendsInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendarray_.MergeFrom(from.friendarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendGetFriendsInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendGetFriendsInfoRsp::CopyFrom(const TFriendGetFriendsInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendGetFriendsInfoRsp::IsInitialized() const {

  return true;
}

void TFriendGetFriendsInfoRsp::Swap(TFriendGetFriendsInfoRsp* other) {
  if (other != this) {
    friendarray_.Swap(&other->friendarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendGetFriendsInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendGetFriendsInfoRsp_descriptor_;
  metadata.reflection = TFriendGetFriendsInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TFriendGetBlackListReq::TFriendGetBlackListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendGetBlackListReq)
}

void TFriendGetBlackListReq::InitAsDefaultInstance() {
}

TFriendGetBlackListReq::TFriendGetBlackListReq(const TFriendGetBlackListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendGetBlackListReq)
}

void TFriendGetBlackListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendGetBlackListReq::~TFriendGetBlackListReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendGetBlackListReq)
  SharedDtor();
}

void TFriendGetBlackListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendGetBlackListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendGetBlackListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendGetBlackListReq_descriptor_;
}

const TFriendGetBlackListReq& TFriendGetBlackListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendGetBlackListReq* TFriendGetBlackListReq::default_instance_ = NULL;

TFriendGetBlackListReq* TFriendGetBlackListReq::New() const {
  return new TFriendGetBlackListReq;
}

void TFriendGetBlackListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendGetBlackListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendGetBlackListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendGetBlackListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendGetBlackListReq)
  return false;
#undef DO_
}

void TFriendGetBlackListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendGetBlackListReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendGetBlackListReq)
}

::google::protobuf::uint8* TFriendGetBlackListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendGetBlackListReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendGetBlackListReq)
  return target;
}

int TFriendGetBlackListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendGetBlackListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendGetBlackListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendGetBlackListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendGetBlackListReq::MergeFrom(const TFriendGetBlackListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendGetBlackListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendGetBlackListReq::CopyFrom(const TFriendGetBlackListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendGetBlackListReq::IsInitialized() const {

  return true;
}

void TFriendGetBlackListReq::Swap(TFriendGetBlackListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendGetBlackListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendGetBlackListReq_descriptor_;
  metadata.reflection = TFriendGetBlackListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendGetBlackListRsp::kBlackArrayFieldNumber;
#endif  // !_MSC_VER

TFriendGetBlackListRsp::TFriendGetBlackListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendGetBlackListRsp)
}

void TFriendGetBlackListRsp::InitAsDefaultInstance() {
}

TFriendGetBlackListRsp::TFriendGetBlackListRsp(const TFriendGetBlackListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendGetBlackListRsp)
}

void TFriendGetBlackListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendGetBlackListRsp::~TFriendGetBlackListRsp() {
  // @@protoc_insertion_point(destructor:pb.TFriendGetBlackListRsp)
  SharedDtor();
}

void TFriendGetBlackListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendGetBlackListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendGetBlackListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendGetBlackListRsp_descriptor_;
}

const TFriendGetBlackListRsp& TFriendGetBlackListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendGetBlackListRsp* TFriendGetBlackListRsp::default_instance_ = NULL;

TFriendGetBlackListRsp* TFriendGetBlackListRsp::New() const {
  return new TFriendGetBlackListRsp;
}

void TFriendGetBlackListRsp::Clear() {
  blackarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendGetBlackListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendGetBlackListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUserSimpleInfoWithStatus BlackArray = 1;
      case 1: {
        if (tag == 10) {
         parse_BlackArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blackarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_BlackArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendGetBlackListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendGetBlackListRsp)
  return false;
#undef DO_
}

void TFriendGetBlackListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendGetBlackListRsp)
  // repeated .pb.TUserSimpleInfoWithStatus BlackArray = 1;
  for (int i = 0; i < this->blackarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blackarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendGetBlackListRsp)
}

::google::protobuf::uint8* TFriendGetBlackListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendGetBlackListRsp)
  // repeated .pb.TUserSimpleInfoWithStatus BlackArray = 1;
  for (int i = 0; i < this->blackarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->blackarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendGetBlackListRsp)
  return target;
}

int TFriendGetBlackListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TUserSimpleInfoWithStatus BlackArray = 1;
  total_size += 1 * this->blackarray_size();
  for (int i = 0; i < this->blackarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blackarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendGetBlackListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendGetBlackListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendGetBlackListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendGetBlackListRsp::MergeFrom(const TFriendGetBlackListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  blackarray_.MergeFrom(from.blackarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendGetBlackListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendGetBlackListRsp::CopyFrom(const TFriendGetBlackListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendGetBlackListRsp::IsInitialized() const {

  return true;
}

void TFriendGetBlackListRsp::Swap(TFriendGetBlackListRsp* other) {
  if (other != this) {
    blackarray_.Swap(&other->blackarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendGetBlackListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendGetBlackListRsp_descriptor_;
  metadata.reflection = TFriendGetBlackListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TFriendGetRecommendFriendsReq::TFriendGetRecommendFriendsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendGetRecommendFriendsReq)
}

void TFriendGetRecommendFriendsReq::InitAsDefaultInstance() {
}

TFriendGetRecommendFriendsReq::TFriendGetRecommendFriendsReq(const TFriendGetRecommendFriendsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendGetRecommendFriendsReq)
}

void TFriendGetRecommendFriendsReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendGetRecommendFriendsReq::~TFriendGetRecommendFriendsReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendGetRecommendFriendsReq)
  SharedDtor();
}

void TFriendGetRecommendFriendsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendGetRecommendFriendsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendGetRecommendFriendsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendGetRecommendFriendsReq_descriptor_;
}

const TFriendGetRecommendFriendsReq& TFriendGetRecommendFriendsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendGetRecommendFriendsReq* TFriendGetRecommendFriendsReq::default_instance_ = NULL;

TFriendGetRecommendFriendsReq* TFriendGetRecommendFriendsReq::New() const {
  return new TFriendGetRecommendFriendsReq;
}

void TFriendGetRecommendFriendsReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendGetRecommendFriendsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendGetRecommendFriendsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendGetRecommendFriendsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendGetRecommendFriendsReq)
  return false;
#undef DO_
}

void TFriendGetRecommendFriendsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendGetRecommendFriendsReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendGetRecommendFriendsReq)
}

::google::protobuf::uint8* TFriendGetRecommendFriendsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendGetRecommendFriendsReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendGetRecommendFriendsReq)
  return target;
}

int TFriendGetRecommendFriendsReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendGetRecommendFriendsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendGetRecommendFriendsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendGetRecommendFriendsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendGetRecommendFriendsReq::MergeFrom(const TFriendGetRecommendFriendsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendGetRecommendFriendsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendGetRecommendFriendsReq::CopyFrom(const TFriendGetRecommendFriendsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendGetRecommendFriendsReq::IsInitialized() const {

  return true;
}

void TFriendGetRecommendFriendsReq::Swap(TFriendGetRecommendFriendsReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendGetRecommendFriendsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendGetRecommendFriendsReq_descriptor_;
  metadata.reflection = TFriendGetRecommendFriendsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendGetRecommendFriendsRsp::kRecommendArrayFieldNumber;
#endif  // !_MSC_VER

TFriendGetRecommendFriendsRsp::TFriendGetRecommendFriendsRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendGetRecommendFriendsRsp)
}

void TFriendGetRecommendFriendsRsp::InitAsDefaultInstance() {
}

TFriendGetRecommendFriendsRsp::TFriendGetRecommendFriendsRsp(const TFriendGetRecommendFriendsRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendGetRecommendFriendsRsp)
}

void TFriendGetRecommendFriendsRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendGetRecommendFriendsRsp::~TFriendGetRecommendFriendsRsp() {
  // @@protoc_insertion_point(destructor:pb.TFriendGetRecommendFriendsRsp)
  SharedDtor();
}

void TFriendGetRecommendFriendsRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendGetRecommendFriendsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendGetRecommendFriendsRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendGetRecommendFriendsRsp_descriptor_;
}

const TFriendGetRecommendFriendsRsp& TFriendGetRecommendFriendsRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendGetRecommendFriendsRsp* TFriendGetRecommendFriendsRsp::default_instance_ = NULL;

TFriendGetRecommendFriendsRsp* TFriendGetRecommendFriendsRsp::New() const {
  return new TFriendGetRecommendFriendsRsp;
}

void TFriendGetRecommendFriendsRsp::Clear() {
  recommendarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendGetRecommendFriendsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendGetRecommendFriendsRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUserSimpleInfoWithStatus RecommendArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RecommendArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recommendarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RecommendArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendGetRecommendFriendsRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendGetRecommendFriendsRsp)
  return false;
#undef DO_
}

void TFriendGetRecommendFriendsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendGetRecommendFriendsRsp)
  // repeated .pb.TUserSimpleInfoWithStatus RecommendArray = 1;
  for (int i = 0; i < this->recommendarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recommendarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendGetRecommendFriendsRsp)
}

::google::protobuf::uint8* TFriendGetRecommendFriendsRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendGetRecommendFriendsRsp)
  // repeated .pb.TUserSimpleInfoWithStatus RecommendArray = 1;
  for (int i = 0; i < this->recommendarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recommendarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendGetRecommendFriendsRsp)
  return target;
}

int TFriendGetRecommendFriendsRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TUserSimpleInfoWithStatus RecommendArray = 1;
  total_size += 1 * this->recommendarray_size();
  for (int i = 0; i < this->recommendarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recommendarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendGetRecommendFriendsRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendGetRecommendFriendsRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendGetRecommendFriendsRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendGetRecommendFriendsRsp::MergeFrom(const TFriendGetRecommendFriendsRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recommendarray_.MergeFrom(from.recommendarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendGetRecommendFriendsRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendGetRecommendFriendsRsp::CopyFrom(const TFriendGetRecommendFriendsRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendGetRecommendFriendsRsp::IsInitialized() const {

  return true;
}

void TFriendGetRecommendFriendsRsp::Swap(TFriendGetRecommendFriendsRsp* other) {
  if (other != this) {
    recommendarray_.Swap(&other->recommendarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendGetRecommendFriendsRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendGetRecommendFriendsRsp_descriptor_;
  metadata.reflection = TFriendGetRecommendFriendsRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendGetRecommendByNameReq::kUnameFieldNumber;
#endif  // !_MSC_VER

TFriendGetRecommendByNameReq::TFriendGetRecommendByNameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendGetRecommendByNameReq)
}

void TFriendGetRecommendByNameReq::InitAsDefaultInstance() {
}

TFriendGetRecommendByNameReq::TFriendGetRecommendByNameReq(const TFriendGetRecommendByNameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendGetRecommendByNameReq)
}

void TFriendGetRecommendByNameReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendGetRecommendByNameReq::~TFriendGetRecommendByNameReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendGetRecommendByNameReq)
  SharedDtor();
}

void TFriendGetRecommendByNameReq::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (this != default_instance_) {
  }
}

void TFriendGetRecommendByNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendGetRecommendByNameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendGetRecommendByNameReq_descriptor_;
}

const TFriendGetRecommendByNameReq& TFriendGetRecommendByNameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendGetRecommendByNameReq* TFriendGetRecommendByNameReq::default_instance_ = NULL;

TFriendGetRecommendByNameReq* TFriendGetRecommendByNameReq::New() const {
  return new TFriendGetRecommendByNameReq;
}

void TFriendGetRecommendByNameReq::Clear() {
  if (has_uname()) {
    if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      uname_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendGetRecommendByNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendGetRecommendByNameReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Uname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendGetRecommendByNameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendGetRecommendByNameReq)
  return false;
#undef DO_
}

void TFriendGetRecommendByNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendGetRecommendByNameReq)
  // optional string Uname = 1;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendGetRecommendByNameReq)
}

::google::protobuf::uint8* TFriendGetRecommendByNameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendGetRecommendByNameReq)
  // optional string Uname = 1;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendGetRecommendByNameReq)
  return target;
}

int TFriendGetRecommendByNameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Uname = 1;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendGetRecommendByNameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendGetRecommendByNameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendGetRecommendByNameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendGetRecommendByNameReq::MergeFrom(const TFriendGetRecommendByNameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uname()) {
      set_uname(from.uname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendGetRecommendByNameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendGetRecommendByNameReq::CopyFrom(const TFriendGetRecommendByNameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendGetRecommendByNameReq::IsInitialized() const {

  return true;
}

void TFriendGetRecommendByNameReq::Swap(TFriendGetRecommendByNameReq* other) {
  if (other != this) {
    std::swap(uname_, other->uname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendGetRecommendByNameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendGetRecommendByNameReq_descriptor_;
  metadata.reflection = TFriendGetRecommendByNameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendGetRecommendByNameRsp::kRecommendArrayFieldNumber;
#endif  // !_MSC_VER

TFriendGetRecommendByNameRsp::TFriendGetRecommendByNameRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendGetRecommendByNameRsp)
}

void TFriendGetRecommendByNameRsp::InitAsDefaultInstance() {
}

TFriendGetRecommendByNameRsp::TFriendGetRecommendByNameRsp(const TFriendGetRecommendByNameRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendGetRecommendByNameRsp)
}

void TFriendGetRecommendByNameRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendGetRecommendByNameRsp::~TFriendGetRecommendByNameRsp() {
  // @@protoc_insertion_point(destructor:pb.TFriendGetRecommendByNameRsp)
  SharedDtor();
}

void TFriendGetRecommendByNameRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendGetRecommendByNameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendGetRecommendByNameRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendGetRecommendByNameRsp_descriptor_;
}

const TFriendGetRecommendByNameRsp& TFriendGetRecommendByNameRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendGetRecommendByNameRsp* TFriendGetRecommendByNameRsp::default_instance_ = NULL;

TFriendGetRecommendByNameRsp* TFriendGetRecommendByNameRsp::New() const {
  return new TFriendGetRecommendByNameRsp;
}

void TFriendGetRecommendByNameRsp::Clear() {
  recommendarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendGetRecommendByNameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendGetRecommendByNameRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUserSimpleInfoWithStatus RecommendArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RecommendArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recommendarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RecommendArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendGetRecommendByNameRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendGetRecommendByNameRsp)
  return false;
#undef DO_
}

void TFriendGetRecommendByNameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendGetRecommendByNameRsp)
  // repeated .pb.TUserSimpleInfoWithStatus RecommendArray = 1;
  for (int i = 0; i < this->recommendarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recommendarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendGetRecommendByNameRsp)
}

::google::protobuf::uint8* TFriendGetRecommendByNameRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendGetRecommendByNameRsp)
  // repeated .pb.TUserSimpleInfoWithStatus RecommendArray = 1;
  for (int i = 0; i < this->recommendarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recommendarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendGetRecommendByNameRsp)
  return target;
}

int TFriendGetRecommendByNameRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TUserSimpleInfoWithStatus RecommendArray = 1;
  total_size += 1 * this->recommendarray_size();
  for (int i = 0; i < this->recommendarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recommendarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendGetRecommendByNameRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendGetRecommendByNameRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendGetRecommendByNameRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendGetRecommendByNameRsp::MergeFrom(const TFriendGetRecommendByNameRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recommendarray_.MergeFrom(from.recommendarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendGetRecommendByNameRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendGetRecommendByNameRsp::CopyFrom(const TFriendGetRecommendByNameRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendGetRecommendByNameRsp::IsInitialized() const {

  return true;
}

void TFriendGetRecommendByNameRsp::Swap(TFriendGetRecommendByNameRsp* other) {
  if (other != this) {
    recommendarray_.Swap(&other->recommendarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendGetRecommendByNameRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendGetRecommendByNameRsp_descriptor_;
  metadata.reflection = TFriendGetRecommendByNameRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendGetRecommendByCaesarUniqueIdReq::kCaesarUniqueIdFieldNumber;
const int TFriendGetRecommendByCaesarUniqueIdReq::kServerIdFieldNumber;
#endif  // !_MSC_VER

TFriendGetRecommendByCaesarUniqueIdReq::TFriendGetRecommendByCaesarUniqueIdReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendGetRecommendByCaesarUniqueIdReq)
}

void TFriendGetRecommendByCaesarUniqueIdReq::InitAsDefaultInstance() {
}

TFriendGetRecommendByCaesarUniqueIdReq::TFriendGetRecommendByCaesarUniqueIdReq(const TFriendGetRecommendByCaesarUniqueIdReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendGetRecommendByCaesarUniqueIdReq)
}

void TFriendGetRecommendByCaesarUniqueIdReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  caesaruniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendGetRecommendByCaesarUniqueIdReq::~TFriendGetRecommendByCaesarUniqueIdReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendGetRecommendByCaesarUniqueIdReq)
  SharedDtor();
}

void TFriendGetRecommendByCaesarUniqueIdReq::SharedDtor() {
  if (caesaruniqueid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete caesaruniqueid_;
  }
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void TFriendGetRecommendByCaesarUniqueIdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendGetRecommendByCaesarUniqueIdReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendGetRecommendByCaesarUniqueIdReq_descriptor_;
}

const TFriendGetRecommendByCaesarUniqueIdReq& TFriendGetRecommendByCaesarUniqueIdReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendGetRecommendByCaesarUniqueIdReq* TFriendGetRecommendByCaesarUniqueIdReq::default_instance_ = NULL;

TFriendGetRecommendByCaesarUniqueIdReq* TFriendGetRecommendByCaesarUniqueIdReq::New() const {
  return new TFriendGetRecommendByCaesarUniqueIdReq;
}

void TFriendGetRecommendByCaesarUniqueIdReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_caesaruniqueid()) {
      if (caesaruniqueid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        caesaruniqueid_->clear();
      }
    }
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendGetRecommendByCaesarUniqueIdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendGetRecommendByCaesarUniqueIdReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string CaesarUniqueId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caesaruniqueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->caesaruniqueid().data(), this->caesaruniqueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caesaruniqueid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 2;
      case 2: {
        if (tag == 18) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendGetRecommendByCaesarUniqueIdReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendGetRecommendByCaesarUniqueIdReq)
  return false;
#undef DO_
}

void TFriendGetRecommendByCaesarUniqueIdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendGetRecommendByCaesarUniqueIdReq)
  // optional string CaesarUniqueId = 1;
  if (has_caesaruniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caesaruniqueid().data(), this->caesaruniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caesaruniqueid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->caesaruniqueid(), output);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendGetRecommendByCaesarUniqueIdReq)
}

::google::protobuf::uint8* TFriendGetRecommendByCaesarUniqueIdReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendGetRecommendByCaesarUniqueIdReq)
  // optional string CaesarUniqueId = 1;
  if (has_caesaruniqueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->caesaruniqueid().data(), this->caesaruniqueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caesaruniqueid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->caesaruniqueid(), target);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendGetRecommendByCaesarUniqueIdReq)
  return target;
}

int TFriendGetRecommendByCaesarUniqueIdReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string CaesarUniqueId = 1;
    if (has_caesaruniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->caesaruniqueid());
    }

    // optional string ServerId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendGetRecommendByCaesarUniqueIdReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendGetRecommendByCaesarUniqueIdReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendGetRecommendByCaesarUniqueIdReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendGetRecommendByCaesarUniqueIdReq::MergeFrom(const TFriendGetRecommendByCaesarUniqueIdReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_caesaruniqueid()) {
      set_caesaruniqueid(from.caesaruniqueid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendGetRecommendByCaesarUniqueIdReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendGetRecommendByCaesarUniqueIdReq::CopyFrom(const TFriendGetRecommendByCaesarUniqueIdReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendGetRecommendByCaesarUniqueIdReq::IsInitialized() const {

  return true;
}

void TFriendGetRecommendByCaesarUniqueIdReq::Swap(TFriendGetRecommendByCaesarUniqueIdReq* other) {
  if (other != this) {
    std::swap(caesaruniqueid_, other->caesaruniqueid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendGetRecommendByCaesarUniqueIdReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendGetRecommendByCaesarUniqueIdReq_descriptor_;
  metadata.reflection = TFriendGetRecommendByCaesarUniqueIdReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendGetRecommendByCaesarUniqueIdRsp::kRecommendArrayFieldNumber;
#endif  // !_MSC_VER

TFriendGetRecommendByCaesarUniqueIdRsp::TFriendGetRecommendByCaesarUniqueIdRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendGetRecommendByCaesarUniqueIdRsp)
}

void TFriendGetRecommendByCaesarUniqueIdRsp::InitAsDefaultInstance() {
}

TFriendGetRecommendByCaesarUniqueIdRsp::TFriendGetRecommendByCaesarUniqueIdRsp(const TFriendGetRecommendByCaesarUniqueIdRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendGetRecommendByCaesarUniqueIdRsp)
}

void TFriendGetRecommendByCaesarUniqueIdRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendGetRecommendByCaesarUniqueIdRsp::~TFriendGetRecommendByCaesarUniqueIdRsp() {
  // @@protoc_insertion_point(destructor:pb.TFriendGetRecommendByCaesarUniqueIdRsp)
  SharedDtor();
}

void TFriendGetRecommendByCaesarUniqueIdRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendGetRecommendByCaesarUniqueIdRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendGetRecommendByCaesarUniqueIdRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendGetRecommendByCaesarUniqueIdRsp_descriptor_;
}

const TFriendGetRecommendByCaesarUniqueIdRsp& TFriendGetRecommendByCaesarUniqueIdRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendGetRecommendByCaesarUniqueIdRsp* TFriendGetRecommendByCaesarUniqueIdRsp::default_instance_ = NULL;

TFriendGetRecommendByCaesarUniqueIdRsp* TFriendGetRecommendByCaesarUniqueIdRsp::New() const {
  return new TFriendGetRecommendByCaesarUniqueIdRsp;
}

void TFriendGetRecommendByCaesarUniqueIdRsp::Clear() {
  recommendarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendGetRecommendByCaesarUniqueIdRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendGetRecommendByCaesarUniqueIdRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUserSimpleInfoWithStatus RecommendArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RecommendArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recommendarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RecommendArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendGetRecommendByCaesarUniqueIdRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendGetRecommendByCaesarUniqueIdRsp)
  return false;
#undef DO_
}

void TFriendGetRecommendByCaesarUniqueIdRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendGetRecommendByCaesarUniqueIdRsp)
  // repeated .pb.TUserSimpleInfoWithStatus RecommendArray = 1;
  for (int i = 0; i < this->recommendarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recommendarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendGetRecommendByCaesarUniqueIdRsp)
}

::google::protobuf::uint8* TFriendGetRecommendByCaesarUniqueIdRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendGetRecommendByCaesarUniqueIdRsp)
  // repeated .pb.TUserSimpleInfoWithStatus RecommendArray = 1;
  for (int i = 0; i < this->recommendarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recommendarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendGetRecommendByCaesarUniqueIdRsp)
  return target;
}

int TFriendGetRecommendByCaesarUniqueIdRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TUserSimpleInfoWithStatus RecommendArray = 1;
  total_size += 1 * this->recommendarray_size();
  for (int i = 0; i < this->recommendarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recommendarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendGetRecommendByCaesarUniqueIdRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendGetRecommendByCaesarUniqueIdRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendGetRecommendByCaesarUniqueIdRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendGetRecommendByCaesarUniqueIdRsp::MergeFrom(const TFriendGetRecommendByCaesarUniqueIdRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recommendarray_.MergeFrom(from.recommendarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendGetRecommendByCaesarUniqueIdRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendGetRecommendByCaesarUniqueIdRsp::CopyFrom(const TFriendGetRecommendByCaesarUniqueIdRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendGetRecommendByCaesarUniqueIdRsp::IsInitialized() const {

  return true;
}

void TFriendGetRecommendByCaesarUniqueIdRsp::Swap(TFriendGetRecommendByCaesarUniqueIdRsp* other) {
  if (other != this) {
    recommendarray_.Swap(&other->recommendarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendGetRecommendByCaesarUniqueIdRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendGetRecommendByCaesarUniqueIdRsp_descriptor_;
  metadata.reflection = TFriendGetRecommendByCaesarUniqueIdRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TFriendGetAppliedListReq::TFriendGetAppliedListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendGetAppliedListReq)
}

void TFriendGetAppliedListReq::InitAsDefaultInstance() {
}

TFriendGetAppliedListReq::TFriendGetAppliedListReq(const TFriendGetAppliedListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendGetAppliedListReq)
}

void TFriendGetAppliedListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendGetAppliedListReq::~TFriendGetAppliedListReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendGetAppliedListReq)
  SharedDtor();
}

void TFriendGetAppliedListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendGetAppliedListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendGetAppliedListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendGetAppliedListReq_descriptor_;
}

const TFriendGetAppliedListReq& TFriendGetAppliedListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendGetAppliedListReq* TFriendGetAppliedListReq::default_instance_ = NULL;

TFriendGetAppliedListReq* TFriendGetAppliedListReq::New() const {
  return new TFriendGetAppliedListReq;
}

void TFriendGetAppliedListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendGetAppliedListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendGetAppliedListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendGetAppliedListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendGetAppliedListReq)
  return false;
#undef DO_
}

void TFriendGetAppliedListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendGetAppliedListReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendGetAppliedListReq)
}

::google::protobuf::uint8* TFriendGetAppliedListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendGetAppliedListReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendGetAppliedListReq)
  return target;
}

int TFriendGetAppliedListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendGetAppliedListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendGetAppliedListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendGetAppliedListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendGetAppliedListReq::MergeFrom(const TFriendGetAppliedListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendGetAppliedListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendGetAppliedListReq::CopyFrom(const TFriendGetAppliedListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendGetAppliedListReq::IsInitialized() const {

  return true;
}

void TFriendGetAppliedListReq::Swap(TFriendGetAppliedListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendGetAppliedListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendGetAppliedListReq_descriptor_;
  metadata.reflection = TFriendGetAppliedListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendGetAppliedListRsp::kAppliedArrayFieldNumber;
#endif  // !_MSC_VER

TFriendGetAppliedListRsp::TFriendGetAppliedListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendGetAppliedListRsp)
}

void TFriendGetAppliedListRsp::InitAsDefaultInstance() {
}

TFriendGetAppliedListRsp::TFriendGetAppliedListRsp(const TFriendGetAppliedListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendGetAppliedListRsp)
}

void TFriendGetAppliedListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendGetAppliedListRsp::~TFriendGetAppliedListRsp() {
  // @@protoc_insertion_point(destructor:pb.TFriendGetAppliedListRsp)
  SharedDtor();
}

void TFriendGetAppliedListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendGetAppliedListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendGetAppliedListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendGetAppliedListRsp_descriptor_;
}

const TFriendGetAppliedListRsp& TFriendGetAppliedListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendGetAppliedListRsp* TFriendGetAppliedListRsp::default_instance_ = NULL;

TFriendGetAppliedListRsp* TFriendGetAppliedListRsp::New() const {
  return new TFriendGetAppliedListRsp;
}

void TFriendGetAppliedListRsp::Clear() {
  appliedarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendGetAppliedListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendGetAppliedListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUserSimpleInfoWithStatus AppliedArray = 1;
      case 1: {
        if (tag == 10) {
         parse_AppliedArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_appliedarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_AppliedArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendGetAppliedListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendGetAppliedListRsp)
  return false;
#undef DO_
}

void TFriendGetAppliedListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendGetAppliedListRsp)
  // repeated .pb.TUserSimpleInfoWithStatus AppliedArray = 1;
  for (int i = 0; i < this->appliedarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->appliedarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendGetAppliedListRsp)
}

::google::protobuf::uint8* TFriendGetAppliedListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendGetAppliedListRsp)
  // repeated .pb.TUserSimpleInfoWithStatus AppliedArray = 1;
  for (int i = 0; i < this->appliedarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->appliedarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendGetAppliedListRsp)
  return target;
}

int TFriendGetAppliedListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TUserSimpleInfoWithStatus AppliedArray = 1;
  total_size += 1 * this->appliedarray_size();
  for (int i = 0; i < this->appliedarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->appliedarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendGetAppliedListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendGetAppliedListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendGetAppliedListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendGetAppliedListRsp::MergeFrom(const TFriendGetAppliedListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  appliedarray_.MergeFrom(from.appliedarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendGetAppliedListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendGetAppliedListRsp::CopyFrom(const TFriendGetAppliedListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendGetAppliedListRsp::IsInitialized() const {

  return true;
}

void TFriendGetAppliedListRsp::Swap(TFriendGetAppliedListRsp* other) {
  if (other != this) {
    appliedarray_.Swap(&other->appliedarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendGetAppliedListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendGetAppliedListRsp_descriptor_;
  metadata.reflection = TFriendGetAppliedListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendAddFriendReq::kFUidFieldNumber;
const int TFriendAddFriendReq::kServerIdFieldNumber;
#endif  // !_MSC_VER

TFriendAddFriendReq::TFriendAddFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendAddFriendReq)
}

void TFriendAddFriendReq::InitAsDefaultInstance() {
}

TFriendAddFriendReq::TFriendAddFriendReq(const TFriendAddFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendAddFriendReq)
}

void TFriendAddFriendReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fuid_ = GOOGLE_ULONGLONG(0);
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendAddFriendReq::~TFriendAddFriendReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendAddFriendReq)
  SharedDtor();
}

void TFriendAddFriendReq::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void TFriendAddFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendAddFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendAddFriendReq_descriptor_;
}

const TFriendAddFriendReq& TFriendAddFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendAddFriendReq* TFriendAddFriendReq::default_instance_ = NULL;

TFriendAddFriendReq* TFriendAddFriendReq::New() const {
  return new TFriendAddFriendReq;
}

void TFriendAddFriendReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    fuid_ = GOOGLE_ULONGLONG(0);
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendAddFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendAddFriendReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 FUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fuid_)));
          set_has_fuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 2;
      case 2: {
        if (tag == 18) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendAddFriendReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendAddFriendReq)
  return false;
#undef DO_
}

void TFriendAddFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendAddFriendReq)
  // optional uint64 FUid = 1;
  if (has_fuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fuid(), output);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendAddFriendReq)
}

::google::protobuf::uint8* TFriendAddFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendAddFriendReq)
  // optional uint64 FUid = 1;
  if (has_fuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fuid(), target);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendAddFriendReq)
  return target;
}

int TFriendAddFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 FUid = 1;
    if (has_fuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fuid());
    }

    // optional string ServerId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendAddFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendAddFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendAddFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendAddFriendReq::MergeFrom(const TFriendAddFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fuid()) {
      set_fuid(from.fuid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendAddFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendAddFriendReq::CopyFrom(const TFriendAddFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendAddFriendReq::IsInitialized() const {

  return true;
}

void TFriendAddFriendReq::Swap(TFriendAddFriendReq* other) {
  if (other != this) {
    std::swap(fuid_, other->fuid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendAddFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendAddFriendReq_descriptor_;
  metadata.reflection = TFriendAddFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendAddApplyUserFromOtherServerReq::kUidFieldNumber;
const int TFriendAddApplyUserFromOtherServerReq::kFUidFieldNumber;
const int TFriendAddApplyUserFromOtherServerReq::kFServerIdFieldNumber;
#endif  // !_MSC_VER

TFriendAddApplyUserFromOtherServerReq::TFriendAddApplyUserFromOtherServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendAddApplyUserFromOtherServerReq)
}

void TFriendAddApplyUserFromOtherServerReq::InitAsDefaultInstance() {
}

TFriendAddApplyUserFromOtherServerReq::TFriendAddApplyUserFromOtherServerReq(const TFriendAddApplyUserFromOtherServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendAddApplyUserFromOtherServerReq)
}

void TFriendAddApplyUserFromOtherServerReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  fuid_ = GOOGLE_ULONGLONG(0);
  fserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendAddApplyUserFromOtherServerReq::~TFriendAddApplyUserFromOtherServerReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendAddApplyUserFromOtherServerReq)
  SharedDtor();
}

void TFriendAddApplyUserFromOtherServerReq::SharedDtor() {
  if (fserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fserverid_;
  }
  if (this != default_instance_) {
  }
}

void TFriendAddApplyUserFromOtherServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendAddApplyUserFromOtherServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendAddApplyUserFromOtherServerReq_descriptor_;
}

const TFriendAddApplyUserFromOtherServerReq& TFriendAddApplyUserFromOtherServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendAddApplyUserFromOtherServerReq* TFriendAddApplyUserFromOtherServerReq::default_instance_ = NULL;

TFriendAddApplyUserFromOtherServerReq* TFriendAddApplyUserFromOtherServerReq::New() const {
  return new TFriendAddApplyUserFromOtherServerReq;
}

void TFriendAddApplyUserFromOtherServerReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TFriendAddApplyUserFromOtherServerReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(uid_, fuid_);
    if (has_fserverid()) {
      if (fserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fserverid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendAddApplyUserFromOtherServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendAddApplyUserFromOtherServerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_FUid;
        break;
      }

      // optional uint64 FUid = 2;
      case 2: {
        if (tag == 16) {
         parse_FUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fuid_)));
          set_has_fuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FServerId;
        break;
      }

      // optional string FServerId = 3;
      case 3: {
        if (tag == 26) {
         parse_FServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fserverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fserverid().data(), this->fserverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fserverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendAddApplyUserFromOtherServerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendAddApplyUserFromOtherServerReq)
  return false;
#undef DO_
}

void TFriendAddApplyUserFromOtherServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendAddApplyUserFromOtherServerReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint64 FUid = 2;
  if (has_fuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fuid(), output);
  }

  // optional string FServerId = 3;
  if (has_fserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fserverid().data(), this->fserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fserverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fserverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendAddApplyUserFromOtherServerReq)
}

::google::protobuf::uint8* TFriendAddApplyUserFromOtherServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendAddApplyUserFromOtherServerReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint64 FUid = 2;
  if (has_fuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fuid(), target);
  }

  // optional string FServerId = 3;
  if (has_fserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fserverid().data(), this->fserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fserverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fserverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendAddApplyUserFromOtherServerReq)
  return target;
}

int TFriendAddApplyUserFromOtherServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint64 FUid = 2;
    if (has_fuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fuid());
    }

    // optional string FServerId = 3;
    if (has_fserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fserverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendAddApplyUserFromOtherServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendAddApplyUserFromOtherServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendAddApplyUserFromOtherServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendAddApplyUserFromOtherServerReq::MergeFrom(const TFriendAddApplyUserFromOtherServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_fuid()) {
      set_fuid(from.fuid());
    }
    if (from.has_fserverid()) {
      set_fserverid(from.fserverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendAddApplyUserFromOtherServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendAddApplyUserFromOtherServerReq::CopyFrom(const TFriendAddApplyUserFromOtherServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendAddApplyUserFromOtherServerReq::IsInitialized() const {

  return true;
}

void TFriendAddApplyUserFromOtherServerReq::Swap(TFriendAddApplyUserFromOtherServerReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(fuid_, other->fuid_);
    std::swap(fserverid_, other->fserverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendAddApplyUserFromOtherServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendAddApplyUserFromOtherServerReq_descriptor_;
  metadata.reflection = TFriendAddApplyUserFromOtherServerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendDelFriendReq::kFUidFieldNumber;
#endif  // !_MSC_VER

TFriendDelFriendReq::TFriendDelFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendDelFriendReq)
}

void TFriendDelFriendReq::InitAsDefaultInstance() {
}

TFriendDelFriendReq::TFriendDelFriendReq(const TFriendDelFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendDelFriendReq)
}

void TFriendDelFriendReq::SharedCtor() {
  _cached_size_ = 0;
  fuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendDelFriendReq::~TFriendDelFriendReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendDelFriendReq)
  SharedDtor();
}

void TFriendDelFriendReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendDelFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendDelFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendDelFriendReq_descriptor_;
}

const TFriendDelFriendReq& TFriendDelFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendDelFriendReq* TFriendDelFriendReq::default_instance_ = NULL;

TFriendDelFriendReq* TFriendDelFriendReq::New() const {
  return new TFriendDelFriendReq;
}

void TFriendDelFriendReq::Clear() {
  fuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendDelFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendDelFriendReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 FUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fuid_)));
          set_has_fuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendDelFriendReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendDelFriendReq)
  return false;
#undef DO_
}

void TFriendDelFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendDelFriendReq)
  // optional uint64 FUid = 1;
  if (has_fuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendDelFriendReq)
}

::google::protobuf::uint8* TFriendDelFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendDelFriendReq)
  // optional uint64 FUid = 1;
  if (has_fuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendDelFriendReq)
  return target;
}

int TFriendDelFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 FUid = 1;
    if (has_fuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendDelFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendDelFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendDelFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendDelFriendReq::MergeFrom(const TFriendDelFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fuid()) {
      set_fuid(from.fuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendDelFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendDelFriendReq::CopyFrom(const TFriendDelFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendDelFriendReq::IsInitialized() const {

  return true;
}

void TFriendDelFriendReq::Swap(TFriendDelFriendReq* other) {
  if (other != this) {
    std::swap(fuid_, other->fuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendDelFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendDelFriendReq_descriptor_;
  metadata.reflection = TFriendDelFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendRejectApplyReq::kFUidFieldNumber;
#endif  // !_MSC_VER

TFriendRejectApplyReq::TFriendRejectApplyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendRejectApplyReq)
}

void TFriendRejectApplyReq::InitAsDefaultInstance() {
}

TFriendRejectApplyReq::TFriendRejectApplyReq(const TFriendRejectApplyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendRejectApplyReq)
}

void TFriendRejectApplyReq::SharedCtor() {
  _cached_size_ = 0;
  fuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendRejectApplyReq::~TFriendRejectApplyReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendRejectApplyReq)
  SharedDtor();
}

void TFriendRejectApplyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendRejectApplyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendRejectApplyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendRejectApplyReq_descriptor_;
}

const TFriendRejectApplyReq& TFriendRejectApplyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendRejectApplyReq* TFriendRejectApplyReq::default_instance_ = NULL;

TFriendRejectApplyReq* TFriendRejectApplyReq::New() const {
  return new TFriendRejectApplyReq;
}

void TFriendRejectApplyReq::Clear() {
  fuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendRejectApplyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendRejectApplyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 FUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fuid_)));
          set_has_fuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendRejectApplyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendRejectApplyReq)
  return false;
#undef DO_
}

void TFriendRejectApplyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendRejectApplyReq)
  // optional uint64 FUid = 1;
  if (has_fuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendRejectApplyReq)
}

::google::protobuf::uint8* TFriendRejectApplyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendRejectApplyReq)
  // optional uint64 FUid = 1;
  if (has_fuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendRejectApplyReq)
  return target;
}

int TFriendRejectApplyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 FUid = 1;
    if (has_fuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendRejectApplyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendRejectApplyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendRejectApplyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendRejectApplyReq::MergeFrom(const TFriendRejectApplyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fuid()) {
      set_fuid(from.fuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendRejectApplyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendRejectApplyReq::CopyFrom(const TFriendRejectApplyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendRejectApplyReq::IsInitialized() const {

  return true;
}

void TFriendRejectApplyReq::Swap(TFriendRejectApplyReq* other) {
  if (other != this) {
    std::swap(fuid_, other->fuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendRejectApplyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendRejectApplyReq_descriptor_;
  metadata.reflection = TFriendRejectApplyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendAgreeApplyReq::kFUidFieldNumber;
#endif  // !_MSC_VER

TFriendAgreeApplyReq::TFriendAgreeApplyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendAgreeApplyReq)
}

void TFriendAgreeApplyReq::InitAsDefaultInstance() {
}

TFriendAgreeApplyReq::TFriendAgreeApplyReq(const TFriendAgreeApplyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendAgreeApplyReq)
}

void TFriendAgreeApplyReq::SharedCtor() {
  _cached_size_ = 0;
  fuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendAgreeApplyReq::~TFriendAgreeApplyReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendAgreeApplyReq)
  SharedDtor();
}

void TFriendAgreeApplyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendAgreeApplyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendAgreeApplyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendAgreeApplyReq_descriptor_;
}

const TFriendAgreeApplyReq& TFriendAgreeApplyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendAgreeApplyReq* TFriendAgreeApplyReq::default_instance_ = NULL;

TFriendAgreeApplyReq* TFriendAgreeApplyReq::New() const {
  return new TFriendAgreeApplyReq;
}

void TFriendAgreeApplyReq::Clear() {
  fuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendAgreeApplyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendAgreeApplyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 FUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fuid_)));
          set_has_fuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendAgreeApplyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendAgreeApplyReq)
  return false;
#undef DO_
}

void TFriendAgreeApplyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendAgreeApplyReq)
  // optional uint64 FUid = 1;
  if (has_fuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendAgreeApplyReq)
}

::google::protobuf::uint8* TFriendAgreeApplyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendAgreeApplyReq)
  // optional uint64 FUid = 1;
  if (has_fuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendAgreeApplyReq)
  return target;
}

int TFriendAgreeApplyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 FUid = 1;
    if (has_fuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendAgreeApplyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendAgreeApplyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendAgreeApplyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendAgreeApplyReq::MergeFrom(const TFriendAgreeApplyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fuid()) {
      set_fuid(from.fuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendAgreeApplyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendAgreeApplyReq::CopyFrom(const TFriendAgreeApplyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendAgreeApplyReq::IsInitialized() const {

  return true;
}

void TFriendAgreeApplyReq::Swap(TFriendAgreeApplyReq* other) {
  if (other != this) {
    std::swap(fuid_, other->fuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendAgreeApplyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendAgreeApplyReq_descriptor_;
  metadata.reflection = TFriendAgreeApplyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendAgreeApplyFromOtherServerReq::kUidFieldNumber;
const int TFriendAgreeApplyFromOtherServerReq::kFUidFieldNumber;
const int TFriendAgreeApplyFromOtherServerReq::kFServerIdFieldNumber;
#endif  // !_MSC_VER

TFriendAgreeApplyFromOtherServerReq::TFriendAgreeApplyFromOtherServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendAgreeApplyFromOtherServerReq)
}

void TFriendAgreeApplyFromOtherServerReq::InitAsDefaultInstance() {
}

TFriendAgreeApplyFromOtherServerReq::TFriendAgreeApplyFromOtherServerReq(const TFriendAgreeApplyFromOtherServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendAgreeApplyFromOtherServerReq)
}

void TFriendAgreeApplyFromOtherServerReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  fuid_ = GOOGLE_ULONGLONG(0);
  fserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendAgreeApplyFromOtherServerReq::~TFriendAgreeApplyFromOtherServerReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendAgreeApplyFromOtherServerReq)
  SharedDtor();
}

void TFriendAgreeApplyFromOtherServerReq::SharedDtor() {
  if (fserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fserverid_;
  }
  if (this != default_instance_) {
  }
}

void TFriendAgreeApplyFromOtherServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendAgreeApplyFromOtherServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendAgreeApplyFromOtherServerReq_descriptor_;
}

const TFriendAgreeApplyFromOtherServerReq& TFriendAgreeApplyFromOtherServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendAgreeApplyFromOtherServerReq* TFriendAgreeApplyFromOtherServerReq::default_instance_ = NULL;

TFriendAgreeApplyFromOtherServerReq* TFriendAgreeApplyFromOtherServerReq::New() const {
  return new TFriendAgreeApplyFromOtherServerReq;
}

void TFriendAgreeApplyFromOtherServerReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TFriendAgreeApplyFromOtherServerReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(uid_, fuid_);
    if (has_fserverid()) {
      if (fserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fserverid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendAgreeApplyFromOtherServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendAgreeApplyFromOtherServerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_FUid;
        break;
      }

      // optional uint64 FUid = 2;
      case 2: {
        if (tag == 16) {
         parse_FUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fuid_)));
          set_has_fuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FServerId;
        break;
      }

      // optional string FServerId = 3;
      case 3: {
        if (tag == 26) {
         parse_FServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fserverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fserverid().data(), this->fserverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fserverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendAgreeApplyFromOtherServerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendAgreeApplyFromOtherServerReq)
  return false;
#undef DO_
}

void TFriendAgreeApplyFromOtherServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendAgreeApplyFromOtherServerReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint64 FUid = 2;
  if (has_fuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fuid(), output);
  }

  // optional string FServerId = 3;
  if (has_fserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fserverid().data(), this->fserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fserverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fserverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendAgreeApplyFromOtherServerReq)
}

::google::protobuf::uint8* TFriendAgreeApplyFromOtherServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendAgreeApplyFromOtherServerReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint64 FUid = 2;
  if (has_fuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fuid(), target);
  }

  // optional string FServerId = 3;
  if (has_fserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fserverid().data(), this->fserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fserverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fserverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendAgreeApplyFromOtherServerReq)
  return target;
}

int TFriendAgreeApplyFromOtherServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint64 FUid = 2;
    if (has_fuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fuid());
    }

    // optional string FServerId = 3;
    if (has_fserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fserverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendAgreeApplyFromOtherServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendAgreeApplyFromOtherServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendAgreeApplyFromOtherServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendAgreeApplyFromOtherServerReq::MergeFrom(const TFriendAgreeApplyFromOtherServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_fuid()) {
      set_fuid(from.fuid());
    }
    if (from.has_fserverid()) {
      set_fserverid(from.fserverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendAgreeApplyFromOtherServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendAgreeApplyFromOtherServerReq::CopyFrom(const TFriendAgreeApplyFromOtherServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendAgreeApplyFromOtherServerReq::IsInitialized() const {

  return true;
}

void TFriendAgreeApplyFromOtherServerReq::Swap(TFriendAgreeApplyFromOtherServerReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(fuid_, other->fuid_);
    std::swap(fserverid_, other->fserverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendAgreeApplyFromOtherServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendAgreeApplyFromOtherServerReq_descriptor_;
  metadata.reflection = TFriendAgreeApplyFromOtherServerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendIsFriendReq::kFUidFieldNumber;
#endif  // !_MSC_VER

TFriendIsFriendReq::TFriendIsFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendIsFriendReq)
}

void TFriendIsFriendReq::InitAsDefaultInstance() {
}

TFriendIsFriendReq::TFriendIsFriendReq(const TFriendIsFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendIsFriendReq)
}

void TFriendIsFriendReq::SharedCtor() {
  _cached_size_ = 0;
  fuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendIsFriendReq::~TFriendIsFriendReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendIsFriendReq)
  SharedDtor();
}

void TFriendIsFriendReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendIsFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendIsFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendIsFriendReq_descriptor_;
}

const TFriendIsFriendReq& TFriendIsFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendIsFriendReq* TFriendIsFriendReq::default_instance_ = NULL;

TFriendIsFriendReq* TFriendIsFriendReq::New() const {
  return new TFriendIsFriendReq;
}

void TFriendIsFriendReq::Clear() {
  fuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendIsFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendIsFriendReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 FUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fuid_)));
          set_has_fuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendIsFriendReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendIsFriendReq)
  return false;
#undef DO_
}

void TFriendIsFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendIsFriendReq)
  // optional uint64 FUid = 1;
  if (has_fuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendIsFriendReq)
}

::google::protobuf::uint8* TFriendIsFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendIsFriendReq)
  // optional uint64 FUid = 1;
  if (has_fuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendIsFriendReq)
  return target;
}

int TFriendIsFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 FUid = 1;
    if (has_fuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendIsFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendIsFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendIsFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendIsFriendReq::MergeFrom(const TFriendIsFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fuid()) {
      set_fuid(from.fuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendIsFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendIsFriendReq::CopyFrom(const TFriendIsFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendIsFriendReq::IsInitialized() const {

  return true;
}

void TFriendIsFriendReq::Swap(TFriendIsFriendReq* other) {
  if (other != this) {
    std::swap(fuid_, other->fuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendIsFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendIsFriendReq_descriptor_;
  metadata.reflection = TFriendIsFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendIsFriendRsp::kIsFriendFieldNumber;
#endif  // !_MSC_VER

TFriendIsFriendRsp::TFriendIsFriendRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendIsFriendRsp)
}

void TFriendIsFriendRsp::InitAsDefaultInstance() {
}

TFriendIsFriendRsp::TFriendIsFriendRsp(const TFriendIsFriendRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendIsFriendRsp)
}

void TFriendIsFriendRsp::SharedCtor() {
  _cached_size_ = 0;
  isfriend_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendIsFriendRsp::~TFriendIsFriendRsp() {
  // @@protoc_insertion_point(destructor:pb.TFriendIsFriendRsp)
  SharedDtor();
}

void TFriendIsFriendRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendIsFriendRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendIsFriendRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendIsFriendRsp_descriptor_;
}

const TFriendIsFriendRsp& TFriendIsFriendRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendIsFriendRsp* TFriendIsFriendRsp::default_instance_ = NULL;

TFriendIsFriendRsp* TFriendIsFriendRsp::New() const {
  return new TFriendIsFriendRsp;
}

void TFriendIsFriendRsp::Clear() {
  isfriend_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendIsFriendRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendIsFriendRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 IsFriend = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfriend_)));
          set_has_isfriend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendIsFriendRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendIsFriendRsp)
  return false;
#undef DO_
}

void TFriendIsFriendRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendIsFriendRsp)
  // optional uint32 IsFriend = 1;
  if (has_isfriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->isfriend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendIsFriendRsp)
}

::google::protobuf::uint8* TFriendIsFriendRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendIsFriendRsp)
  // optional uint32 IsFriend = 1;
  if (has_isfriend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->isfriend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendIsFriendRsp)
  return target;
}

int TFriendIsFriendRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IsFriend = 1;
    if (has_isfriend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfriend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendIsFriendRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendIsFriendRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendIsFriendRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendIsFriendRsp::MergeFrom(const TFriendIsFriendRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfriend()) {
      set_isfriend(from.isfriend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendIsFriendRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendIsFriendRsp::CopyFrom(const TFriendIsFriendRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendIsFriendRsp::IsInitialized() const {

  return true;
}

void TFriendIsFriendRsp::Swap(TFriendIsFriendRsp* other) {
  if (other != this) {
    std::swap(isfriend_, other->isfriend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendIsFriendRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendIsFriendRsp_descriptor_;
  metadata.reflection = TFriendIsFriendRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendAddBlackReq::kBUidFieldNumber;
const int TFriendAddBlackReq::kServerIdFieldNumber;
#endif  // !_MSC_VER

TFriendAddBlackReq::TFriendAddBlackReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendAddBlackReq)
}

void TFriendAddBlackReq::InitAsDefaultInstance() {
}

TFriendAddBlackReq::TFriendAddBlackReq(const TFriendAddBlackReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendAddBlackReq)
}

void TFriendAddBlackReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  buid_ = GOOGLE_ULONGLONG(0);
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendAddBlackReq::~TFriendAddBlackReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendAddBlackReq)
  SharedDtor();
}

void TFriendAddBlackReq::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void TFriendAddBlackReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendAddBlackReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendAddBlackReq_descriptor_;
}

const TFriendAddBlackReq& TFriendAddBlackReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendAddBlackReq* TFriendAddBlackReq::default_instance_ = NULL;

TFriendAddBlackReq* TFriendAddBlackReq::New() const {
  return new TFriendAddBlackReq;
}

void TFriendAddBlackReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    buid_ = GOOGLE_ULONGLONG(0);
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendAddBlackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendAddBlackReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 BUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buid_)));
          set_has_buid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 2;
      case 2: {
        if (tag == 18) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendAddBlackReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendAddBlackReq)
  return false;
#undef DO_
}

void TFriendAddBlackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendAddBlackReq)
  // optional uint64 BUid = 1;
  if (has_buid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->buid(), output);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendAddBlackReq)
}

::google::protobuf::uint8* TFriendAddBlackReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendAddBlackReq)
  // optional uint64 BUid = 1;
  if (has_buid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->buid(), target);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendAddBlackReq)
  return target;
}

int TFriendAddBlackReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 BUid = 1;
    if (has_buid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buid());
    }

    // optional string ServerId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendAddBlackReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendAddBlackReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendAddBlackReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendAddBlackReq::MergeFrom(const TFriendAddBlackReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buid()) {
      set_buid(from.buid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendAddBlackReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendAddBlackReq::CopyFrom(const TFriendAddBlackReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendAddBlackReq::IsInitialized() const {

  return true;
}

void TFriendAddBlackReq::Swap(TFriendAddBlackReq* other) {
  if (other != this) {
    std::swap(buid_, other->buid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendAddBlackReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendAddBlackReq_descriptor_;
  metadata.reflection = TFriendAddBlackReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendDelBlackReq::kBUidFieldNumber;
#endif  // !_MSC_VER

TFriendDelBlackReq::TFriendDelBlackReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendDelBlackReq)
}

void TFriendDelBlackReq::InitAsDefaultInstance() {
}

TFriendDelBlackReq::TFriendDelBlackReq(const TFriendDelBlackReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendDelBlackReq)
}

void TFriendDelBlackReq::SharedCtor() {
  _cached_size_ = 0;
  buid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendDelBlackReq::~TFriendDelBlackReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendDelBlackReq)
  SharedDtor();
}

void TFriendDelBlackReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendDelBlackReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendDelBlackReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendDelBlackReq_descriptor_;
}

const TFriendDelBlackReq& TFriendDelBlackReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendDelBlackReq* TFriendDelBlackReq::default_instance_ = NULL;

TFriendDelBlackReq* TFriendDelBlackReq::New() const {
  return new TFriendDelBlackReq;
}

void TFriendDelBlackReq::Clear() {
  buid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendDelBlackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendDelBlackReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 BUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buid_)));
          set_has_buid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendDelBlackReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendDelBlackReq)
  return false;
#undef DO_
}

void TFriendDelBlackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendDelBlackReq)
  // optional uint64 BUid = 1;
  if (has_buid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->buid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendDelBlackReq)
}

::google::protobuf::uint8* TFriendDelBlackReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendDelBlackReq)
  // optional uint64 BUid = 1;
  if (has_buid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->buid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendDelBlackReq)
  return target;
}

int TFriendDelBlackReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 BUid = 1;
    if (has_buid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendDelBlackReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendDelBlackReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendDelBlackReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendDelBlackReq::MergeFrom(const TFriendDelBlackReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buid()) {
      set_buid(from.buid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendDelBlackReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendDelBlackReq::CopyFrom(const TFriendDelBlackReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendDelBlackReq::IsInitialized() const {

  return true;
}

void TFriendDelBlackReq::Swap(TFriendDelBlackReq* other) {
  if (other != this) {
    std::swap(buid_, other->buid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendDelBlackReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendDelBlackReq_descriptor_;
  metadata.reflection = TFriendDelBlackReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendIsBlackReq::kBUidFieldNumber;
#endif  // !_MSC_VER

TFriendIsBlackReq::TFriendIsBlackReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendIsBlackReq)
}

void TFriendIsBlackReq::InitAsDefaultInstance() {
}

TFriendIsBlackReq::TFriendIsBlackReq(const TFriendIsBlackReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendIsBlackReq)
}

void TFriendIsBlackReq::SharedCtor() {
  _cached_size_ = 0;
  buid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendIsBlackReq::~TFriendIsBlackReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendIsBlackReq)
  SharedDtor();
}

void TFriendIsBlackReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendIsBlackReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendIsBlackReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendIsBlackReq_descriptor_;
}

const TFriendIsBlackReq& TFriendIsBlackReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendIsBlackReq* TFriendIsBlackReq::default_instance_ = NULL;

TFriendIsBlackReq* TFriendIsBlackReq::New() const {
  return new TFriendIsBlackReq;
}

void TFriendIsBlackReq::Clear() {
  buid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendIsBlackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendIsBlackReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 BUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buid_)));
          set_has_buid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendIsBlackReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendIsBlackReq)
  return false;
#undef DO_
}

void TFriendIsBlackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendIsBlackReq)
  // optional uint64 BUid = 1;
  if (has_buid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->buid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendIsBlackReq)
}

::google::protobuf::uint8* TFriendIsBlackReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendIsBlackReq)
  // optional uint64 BUid = 1;
  if (has_buid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->buid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendIsBlackReq)
  return target;
}

int TFriendIsBlackReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 BUid = 1;
    if (has_buid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendIsBlackReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendIsBlackReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendIsBlackReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendIsBlackReq::MergeFrom(const TFriendIsBlackReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buid()) {
      set_buid(from.buid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendIsBlackReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendIsBlackReq::CopyFrom(const TFriendIsBlackReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendIsBlackReq::IsInitialized() const {

  return true;
}

void TFriendIsBlackReq::Swap(TFriendIsBlackReq* other) {
  if (other != this) {
    std::swap(buid_, other->buid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendIsBlackReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendIsBlackReq_descriptor_;
  metadata.reflection = TFriendIsBlackReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendIsBlackRsp::kIsBlackFieldNumber;
#endif  // !_MSC_VER

TFriendIsBlackRsp::TFriendIsBlackRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendIsBlackRsp)
}

void TFriendIsBlackRsp::InitAsDefaultInstance() {
}

TFriendIsBlackRsp::TFriendIsBlackRsp(const TFriendIsBlackRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendIsBlackRsp)
}

void TFriendIsBlackRsp::SharedCtor() {
  _cached_size_ = 0;
  isblack_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendIsBlackRsp::~TFriendIsBlackRsp() {
  // @@protoc_insertion_point(destructor:pb.TFriendIsBlackRsp)
  SharedDtor();
}

void TFriendIsBlackRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendIsBlackRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendIsBlackRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendIsBlackRsp_descriptor_;
}

const TFriendIsBlackRsp& TFriendIsBlackRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendIsBlackRsp* TFriendIsBlackRsp::default_instance_ = NULL;

TFriendIsBlackRsp* TFriendIsBlackRsp::New() const {
  return new TFriendIsBlackRsp;
}

void TFriendIsBlackRsp::Clear() {
  isblack_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendIsBlackRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendIsBlackRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 IsBlack = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isblack_)));
          set_has_isblack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendIsBlackRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendIsBlackRsp)
  return false;
#undef DO_
}

void TFriendIsBlackRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendIsBlackRsp)
  // optional uint32 IsBlack = 1;
  if (has_isblack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->isblack(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendIsBlackRsp)
}

::google::protobuf::uint8* TFriendIsBlackRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendIsBlackRsp)
  // optional uint32 IsBlack = 1;
  if (has_isblack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->isblack(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendIsBlackRsp)
  return target;
}

int TFriendIsBlackRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IsBlack = 1;
    if (has_isblack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isblack());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendIsBlackRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendIsBlackRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendIsBlackRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendIsBlackRsp::MergeFrom(const TFriendIsBlackRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isblack()) {
      set_isblack(from.isblack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendIsBlackRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendIsBlackRsp::CopyFrom(const TFriendIsBlackRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendIsBlackRsp::IsInitialized() const {

  return true;
}

void TFriendIsBlackRsp::Swap(TFriendIsBlackRsp* other) {
  if (other != this) {
    std::swap(isblack_, other->isblack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendIsBlackRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendIsBlackRsp_descriptor_;
  metadata.reflection = TFriendIsBlackRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TFriendAgreeAllApplyReq::TFriendAgreeAllApplyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendAgreeAllApplyReq)
}

void TFriendAgreeAllApplyReq::InitAsDefaultInstance() {
}

TFriendAgreeAllApplyReq::TFriendAgreeAllApplyReq(const TFriendAgreeAllApplyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendAgreeAllApplyReq)
}

void TFriendAgreeAllApplyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendAgreeAllApplyReq::~TFriendAgreeAllApplyReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendAgreeAllApplyReq)
  SharedDtor();
}

void TFriendAgreeAllApplyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendAgreeAllApplyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendAgreeAllApplyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendAgreeAllApplyReq_descriptor_;
}

const TFriendAgreeAllApplyReq& TFriendAgreeAllApplyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendAgreeAllApplyReq* TFriendAgreeAllApplyReq::default_instance_ = NULL;

TFriendAgreeAllApplyReq* TFriendAgreeAllApplyReq::New() const {
  return new TFriendAgreeAllApplyReq;
}

void TFriendAgreeAllApplyReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendAgreeAllApplyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendAgreeAllApplyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendAgreeAllApplyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendAgreeAllApplyReq)
  return false;
#undef DO_
}

void TFriendAgreeAllApplyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendAgreeAllApplyReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendAgreeAllApplyReq)
}

::google::protobuf::uint8* TFriendAgreeAllApplyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendAgreeAllApplyReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendAgreeAllApplyReq)
  return target;
}

int TFriendAgreeAllApplyReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendAgreeAllApplyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendAgreeAllApplyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendAgreeAllApplyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendAgreeAllApplyReq::MergeFrom(const TFriendAgreeAllApplyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendAgreeAllApplyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendAgreeAllApplyReq::CopyFrom(const TFriendAgreeAllApplyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendAgreeAllApplyReq::IsInitialized() const {

  return true;
}

void TFriendAgreeAllApplyReq::Swap(TFriendAgreeAllApplyReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendAgreeAllApplyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendAgreeAllApplyReq_descriptor_;
  metadata.reflection = TFriendAgreeAllApplyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendAgreeAllApplyRsp::kAddNumFieldNumber;
const int TFriendAgreeAllApplyRsp::kAddUidArrayFieldNumber;
const int TFriendAgreeAllApplyRsp::kFailUidArrayFieldNumber;
#endif  // !_MSC_VER

TFriendAgreeAllApplyRsp::TFriendAgreeAllApplyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendAgreeAllApplyRsp)
}

void TFriendAgreeAllApplyRsp::InitAsDefaultInstance() {
}

TFriendAgreeAllApplyRsp::TFriendAgreeAllApplyRsp(const TFriendAgreeAllApplyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendAgreeAllApplyRsp)
}

void TFriendAgreeAllApplyRsp::SharedCtor() {
  _cached_size_ = 0;
  addnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendAgreeAllApplyRsp::~TFriendAgreeAllApplyRsp() {
  // @@protoc_insertion_point(destructor:pb.TFriendAgreeAllApplyRsp)
  SharedDtor();
}

void TFriendAgreeAllApplyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendAgreeAllApplyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendAgreeAllApplyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendAgreeAllApplyRsp_descriptor_;
}

const TFriendAgreeAllApplyRsp& TFriendAgreeAllApplyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendAgreeAllApplyRsp* TFriendAgreeAllApplyRsp::default_instance_ = NULL;

TFriendAgreeAllApplyRsp* TFriendAgreeAllApplyRsp::New() const {
  return new TFriendAgreeAllApplyRsp;
}

void TFriendAgreeAllApplyRsp::Clear() {
  addnum_ = 0u;
  adduidarray_.Clear();
  failuidarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendAgreeAllApplyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendAgreeAllApplyRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AddNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addnum_)));
          set_has_addnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AddUidArray;
        break;
      }

      // repeated uint64 AddUidArray = 2;
      case 2: {
        if (tag == 16) {
         parse_AddUidArray:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_adduidarray())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_adduidarray())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AddUidArray;
        if (input->ExpectTag(24)) goto parse_FailUidArray;
        break;
      }

      // repeated uint64 FailUidArray = 3;
      case 3: {
        if (tag == 24) {
         parse_FailUidArray:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_failuidarray())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_failuidarray())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FailUidArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendAgreeAllApplyRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendAgreeAllApplyRsp)
  return false;
#undef DO_
}

void TFriendAgreeAllApplyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendAgreeAllApplyRsp)
  // optional uint32 AddNum = 1;
  if (has_addnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->addnum(), output);
  }

  // repeated uint64 AddUidArray = 2;
  for (int i = 0; i < this->adduidarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->adduidarray(i), output);
  }

  // repeated uint64 FailUidArray = 3;
  for (int i = 0; i < this->failuidarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->failuidarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendAgreeAllApplyRsp)
}

::google::protobuf::uint8* TFriendAgreeAllApplyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendAgreeAllApplyRsp)
  // optional uint32 AddNum = 1;
  if (has_addnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->addnum(), target);
  }

  // repeated uint64 AddUidArray = 2;
  for (int i = 0; i < this->adduidarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->adduidarray(i), target);
  }

  // repeated uint64 FailUidArray = 3;
  for (int i = 0; i < this->failuidarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->failuidarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendAgreeAllApplyRsp)
  return target;
}

int TFriendAgreeAllApplyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AddNum = 1;
    if (has_addnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addnum());
    }

  }
  // repeated uint64 AddUidArray = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->adduidarray_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->adduidarray(i));
    }
    total_size += 1 * this->adduidarray_size() + data_size;
  }

  // repeated uint64 FailUidArray = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->failuidarray_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->failuidarray(i));
    }
    total_size += 1 * this->failuidarray_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendAgreeAllApplyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendAgreeAllApplyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendAgreeAllApplyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendAgreeAllApplyRsp::MergeFrom(const TFriendAgreeAllApplyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  adduidarray_.MergeFrom(from.adduidarray_);
  failuidarray_.MergeFrom(from.failuidarray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addnum()) {
      set_addnum(from.addnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendAgreeAllApplyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendAgreeAllApplyRsp::CopyFrom(const TFriendAgreeAllApplyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendAgreeAllApplyRsp::IsInitialized() const {

  return true;
}

void TFriendAgreeAllApplyRsp::Swap(TFriendAgreeAllApplyRsp* other) {
  if (other != this) {
    std::swap(addnum_, other->addnum_);
    adduidarray_.Swap(&other->adduidarray_);
    failuidarray_.Swap(&other->failuidarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendAgreeAllApplyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendAgreeAllApplyRsp_descriptor_;
  metadata.reflection = TFriendAgreeAllApplyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TFriendRejectAllApplyReq::TFriendRejectAllApplyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendRejectAllApplyReq)
}

void TFriendRejectAllApplyReq::InitAsDefaultInstance() {
}

TFriendRejectAllApplyReq::TFriendRejectAllApplyReq(const TFriendRejectAllApplyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendRejectAllApplyReq)
}

void TFriendRejectAllApplyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendRejectAllApplyReq::~TFriendRejectAllApplyReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendRejectAllApplyReq)
  SharedDtor();
}

void TFriendRejectAllApplyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendRejectAllApplyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendRejectAllApplyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendRejectAllApplyReq_descriptor_;
}

const TFriendRejectAllApplyReq& TFriendRejectAllApplyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendRejectAllApplyReq* TFriendRejectAllApplyReq::default_instance_ = NULL;

TFriendRejectAllApplyReq* TFriendRejectAllApplyReq::New() const {
  return new TFriendRejectAllApplyReq;
}

void TFriendRejectAllApplyReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendRejectAllApplyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendRejectAllApplyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendRejectAllApplyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendRejectAllApplyReq)
  return false;
#undef DO_
}

void TFriendRejectAllApplyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendRejectAllApplyReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendRejectAllApplyReq)
}

::google::protobuf::uint8* TFriendRejectAllApplyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendRejectAllApplyReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendRejectAllApplyReq)
  return target;
}

int TFriendRejectAllApplyReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendRejectAllApplyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendRejectAllApplyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendRejectAllApplyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendRejectAllApplyReq::MergeFrom(const TFriendRejectAllApplyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendRejectAllApplyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendRejectAllApplyReq::CopyFrom(const TFriendRejectAllApplyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendRejectAllApplyReq::IsInitialized() const {

  return true;
}

void TFriendRejectAllApplyReq::Swap(TFriendRejectAllApplyReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendRejectAllApplyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendRejectAllApplyReq_descriptor_;
  metadata.reflection = TFriendRejectAllApplyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendSendGiftToFriendReq::kFUidFieldNumber;
#endif  // !_MSC_VER

TFriendSendGiftToFriendReq::TFriendSendGiftToFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendSendGiftToFriendReq)
}

void TFriendSendGiftToFriendReq::InitAsDefaultInstance() {
}

TFriendSendGiftToFriendReq::TFriendSendGiftToFriendReq(const TFriendSendGiftToFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendSendGiftToFriendReq)
}

void TFriendSendGiftToFriendReq::SharedCtor() {
  _cached_size_ = 0;
  fuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendSendGiftToFriendReq::~TFriendSendGiftToFriendReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendSendGiftToFriendReq)
  SharedDtor();
}

void TFriendSendGiftToFriendReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendSendGiftToFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendSendGiftToFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendSendGiftToFriendReq_descriptor_;
}

const TFriendSendGiftToFriendReq& TFriendSendGiftToFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendSendGiftToFriendReq* TFriendSendGiftToFriendReq::default_instance_ = NULL;

TFriendSendGiftToFriendReq* TFriendSendGiftToFriendReq::New() const {
  return new TFriendSendGiftToFriendReq;
}

void TFriendSendGiftToFriendReq::Clear() {
  fuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendSendGiftToFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendSendGiftToFriendReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 FUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fuid_)));
          set_has_fuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendSendGiftToFriendReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendSendGiftToFriendReq)
  return false;
#undef DO_
}

void TFriendSendGiftToFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendSendGiftToFriendReq)
  // optional uint64 FUid = 1;
  if (has_fuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendSendGiftToFriendReq)
}

::google::protobuf::uint8* TFriendSendGiftToFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendSendGiftToFriendReq)
  // optional uint64 FUid = 1;
  if (has_fuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendSendGiftToFriendReq)
  return target;
}

int TFriendSendGiftToFriendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 FUid = 1;
    if (has_fuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendSendGiftToFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendSendGiftToFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendSendGiftToFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendSendGiftToFriendReq::MergeFrom(const TFriendSendGiftToFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fuid()) {
      set_fuid(from.fuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendSendGiftToFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendSendGiftToFriendReq::CopyFrom(const TFriendSendGiftToFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendSendGiftToFriendReq::IsInitialized() const {

  return true;
}

void TFriendSendGiftToFriendReq::Swap(TFriendSendGiftToFriendReq* other) {
  if (other != this) {
    std::swap(fuid_, other->fuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendSendGiftToFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendSendGiftToFriendReq_descriptor_;
  metadata.reflection = TFriendSendGiftToFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendSendGiftToFriendByOtherServerReq::kUidFieldNumber;
const int TFriendSendGiftToFriendByOtherServerReq::kFUidFieldNumber;
const int TFriendSendGiftToFriendByOtherServerReq::kFServerIdFieldNumber;
#endif  // !_MSC_VER

TFriendSendGiftToFriendByOtherServerReq::TFriendSendGiftToFriendByOtherServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendSendGiftToFriendByOtherServerReq)
}

void TFriendSendGiftToFriendByOtherServerReq::InitAsDefaultInstance() {
}

TFriendSendGiftToFriendByOtherServerReq::TFriendSendGiftToFriendByOtherServerReq(const TFriendSendGiftToFriendByOtherServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendSendGiftToFriendByOtherServerReq)
}

void TFriendSendGiftToFriendByOtherServerReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  fuid_ = GOOGLE_ULONGLONG(0);
  fserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendSendGiftToFriendByOtherServerReq::~TFriendSendGiftToFriendByOtherServerReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendSendGiftToFriendByOtherServerReq)
  SharedDtor();
}

void TFriendSendGiftToFriendByOtherServerReq::SharedDtor() {
  if (fserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fserverid_;
  }
  if (this != default_instance_) {
  }
}

void TFriendSendGiftToFriendByOtherServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendSendGiftToFriendByOtherServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendSendGiftToFriendByOtherServerReq_descriptor_;
}

const TFriendSendGiftToFriendByOtherServerReq& TFriendSendGiftToFriendByOtherServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendSendGiftToFriendByOtherServerReq* TFriendSendGiftToFriendByOtherServerReq::default_instance_ = NULL;

TFriendSendGiftToFriendByOtherServerReq* TFriendSendGiftToFriendByOtherServerReq::New() const {
  return new TFriendSendGiftToFriendByOtherServerReq;
}

void TFriendSendGiftToFriendByOtherServerReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TFriendSendGiftToFriendByOtherServerReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(uid_, fuid_);
    if (has_fserverid()) {
      if (fserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fserverid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendSendGiftToFriendByOtherServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendSendGiftToFriendByOtherServerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_FUid;
        break;
      }

      // optional uint64 FUid = 2;
      case 2: {
        if (tag == 16) {
         parse_FUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fuid_)));
          set_has_fuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FServerId;
        break;
      }

      // optional string FServerId = 3;
      case 3: {
        if (tag == 26) {
         parse_FServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fserverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fserverid().data(), this->fserverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fserverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendSendGiftToFriendByOtherServerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendSendGiftToFriendByOtherServerReq)
  return false;
#undef DO_
}

void TFriendSendGiftToFriendByOtherServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendSendGiftToFriendByOtherServerReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint64 FUid = 2;
  if (has_fuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fuid(), output);
  }

  // optional string FServerId = 3;
  if (has_fserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fserverid().data(), this->fserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fserverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fserverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendSendGiftToFriendByOtherServerReq)
}

::google::protobuf::uint8* TFriendSendGiftToFriendByOtherServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendSendGiftToFriendByOtherServerReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint64 FUid = 2;
  if (has_fuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fuid(), target);
  }

  // optional string FServerId = 3;
  if (has_fserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fserverid().data(), this->fserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fserverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fserverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendSendGiftToFriendByOtherServerReq)
  return target;
}

int TFriendSendGiftToFriendByOtherServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint64 FUid = 2;
    if (has_fuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fuid());
    }

    // optional string FServerId = 3;
    if (has_fserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fserverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendSendGiftToFriendByOtherServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendSendGiftToFriendByOtherServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendSendGiftToFriendByOtherServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendSendGiftToFriendByOtherServerReq::MergeFrom(const TFriendSendGiftToFriendByOtherServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_fuid()) {
      set_fuid(from.fuid());
    }
    if (from.has_fserverid()) {
      set_fserverid(from.fserverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendSendGiftToFriendByOtherServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendSendGiftToFriendByOtherServerReq::CopyFrom(const TFriendSendGiftToFriendByOtherServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendSendGiftToFriendByOtherServerReq::IsInitialized() const {

  return true;
}

void TFriendSendGiftToFriendByOtherServerReq::Swap(TFriendSendGiftToFriendByOtherServerReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(fuid_, other->fuid_);
    std::swap(fserverid_, other->fserverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendSendGiftToFriendByOtherServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendSendGiftToFriendByOtherServerReq_descriptor_;
  metadata.reflection = TFriendSendGiftToFriendByOtherServerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TFriendSendGiftToAllFriendReq::TFriendSendGiftToAllFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendSendGiftToAllFriendReq)
}

void TFriendSendGiftToAllFriendReq::InitAsDefaultInstance() {
}

TFriendSendGiftToAllFriendReq::TFriendSendGiftToAllFriendReq(const TFriendSendGiftToAllFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendSendGiftToAllFriendReq)
}

void TFriendSendGiftToAllFriendReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendSendGiftToAllFriendReq::~TFriendSendGiftToAllFriendReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendSendGiftToAllFriendReq)
  SharedDtor();
}

void TFriendSendGiftToAllFriendReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendSendGiftToAllFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendSendGiftToAllFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendSendGiftToAllFriendReq_descriptor_;
}

const TFriendSendGiftToAllFriendReq& TFriendSendGiftToAllFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendSendGiftToAllFriendReq* TFriendSendGiftToAllFriendReq::default_instance_ = NULL;

TFriendSendGiftToAllFriendReq* TFriendSendGiftToAllFriendReq::New() const {
  return new TFriendSendGiftToAllFriendReq;
}

void TFriendSendGiftToAllFriendReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendSendGiftToAllFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendSendGiftToAllFriendReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendSendGiftToAllFriendReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendSendGiftToAllFriendReq)
  return false;
#undef DO_
}

void TFriendSendGiftToAllFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendSendGiftToAllFriendReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendSendGiftToAllFriendReq)
}

::google::protobuf::uint8* TFriendSendGiftToAllFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendSendGiftToAllFriendReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendSendGiftToAllFriendReq)
  return target;
}

int TFriendSendGiftToAllFriendReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendSendGiftToAllFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendSendGiftToAllFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendSendGiftToAllFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendSendGiftToAllFriendReq::MergeFrom(const TFriendSendGiftToAllFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendSendGiftToAllFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendSendGiftToAllFriendReq::CopyFrom(const TFriendSendGiftToAllFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendSendGiftToAllFriendReq::IsInitialized() const {

  return true;
}

void TFriendSendGiftToAllFriendReq::Swap(TFriendSendGiftToAllFriendReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendSendGiftToAllFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendSendGiftToAllFriendReq_descriptor_;
  metadata.reflection = TFriendSendGiftToAllFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendSendGiftToAllFriendRsp::kSendUidsFieldNumber;
#endif  // !_MSC_VER

TFriendSendGiftToAllFriendRsp::TFriendSendGiftToAllFriendRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendSendGiftToAllFriendRsp)
}

void TFriendSendGiftToAllFriendRsp::InitAsDefaultInstance() {
}

TFriendSendGiftToAllFriendRsp::TFriendSendGiftToAllFriendRsp(const TFriendSendGiftToAllFriendRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendSendGiftToAllFriendRsp)
}

void TFriendSendGiftToAllFriendRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendSendGiftToAllFriendRsp::~TFriendSendGiftToAllFriendRsp() {
  // @@protoc_insertion_point(destructor:pb.TFriendSendGiftToAllFriendRsp)
  SharedDtor();
}

void TFriendSendGiftToAllFriendRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendSendGiftToAllFriendRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendSendGiftToAllFriendRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendSendGiftToAllFriendRsp_descriptor_;
}

const TFriendSendGiftToAllFriendRsp& TFriendSendGiftToAllFriendRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendSendGiftToAllFriendRsp* TFriendSendGiftToAllFriendRsp::default_instance_ = NULL;

TFriendSendGiftToAllFriendRsp* TFriendSendGiftToAllFriendRsp::New() const {
  return new TFriendSendGiftToAllFriendRsp;
}

void TFriendSendGiftToAllFriendRsp::Clear() {
  senduids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendSendGiftToAllFriendRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendSendGiftToAllFriendRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 SendUids = 1;
      case 1: {
        if (tag == 8) {
         parse_SendUids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_senduids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_senduids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_SendUids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendSendGiftToAllFriendRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendSendGiftToAllFriendRsp)
  return false;
#undef DO_
}

void TFriendSendGiftToAllFriendRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendSendGiftToAllFriendRsp)
  // repeated uint64 SendUids = 1;
  for (int i = 0; i < this->senduids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->senduids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendSendGiftToAllFriendRsp)
}

::google::protobuf::uint8* TFriendSendGiftToAllFriendRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendSendGiftToAllFriendRsp)
  // repeated uint64 SendUids = 1;
  for (int i = 0; i < this->senduids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->senduids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendSendGiftToAllFriendRsp)
  return target;
}

int TFriendSendGiftToAllFriendRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint64 SendUids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->senduids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->senduids(i));
    }
    total_size += 1 * this->senduids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendSendGiftToAllFriendRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendSendGiftToAllFriendRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendSendGiftToAllFriendRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendSendGiftToAllFriendRsp::MergeFrom(const TFriendSendGiftToAllFriendRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  senduids_.MergeFrom(from.senduids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendSendGiftToAllFriendRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendSendGiftToAllFriendRsp::CopyFrom(const TFriendSendGiftToAllFriendRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendSendGiftToAllFriendRsp::IsInitialized() const {

  return true;
}

void TFriendSendGiftToAllFriendRsp::Swap(TFriendSendGiftToAllFriendRsp* other) {
  if (other != this) {
    senduids_.Swap(&other->senduids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendSendGiftToAllFriendRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendSendGiftToAllFriendRsp_descriptor_;
  metadata.reflection = TFriendSendGiftToAllFriendRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendReceiveFriendGiftReq::kFUidFieldNumber;
#endif  // !_MSC_VER

TFriendReceiveFriendGiftReq::TFriendReceiveFriendGiftReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendReceiveFriendGiftReq)
}

void TFriendReceiveFriendGiftReq::InitAsDefaultInstance() {
}

TFriendReceiveFriendGiftReq::TFriendReceiveFriendGiftReq(const TFriendReceiveFriendGiftReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendReceiveFriendGiftReq)
}

void TFriendReceiveFriendGiftReq::SharedCtor() {
  _cached_size_ = 0;
  fuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendReceiveFriendGiftReq::~TFriendReceiveFriendGiftReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendReceiveFriendGiftReq)
  SharedDtor();
}

void TFriendReceiveFriendGiftReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendReceiveFriendGiftReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendReceiveFriendGiftReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendReceiveFriendGiftReq_descriptor_;
}

const TFriendReceiveFriendGiftReq& TFriendReceiveFriendGiftReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendReceiveFriendGiftReq* TFriendReceiveFriendGiftReq::default_instance_ = NULL;

TFriendReceiveFriendGiftReq* TFriendReceiveFriendGiftReq::New() const {
  return new TFriendReceiveFriendGiftReq;
}

void TFriendReceiveFriendGiftReq::Clear() {
  fuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendReceiveFriendGiftReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendReceiveFriendGiftReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 FUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fuid_)));
          set_has_fuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendReceiveFriendGiftReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendReceiveFriendGiftReq)
  return false;
#undef DO_
}

void TFriendReceiveFriendGiftReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendReceiveFriendGiftReq)
  // optional uint64 FUid = 1;
  if (has_fuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendReceiveFriendGiftReq)
}

::google::protobuf::uint8* TFriendReceiveFriendGiftReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendReceiveFriendGiftReq)
  // optional uint64 FUid = 1;
  if (has_fuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendReceiveFriendGiftReq)
  return target;
}

int TFriendReceiveFriendGiftReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 FUid = 1;
    if (has_fuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendReceiveFriendGiftReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendReceiveFriendGiftReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendReceiveFriendGiftReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendReceiveFriendGiftReq::MergeFrom(const TFriendReceiveFriendGiftReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fuid()) {
      set_fuid(from.fuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendReceiveFriendGiftReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendReceiveFriendGiftReq::CopyFrom(const TFriendReceiveFriendGiftReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendReceiveFriendGiftReq::IsInitialized() const {

  return true;
}

void TFriendReceiveFriendGiftReq::Swap(TFriendReceiveFriendGiftReq* other) {
  if (other != this) {
    std::swap(fuid_, other->fuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendReceiveFriendGiftReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendReceiveFriendGiftReq_descriptor_;
  metadata.reflection = TFriendReceiveFriendGiftReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TFriendReceiveAllGiftReq::TFriendReceiveAllGiftReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendReceiveAllGiftReq)
}

void TFriendReceiveAllGiftReq::InitAsDefaultInstance() {
}

TFriendReceiveAllGiftReq::TFriendReceiveAllGiftReq(const TFriendReceiveAllGiftReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendReceiveAllGiftReq)
}

void TFriendReceiveAllGiftReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendReceiveAllGiftReq::~TFriendReceiveAllGiftReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendReceiveAllGiftReq)
  SharedDtor();
}

void TFriendReceiveAllGiftReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendReceiveAllGiftReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendReceiveAllGiftReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendReceiveAllGiftReq_descriptor_;
}

const TFriendReceiveAllGiftReq& TFriendReceiveAllGiftReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendReceiveAllGiftReq* TFriendReceiveAllGiftReq::default_instance_ = NULL;

TFriendReceiveAllGiftReq* TFriendReceiveAllGiftReq::New() const {
  return new TFriendReceiveAllGiftReq;
}

void TFriendReceiveAllGiftReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendReceiveAllGiftReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendReceiveAllGiftReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendReceiveAllGiftReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendReceiveAllGiftReq)
  return false;
#undef DO_
}

void TFriendReceiveAllGiftReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendReceiveAllGiftReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendReceiveAllGiftReq)
}

::google::protobuf::uint8* TFriendReceiveAllGiftReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendReceiveAllGiftReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendReceiveAllGiftReq)
  return target;
}

int TFriendReceiveAllGiftReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendReceiveAllGiftReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendReceiveAllGiftReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendReceiveAllGiftReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendReceiveAllGiftReq::MergeFrom(const TFriendReceiveAllGiftReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendReceiveAllGiftReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendReceiveAllGiftReq::CopyFrom(const TFriendReceiveAllGiftReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendReceiveAllGiftReq::IsInitialized() const {

  return true;
}

void TFriendReceiveAllGiftReq::Swap(TFriendReceiveAllGiftReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendReceiveAllGiftReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendReceiveAllGiftReq_descriptor_;
  metadata.reflection = TFriendReceiveAllGiftReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendReceiveAllGiftRsp::kReceiveUidsFieldNumber;
#endif  // !_MSC_VER

TFriendReceiveAllGiftRsp::TFriendReceiveAllGiftRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendReceiveAllGiftRsp)
}

void TFriendReceiveAllGiftRsp::InitAsDefaultInstance() {
}

TFriendReceiveAllGiftRsp::TFriendReceiveAllGiftRsp(const TFriendReceiveAllGiftRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendReceiveAllGiftRsp)
}

void TFriendReceiveAllGiftRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendReceiveAllGiftRsp::~TFriendReceiveAllGiftRsp() {
  // @@protoc_insertion_point(destructor:pb.TFriendReceiveAllGiftRsp)
  SharedDtor();
}

void TFriendReceiveAllGiftRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendReceiveAllGiftRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendReceiveAllGiftRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendReceiveAllGiftRsp_descriptor_;
}

const TFriendReceiveAllGiftRsp& TFriendReceiveAllGiftRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendReceiveAllGiftRsp* TFriendReceiveAllGiftRsp::default_instance_ = NULL;

TFriendReceiveAllGiftRsp* TFriendReceiveAllGiftRsp::New() const {
  return new TFriendReceiveAllGiftRsp;
}

void TFriendReceiveAllGiftRsp::Clear() {
  receiveuids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendReceiveAllGiftRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendReceiveAllGiftRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 ReceiveUids = 1;
      case 1: {
        if (tag == 8) {
         parse_ReceiveUids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_receiveuids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_receiveuids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_ReceiveUids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendReceiveAllGiftRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendReceiveAllGiftRsp)
  return false;
#undef DO_
}

void TFriendReceiveAllGiftRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendReceiveAllGiftRsp)
  // repeated uint64 ReceiveUids = 1;
  for (int i = 0; i < this->receiveuids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->receiveuids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendReceiveAllGiftRsp)
}

::google::protobuf::uint8* TFriendReceiveAllGiftRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendReceiveAllGiftRsp)
  // repeated uint64 ReceiveUids = 1;
  for (int i = 0; i < this->receiveuids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->receiveuids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendReceiveAllGiftRsp)
  return target;
}

int TFriendReceiveAllGiftRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint64 ReceiveUids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->receiveuids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->receiveuids(i));
    }
    total_size += 1 * this->receiveuids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendReceiveAllGiftRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendReceiveAllGiftRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendReceiveAllGiftRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendReceiveAllGiftRsp::MergeFrom(const TFriendReceiveAllGiftRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  receiveuids_.MergeFrom(from.receiveuids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendReceiveAllGiftRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendReceiveAllGiftRsp::CopyFrom(const TFriendReceiveAllGiftRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendReceiveAllGiftRsp::IsInitialized() const {

  return true;
}

void TFriendReceiveAllGiftRsp::Swap(TFriendReceiveAllGiftRsp* other) {
  if (other != this) {
    receiveuids_.Swap(&other->receiveuids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendReceiveAllGiftRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendReceiveAllGiftRsp_descriptor_;
  metadata.reflection = TFriendReceiveAllGiftRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendGetCheckInfoByOtherServerReq::kFUidFieldNumber;
#endif  // !_MSC_VER

TFriendGetCheckInfoByOtherServerReq::TFriendGetCheckInfoByOtherServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendGetCheckInfoByOtherServerReq)
}

void TFriendGetCheckInfoByOtherServerReq::InitAsDefaultInstance() {
}

TFriendGetCheckInfoByOtherServerReq::TFriendGetCheckInfoByOtherServerReq(const TFriendGetCheckInfoByOtherServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendGetCheckInfoByOtherServerReq)
}

void TFriendGetCheckInfoByOtherServerReq::SharedCtor() {
  _cached_size_ = 0;
  fuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendGetCheckInfoByOtherServerReq::~TFriendGetCheckInfoByOtherServerReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendGetCheckInfoByOtherServerReq)
  SharedDtor();
}

void TFriendGetCheckInfoByOtherServerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendGetCheckInfoByOtherServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendGetCheckInfoByOtherServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendGetCheckInfoByOtherServerReq_descriptor_;
}

const TFriendGetCheckInfoByOtherServerReq& TFriendGetCheckInfoByOtherServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendGetCheckInfoByOtherServerReq* TFriendGetCheckInfoByOtherServerReq::default_instance_ = NULL;

TFriendGetCheckInfoByOtherServerReq* TFriendGetCheckInfoByOtherServerReq::New() const {
  return new TFriendGetCheckInfoByOtherServerReq;
}

void TFriendGetCheckInfoByOtherServerReq::Clear() {
  fuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendGetCheckInfoByOtherServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendGetCheckInfoByOtherServerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 FUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fuid_)));
          set_has_fuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendGetCheckInfoByOtherServerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendGetCheckInfoByOtherServerReq)
  return false;
#undef DO_
}

void TFriendGetCheckInfoByOtherServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendGetCheckInfoByOtherServerReq)
  // optional uint64 FUid = 1;
  if (has_fuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendGetCheckInfoByOtherServerReq)
}

::google::protobuf::uint8* TFriendGetCheckInfoByOtherServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendGetCheckInfoByOtherServerReq)
  // optional uint64 FUid = 1;
  if (has_fuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendGetCheckInfoByOtherServerReq)
  return target;
}

int TFriendGetCheckInfoByOtherServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 FUid = 1;
    if (has_fuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendGetCheckInfoByOtherServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendGetCheckInfoByOtherServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendGetCheckInfoByOtherServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendGetCheckInfoByOtherServerReq::MergeFrom(const TFriendGetCheckInfoByOtherServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fuid()) {
      set_fuid(from.fuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendGetCheckInfoByOtherServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendGetCheckInfoByOtherServerReq::CopyFrom(const TFriendGetCheckInfoByOtherServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendGetCheckInfoByOtherServerReq::IsInitialized() const {

  return true;
}

void TFriendGetCheckInfoByOtherServerReq::Swap(TFriendGetCheckInfoByOtherServerReq* other) {
  if (other != this) {
    std::swap(fuid_, other->fuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendGetCheckInfoByOtherServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendGetCheckInfoByOtherServerReq_descriptor_;
  metadata.reflection = TFriendGetCheckInfoByOtherServerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendGetCheckInfoByOtherServerRsp::kInstanceSerialNumFieldNumber;
const int TFriendGetCheckInfoByOtherServerRsp::kLevelFieldNumber;
#endif  // !_MSC_VER

TFriendGetCheckInfoByOtherServerRsp::TFriendGetCheckInfoByOtherServerRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendGetCheckInfoByOtherServerRsp)
}

void TFriendGetCheckInfoByOtherServerRsp::InitAsDefaultInstance() {
}

TFriendGetCheckInfoByOtherServerRsp::TFriendGetCheckInfoByOtherServerRsp(const TFriendGetCheckInfoByOtherServerRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendGetCheckInfoByOtherServerRsp)
}

void TFriendGetCheckInfoByOtherServerRsp::SharedCtor() {
  _cached_size_ = 0;
  instanceserialnum_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendGetCheckInfoByOtherServerRsp::~TFriendGetCheckInfoByOtherServerRsp() {
  // @@protoc_insertion_point(destructor:pb.TFriendGetCheckInfoByOtherServerRsp)
  SharedDtor();
}

void TFriendGetCheckInfoByOtherServerRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendGetCheckInfoByOtherServerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendGetCheckInfoByOtherServerRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendGetCheckInfoByOtherServerRsp_descriptor_;
}

const TFriendGetCheckInfoByOtherServerRsp& TFriendGetCheckInfoByOtherServerRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendGetCheckInfoByOtherServerRsp* TFriendGetCheckInfoByOtherServerRsp::default_instance_ = NULL;

TFriendGetCheckInfoByOtherServerRsp* TFriendGetCheckInfoByOtherServerRsp::New() const {
  return new TFriendGetCheckInfoByOtherServerRsp;
}

void TFriendGetCheckInfoByOtherServerRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TFriendGetCheckInfoByOtherServerRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(instanceserialnum_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendGetCheckInfoByOtherServerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendGetCheckInfoByOtherServerRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 InstanceSerialNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instanceserialnum_)));
          set_has_instanceserialnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 2;
      case 2: {
        if (tag == 16) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendGetCheckInfoByOtherServerRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendGetCheckInfoByOtherServerRsp)
  return false;
#undef DO_
}

void TFriendGetCheckInfoByOtherServerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendGetCheckInfoByOtherServerRsp)
  // optional uint32 InstanceSerialNum = 1;
  if (has_instanceserialnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->instanceserialnum(), output);
  }

  // optional uint32 Level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendGetCheckInfoByOtherServerRsp)
}

::google::protobuf::uint8* TFriendGetCheckInfoByOtherServerRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendGetCheckInfoByOtherServerRsp)
  // optional uint32 InstanceSerialNum = 1;
  if (has_instanceserialnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->instanceserialnum(), target);
  }

  // optional uint32 Level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendGetCheckInfoByOtherServerRsp)
  return target;
}

int TFriendGetCheckInfoByOtherServerRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 InstanceSerialNum = 1;
    if (has_instanceserialnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instanceserialnum());
    }

    // optional uint32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendGetCheckInfoByOtherServerRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendGetCheckInfoByOtherServerRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendGetCheckInfoByOtherServerRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendGetCheckInfoByOtherServerRsp::MergeFrom(const TFriendGetCheckInfoByOtherServerRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceserialnum()) {
      set_instanceserialnum(from.instanceserialnum());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendGetCheckInfoByOtherServerRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendGetCheckInfoByOtherServerRsp::CopyFrom(const TFriendGetCheckInfoByOtherServerRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendGetCheckInfoByOtherServerRsp::IsInitialized() const {

  return true;
}

void TFriendGetCheckInfoByOtherServerRsp::Swap(TFriendGetCheckInfoByOtherServerRsp* other) {
  if (other != this) {
    std::swap(instanceserialnum_, other->instanceserialnum_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendGetCheckInfoByOtherServerRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendGetCheckInfoByOtherServerRsp_descriptor_;
  metadata.reflection = TFriendGetCheckInfoByOtherServerRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendAddBlackByOtherServerReq::kUidFieldNumber;
const int TFriendAddBlackByOtherServerReq::kFUidFieldNumber;
const int TFriendAddBlackByOtherServerReq::kFServerIdFieldNumber;
#endif  // !_MSC_VER

TFriendAddBlackByOtherServerReq::TFriendAddBlackByOtherServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendAddBlackByOtherServerReq)
}

void TFriendAddBlackByOtherServerReq::InitAsDefaultInstance() {
}

TFriendAddBlackByOtherServerReq::TFriendAddBlackByOtherServerReq(const TFriendAddBlackByOtherServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendAddBlackByOtherServerReq)
}

void TFriendAddBlackByOtherServerReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  fuid_ = GOOGLE_ULONGLONG(0);
  fserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendAddBlackByOtherServerReq::~TFriendAddBlackByOtherServerReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendAddBlackByOtherServerReq)
  SharedDtor();
}

void TFriendAddBlackByOtherServerReq::SharedDtor() {
  if (fserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fserverid_;
  }
  if (this != default_instance_) {
  }
}

void TFriendAddBlackByOtherServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendAddBlackByOtherServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendAddBlackByOtherServerReq_descriptor_;
}

const TFriendAddBlackByOtherServerReq& TFriendAddBlackByOtherServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendAddBlackByOtherServerReq* TFriendAddBlackByOtherServerReq::default_instance_ = NULL;

TFriendAddBlackByOtherServerReq* TFriendAddBlackByOtherServerReq::New() const {
  return new TFriendAddBlackByOtherServerReq;
}

void TFriendAddBlackByOtherServerReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TFriendAddBlackByOtherServerReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(uid_, fuid_);
    if (has_fserverid()) {
      if (fserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fserverid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendAddBlackByOtherServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendAddBlackByOtherServerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_FUid;
        break;
      }

      // optional uint64 FUid = 2;
      case 2: {
        if (tag == 16) {
         parse_FUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fuid_)));
          set_has_fuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FServerId;
        break;
      }

      // optional string FServerId = 3;
      case 3: {
        if (tag == 26) {
         parse_FServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fserverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fserverid().data(), this->fserverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fserverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendAddBlackByOtherServerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendAddBlackByOtherServerReq)
  return false;
#undef DO_
}

void TFriendAddBlackByOtherServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendAddBlackByOtherServerReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint64 FUid = 2;
  if (has_fuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fuid(), output);
  }

  // optional string FServerId = 3;
  if (has_fserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fserverid().data(), this->fserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fserverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fserverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendAddBlackByOtherServerReq)
}

::google::protobuf::uint8* TFriendAddBlackByOtherServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendAddBlackByOtherServerReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint64 FUid = 2;
  if (has_fuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fuid(), target);
  }

  // optional string FServerId = 3;
  if (has_fserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fserverid().data(), this->fserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fserverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fserverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendAddBlackByOtherServerReq)
  return target;
}

int TFriendAddBlackByOtherServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint64 FUid = 2;
    if (has_fuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fuid());
    }

    // optional string FServerId = 3;
    if (has_fserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fserverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendAddBlackByOtherServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendAddBlackByOtherServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendAddBlackByOtherServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendAddBlackByOtherServerReq::MergeFrom(const TFriendAddBlackByOtherServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_fuid()) {
      set_fuid(from.fuid());
    }
    if (from.has_fserverid()) {
      set_fserverid(from.fserverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendAddBlackByOtherServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendAddBlackByOtherServerReq::CopyFrom(const TFriendAddBlackByOtherServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendAddBlackByOtherServerReq::IsInitialized() const {

  return true;
}

void TFriendAddBlackByOtherServerReq::Swap(TFriendAddBlackByOtherServerReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(fuid_, other->fuid_);
    std::swap(fserverid_, other->fserverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendAddBlackByOtherServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendAddBlackByOtherServerReq_descriptor_;
  metadata.reflection = TFriendAddBlackByOtherServerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendDelFriendByOtherServerReq::kUidFieldNumber;
const int TFriendDelFriendByOtherServerReq::kFUidFieldNumber;
const int TFriendDelFriendByOtherServerReq::kFServerIdFieldNumber;
#endif  // !_MSC_VER

TFriendDelFriendByOtherServerReq::TFriendDelFriendByOtherServerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendDelFriendByOtherServerReq)
}

void TFriendDelFriendByOtherServerReq::InitAsDefaultInstance() {
}

TFriendDelFriendByOtherServerReq::TFriendDelFriendByOtherServerReq(const TFriendDelFriendByOtherServerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendDelFriendByOtherServerReq)
}

void TFriendDelFriendByOtherServerReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  fuid_ = GOOGLE_ULONGLONG(0);
  fserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendDelFriendByOtherServerReq::~TFriendDelFriendByOtherServerReq() {
  // @@protoc_insertion_point(destructor:pb.TFriendDelFriendByOtherServerReq)
  SharedDtor();
}

void TFriendDelFriendByOtherServerReq::SharedDtor() {
  if (fserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fserverid_;
  }
  if (this != default_instance_) {
  }
}

void TFriendDelFriendByOtherServerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendDelFriendByOtherServerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendDelFriendByOtherServerReq_descriptor_;
}

const TFriendDelFriendByOtherServerReq& TFriendDelFriendByOtherServerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendDelFriendByOtherServerReq* TFriendDelFriendByOtherServerReq::default_instance_ = NULL;

TFriendDelFriendByOtherServerReq* TFriendDelFriendByOtherServerReq::New() const {
  return new TFriendDelFriendByOtherServerReq;
}

void TFriendDelFriendByOtherServerReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TFriendDelFriendByOtherServerReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(uid_, fuid_);
    if (has_fserverid()) {
      if (fserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fserverid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendDelFriendByOtherServerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendDelFriendByOtherServerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_FUid;
        break;
      }

      // optional uint64 FUid = 2;
      case 2: {
        if (tag == 16) {
         parse_FUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fuid_)));
          set_has_fuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FServerId;
        break;
      }

      // optional string FServerId = 3;
      case 3: {
        if (tag == 26) {
         parse_FServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fserverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fserverid().data(), this->fserverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fserverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendDelFriendByOtherServerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendDelFriendByOtherServerReq)
  return false;
#undef DO_
}

void TFriendDelFriendByOtherServerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendDelFriendByOtherServerReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint64 FUid = 2;
  if (has_fuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fuid(), output);
  }

  // optional string FServerId = 3;
  if (has_fserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fserverid().data(), this->fserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fserverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fserverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendDelFriendByOtherServerReq)
}

::google::protobuf::uint8* TFriendDelFriendByOtherServerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendDelFriendByOtherServerReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint64 FUid = 2;
  if (has_fuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fuid(), target);
  }

  // optional string FServerId = 3;
  if (has_fserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fserverid().data(), this->fserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fserverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fserverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendDelFriendByOtherServerReq)
  return target;
}

int TFriendDelFriendByOtherServerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint64 FUid = 2;
    if (has_fuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fuid());
    }

    // optional string FServerId = 3;
    if (has_fserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fserverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendDelFriendByOtherServerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendDelFriendByOtherServerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendDelFriendByOtherServerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendDelFriendByOtherServerReq::MergeFrom(const TFriendDelFriendByOtherServerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_fuid()) {
      set_fuid(from.fuid());
    }
    if (from.has_fserverid()) {
      set_fserverid(from.fserverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendDelFriendByOtherServerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendDelFriendByOtherServerReq::CopyFrom(const TFriendDelFriendByOtherServerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendDelFriendByOtherServerReq::IsInitialized() const {

  return true;
}

void TFriendDelFriendByOtherServerReq::Swap(TFriendDelFriendByOtherServerReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(fuid_, other->fuid_);
    std::swap(fserverid_, other->fserverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendDelFriendByOtherServerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendDelFriendByOtherServerReq_descriptor_;
  metadata.reflection = TFriendDelFriendByOtherServerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendNotify::kNewFriendUidsFieldNumber;
const int TFriendNotify::kDeleteFriendUidsFieldNumber;
const int TFriendNotify::kNewAppliedUidsFieldNumber;
const int TFriendNotify::kDeleteAppliedUidsFieldNumber;
const int TFriendNotify::kFriendSendUidsFieldNumber;
#endif  // !_MSC_VER

TFriendNotify::TFriendNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendNotify)
}

void TFriendNotify::InitAsDefaultInstance() {
}

TFriendNotify::TFriendNotify(const TFriendNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendNotify)
}

void TFriendNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendNotify::~TFriendNotify() {
  // @@protoc_insertion_point(destructor:pb.TFriendNotify)
  SharedDtor();
}

void TFriendNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendNotify_descriptor_;
}

const TFriendNotify& TFriendNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFriend_2eproto();
  return *default_instance_;
}

TFriendNotify* TFriendNotify::default_instance_ = NULL;

TFriendNotify* TFriendNotify::New() const {
  return new TFriendNotify;
}

void TFriendNotify::Clear() {
  newfrienduids_.Clear();
  deletefrienduids_.Clear();
  newapplieduids_.Clear();
  deleteapplieduids_.Clear();
  friendsenduids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 NewFriendUids = 1;
      case 1: {
        if (tag == 8) {
         parse_NewFriendUids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_newfrienduids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_newfrienduids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_NewFriendUids;
        if (input->ExpectTag(16)) goto parse_DeleteFriendUids;
        break;
      }

      // repeated uint64 DeleteFriendUids = 2;
      case 2: {
        if (tag == 16) {
         parse_DeleteFriendUids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_deletefrienduids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_deletefrienduids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DeleteFriendUids;
        if (input->ExpectTag(24)) goto parse_NewAppliedUids;
        break;
      }

      // repeated uint64 NewAppliedUids = 3;
      case 3: {
        if (tag == 24) {
         parse_NewAppliedUids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_newapplieduids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_newapplieduids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_NewAppliedUids;
        if (input->ExpectTag(32)) goto parse_DeleteAppliedUids;
        break;
      }

      // repeated uint64 DeleteAppliedUids = 4;
      case 4: {
        if (tag == 32) {
         parse_DeleteAppliedUids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_deleteapplieduids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_deleteapplieduids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DeleteAppliedUids;
        if (input->ExpectTag(40)) goto parse_FriendSendUids;
        break;
      }

      // repeated uint64 FriendSendUids = 5;
      case 5: {
        if (tag == 40) {
         parse_FriendSendUids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_friendsenduids())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_friendsenduids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_FriendSendUids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendNotify)
  return false;
#undef DO_
}

void TFriendNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendNotify)
  // repeated uint64 NewFriendUids = 1;
  for (int i = 0; i < this->newfrienduids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->newfrienduids(i), output);
  }

  // repeated uint64 DeleteFriendUids = 2;
  for (int i = 0; i < this->deletefrienduids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->deletefrienduids(i), output);
  }

  // repeated uint64 NewAppliedUids = 3;
  for (int i = 0; i < this->newapplieduids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->newapplieduids(i), output);
  }

  // repeated uint64 DeleteAppliedUids = 4;
  for (int i = 0; i < this->deleteapplieduids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->deleteapplieduids(i), output);
  }

  // repeated uint64 FriendSendUids = 5;
  for (int i = 0; i < this->friendsenduids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->friendsenduids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendNotify)
}

::google::protobuf::uint8* TFriendNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendNotify)
  // repeated uint64 NewFriendUids = 1;
  for (int i = 0; i < this->newfrienduids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->newfrienduids(i), target);
  }

  // repeated uint64 DeleteFriendUids = 2;
  for (int i = 0; i < this->deletefrienduids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->deletefrienduids(i), target);
  }

  // repeated uint64 NewAppliedUids = 3;
  for (int i = 0; i < this->newapplieduids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->newapplieduids(i), target);
  }

  // repeated uint64 DeleteAppliedUids = 4;
  for (int i = 0; i < this->deleteapplieduids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->deleteapplieduids(i), target);
  }

  // repeated uint64 FriendSendUids = 5;
  for (int i = 0; i < this->friendsenduids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->friendsenduids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendNotify)
  return target;
}

int TFriendNotify::ByteSize() const {
  int total_size = 0;

  // repeated uint64 NewFriendUids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->newfrienduids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->newfrienduids(i));
    }
    total_size += 1 * this->newfrienduids_size() + data_size;
  }

  // repeated uint64 DeleteFriendUids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->deletefrienduids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->deletefrienduids(i));
    }
    total_size += 1 * this->deletefrienduids_size() + data_size;
  }

  // repeated uint64 NewAppliedUids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->newapplieduids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->newapplieduids(i));
    }
    total_size += 1 * this->newapplieduids_size() + data_size;
  }

  // repeated uint64 DeleteAppliedUids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->deleteapplieduids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->deleteapplieduids(i));
    }
    total_size += 1 * this->deleteapplieduids_size() + data_size;
  }

  // repeated uint64 FriendSendUids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->friendsenduids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->friendsenduids(i));
    }
    total_size += 1 * this->friendsenduids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendNotify::MergeFrom(const TFriendNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  newfrienduids_.MergeFrom(from.newfrienduids_);
  deletefrienduids_.MergeFrom(from.deletefrienduids_);
  newapplieduids_.MergeFrom(from.newapplieduids_);
  deleteapplieduids_.MergeFrom(from.deleteapplieduids_);
  friendsenduids_.MergeFrom(from.friendsenduids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendNotify::CopyFrom(const TFriendNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendNotify::IsInitialized() const {

  return true;
}

void TFriendNotify::Swap(TFriendNotify* other) {
  if (other != this) {
    newfrienduids_.Swap(&other->newfrienduids_);
    deletefrienduids_.Swap(&other->deletefrienduids_);
    newapplieduids_.Swap(&other->newapplieduids_);
    deleteapplieduids_.Swap(&other->deleteapplieduids_);
    friendsenduids_.Swap(&other->friendsenduids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendNotify_descriptor_;
  metadata.reflection = TFriendNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
