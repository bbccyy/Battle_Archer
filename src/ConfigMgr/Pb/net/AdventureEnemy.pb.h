// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/AdventureEnemy.proto

#ifndef PROTOBUF_net_2fAdventureEnemy_2eproto__INCLUDED
#define PROTOBUF_net_2fAdventureEnemy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/Battle.pb.h"
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

class TAESquadHeroInfo;
class TAEMySquad;
class TAESquadHeroStatusInfo;
class TAEMySquadStatus;
class TAdventureEnemySingleInfo;
class TAdventureEnemyGetInfoRsp;
class TAdventureEnemyRebornHeroReq;
class TAdventureEnemySetSquadReq;
class TAdventureEnemySwitchSquadReq;
class TAdventureEnemyStartBattleReq;
class TAdventureEnemyStartBattleRsp;
class TAEMonsterStatus;
class TAEEnemySquad;
class TAdventureEnemyReportBattleReq;
class TAdventureEnemyReportBattleRsp;
class TNewAdventureEnemyNotify;
class TAdventureEnemyCancelBattleReq;
class TAdventureEnemySingleBattleRet;
class TAdventureEnemySkipBattleReq;
class TAdventureEnemySkipBattleRsp;
class TAdventureEnemyGetAcheivementInfoRsp;
class TAdventureEnemyReceiveAchievementRewardReq;
class TAdventureEnemySetPresetSquadReq;
class TAdventureEnemySwitchPresetSquadReq;
class TAdventureEnemyUsePresetSquadReq;

enum TAERebornHeroCostType {
  AE_COST_TYPE_ITEM = 1,
  AE_COST_TYPE_GOLD = 2
};
bool TAERebornHeroCostType_IsValid(int value);
const TAERebornHeroCostType TAERebornHeroCostType_MIN = AE_COST_TYPE_ITEM;
const TAERebornHeroCostType TAERebornHeroCostType_MAX = AE_COST_TYPE_GOLD;
const int TAERebornHeroCostType_ARRAYSIZE = TAERebornHeroCostType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TAERebornHeroCostType_descriptor();
inline const ::std::string& TAERebornHeroCostType_Name(TAERebornHeroCostType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TAERebornHeroCostType_descriptor(), value);
}
inline bool TAERebornHeroCostType_Parse(
    const ::std::string& name, TAERebornHeroCostType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TAERebornHeroCostType>(
    TAERebornHeroCostType_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TAESquadHeroInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAESquadHeroInfo : public ::google::protobuf::Message {
 public:
  TAESquadHeroInfo();
  virtual ~TAESquadHeroInfo();

  TAESquadHeroInfo(const TAESquadHeroInfo& from);

  inline TAESquadHeroInfo& operator=(const TAESquadHeroInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAESquadHeroInfo& default_instance();

  void Swap(TAESquadHeroInfo* other);

  // implements Message ----------------------------------------------

  TAESquadHeroInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAESquadHeroInfo& from);
  void MergeFrom(const TAESquadHeroInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 PosId = 1;
  inline bool has_posid() const;
  inline void clear_posid();
  static const int kPosIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAESquadHeroInfo</name>
  	<Function>
  		<name>posid</name>
  		<replaceName>PosId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posid</name>
  		<replaceName>PosId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posid</name>
  		<replaceName>PosId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 posid() const;
  inline void set_posid(::google::protobuf::uint32 value);

  // optional uint32 HeroId = 2;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAESquadHeroInfo</name>
  	<Function>
  		<name>heroid</name>
  		<replaceName>HeroId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_heroid</name>
  		<replaceName>HeroId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_heroid</name>
  		<replaceName>HeroId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAESquadHeroInfo)
 private:
  inline void set_has_posid();
  inline void clear_has_posid();
  inline void set_has_heroid();
  inline void clear_has_heroid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 posid_;
  ::google::protobuf::uint32 heroid_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TAESquadHeroInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAEMySquad</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAEMySquad : public ::google::protobuf::Message {
 public:
  TAEMySquad();
  virtual ~TAEMySquad();

  TAEMySquad(const TAEMySquad& from);

  inline TAEMySquad& operator=(const TAEMySquad& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAEMySquad& default_instance();

  void Swap(TAEMySquad* other);

  // implements Message ----------------------------------------------

  TAEMySquad* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAEMySquad& from);
  void MergeFrom(const TAEMySquad& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SquadIndex = 1;
  inline bool has_squadindex() const;
  inline void clear_squadindex();
  static const int kSquadIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAEMySquad</name>
  	<Function>
  		<name>squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 squadindex() const;
  inline void set_squadindex(::google::protobuf::uint32 value);

  // repeated .pb.TAESquadHeroInfo SquadHeroArr = 2;
  inline int squadheroarr_size() const;
  inline void clear_squadheroarr();
  static const int kSquadHeroArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAEMySquad</name>
  	<Function>
  		<name>squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>squadheroarr_size</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAESquadHeroInfo& squadheroarr(int index) const;
  inline ::pb::TAESquadHeroInfo* mutable_squadheroarr(int index);
  inline ::pb::TAESquadHeroInfo* add_squadheroarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAESquadHeroInfo >&
      squadheroarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAESquadHeroInfo >*
      mutable_squadheroarr();

  // @@protoc_insertion_point(class_scope:pb.TAEMySquad)
 private:
  inline void set_has_squadindex();
  inline void clear_has_squadindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAESquadHeroInfo > squadheroarr_;
  ::google::protobuf::uint32 squadindex_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TAEMySquad* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAESquadHeroStatusInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAESquadHeroStatusInfo : public ::google::protobuf::Message {
 public:
  TAESquadHeroStatusInfo();
  virtual ~TAESquadHeroStatusInfo();

  TAESquadHeroStatusInfo(const TAESquadHeroStatusInfo& from);

  inline TAESquadHeroStatusInfo& operator=(const TAESquadHeroStatusInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAESquadHeroStatusInfo& default_instance();

  void Swap(TAESquadHeroStatusInfo* other);

  // implements Message ----------------------------------------------

  TAESquadHeroStatusInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAESquadHeroStatusInfo& from);
  void MergeFrom(const TAESquadHeroStatusInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 PosId = 1;
  inline bool has_posid() const;
  inline void clear_posid();
  static const int kPosIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAESquadHeroStatusInfo</name>
  	<Function>
  		<name>posid</name>
  		<replaceName>PosId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posid</name>
  		<replaceName>PosId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posid</name>
  		<replaceName>PosId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 posid() const;
  inline void set_posid(::google::protobuf::uint32 value);

  // optional uint32 HeroId = 2;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAESquadHeroStatusInfo</name>
  	<Function>
  		<name>heroid</name>
  		<replaceName>HeroId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_heroid</name>
  		<replaceName>HeroId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_heroid</name>
  		<replaceName>HeroId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint64 CurHp = 3;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHpFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAESquadHeroStatusInfo</name>
  	<Function>
  		<name>curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 curhp() const;
  inline void set_curhp(::google::protobuf::uint64 value);

  // optional uint64 MaxHp = 4;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHpFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAESquadHeroStatusInfo</name>
  	<Function>
  		<name>maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TAESquadHeroStatusInfo)
 private:
  inline void set_has_posid();
  inline void clear_has_posid();
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 posid_;
  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint64 curhp_;
  ::google::protobuf::uint64 maxhp_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TAESquadHeroStatusInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAEMySquadStatus</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAEMySquadStatus : public ::google::protobuf::Message {
 public:
  TAEMySquadStatus();
  virtual ~TAEMySquadStatus();

  TAEMySquadStatus(const TAEMySquadStatus& from);

  inline TAEMySquadStatus& operator=(const TAEMySquadStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAEMySquadStatus& default_instance();

  void Swap(TAEMySquadStatus* other);

  // implements Message ----------------------------------------------

  TAEMySquadStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAEMySquadStatus& from);
  void MergeFrom(const TAEMySquadStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SquadIndex = 1;
  inline bool has_squadindex() const;
  inline void clear_squadindex();
  static const int kSquadIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAEMySquadStatus</name>
  	<Function>
  		<name>squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 squadindex() const;
  inline void set_squadindex(::google::protobuf::uint32 value);

  // repeated .pb.TAESquadHeroStatusInfo SquadHeroArr = 2;
  inline int squadheroarr_size() const;
  inline void clear_squadheroarr();
  static const int kSquadHeroArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAEMySquadStatus</name>
  	<Function>
  		<name>squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>squadheroarr_size</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAESquadHeroStatusInfo& squadheroarr(int index) const;
  inline ::pb::TAESquadHeroStatusInfo* mutable_squadheroarr(int index);
  inline ::pb::TAESquadHeroStatusInfo* add_squadheroarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAESquadHeroStatusInfo >&
      squadheroarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAESquadHeroStatusInfo >*
      mutable_squadheroarr();

  // @@protoc_insertion_point(class_scope:pb.TAEMySquadStatus)
 private:
  inline void set_has_squadindex();
  inline void clear_has_squadindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAESquadHeroStatusInfo > squadheroarr_;
  ::google::protobuf::uint32 squadindex_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TAEMySquadStatus* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureEnemySingleInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureEnemySingleInfo : public ::google::protobuf::Message {
 public:
  TAdventureEnemySingleInfo();
  virtual ~TAdventureEnemySingleInfo();

  TAdventureEnemySingleInfo(const TAdventureEnemySingleInfo& from);

  inline TAdventureEnemySingleInfo& operator=(const TAdventureEnemySingleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureEnemySingleInfo& default_instance();

  void Swap(TAdventureEnemySingleInfo* other);

  // implements Message ----------------------------------------------

  TAdventureEnemySingleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureEnemySingleInfo& from);
  void MergeFrom(const TAdventureEnemySingleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 EnemyId = 1;
  inline bool has_enemyid() const;
  inline void clear_enemyid();
  static const int kEnemyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemySingleInfo</name>
  	<Function>
  		<name>enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 enemyid() const;
  inline void set_enemyid(::google::protobuf::uint32 value);

  // optional uint64 CurHp = 2;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHpFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemySingleInfo</name>
  	<Function>
  		<name>curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 curhp() const;
  inline void set_curhp(::google::protobuf::uint64 value);

  // optional uint64 MaxHp = 3;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHpFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemySingleInfo</name>
  	<Function>
  		<name>maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint64 value);

  // repeated .pb.TAEEnemySquad EnemySquadArr = 4;
  inline int enemysquadarr_size() const;
  inline void clear_enemysquadarr();
  static const int kEnemySquadArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemySingleInfo</name>
  	<Function>
  		<name>enemysquadarr</name>
  		<replaceName>EnemySquadArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_enemysquadarr</name>
  		<replaceName>EnemySquadArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_enemysquadarr</name>
  		<replaceName>EnemySquadArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemysquadarr</name>
  		<replaceName>EnemySquadArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>enemysquadarr_size</name>
  		<replaceName>EnemySquadArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAEEnemySquad& enemysquadarr(int index) const;
  inline ::pb::TAEEnemySquad* mutable_enemysquadarr(int index);
  inline ::pb::TAEEnemySquad* add_enemysquadarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAEEnemySquad >&
      enemysquadarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAEEnemySquad >*
      mutable_enemysquadarr();

  // repeated .pb.TAEMySquad MySquadArr = 5;
  inline int mysquadarr_size() const;
  inline void clear_mysquadarr();
  static const int kMySquadArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemySingleInfo</name>
  	<Function>
  		<name>mysquadarr</name>
  		<replaceName>MySquadArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_mysquadarr</name>
  		<replaceName>MySquadArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_mysquadarr</name>
  		<replaceName>MySquadArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mysquadarr</name>
  		<replaceName>MySquadArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mysquadarr_size</name>
  		<replaceName>MySquadArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAEMySquad& mysquadarr(int index) const;
  inline ::pb::TAEMySquad* mutable_mysquadarr(int index);
  inline ::pb::TAEMySquad* add_mysquadarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAEMySquad >&
      mysquadarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAEMySquad >*
      mutable_mysquadarr();

  // repeated uint32 FightHeroArr = 6;
  inline int fightheroarr_size() const;
  inline void clear_fightheroarr();
  static const int kFightHeroArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemySingleInfo</name>
  	<Function>
  		<name>fightheroarr</name>
  		<replaceName>FightHeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_fightheroarr</name>
  		<replaceName>FightHeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_fightheroarr</name>
  		<replaceName>FightHeroArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightheroarr</name>
  		<replaceName>FightHeroArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>fightheroarr_size</name>
  		<replaceName>FightHeroArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 fightheroarr(int index) const;
  inline void set_fightheroarr(int index, ::google::protobuf::uint32 value);
  inline void add_fightheroarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      fightheroarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_fightheroarr();

  // optional uint32 TriggerMapLevel = 7;
  inline bool has_triggermaplevel() const;
  inline void clear_triggermaplevel();
  static const int kTriggerMapLevelFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemySingleInfo</name>
  	<Function>
  		<name>triggermaplevel</name>
  		<replaceName>TriggerMapLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_triggermaplevel</name>
  		<replaceName>TriggerMapLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_triggermaplevel</name>
  		<replaceName>TriggerMapLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 triggermaplevel() const;
  inline void set_triggermaplevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureEnemySingleInfo)
 private:
  inline void set_has_enemyid();
  inline void clear_has_enemyid();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_triggermaplevel();
  inline void clear_has_triggermaplevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 curhp_;
  ::google::protobuf::uint64 maxhp_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAEEnemySquad > enemysquadarr_;
  ::google::protobuf::uint32 enemyid_;
  ::google::protobuf::uint32 triggermaplevel_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAEMySquad > mysquadarr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > fightheroarr_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TAdventureEnemySingleInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureEnemyGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureEnemyGetInfoRsp : public ::google::protobuf::Message {
 public:
  TAdventureEnemyGetInfoRsp();
  virtual ~TAdventureEnemyGetInfoRsp();

  TAdventureEnemyGetInfoRsp(const TAdventureEnemyGetInfoRsp& from);

  inline TAdventureEnemyGetInfoRsp& operator=(const TAdventureEnemyGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureEnemyGetInfoRsp& default_instance();

  void Swap(TAdventureEnemyGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TAdventureEnemyGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureEnemyGetInfoRsp& from);
  void MergeFrom(const TAdventureEnemyGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TAdventureEnemySingleInfo EnemyArr = 1;
  inline int enemyarr_size() const;
  inline void clear_enemyarr();
  static const int kEnemyArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemyGetInfoRsp</name>
  	<Function>
  		<name>enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>enemyarr_size</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureEnemySingleInfo& enemyarr(int index) const;
  inline ::pb::TAdventureEnemySingleInfo* mutable_enemyarr(int index);
  inline ::pb::TAdventureEnemySingleInfo* add_enemyarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureEnemySingleInfo >&
      enemyarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureEnemySingleInfo >*
      mutable_enemyarr();

  // repeated uint32 EnemyIdArr = 2;
  inline int enemyidarr_size() const;
  inline void clear_enemyidarr();
  static const int kEnemyIdArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemyGetInfoRsp</name>
  	<Function>
  		<name>enemyidarr</name>
  		<replaceName>EnemyIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_enemyidarr</name>
  		<replaceName>EnemyIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_enemyidarr</name>
  		<replaceName>EnemyIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyidarr</name>
  		<replaceName>EnemyIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>enemyidarr_size</name>
  		<replaceName>EnemyIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 enemyidarr(int index) const;
  inline void set_enemyidarr(int index, ::google::protobuf::uint32 value);
  inline void add_enemyidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      enemyidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_enemyidarr();

  // optional uint64 DueTime = 3;
  inline bool has_duetime() const;
  inline void clear_duetime();
  static const int kDueTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemyGetInfoRsp</name>
  	<Function>
  		<name>duetime</name>
  		<replaceName>DueTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_duetime</name>
  		<replaceName>DueTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_duetime</name>
  		<replaceName>DueTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 duetime() const;
  inline void set_duetime(::google::protobuf::uint64 value);

  // repeated .pb.TAEMySquad PresetSquadArr = 4;
  inline int presetsquadarr_size() const;
  inline void clear_presetsquadarr();
  static const int kPresetSquadArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemyGetInfoRsp</name>
  	<Function>
  		<name>presetsquadarr</name>
  		<replaceName>PresetSquadArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_presetsquadarr</name>
  		<replaceName>PresetSquadArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_presetsquadarr</name>
  		<replaceName>PresetSquadArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_presetsquadarr</name>
  		<replaceName>PresetSquadArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>presetsquadarr_size</name>
  		<replaceName>PresetSquadArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAEMySquad& presetsquadarr(int index) const;
  inline ::pb::TAEMySquad* mutable_presetsquadarr(int index);
  inline ::pb::TAEMySquad* add_presetsquadarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAEMySquad >&
      presetsquadarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAEMySquad >*
      mutable_presetsquadarr();

  // @@protoc_insertion_point(class_scope:pb.TAdventureEnemyGetInfoRsp)
 private:
  inline void set_has_duetime();
  inline void clear_has_duetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventureEnemySingleInfo > enemyarr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > enemyidarr_;
  ::google::protobuf::uint64 duetime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAEMySquad > presetsquadarr_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TAdventureEnemyGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureEnemyRebornHeroReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureEnemyRebornHeroReq : public ::google::protobuf::Message {
 public:
  TAdventureEnemyRebornHeroReq();
  virtual ~TAdventureEnemyRebornHeroReq();

  TAdventureEnemyRebornHeroReq(const TAdventureEnemyRebornHeroReq& from);

  inline TAdventureEnemyRebornHeroReq& operator=(const TAdventureEnemyRebornHeroReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureEnemyRebornHeroReq& default_instance();

  void Swap(TAdventureEnemyRebornHeroReq* other);

  // implements Message ----------------------------------------------

  TAdventureEnemyRebornHeroReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureEnemyRebornHeroReq& from);
  void MergeFrom(const TAdventureEnemyRebornHeroReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 EnemyId = 1;
  inline bool has_enemyid() const;
  inline void clear_enemyid();
  static const int kEnemyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemyRebornHeroReq</name>
  	<Function>
  		<name>enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 enemyid() const;
  inline void set_enemyid(::google::protobuf::uint32 value);

  // optional .pb.TAERebornHeroCostType CostType = 2;
  inline bool has_costtype() const;
  inline void clear_costtype();
  static const int kCostTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemyRebornHeroReq</name>
  	<Function>
  		<name>costtype</name>
  		<replaceName>CostType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_costtype</name>
  		<replaceName>CostType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_costtype</name>
  		<replaceName>CostType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::TAERebornHeroCostType costtype() const;
  inline void set_costtype(::pb::TAERebornHeroCostType value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureEnemyRebornHeroReq)
 private:
  inline void set_has_enemyid();
  inline void clear_has_enemyid();
  inline void set_has_costtype();
  inline void clear_has_costtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 enemyid_;
  int costtype_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TAdventureEnemyRebornHeroReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureEnemySetSquadReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureEnemySetSquadReq : public ::google::protobuf::Message {
 public:
  TAdventureEnemySetSquadReq();
  virtual ~TAdventureEnemySetSquadReq();

  TAdventureEnemySetSquadReq(const TAdventureEnemySetSquadReq& from);

  inline TAdventureEnemySetSquadReq& operator=(const TAdventureEnemySetSquadReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureEnemySetSquadReq& default_instance();

  void Swap(TAdventureEnemySetSquadReq* other);

  // implements Message ----------------------------------------------

  TAdventureEnemySetSquadReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureEnemySetSquadReq& from);
  void MergeFrom(const TAdventureEnemySetSquadReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 EnemyId = 1;
  inline bool has_enemyid() const;
  inline void clear_enemyid();
  static const int kEnemyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemySetSquadReq</name>
  	<Function>
  		<name>enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 enemyid() const;
  inline void set_enemyid(::google::protobuf::uint32 value);

  // optional uint32 SquadIndex = 2;
  inline bool has_squadindex() const;
  inline void clear_squadindex();
  static const int kSquadIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemySetSquadReq</name>
  	<Function>
  		<name>squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 squadindex() const;
  inline void set_squadindex(::google::protobuf::uint32 value);

  // repeated .pb.TAESquadHeroInfo SquadHeroArr = 3;
  inline int squadheroarr_size() const;
  inline void clear_squadheroarr();
  static const int kSquadHeroArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemySetSquadReq</name>
  	<Function>
  		<name>squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>squadheroarr_size</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAESquadHeroInfo& squadheroarr(int index) const;
  inline ::pb::TAESquadHeroInfo* mutable_squadheroarr(int index);
  inline ::pb::TAESquadHeroInfo* add_squadheroarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAESquadHeroInfo >&
      squadheroarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAESquadHeroInfo >*
      mutable_squadheroarr();

  // @@protoc_insertion_point(class_scope:pb.TAdventureEnemySetSquadReq)
 private:
  inline void set_has_enemyid();
  inline void clear_has_enemyid();
  inline void set_has_squadindex();
  inline void clear_has_squadindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 enemyid_;
  ::google::protobuf::uint32 squadindex_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAESquadHeroInfo > squadheroarr_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TAdventureEnemySetSquadReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureEnemySwitchSquadReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureEnemySwitchSquadReq : public ::google::protobuf::Message {
 public:
  TAdventureEnemySwitchSquadReq();
  virtual ~TAdventureEnemySwitchSquadReq();

  TAdventureEnemySwitchSquadReq(const TAdventureEnemySwitchSquadReq& from);

  inline TAdventureEnemySwitchSquadReq& operator=(const TAdventureEnemySwitchSquadReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureEnemySwitchSquadReq& default_instance();

  void Swap(TAdventureEnemySwitchSquadReq* other);

  // implements Message ----------------------------------------------

  TAdventureEnemySwitchSquadReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureEnemySwitchSquadReq& from);
  void MergeFrom(const TAdventureEnemySwitchSquadReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 EnemyId = 1;
  inline bool has_enemyid() const;
  inline void clear_enemyid();
  static const int kEnemyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemySwitchSquadReq</name>
  	<Function>
  		<name>enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 enemyid() const;
  inline void set_enemyid(::google::protobuf::uint32 value);

  // optional uint32 SquadIndex = 2;
  inline bool has_squadindex() const;
  inline void clear_squadindex();
  static const int kSquadIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemySwitchSquadReq</name>
  	<Function>
  		<name>squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 squadindex() const;
  inline void set_squadindex(::google::protobuf::uint32 value);

  // optional uint32 SwitchToSquadIndex = 3;
  inline bool has_switchtosquadindex() const;
  inline void clear_switchtosquadindex();
  static const int kSwitchToSquadIndexFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemySwitchSquadReq</name>
  	<Function>
  		<name>switchtosquadindex</name>
  		<replaceName>SwitchToSquadIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_switchtosquadindex</name>
  		<replaceName>SwitchToSquadIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_switchtosquadindex</name>
  		<replaceName>SwitchToSquadIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 switchtosquadindex() const;
  inline void set_switchtosquadindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureEnemySwitchSquadReq)
 private:
  inline void set_has_enemyid();
  inline void clear_has_enemyid();
  inline void set_has_squadindex();
  inline void clear_has_squadindex();
  inline void set_has_switchtosquadindex();
  inline void clear_has_switchtosquadindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 enemyid_;
  ::google::protobuf::uint32 squadindex_;
  ::google::protobuf::uint32 switchtosquadindex_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TAdventureEnemySwitchSquadReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureEnemyStartBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureEnemyStartBattleReq : public ::google::protobuf::Message {
 public:
  TAdventureEnemyStartBattleReq();
  virtual ~TAdventureEnemyStartBattleReq();

  TAdventureEnemyStartBattleReq(const TAdventureEnemyStartBattleReq& from);

  inline TAdventureEnemyStartBattleReq& operator=(const TAdventureEnemyStartBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureEnemyStartBattleReq& default_instance();

  void Swap(TAdventureEnemyStartBattleReq* other);

  // implements Message ----------------------------------------------

  TAdventureEnemyStartBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureEnemyStartBattleReq& from);
  void MergeFrom(const TAdventureEnemyStartBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 EnemyId = 1;
  inline bool has_enemyid() const;
  inline void clear_enemyid();
  static const int kEnemyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemyStartBattleReq</name>
  	<Function>
  		<name>enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 enemyid() const;
  inline void set_enemyid(::google::protobuf::uint32 value);

  // optional uint32 SquadIndex = 2;
  inline bool has_squadindex() const;
  inline void clear_squadindex();
  static const int kSquadIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemyStartBattleReq</name>
  	<Function>
  		<name>squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 squadindex() const;
  inline void set_squadindex(::google::protobuf::uint32 value);

  // optional .pb.TBattleCheckParam BattleCheckParam = 3;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemyStartBattleReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // @@protoc_insertion_point(class_scope:pb.TAdventureEnemyStartBattleReq)
 private:
  inline void set_has_enemyid();
  inline void clear_has_enemyid();
  inline void set_has_squadindex();
  inline void clear_has_squadindex();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 enemyid_;
  ::google::protobuf::uint32 squadindex_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TAdventureEnemyStartBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureEnemyStartBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureEnemyStartBattleRsp : public ::google::protobuf::Message {
 public:
  TAdventureEnemyStartBattleRsp();
  virtual ~TAdventureEnemyStartBattleRsp();

  TAdventureEnemyStartBattleRsp(const TAdventureEnemyStartBattleRsp& from);

  inline TAdventureEnemyStartBattleRsp& operator=(const TAdventureEnemyStartBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureEnemyStartBattleRsp& default_instance();

  void Swap(TAdventureEnemyStartBattleRsp* other);

  // implements Message ----------------------------------------------

  TAdventureEnemyStartBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureEnemyStartBattleRsp& from);
  void MergeFrom(const TAdventureEnemyStartBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBattleArgs BattleArgs = 1;
  inline bool has_battleargs() const;
  inline void clear_battleargs();
  static const int kBattleArgsFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemyStartBattleRsp</name>
  	<Function>
  		<name>battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& battleargs() const;
  inline ::pb::TBattleArgs* mutable_battleargs();
  inline ::pb::TBattleArgs* release_battleargs();
  inline void set_allocated_battleargs(::pb::TBattleArgs* battleargs);

  // @@protoc_insertion_point(class_scope:pb.TAdventureEnemyStartBattleRsp)
 private:
  inline void set_has_battleargs();
  inline void clear_has_battleargs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleArgs* battleargs_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TAdventureEnemyStartBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAEMonsterStatus</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAEMonsterStatus : public ::google::protobuf::Message {
 public:
  TAEMonsterStatus();
  virtual ~TAEMonsterStatus();

  TAEMonsterStatus(const TAEMonsterStatus& from);

  inline TAEMonsterStatus& operator=(const TAEMonsterStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAEMonsterStatus& default_instance();

  void Swap(TAEMonsterStatus* other);

  // implements Message ----------------------------------------------

  TAEMonsterStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAEMonsterStatus& from);
  void MergeFrom(const TAEMonsterStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 PosId = 1;
  inline bool has_posid() const;
  inline void clear_posid();
  static const int kPosIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAEMonsterStatus</name>
  	<Function>
  		<name>posid</name>
  		<replaceName>PosId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posid</name>
  		<replaceName>PosId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posid</name>
  		<replaceName>PosId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 posid() const;
  inline void set_posid(::google::protobuf::uint32 value);

  // optional uint64 CurHp = 2;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHpFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAEMonsterStatus</name>
  	<Function>
  		<name>curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 curhp() const;
  inline void set_curhp(::google::protobuf::uint64 value);

  // optional uint64 MaxHp = 3;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHpFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAEMonsterStatus</name>
  	<Function>
  		<name>maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TAEMonsterStatus)
 private:
  inline void set_has_posid();
  inline void clear_has_posid();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 curhp_;
  ::google::protobuf::uint64 maxhp_;
  ::google::protobuf::uint32 posid_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TAEMonsterStatus* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAEEnemySquad</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAEEnemySquad : public ::google::protobuf::Message {
 public:
  TAEEnemySquad();
  virtual ~TAEEnemySquad();

  TAEEnemySquad(const TAEEnemySquad& from);

  inline TAEEnemySquad& operator=(const TAEEnemySquad& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAEEnemySquad& default_instance();

  void Swap(TAEEnemySquad* other);

  // implements Message ----------------------------------------------

  TAEEnemySquad* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAEEnemySquad& from);
  void MergeFrom(const TAEEnemySquad& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SquadIndex = 1;
  inline bool has_squadindex() const;
  inline void clear_squadindex();
  static const int kSquadIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAEEnemySquad</name>
  	<Function>
  		<name>squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 squadindex() const;
  inline void set_squadindex(::google::protobuf::uint32 value);

  // repeated .pb.TAEMonsterStatus SquadMonsterArr = 2;
  inline int squadmonsterarr_size() const;
  inline void clear_squadmonsterarr();
  static const int kSquadMonsterArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAEEnemySquad</name>
  	<Function>
  		<name>squadmonsterarr</name>
  		<replaceName>SquadMonsterArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_squadmonsterarr</name>
  		<replaceName>SquadMonsterArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_squadmonsterarr</name>
  		<replaceName>SquadMonsterArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squadmonsterarr</name>
  		<replaceName>SquadMonsterArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>squadmonsterarr_size</name>
  		<replaceName>SquadMonsterArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAEMonsterStatus& squadmonsterarr(int index) const;
  inline ::pb::TAEMonsterStatus* mutable_squadmonsterarr(int index);
  inline ::pb::TAEMonsterStatus* add_squadmonsterarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAEMonsterStatus >&
      squadmonsterarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAEMonsterStatus >*
      mutable_squadmonsterarr();

  // optional uint64 FightForce = 3;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAEEnemySquad</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TAEEnemySquad)
 private:
  inline void set_has_squadindex();
  inline void clear_has_squadindex();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAEMonsterStatus > squadmonsterarr_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint32 squadindex_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TAEEnemySquad* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureEnemyReportBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureEnemyReportBattleReq : public ::google::protobuf::Message {
 public:
  TAdventureEnemyReportBattleReq();
  virtual ~TAdventureEnemyReportBattleReq();

  TAdventureEnemyReportBattleReq(const TAdventureEnemyReportBattleReq& from);

  inline TAdventureEnemyReportBattleReq& operator=(const TAdventureEnemyReportBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureEnemyReportBattleReq& default_instance();

  void Swap(TAdventureEnemyReportBattleReq* other);

  // implements Message ----------------------------------------------

  TAdventureEnemyReportBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureEnemyReportBattleReq& from);
  void MergeFrom(const TAdventureEnemyReportBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 EnemyId = 1;
  inline bool has_enemyid() const;
  inline void clear_enemyid();
  static const int kEnemyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemyReportBattleReq</name>
  	<Function>
  		<name>enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 enemyid() const;
  inline void set_enemyid(::google::protobuf::uint32 value);

  // optional uint32 SquadIndex = 2;
  inline bool has_squadindex() const;
  inline void clear_squadindex();
  static const int kSquadIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemyReportBattleReq</name>
  	<Function>
  		<name>squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 squadindex() const;
  inline void set_squadindex(::google::protobuf::uint32 value);

  // optional .pb.TBattleResult BattleResult = 3;
  inline bool has_battleresult() const;
  inline void clear_battleresult();
  static const int kBattleResultFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemyReportBattleReq</name>
  	<Function>
  		<name>battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleResult& battleresult() const;
  inline ::pb::TBattleResult* mutable_battleresult();
  inline ::pb::TBattleResult* release_battleresult();
  inline void set_allocated_battleresult(::pb::TBattleResult* battleresult);

  // @@protoc_insertion_point(class_scope:pb.TAdventureEnemyReportBattleReq)
 private:
  inline void set_has_enemyid();
  inline void clear_has_enemyid();
  inline void set_has_squadindex();
  inline void clear_has_squadindex();
  inline void set_has_battleresult();
  inline void clear_has_battleresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 enemyid_;
  ::google::protobuf::uint32 squadindex_;
  ::pb::TBattleResult* battleresult_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TAdventureEnemyReportBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureEnemyReportBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureEnemyReportBattleRsp : public ::google::protobuf::Message {
 public:
  TAdventureEnemyReportBattleRsp();
  virtual ~TAdventureEnemyReportBattleRsp();

  TAdventureEnemyReportBattleRsp(const TAdventureEnemyReportBattleRsp& from);

  inline TAdventureEnemyReportBattleRsp& operator=(const TAdventureEnemyReportBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureEnemyReportBattleRsp& default_instance();

  void Swap(TAdventureEnemyReportBattleRsp* other);

  // implements Message ----------------------------------------------

  TAdventureEnemyReportBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureEnemyReportBattleRsp& from);
  void MergeFrom(const TAdventureEnemyReportBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArray = 1;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemyReportBattleRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // optional .pb.TAEEnemySquad EnemySquad = 2;
  inline bool has_enemysquad() const;
  inline void clear_enemysquad();
  static const int kEnemySquadFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemyReportBattleRsp</name>
  	<Function>
  		<name>enemysquad</name>
  		<replaceName>EnemySquad</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemysquad</name>
  		<replaceName>EnemySquad</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_enemysquad</name>
  		<replaceName>EnemySquad</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemysquad</name>
  		<replaceName>EnemySquad</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAEEnemySquad& enemysquad() const;
  inline ::pb::TAEEnemySquad* mutable_enemysquad();
  inline ::pb::TAEEnemySquad* release_enemysquad();
  inline void set_allocated_enemysquad(::pb::TAEEnemySquad* enemysquad);

  // optional bool EnemyIsDead = 3;
  inline bool has_enemyisdead() const;
  inline void clear_enemyisdead();
  static const int kEnemyIsDeadFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemyReportBattleRsp</name>
  	<Function>
  		<name>enemyisdead</name>
  		<replaceName>EnemyIsDead</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyisdead</name>
  		<replaceName>EnemyIsDead</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyisdead</name>
  		<replaceName>EnemyIsDead</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool enemyisdead() const;
  inline void set_enemyisdead(bool value);

  // optional .pb.TAEMySquadStatus MySquad = 4;
  inline bool has_mysquad() const;
  inline void clear_mysquad();
  static const int kMySquadFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemyReportBattleRsp</name>
  	<Function>
  		<name>mysquad</name>
  		<replaceName>MySquad</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mysquad</name>
  		<replaceName>MySquad</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_mysquad</name>
  		<replaceName>MySquad</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mysquad</name>
  		<replaceName>MySquad</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAEMySquadStatus& mysquad() const;
  inline ::pb::TAEMySquadStatus* mutable_mysquad();
  inline ::pb::TAEMySquadStatus* release_mysquad();
  inline void set_allocated_mysquad(::pb::TAEMySquadStatus* mysquad);

  // @@protoc_insertion_point(class_scope:pb.TAdventureEnemyReportBattleRsp)
 private:
  inline void set_has_enemysquad();
  inline void clear_has_enemysquad();
  inline void set_has_enemyisdead();
  inline void clear_has_enemyisdead();
  inline void set_has_mysquad();
  inline void clear_has_mysquad();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  ::pb::TAEEnemySquad* enemysquad_;
  ::pb::TAEMySquadStatus* mysquad_;
  bool enemyisdead_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TAdventureEnemyReportBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TNewAdventureEnemyNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TNewAdventureEnemyNotify : public ::google::protobuf::Message {
 public:
  TNewAdventureEnemyNotify();
  virtual ~TNewAdventureEnemyNotify();

  TNewAdventureEnemyNotify(const TNewAdventureEnemyNotify& from);

  inline TNewAdventureEnemyNotify& operator=(const TNewAdventureEnemyNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TNewAdventureEnemyNotify& default_instance();

  void Swap(TNewAdventureEnemyNotify* other);

  // implements Message ----------------------------------------------

  TNewAdventureEnemyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TNewAdventureEnemyNotify& from);
  void MergeFrom(const TNewAdventureEnemyNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 EnemyId = 1;
  inline int enemyid_size() const;
  inline void clear_enemyid();
  static const int kEnemyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TNewAdventureEnemyNotify</name>
  	<Function>
  		<name>enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>enemyid_size</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 enemyid(int index) const;
  inline void set_enemyid(int index, ::google::protobuf::uint32 value);
  inline void add_enemyid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      enemyid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_enemyid();

  // @@protoc_insertion_point(class_scope:pb.TNewAdventureEnemyNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > enemyid_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TNewAdventureEnemyNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureEnemyCancelBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureEnemyCancelBattleReq : public ::google::protobuf::Message {
 public:
  TAdventureEnemyCancelBattleReq();
  virtual ~TAdventureEnemyCancelBattleReq();

  TAdventureEnemyCancelBattleReq(const TAdventureEnemyCancelBattleReq& from);

  inline TAdventureEnemyCancelBattleReq& operator=(const TAdventureEnemyCancelBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureEnemyCancelBattleReq& default_instance();

  void Swap(TAdventureEnemyCancelBattleReq* other);

  // implements Message ----------------------------------------------

  TAdventureEnemyCancelBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureEnemyCancelBattleReq& from);
  void MergeFrom(const TAdventureEnemyCancelBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 EnemyId = 1;
  inline bool has_enemyid() const;
  inline void clear_enemyid();
  static const int kEnemyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemyCancelBattleReq</name>
  	<Function>
  		<name>enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 enemyid() const;
  inline void set_enemyid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureEnemyCancelBattleReq)
 private:
  inline void set_has_enemyid();
  inline void clear_has_enemyid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 enemyid_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TAdventureEnemyCancelBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureEnemySingleBattleRet</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureEnemySingleBattleRet : public ::google::protobuf::Message {
 public:
  TAdventureEnemySingleBattleRet();
  virtual ~TAdventureEnemySingleBattleRet();

  TAdventureEnemySingleBattleRet(const TAdventureEnemySingleBattleRet& from);

  inline TAdventureEnemySingleBattleRet& operator=(const TAdventureEnemySingleBattleRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureEnemySingleBattleRet& default_instance();

  void Swap(TAdventureEnemySingleBattleRet* other);

  // implements Message ----------------------------------------------

  TAdventureEnemySingleBattleRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureEnemySingleBattleRet& from);
  void MergeFrom(const TAdventureEnemySingleBattleRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TAEEnemySquad EnemySquad = 2;
  inline bool has_enemysquad() const;
  inline void clear_enemysquad();
  static const int kEnemySquadFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemySingleBattleRet</name>
  	<Function>
  		<name>enemysquad</name>
  		<replaceName>EnemySquad</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemysquad</name>
  		<replaceName>EnemySquad</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_enemysquad</name>
  		<replaceName>EnemySquad</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemysquad</name>
  		<replaceName>EnemySquad</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAEEnemySquad& enemysquad() const;
  inline ::pb::TAEEnemySquad* mutable_enemysquad();
  inline ::pb::TAEEnemySquad* release_enemysquad();
  inline void set_allocated_enemysquad(::pb::TAEEnemySquad* enemysquad);

  // optional bool EnemyIsDead = 3;
  inline bool has_enemyisdead() const;
  inline void clear_enemyisdead();
  static const int kEnemyIsDeadFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemySingleBattleRet</name>
  	<Function>
  		<name>enemyisdead</name>
  		<replaceName>EnemyIsDead</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyisdead</name>
  		<replaceName>EnemyIsDead</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyisdead</name>
  		<replaceName>EnemyIsDead</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool enemyisdead() const;
  inline void set_enemyisdead(bool value);

  // optional .pb.TAEMySquadStatus MySquad = 4;
  inline bool has_mysquad() const;
  inline void clear_mysquad();
  static const int kMySquadFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemySingleBattleRet</name>
  	<Function>
  		<name>mysquad</name>
  		<replaceName>MySquad</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mysquad</name>
  		<replaceName>MySquad</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_mysquad</name>
  		<replaceName>MySquad</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mysquad</name>
  		<replaceName>MySquad</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAEMySquadStatus& mysquad() const;
  inline ::pb::TAEMySquadStatus* mutable_mysquad();
  inline ::pb::TAEMySquadStatus* release_mysquad();
  inline void set_allocated_mysquad(::pb::TAEMySquadStatus* mysquad);

  // @@protoc_insertion_point(class_scope:pb.TAdventureEnemySingleBattleRet)
 private:
  inline void set_has_enemysquad();
  inline void clear_has_enemysquad();
  inline void set_has_enemyisdead();
  inline void clear_has_enemyisdead();
  inline void set_has_mysquad();
  inline void clear_has_mysquad();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAEEnemySquad* enemysquad_;
  ::pb::TAEMySquadStatus* mysquad_;
  bool enemyisdead_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TAdventureEnemySingleBattleRet* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureEnemySkipBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureEnemySkipBattleReq : public ::google::protobuf::Message {
 public:
  TAdventureEnemySkipBattleReq();
  virtual ~TAdventureEnemySkipBattleReq();

  TAdventureEnemySkipBattleReq(const TAdventureEnemySkipBattleReq& from);

  inline TAdventureEnemySkipBattleReq& operator=(const TAdventureEnemySkipBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureEnemySkipBattleReq& default_instance();

  void Swap(TAdventureEnemySkipBattleReq* other);

  // implements Message ----------------------------------------------

  TAdventureEnemySkipBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureEnemySkipBattleReq& from);
  void MergeFrom(const TAdventureEnemySkipBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 EnemyId = 1;
  inline bool has_enemyid() const;
  inline void clear_enemyid();
  static const int kEnemyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemySkipBattleReq</name>
  	<Function>
  		<name>enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 enemyid() const;
  inline void set_enemyid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureEnemySkipBattleReq)
 private:
  inline void set_has_enemyid();
  inline void clear_has_enemyid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 enemyid_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TAdventureEnemySkipBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureEnemySkipBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureEnemySkipBattleRsp : public ::google::protobuf::Message {
 public:
  TAdventureEnemySkipBattleRsp();
  virtual ~TAdventureEnemySkipBattleRsp();

  TAdventureEnemySkipBattleRsp(const TAdventureEnemySkipBattleRsp& from);

  inline TAdventureEnemySkipBattleRsp& operator=(const TAdventureEnemySkipBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureEnemySkipBattleRsp& default_instance();

  void Swap(TAdventureEnemySkipBattleRsp* other);

  // implements Message ----------------------------------------------

  TAdventureEnemySkipBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureEnemySkipBattleRsp& from);
  void MergeFrom(const TAdventureEnemySkipBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArray = 1;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemySkipBattleRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // repeated .pb.TAdventureEnemySingleBattleRet ArrBattleRet = 2;
  inline int arrbattleret_size() const;
  inline void clear_arrbattleret();
  static const int kArrBattleRetFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemySkipBattleRsp</name>
  	<Function>
  		<name>arrbattleret</name>
  		<replaceName>ArrBattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrbattleret</name>
  		<replaceName>ArrBattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrbattleret</name>
  		<replaceName>ArrBattleRet</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrbattleret</name>
  		<replaceName>ArrBattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrbattleret_size</name>
  		<replaceName>ArrBattleRet</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureEnemySingleBattleRet& arrbattleret(int index) const;
  inline ::pb::TAdventureEnemySingleBattleRet* mutable_arrbattleret(int index);
  inline ::pb::TAdventureEnemySingleBattleRet* add_arrbattleret();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureEnemySingleBattleRet >&
      arrbattleret() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureEnemySingleBattleRet >*
      mutable_arrbattleret();

  // @@protoc_insertion_point(class_scope:pb.TAdventureEnemySkipBattleRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventureEnemySingleBattleRet > arrbattleret_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TAdventureEnemySkipBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureEnemyGetAcheivementInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureEnemyGetAcheivementInfoRsp : public ::google::protobuf::Message {
 public:
  TAdventureEnemyGetAcheivementInfoRsp();
  virtual ~TAdventureEnemyGetAcheivementInfoRsp();

  TAdventureEnemyGetAcheivementInfoRsp(const TAdventureEnemyGetAcheivementInfoRsp& from);

  inline TAdventureEnemyGetAcheivementInfoRsp& operator=(const TAdventureEnemyGetAcheivementInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureEnemyGetAcheivementInfoRsp& default_instance();

  void Swap(TAdventureEnemyGetAcheivementInfoRsp* other);

  // implements Message ----------------------------------------------

  TAdventureEnemyGetAcheivementInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureEnemyGetAcheivementInfoRsp& from);
  void MergeFrom(const TAdventureEnemyGetAcheivementInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 DefeatEnemyNum = 1;
  inline bool has_defeatenemynum() const;
  inline void clear_defeatenemynum();
  static const int kDefeatEnemyNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemyGetAcheivementInfoRsp</name>
  	<Function>
  		<name>defeatenemynum</name>
  		<replaceName>DefeatEnemyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defeatenemynum</name>
  		<replaceName>DefeatEnemyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defeatenemynum</name>
  		<replaceName>DefeatEnemyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 defeatenemynum() const;
  inline void set_defeatenemynum(::google::protobuf::uint32 value);

  // repeated uint32 RewardIdArr = 2;
  inline int rewardidarr_size() const;
  inline void clear_rewardidarr();
  static const int kRewardIdArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemyGetAcheivementInfoRsp</name>
  	<Function>
  		<name>rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardidarr_size</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardidarr(int index) const;
  inline void set_rewardidarr(int index, ::google::protobuf::uint32 value);
  inline void add_rewardidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rewardidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rewardidarr();

  // @@protoc_insertion_point(class_scope:pb.TAdventureEnemyGetAcheivementInfoRsp)
 private:
  inline void set_has_defeatenemynum();
  inline void clear_has_defeatenemynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rewardidarr_;
  ::google::protobuf::uint32 defeatenemynum_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TAdventureEnemyGetAcheivementInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureEnemyReceiveAchievementRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureEnemyReceiveAchievementRewardReq : public ::google::protobuf::Message {
 public:
  TAdventureEnemyReceiveAchievementRewardReq();
  virtual ~TAdventureEnemyReceiveAchievementRewardReq();

  TAdventureEnemyReceiveAchievementRewardReq(const TAdventureEnemyReceiveAchievementRewardReq& from);

  inline TAdventureEnemyReceiveAchievementRewardReq& operator=(const TAdventureEnemyReceiveAchievementRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureEnemyReceiveAchievementRewardReq& default_instance();

  void Swap(TAdventureEnemyReceiveAchievementRewardReq* other);

  // implements Message ----------------------------------------------

  TAdventureEnemyReceiveAchievementRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureEnemyReceiveAchievementRewardReq& from);
  void MergeFrom(const TAdventureEnemyReceiveAchievementRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RewardId = 1;
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemyReceiveAchievementRewardReq</name>
  	<Function>
  		<name>rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardid() const;
  inline void set_rewardid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureEnemyReceiveAchievementRewardReq)
 private:
  inline void set_has_rewardid();
  inline void clear_has_rewardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rewardid_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TAdventureEnemyReceiveAchievementRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureEnemySetPresetSquadReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureEnemySetPresetSquadReq : public ::google::protobuf::Message {
 public:
  TAdventureEnemySetPresetSquadReq();
  virtual ~TAdventureEnemySetPresetSquadReq();

  TAdventureEnemySetPresetSquadReq(const TAdventureEnemySetPresetSquadReq& from);

  inline TAdventureEnemySetPresetSquadReq& operator=(const TAdventureEnemySetPresetSquadReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureEnemySetPresetSquadReq& default_instance();

  void Swap(TAdventureEnemySetPresetSquadReq* other);

  // implements Message ----------------------------------------------

  TAdventureEnemySetPresetSquadReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureEnemySetPresetSquadReq& from);
  void MergeFrom(const TAdventureEnemySetPresetSquadReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SquadIndex = 1;
  inline bool has_squadindex() const;
  inline void clear_squadindex();
  static const int kSquadIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemySetPresetSquadReq</name>
  	<Function>
  		<name>squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 squadindex() const;
  inline void set_squadindex(::google::protobuf::uint32 value);

  // repeated .pb.TAESquadHeroInfo SquadHeroArr = 2;
  inline int squadheroarr_size() const;
  inline void clear_squadheroarr();
  static const int kSquadHeroArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemySetPresetSquadReq</name>
  	<Function>
  		<name>squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squadheroarr</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>squadheroarr_size</name>
  		<replaceName>SquadHeroArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAESquadHeroInfo& squadheroarr(int index) const;
  inline ::pb::TAESquadHeroInfo* mutable_squadheroarr(int index);
  inline ::pb::TAESquadHeroInfo* add_squadheroarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAESquadHeroInfo >&
      squadheroarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAESquadHeroInfo >*
      mutable_squadheroarr();

  // @@protoc_insertion_point(class_scope:pb.TAdventureEnemySetPresetSquadReq)
 private:
  inline void set_has_squadindex();
  inline void clear_has_squadindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAESquadHeroInfo > squadheroarr_;
  ::google::protobuf::uint32 squadindex_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TAdventureEnemySetPresetSquadReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureEnemySwitchPresetSquadReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureEnemySwitchPresetSquadReq : public ::google::protobuf::Message {
 public:
  TAdventureEnemySwitchPresetSquadReq();
  virtual ~TAdventureEnemySwitchPresetSquadReq();

  TAdventureEnemySwitchPresetSquadReq(const TAdventureEnemySwitchPresetSquadReq& from);

  inline TAdventureEnemySwitchPresetSquadReq& operator=(const TAdventureEnemySwitchPresetSquadReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureEnemySwitchPresetSquadReq& default_instance();

  void Swap(TAdventureEnemySwitchPresetSquadReq* other);

  // implements Message ----------------------------------------------

  TAdventureEnemySwitchPresetSquadReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureEnemySwitchPresetSquadReq& from);
  void MergeFrom(const TAdventureEnemySwitchPresetSquadReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SquadIndex = 1;
  inline bool has_squadindex() const;
  inline void clear_squadindex();
  static const int kSquadIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemySwitchPresetSquadReq</name>
  	<Function>
  		<name>squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squadindex</name>
  		<replaceName>SquadIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 squadindex() const;
  inline void set_squadindex(::google::protobuf::uint32 value);

  // optional uint32 SwitchToSquadIndex = 2;
  inline bool has_switchtosquadindex() const;
  inline void clear_switchtosquadindex();
  static const int kSwitchToSquadIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemySwitchPresetSquadReq</name>
  	<Function>
  		<name>switchtosquadindex</name>
  		<replaceName>SwitchToSquadIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_switchtosquadindex</name>
  		<replaceName>SwitchToSquadIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_switchtosquadindex</name>
  		<replaceName>SwitchToSquadIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 switchtosquadindex() const;
  inline void set_switchtosquadindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureEnemySwitchPresetSquadReq)
 private:
  inline void set_has_squadindex();
  inline void clear_has_squadindex();
  inline void set_has_switchtosquadindex();
  inline void clear_has_switchtosquadindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 squadindex_;
  ::google::protobuf::uint32 switchtosquadindex_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TAdventureEnemySwitchPresetSquadReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureEnemyUsePresetSquadReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureEnemyUsePresetSquadReq : public ::google::protobuf::Message {
 public:
  TAdventureEnemyUsePresetSquadReq();
  virtual ~TAdventureEnemyUsePresetSquadReq();

  TAdventureEnemyUsePresetSquadReq(const TAdventureEnemyUsePresetSquadReq& from);

  inline TAdventureEnemyUsePresetSquadReq& operator=(const TAdventureEnemyUsePresetSquadReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureEnemyUsePresetSquadReq& default_instance();

  void Swap(TAdventureEnemyUsePresetSquadReq* other);

  // implements Message ----------------------------------------------

  TAdventureEnemyUsePresetSquadReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureEnemyUsePresetSquadReq& from);
  void MergeFrom(const TAdventureEnemyUsePresetSquadReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 EnemyId = 1;
  inline bool has_enemyid() const;
  inline void clear_enemyid();
  static const int kEnemyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEnemyUsePresetSquadReq</name>
  	<Function>
  		<name>enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 enemyid() const;
  inline void set_enemyid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureEnemyUsePresetSquadReq)
 private:
  inline void set_has_enemyid();
  inline void clear_has_enemyid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 enemyid_;
  friend void  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto();

  void InitAsDefaultInstance();
  static TAdventureEnemyUsePresetSquadReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TAESquadHeroInfo

// optional uint32 PosId = 1;
inline bool TAESquadHeroInfo::has_posid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAESquadHeroInfo::set_has_posid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAESquadHeroInfo::clear_has_posid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAESquadHeroInfo::clear_posid() {
  posid_ = 0u;
  clear_has_posid();
}
inline ::google::protobuf::uint32 TAESquadHeroInfo::posid() const {
  // @@protoc_insertion_point(field_get:pb.TAESquadHeroInfo.PosId)
  return posid_;
}
inline void TAESquadHeroInfo::set_posid(::google::protobuf::uint32 value) {
  set_has_posid();
  posid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAESquadHeroInfo.PosId)
}

// optional uint32 HeroId = 2;
inline bool TAESquadHeroInfo::has_heroid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAESquadHeroInfo::set_has_heroid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAESquadHeroInfo::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAESquadHeroInfo::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 TAESquadHeroInfo::heroid() const {
  // @@protoc_insertion_point(field_get:pb.TAESquadHeroInfo.HeroId)
  return heroid_;
}
inline void TAESquadHeroInfo::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAESquadHeroInfo.HeroId)
}

// -------------------------------------------------------------------

// TAEMySquad

// optional uint32 SquadIndex = 1;
inline bool TAEMySquad::has_squadindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAEMySquad::set_has_squadindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAEMySquad::clear_has_squadindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAEMySquad::clear_squadindex() {
  squadindex_ = 0u;
  clear_has_squadindex();
}
inline ::google::protobuf::uint32 TAEMySquad::squadindex() const {
  // @@protoc_insertion_point(field_get:pb.TAEMySquad.SquadIndex)
  return squadindex_;
}
inline void TAEMySquad::set_squadindex(::google::protobuf::uint32 value) {
  set_has_squadindex();
  squadindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAEMySquad.SquadIndex)
}

// repeated .pb.TAESquadHeroInfo SquadHeroArr = 2;
inline int TAEMySquad::squadheroarr_size() const {
  return squadheroarr_.size();
}
inline void TAEMySquad::clear_squadheroarr() {
  squadheroarr_.Clear();
}
inline const ::pb::TAESquadHeroInfo& TAEMySquad::squadheroarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAEMySquad.SquadHeroArr)
  return squadheroarr_.Get(index);
}
inline ::pb::TAESquadHeroInfo* TAEMySquad::mutable_squadheroarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAEMySquad.SquadHeroArr)
  return squadheroarr_.Mutable(index);
}
inline ::pb::TAESquadHeroInfo* TAEMySquad::add_squadheroarr() {
  // @@protoc_insertion_point(field_add:pb.TAEMySquad.SquadHeroArr)
  return squadheroarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAESquadHeroInfo >&
TAEMySquad::squadheroarr() const {
  // @@protoc_insertion_point(field_list:pb.TAEMySquad.SquadHeroArr)
  return squadheroarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAESquadHeroInfo >*
TAEMySquad::mutable_squadheroarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAEMySquad.SquadHeroArr)
  return &squadheroarr_;
}

// -------------------------------------------------------------------

// TAESquadHeroStatusInfo

// optional uint32 PosId = 1;
inline bool TAESquadHeroStatusInfo::has_posid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAESquadHeroStatusInfo::set_has_posid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAESquadHeroStatusInfo::clear_has_posid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAESquadHeroStatusInfo::clear_posid() {
  posid_ = 0u;
  clear_has_posid();
}
inline ::google::protobuf::uint32 TAESquadHeroStatusInfo::posid() const {
  // @@protoc_insertion_point(field_get:pb.TAESquadHeroStatusInfo.PosId)
  return posid_;
}
inline void TAESquadHeroStatusInfo::set_posid(::google::protobuf::uint32 value) {
  set_has_posid();
  posid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAESquadHeroStatusInfo.PosId)
}

// optional uint32 HeroId = 2;
inline bool TAESquadHeroStatusInfo::has_heroid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAESquadHeroStatusInfo::set_has_heroid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAESquadHeroStatusInfo::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAESquadHeroStatusInfo::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 TAESquadHeroStatusInfo::heroid() const {
  // @@protoc_insertion_point(field_get:pb.TAESquadHeroStatusInfo.HeroId)
  return heroid_;
}
inline void TAESquadHeroStatusInfo::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAESquadHeroStatusInfo.HeroId)
}

// optional uint64 CurHp = 3;
inline bool TAESquadHeroStatusInfo::has_curhp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAESquadHeroStatusInfo::set_has_curhp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAESquadHeroStatusInfo::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAESquadHeroStatusInfo::clear_curhp() {
  curhp_ = GOOGLE_ULONGLONG(0);
  clear_has_curhp();
}
inline ::google::protobuf::uint64 TAESquadHeroStatusInfo::curhp() const {
  // @@protoc_insertion_point(field_get:pb.TAESquadHeroStatusInfo.CurHp)
  return curhp_;
}
inline void TAESquadHeroStatusInfo::set_curhp(::google::protobuf::uint64 value) {
  set_has_curhp();
  curhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TAESquadHeroStatusInfo.CurHp)
}

// optional uint64 MaxHp = 4;
inline bool TAESquadHeroStatusInfo::has_maxhp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAESquadHeroStatusInfo::set_has_maxhp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAESquadHeroStatusInfo::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAESquadHeroStatusInfo::clear_maxhp() {
  maxhp_ = GOOGLE_ULONGLONG(0);
  clear_has_maxhp();
}
inline ::google::protobuf::uint64 TAESquadHeroStatusInfo::maxhp() const {
  // @@protoc_insertion_point(field_get:pb.TAESquadHeroStatusInfo.MaxHp)
  return maxhp_;
}
inline void TAESquadHeroStatusInfo::set_maxhp(::google::protobuf::uint64 value) {
  set_has_maxhp();
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TAESquadHeroStatusInfo.MaxHp)
}

// -------------------------------------------------------------------

// TAEMySquadStatus

// optional uint32 SquadIndex = 1;
inline bool TAEMySquadStatus::has_squadindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAEMySquadStatus::set_has_squadindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAEMySquadStatus::clear_has_squadindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAEMySquadStatus::clear_squadindex() {
  squadindex_ = 0u;
  clear_has_squadindex();
}
inline ::google::protobuf::uint32 TAEMySquadStatus::squadindex() const {
  // @@protoc_insertion_point(field_get:pb.TAEMySquadStatus.SquadIndex)
  return squadindex_;
}
inline void TAEMySquadStatus::set_squadindex(::google::protobuf::uint32 value) {
  set_has_squadindex();
  squadindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAEMySquadStatus.SquadIndex)
}

// repeated .pb.TAESquadHeroStatusInfo SquadHeroArr = 2;
inline int TAEMySquadStatus::squadheroarr_size() const {
  return squadheroarr_.size();
}
inline void TAEMySquadStatus::clear_squadheroarr() {
  squadheroarr_.Clear();
}
inline const ::pb::TAESquadHeroStatusInfo& TAEMySquadStatus::squadheroarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAEMySquadStatus.SquadHeroArr)
  return squadheroarr_.Get(index);
}
inline ::pb::TAESquadHeroStatusInfo* TAEMySquadStatus::mutable_squadheroarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAEMySquadStatus.SquadHeroArr)
  return squadheroarr_.Mutable(index);
}
inline ::pb::TAESquadHeroStatusInfo* TAEMySquadStatus::add_squadheroarr() {
  // @@protoc_insertion_point(field_add:pb.TAEMySquadStatus.SquadHeroArr)
  return squadheroarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAESquadHeroStatusInfo >&
TAEMySquadStatus::squadheroarr() const {
  // @@protoc_insertion_point(field_list:pb.TAEMySquadStatus.SquadHeroArr)
  return squadheroarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAESquadHeroStatusInfo >*
TAEMySquadStatus::mutable_squadheroarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAEMySquadStatus.SquadHeroArr)
  return &squadheroarr_;
}

// -------------------------------------------------------------------

// TAdventureEnemySingleInfo

// optional uint32 EnemyId = 1;
inline bool TAdventureEnemySingleInfo::has_enemyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureEnemySingleInfo::set_has_enemyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureEnemySingleInfo::clear_has_enemyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureEnemySingleInfo::clear_enemyid() {
  enemyid_ = 0u;
  clear_has_enemyid();
}
inline ::google::protobuf::uint32 TAdventureEnemySingleInfo::enemyid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemySingleInfo.EnemyId)
  return enemyid_;
}
inline void TAdventureEnemySingleInfo::set_enemyid(::google::protobuf::uint32 value) {
  set_has_enemyid();
  enemyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemySingleInfo.EnemyId)
}

// optional uint64 CurHp = 2;
inline bool TAdventureEnemySingleInfo::has_curhp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureEnemySingleInfo::set_has_curhp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureEnemySingleInfo::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureEnemySingleInfo::clear_curhp() {
  curhp_ = GOOGLE_ULONGLONG(0);
  clear_has_curhp();
}
inline ::google::protobuf::uint64 TAdventureEnemySingleInfo::curhp() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemySingleInfo.CurHp)
  return curhp_;
}
inline void TAdventureEnemySingleInfo::set_curhp(::google::protobuf::uint64 value) {
  set_has_curhp();
  curhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemySingleInfo.CurHp)
}

// optional uint64 MaxHp = 3;
inline bool TAdventureEnemySingleInfo::has_maxhp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureEnemySingleInfo::set_has_maxhp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureEnemySingleInfo::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureEnemySingleInfo::clear_maxhp() {
  maxhp_ = GOOGLE_ULONGLONG(0);
  clear_has_maxhp();
}
inline ::google::protobuf::uint64 TAdventureEnemySingleInfo::maxhp() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemySingleInfo.MaxHp)
  return maxhp_;
}
inline void TAdventureEnemySingleInfo::set_maxhp(::google::protobuf::uint64 value) {
  set_has_maxhp();
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemySingleInfo.MaxHp)
}

// repeated .pb.TAEEnemySquad EnemySquadArr = 4;
inline int TAdventureEnemySingleInfo::enemysquadarr_size() const {
  return enemysquadarr_.size();
}
inline void TAdventureEnemySingleInfo::clear_enemysquadarr() {
  enemysquadarr_.Clear();
}
inline const ::pb::TAEEnemySquad& TAdventureEnemySingleInfo::enemysquadarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemySingleInfo.EnemySquadArr)
  return enemysquadarr_.Get(index);
}
inline ::pb::TAEEnemySquad* TAdventureEnemySingleInfo::mutable_enemysquadarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureEnemySingleInfo.EnemySquadArr)
  return enemysquadarr_.Mutable(index);
}
inline ::pb::TAEEnemySquad* TAdventureEnemySingleInfo::add_enemysquadarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureEnemySingleInfo.EnemySquadArr)
  return enemysquadarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAEEnemySquad >&
TAdventureEnemySingleInfo::enemysquadarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureEnemySingleInfo.EnemySquadArr)
  return enemysquadarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAEEnemySquad >*
TAdventureEnemySingleInfo::mutable_enemysquadarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureEnemySingleInfo.EnemySquadArr)
  return &enemysquadarr_;
}

// repeated .pb.TAEMySquad MySquadArr = 5;
inline int TAdventureEnemySingleInfo::mysquadarr_size() const {
  return mysquadarr_.size();
}
inline void TAdventureEnemySingleInfo::clear_mysquadarr() {
  mysquadarr_.Clear();
}
inline const ::pb::TAEMySquad& TAdventureEnemySingleInfo::mysquadarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemySingleInfo.MySquadArr)
  return mysquadarr_.Get(index);
}
inline ::pb::TAEMySquad* TAdventureEnemySingleInfo::mutable_mysquadarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureEnemySingleInfo.MySquadArr)
  return mysquadarr_.Mutable(index);
}
inline ::pb::TAEMySquad* TAdventureEnemySingleInfo::add_mysquadarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureEnemySingleInfo.MySquadArr)
  return mysquadarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAEMySquad >&
TAdventureEnemySingleInfo::mysquadarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureEnemySingleInfo.MySquadArr)
  return mysquadarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAEMySquad >*
TAdventureEnemySingleInfo::mutable_mysquadarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureEnemySingleInfo.MySquadArr)
  return &mysquadarr_;
}

// repeated uint32 FightHeroArr = 6;
inline int TAdventureEnemySingleInfo::fightheroarr_size() const {
  return fightheroarr_.size();
}
inline void TAdventureEnemySingleInfo::clear_fightheroarr() {
  fightheroarr_.Clear();
}
inline ::google::protobuf::uint32 TAdventureEnemySingleInfo::fightheroarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemySingleInfo.FightHeroArr)
  return fightheroarr_.Get(index);
}
inline void TAdventureEnemySingleInfo::set_fightheroarr(int index, ::google::protobuf::uint32 value) {
  fightheroarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemySingleInfo.FightHeroArr)
}
inline void TAdventureEnemySingleInfo::add_fightheroarr(::google::protobuf::uint32 value) {
  fightheroarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TAdventureEnemySingleInfo.FightHeroArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TAdventureEnemySingleInfo::fightheroarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureEnemySingleInfo.FightHeroArr)
  return fightheroarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TAdventureEnemySingleInfo::mutable_fightheroarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureEnemySingleInfo.FightHeroArr)
  return &fightheroarr_;
}

// optional uint32 TriggerMapLevel = 7;
inline bool TAdventureEnemySingleInfo::has_triggermaplevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TAdventureEnemySingleInfo::set_has_triggermaplevel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TAdventureEnemySingleInfo::clear_has_triggermaplevel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TAdventureEnemySingleInfo::clear_triggermaplevel() {
  triggermaplevel_ = 0u;
  clear_has_triggermaplevel();
}
inline ::google::protobuf::uint32 TAdventureEnemySingleInfo::triggermaplevel() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemySingleInfo.TriggerMapLevel)
  return triggermaplevel_;
}
inline void TAdventureEnemySingleInfo::set_triggermaplevel(::google::protobuf::uint32 value) {
  set_has_triggermaplevel();
  triggermaplevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemySingleInfo.TriggerMapLevel)
}

// -------------------------------------------------------------------

// TAdventureEnemyGetInfoRsp

// repeated .pb.TAdventureEnemySingleInfo EnemyArr = 1;
inline int TAdventureEnemyGetInfoRsp::enemyarr_size() const {
  return enemyarr_.size();
}
inline void TAdventureEnemyGetInfoRsp::clear_enemyarr() {
  enemyarr_.Clear();
}
inline const ::pb::TAdventureEnemySingleInfo& TAdventureEnemyGetInfoRsp::enemyarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemyGetInfoRsp.EnemyArr)
  return enemyarr_.Get(index);
}
inline ::pb::TAdventureEnemySingleInfo* TAdventureEnemyGetInfoRsp::mutable_enemyarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureEnemyGetInfoRsp.EnemyArr)
  return enemyarr_.Mutable(index);
}
inline ::pb::TAdventureEnemySingleInfo* TAdventureEnemyGetInfoRsp::add_enemyarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureEnemyGetInfoRsp.EnemyArr)
  return enemyarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureEnemySingleInfo >&
TAdventureEnemyGetInfoRsp::enemyarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureEnemyGetInfoRsp.EnemyArr)
  return enemyarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureEnemySingleInfo >*
TAdventureEnemyGetInfoRsp::mutable_enemyarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureEnemyGetInfoRsp.EnemyArr)
  return &enemyarr_;
}

// repeated uint32 EnemyIdArr = 2;
inline int TAdventureEnemyGetInfoRsp::enemyidarr_size() const {
  return enemyidarr_.size();
}
inline void TAdventureEnemyGetInfoRsp::clear_enemyidarr() {
  enemyidarr_.Clear();
}
inline ::google::protobuf::uint32 TAdventureEnemyGetInfoRsp::enemyidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemyGetInfoRsp.EnemyIdArr)
  return enemyidarr_.Get(index);
}
inline void TAdventureEnemyGetInfoRsp::set_enemyidarr(int index, ::google::protobuf::uint32 value) {
  enemyidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemyGetInfoRsp.EnemyIdArr)
}
inline void TAdventureEnemyGetInfoRsp::add_enemyidarr(::google::protobuf::uint32 value) {
  enemyidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TAdventureEnemyGetInfoRsp.EnemyIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TAdventureEnemyGetInfoRsp::enemyidarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureEnemyGetInfoRsp.EnemyIdArr)
  return enemyidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TAdventureEnemyGetInfoRsp::mutable_enemyidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureEnemyGetInfoRsp.EnemyIdArr)
  return &enemyidarr_;
}

// optional uint64 DueTime = 3;
inline bool TAdventureEnemyGetInfoRsp::has_duetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureEnemyGetInfoRsp::set_has_duetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureEnemyGetInfoRsp::clear_has_duetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureEnemyGetInfoRsp::clear_duetime() {
  duetime_ = GOOGLE_ULONGLONG(0);
  clear_has_duetime();
}
inline ::google::protobuf::uint64 TAdventureEnemyGetInfoRsp::duetime() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemyGetInfoRsp.DueTime)
  return duetime_;
}
inline void TAdventureEnemyGetInfoRsp::set_duetime(::google::protobuf::uint64 value) {
  set_has_duetime();
  duetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemyGetInfoRsp.DueTime)
}

// repeated .pb.TAEMySquad PresetSquadArr = 4;
inline int TAdventureEnemyGetInfoRsp::presetsquadarr_size() const {
  return presetsquadarr_.size();
}
inline void TAdventureEnemyGetInfoRsp::clear_presetsquadarr() {
  presetsquadarr_.Clear();
}
inline const ::pb::TAEMySquad& TAdventureEnemyGetInfoRsp::presetsquadarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemyGetInfoRsp.PresetSquadArr)
  return presetsquadarr_.Get(index);
}
inline ::pb::TAEMySquad* TAdventureEnemyGetInfoRsp::mutable_presetsquadarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureEnemyGetInfoRsp.PresetSquadArr)
  return presetsquadarr_.Mutable(index);
}
inline ::pb::TAEMySquad* TAdventureEnemyGetInfoRsp::add_presetsquadarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureEnemyGetInfoRsp.PresetSquadArr)
  return presetsquadarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAEMySquad >&
TAdventureEnemyGetInfoRsp::presetsquadarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureEnemyGetInfoRsp.PresetSquadArr)
  return presetsquadarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAEMySquad >*
TAdventureEnemyGetInfoRsp::mutable_presetsquadarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureEnemyGetInfoRsp.PresetSquadArr)
  return &presetsquadarr_;
}

// -------------------------------------------------------------------

// TAdventureEnemyRebornHeroReq

// optional uint32 EnemyId = 1;
inline bool TAdventureEnemyRebornHeroReq::has_enemyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureEnemyRebornHeroReq::set_has_enemyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureEnemyRebornHeroReq::clear_has_enemyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureEnemyRebornHeroReq::clear_enemyid() {
  enemyid_ = 0u;
  clear_has_enemyid();
}
inline ::google::protobuf::uint32 TAdventureEnemyRebornHeroReq::enemyid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemyRebornHeroReq.EnemyId)
  return enemyid_;
}
inline void TAdventureEnemyRebornHeroReq::set_enemyid(::google::protobuf::uint32 value) {
  set_has_enemyid();
  enemyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemyRebornHeroReq.EnemyId)
}

// optional .pb.TAERebornHeroCostType CostType = 2;
inline bool TAdventureEnemyRebornHeroReq::has_costtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureEnemyRebornHeroReq::set_has_costtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureEnemyRebornHeroReq::clear_has_costtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureEnemyRebornHeroReq::clear_costtype() {
  costtype_ = 1;
  clear_has_costtype();
}
inline ::pb::TAERebornHeroCostType TAdventureEnemyRebornHeroReq::costtype() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemyRebornHeroReq.CostType)
  return static_cast< ::pb::TAERebornHeroCostType >(costtype_);
}
inline void TAdventureEnemyRebornHeroReq::set_costtype(::pb::TAERebornHeroCostType value) {
  assert(::pb::TAERebornHeroCostType_IsValid(value));
  set_has_costtype();
  costtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemyRebornHeroReq.CostType)
}

// -------------------------------------------------------------------

// TAdventureEnemySetSquadReq

// optional uint32 EnemyId = 1;
inline bool TAdventureEnemySetSquadReq::has_enemyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureEnemySetSquadReq::set_has_enemyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureEnemySetSquadReq::clear_has_enemyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureEnemySetSquadReq::clear_enemyid() {
  enemyid_ = 0u;
  clear_has_enemyid();
}
inline ::google::protobuf::uint32 TAdventureEnemySetSquadReq::enemyid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemySetSquadReq.EnemyId)
  return enemyid_;
}
inline void TAdventureEnemySetSquadReq::set_enemyid(::google::protobuf::uint32 value) {
  set_has_enemyid();
  enemyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemySetSquadReq.EnemyId)
}

// optional uint32 SquadIndex = 2;
inline bool TAdventureEnemySetSquadReq::has_squadindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureEnemySetSquadReq::set_has_squadindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureEnemySetSquadReq::clear_has_squadindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureEnemySetSquadReq::clear_squadindex() {
  squadindex_ = 0u;
  clear_has_squadindex();
}
inline ::google::protobuf::uint32 TAdventureEnemySetSquadReq::squadindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemySetSquadReq.SquadIndex)
  return squadindex_;
}
inline void TAdventureEnemySetSquadReq::set_squadindex(::google::protobuf::uint32 value) {
  set_has_squadindex();
  squadindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemySetSquadReq.SquadIndex)
}

// repeated .pb.TAESquadHeroInfo SquadHeroArr = 3;
inline int TAdventureEnemySetSquadReq::squadheroarr_size() const {
  return squadheroarr_.size();
}
inline void TAdventureEnemySetSquadReq::clear_squadheroarr() {
  squadheroarr_.Clear();
}
inline const ::pb::TAESquadHeroInfo& TAdventureEnemySetSquadReq::squadheroarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemySetSquadReq.SquadHeroArr)
  return squadheroarr_.Get(index);
}
inline ::pb::TAESquadHeroInfo* TAdventureEnemySetSquadReq::mutable_squadheroarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureEnemySetSquadReq.SquadHeroArr)
  return squadheroarr_.Mutable(index);
}
inline ::pb::TAESquadHeroInfo* TAdventureEnemySetSquadReq::add_squadheroarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureEnemySetSquadReq.SquadHeroArr)
  return squadheroarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAESquadHeroInfo >&
TAdventureEnemySetSquadReq::squadheroarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureEnemySetSquadReq.SquadHeroArr)
  return squadheroarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAESquadHeroInfo >*
TAdventureEnemySetSquadReq::mutable_squadheroarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureEnemySetSquadReq.SquadHeroArr)
  return &squadheroarr_;
}

// -------------------------------------------------------------------

// TAdventureEnemySwitchSquadReq

// optional uint32 EnemyId = 1;
inline bool TAdventureEnemySwitchSquadReq::has_enemyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureEnemySwitchSquadReq::set_has_enemyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureEnemySwitchSquadReq::clear_has_enemyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureEnemySwitchSquadReq::clear_enemyid() {
  enemyid_ = 0u;
  clear_has_enemyid();
}
inline ::google::protobuf::uint32 TAdventureEnemySwitchSquadReq::enemyid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemySwitchSquadReq.EnemyId)
  return enemyid_;
}
inline void TAdventureEnemySwitchSquadReq::set_enemyid(::google::protobuf::uint32 value) {
  set_has_enemyid();
  enemyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemySwitchSquadReq.EnemyId)
}

// optional uint32 SquadIndex = 2;
inline bool TAdventureEnemySwitchSquadReq::has_squadindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureEnemySwitchSquadReq::set_has_squadindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureEnemySwitchSquadReq::clear_has_squadindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureEnemySwitchSquadReq::clear_squadindex() {
  squadindex_ = 0u;
  clear_has_squadindex();
}
inline ::google::protobuf::uint32 TAdventureEnemySwitchSquadReq::squadindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemySwitchSquadReq.SquadIndex)
  return squadindex_;
}
inline void TAdventureEnemySwitchSquadReq::set_squadindex(::google::protobuf::uint32 value) {
  set_has_squadindex();
  squadindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemySwitchSquadReq.SquadIndex)
}

// optional uint32 SwitchToSquadIndex = 3;
inline bool TAdventureEnemySwitchSquadReq::has_switchtosquadindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureEnemySwitchSquadReq::set_has_switchtosquadindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureEnemySwitchSquadReq::clear_has_switchtosquadindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureEnemySwitchSquadReq::clear_switchtosquadindex() {
  switchtosquadindex_ = 0u;
  clear_has_switchtosquadindex();
}
inline ::google::protobuf::uint32 TAdventureEnemySwitchSquadReq::switchtosquadindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemySwitchSquadReq.SwitchToSquadIndex)
  return switchtosquadindex_;
}
inline void TAdventureEnemySwitchSquadReq::set_switchtosquadindex(::google::protobuf::uint32 value) {
  set_has_switchtosquadindex();
  switchtosquadindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemySwitchSquadReq.SwitchToSquadIndex)
}

// -------------------------------------------------------------------

// TAdventureEnemyStartBattleReq

// optional uint32 EnemyId = 1;
inline bool TAdventureEnemyStartBattleReq::has_enemyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureEnemyStartBattleReq::set_has_enemyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureEnemyStartBattleReq::clear_has_enemyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureEnemyStartBattleReq::clear_enemyid() {
  enemyid_ = 0u;
  clear_has_enemyid();
}
inline ::google::protobuf::uint32 TAdventureEnemyStartBattleReq::enemyid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemyStartBattleReq.EnemyId)
  return enemyid_;
}
inline void TAdventureEnemyStartBattleReq::set_enemyid(::google::protobuf::uint32 value) {
  set_has_enemyid();
  enemyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemyStartBattleReq.EnemyId)
}

// optional uint32 SquadIndex = 2;
inline bool TAdventureEnemyStartBattleReq::has_squadindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureEnemyStartBattleReq::set_has_squadindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureEnemyStartBattleReq::clear_has_squadindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureEnemyStartBattleReq::clear_squadindex() {
  squadindex_ = 0u;
  clear_has_squadindex();
}
inline ::google::protobuf::uint32 TAdventureEnemyStartBattleReq::squadindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemyStartBattleReq.SquadIndex)
  return squadindex_;
}
inline void TAdventureEnemyStartBattleReq::set_squadindex(::google::protobuf::uint32 value) {
  set_has_squadindex();
  squadindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemyStartBattleReq.SquadIndex)
}

// optional .pb.TBattleCheckParam BattleCheckParam = 3;
inline bool TAdventureEnemyStartBattleReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureEnemyStartBattleReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureEnemyStartBattleReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureEnemyStartBattleReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TAdventureEnemyStartBattleReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemyStartBattleReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TAdventureEnemyStartBattleReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureEnemyStartBattleReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TAdventureEnemyStartBattleReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TAdventureEnemyStartBattleReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureEnemyStartBattleReq.BattleCheckParam)
}

// -------------------------------------------------------------------

// TAdventureEnemyStartBattleRsp

// optional .pb.TBattleArgs BattleArgs = 1;
inline bool TAdventureEnemyStartBattleRsp::has_battleargs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureEnemyStartBattleRsp::set_has_battleargs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureEnemyStartBattleRsp::clear_has_battleargs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureEnemyStartBattleRsp::clear_battleargs() {
  if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  clear_has_battleargs();
}
inline const ::pb::TBattleArgs& TAdventureEnemyStartBattleRsp::battleargs() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemyStartBattleRsp.BattleArgs)
  return battleargs_ != NULL ? *battleargs_ : *default_instance_->battleargs_;
}
inline ::pb::TBattleArgs* TAdventureEnemyStartBattleRsp::mutable_battleargs() {
  set_has_battleargs();
  if (battleargs_ == NULL) battleargs_ = new ::pb::TBattleArgs;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureEnemyStartBattleRsp.BattleArgs)
  return battleargs_;
}
inline ::pb::TBattleArgs* TAdventureEnemyStartBattleRsp::release_battleargs() {
  clear_has_battleargs();
  ::pb::TBattleArgs* temp = battleargs_;
  battleargs_ = NULL;
  return temp;
}
inline void TAdventureEnemyStartBattleRsp::set_allocated_battleargs(::pb::TBattleArgs* battleargs) {
  delete battleargs_;
  battleargs_ = battleargs;
  if (battleargs) {
    set_has_battleargs();
  } else {
    clear_has_battleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureEnemyStartBattleRsp.BattleArgs)
}

// -------------------------------------------------------------------

// TAEMonsterStatus

// optional uint32 PosId = 1;
inline bool TAEMonsterStatus::has_posid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAEMonsterStatus::set_has_posid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAEMonsterStatus::clear_has_posid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAEMonsterStatus::clear_posid() {
  posid_ = 0u;
  clear_has_posid();
}
inline ::google::protobuf::uint32 TAEMonsterStatus::posid() const {
  // @@protoc_insertion_point(field_get:pb.TAEMonsterStatus.PosId)
  return posid_;
}
inline void TAEMonsterStatus::set_posid(::google::protobuf::uint32 value) {
  set_has_posid();
  posid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAEMonsterStatus.PosId)
}

// optional uint64 CurHp = 2;
inline bool TAEMonsterStatus::has_curhp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAEMonsterStatus::set_has_curhp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAEMonsterStatus::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAEMonsterStatus::clear_curhp() {
  curhp_ = GOOGLE_ULONGLONG(0);
  clear_has_curhp();
}
inline ::google::protobuf::uint64 TAEMonsterStatus::curhp() const {
  // @@protoc_insertion_point(field_get:pb.TAEMonsterStatus.CurHp)
  return curhp_;
}
inline void TAEMonsterStatus::set_curhp(::google::protobuf::uint64 value) {
  set_has_curhp();
  curhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TAEMonsterStatus.CurHp)
}

// optional uint64 MaxHp = 3;
inline bool TAEMonsterStatus::has_maxhp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAEMonsterStatus::set_has_maxhp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAEMonsterStatus::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAEMonsterStatus::clear_maxhp() {
  maxhp_ = GOOGLE_ULONGLONG(0);
  clear_has_maxhp();
}
inline ::google::protobuf::uint64 TAEMonsterStatus::maxhp() const {
  // @@protoc_insertion_point(field_get:pb.TAEMonsterStatus.MaxHp)
  return maxhp_;
}
inline void TAEMonsterStatus::set_maxhp(::google::protobuf::uint64 value) {
  set_has_maxhp();
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TAEMonsterStatus.MaxHp)
}

// -------------------------------------------------------------------

// TAEEnemySquad

// optional uint32 SquadIndex = 1;
inline bool TAEEnemySquad::has_squadindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAEEnemySquad::set_has_squadindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAEEnemySquad::clear_has_squadindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAEEnemySquad::clear_squadindex() {
  squadindex_ = 0u;
  clear_has_squadindex();
}
inline ::google::protobuf::uint32 TAEEnemySquad::squadindex() const {
  // @@protoc_insertion_point(field_get:pb.TAEEnemySquad.SquadIndex)
  return squadindex_;
}
inline void TAEEnemySquad::set_squadindex(::google::protobuf::uint32 value) {
  set_has_squadindex();
  squadindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAEEnemySquad.SquadIndex)
}

// repeated .pb.TAEMonsterStatus SquadMonsterArr = 2;
inline int TAEEnemySquad::squadmonsterarr_size() const {
  return squadmonsterarr_.size();
}
inline void TAEEnemySquad::clear_squadmonsterarr() {
  squadmonsterarr_.Clear();
}
inline const ::pb::TAEMonsterStatus& TAEEnemySquad::squadmonsterarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAEEnemySquad.SquadMonsterArr)
  return squadmonsterarr_.Get(index);
}
inline ::pb::TAEMonsterStatus* TAEEnemySquad::mutable_squadmonsterarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAEEnemySquad.SquadMonsterArr)
  return squadmonsterarr_.Mutable(index);
}
inline ::pb::TAEMonsterStatus* TAEEnemySquad::add_squadmonsterarr() {
  // @@protoc_insertion_point(field_add:pb.TAEEnemySquad.SquadMonsterArr)
  return squadmonsterarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAEMonsterStatus >&
TAEEnemySquad::squadmonsterarr() const {
  // @@protoc_insertion_point(field_list:pb.TAEEnemySquad.SquadMonsterArr)
  return squadmonsterarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAEMonsterStatus >*
TAEEnemySquad::mutable_squadmonsterarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAEEnemySquad.SquadMonsterArr)
  return &squadmonsterarr_;
}

// optional uint64 FightForce = 3;
inline bool TAEEnemySquad::has_fightforce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAEEnemySquad::set_has_fightforce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAEEnemySquad::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAEEnemySquad::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TAEEnemySquad::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TAEEnemySquad.FightForce)
  return fightforce_;
}
inline void TAEEnemySquad::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TAEEnemySquad.FightForce)
}

// -------------------------------------------------------------------

// TAdventureEnemyReportBattleReq

// optional uint32 EnemyId = 1;
inline bool TAdventureEnemyReportBattleReq::has_enemyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureEnemyReportBattleReq::set_has_enemyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureEnemyReportBattleReq::clear_has_enemyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureEnemyReportBattleReq::clear_enemyid() {
  enemyid_ = 0u;
  clear_has_enemyid();
}
inline ::google::protobuf::uint32 TAdventureEnemyReportBattleReq::enemyid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemyReportBattleReq.EnemyId)
  return enemyid_;
}
inline void TAdventureEnemyReportBattleReq::set_enemyid(::google::protobuf::uint32 value) {
  set_has_enemyid();
  enemyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemyReportBattleReq.EnemyId)
}

// optional uint32 SquadIndex = 2;
inline bool TAdventureEnemyReportBattleReq::has_squadindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureEnemyReportBattleReq::set_has_squadindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureEnemyReportBattleReq::clear_has_squadindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureEnemyReportBattleReq::clear_squadindex() {
  squadindex_ = 0u;
  clear_has_squadindex();
}
inline ::google::protobuf::uint32 TAdventureEnemyReportBattleReq::squadindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemyReportBattleReq.SquadIndex)
  return squadindex_;
}
inline void TAdventureEnemyReportBattleReq::set_squadindex(::google::protobuf::uint32 value) {
  set_has_squadindex();
  squadindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemyReportBattleReq.SquadIndex)
}

// optional .pb.TBattleResult BattleResult = 3;
inline bool TAdventureEnemyReportBattleReq::has_battleresult() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureEnemyReportBattleReq::set_has_battleresult() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureEnemyReportBattleReq::clear_has_battleresult() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureEnemyReportBattleReq::clear_battleresult() {
  if (battleresult_ != NULL) battleresult_->::pb::TBattleResult::Clear();
  clear_has_battleresult();
}
inline const ::pb::TBattleResult& TAdventureEnemyReportBattleReq::battleresult() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemyReportBattleReq.BattleResult)
  return battleresult_ != NULL ? *battleresult_ : *default_instance_->battleresult_;
}
inline ::pb::TBattleResult* TAdventureEnemyReportBattleReq::mutable_battleresult() {
  set_has_battleresult();
  if (battleresult_ == NULL) battleresult_ = new ::pb::TBattleResult;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureEnemyReportBattleReq.BattleResult)
  return battleresult_;
}
inline ::pb::TBattleResult* TAdventureEnemyReportBattleReq::release_battleresult() {
  clear_has_battleresult();
  ::pb::TBattleResult* temp = battleresult_;
  battleresult_ = NULL;
  return temp;
}
inline void TAdventureEnemyReportBattleReq::set_allocated_battleresult(::pb::TBattleResult* battleresult) {
  delete battleresult_;
  battleresult_ = battleresult;
  if (battleresult) {
    set_has_battleresult();
  } else {
    clear_has_battleresult();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureEnemyReportBattleReq.BattleResult)
}

// -------------------------------------------------------------------

// TAdventureEnemyReportBattleRsp

// repeated .pb.TCommonReward RewardArray = 1;
inline int TAdventureEnemyReportBattleRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TAdventureEnemyReportBattleRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TAdventureEnemyReportBattleRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemyReportBattleRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TAdventureEnemyReportBattleRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureEnemyReportBattleRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TAdventureEnemyReportBattleRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TAdventureEnemyReportBattleRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TAdventureEnemyReportBattleRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureEnemyReportBattleRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TAdventureEnemyReportBattleRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureEnemyReportBattleRsp.RewardArray)
  return &rewardarray_;
}

// optional .pb.TAEEnemySquad EnemySquad = 2;
inline bool TAdventureEnemyReportBattleRsp::has_enemysquad() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureEnemyReportBattleRsp::set_has_enemysquad() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureEnemyReportBattleRsp::clear_has_enemysquad() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureEnemyReportBattleRsp::clear_enemysquad() {
  if (enemysquad_ != NULL) enemysquad_->::pb::TAEEnemySquad::Clear();
  clear_has_enemysquad();
}
inline const ::pb::TAEEnemySquad& TAdventureEnemyReportBattleRsp::enemysquad() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemyReportBattleRsp.EnemySquad)
  return enemysquad_ != NULL ? *enemysquad_ : *default_instance_->enemysquad_;
}
inline ::pb::TAEEnemySquad* TAdventureEnemyReportBattleRsp::mutable_enemysquad() {
  set_has_enemysquad();
  if (enemysquad_ == NULL) enemysquad_ = new ::pb::TAEEnemySquad;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureEnemyReportBattleRsp.EnemySquad)
  return enemysquad_;
}
inline ::pb::TAEEnemySquad* TAdventureEnemyReportBattleRsp::release_enemysquad() {
  clear_has_enemysquad();
  ::pb::TAEEnemySquad* temp = enemysquad_;
  enemysquad_ = NULL;
  return temp;
}
inline void TAdventureEnemyReportBattleRsp::set_allocated_enemysquad(::pb::TAEEnemySquad* enemysquad) {
  delete enemysquad_;
  enemysquad_ = enemysquad;
  if (enemysquad) {
    set_has_enemysquad();
  } else {
    clear_has_enemysquad();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureEnemyReportBattleRsp.EnemySquad)
}

// optional bool EnemyIsDead = 3;
inline bool TAdventureEnemyReportBattleRsp::has_enemyisdead() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureEnemyReportBattleRsp::set_has_enemyisdead() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureEnemyReportBattleRsp::clear_has_enemyisdead() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureEnemyReportBattleRsp::clear_enemyisdead() {
  enemyisdead_ = false;
  clear_has_enemyisdead();
}
inline bool TAdventureEnemyReportBattleRsp::enemyisdead() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemyReportBattleRsp.EnemyIsDead)
  return enemyisdead_;
}
inline void TAdventureEnemyReportBattleRsp::set_enemyisdead(bool value) {
  set_has_enemyisdead();
  enemyisdead_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemyReportBattleRsp.EnemyIsDead)
}

// optional .pb.TAEMySquadStatus MySquad = 4;
inline bool TAdventureEnemyReportBattleRsp::has_mysquad() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventureEnemyReportBattleRsp::set_has_mysquad() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventureEnemyReportBattleRsp::clear_has_mysquad() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventureEnemyReportBattleRsp::clear_mysquad() {
  if (mysquad_ != NULL) mysquad_->::pb::TAEMySquadStatus::Clear();
  clear_has_mysquad();
}
inline const ::pb::TAEMySquadStatus& TAdventureEnemyReportBattleRsp::mysquad() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemyReportBattleRsp.MySquad)
  return mysquad_ != NULL ? *mysquad_ : *default_instance_->mysquad_;
}
inline ::pb::TAEMySquadStatus* TAdventureEnemyReportBattleRsp::mutable_mysquad() {
  set_has_mysquad();
  if (mysquad_ == NULL) mysquad_ = new ::pb::TAEMySquadStatus;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureEnemyReportBattleRsp.MySquad)
  return mysquad_;
}
inline ::pb::TAEMySquadStatus* TAdventureEnemyReportBattleRsp::release_mysquad() {
  clear_has_mysquad();
  ::pb::TAEMySquadStatus* temp = mysquad_;
  mysquad_ = NULL;
  return temp;
}
inline void TAdventureEnemyReportBattleRsp::set_allocated_mysquad(::pb::TAEMySquadStatus* mysquad) {
  delete mysquad_;
  mysquad_ = mysquad;
  if (mysquad) {
    set_has_mysquad();
  } else {
    clear_has_mysquad();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureEnemyReportBattleRsp.MySquad)
}

// -------------------------------------------------------------------

// TNewAdventureEnemyNotify

// repeated uint32 EnemyId = 1;
inline int TNewAdventureEnemyNotify::enemyid_size() const {
  return enemyid_.size();
}
inline void TNewAdventureEnemyNotify::clear_enemyid() {
  enemyid_.Clear();
}
inline ::google::protobuf::uint32 TNewAdventureEnemyNotify::enemyid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TNewAdventureEnemyNotify.EnemyId)
  return enemyid_.Get(index);
}
inline void TNewAdventureEnemyNotify::set_enemyid(int index, ::google::protobuf::uint32 value) {
  enemyid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TNewAdventureEnemyNotify.EnemyId)
}
inline void TNewAdventureEnemyNotify::add_enemyid(::google::protobuf::uint32 value) {
  enemyid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TNewAdventureEnemyNotify.EnemyId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TNewAdventureEnemyNotify::enemyid() const {
  // @@protoc_insertion_point(field_list:pb.TNewAdventureEnemyNotify.EnemyId)
  return enemyid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TNewAdventureEnemyNotify::mutable_enemyid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TNewAdventureEnemyNotify.EnemyId)
  return &enemyid_;
}

// -------------------------------------------------------------------

// TAdventureEnemyCancelBattleReq

// optional uint32 EnemyId = 1;
inline bool TAdventureEnemyCancelBattleReq::has_enemyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureEnemyCancelBattleReq::set_has_enemyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureEnemyCancelBattleReq::clear_has_enemyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureEnemyCancelBattleReq::clear_enemyid() {
  enemyid_ = 0u;
  clear_has_enemyid();
}
inline ::google::protobuf::uint32 TAdventureEnemyCancelBattleReq::enemyid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemyCancelBattleReq.EnemyId)
  return enemyid_;
}
inline void TAdventureEnemyCancelBattleReq::set_enemyid(::google::protobuf::uint32 value) {
  set_has_enemyid();
  enemyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemyCancelBattleReq.EnemyId)
}

// -------------------------------------------------------------------

// TAdventureEnemySingleBattleRet

// optional .pb.TAEEnemySquad EnemySquad = 2;
inline bool TAdventureEnemySingleBattleRet::has_enemysquad() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureEnemySingleBattleRet::set_has_enemysquad() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureEnemySingleBattleRet::clear_has_enemysquad() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureEnemySingleBattleRet::clear_enemysquad() {
  if (enemysquad_ != NULL) enemysquad_->::pb::TAEEnemySquad::Clear();
  clear_has_enemysquad();
}
inline const ::pb::TAEEnemySquad& TAdventureEnemySingleBattleRet::enemysquad() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemySingleBattleRet.EnemySquad)
  return enemysquad_ != NULL ? *enemysquad_ : *default_instance_->enemysquad_;
}
inline ::pb::TAEEnemySquad* TAdventureEnemySingleBattleRet::mutable_enemysquad() {
  set_has_enemysquad();
  if (enemysquad_ == NULL) enemysquad_ = new ::pb::TAEEnemySquad;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureEnemySingleBattleRet.EnemySquad)
  return enemysquad_;
}
inline ::pb::TAEEnemySquad* TAdventureEnemySingleBattleRet::release_enemysquad() {
  clear_has_enemysquad();
  ::pb::TAEEnemySquad* temp = enemysquad_;
  enemysquad_ = NULL;
  return temp;
}
inline void TAdventureEnemySingleBattleRet::set_allocated_enemysquad(::pb::TAEEnemySquad* enemysquad) {
  delete enemysquad_;
  enemysquad_ = enemysquad;
  if (enemysquad) {
    set_has_enemysquad();
  } else {
    clear_has_enemysquad();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureEnemySingleBattleRet.EnemySquad)
}

// optional bool EnemyIsDead = 3;
inline bool TAdventureEnemySingleBattleRet::has_enemyisdead() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureEnemySingleBattleRet::set_has_enemyisdead() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureEnemySingleBattleRet::clear_has_enemyisdead() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureEnemySingleBattleRet::clear_enemyisdead() {
  enemyisdead_ = false;
  clear_has_enemyisdead();
}
inline bool TAdventureEnemySingleBattleRet::enemyisdead() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemySingleBattleRet.EnemyIsDead)
  return enemyisdead_;
}
inline void TAdventureEnemySingleBattleRet::set_enemyisdead(bool value) {
  set_has_enemyisdead();
  enemyisdead_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemySingleBattleRet.EnemyIsDead)
}

// optional .pb.TAEMySquadStatus MySquad = 4;
inline bool TAdventureEnemySingleBattleRet::has_mysquad() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureEnemySingleBattleRet::set_has_mysquad() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureEnemySingleBattleRet::clear_has_mysquad() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureEnemySingleBattleRet::clear_mysquad() {
  if (mysquad_ != NULL) mysquad_->::pb::TAEMySquadStatus::Clear();
  clear_has_mysquad();
}
inline const ::pb::TAEMySquadStatus& TAdventureEnemySingleBattleRet::mysquad() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemySingleBattleRet.MySquad)
  return mysquad_ != NULL ? *mysquad_ : *default_instance_->mysquad_;
}
inline ::pb::TAEMySquadStatus* TAdventureEnemySingleBattleRet::mutable_mysquad() {
  set_has_mysquad();
  if (mysquad_ == NULL) mysquad_ = new ::pb::TAEMySquadStatus;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureEnemySingleBattleRet.MySquad)
  return mysquad_;
}
inline ::pb::TAEMySquadStatus* TAdventureEnemySingleBattleRet::release_mysquad() {
  clear_has_mysquad();
  ::pb::TAEMySquadStatus* temp = mysquad_;
  mysquad_ = NULL;
  return temp;
}
inline void TAdventureEnemySingleBattleRet::set_allocated_mysquad(::pb::TAEMySquadStatus* mysquad) {
  delete mysquad_;
  mysquad_ = mysquad;
  if (mysquad) {
    set_has_mysquad();
  } else {
    clear_has_mysquad();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureEnemySingleBattleRet.MySquad)
}

// -------------------------------------------------------------------

// TAdventureEnemySkipBattleReq

// optional uint32 EnemyId = 1;
inline bool TAdventureEnemySkipBattleReq::has_enemyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureEnemySkipBattleReq::set_has_enemyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureEnemySkipBattleReq::clear_has_enemyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureEnemySkipBattleReq::clear_enemyid() {
  enemyid_ = 0u;
  clear_has_enemyid();
}
inline ::google::protobuf::uint32 TAdventureEnemySkipBattleReq::enemyid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemySkipBattleReq.EnemyId)
  return enemyid_;
}
inline void TAdventureEnemySkipBattleReq::set_enemyid(::google::protobuf::uint32 value) {
  set_has_enemyid();
  enemyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemySkipBattleReq.EnemyId)
}

// -------------------------------------------------------------------

// TAdventureEnemySkipBattleRsp

// repeated .pb.TCommonReward RewardArray = 1;
inline int TAdventureEnemySkipBattleRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TAdventureEnemySkipBattleRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TAdventureEnemySkipBattleRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemySkipBattleRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TAdventureEnemySkipBattleRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureEnemySkipBattleRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TAdventureEnemySkipBattleRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TAdventureEnemySkipBattleRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TAdventureEnemySkipBattleRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureEnemySkipBattleRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TAdventureEnemySkipBattleRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureEnemySkipBattleRsp.RewardArray)
  return &rewardarray_;
}

// repeated .pb.TAdventureEnemySingleBattleRet ArrBattleRet = 2;
inline int TAdventureEnemySkipBattleRsp::arrbattleret_size() const {
  return arrbattleret_.size();
}
inline void TAdventureEnemySkipBattleRsp::clear_arrbattleret() {
  arrbattleret_.Clear();
}
inline const ::pb::TAdventureEnemySingleBattleRet& TAdventureEnemySkipBattleRsp::arrbattleret(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemySkipBattleRsp.ArrBattleRet)
  return arrbattleret_.Get(index);
}
inline ::pb::TAdventureEnemySingleBattleRet* TAdventureEnemySkipBattleRsp::mutable_arrbattleret(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureEnemySkipBattleRsp.ArrBattleRet)
  return arrbattleret_.Mutable(index);
}
inline ::pb::TAdventureEnemySingleBattleRet* TAdventureEnemySkipBattleRsp::add_arrbattleret() {
  // @@protoc_insertion_point(field_add:pb.TAdventureEnemySkipBattleRsp.ArrBattleRet)
  return arrbattleret_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureEnemySingleBattleRet >&
TAdventureEnemySkipBattleRsp::arrbattleret() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureEnemySkipBattleRsp.ArrBattleRet)
  return arrbattleret_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureEnemySingleBattleRet >*
TAdventureEnemySkipBattleRsp::mutable_arrbattleret() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureEnemySkipBattleRsp.ArrBattleRet)
  return &arrbattleret_;
}

// -------------------------------------------------------------------

// TAdventureEnemyGetAcheivementInfoRsp

// optional uint32 DefeatEnemyNum = 1;
inline bool TAdventureEnemyGetAcheivementInfoRsp::has_defeatenemynum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureEnemyGetAcheivementInfoRsp::set_has_defeatenemynum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureEnemyGetAcheivementInfoRsp::clear_has_defeatenemynum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureEnemyGetAcheivementInfoRsp::clear_defeatenemynum() {
  defeatenemynum_ = 0u;
  clear_has_defeatenemynum();
}
inline ::google::protobuf::uint32 TAdventureEnemyGetAcheivementInfoRsp::defeatenemynum() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemyGetAcheivementInfoRsp.DefeatEnemyNum)
  return defeatenemynum_;
}
inline void TAdventureEnemyGetAcheivementInfoRsp::set_defeatenemynum(::google::protobuf::uint32 value) {
  set_has_defeatenemynum();
  defeatenemynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemyGetAcheivementInfoRsp.DefeatEnemyNum)
}

// repeated uint32 RewardIdArr = 2;
inline int TAdventureEnemyGetAcheivementInfoRsp::rewardidarr_size() const {
  return rewardidarr_.size();
}
inline void TAdventureEnemyGetAcheivementInfoRsp::clear_rewardidarr() {
  rewardidarr_.Clear();
}
inline ::google::protobuf::uint32 TAdventureEnemyGetAcheivementInfoRsp::rewardidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemyGetAcheivementInfoRsp.RewardIdArr)
  return rewardidarr_.Get(index);
}
inline void TAdventureEnemyGetAcheivementInfoRsp::set_rewardidarr(int index, ::google::protobuf::uint32 value) {
  rewardidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemyGetAcheivementInfoRsp.RewardIdArr)
}
inline void TAdventureEnemyGetAcheivementInfoRsp::add_rewardidarr(::google::protobuf::uint32 value) {
  rewardidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TAdventureEnemyGetAcheivementInfoRsp.RewardIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TAdventureEnemyGetAcheivementInfoRsp::rewardidarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureEnemyGetAcheivementInfoRsp.RewardIdArr)
  return rewardidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TAdventureEnemyGetAcheivementInfoRsp::mutable_rewardidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureEnemyGetAcheivementInfoRsp.RewardIdArr)
  return &rewardidarr_;
}

// -------------------------------------------------------------------

// TAdventureEnemyReceiveAchievementRewardReq

// optional uint32 RewardId = 1;
inline bool TAdventureEnemyReceiveAchievementRewardReq::has_rewardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureEnemyReceiveAchievementRewardReq::set_has_rewardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureEnemyReceiveAchievementRewardReq::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureEnemyReceiveAchievementRewardReq::clear_rewardid() {
  rewardid_ = 0u;
  clear_has_rewardid();
}
inline ::google::protobuf::uint32 TAdventureEnemyReceiveAchievementRewardReq::rewardid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemyReceiveAchievementRewardReq.RewardId)
  return rewardid_;
}
inline void TAdventureEnemyReceiveAchievementRewardReq::set_rewardid(::google::protobuf::uint32 value) {
  set_has_rewardid();
  rewardid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemyReceiveAchievementRewardReq.RewardId)
}

// -------------------------------------------------------------------

// TAdventureEnemySetPresetSquadReq

// optional uint32 SquadIndex = 1;
inline bool TAdventureEnemySetPresetSquadReq::has_squadindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureEnemySetPresetSquadReq::set_has_squadindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureEnemySetPresetSquadReq::clear_has_squadindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureEnemySetPresetSquadReq::clear_squadindex() {
  squadindex_ = 0u;
  clear_has_squadindex();
}
inline ::google::protobuf::uint32 TAdventureEnemySetPresetSquadReq::squadindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemySetPresetSquadReq.SquadIndex)
  return squadindex_;
}
inline void TAdventureEnemySetPresetSquadReq::set_squadindex(::google::protobuf::uint32 value) {
  set_has_squadindex();
  squadindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemySetPresetSquadReq.SquadIndex)
}

// repeated .pb.TAESquadHeroInfo SquadHeroArr = 2;
inline int TAdventureEnemySetPresetSquadReq::squadheroarr_size() const {
  return squadheroarr_.size();
}
inline void TAdventureEnemySetPresetSquadReq::clear_squadheroarr() {
  squadheroarr_.Clear();
}
inline const ::pb::TAESquadHeroInfo& TAdventureEnemySetPresetSquadReq::squadheroarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemySetPresetSquadReq.SquadHeroArr)
  return squadheroarr_.Get(index);
}
inline ::pb::TAESquadHeroInfo* TAdventureEnemySetPresetSquadReq::mutable_squadheroarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureEnemySetPresetSquadReq.SquadHeroArr)
  return squadheroarr_.Mutable(index);
}
inline ::pb::TAESquadHeroInfo* TAdventureEnemySetPresetSquadReq::add_squadheroarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureEnemySetPresetSquadReq.SquadHeroArr)
  return squadheroarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAESquadHeroInfo >&
TAdventureEnemySetPresetSquadReq::squadheroarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureEnemySetPresetSquadReq.SquadHeroArr)
  return squadheroarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAESquadHeroInfo >*
TAdventureEnemySetPresetSquadReq::mutable_squadheroarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureEnemySetPresetSquadReq.SquadHeroArr)
  return &squadheroarr_;
}

// -------------------------------------------------------------------

// TAdventureEnemySwitchPresetSquadReq

// optional uint32 SquadIndex = 1;
inline bool TAdventureEnemySwitchPresetSquadReq::has_squadindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureEnemySwitchPresetSquadReq::set_has_squadindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureEnemySwitchPresetSquadReq::clear_has_squadindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureEnemySwitchPresetSquadReq::clear_squadindex() {
  squadindex_ = 0u;
  clear_has_squadindex();
}
inline ::google::protobuf::uint32 TAdventureEnemySwitchPresetSquadReq::squadindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemySwitchPresetSquadReq.SquadIndex)
  return squadindex_;
}
inline void TAdventureEnemySwitchPresetSquadReq::set_squadindex(::google::protobuf::uint32 value) {
  set_has_squadindex();
  squadindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemySwitchPresetSquadReq.SquadIndex)
}

// optional uint32 SwitchToSquadIndex = 2;
inline bool TAdventureEnemySwitchPresetSquadReq::has_switchtosquadindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureEnemySwitchPresetSquadReq::set_has_switchtosquadindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureEnemySwitchPresetSquadReq::clear_has_switchtosquadindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureEnemySwitchPresetSquadReq::clear_switchtosquadindex() {
  switchtosquadindex_ = 0u;
  clear_has_switchtosquadindex();
}
inline ::google::protobuf::uint32 TAdventureEnemySwitchPresetSquadReq::switchtosquadindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemySwitchPresetSquadReq.SwitchToSquadIndex)
  return switchtosquadindex_;
}
inline void TAdventureEnemySwitchPresetSquadReq::set_switchtosquadindex(::google::protobuf::uint32 value) {
  set_has_switchtosquadindex();
  switchtosquadindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemySwitchPresetSquadReq.SwitchToSquadIndex)
}

// -------------------------------------------------------------------

// TAdventureEnemyUsePresetSquadReq

// optional uint32 EnemyId = 1;
inline bool TAdventureEnemyUsePresetSquadReq::has_enemyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureEnemyUsePresetSquadReq::set_has_enemyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureEnemyUsePresetSquadReq::clear_has_enemyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureEnemyUsePresetSquadReq::clear_enemyid() {
  enemyid_ = 0u;
  clear_has_enemyid();
}
inline ::google::protobuf::uint32 TAdventureEnemyUsePresetSquadReq::enemyid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEnemyUsePresetSquadReq.EnemyId)
  return enemyid_;
}
inline void TAdventureEnemyUsePresetSquadReq::set_enemyid(::google::protobuf::uint32 value) {
  set_has_enemyid();
  enemyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEnemyUsePresetSquadReq.EnemyId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::TAERebornHeroCostType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::TAERebornHeroCostType>() {
  return ::pb::TAERebornHeroCostType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fAdventureEnemy_2eproto__INCLUDED
