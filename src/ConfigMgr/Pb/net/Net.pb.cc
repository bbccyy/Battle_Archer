// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Net.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Net.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRetInitQueueInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRetInitQueueInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLoginQueueNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLoginQueueNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBeKickNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBeKickNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TEmptyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEmptyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TEmptyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEmptyRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fNet_2eproto() {
  protobuf_AddDesc_net_2fNet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Net.proto");
  GOOGLE_CHECK(file != NULL);
  TRequest_descriptor_ = file->message_type(0);
  static const int TRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRequest, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRequest, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRequest, callbackhandler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRequest, token_),
  };
  TRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRequest_descriptor_,
      TRequest::default_instance_,
      TRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRequest));
  TResponse_descriptor_ = file->message_type(1);
  static const int TResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TResponse, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TResponse, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TResponse, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TResponse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TResponse, callbackhandler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TResponse, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TResponse, token_),
  };
  TResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TResponse_descriptor_,
      TResponse::default_instance_,
      TResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TResponse));
  TRetInitQueueInfo_descriptor_ = file->message_type(2);
  static const int TRetInitQueueInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRetInitQueueInfo, queuepos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRetInitQueueInfo, queuelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRetInitQueueInfo, selfpos_),
  };
  TRetInitQueueInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRetInitQueueInfo_descriptor_,
      TRetInitQueueInfo::default_instance_,
      TRetInitQueueInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRetInitQueueInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRetInitQueueInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRetInitQueueInfo));
  TLoginQueueNotify_descriptor_ = file->message_type(3);
  static const int TLoginQueueNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLoginQueueNotify, queuepos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLoginQueueNotify, queuelen_),
  };
  TLoginQueueNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLoginQueueNotify_descriptor_,
      TLoginQueueNotify::default_instance_,
      TLoginQueueNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLoginQueueNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLoginQueueNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLoginQueueNotify));
  TBeKickNotify_descriptor_ = file->message_type(4);
  static const int TBeKickNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeKickNotify, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeKickNotify, kickno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeKickNotify, version_),
  };
  TBeKickNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBeKickNotify_descriptor_,
      TBeKickNotify::default_instance_,
      TBeKickNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeKickNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBeKickNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBeKickNotify));
  TEmptyReq_descriptor_ = file->message_type(5);
  static const int TEmptyReq_offsets_[1] = {
  };
  TEmptyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEmptyReq_descriptor_,
      TEmptyReq::default_instance_,
      TEmptyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmptyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmptyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEmptyReq));
  TEmptyRsp_descriptor_ = file->message_type(6);
  static const int TEmptyRsp_offsets_[1] = {
  };
  TEmptyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEmptyRsp_descriptor_,
      TEmptyRsp::default_instance_,
      TEmptyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmptyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmptyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEmptyRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fNet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRequest_descriptor_, &TRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TResponse_descriptor_, &TResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRetInitQueueInfo_descriptor_, &TRetInitQueueInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLoginQueueNotify_descriptor_, &TLoginQueueNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBeKickNotify_descriptor_, &TBeKickNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEmptyReq_descriptor_, &TEmptyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEmptyRsp_descriptor_, &TEmptyRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fNet_2eproto() {
  delete TRequest::default_instance_;
  delete TRequest_reflection_;
  delete TResponse::default_instance_;
  delete TResponse_reflection_;
  delete TRetInitQueueInfo::default_instance_;
  delete TRetInitQueueInfo_reflection_;
  delete TLoginQueueNotify::default_instance_;
  delete TLoginQueueNotify_reflection_;
  delete TBeKickNotify::default_instance_;
  delete TBeKickNotify_reflection_;
  delete TEmptyReq::default_instance_;
  delete TEmptyReq_reflection_;
  delete TEmptyRsp::default_instance_;
  delete TEmptyRsp_reflection_;
}

void protobuf_AddDesc_net_2fNet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rnet/Net.proto\022\002pb\"P\n\010TRequest\022\016\n\006Metho"
    "d\030\001 \002(\t\022\014\n\004Args\030\002 \002(\014\022\027\n\017CallbackHandler"
    "\030\003 \001(\r\022\r\n\005Token\030\004 \001(\t\"{\n\tTResponse\022\013\n\003Er"
    "r\030\001 \002(\005\022\016\n\006ErrMsg\030\002 \001(\t\022\016\n\006Method\030\003 \002(\t\022"
    "\013\n\003Ret\030\004 \001(\014\022\027\n\017CallbackHandler\030\005 \001(\r\022\014\n"
    "\004Time\030\006 \001(\r\022\r\n\005Token\030\007 \001(\t\"H\n\021TRetInitQu"
    "eueInfo\022\020\n\010QueuePos\030\001 \001(\005\022\020\n\010QueueLen\030\002 "
    "\001(\005\022\017\n\007SelfPos\030\003 \001(\005\"7\n\021TLoginQueueNotif"
    "y\022\020\n\010QueuePos\030\001 \001(\005\022\020\n\010QueueLen\030\002 \001(\005\">\n"
    "\rTBeKickNotify\022\014\n\004info\030\001 \001(\t\022\016\n\006kickNo\030\002"
    " \001(\005\022\017\n\007version\030\003 \001(\t\"\013\n\tTEmptyReq\"\013\n\tTE"
    "mptyRsp", 447);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Net.proto", &protobuf_RegisterTypes);
  TRequest::default_instance_ = new TRequest();
  TResponse::default_instance_ = new TResponse();
  TRetInitQueueInfo::default_instance_ = new TRetInitQueueInfo();
  TLoginQueueNotify::default_instance_ = new TLoginQueueNotify();
  TBeKickNotify::default_instance_ = new TBeKickNotify();
  TEmptyReq::default_instance_ = new TEmptyReq();
  TEmptyRsp::default_instance_ = new TEmptyRsp();
  TRequest::default_instance_->InitAsDefaultInstance();
  TResponse::default_instance_->InitAsDefaultInstance();
  TRetInitQueueInfo::default_instance_->InitAsDefaultInstance();
  TLoginQueueNotify::default_instance_->InitAsDefaultInstance();
  TBeKickNotify::default_instance_->InitAsDefaultInstance();
  TEmptyReq::default_instance_->InitAsDefaultInstance();
  TEmptyRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fNet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fNet_2eproto {
  StaticDescriptorInitializer_net_2fNet_2eproto() {
    protobuf_AddDesc_net_2fNet_2eproto();
  }
} static_descriptor_initializer_net_2fNet_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TRequest::kMethodFieldNumber;
const int TRequest::kArgsFieldNumber;
const int TRequest::kCallbackHandlerFieldNumber;
const int TRequest::kTokenFieldNumber;
#endif  // !_MSC_VER

TRequest::TRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRequest)
}

void TRequest::InitAsDefaultInstance() {
}

TRequest::TRequest(const TRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRequest)
}

void TRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  args_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callbackhandler_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRequest::~TRequest() {
  // @@protoc_insertion_point(destructor:pb.TRequest)
  SharedDtor();
}

void TRequest::SharedDtor() {
  if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete method_;
  }
  if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete args_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void TRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRequest_descriptor_;
}

const TRequest& TRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fNet_2eproto();
  return *default_instance_;
}

TRequest* TRequest::default_instance_ = NULL;

TRequest* TRequest::New() const {
  return new TRequest;
}

void TRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_method()) {
      if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        method_->clear();
      }
    }
    if (has_args()) {
      if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        args_->clear();
      }
    }
    callbackhandler_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Method = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "method");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Args;
        break;
      }

      // required bytes Args = 2;
      case 2: {
        if (tag == 18) {
         parse_Args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_args()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CallbackHandler;
        break;
      }

      // optional uint32 CallbackHandler = 3;
      case 3: {
        if (tag == 24) {
         parse_CallbackHandler:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &callbackhandler_)));
          set_has_callbackhandler();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Token;
        break;
      }

      // optional string Token = 4;
      case 4: {
        if (tag == 34) {
         parse_Token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRequest)
  return false;
#undef DO_
}

void TRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRequest)
  // required string Method = 1;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->method(), output);
  }

  // required bytes Args = 2;
  if (has_args()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->args(), output);
  }

  // optional uint32 CallbackHandler = 3;
  if (has_callbackhandler()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->callbackhandler(), output);
  }

  // optional string Token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRequest)
}

::google::protobuf::uint8* TRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRequest)
  // required string Method = 1;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->method(), target);
  }

  // required bytes Args = 2;
  if (has_args()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->args(), target);
  }

  // optional uint32 CallbackHandler = 3;
  if (has_callbackhandler()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->callbackhandler(), target);
  }

  // optional string Token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRequest)
  return target;
}

int TRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Method = 1;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method());
    }

    // required bytes Args = 2;
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->args());
    }

    // optional uint32 CallbackHandler = 3;
    if (has_callbackhandler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->callbackhandler());
    }

    // optional string Token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRequest::MergeFrom(const TRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_args()) {
      set_args(from.args());
    }
    if (from.has_callbackhandler()) {
      set_callbackhandler(from.callbackhandler());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRequest::CopyFrom(const TRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TRequest::Swap(TRequest* other) {
  if (other != this) {
    std::swap(method_, other->method_);
    std::swap(args_, other->args_);
    std::swap(callbackhandler_, other->callbackhandler_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRequest_descriptor_;
  metadata.reflection = TRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TResponse::kErrFieldNumber;
const int TResponse::kErrMsgFieldNumber;
const int TResponse::kMethodFieldNumber;
const int TResponse::kRetFieldNumber;
const int TResponse::kCallbackHandlerFieldNumber;
const int TResponse::kTimeFieldNumber;
const int TResponse::kTokenFieldNumber;
#endif  // !_MSC_VER

TResponse::TResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TResponse)
}

void TResponse::InitAsDefaultInstance() {
}

TResponse::TResponse(const TResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TResponse)
}

void TResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  err_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callbackhandler_ = 0u;
  time_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TResponse::~TResponse() {
  // @@protoc_insertion_point(destructor:pb.TResponse)
  SharedDtor();
}

void TResponse::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete method_;
  }
  if (ret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ret_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void TResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TResponse_descriptor_;
}

const TResponse& TResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fNet_2eproto();
  return *default_instance_;
}

TResponse* TResponse::default_instance_ = NULL;

TResponse* TResponse::New() const {
  return new TResponse;
}

void TResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(err_, callbackhandler_);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    if (has_method()) {
      if (method_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        method_->clear();
      }
    }
    if (has_ret()) {
      if (ret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ret_->clear();
      }
    }
    time_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Err = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ErrMsg;
        break;
      }

      // optional string ErrMsg = 2;
      case 2: {
        if (tag == 18) {
         parse_ErrMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Method;
        break;
      }

      // required string Method = 3;
      case 3: {
        if (tag == 26) {
         parse_Method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "method");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Ret;
        break;
      }

      // optional bytes Ret = 4;
      case 4: {
        if (tag == 34) {
         parse_Ret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CallbackHandler;
        break;
      }

      // optional uint32 CallbackHandler = 5;
      case 5: {
        if (tag == 40) {
         parse_CallbackHandler:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &callbackhandler_)));
          set_has_callbackhandler();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Time;
        break;
      }

      // optional uint32 Time = 6;
      case 6: {
        if (tag == 48) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_Token;
        break;
      }

      // optional string Token = 7;
      case 7: {
        if (tag == 58) {
         parse_Token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TResponse)
  return false;
#undef DO_
}

void TResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TResponse)
  // required int32 Err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  // optional string ErrMsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errmsg(), output);
  }

  // required string Method = 3;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->method(), output);
  }

  // optional bytes Ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->ret(), output);
  }

  // optional uint32 CallbackHandler = 5;
  if (has_callbackhandler()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->callbackhandler(), output);
  }

  // optional uint32 Time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional string Token = 7;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TResponse)
}

::google::protobuf::uint8* TResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TResponse)
  // required int32 Err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  // optional string ErrMsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }

  // required string Method = 3;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->method(), target);
  }

  // optional bytes Ret = 4;
  if (has_ret()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->ret(), target);
  }

  // optional uint32 CallbackHandler = 5;
  if (has_callbackhandler()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->callbackhandler(), target);
  }

  // optional uint32 Time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional string Token = 7;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TResponse)
  return target;
}

int TResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

    // optional string ErrMsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // required string Method = 3;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method());
    }

    // optional bytes Ret = 4;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ret());
    }

    // optional uint32 CallbackHandler = 5;
    if (has_callbackhandler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->callbackhandler());
    }

    // optional uint32 Time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string Token = 7;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TResponse::MergeFrom(const TResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_callbackhandler()) {
      set_callbackhandler(from.callbackhandler());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TResponse::CopyFrom(const TResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void TResponse::Swap(TResponse* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(method_, other->method_);
    std::swap(ret_, other->ret_);
    std::swap(callbackhandler_, other->callbackhandler_);
    std::swap(time_, other->time_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TResponse_descriptor_;
  metadata.reflection = TResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRetInitQueueInfo::kQueuePosFieldNumber;
const int TRetInitQueueInfo::kQueueLenFieldNumber;
const int TRetInitQueueInfo::kSelfPosFieldNumber;
#endif  // !_MSC_VER

TRetInitQueueInfo::TRetInitQueueInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRetInitQueueInfo)
}

void TRetInitQueueInfo::InitAsDefaultInstance() {
}

TRetInitQueueInfo::TRetInitQueueInfo(const TRetInitQueueInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRetInitQueueInfo)
}

void TRetInitQueueInfo::SharedCtor() {
  _cached_size_ = 0;
  queuepos_ = 0;
  queuelen_ = 0;
  selfpos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRetInitQueueInfo::~TRetInitQueueInfo() {
  // @@protoc_insertion_point(destructor:pb.TRetInitQueueInfo)
  SharedDtor();
}

void TRetInitQueueInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRetInitQueueInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRetInitQueueInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRetInitQueueInfo_descriptor_;
}

const TRetInitQueueInfo& TRetInitQueueInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fNet_2eproto();
  return *default_instance_;
}

TRetInitQueueInfo* TRetInitQueueInfo::default_instance_ = NULL;

TRetInitQueueInfo* TRetInitQueueInfo::New() const {
  return new TRetInitQueueInfo;
}

void TRetInitQueueInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TRetInitQueueInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(queuepos_, selfpos_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRetInitQueueInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRetInitQueueInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 QueuePos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queuepos_)));
          set_has_queuepos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_QueueLen;
        break;
      }

      // optional int32 QueueLen = 2;
      case 2: {
        if (tag == 16) {
         parse_QueueLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queuelen_)));
          set_has_queuelen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SelfPos;
        break;
      }

      // optional int32 SelfPos = 3;
      case 3: {
        if (tag == 24) {
         parse_SelfPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfpos_)));
          set_has_selfpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRetInitQueueInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRetInitQueueInfo)
  return false;
#undef DO_
}

void TRetInitQueueInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRetInitQueueInfo)
  // optional int32 QueuePos = 1;
  if (has_queuepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->queuepos(), output);
  }

  // optional int32 QueueLen = 2;
  if (has_queuelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->queuelen(), output);
  }

  // optional int32 SelfPos = 3;
  if (has_selfpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->selfpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRetInitQueueInfo)
}

::google::protobuf::uint8* TRetInitQueueInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRetInitQueueInfo)
  // optional int32 QueuePos = 1;
  if (has_queuepos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->queuepos(), target);
  }

  // optional int32 QueueLen = 2;
  if (has_queuelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->queuelen(), target);
  }

  // optional int32 SelfPos = 3;
  if (has_selfpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->selfpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRetInitQueueInfo)
  return target;
}

int TRetInitQueueInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 QueuePos = 1;
    if (has_queuepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queuepos());
    }

    // optional int32 QueueLen = 2;
    if (has_queuelen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queuelen());
    }

    // optional int32 SelfPos = 3;
    if (has_selfpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRetInitQueueInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRetInitQueueInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRetInitQueueInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRetInitQueueInfo::MergeFrom(const TRetInitQueueInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queuepos()) {
      set_queuepos(from.queuepos());
    }
    if (from.has_queuelen()) {
      set_queuelen(from.queuelen());
    }
    if (from.has_selfpos()) {
      set_selfpos(from.selfpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRetInitQueueInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRetInitQueueInfo::CopyFrom(const TRetInitQueueInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRetInitQueueInfo::IsInitialized() const {

  return true;
}

void TRetInitQueueInfo::Swap(TRetInitQueueInfo* other) {
  if (other != this) {
    std::swap(queuepos_, other->queuepos_);
    std::swap(queuelen_, other->queuelen_);
    std::swap(selfpos_, other->selfpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRetInitQueueInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRetInitQueueInfo_descriptor_;
  metadata.reflection = TRetInitQueueInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLoginQueueNotify::kQueuePosFieldNumber;
const int TLoginQueueNotify::kQueueLenFieldNumber;
#endif  // !_MSC_VER

TLoginQueueNotify::TLoginQueueNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLoginQueueNotify)
}

void TLoginQueueNotify::InitAsDefaultInstance() {
}

TLoginQueueNotify::TLoginQueueNotify(const TLoginQueueNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLoginQueueNotify)
}

void TLoginQueueNotify::SharedCtor() {
  _cached_size_ = 0;
  queuepos_ = 0;
  queuelen_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLoginQueueNotify::~TLoginQueueNotify() {
  // @@protoc_insertion_point(destructor:pb.TLoginQueueNotify)
  SharedDtor();
}

void TLoginQueueNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLoginQueueNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLoginQueueNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLoginQueueNotify_descriptor_;
}

const TLoginQueueNotify& TLoginQueueNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fNet_2eproto();
  return *default_instance_;
}

TLoginQueueNotify* TLoginQueueNotify::default_instance_ = NULL;

TLoginQueueNotify* TLoginQueueNotify::New() const {
  return new TLoginQueueNotify;
}

void TLoginQueueNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLoginQueueNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(queuepos_, queuelen_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLoginQueueNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLoginQueueNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 QueuePos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queuepos_)));
          set_has_queuepos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_QueueLen;
        break;
      }

      // optional int32 QueueLen = 2;
      case 2: {
        if (tag == 16) {
         parse_QueueLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &queuelen_)));
          set_has_queuelen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLoginQueueNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLoginQueueNotify)
  return false;
#undef DO_
}

void TLoginQueueNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLoginQueueNotify)
  // optional int32 QueuePos = 1;
  if (has_queuepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->queuepos(), output);
  }

  // optional int32 QueueLen = 2;
  if (has_queuelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->queuelen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLoginQueueNotify)
}

::google::protobuf::uint8* TLoginQueueNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLoginQueueNotify)
  // optional int32 QueuePos = 1;
  if (has_queuepos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->queuepos(), target);
  }

  // optional int32 QueueLen = 2;
  if (has_queuelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->queuelen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLoginQueueNotify)
  return target;
}

int TLoginQueueNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 QueuePos = 1;
    if (has_queuepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queuepos());
    }

    // optional int32 QueueLen = 2;
    if (has_queuelen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->queuelen());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLoginQueueNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLoginQueueNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLoginQueueNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLoginQueueNotify::MergeFrom(const TLoginQueueNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queuepos()) {
      set_queuepos(from.queuepos());
    }
    if (from.has_queuelen()) {
      set_queuelen(from.queuelen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLoginQueueNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLoginQueueNotify::CopyFrom(const TLoginQueueNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLoginQueueNotify::IsInitialized() const {

  return true;
}

void TLoginQueueNotify::Swap(TLoginQueueNotify* other) {
  if (other != this) {
    std::swap(queuepos_, other->queuepos_);
    std::swap(queuelen_, other->queuelen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLoginQueueNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLoginQueueNotify_descriptor_;
  metadata.reflection = TLoginQueueNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBeKickNotify::kInfoFieldNumber;
const int TBeKickNotify::kKickNoFieldNumber;
const int TBeKickNotify::kVersionFieldNumber;
#endif  // !_MSC_VER

TBeKickNotify::TBeKickNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBeKickNotify)
}

void TBeKickNotify::InitAsDefaultInstance() {
}

TBeKickNotify::TBeKickNotify(const TBeKickNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBeKickNotify)
}

void TBeKickNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kickno_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBeKickNotify::~TBeKickNotify() {
  // @@protoc_insertion_point(destructor:pb.TBeKickNotify)
  SharedDtor();
}

void TBeKickNotify::SharedDtor() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void TBeKickNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBeKickNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBeKickNotify_descriptor_;
}

const TBeKickNotify& TBeKickNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fNet_2eproto();
  return *default_instance_;
}

TBeKickNotify* TBeKickNotify::default_instance_ = NULL;

TBeKickNotify* TBeKickNotify::New() const {
  return new TBeKickNotify;
}

void TBeKickNotify::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        info_->clear();
      }
    }
    kickno_ = 0;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBeKickNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBeKickNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_kickNo;
        break;
      }

      // optional int32 kickNo = 2;
      case 2: {
        if (tag == 16) {
         parse_kickNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kickno_)));
          set_has_kickno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // optional string version = 3;
      case 3: {
        if (tag == 26) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBeKickNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBeKickNotify)
  return false;
#undef DO_
}

void TBeKickNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBeKickNotify)
  // optional string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->info(), output);
  }

  // optional int32 kickNo = 2;
  if (has_kickno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->kickno(), output);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBeKickNotify)
}

::google::protobuf::uint8* TBeKickNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBeKickNotify)
  // optional string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info(), target);
  }

  // optional int32 kickNo = 2;
  if (has_kickno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->kickno(), target);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBeKickNotify)
  return target;
}

int TBeKickNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

    // optional int32 kickNo = 2;
    if (has_kickno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kickno());
    }

    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBeKickNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBeKickNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBeKickNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBeKickNotify::MergeFrom(const TBeKickNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_kickno()) {
      set_kickno(from.kickno());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBeKickNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBeKickNotify::CopyFrom(const TBeKickNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBeKickNotify::IsInitialized() const {

  return true;
}

void TBeKickNotify::Swap(TBeKickNotify* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(kickno_, other->kickno_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBeKickNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBeKickNotify_descriptor_;
  metadata.reflection = TBeKickNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TEmptyReq::TEmptyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TEmptyReq)
}

void TEmptyReq::InitAsDefaultInstance() {
}

TEmptyReq::TEmptyReq(const TEmptyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TEmptyReq)
}

void TEmptyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEmptyReq::~TEmptyReq() {
  // @@protoc_insertion_point(destructor:pb.TEmptyReq)
  SharedDtor();
}

void TEmptyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TEmptyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEmptyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEmptyReq_descriptor_;
}

const TEmptyReq& TEmptyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fNet_2eproto();
  return *default_instance_;
}

TEmptyReq* TEmptyReq::default_instance_ = NULL;

TEmptyReq* TEmptyReq::New() const {
  return new TEmptyReq;
}

void TEmptyReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEmptyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TEmptyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TEmptyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TEmptyReq)
  return false;
#undef DO_
}

void TEmptyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TEmptyReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TEmptyReq)
}

::google::protobuf::uint8* TEmptyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TEmptyReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TEmptyReq)
  return target;
}

int TEmptyReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEmptyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEmptyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEmptyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEmptyReq::MergeFrom(const TEmptyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEmptyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEmptyReq::CopyFrom(const TEmptyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEmptyReq::IsInitialized() const {

  return true;
}

void TEmptyReq::Swap(TEmptyReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEmptyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEmptyReq_descriptor_;
  metadata.reflection = TEmptyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TEmptyRsp::TEmptyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TEmptyRsp)
}

void TEmptyRsp::InitAsDefaultInstance() {
}

TEmptyRsp::TEmptyRsp(const TEmptyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TEmptyRsp)
}

void TEmptyRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEmptyRsp::~TEmptyRsp() {
  // @@protoc_insertion_point(destructor:pb.TEmptyRsp)
  SharedDtor();
}

void TEmptyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TEmptyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEmptyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEmptyRsp_descriptor_;
}

const TEmptyRsp& TEmptyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fNet_2eproto();
  return *default_instance_;
}

TEmptyRsp* TEmptyRsp::default_instance_ = NULL;

TEmptyRsp* TEmptyRsp::New() const {
  return new TEmptyRsp;
}

void TEmptyRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEmptyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TEmptyRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TEmptyRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TEmptyRsp)
  return false;
#undef DO_
}

void TEmptyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TEmptyRsp)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TEmptyRsp)
}

::google::protobuf::uint8* TEmptyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TEmptyRsp)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TEmptyRsp)
  return target;
}

int TEmptyRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEmptyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEmptyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEmptyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEmptyRsp::MergeFrom(const TEmptyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEmptyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEmptyRsp::CopyFrom(const TEmptyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEmptyRsp::IsInitialized() const {

  return true;
}

void TEmptyRsp::Swap(TEmptyRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEmptyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEmptyRsp_descriptor_;
  metadata.reflection = TEmptyRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
