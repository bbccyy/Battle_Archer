// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Adventure.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Adventure.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TAdventureGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureActivityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureActivityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureGetListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureGetListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureGetListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureGetListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureRefreshListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureRefreshListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureStartMapReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureStartMapReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureEnterMapReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureEnterMapReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureStartOrEnterMapRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureStartOrEnterMapRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureCastingEventInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureCastingEventInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureCurMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureCurMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureReportPosReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureReportPosReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureQuitMapRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureQuitMapRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTriggerEventReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTriggerEventReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTriggerEventRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTriggerEventRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureAnswerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureAnswerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureAnswerEndReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureAnswerEndReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureGetBuffRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureGetBuffRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureReportBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureReportBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureReportBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureReportBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureStartBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureStartBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureStartBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureStartBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureBuyNumReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureBuyNumReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventurePassBlocksReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventurePassBlocksReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureReportTalkReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureReportTalkReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureReportTalkRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureReportTalkRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureBuyGoodsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureBuyGoodsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureReceiveCompleteRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureReceiveCompleteRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureSendToTeamMateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureSendToTeamMateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureCallTeamMateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureCallTeamMateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureCallOrSendRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureCallOrSendRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureAcceptCallReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureAcceptCallReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureGetTeamRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureGetTeamRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureGetTeamRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureGetTeamRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureGetCurMapRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureGetCurMapRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTeamExchangeRpcReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTeamExchangeRpcReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTeamExchangeRpcRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTeamExchangeRpcRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureQualityPassInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureQualityPassInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureGetPassInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureGetPassInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureRefreshActMapReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureRefreshActMapReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureRefreshActMapRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureRefreshActMapRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureBackToStartPosRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureBackToStartPosRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureSetRatioModeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureSetRatioModeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureGetHangUpInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureGetHangUpInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureSweepReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureSweepReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureSweepRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureSweepRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fAdventure_2eproto() {
  protobuf_AddDesc_net_2fAdventure_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Adventure.proto");
  GOOGLE_CHECK(file != NULL);
  TAdventureGetInfoRsp_descriptor_ = file->message_type(0);
  static const int TAdventureGetInfoRsp_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInfoRsp, adventurenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInfoRsp, buyadventurenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInfoRsp, freerefreshnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInfoRsp, goldrefreshnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInfoRsp, adventurelevelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInfoRsp, maplist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInfoRsp, expnumarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInfoRsp, adventuretype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInfoRsp, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInfoRsp, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInfoRsp, mapexpiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInfoRsp, actadventurenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInfoRsp, actinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInfoRsp, ratiomode_),
  };
  TAdventureGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureGetInfoRsp_descriptor_,
      TAdventureGetInfoRsp::default_instance_,
      TAdventureGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureGetInfoRsp));
  TAdventureActivityInfo_descriptor_ = file->message_type(1);
  static const int TAdventureActivityInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureActivityInfo, curactmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureActivityInfo, actadventurenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureActivityInfo, actfreerfrnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureActivityInfo, actgoldrfrnum_),
  };
  TAdventureActivityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureActivityInfo_descriptor_,
      TAdventureActivityInfo::default_instance_,
      TAdventureActivityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureActivityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureActivityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureActivityInfo));
  TAdventureGetListReq_descriptor_ = file->message_type(2);
  static const int TAdventureGetListReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetListReq, adventurelevelid_),
  };
  TAdventureGetListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureGetListReq_descriptor_,
      TAdventureGetListReq::default_instance_,
      TAdventureGetListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureGetListReq));
  TAdventureGetListRsp_descriptor_ = file->message_type(3);
  static const int TAdventureGetListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetListRsp, maplist_),
  };
  TAdventureGetListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureGetListRsp_descriptor_,
      TAdventureGetListRsp::default_instance_,
      TAdventureGetListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureGetListRsp));
  TAdventureRefreshListRsp_descriptor_ = file->message_type(4);
  static const int TAdventureRefreshListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureRefreshListRsp, maplist_),
  };
  TAdventureRefreshListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureRefreshListRsp_descriptor_,
      TAdventureRefreshListRsp::default_instance_,
      TAdventureRefreshListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureRefreshListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureRefreshListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureRefreshListRsp));
  TAdventureStartMapReq_descriptor_ = file->message_type(5);
  static const int TAdventureStartMapReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureStartMapReq, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureStartMapReq, adventuretype_),
  };
  TAdventureStartMapReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureStartMapReq_descriptor_,
      TAdventureStartMapReq::default_instance_,
      TAdventureStartMapReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureStartMapReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureStartMapReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureStartMapReq));
  TAdventureEnterMapReq_descriptor_ = file->message_type(6);
  static const int TAdventureEnterMapReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnterMapReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnterMapReq, mapid_),
  };
  TAdventureEnterMapReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureEnterMapReq_descriptor_,
      TAdventureEnterMapReq::default_instance_,
      TAdventureEnterMapReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnterMapReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnterMapReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureEnterMapReq));
  TAdventureStartOrEnterMapRsp_descriptor_ = file->message_type(7);
  static const int TAdventureStartOrEnterMapRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureStartOrEnterMapRsp, curmapinfo_),
  };
  TAdventureStartOrEnterMapRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureStartOrEnterMapRsp_descriptor_,
      TAdventureStartOrEnterMapRsp::default_instance_,
      TAdventureStartOrEnterMapRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureStartOrEnterMapRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureStartOrEnterMapRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureStartOrEnterMapRsp));
  TAdventureCastingEventInfo_descriptor_ = file->message_type(8);
  static const int TAdventureCastingEventInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCastingEventInfo, layerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCastingEventInfo, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCastingEventInfo, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCastingEventInfo, castingnum_),
  };
  TAdventureCastingEventInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureCastingEventInfo_descriptor_,
      TAdventureCastingEventInfo::default_instance_,
      TAdventureCastingEventInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCastingEventInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCastingEventInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureCastingEventInfo));
  TAdventureCurMap_descriptor_ = file->message_type(9);
  static const int TAdventureCurMap_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCurMap, mapbaseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCurMap, recordarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCurMap, alluserarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCurMap, userinmaparr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCurMap, adventuretype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCurMap, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCurMap, curenergy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCurMap, rewardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCurMap, leaderuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCurMap, monsterinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCurMap, entertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCurMap, shoparr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCurMap, ratiomode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCurMap, castingeventinfoarr_),
  };
  TAdventureCurMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureCurMap_descriptor_,
      TAdventureCurMap::default_instance_,
      TAdventureCurMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCurMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCurMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureCurMap));
  TAdventureReportPosReq_descriptor_ = file->message_type(10);
  static const int TAdventureReportPosReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportPosReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportPosReq, layerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportPosReq, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportPosReq, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportPosReq, poschangetype_),
  };
  TAdventureReportPosReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureReportPosReq_descriptor_,
      TAdventureReportPosReq::default_instance_,
      TAdventureReportPosReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportPosReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportPosReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureReportPosReq));
  TAdventureQuitMapRsp_descriptor_ = file->message_type(11);
  static const int TAdventureQuitMapRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureQuitMapRsp, rewardarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureQuitMapRsp, ratiomode_),
  };
  TAdventureQuitMapRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureQuitMapRsp_descriptor_,
      TAdventureQuitMapRsp::default_instance_,
      TAdventureQuitMapRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureQuitMapRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureQuitMapRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureQuitMapRsp));
  TAdventureTriggerEventReq_descriptor_ = file->message_type(12);
  static const int TAdventureTriggerEventReq_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTriggerEventReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTriggerEventReq, layerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTriggerEventReq, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTriggerEventReq, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTriggerEventReq, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTriggerEventReq, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTriggerEventReq, choseindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTriggerEventReq, gimmickindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTriggerEventReq, statevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTriggerEventReq, itemarr_),
  };
  TAdventureTriggerEventReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTriggerEventReq_descriptor_,
      TAdventureTriggerEventReq::default_instance_,
      TAdventureTriggerEventReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTriggerEventReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTriggerEventReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTriggerEventReq));
  TAdventureTriggerEventRsp_descriptor_ = file->message_type(13);
  static const int TAdventureTriggerEventRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTriggerEventRsp, eventstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTriggerEventRsp, rewardarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTriggerEventRsp, eventret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTriggerEventRsp, curenergy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTriggerEventRsp, statesucc_),
  };
  TAdventureTriggerEventRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTriggerEventRsp_descriptor_,
      TAdventureTriggerEventRsp::default_instance_,
      TAdventureTriggerEventRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTriggerEventRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTriggerEventRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTriggerEventRsp));
  TAdventureAnswerReq_descriptor_ = file->message_type(14);
  static const int TAdventureAnswerReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAnswerReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAnswerReq, layerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAnswerReq, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAnswerReq, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAnswerReq, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAnswerReq, choseindex_),
  };
  TAdventureAnswerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureAnswerReq_descriptor_,
      TAdventureAnswerReq::default_instance_,
      TAdventureAnswerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAnswerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAnswerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureAnswerReq));
  TAdventureAnswerEndReq_descriptor_ = file->message_type(15);
  static const int TAdventureAnswerEndReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAnswerEndReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAnswerEndReq, layerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAnswerEndReq, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAnswerEndReq, y_),
  };
  TAdventureAnswerEndReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureAnswerEndReq_descriptor_,
      TAdventureAnswerEndReq::default_instance_,
      TAdventureAnswerEndReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAnswerEndReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAnswerEndReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureAnswerEndReq));
  TAdventureGetBuffRsp_descriptor_ = file->message_type(16);
  static const int TAdventureGetBuffRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetBuffRsp, buffarr_),
  };
  TAdventureGetBuffRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureGetBuffRsp_descriptor_,
      TAdventureGetBuffRsp::default_instance_,
      TAdventureGetBuffRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetBuffRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetBuffRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureGetBuffRsp));
  TAdventureReportBattleReq_descriptor_ = file->message_type(17);
  static const int TAdventureReportBattleReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportBattleReq, battleresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportBattleReq, layerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportBattleReq, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportBattleReq, posy_),
  };
  TAdventureReportBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureReportBattleReq_descriptor_,
      TAdventureReportBattleReq::default_instance_,
      TAdventureReportBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureReportBattleReq));
  TAdventureReportBattleRsp_descriptor_ = file->message_type(18);
  static const int TAdventureReportBattleRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportBattleRsp, rewardarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportBattleRsp, curenergy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportBattleRsp, modelname_),
  };
  TAdventureReportBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureReportBattleRsp_descriptor_,
      TAdventureReportBattleRsp::default_instance_,
      TAdventureReportBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureReportBattleRsp));
  TAdventureStartBattleReq_descriptor_ = file->message_type(19);
  static const int TAdventureStartBattleReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureStartBattleReq, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureStartBattleReq, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureStartBattleReq, battlecheckparam_),
  };
  TAdventureStartBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureStartBattleReq_descriptor_,
      TAdventureStartBattleReq::default_instance_,
      TAdventureStartBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureStartBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureStartBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureStartBattleReq));
  TAdventureStartBattleRsp_descriptor_ = file->message_type(20);
  static const int TAdventureStartBattleRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureStartBattleRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureStartBattleRsp, battleinfoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureStartBattleRsp, bosslevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureStartBattleRsp, monsterinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureStartBattleRsp, battleargs_),
  };
  TAdventureStartBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureStartBattleRsp_descriptor_,
      TAdventureStartBattleRsp::default_instance_,
      TAdventureStartBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureStartBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureStartBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureStartBattleRsp));
  TAdventureBuyNumReq_descriptor_ = file->message_type(21);
  static const int TAdventureBuyNumReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBuyNumReq, buynum_),
  };
  TAdventureBuyNumReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureBuyNumReq_descriptor_,
      TAdventureBuyNumReq::default_instance_,
      TAdventureBuyNumReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBuyNumReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBuyNumReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureBuyNumReq));
  TAdventurePassBlocksReq_descriptor_ = file->message_type(22);
  static const int TAdventurePassBlocksReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventurePassBlocksReq, blockarr_),
  };
  TAdventurePassBlocksReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventurePassBlocksReq_descriptor_,
      TAdventurePassBlocksReq::default_instance_,
      TAdventurePassBlocksReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventurePassBlocksReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventurePassBlocksReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventurePassBlocksReq));
  TAdventureReportTalkReq_descriptor_ = file->message_type(23);
  static const int TAdventureReportTalkReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportTalkReq, talkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportTalkReq, chooseidx_),
  };
  TAdventureReportTalkReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureReportTalkReq_descriptor_,
      TAdventureReportTalkReq::default_instance_,
      TAdventureReportTalkReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportTalkReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportTalkReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureReportTalkReq));
  TAdventureReportTalkRsp_descriptor_ = file->message_type(24);
  static const int TAdventureReportTalkRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportTalkRsp, rewardarray_),
  };
  TAdventureReportTalkRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureReportTalkRsp_descriptor_,
      TAdventureReportTalkRsp::default_instance_,
      TAdventureReportTalkRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportTalkRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReportTalkRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureReportTalkRsp));
  TAdventureBuyGoodsReq_descriptor_ = file->message_type(25);
  static const int TAdventureBuyGoodsReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBuyGoodsReq, layerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBuyGoodsReq, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBuyGoodsReq, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBuyGoodsReq, goodsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBuyGoodsReq, buynum_),
  };
  TAdventureBuyGoodsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureBuyGoodsReq_descriptor_,
      TAdventureBuyGoodsReq::default_instance_,
      TAdventureBuyGoodsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBuyGoodsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBuyGoodsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureBuyGoodsReq));
  TAdventureReceiveCompleteRewardRsp_descriptor_ = file->message_type(26);
  static const int TAdventureReceiveCompleteRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReceiveCompleteRewardRsp, rewardarray_),
  };
  TAdventureReceiveCompleteRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureReceiveCompleteRewardRsp_descriptor_,
      TAdventureReceiveCompleteRewardRsp::default_instance_,
      TAdventureReceiveCompleteRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReceiveCompleteRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureReceiveCompleteRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureReceiveCompleteRewardRsp));
  TAdventureSendToTeamMateReq_descriptor_ = file->message_type(27);
  static const int TAdventureSendToTeamMateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSendToTeamMateReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSendToTeamMateReq, mateuid_),
  };
  TAdventureSendToTeamMateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureSendToTeamMateReq_descriptor_,
      TAdventureSendToTeamMateReq::default_instance_,
      TAdventureSendToTeamMateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSendToTeamMateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSendToTeamMateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureSendToTeamMateReq));
  TAdventureCallTeamMateReq_descriptor_ = file->message_type(28);
  static const int TAdventureCallTeamMateReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCallTeamMateReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCallTeamMateReq, mateuid_),
  };
  TAdventureCallTeamMateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureCallTeamMateReq_descriptor_,
      TAdventureCallTeamMateReq::default_instance_,
      TAdventureCallTeamMateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCallTeamMateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCallTeamMateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureCallTeamMateReq));
  TAdventureCallOrSendRsp_descriptor_ = file->message_type(29);
  static const int TAdventureCallOrSendRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCallOrSendRsp, retcode_),
  };
  TAdventureCallOrSendRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureCallOrSendRsp_descriptor_,
      TAdventureCallOrSendRsp::default_instance_,
      TAdventureCallOrSendRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCallOrSendRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureCallOrSendRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureCallOrSendRsp));
  TAdventureAcceptCallReq_descriptor_ = file->message_type(30);
  static const int TAdventureAcceptCallReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAcceptCallReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAcceptCallReq, mateuid_),
  };
  TAdventureAcceptCallReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureAcceptCallReq_descriptor_,
      TAdventureAcceptCallReq::default_instance_,
      TAdventureAcceptCallReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAcceptCallReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAcceptCallReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureAcceptCallReq));
  TAdventureGetTeamRankReq_descriptor_ = file->message_type(31);
  static const int TAdventureGetTeamRankReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamRankReq, teamid_),
  };
  TAdventureGetTeamRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureGetTeamRankReq_descriptor_,
      TAdventureGetTeamRankReq::default_instance_,
      TAdventureGetTeamRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureGetTeamRankReq));
  TAdventureGetTeamRankRsp_descriptor_ = file->message_type(32);
  static const int TAdventureGetTeamRankRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamRankRsp, rankuserinfo_),
  };
  TAdventureGetTeamRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureGetTeamRankRsp_descriptor_,
      TAdventureGetTeamRankRsp::default_instance_,
      TAdventureGetTeamRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureGetTeamRankRsp));
  TAdventureGetCurMapRewardRsp_descriptor_ = file->message_type(33);
  static const int TAdventureGetCurMapRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetCurMapRewardRsp, rewardarray_),
  };
  TAdventureGetCurMapRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureGetCurMapRewardRsp_descriptor_,
      TAdventureGetCurMapRewardRsp::default_instance_,
      TAdventureGetCurMapRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetCurMapRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetCurMapRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureGetCurMapRewardRsp));
  TAdventureTeamExchangeRpcReq_descriptor_ = file->message_type(34);
  static const int TAdventureTeamExchangeRpcReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamExchangeRpcReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamExchangeRpcReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamExchangeRpcReq, teammode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamExchangeRpcReq, costarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamExchangeRpcReq, rewardarr_),
  };
  TAdventureTeamExchangeRpcReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTeamExchangeRpcReq_descriptor_,
      TAdventureTeamExchangeRpcReq::default_instance_,
      TAdventureTeamExchangeRpcReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamExchangeRpcReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamExchangeRpcReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTeamExchangeRpcReq));
  TAdventureTeamExchangeRpcRsp_descriptor_ = file->message_type(35);
  static const int TAdventureTeamExchangeRpcRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamExchangeRpcRsp, issuccess_),
  };
  TAdventureTeamExchangeRpcRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTeamExchangeRpcRsp_descriptor_,
      TAdventureTeamExchangeRpcRsp::default_instance_,
      TAdventureTeamExchangeRpcRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamExchangeRpcRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamExchangeRpcRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTeamExchangeRpcRsp));
  TAdventureQualityPassInfo_descriptor_ = file->message_type(36);
  static const int TAdventureQualityPassInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureQualityPassInfo, maplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureQualityPassInfo, mapquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureQualityPassInfo, passnum_),
  };
  TAdventureQualityPassInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureQualityPassInfo_descriptor_,
      TAdventureQualityPassInfo::default_instance_,
      TAdventureQualityPassInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureQualityPassInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureQualityPassInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureQualityPassInfo));
  TAdventureGetPassInfoRsp_descriptor_ = file->message_type(37);
  static const int TAdventureGetPassInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetPassInfoRsp, passinfoarr_),
  };
  TAdventureGetPassInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureGetPassInfoRsp_descriptor_,
      TAdventureGetPassInfoRsp::default_instance_,
      TAdventureGetPassInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetPassInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetPassInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureGetPassInfoRsp));
  TAdventureRefreshActMapReq_descriptor_ = file->message_type(38);
  static const int TAdventureRefreshActMapReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureRefreshActMapReq, costtype_),
  };
  TAdventureRefreshActMapReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureRefreshActMapReq_descriptor_,
      TAdventureRefreshActMapReq::default_instance_,
      TAdventureRefreshActMapReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureRefreshActMapReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureRefreshActMapReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureRefreshActMapReq));
  TAdventureRefreshActMapRsp_descriptor_ = file->message_type(39);
  static const int TAdventureRefreshActMapRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureRefreshActMapRsp, actmapid_),
  };
  TAdventureRefreshActMapRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureRefreshActMapRsp_descriptor_,
      TAdventureRefreshActMapRsp::default_instance_,
      TAdventureRefreshActMapRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureRefreshActMapRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureRefreshActMapRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureRefreshActMapRsp));
  TAdventureBackToStartPosRsp_descriptor_ = file->message_type(40);
  static const int TAdventureBackToStartPosRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBackToStartPosRsp, startlayerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBackToStartPosRsp, startposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBackToStartPosRsp, startposy_),
  };
  TAdventureBackToStartPosRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureBackToStartPosRsp_descriptor_,
      TAdventureBackToStartPosRsp::default_instance_,
      TAdventureBackToStartPosRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBackToStartPosRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBackToStartPosRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureBackToStartPosRsp));
  TAdventureSetRatioModeReq_descriptor_ = file->message_type(41);
  static const int TAdventureSetRatioModeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSetRatioModeReq, ratiomode_),
  };
  TAdventureSetRatioModeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureSetRatioModeReq_descriptor_,
      TAdventureSetRatioModeReq::default_instance_,
      TAdventureSetRatioModeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSetRatioModeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSetRatioModeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureSetRatioModeReq));
  TAdventureGetHangUpInfoRsp_descriptor_ = file->message_type(42);
  static const int TAdventureGetHangUpInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetHangUpInfoRsp, punisheduserarr_),
  };
  TAdventureGetHangUpInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureGetHangUpInfoRsp_descriptor_,
      TAdventureGetHangUpInfoRsp::default_instance_,
      TAdventureGetHangUpInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetHangUpInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetHangUpInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureGetHangUpInfoRsp));
  TAdventureSweepReq_descriptor_ = file->message_type(43);
  static const int TAdventureSweepReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSweepReq, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSweepReq, adventuretype_),
  };
  TAdventureSweepReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureSweepReq_descriptor_,
      TAdventureSweepReq::default_instance_,
      TAdventureSweepReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSweepReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSweepReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureSweepReq));
  TAdventureSweepRsp_descriptor_ = file->message_type(44);
  static const int TAdventureSweepRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSweepRsp, rewardarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSweepRsp, ratiomode_),
  };
  TAdventureSweepRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureSweepRsp_descriptor_,
      TAdventureSweepRsp::default_instance_,
      TAdventureSweepRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSweepRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureSweepRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureSweepRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fAdventure_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureGetInfoRsp_descriptor_, &TAdventureGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureActivityInfo_descriptor_, &TAdventureActivityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureGetListReq_descriptor_, &TAdventureGetListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureGetListRsp_descriptor_, &TAdventureGetListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureRefreshListRsp_descriptor_, &TAdventureRefreshListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureStartMapReq_descriptor_, &TAdventureStartMapReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureEnterMapReq_descriptor_, &TAdventureEnterMapReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureStartOrEnterMapRsp_descriptor_, &TAdventureStartOrEnterMapRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureCastingEventInfo_descriptor_, &TAdventureCastingEventInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureCurMap_descriptor_, &TAdventureCurMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureReportPosReq_descriptor_, &TAdventureReportPosReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureQuitMapRsp_descriptor_, &TAdventureQuitMapRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTriggerEventReq_descriptor_, &TAdventureTriggerEventReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTriggerEventRsp_descriptor_, &TAdventureTriggerEventRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureAnswerReq_descriptor_, &TAdventureAnswerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureAnswerEndReq_descriptor_, &TAdventureAnswerEndReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureGetBuffRsp_descriptor_, &TAdventureGetBuffRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureReportBattleReq_descriptor_, &TAdventureReportBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureReportBattleRsp_descriptor_, &TAdventureReportBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureStartBattleReq_descriptor_, &TAdventureStartBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureStartBattleRsp_descriptor_, &TAdventureStartBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureBuyNumReq_descriptor_, &TAdventureBuyNumReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventurePassBlocksReq_descriptor_, &TAdventurePassBlocksReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureReportTalkReq_descriptor_, &TAdventureReportTalkReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureReportTalkRsp_descriptor_, &TAdventureReportTalkRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureBuyGoodsReq_descriptor_, &TAdventureBuyGoodsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureReceiveCompleteRewardRsp_descriptor_, &TAdventureReceiveCompleteRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureSendToTeamMateReq_descriptor_, &TAdventureSendToTeamMateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureCallTeamMateReq_descriptor_, &TAdventureCallTeamMateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureCallOrSendRsp_descriptor_, &TAdventureCallOrSendRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureAcceptCallReq_descriptor_, &TAdventureAcceptCallReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureGetTeamRankReq_descriptor_, &TAdventureGetTeamRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureGetTeamRankRsp_descriptor_, &TAdventureGetTeamRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureGetCurMapRewardRsp_descriptor_, &TAdventureGetCurMapRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTeamExchangeRpcReq_descriptor_, &TAdventureTeamExchangeRpcReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTeamExchangeRpcRsp_descriptor_, &TAdventureTeamExchangeRpcRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureQualityPassInfo_descriptor_, &TAdventureQualityPassInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureGetPassInfoRsp_descriptor_, &TAdventureGetPassInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureRefreshActMapReq_descriptor_, &TAdventureRefreshActMapReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureRefreshActMapRsp_descriptor_, &TAdventureRefreshActMapRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureBackToStartPosRsp_descriptor_, &TAdventureBackToStartPosRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureSetRatioModeReq_descriptor_, &TAdventureSetRatioModeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureGetHangUpInfoRsp_descriptor_, &TAdventureGetHangUpInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureSweepReq_descriptor_, &TAdventureSweepReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureSweepRsp_descriptor_, &TAdventureSweepRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fAdventure_2eproto() {
  delete TAdventureGetInfoRsp::default_instance_;
  delete TAdventureGetInfoRsp_reflection_;
  delete TAdventureActivityInfo::default_instance_;
  delete TAdventureActivityInfo_reflection_;
  delete TAdventureGetListReq::default_instance_;
  delete TAdventureGetListReq_reflection_;
  delete TAdventureGetListRsp::default_instance_;
  delete TAdventureGetListRsp_reflection_;
  delete TAdventureRefreshListRsp::default_instance_;
  delete TAdventureRefreshListRsp_reflection_;
  delete TAdventureStartMapReq::default_instance_;
  delete TAdventureStartMapReq_reflection_;
  delete TAdventureEnterMapReq::default_instance_;
  delete TAdventureEnterMapReq_reflection_;
  delete TAdventureStartOrEnterMapRsp::default_instance_;
  delete TAdventureStartOrEnterMapRsp_reflection_;
  delete TAdventureCastingEventInfo::default_instance_;
  delete TAdventureCastingEventInfo_reflection_;
  delete TAdventureCurMap::default_instance_;
  delete TAdventureCurMap_reflection_;
  delete TAdventureReportPosReq::default_instance_;
  delete TAdventureReportPosReq_reflection_;
  delete TAdventureQuitMapRsp::default_instance_;
  delete TAdventureQuitMapRsp_reflection_;
  delete TAdventureTriggerEventReq::default_instance_;
  delete TAdventureTriggerEventReq_reflection_;
  delete TAdventureTriggerEventRsp::default_instance_;
  delete TAdventureTriggerEventRsp_reflection_;
  delete TAdventureAnswerReq::default_instance_;
  delete TAdventureAnswerReq_reflection_;
  delete TAdventureAnswerEndReq::default_instance_;
  delete TAdventureAnswerEndReq_reflection_;
  delete TAdventureGetBuffRsp::default_instance_;
  delete TAdventureGetBuffRsp_reflection_;
  delete TAdventureReportBattleReq::default_instance_;
  delete TAdventureReportBattleReq_reflection_;
  delete TAdventureReportBattleRsp::default_instance_;
  delete TAdventureReportBattleRsp_reflection_;
  delete TAdventureStartBattleReq::default_instance_;
  delete TAdventureStartBattleReq_reflection_;
  delete TAdventureStartBattleRsp::default_instance_;
  delete TAdventureStartBattleRsp_reflection_;
  delete TAdventureBuyNumReq::default_instance_;
  delete TAdventureBuyNumReq_reflection_;
  delete TAdventurePassBlocksReq::default_instance_;
  delete TAdventurePassBlocksReq_reflection_;
  delete TAdventureReportTalkReq::default_instance_;
  delete TAdventureReportTalkReq_reflection_;
  delete TAdventureReportTalkRsp::default_instance_;
  delete TAdventureReportTalkRsp_reflection_;
  delete TAdventureBuyGoodsReq::default_instance_;
  delete TAdventureBuyGoodsReq_reflection_;
  delete TAdventureReceiveCompleteRewardRsp::default_instance_;
  delete TAdventureReceiveCompleteRewardRsp_reflection_;
  delete TAdventureSendToTeamMateReq::default_instance_;
  delete TAdventureSendToTeamMateReq_reflection_;
  delete TAdventureCallTeamMateReq::default_instance_;
  delete TAdventureCallTeamMateReq_reflection_;
  delete TAdventureCallOrSendRsp::default_instance_;
  delete TAdventureCallOrSendRsp_reflection_;
  delete TAdventureAcceptCallReq::default_instance_;
  delete TAdventureAcceptCallReq_reflection_;
  delete TAdventureGetTeamRankReq::default_instance_;
  delete TAdventureGetTeamRankReq_reflection_;
  delete TAdventureGetTeamRankRsp::default_instance_;
  delete TAdventureGetTeamRankRsp_reflection_;
  delete TAdventureGetCurMapRewardRsp::default_instance_;
  delete TAdventureGetCurMapRewardRsp_reflection_;
  delete TAdventureTeamExchangeRpcReq::default_instance_;
  delete TAdventureTeamExchangeRpcReq_reflection_;
  delete TAdventureTeamExchangeRpcRsp::default_instance_;
  delete TAdventureTeamExchangeRpcRsp_reflection_;
  delete TAdventureQualityPassInfo::default_instance_;
  delete TAdventureQualityPassInfo_reflection_;
  delete TAdventureGetPassInfoRsp::default_instance_;
  delete TAdventureGetPassInfoRsp_reflection_;
  delete TAdventureRefreshActMapReq::default_instance_;
  delete TAdventureRefreshActMapReq_reflection_;
  delete TAdventureRefreshActMapRsp::default_instance_;
  delete TAdventureRefreshActMapRsp_reflection_;
  delete TAdventureBackToStartPosRsp::default_instance_;
  delete TAdventureBackToStartPosRsp_reflection_;
  delete TAdventureSetRatioModeReq::default_instance_;
  delete TAdventureSetRatioModeReq_reflection_;
  delete TAdventureGetHangUpInfoRsp::default_instance_;
  delete TAdventureGetHangUpInfoRsp_reflection_;
  delete TAdventureSweepReq::default_instance_;
  delete TAdventureSweepReq_reflection_;
  delete TAdventureSweepRsp::default_instance_;
  delete TAdventureSweepRsp_reflection_;
}

void protobuf_AddDesc_net_2fAdventure_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fAdventureBase_2eproto();
  ::pb::protobuf_AddDesc_net_2fAdventureTeam_2eproto();
  ::pb::protobuf_AddDesc_module_2fAdventureMap_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023net/Adventure.proto\022\002pb\032\027net/Adventure"
    "Base.proto\032\027net/AdventureTeam.proto\032\031mod"
    "ule/AdventureMap.proto\032\026net/CommonReward"
    ".proto\032\020net/Battle.proto\032\020net/Common.pro"
    "to\"\234\003\n\024TAdventureGetInfoRsp\022\024\n\014Adventure"
    "Num\030\001 \001(\r\022\027\n\017BuyAdventureNum\030\002 \001(\r\022\026\n\016Fr"
    "eeRefreshNum\030\003 \001(\r\022\026\n\016GoldRefreshNum\030\004 \001"
    "(\r\022\030\n\020AdventureLevelId\030\005 \001(\r\022&\n\007MapList\030"
    "\006 \001(\0132\025.pb.TAdventureMapList\022)\n\tExpNumAr"
    "r\030\007 \003(\0132\026.pb.TAdventLevelExpNum\022)\n\rAdven"
    "tureType\030\010 \001(\0162\022.pb.EAdventureType\022\r\n\005Ma"
    "pId\030\t \001(\004\022\016\n\006TeamId\030\n \001(\004\022\025\n\rMapExpireTi"
    "me\030\013 \001(\004\022\027\n\017ActAdventureNum\030\014 \001(\r\022+\n\007Act"
    "Info\030\r \001(\0132\032.pb.TAdventureActivityInfo\022\021"
    "\n\tRatioMode\030\016 \001(\r\"t\n\026TAdventureActivityI"
    "nfo\022\023\n\013CurActMapId\030\001 \001(\r\022\027\n\017ActAdventure"
    "Num\030\002 \001(\r\022\025\n\rActFreeRfrNum\030\003 \001(\r\022\025\n\rActG"
    "oldRfrNum\030\004 \001(\r\"0\n\024TAdventureGetListReq\022"
    "\030\n\020AdventureLevelId\030\001 \001(\r\">\n\024TAdventureG"
    "etListRsp\022&\n\007MapList\030\001 \001(\0132\025.pb.TAdventu"
    "reMapList\"B\n\030TAdventureRefreshListRsp\022&\n"
    "\007MapList\030\001 \001(\0132\025.pb.TAdventureMapList\"Q\n"
    "\025TAdventureStartMapReq\022\r\n\005MapId\030\001 \001(\004\022)\n"
    "\rAdventureType\030\002 \001(\0162\022.pb.EAdventureType"
    "\"6\n\025TAdventureEnterMapReq\022\016\n\006TeamId\030\001 \001("
    "\004\022\r\n\005MapId\030\002 \001(\004\"H\n\034TAdventureStartOrEnt"
    "erMapRsp\022(\n\nCurMapInfo\030\001 \001(\0132\024.pb.TAdven"
    "tureCurMap\"`\n\032TAdventureCastingEventInfo"
    "\022\022\n\nLayerIndex\030\001 \001(\r\022\014\n\004PosX\030\002 \001(\005\022\014\n\004Po"
    "sY\030\003 \001(\005\022\022\n\nCastingNum\030\004 \001(\r\"\375\003\n\020TAdvent"
    "ureCurMap\022%\n\013MapBaseInfo\030\001 \001(\0132\020.pb.Adve"
    "ntureMap\022-\n\013RecordArray\030\002 \003(\0132\030.pb.TAdve"
    "ntureTeamRecord\0220\n\nAllUserArr\030\003 \003(\0132\034.pb"
    ".TAdventureUserSimpleInfo\022*\n\014UserInMapAr"
    "r\030\004 \003(\0132\024.pb.TUserInfoWithPos\022)\n\rAdventu"
    "reType\030\005 \001(\0162\022.pb.EAdventureType\022\016\n\006Team"
    "Id\030\007 \001(\004\022\021\n\tCurEnergy\030\010 \001(\r\022\022\n\nRewardTim"
    "e\030\t \001(\004\022\021\n\tLeaderUid\030\n \001(\004\0221\n\016MonsterInf"
    "oArr\030\013 \003(\0132\031.pb.TAdventureMonsterInfo\022\021\n"
    "\tEnterTime\030\014 \001(\004\022*\n\007ShopArr\030\r \003(\0132\031.pb.T"
    "AdventureBusinessMan\022\021\n\tRatioMode\030\016 \001(\r\022"
    ";\n\023CastingEventInfoArr\030\017 \003(\0132\036.pb.TAdven"
    "tureCastingEventInfo\"\214\001\n\026TAdventureRepor"
    "tPosReq\022\016\n\006TeamId\030\001 \001(\004\022\022\n\nLayerIndex\030\002 "
    "\001(\r\022\014\n\004PosX\030\003 \001(\005\022\014\n\004PosY\030\004 \001(\005\0222\n\rPosCh"
    "angeType\030\005 \001(\0162\033.pb.EAdventurePosChangeT"
    "ype\"Q\n\024TAdventureQuitMapRsp\022&\n\013RewardArr"
    "ay\030\001 \003(\0132\021.pb.TCommonReward\022\021\n\tRatioMode"
    "\030\002 \001(\r\"\323\001\n\031TAdventureTriggerEventReq\022\016\n\006"
    "TeamId\030\001 \001(\004\022\022\n\nLayerIndex\030\002 \001(\r\022\t\n\001X\030\003 "
    "\001(\005\022\t\n\001Y\030\004 \001(\005\022\017\n\007EventId\030\005 \001(\r\022\013\n\003Hid\030\006"
    " \001(\r\022\022\n\nChoseIndex\030\007 \001(\r\022\024\n\014GimmickIndex"
    "\030\010 \001(\005\022\022\n\nStateValue\030\t \001(\r\022 \n\007ItemArr\030\n "
    "\003(\0132\017.pb.TSimpleItem\"\272\001\n\031TAdventureTrigg"
    "erEventRsp\022%\n\013EventStatus\030\001 \001(\0162\020.pb.EEv"
    "entStatus\022&\n\013RewardArray\030\002 \003(\0132\021.pb.TCom"
    "monReward\022(\n\010EventRet\030\003 \001(\0132\026.pb.TAdvent"
    "ureEventRet\022\021\n\tCurEnergy\030\004 \001(\r\022\021\n\tStateS"
    "ucc\030\005 \001(\r\"t\n\023TAdventureAnswerReq\022\016\n\006Team"
    "Id\030\001 \001(\004\022\022\n\nLayerIndex\030\002 \001(\r\022\t\n\001X\030\003 \001(\005\022"
    "\t\n\001Y\030\004 \001(\005\022\017\n\007EventId\030\005 \001(\r\022\022\n\nChoseInde"
    "x\030\006 \001(\r\"R\n\026TAdventureAnswerEndReq\022\016\n\006Tea"
    "mId\030\001 \001(\004\022\022\n\nLayerIndex\030\002 \001(\r\022\t\n\001X\030\003 \001(\005"
    "\022\t\n\001Y\030\004 \001(\005\";\n\024TAdventureGetBuffRsp\022#\n\007B"
    "uffArr\030\001 \003(\0132\022.pb.TAdventureBuff\"a\n\031TAdv"
    "entureReportBattleReq\022\024\n\014BattleResult\030\001 "
    "\001(\014\022\022\n\nLayerIndex\030\002 \001(\r\022\014\n\004PosX\030\003 \001(\005\022\014\n"
    "\004PosY\030\004 \001(\005\"i\n\031TAdventureReportBattleRsp"
    "\022&\n\013RewardArray\030\001 \003(\0132\021.pb.TCommonReward"
    "\022\021\n\tCurEnergy\030\002 \001(\r\022\021\n\tModelName\030\003 \001(\t\"a"
    "\n\030TAdventureStartBattleReq\022\t\n\001X\030\001 \001(\005\022\t\n"
    "\001Y\030\002 \001(\005\022/\n\020BattleCheckParam\030\003 \001(\0132\025.pb."
    "TBattleCheckParam\"\321\001\n\030TAdventureStartBat"
    "tleRsp\0221\n\007RetCode\030\001 \001(\0162 .pb.EAdventureS"
    "tartBattleRetCode\022\024\n\014BattleinfoId\030\002 \001(\r\022"
    "\021\n\tBossLevel\030\003 \001(\r\0224\n\013MonsterInfo\030\004 \001(\0132"
    "\037.pb.TAdventureBattleMonsterInfo\022#\n\nBatt"
    "leArgs\030\005 \001(\0132\017.pb.TBattleArgs\"%\n\023TAdvent"
    "ureBuyNumReq\022\016\n\006BuyNum\030\001 \001(\r\"D\n\027TAdventu"
    "rePassBlocksReq\022)\n\010BlockArr\030\001 \003(\0132\027.pb.T"
    "AdventurePassBlock\"<\n\027TAdventureReportTa"
    "lkReq\022\016\n\006TalkId\030\001 \001(\r\022\021\n\tChooseIdx\030\002 \001(\r"
    "\"A\n\027TAdventureReportTalkRsp\022&\n\013RewardArr"
    "ay\030\001 \003(\0132\021.pb.TCommonReward\"h\n\025TAdventur"
    "eBuyGoodsReq\022\022\n\nLayerIndex\030\001 \001(\r\022\014\n\004PosX"
    "\030\002 \001(\005\022\014\n\004PosY\030\003 \001(\005\022\017\n\007GoodsId\030\004 \001(\r\022\016\n"
    "\006BuyNum\030\005 \001(\r\"L\n\"TAdventureReceiveComple"
    "teRewardRsp\022&\n\013RewardArray\030\001 \003(\0132\021.pb.TC"
    "ommonReward\">\n\033TAdventureSendToTeamMateR"
    "eq\022\016\n\006TeamId\030\001 \001(\004\022\017\n\007MateUid\030\002 \001(\004\"<\n\031T"
    "AdventureCallTeamMateReq\022\016\n\006TeamId\030\001 \001(\004"
    "\022\017\n\007MateUid\030\002 \001(\004\"K\n\027TAdventureCallOrSen"
    "dRsp\0220\n\007RetCode\030\001 \001(\0162\037.pb.EAdventureSen"
    "dToMateRetCode\":\n\027TAdventureAcceptCallRe"
    "q\022\016\n\006TeamId\030\001 \001(\004\022\017\n\007MateUid\030\002 \001(\004\"*\n\030TA"
    "dventureGetTeamRankReq\022\016\n\006TeamId\030\001 \001(\004\"S"
    "\n\030TAdventureGetTeamRankRsp\0227\n\014RankUserIn"
    "fo\030\001 \003(\0132!.pb.TAdventureGetTeamRankUserI"
    "nfo\"F\n\034TAdventureGetCurMapRewardRsp\022&\n\013R"
    "ewardArray\030\001 \003(\0132\021.pb.TCommonReward\"\246\001\n\034"
    "TAdventureTeamExchangeRpcReq\022\013\n\003Uid\030\001 \001("
    "\004\022\016\n\006TeamId\030\002 \001(\004\022\037\n\010TeamMode\030\003 \001(\0162\r.pb"
    ".ETeamMode\022\"\n\007CostArr\030\004 \003(\0132\021.pb.TCommon"
    "Reward\022$\n\tRewardArr\030\005 \003(\0132\021.pb.TCommonRe"
    "ward\"1\n\034TAdventureTeamExchangeRpcRsp\022\021\n\t"
    "IsSuccess\030\001 \001(\010\"R\n\031TAdventureQualityPass"
    "Info\022\020\n\010MapLevel\030\001 \001(\r\022\022\n\nMapQuality\030\002 \001"
    "(\r\022\017\n\007PassNum\030\003 \001(\r\"N\n\030TAdventureGetPass"
    "InfoRsp\0222\n\013PassInfoArr\030\001 \003(\0132\035.pb.TAdven"
    "tureQualityPassInfo\"P\n\032TAdventureRefresh"
    "ActMapReq\0222\n\010CostType\030\001 \001(\0162 .pb.EAdvent"
    "ureRefreshMapCostType\".\n\032TAdventureRefre"
    "shActMapRsp\022\020\n\010ActMapId\030\001 \001(\r\"\\\n\033TAdvent"
    "ureBackToStartPosRsp\022\027\n\017StartLayerIndex\030"
    "\001 \001(\r\022\021\n\tStartPosX\030\002 \001(\005\022\021\n\tStartPosY\030\003 "
    "\001(\005\".\n\031TAdventureSetRatioModeReq\022\021\n\tRati"
    "oMode\030\001 \001(\r\"S\n\032TAdventureGetHangUpInfoRs"
    "p\0225\n\017PunishedUserArr\030\001 \003(\0132\034.pb.TAdventu"
    "reUserSimpleInfo\"N\n\022TAdventureSweepReq\022\r"
    "\n\005MapId\030\001 \001(\004\022)\n\rAdventureType\030\002 \001(\0162\022.p"
    "b.EAdventureType\"O\n\022TAdventureSweepRsp\022&"
    "\n\013RewardArray\030\001 \003(\0132\021.pb.TCommonReward\022\021"
    "\n\tRatioMode\030\002 \001(\r", 4897);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Adventure.proto", &protobuf_RegisterTypes);
  TAdventureGetInfoRsp::default_instance_ = new TAdventureGetInfoRsp();
  TAdventureActivityInfo::default_instance_ = new TAdventureActivityInfo();
  TAdventureGetListReq::default_instance_ = new TAdventureGetListReq();
  TAdventureGetListRsp::default_instance_ = new TAdventureGetListRsp();
  TAdventureRefreshListRsp::default_instance_ = new TAdventureRefreshListRsp();
  TAdventureStartMapReq::default_instance_ = new TAdventureStartMapReq();
  TAdventureEnterMapReq::default_instance_ = new TAdventureEnterMapReq();
  TAdventureStartOrEnterMapRsp::default_instance_ = new TAdventureStartOrEnterMapRsp();
  TAdventureCastingEventInfo::default_instance_ = new TAdventureCastingEventInfo();
  TAdventureCurMap::default_instance_ = new TAdventureCurMap();
  TAdventureReportPosReq::default_instance_ = new TAdventureReportPosReq();
  TAdventureQuitMapRsp::default_instance_ = new TAdventureQuitMapRsp();
  TAdventureTriggerEventReq::default_instance_ = new TAdventureTriggerEventReq();
  TAdventureTriggerEventRsp::default_instance_ = new TAdventureTriggerEventRsp();
  TAdventureAnswerReq::default_instance_ = new TAdventureAnswerReq();
  TAdventureAnswerEndReq::default_instance_ = new TAdventureAnswerEndReq();
  TAdventureGetBuffRsp::default_instance_ = new TAdventureGetBuffRsp();
  TAdventureReportBattleReq::default_instance_ = new TAdventureReportBattleReq();
  TAdventureReportBattleRsp::default_instance_ = new TAdventureReportBattleRsp();
  TAdventureStartBattleReq::default_instance_ = new TAdventureStartBattleReq();
  TAdventureStartBattleRsp::default_instance_ = new TAdventureStartBattleRsp();
  TAdventureBuyNumReq::default_instance_ = new TAdventureBuyNumReq();
  TAdventurePassBlocksReq::default_instance_ = new TAdventurePassBlocksReq();
  TAdventureReportTalkReq::default_instance_ = new TAdventureReportTalkReq();
  TAdventureReportTalkRsp::default_instance_ = new TAdventureReportTalkRsp();
  TAdventureBuyGoodsReq::default_instance_ = new TAdventureBuyGoodsReq();
  TAdventureReceiveCompleteRewardRsp::default_instance_ = new TAdventureReceiveCompleteRewardRsp();
  TAdventureSendToTeamMateReq::default_instance_ = new TAdventureSendToTeamMateReq();
  TAdventureCallTeamMateReq::default_instance_ = new TAdventureCallTeamMateReq();
  TAdventureCallOrSendRsp::default_instance_ = new TAdventureCallOrSendRsp();
  TAdventureAcceptCallReq::default_instance_ = new TAdventureAcceptCallReq();
  TAdventureGetTeamRankReq::default_instance_ = new TAdventureGetTeamRankReq();
  TAdventureGetTeamRankRsp::default_instance_ = new TAdventureGetTeamRankRsp();
  TAdventureGetCurMapRewardRsp::default_instance_ = new TAdventureGetCurMapRewardRsp();
  TAdventureTeamExchangeRpcReq::default_instance_ = new TAdventureTeamExchangeRpcReq();
  TAdventureTeamExchangeRpcRsp::default_instance_ = new TAdventureTeamExchangeRpcRsp();
  TAdventureQualityPassInfo::default_instance_ = new TAdventureQualityPassInfo();
  TAdventureGetPassInfoRsp::default_instance_ = new TAdventureGetPassInfoRsp();
  TAdventureRefreshActMapReq::default_instance_ = new TAdventureRefreshActMapReq();
  TAdventureRefreshActMapRsp::default_instance_ = new TAdventureRefreshActMapRsp();
  TAdventureBackToStartPosRsp::default_instance_ = new TAdventureBackToStartPosRsp();
  TAdventureSetRatioModeReq::default_instance_ = new TAdventureSetRatioModeReq();
  TAdventureGetHangUpInfoRsp::default_instance_ = new TAdventureGetHangUpInfoRsp();
  TAdventureSweepReq::default_instance_ = new TAdventureSweepReq();
  TAdventureSweepRsp::default_instance_ = new TAdventureSweepRsp();
  TAdventureGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TAdventureActivityInfo::default_instance_->InitAsDefaultInstance();
  TAdventureGetListReq::default_instance_->InitAsDefaultInstance();
  TAdventureGetListRsp::default_instance_->InitAsDefaultInstance();
  TAdventureRefreshListRsp::default_instance_->InitAsDefaultInstance();
  TAdventureStartMapReq::default_instance_->InitAsDefaultInstance();
  TAdventureEnterMapReq::default_instance_->InitAsDefaultInstance();
  TAdventureStartOrEnterMapRsp::default_instance_->InitAsDefaultInstance();
  TAdventureCastingEventInfo::default_instance_->InitAsDefaultInstance();
  TAdventureCurMap::default_instance_->InitAsDefaultInstance();
  TAdventureReportPosReq::default_instance_->InitAsDefaultInstance();
  TAdventureQuitMapRsp::default_instance_->InitAsDefaultInstance();
  TAdventureTriggerEventReq::default_instance_->InitAsDefaultInstance();
  TAdventureTriggerEventRsp::default_instance_->InitAsDefaultInstance();
  TAdventureAnswerReq::default_instance_->InitAsDefaultInstance();
  TAdventureAnswerEndReq::default_instance_->InitAsDefaultInstance();
  TAdventureGetBuffRsp::default_instance_->InitAsDefaultInstance();
  TAdventureReportBattleReq::default_instance_->InitAsDefaultInstance();
  TAdventureReportBattleRsp::default_instance_->InitAsDefaultInstance();
  TAdventureStartBattleReq::default_instance_->InitAsDefaultInstance();
  TAdventureStartBattleRsp::default_instance_->InitAsDefaultInstance();
  TAdventureBuyNumReq::default_instance_->InitAsDefaultInstance();
  TAdventurePassBlocksReq::default_instance_->InitAsDefaultInstance();
  TAdventureReportTalkReq::default_instance_->InitAsDefaultInstance();
  TAdventureReportTalkRsp::default_instance_->InitAsDefaultInstance();
  TAdventureBuyGoodsReq::default_instance_->InitAsDefaultInstance();
  TAdventureReceiveCompleteRewardRsp::default_instance_->InitAsDefaultInstance();
  TAdventureSendToTeamMateReq::default_instance_->InitAsDefaultInstance();
  TAdventureCallTeamMateReq::default_instance_->InitAsDefaultInstance();
  TAdventureCallOrSendRsp::default_instance_->InitAsDefaultInstance();
  TAdventureAcceptCallReq::default_instance_->InitAsDefaultInstance();
  TAdventureGetTeamRankReq::default_instance_->InitAsDefaultInstance();
  TAdventureGetTeamRankRsp::default_instance_->InitAsDefaultInstance();
  TAdventureGetCurMapRewardRsp::default_instance_->InitAsDefaultInstance();
  TAdventureTeamExchangeRpcReq::default_instance_->InitAsDefaultInstance();
  TAdventureTeamExchangeRpcRsp::default_instance_->InitAsDefaultInstance();
  TAdventureQualityPassInfo::default_instance_->InitAsDefaultInstance();
  TAdventureGetPassInfoRsp::default_instance_->InitAsDefaultInstance();
  TAdventureRefreshActMapReq::default_instance_->InitAsDefaultInstance();
  TAdventureRefreshActMapRsp::default_instance_->InitAsDefaultInstance();
  TAdventureBackToStartPosRsp::default_instance_->InitAsDefaultInstance();
  TAdventureSetRatioModeReq::default_instance_->InitAsDefaultInstance();
  TAdventureGetHangUpInfoRsp::default_instance_->InitAsDefaultInstance();
  TAdventureSweepReq::default_instance_->InitAsDefaultInstance();
  TAdventureSweepRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fAdventure_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fAdventure_2eproto {
  StaticDescriptorInitializer_net_2fAdventure_2eproto() {
    protobuf_AddDesc_net_2fAdventure_2eproto();
  }
} static_descriptor_initializer_net_2fAdventure_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TAdventureGetInfoRsp::kAdventureNumFieldNumber;
const int TAdventureGetInfoRsp::kBuyAdventureNumFieldNumber;
const int TAdventureGetInfoRsp::kFreeRefreshNumFieldNumber;
const int TAdventureGetInfoRsp::kGoldRefreshNumFieldNumber;
const int TAdventureGetInfoRsp::kAdventureLevelIdFieldNumber;
const int TAdventureGetInfoRsp::kMapListFieldNumber;
const int TAdventureGetInfoRsp::kExpNumArrFieldNumber;
const int TAdventureGetInfoRsp::kAdventureTypeFieldNumber;
const int TAdventureGetInfoRsp::kMapIdFieldNumber;
const int TAdventureGetInfoRsp::kTeamIdFieldNumber;
const int TAdventureGetInfoRsp::kMapExpireTimeFieldNumber;
const int TAdventureGetInfoRsp::kActAdventureNumFieldNumber;
const int TAdventureGetInfoRsp::kActInfoFieldNumber;
const int TAdventureGetInfoRsp::kRatioModeFieldNumber;
#endif  // !_MSC_VER

TAdventureGetInfoRsp::TAdventureGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureGetInfoRsp)
}

void TAdventureGetInfoRsp::InitAsDefaultInstance() {
  maplist_ = const_cast< ::pb::TAdventureMapList*>(&::pb::TAdventureMapList::default_instance());
  actinfo_ = const_cast< ::pb::TAdventureActivityInfo*>(&::pb::TAdventureActivityInfo::default_instance());
}

TAdventureGetInfoRsp::TAdventureGetInfoRsp(const TAdventureGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureGetInfoRsp)
}

void TAdventureGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  adventurenum_ = 0u;
  buyadventurenum_ = 0u;
  freerefreshnum_ = 0u;
  goldrefreshnum_ = 0u;
  adventurelevelid_ = 0u;
  maplist_ = NULL;
  adventuretype_ = 0;
  mapid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  mapexpiretime_ = GOOGLE_ULONGLONG(0);
  actadventurenum_ = 0u;
  actinfo_ = NULL;
  ratiomode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureGetInfoRsp::~TAdventureGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureGetInfoRsp)
  SharedDtor();
}

void TAdventureGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete maplist_;
    delete actinfo_;
  }
}

void TAdventureGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureGetInfoRsp_descriptor_;
}

const TAdventureGetInfoRsp& TAdventureGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureGetInfoRsp* TAdventureGetInfoRsp::default_instance_ = NULL;

TAdventureGetInfoRsp* TAdventureGetInfoRsp::New() const {
  return new TAdventureGetInfoRsp;
}

void TAdventureGetInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureGetInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(adventurenum_, goldrefreshnum_);
    ZR_(adventurelevelid_, adventuretype_);
    if (has_maplist()) {
      if (maplist_ != NULL) maplist_->::pb::TAdventureMapList::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(mapid_, mapexpiretime_);
    ZR_(actadventurenum_, ratiomode_);
    if (has_actinfo()) {
      if (actinfo_ != NULL) actinfo_->::pb::TAdventureActivityInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  expnumarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AdventureNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adventurenum_)));
          set_has_adventurenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyAdventureNum;
        break;
      }

      // optional uint32 BuyAdventureNum = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyAdventureNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buyadventurenum_)));
          set_has_buyadventurenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FreeRefreshNum;
        break;
      }

      // optional uint32 FreeRefreshNum = 3;
      case 3: {
        if (tag == 24) {
         parse_FreeRefreshNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freerefreshnum_)));
          set_has_freerefreshnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_GoldRefreshNum;
        break;
      }

      // optional uint32 GoldRefreshNum = 4;
      case 4: {
        if (tag == 32) {
         parse_GoldRefreshNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goldrefreshnum_)));
          set_has_goldrefreshnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_AdventureLevelId;
        break;
      }

      // optional uint32 AdventureLevelId = 5;
      case 5: {
        if (tag == 40) {
         parse_AdventureLevelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adventurelevelid_)));
          set_has_adventurelevelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_MapList;
        break;
      }

      // optional .pb.TAdventureMapList MapList = 6;
      case 6: {
        if (tag == 50) {
         parse_MapList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maplist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ExpNumArr;
        break;
      }

      // repeated .pb.TAdventLevelExpNum ExpNumArr = 7;
      case 7: {
        if (tag == 58) {
         parse_ExpNumArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_expnumarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ExpNumArr;
        if (input->ExpectTag(64)) goto parse_AdventureType;
        break;
      }

      // optional .pb.EAdventureType AdventureType = 8;
      case 8: {
        if (tag == 64) {
         parse_AdventureType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAdventureType_IsValid(value)) {
            set_adventuretype(static_cast< ::pb::EAdventureType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_MapId;
        break;
      }

      // optional uint64 MapId = 9;
      case 9: {
        if (tag == 72) {
         parse_MapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 10;
      case 10: {
        if (tag == 80) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_MapExpireTime;
        break;
      }

      // optional uint64 MapExpireTime = 11;
      case 11: {
        if (tag == 88) {
         parse_MapExpireTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapexpiretime_)));
          set_has_mapexpiretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ActAdventureNum;
        break;
      }

      // optional uint32 ActAdventureNum = 12;
      case 12: {
        if (tag == 96) {
         parse_ActAdventureNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actadventurenum_)));
          set_has_actadventurenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_ActInfo;
        break;
      }

      // optional .pb.TAdventureActivityInfo ActInfo = 13;
      case 13: {
        if (tag == 106) {
         parse_ActInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_RatioMode;
        break;
      }

      // optional uint32 RatioMode = 14;
      case 14: {
        if (tag == 112) {
         parse_RatioMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ratiomode_)));
          set_has_ratiomode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureGetInfoRsp)
  return false;
#undef DO_
}

void TAdventureGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureGetInfoRsp)
  // optional uint32 AdventureNum = 1;
  if (has_adventurenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->adventurenum(), output);
  }

  // optional uint32 BuyAdventureNum = 2;
  if (has_buyadventurenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buyadventurenum(), output);
  }

  // optional uint32 FreeRefreshNum = 3;
  if (has_freerefreshnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->freerefreshnum(), output);
  }

  // optional uint32 GoldRefreshNum = 4;
  if (has_goldrefreshnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->goldrefreshnum(), output);
  }

  // optional uint32 AdventureLevelId = 5;
  if (has_adventurelevelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->adventurelevelid(), output);
  }

  // optional .pb.TAdventureMapList MapList = 6;
  if (has_maplist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->maplist(), output);
  }

  // repeated .pb.TAdventLevelExpNum ExpNumArr = 7;
  for (int i = 0; i < this->expnumarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->expnumarr(i), output);
  }

  // optional .pb.EAdventureType AdventureType = 8;
  if (has_adventuretype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->adventuretype(), output);
  }

  // optional uint64 MapId = 9;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->mapid(), output);
  }

  // optional uint64 TeamId = 10;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->teamid(), output);
  }

  // optional uint64 MapExpireTime = 11;
  if (has_mapexpiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->mapexpiretime(), output);
  }

  // optional uint32 ActAdventureNum = 12;
  if (has_actadventurenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->actadventurenum(), output);
  }

  // optional .pb.TAdventureActivityInfo ActInfo = 13;
  if (has_actinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->actinfo(), output);
  }

  // optional uint32 RatioMode = 14;
  if (has_ratiomode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->ratiomode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureGetInfoRsp)
}

::google::protobuf::uint8* TAdventureGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureGetInfoRsp)
  // optional uint32 AdventureNum = 1;
  if (has_adventurenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->adventurenum(), target);
  }

  // optional uint32 BuyAdventureNum = 2;
  if (has_buyadventurenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buyadventurenum(), target);
  }

  // optional uint32 FreeRefreshNum = 3;
  if (has_freerefreshnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->freerefreshnum(), target);
  }

  // optional uint32 GoldRefreshNum = 4;
  if (has_goldrefreshnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->goldrefreshnum(), target);
  }

  // optional uint32 AdventureLevelId = 5;
  if (has_adventurelevelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->adventurelevelid(), target);
  }

  // optional .pb.TAdventureMapList MapList = 6;
  if (has_maplist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->maplist(), target);
  }

  // repeated .pb.TAdventLevelExpNum ExpNumArr = 7;
  for (int i = 0; i < this->expnumarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->expnumarr(i), target);
  }

  // optional .pb.EAdventureType AdventureType = 8;
  if (has_adventuretype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->adventuretype(), target);
  }

  // optional uint64 MapId = 9;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->mapid(), target);
  }

  // optional uint64 TeamId = 10;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->teamid(), target);
  }

  // optional uint64 MapExpireTime = 11;
  if (has_mapexpiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->mapexpiretime(), target);
  }

  // optional uint32 ActAdventureNum = 12;
  if (has_actadventurenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->actadventurenum(), target);
  }

  // optional .pb.TAdventureActivityInfo ActInfo = 13;
  if (has_actinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->actinfo(), target);
  }

  // optional uint32 RatioMode = 14;
  if (has_ratiomode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->ratiomode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureGetInfoRsp)
  return target;
}

int TAdventureGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AdventureNum = 1;
    if (has_adventurenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adventurenum());
    }

    // optional uint32 BuyAdventureNum = 2;
    if (has_buyadventurenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buyadventurenum());
    }

    // optional uint32 FreeRefreshNum = 3;
    if (has_freerefreshnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freerefreshnum());
    }

    // optional uint32 GoldRefreshNum = 4;
    if (has_goldrefreshnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goldrefreshnum());
    }

    // optional uint32 AdventureLevelId = 5;
    if (has_adventurelevelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adventurelevelid());
    }

    // optional .pb.TAdventureMapList MapList = 6;
    if (has_maplist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maplist());
    }

    // optional .pb.EAdventureType AdventureType = 8;
    if (has_adventuretype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->adventuretype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 MapId = 9;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

    // optional uint64 TeamId = 10;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 MapExpireTime = 11;
    if (has_mapexpiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapexpiretime());
    }

    // optional uint32 ActAdventureNum = 12;
    if (has_actadventurenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actadventurenum());
    }

    // optional .pb.TAdventureActivityInfo ActInfo = 13;
    if (has_actinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actinfo());
    }

    // optional uint32 RatioMode = 14;
    if (has_ratiomode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ratiomode());
    }

  }
  // repeated .pb.TAdventLevelExpNum ExpNumArr = 7;
  total_size += 1 * this->expnumarr_size();
  for (int i = 0; i < this->expnumarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->expnumarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureGetInfoRsp::MergeFrom(const TAdventureGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  expnumarr_.MergeFrom(from.expnumarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adventurenum()) {
      set_adventurenum(from.adventurenum());
    }
    if (from.has_buyadventurenum()) {
      set_buyadventurenum(from.buyadventurenum());
    }
    if (from.has_freerefreshnum()) {
      set_freerefreshnum(from.freerefreshnum());
    }
    if (from.has_goldrefreshnum()) {
      set_goldrefreshnum(from.goldrefreshnum());
    }
    if (from.has_adventurelevelid()) {
      set_adventurelevelid(from.adventurelevelid());
    }
    if (from.has_maplist()) {
      mutable_maplist()->::pb::TAdventureMapList::MergeFrom(from.maplist());
    }
    if (from.has_adventuretype()) {
      set_adventuretype(from.adventuretype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_mapexpiretime()) {
      set_mapexpiretime(from.mapexpiretime());
    }
    if (from.has_actadventurenum()) {
      set_actadventurenum(from.actadventurenum());
    }
    if (from.has_actinfo()) {
      mutable_actinfo()->::pb::TAdventureActivityInfo::MergeFrom(from.actinfo());
    }
    if (from.has_ratiomode()) {
      set_ratiomode(from.ratiomode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureGetInfoRsp::CopyFrom(const TAdventureGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureGetInfoRsp::IsInitialized() const {

  return true;
}

void TAdventureGetInfoRsp::Swap(TAdventureGetInfoRsp* other) {
  if (other != this) {
    std::swap(adventurenum_, other->adventurenum_);
    std::swap(buyadventurenum_, other->buyadventurenum_);
    std::swap(freerefreshnum_, other->freerefreshnum_);
    std::swap(goldrefreshnum_, other->goldrefreshnum_);
    std::swap(adventurelevelid_, other->adventurelevelid_);
    std::swap(maplist_, other->maplist_);
    expnumarr_.Swap(&other->expnumarr_);
    std::swap(adventuretype_, other->adventuretype_);
    std::swap(mapid_, other->mapid_);
    std::swap(teamid_, other->teamid_);
    std::swap(mapexpiretime_, other->mapexpiretime_);
    std::swap(actadventurenum_, other->actadventurenum_);
    std::swap(actinfo_, other->actinfo_);
    std::swap(ratiomode_, other->ratiomode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureGetInfoRsp_descriptor_;
  metadata.reflection = TAdventureGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureActivityInfo::kCurActMapIdFieldNumber;
const int TAdventureActivityInfo::kActAdventureNumFieldNumber;
const int TAdventureActivityInfo::kActFreeRfrNumFieldNumber;
const int TAdventureActivityInfo::kActGoldRfrNumFieldNumber;
#endif  // !_MSC_VER

TAdventureActivityInfo::TAdventureActivityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureActivityInfo)
}

void TAdventureActivityInfo::InitAsDefaultInstance() {
}

TAdventureActivityInfo::TAdventureActivityInfo(const TAdventureActivityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureActivityInfo)
}

void TAdventureActivityInfo::SharedCtor() {
  _cached_size_ = 0;
  curactmapid_ = 0u;
  actadventurenum_ = 0u;
  actfreerfrnum_ = 0u;
  actgoldrfrnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureActivityInfo::~TAdventureActivityInfo() {
  // @@protoc_insertion_point(destructor:pb.TAdventureActivityInfo)
  SharedDtor();
}

void TAdventureActivityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureActivityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureActivityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureActivityInfo_descriptor_;
}

const TAdventureActivityInfo& TAdventureActivityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureActivityInfo* TAdventureActivityInfo::default_instance_ = NULL;

TAdventureActivityInfo* TAdventureActivityInfo::New() const {
  return new TAdventureActivityInfo;
}

void TAdventureActivityInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureActivityInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(curactmapid_, actgoldrfrnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureActivityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureActivityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CurActMapId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curactmapid_)));
          set_has_curactmapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ActAdventureNum;
        break;
      }

      // optional uint32 ActAdventureNum = 2;
      case 2: {
        if (tag == 16) {
         parse_ActAdventureNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actadventurenum_)));
          set_has_actadventurenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ActFreeRfrNum;
        break;
      }

      // optional uint32 ActFreeRfrNum = 3;
      case 3: {
        if (tag == 24) {
         parse_ActFreeRfrNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actfreerfrnum_)));
          set_has_actfreerfrnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ActGoldRfrNum;
        break;
      }

      // optional uint32 ActGoldRfrNum = 4;
      case 4: {
        if (tag == 32) {
         parse_ActGoldRfrNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actgoldrfrnum_)));
          set_has_actgoldrfrnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureActivityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureActivityInfo)
  return false;
#undef DO_
}

void TAdventureActivityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureActivityInfo)
  // optional uint32 CurActMapId = 1;
  if (has_curactmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curactmapid(), output);
  }

  // optional uint32 ActAdventureNum = 2;
  if (has_actadventurenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->actadventurenum(), output);
  }

  // optional uint32 ActFreeRfrNum = 3;
  if (has_actfreerfrnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->actfreerfrnum(), output);
  }

  // optional uint32 ActGoldRfrNum = 4;
  if (has_actgoldrfrnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->actgoldrfrnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureActivityInfo)
}

::google::protobuf::uint8* TAdventureActivityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureActivityInfo)
  // optional uint32 CurActMapId = 1;
  if (has_curactmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curactmapid(), target);
  }

  // optional uint32 ActAdventureNum = 2;
  if (has_actadventurenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->actadventurenum(), target);
  }

  // optional uint32 ActFreeRfrNum = 3;
  if (has_actfreerfrnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->actfreerfrnum(), target);
  }

  // optional uint32 ActGoldRfrNum = 4;
  if (has_actgoldrfrnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->actgoldrfrnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureActivityInfo)
  return target;
}

int TAdventureActivityInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CurActMapId = 1;
    if (has_curactmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curactmapid());
    }

    // optional uint32 ActAdventureNum = 2;
    if (has_actadventurenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actadventurenum());
    }

    // optional uint32 ActFreeRfrNum = 3;
    if (has_actfreerfrnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actfreerfrnum());
    }

    // optional uint32 ActGoldRfrNum = 4;
    if (has_actgoldrfrnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actgoldrfrnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureActivityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureActivityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureActivityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureActivityInfo::MergeFrom(const TAdventureActivityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curactmapid()) {
      set_curactmapid(from.curactmapid());
    }
    if (from.has_actadventurenum()) {
      set_actadventurenum(from.actadventurenum());
    }
    if (from.has_actfreerfrnum()) {
      set_actfreerfrnum(from.actfreerfrnum());
    }
    if (from.has_actgoldrfrnum()) {
      set_actgoldrfrnum(from.actgoldrfrnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureActivityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureActivityInfo::CopyFrom(const TAdventureActivityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureActivityInfo::IsInitialized() const {

  return true;
}

void TAdventureActivityInfo::Swap(TAdventureActivityInfo* other) {
  if (other != this) {
    std::swap(curactmapid_, other->curactmapid_);
    std::swap(actadventurenum_, other->actadventurenum_);
    std::swap(actfreerfrnum_, other->actfreerfrnum_);
    std::swap(actgoldrfrnum_, other->actgoldrfrnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureActivityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureActivityInfo_descriptor_;
  metadata.reflection = TAdventureActivityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureGetListReq::kAdventureLevelIdFieldNumber;
#endif  // !_MSC_VER

TAdventureGetListReq::TAdventureGetListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureGetListReq)
}

void TAdventureGetListReq::InitAsDefaultInstance() {
}

TAdventureGetListReq::TAdventureGetListReq(const TAdventureGetListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureGetListReq)
}

void TAdventureGetListReq::SharedCtor() {
  _cached_size_ = 0;
  adventurelevelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureGetListReq::~TAdventureGetListReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureGetListReq)
  SharedDtor();
}

void TAdventureGetListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureGetListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureGetListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureGetListReq_descriptor_;
}

const TAdventureGetListReq& TAdventureGetListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureGetListReq* TAdventureGetListReq::default_instance_ = NULL;

TAdventureGetListReq* TAdventureGetListReq::New() const {
  return new TAdventureGetListReq;
}

void TAdventureGetListReq::Clear() {
  adventurelevelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureGetListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureGetListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AdventureLevelId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adventurelevelid_)));
          set_has_adventurelevelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureGetListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureGetListReq)
  return false;
#undef DO_
}

void TAdventureGetListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureGetListReq)
  // optional uint32 AdventureLevelId = 1;
  if (has_adventurelevelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->adventurelevelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureGetListReq)
}

::google::protobuf::uint8* TAdventureGetListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureGetListReq)
  // optional uint32 AdventureLevelId = 1;
  if (has_adventurelevelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->adventurelevelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureGetListReq)
  return target;
}

int TAdventureGetListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AdventureLevelId = 1;
    if (has_adventurelevelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adventurelevelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureGetListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureGetListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureGetListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureGetListReq::MergeFrom(const TAdventureGetListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adventurelevelid()) {
      set_adventurelevelid(from.adventurelevelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureGetListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureGetListReq::CopyFrom(const TAdventureGetListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureGetListReq::IsInitialized() const {

  return true;
}

void TAdventureGetListReq::Swap(TAdventureGetListReq* other) {
  if (other != this) {
    std::swap(adventurelevelid_, other->adventurelevelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureGetListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureGetListReq_descriptor_;
  metadata.reflection = TAdventureGetListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureGetListRsp::kMapListFieldNumber;
#endif  // !_MSC_VER

TAdventureGetListRsp::TAdventureGetListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureGetListRsp)
}

void TAdventureGetListRsp::InitAsDefaultInstance() {
  maplist_ = const_cast< ::pb::TAdventureMapList*>(&::pb::TAdventureMapList::default_instance());
}

TAdventureGetListRsp::TAdventureGetListRsp(const TAdventureGetListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureGetListRsp)
}

void TAdventureGetListRsp::SharedCtor() {
  _cached_size_ = 0;
  maplist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureGetListRsp::~TAdventureGetListRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureGetListRsp)
  SharedDtor();
}

void TAdventureGetListRsp::SharedDtor() {
  if (this != default_instance_) {
    delete maplist_;
  }
}

void TAdventureGetListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureGetListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureGetListRsp_descriptor_;
}

const TAdventureGetListRsp& TAdventureGetListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureGetListRsp* TAdventureGetListRsp::default_instance_ = NULL;

TAdventureGetListRsp* TAdventureGetListRsp::New() const {
  return new TAdventureGetListRsp;
}

void TAdventureGetListRsp::Clear() {
  if (has_maplist()) {
    if (maplist_ != NULL) maplist_->::pb::TAdventureMapList::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureGetListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureGetListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAdventureMapList MapList = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maplist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureGetListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureGetListRsp)
  return false;
#undef DO_
}

void TAdventureGetListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureGetListRsp)
  // optional .pb.TAdventureMapList MapList = 1;
  if (has_maplist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->maplist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureGetListRsp)
}

::google::protobuf::uint8* TAdventureGetListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureGetListRsp)
  // optional .pb.TAdventureMapList MapList = 1;
  if (has_maplist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->maplist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureGetListRsp)
  return target;
}

int TAdventureGetListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAdventureMapList MapList = 1;
    if (has_maplist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maplist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureGetListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureGetListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureGetListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureGetListRsp::MergeFrom(const TAdventureGetListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maplist()) {
      mutable_maplist()->::pb::TAdventureMapList::MergeFrom(from.maplist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureGetListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureGetListRsp::CopyFrom(const TAdventureGetListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureGetListRsp::IsInitialized() const {

  return true;
}

void TAdventureGetListRsp::Swap(TAdventureGetListRsp* other) {
  if (other != this) {
    std::swap(maplist_, other->maplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureGetListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureGetListRsp_descriptor_;
  metadata.reflection = TAdventureGetListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureRefreshListRsp::kMapListFieldNumber;
#endif  // !_MSC_VER

TAdventureRefreshListRsp::TAdventureRefreshListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureRefreshListRsp)
}

void TAdventureRefreshListRsp::InitAsDefaultInstance() {
  maplist_ = const_cast< ::pb::TAdventureMapList*>(&::pb::TAdventureMapList::default_instance());
}

TAdventureRefreshListRsp::TAdventureRefreshListRsp(const TAdventureRefreshListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureRefreshListRsp)
}

void TAdventureRefreshListRsp::SharedCtor() {
  _cached_size_ = 0;
  maplist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureRefreshListRsp::~TAdventureRefreshListRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureRefreshListRsp)
  SharedDtor();
}

void TAdventureRefreshListRsp::SharedDtor() {
  if (this != default_instance_) {
    delete maplist_;
  }
}

void TAdventureRefreshListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureRefreshListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureRefreshListRsp_descriptor_;
}

const TAdventureRefreshListRsp& TAdventureRefreshListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureRefreshListRsp* TAdventureRefreshListRsp::default_instance_ = NULL;

TAdventureRefreshListRsp* TAdventureRefreshListRsp::New() const {
  return new TAdventureRefreshListRsp;
}

void TAdventureRefreshListRsp::Clear() {
  if (has_maplist()) {
    if (maplist_ != NULL) maplist_->::pb::TAdventureMapList::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureRefreshListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureRefreshListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAdventureMapList MapList = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maplist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureRefreshListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureRefreshListRsp)
  return false;
#undef DO_
}

void TAdventureRefreshListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureRefreshListRsp)
  // optional .pb.TAdventureMapList MapList = 1;
  if (has_maplist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->maplist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureRefreshListRsp)
}

::google::protobuf::uint8* TAdventureRefreshListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureRefreshListRsp)
  // optional .pb.TAdventureMapList MapList = 1;
  if (has_maplist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->maplist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureRefreshListRsp)
  return target;
}

int TAdventureRefreshListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAdventureMapList MapList = 1;
    if (has_maplist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maplist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureRefreshListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureRefreshListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureRefreshListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureRefreshListRsp::MergeFrom(const TAdventureRefreshListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maplist()) {
      mutable_maplist()->::pb::TAdventureMapList::MergeFrom(from.maplist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureRefreshListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureRefreshListRsp::CopyFrom(const TAdventureRefreshListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureRefreshListRsp::IsInitialized() const {

  return true;
}

void TAdventureRefreshListRsp::Swap(TAdventureRefreshListRsp* other) {
  if (other != this) {
    std::swap(maplist_, other->maplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureRefreshListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureRefreshListRsp_descriptor_;
  metadata.reflection = TAdventureRefreshListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureStartMapReq::kMapIdFieldNumber;
const int TAdventureStartMapReq::kAdventureTypeFieldNumber;
#endif  // !_MSC_VER

TAdventureStartMapReq::TAdventureStartMapReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureStartMapReq)
}

void TAdventureStartMapReq::InitAsDefaultInstance() {
}

TAdventureStartMapReq::TAdventureStartMapReq(const TAdventureStartMapReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureStartMapReq)
}

void TAdventureStartMapReq::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = GOOGLE_ULONGLONG(0);
  adventuretype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureStartMapReq::~TAdventureStartMapReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureStartMapReq)
  SharedDtor();
}

void TAdventureStartMapReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureStartMapReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureStartMapReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureStartMapReq_descriptor_;
}

const TAdventureStartMapReq& TAdventureStartMapReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureStartMapReq* TAdventureStartMapReq::default_instance_ = NULL;

TAdventureStartMapReq* TAdventureStartMapReq::New() const {
  return new TAdventureStartMapReq;
}

void TAdventureStartMapReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureStartMapReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mapid_, adventuretype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureStartMapReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureStartMapReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 MapId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AdventureType;
        break;
      }

      // optional .pb.EAdventureType AdventureType = 2;
      case 2: {
        if (tag == 16) {
         parse_AdventureType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAdventureType_IsValid(value)) {
            set_adventuretype(static_cast< ::pb::EAdventureType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureStartMapReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureStartMapReq)
  return false;
#undef DO_
}

void TAdventureStartMapReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureStartMapReq)
  // optional uint64 MapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mapid(), output);
  }

  // optional .pb.EAdventureType AdventureType = 2;
  if (has_adventuretype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->adventuretype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureStartMapReq)
}

::google::protobuf::uint8* TAdventureStartMapReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureStartMapReq)
  // optional uint64 MapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mapid(), target);
  }

  // optional .pb.EAdventureType AdventureType = 2;
  if (has_adventuretype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->adventuretype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureStartMapReq)
  return target;
}

int TAdventureStartMapReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 MapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

    // optional .pb.EAdventureType AdventureType = 2;
    if (has_adventuretype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->adventuretype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureStartMapReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureStartMapReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureStartMapReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureStartMapReq::MergeFrom(const TAdventureStartMapReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_adventuretype()) {
      set_adventuretype(from.adventuretype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureStartMapReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureStartMapReq::CopyFrom(const TAdventureStartMapReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureStartMapReq::IsInitialized() const {

  return true;
}

void TAdventureStartMapReq::Swap(TAdventureStartMapReq* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(adventuretype_, other->adventuretype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureStartMapReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureStartMapReq_descriptor_;
  metadata.reflection = TAdventureStartMapReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureEnterMapReq::kTeamIdFieldNumber;
const int TAdventureEnterMapReq::kMapIdFieldNumber;
#endif  // !_MSC_VER

TAdventureEnterMapReq::TAdventureEnterMapReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureEnterMapReq)
}

void TAdventureEnterMapReq::InitAsDefaultInstance() {
}

TAdventureEnterMapReq::TAdventureEnterMapReq(const TAdventureEnterMapReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureEnterMapReq)
}

void TAdventureEnterMapReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  mapid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureEnterMapReq::~TAdventureEnterMapReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureEnterMapReq)
  SharedDtor();
}

void TAdventureEnterMapReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureEnterMapReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureEnterMapReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureEnterMapReq_descriptor_;
}

const TAdventureEnterMapReq& TAdventureEnterMapReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureEnterMapReq* TAdventureEnterMapReq::default_instance_ = NULL;

TAdventureEnterMapReq* TAdventureEnterMapReq::New() const {
  return new TAdventureEnterMapReq;
}

void TAdventureEnterMapReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureEnterMapReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(teamid_, mapid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureEnterMapReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureEnterMapReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MapId;
        break;
      }

      // optional uint64 MapId = 2;
      case 2: {
        if (tag == 16) {
         parse_MapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureEnterMapReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureEnterMapReq)
  return false;
#undef DO_
}

void TAdventureEnterMapReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureEnterMapReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional uint64 MapId = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureEnterMapReq)
}

::google::protobuf::uint8* TAdventureEnterMapReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureEnterMapReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional uint64 MapId = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureEnterMapReq)
  return target;
}

int TAdventureEnterMapReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 MapId = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureEnterMapReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureEnterMapReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureEnterMapReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureEnterMapReq::MergeFrom(const TAdventureEnterMapReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureEnterMapReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureEnterMapReq::CopyFrom(const TAdventureEnterMapReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureEnterMapReq::IsInitialized() const {

  return true;
}

void TAdventureEnterMapReq::Swap(TAdventureEnterMapReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureEnterMapReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureEnterMapReq_descriptor_;
  metadata.reflection = TAdventureEnterMapReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureStartOrEnterMapRsp::kCurMapInfoFieldNumber;
#endif  // !_MSC_VER

TAdventureStartOrEnterMapRsp::TAdventureStartOrEnterMapRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureStartOrEnterMapRsp)
}

void TAdventureStartOrEnterMapRsp::InitAsDefaultInstance() {
  curmapinfo_ = const_cast< ::pb::TAdventureCurMap*>(&::pb::TAdventureCurMap::default_instance());
}

TAdventureStartOrEnterMapRsp::TAdventureStartOrEnterMapRsp(const TAdventureStartOrEnterMapRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureStartOrEnterMapRsp)
}

void TAdventureStartOrEnterMapRsp::SharedCtor() {
  _cached_size_ = 0;
  curmapinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureStartOrEnterMapRsp::~TAdventureStartOrEnterMapRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureStartOrEnterMapRsp)
  SharedDtor();
}

void TAdventureStartOrEnterMapRsp::SharedDtor() {
  if (this != default_instance_) {
    delete curmapinfo_;
  }
}

void TAdventureStartOrEnterMapRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureStartOrEnterMapRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureStartOrEnterMapRsp_descriptor_;
}

const TAdventureStartOrEnterMapRsp& TAdventureStartOrEnterMapRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureStartOrEnterMapRsp* TAdventureStartOrEnterMapRsp::default_instance_ = NULL;

TAdventureStartOrEnterMapRsp* TAdventureStartOrEnterMapRsp::New() const {
  return new TAdventureStartOrEnterMapRsp;
}

void TAdventureStartOrEnterMapRsp::Clear() {
  if (has_curmapinfo()) {
    if (curmapinfo_ != NULL) curmapinfo_->::pb::TAdventureCurMap::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureStartOrEnterMapRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureStartOrEnterMapRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAdventureCurMap CurMapInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curmapinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureStartOrEnterMapRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureStartOrEnterMapRsp)
  return false;
#undef DO_
}

void TAdventureStartOrEnterMapRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureStartOrEnterMapRsp)
  // optional .pb.TAdventureCurMap CurMapInfo = 1;
  if (has_curmapinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->curmapinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureStartOrEnterMapRsp)
}

::google::protobuf::uint8* TAdventureStartOrEnterMapRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureStartOrEnterMapRsp)
  // optional .pb.TAdventureCurMap CurMapInfo = 1;
  if (has_curmapinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->curmapinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureStartOrEnterMapRsp)
  return target;
}

int TAdventureStartOrEnterMapRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAdventureCurMap CurMapInfo = 1;
    if (has_curmapinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->curmapinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureStartOrEnterMapRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureStartOrEnterMapRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureStartOrEnterMapRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureStartOrEnterMapRsp::MergeFrom(const TAdventureStartOrEnterMapRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curmapinfo()) {
      mutable_curmapinfo()->::pb::TAdventureCurMap::MergeFrom(from.curmapinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureStartOrEnterMapRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureStartOrEnterMapRsp::CopyFrom(const TAdventureStartOrEnterMapRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureStartOrEnterMapRsp::IsInitialized() const {

  if (has_curmapinfo()) {
    if (!this->curmapinfo().IsInitialized()) return false;
  }
  return true;
}

void TAdventureStartOrEnterMapRsp::Swap(TAdventureStartOrEnterMapRsp* other) {
  if (other != this) {
    std::swap(curmapinfo_, other->curmapinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureStartOrEnterMapRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureStartOrEnterMapRsp_descriptor_;
  metadata.reflection = TAdventureStartOrEnterMapRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureCastingEventInfo::kLayerIndexFieldNumber;
const int TAdventureCastingEventInfo::kPosXFieldNumber;
const int TAdventureCastingEventInfo::kPosYFieldNumber;
const int TAdventureCastingEventInfo::kCastingNumFieldNumber;
#endif  // !_MSC_VER

TAdventureCastingEventInfo::TAdventureCastingEventInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureCastingEventInfo)
}

void TAdventureCastingEventInfo::InitAsDefaultInstance() {
}

TAdventureCastingEventInfo::TAdventureCastingEventInfo(const TAdventureCastingEventInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureCastingEventInfo)
}

void TAdventureCastingEventInfo::SharedCtor() {
  _cached_size_ = 0;
  layerindex_ = 0u;
  posx_ = 0;
  posy_ = 0;
  castingnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureCastingEventInfo::~TAdventureCastingEventInfo() {
  // @@protoc_insertion_point(destructor:pb.TAdventureCastingEventInfo)
  SharedDtor();
}

void TAdventureCastingEventInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureCastingEventInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureCastingEventInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureCastingEventInfo_descriptor_;
}

const TAdventureCastingEventInfo& TAdventureCastingEventInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureCastingEventInfo* TAdventureCastingEventInfo::default_instance_ = NULL;

TAdventureCastingEventInfo* TAdventureCastingEventInfo::New() const {
  return new TAdventureCastingEventInfo;
}

void TAdventureCastingEventInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureCastingEventInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(layerindex_, castingnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureCastingEventInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureCastingEventInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LayerIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerindex_)));
          set_has_layerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PosX;
        break;
      }

      // optional int32 PosX = 2;
      case 2: {
        if (tag == 16) {
         parse_PosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PosY;
        break;
      }

      // optional int32 PosY = 3;
      case 3: {
        if (tag == 24) {
         parse_PosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_CastingNum;
        break;
      }

      // optional uint32 CastingNum = 4;
      case 4: {
        if (tag == 32) {
         parse_CastingNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &castingnum_)));
          set_has_castingnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureCastingEventInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureCastingEventInfo)
  return false;
#undef DO_
}

void TAdventureCastingEventInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureCastingEventInfo)
  // optional uint32 LayerIndex = 1;
  if (has_layerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layerindex(), output);
  }

  // optional int32 PosX = 2;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posx(), output);
  }

  // optional int32 PosY = 3;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posy(), output);
  }

  // optional uint32 CastingNum = 4;
  if (has_castingnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->castingnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureCastingEventInfo)
}

::google::protobuf::uint8* TAdventureCastingEventInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureCastingEventInfo)
  // optional uint32 LayerIndex = 1;
  if (has_layerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layerindex(), target);
  }

  // optional int32 PosX = 2;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posx(), target);
  }

  // optional int32 PosY = 3;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posy(), target);
  }

  // optional uint32 CastingNum = 4;
  if (has_castingnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->castingnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureCastingEventInfo)
  return target;
}

int TAdventureCastingEventInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LayerIndex = 1;
    if (has_layerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerindex());
    }

    // optional int32 PosX = 2;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 PosY = 3;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // optional uint32 CastingNum = 4;
    if (has_castingnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->castingnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureCastingEventInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureCastingEventInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureCastingEventInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureCastingEventInfo::MergeFrom(const TAdventureCastingEventInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layerindex()) {
      set_layerindex(from.layerindex());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_castingnum()) {
      set_castingnum(from.castingnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureCastingEventInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureCastingEventInfo::CopyFrom(const TAdventureCastingEventInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureCastingEventInfo::IsInitialized() const {

  return true;
}

void TAdventureCastingEventInfo::Swap(TAdventureCastingEventInfo* other) {
  if (other != this) {
    std::swap(layerindex_, other->layerindex_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(castingnum_, other->castingnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureCastingEventInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureCastingEventInfo_descriptor_;
  metadata.reflection = TAdventureCastingEventInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureCurMap::kMapBaseInfoFieldNumber;
const int TAdventureCurMap::kRecordArrayFieldNumber;
const int TAdventureCurMap::kAllUserArrFieldNumber;
const int TAdventureCurMap::kUserInMapArrFieldNumber;
const int TAdventureCurMap::kAdventureTypeFieldNumber;
const int TAdventureCurMap::kTeamIdFieldNumber;
const int TAdventureCurMap::kCurEnergyFieldNumber;
const int TAdventureCurMap::kRewardTimeFieldNumber;
const int TAdventureCurMap::kLeaderUidFieldNumber;
const int TAdventureCurMap::kMonsterInfoArrFieldNumber;
const int TAdventureCurMap::kEnterTimeFieldNumber;
const int TAdventureCurMap::kShopArrFieldNumber;
const int TAdventureCurMap::kRatioModeFieldNumber;
const int TAdventureCurMap::kCastingEventInfoArrFieldNumber;
#endif  // !_MSC_VER

TAdventureCurMap::TAdventureCurMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureCurMap)
}

void TAdventureCurMap::InitAsDefaultInstance() {
  mapbaseinfo_ = const_cast< ::pb::AdventureMap*>(&::pb::AdventureMap::default_instance());
}

TAdventureCurMap::TAdventureCurMap(const TAdventureCurMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureCurMap)
}

void TAdventureCurMap::SharedCtor() {
  _cached_size_ = 0;
  mapbaseinfo_ = NULL;
  adventuretype_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  curenergy_ = 0u;
  rewardtime_ = GOOGLE_ULONGLONG(0);
  leaderuid_ = GOOGLE_ULONGLONG(0);
  entertime_ = GOOGLE_ULONGLONG(0);
  ratiomode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureCurMap::~TAdventureCurMap() {
  // @@protoc_insertion_point(destructor:pb.TAdventureCurMap)
  SharedDtor();
}

void TAdventureCurMap::SharedDtor() {
  if (this != default_instance_) {
    delete mapbaseinfo_;
  }
}

void TAdventureCurMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureCurMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureCurMap_descriptor_;
}

const TAdventureCurMap& TAdventureCurMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureCurMap* TAdventureCurMap::default_instance_ = NULL;

TAdventureCurMap* TAdventureCurMap::New() const {
  return new TAdventureCurMap;
}

void TAdventureCurMap::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureCurMap*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 241) {
    ZR_(teamid_, rewardtime_);
    if (has_mapbaseinfo()) {
      if (mapbaseinfo_ != NULL) mapbaseinfo_->::pb::AdventureMap::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 5376) {
    leaderuid_ = GOOGLE_ULONGLONG(0);
    entertime_ = GOOGLE_ULONGLONG(0);
    ratiomode_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  recordarray_.Clear();
  alluserarr_.Clear();
  userinmaparr_.Clear();
  monsterinfoarr_.Clear();
  shoparr_.Clear();
  castingeventinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureCurMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureCurMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.AdventureMap MapBaseInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapbaseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RecordArray;
        break;
      }

      // repeated .pb.TAdventureTeamRecord RecordArray = 2;
      case 2: {
        if (tag == 18) {
         parse_RecordArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RecordArray;
        if (input->ExpectTag(26)) goto parse_AllUserArr;
        break;
      }

      // repeated .pb.TAdventureUserSimpleInfo AllUserArr = 3;
      case 3: {
        if (tag == 26) {
         parse_AllUserArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alluserarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AllUserArr;
        if (input->ExpectTag(34)) goto parse_UserInMapArr;
        break;
      }

      // repeated .pb.TUserInfoWithPos UserInMapArr = 4;
      case 4: {
        if (tag == 34) {
         parse_UserInMapArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userinmaparr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_UserInMapArr;
        if (input->ExpectTag(40)) goto parse_AdventureType;
        break;
      }

      // optional .pb.EAdventureType AdventureType = 5;
      case 5: {
        if (tag == 40) {
         parse_AdventureType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAdventureType_IsValid(value)) {
            set_adventuretype(static_cast< ::pb::EAdventureType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 7;
      case 7: {
        if (tag == 56) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_CurEnergy;
        break;
      }

      // optional uint32 CurEnergy = 8;
      case 8: {
        if (tag == 64) {
         parse_CurEnergy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curenergy_)));
          set_has_curenergy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_RewardTime;
        break;
      }

      // optional uint64 RewardTime = 9;
      case 9: {
        if (tag == 72) {
         parse_RewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rewardtime_)));
          set_has_rewardtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_LeaderUid;
        break;
      }

      // optional uint64 LeaderUid = 10;
      case 10: {
        if (tag == 80) {
         parse_LeaderUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leaderuid_)));
          set_has_leaderuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_MonsterInfoArr;
        break;
      }

      // repeated .pb.TAdventureMonsterInfo MonsterInfoArr = 11;
      case 11: {
        if (tag == 90) {
         parse_MonsterInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_MonsterInfoArr;
        if (input->ExpectTag(96)) goto parse_EnterTime;
        break;
      }

      // optional uint64 EnterTime = 12;
      case 12: {
        if (tag == 96) {
         parse_EnterTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entertime_)));
          set_has_entertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_ShopArr;
        break;
      }

      // repeated .pb.TAdventureBusinessMan ShopArr = 13;
      case 13: {
        if (tag == 106) {
         parse_ShopArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shoparr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_ShopArr;
        if (input->ExpectTag(112)) goto parse_RatioMode;
        break;
      }

      // optional uint32 RatioMode = 14;
      case 14: {
        if (tag == 112) {
         parse_RatioMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ratiomode_)));
          set_has_ratiomode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_CastingEventInfoArr;
        break;
      }

      // repeated .pb.TAdventureCastingEventInfo CastingEventInfoArr = 15;
      case 15: {
        if (tag == 122) {
         parse_CastingEventInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_castingeventinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_CastingEventInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureCurMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureCurMap)
  return false;
#undef DO_
}

void TAdventureCurMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureCurMap)
  // optional .pb.AdventureMap MapBaseInfo = 1;
  if (has_mapbaseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mapbaseinfo(), output);
  }

  // repeated .pb.TAdventureTeamRecord RecordArray = 2;
  for (int i = 0; i < this->recordarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->recordarray(i), output);
  }

  // repeated .pb.TAdventureUserSimpleInfo AllUserArr = 3;
  for (int i = 0; i < this->alluserarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->alluserarr(i), output);
  }

  // repeated .pb.TUserInfoWithPos UserInMapArr = 4;
  for (int i = 0; i < this->userinmaparr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->userinmaparr(i), output);
  }

  // optional .pb.EAdventureType AdventureType = 5;
  if (has_adventuretype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->adventuretype(), output);
  }

  // optional uint64 TeamId = 7;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->teamid(), output);
  }

  // optional uint32 CurEnergy = 8;
  if (has_curenergy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->curenergy(), output);
  }

  // optional uint64 RewardTime = 9;
  if (has_rewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->rewardtime(), output);
  }

  // optional uint64 LeaderUid = 10;
  if (has_leaderuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->leaderuid(), output);
  }

  // repeated .pb.TAdventureMonsterInfo MonsterInfoArr = 11;
  for (int i = 0; i < this->monsterinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->monsterinfoarr(i), output);
  }

  // optional uint64 EnterTime = 12;
  if (has_entertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->entertime(), output);
  }

  // repeated .pb.TAdventureBusinessMan ShopArr = 13;
  for (int i = 0; i < this->shoparr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->shoparr(i), output);
  }

  // optional uint32 RatioMode = 14;
  if (has_ratiomode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->ratiomode(), output);
  }

  // repeated .pb.TAdventureCastingEventInfo CastingEventInfoArr = 15;
  for (int i = 0; i < this->castingeventinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->castingeventinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureCurMap)
}

::google::protobuf::uint8* TAdventureCurMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureCurMap)
  // optional .pb.AdventureMap MapBaseInfo = 1;
  if (has_mapbaseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mapbaseinfo(), target);
  }

  // repeated .pb.TAdventureTeamRecord RecordArray = 2;
  for (int i = 0; i < this->recordarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->recordarray(i), target);
  }

  // repeated .pb.TAdventureUserSimpleInfo AllUserArr = 3;
  for (int i = 0; i < this->alluserarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->alluserarr(i), target);
  }

  // repeated .pb.TUserInfoWithPos UserInMapArr = 4;
  for (int i = 0; i < this->userinmaparr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->userinmaparr(i), target);
  }

  // optional .pb.EAdventureType AdventureType = 5;
  if (has_adventuretype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->adventuretype(), target);
  }

  // optional uint64 TeamId = 7;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->teamid(), target);
  }

  // optional uint32 CurEnergy = 8;
  if (has_curenergy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->curenergy(), target);
  }

  // optional uint64 RewardTime = 9;
  if (has_rewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->rewardtime(), target);
  }

  // optional uint64 LeaderUid = 10;
  if (has_leaderuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->leaderuid(), target);
  }

  // repeated .pb.TAdventureMonsterInfo MonsterInfoArr = 11;
  for (int i = 0; i < this->monsterinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->monsterinfoarr(i), target);
  }

  // optional uint64 EnterTime = 12;
  if (has_entertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->entertime(), target);
  }

  // repeated .pb.TAdventureBusinessMan ShopArr = 13;
  for (int i = 0; i < this->shoparr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->shoparr(i), target);
  }

  // optional uint32 RatioMode = 14;
  if (has_ratiomode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->ratiomode(), target);
  }

  // repeated .pb.TAdventureCastingEventInfo CastingEventInfoArr = 15;
  for (int i = 0; i < this->castingeventinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->castingeventinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureCurMap)
  return target;
}

int TAdventureCurMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.AdventureMap MapBaseInfo = 1;
    if (has_mapbaseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapbaseinfo());
    }

    // optional .pb.EAdventureType AdventureType = 5;
    if (has_adventuretype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->adventuretype());
    }

    // optional uint64 TeamId = 7;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 CurEnergy = 8;
    if (has_curenergy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curenergy());
    }

    // optional uint64 RewardTime = 9;
    if (has_rewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rewardtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 LeaderUid = 10;
    if (has_leaderuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leaderuid());
    }

    // optional uint64 EnterTime = 12;
    if (has_entertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entertime());
    }

    // optional uint32 RatioMode = 14;
    if (has_ratiomode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ratiomode());
    }

  }
  // repeated .pb.TAdventureTeamRecord RecordArray = 2;
  total_size += 1 * this->recordarray_size();
  for (int i = 0; i < this->recordarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordarray(i));
  }

  // repeated .pb.TAdventureUserSimpleInfo AllUserArr = 3;
  total_size += 1 * this->alluserarr_size();
  for (int i = 0; i < this->alluserarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alluserarr(i));
  }

  // repeated .pb.TUserInfoWithPos UserInMapArr = 4;
  total_size += 1 * this->userinmaparr_size();
  for (int i = 0; i < this->userinmaparr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinmaparr(i));
  }

  // repeated .pb.TAdventureMonsterInfo MonsterInfoArr = 11;
  total_size += 1 * this->monsterinfoarr_size();
  for (int i = 0; i < this->monsterinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterinfoarr(i));
  }

  // repeated .pb.TAdventureBusinessMan ShopArr = 13;
  total_size += 1 * this->shoparr_size();
  for (int i = 0; i < this->shoparr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shoparr(i));
  }

  // repeated .pb.TAdventureCastingEventInfo CastingEventInfoArr = 15;
  total_size += 1 * this->castingeventinfoarr_size();
  for (int i = 0; i < this->castingeventinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->castingeventinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureCurMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureCurMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureCurMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureCurMap::MergeFrom(const TAdventureCurMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordarray_.MergeFrom(from.recordarray_);
  alluserarr_.MergeFrom(from.alluserarr_);
  userinmaparr_.MergeFrom(from.userinmaparr_);
  monsterinfoarr_.MergeFrom(from.monsterinfoarr_);
  shoparr_.MergeFrom(from.shoparr_);
  castingeventinfoarr_.MergeFrom(from.castingeventinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapbaseinfo()) {
      mutable_mapbaseinfo()->::pb::AdventureMap::MergeFrom(from.mapbaseinfo());
    }
    if (from.has_adventuretype()) {
      set_adventuretype(from.adventuretype());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_curenergy()) {
      set_curenergy(from.curenergy());
    }
    if (from.has_rewardtime()) {
      set_rewardtime(from.rewardtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_leaderuid()) {
      set_leaderuid(from.leaderuid());
    }
    if (from.has_entertime()) {
      set_entertime(from.entertime());
    }
    if (from.has_ratiomode()) {
      set_ratiomode(from.ratiomode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureCurMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureCurMap::CopyFrom(const TAdventureCurMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureCurMap::IsInitialized() const {

  if (has_mapbaseinfo()) {
    if (!this->mapbaseinfo().IsInitialized()) return false;
  }
  return true;
}

void TAdventureCurMap::Swap(TAdventureCurMap* other) {
  if (other != this) {
    std::swap(mapbaseinfo_, other->mapbaseinfo_);
    recordarray_.Swap(&other->recordarray_);
    alluserarr_.Swap(&other->alluserarr_);
    userinmaparr_.Swap(&other->userinmaparr_);
    std::swap(adventuretype_, other->adventuretype_);
    std::swap(teamid_, other->teamid_);
    std::swap(curenergy_, other->curenergy_);
    std::swap(rewardtime_, other->rewardtime_);
    std::swap(leaderuid_, other->leaderuid_);
    monsterinfoarr_.Swap(&other->monsterinfoarr_);
    std::swap(entertime_, other->entertime_);
    shoparr_.Swap(&other->shoparr_);
    std::swap(ratiomode_, other->ratiomode_);
    castingeventinfoarr_.Swap(&other->castingeventinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureCurMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureCurMap_descriptor_;
  metadata.reflection = TAdventureCurMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureReportPosReq::kTeamIdFieldNumber;
const int TAdventureReportPosReq::kLayerIndexFieldNumber;
const int TAdventureReportPosReq::kPosXFieldNumber;
const int TAdventureReportPosReq::kPosYFieldNumber;
const int TAdventureReportPosReq::kPosChangeTypeFieldNumber;
#endif  // !_MSC_VER

TAdventureReportPosReq::TAdventureReportPosReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureReportPosReq)
}

void TAdventureReportPosReq::InitAsDefaultInstance() {
}

TAdventureReportPosReq::TAdventureReportPosReq(const TAdventureReportPosReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureReportPosReq)
}

void TAdventureReportPosReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  layerindex_ = 0u;
  posx_ = 0;
  posy_ = 0;
  poschangetype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureReportPosReq::~TAdventureReportPosReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureReportPosReq)
  SharedDtor();
}

void TAdventureReportPosReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureReportPosReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureReportPosReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureReportPosReq_descriptor_;
}

const TAdventureReportPosReq& TAdventureReportPosReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureReportPosReq* TAdventureReportPosReq::default_instance_ = NULL;

TAdventureReportPosReq* TAdventureReportPosReq::New() const {
  return new TAdventureReportPosReq;
}

void TAdventureReportPosReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureReportPosReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(teamid_, posy_);
    poschangetype_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureReportPosReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureReportPosReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LayerIndex;
        break;
      }

      // optional uint32 LayerIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_LayerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerindex_)));
          set_has_layerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PosX;
        break;
      }

      // optional int32 PosX = 3;
      case 3: {
        if (tag == 24) {
         parse_PosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PosY;
        break;
      }

      // optional int32 PosY = 4;
      case 4: {
        if (tag == 32) {
         parse_PosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_PosChangeType;
        break;
      }

      // optional .pb.EAdventurePosChangeType PosChangeType = 5;
      case 5: {
        if (tag == 40) {
         parse_PosChangeType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAdventurePosChangeType_IsValid(value)) {
            set_poschangetype(static_cast< ::pb::EAdventurePosChangeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureReportPosReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureReportPosReq)
  return false;
#undef DO_
}

void TAdventureReportPosReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureReportPosReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional uint32 LayerIndex = 2;
  if (has_layerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->layerindex(), output);
  }

  // optional int32 PosX = 3;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posx(), output);
  }

  // optional int32 PosY = 4;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->posy(), output);
  }

  // optional .pb.EAdventurePosChangeType PosChangeType = 5;
  if (has_poschangetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->poschangetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureReportPosReq)
}

::google::protobuf::uint8* TAdventureReportPosReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureReportPosReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional uint32 LayerIndex = 2;
  if (has_layerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->layerindex(), target);
  }

  // optional int32 PosX = 3;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posx(), target);
  }

  // optional int32 PosY = 4;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->posy(), target);
  }

  // optional .pb.EAdventurePosChangeType PosChangeType = 5;
  if (has_poschangetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->poschangetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureReportPosReq)
  return target;
}

int TAdventureReportPosReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 LayerIndex = 2;
    if (has_layerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerindex());
    }

    // optional int32 PosX = 3;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 PosY = 4;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // optional .pb.EAdventurePosChangeType PosChangeType = 5;
    if (has_poschangetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->poschangetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureReportPosReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureReportPosReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureReportPosReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureReportPosReq::MergeFrom(const TAdventureReportPosReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_layerindex()) {
      set_layerindex(from.layerindex());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_poschangetype()) {
      set_poschangetype(from.poschangetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureReportPosReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureReportPosReq::CopyFrom(const TAdventureReportPosReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureReportPosReq::IsInitialized() const {

  return true;
}

void TAdventureReportPosReq::Swap(TAdventureReportPosReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(layerindex_, other->layerindex_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(poschangetype_, other->poschangetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureReportPosReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureReportPosReq_descriptor_;
  metadata.reflection = TAdventureReportPosReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureQuitMapRsp::kRewardArrayFieldNumber;
const int TAdventureQuitMapRsp::kRatioModeFieldNumber;
#endif  // !_MSC_VER

TAdventureQuitMapRsp::TAdventureQuitMapRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureQuitMapRsp)
}

void TAdventureQuitMapRsp::InitAsDefaultInstance() {
}

TAdventureQuitMapRsp::TAdventureQuitMapRsp(const TAdventureQuitMapRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureQuitMapRsp)
}

void TAdventureQuitMapRsp::SharedCtor() {
  _cached_size_ = 0;
  ratiomode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureQuitMapRsp::~TAdventureQuitMapRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureQuitMapRsp)
  SharedDtor();
}

void TAdventureQuitMapRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureQuitMapRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureQuitMapRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureQuitMapRsp_descriptor_;
}

const TAdventureQuitMapRsp& TAdventureQuitMapRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureQuitMapRsp* TAdventureQuitMapRsp::default_instance_ = NULL;

TAdventureQuitMapRsp* TAdventureQuitMapRsp::New() const {
  return new TAdventureQuitMapRsp;
}

void TAdventureQuitMapRsp::Clear() {
  ratiomode_ = 0u;
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureQuitMapRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureQuitMapRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectTag(16)) goto parse_RatioMode;
        break;
      }

      // optional uint32 RatioMode = 2;
      case 2: {
        if (tag == 16) {
         parse_RatioMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ratiomode_)));
          set_has_ratiomode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureQuitMapRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureQuitMapRsp)
  return false;
#undef DO_
}

void TAdventureQuitMapRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureQuitMapRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  // optional uint32 RatioMode = 2;
  if (has_ratiomode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ratiomode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureQuitMapRsp)
}

::google::protobuf::uint8* TAdventureQuitMapRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureQuitMapRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  // optional uint32 RatioMode = 2;
  if (has_ratiomode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ratiomode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureQuitMapRsp)
  return target;
}

int TAdventureQuitMapRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 RatioMode = 2;
    if (has_ratiomode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ratiomode());
    }

  }
  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureQuitMapRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureQuitMapRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureQuitMapRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureQuitMapRsp::MergeFrom(const TAdventureQuitMapRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ratiomode()) {
      set_ratiomode(from.ratiomode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureQuitMapRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureQuitMapRsp::CopyFrom(const TAdventureQuitMapRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureQuitMapRsp::IsInitialized() const {

  return true;
}

void TAdventureQuitMapRsp::Swap(TAdventureQuitMapRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(ratiomode_, other->ratiomode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureQuitMapRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureQuitMapRsp_descriptor_;
  metadata.reflection = TAdventureQuitMapRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTriggerEventReq::kTeamIdFieldNumber;
const int TAdventureTriggerEventReq::kLayerIndexFieldNumber;
const int TAdventureTriggerEventReq::kXFieldNumber;
const int TAdventureTriggerEventReq::kYFieldNumber;
const int TAdventureTriggerEventReq::kEventIdFieldNumber;
const int TAdventureTriggerEventReq::kHidFieldNumber;
const int TAdventureTriggerEventReq::kChoseIndexFieldNumber;
const int TAdventureTriggerEventReq::kGimmickIndexFieldNumber;
const int TAdventureTriggerEventReq::kStateValueFieldNumber;
const int TAdventureTriggerEventReq::kItemArrFieldNumber;
#endif  // !_MSC_VER

TAdventureTriggerEventReq::TAdventureTriggerEventReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTriggerEventReq)
}

void TAdventureTriggerEventReq::InitAsDefaultInstance() {
}

TAdventureTriggerEventReq::TAdventureTriggerEventReq(const TAdventureTriggerEventReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTriggerEventReq)
}

void TAdventureTriggerEventReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  layerindex_ = 0u;
  x_ = 0;
  y_ = 0;
  eventid_ = 0u;
  hid_ = 0u;
  choseindex_ = 0u;
  gimmickindex_ = 0;
  statevalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTriggerEventReq::~TAdventureTriggerEventReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTriggerEventReq)
  SharedDtor();
}

void TAdventureTriggerEventReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureTriggerEventReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTriggerEventReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTriggerEventReq_descriptor_;
}

const TAdventureTriggerEventReq& TAdventureTriggerEventReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureTriggerEventReq* TAdventureTriggerEventReq::default_instance_ = NULL;

TAdventureTriggerEventReq* TAdventureTriggerEventReq::New() const {
  return new TAdventureTriggerEventReq;
}

void TAdventureTriggerEventReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureTriggerEventReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(teamid_, gimmickindex_);
  }
  statevalue_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  itemarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTriggerEventReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTriggerEventReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LayerIndex;
        break;
      }

      // optional uint32 LayerIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_LayerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerindex_)));
          set_has_layerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_X;
        break;
      }

      // optional int32 X = 3;
      case 3: {
        if (tag == 24) {
         parse_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Y;
        break;
      }

      // optional int32 Y = 4;
      case 4: {
        if (tag == 32) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_EventId;
        break;
      }

      // optional uint32 EventId = 5;
      case 5: {
        if (tag == 40) {
         parse_EventId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Hid;
        break;
      }

      // optional uint32 Hid = 6;
      case 6: {
        if (tag == 48) {
         parse_Hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ChoseIndex;
        break;
      }

      // optional uint32 ChoseIndex = 7;
      case 7: {
        if (tag == 56) {
         parse_ChoseIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &choseindex_)));
          set_has_choseindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_GimmickIndex;
        break;
      }

      // optional int32 GimmickIndex = 8;
      case 8: {
        if (tag == 64) {
         parse_GimmickIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gimmickindex_)));
          set_has_gimmickindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_StateValue;
        break;
      }

      // optional uint32 StateValue = 9;
      case 9: {
        if (tag == 72) {
         parse_StateValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statevalue_)));
          set_has_statevalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ItemArr;
        break;
      }

      // repeated .pb.TSimpleItem ItemArr = 10;
      case 10: {
        if (tag == 82) {
         parse_ItemArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ItemArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTriggerEventReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTriggerEventReq)
  return false;
#undef DO_
}

void TAdventureTriggerEventReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTriggerEventReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional uint32 LayerIndex = 2;
  if (has_layerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->layerindex(), output);
  }

  // optional int32 X = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x(), output);
  }

  // optional int32 Y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y(), output);
  }

  // optional uint32 EventId = 5;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->eventid(), output);
  }

  // optional uint32 Hid = 6;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hid(), output);
  }

  // optional uint32 ChoseIndex = 7;
  if (has_choseindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->choseindex(), output);
  }

  // optional int32 GimmickIndex = 8;
  if (has_gimmickindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->gimmickindex(), output);
  }

  // optional uint32 StateValue = 9;
  if (has_statevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->statevalue(), output);
  }

  // repeated .pb.TSimpleItem ItemArr = 10;
  for (int i = 0; i < this->itemarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->itemarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTriggerEventReq)
}

::google::protobuf::uint8* TAdventureTriggerEventReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTriggerEventReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional uint32 LayerIndex = 2;
  if (has_layerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->layerindex(), target);
  }

  // optional int32 X = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x(), target);
  }

  // optional int32 Y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y(), target);
  }

  // optional uint32 EventId = 5;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->eventid(), target);
  }

  // optional uint32 Hid = 6;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hid(), target);
  }

  // optional uint32 ChoseIndex = 7;
  if (has_choseindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->choseindex(), target);
  }

  // optional int32 GimmickIndex = 8;
  if (has_gimmickindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->gimmickindex(), target);
  }

  // optional uint32 StateValue = 9;
  if (has_statevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->statevalue(), target);
  }

  // repeated .pb.TSimpleItem ItemArr = 10;
  for (int i = 0; i < this->itemarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->itemarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTriggerEventReq)
  return target;
}

int TAdventureTriggerEventReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 LayerIndex = 2;
    if (has_layerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerindex());
    }

    // optional int32 X = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 Y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional uint32 EventId = 5;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

    // optional uint32 Hid = 6;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint32 ChoseIndex = 7;
    if (has_choseindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->choseindex());
    }

    // optional int32 GimmickIndex = 8;
    if (has_gimmickindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gimmickindex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 StateValue = 9;
    if (has_statevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->statevalue());
    }

  }
  // repeated .pb.TSimpleItem ItemArr = 10;
  total_size += 1 * this->itemarr_size();
  for (int i = 0; i < this->itemarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTriggerEventReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTriggerEventReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTriggerEventReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTriggerEventReq::MergeFrom(const TAdventureTriggerEventReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemarr_.MergeFrom(from.itemarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_layerindex()) {
      set_layerindex(from.layerindex());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_choseindex()) {
      set_choseindex(from.choseindex());
    }
    if (from.has_gimmickindex()) {
      set_gimmickindex(from.gimmickindex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_statevalue()) {
      set_statevalue(from.statevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTriggerEventReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTriggerEventReq::CopyFrom(const TAdventureTriggerEventReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTriggerEventReq::IsInitialized() const {

  return true;
}

void TAdventureTriggerEventReq::Swap(TAdventureTriggerEventReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(layerindex_, other->layerindex_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(eventid_, other->eventid_);
    std::swap(hid_, other->hid_);
    std::swap(choseindex_, other->choseindex_);
    std::swap(gimmickindex_, other->gimmickindex_);
    std::swap(statevalue_, other->statevalue_);
    itemarr_.Swap(&other->itemarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTriggerEventReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTriggerEventReq_descriptor_;
  metadata.reflection = TAdventureTriggerEventReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTriggerEventRsp::kEventStatusFieldNumber;
const int TAdventureTriggerEventRsp::kRewardArrayFieldNumber;
const int TAdventureTriggerEventRsp::kEventRetFieldNumber;
const int TAdventureTriggerEventRsp::kCurEnergyFieldNumber;
const int TAdventureTriggerEventRsp::kStateSuccFieldNumber;
#endif  // !_MSC_VER

TAdventureTriggerEventRsp::TAdventureTriggerEventRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTriggerEventRsp)
}

void TAdventureTriggerEventRsp::InitAsDefaultInstance() {
  eventret_ = const_cast< ::pb::TAdventureEventRet*>(&::pb::TAdventureEventRet::default_instance());
}

TAdventureTriggerEventRsp::TAdventureTriggerEventRsp(const TAdventureTriggerEventRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTriggerEventRsp)
}

void TAdventureTriggerEventRsp::SharedCtor() {
  _cached_size_ = 0;
  eventstatus_ = 0;
  eventret_ = NULL;
  curenergy_ = 0u;
  statesucc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTriggerEventRsp::~TAdventureTriggerEventRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTriggerEventRsp)
  SharedDtor();
}

void TAdventureTriggerEventRsp::SharedDtor() {
  if (this != default_instance_) {
    delete eventret_;
  }
}

void TAdventureTriggerEventRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTriggerEventRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTriggerEventRsp_descriptor_;
}

const TAdventureTriggerEventRsp& TAdventureTriggerEventRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureTriggerEventRsp* TAdventureTriggerEventRsp::default_instance_ = NULL;

TAdventureTriggerEventRsp* TAdventureTriggerEventRsp::New() const {
  return new TAdventureTriggerEventRsp;
}

void TAdventureTriggerEventRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureTriggerEventRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 29) {
    ZR_(eventstatus_, curenergy_);
    if (has_eventret()) {
      if (eventret_ != NULL) eventret_->::pb::TAdventureEventRet::Clear();
    }
    statesucc_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTriggerEventRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTriggerEventRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EEventStatus EventStatus = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EEventStatus_IsValid(value)) {
            set_eventstatus(static_cast< ::pb::EEventStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArray;
        break;
      }

      // repeated .pb.TCommonReward RewardArray = 2;
      case 2: {
        if (tag == 18) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArray;
        if (input->ExpectTag(26)) goto parse_EventRet;
        break;
      }

      // optional .pb.TAdventureEventRet EventRet = 3;
      case 3: {
        if (tag == 26) {
         parse_EventRet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eventret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_CurEnergy;
        break;
      }

      // optional uint32 CurEnergy = 4;
      case 4: {
        if (tag == 32) {
         parse_CurEnergy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curenergy_)));
          set_has_curenergy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_StateSucc;
        break;
      }

      // optional uint32 StateSucc = 5;
      case 5: {
        if (tag == 40) {
         parse_StateSucc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statesucc_)));
          set_has_statesucc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTriggerEventRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTriggerEventRsp)
  return false;
#undef DO_
}

void TAdventureTriggerEventRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTriggerEventRsp)
  // optional .pb.EEventStatus EventStatus = 1;
  if (has_eventstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->eventstatus(), output);
  }

  // repeated .pb.TCommonReward RewardArray = 2;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardarray(i), output);
  }

  // optional .pb.TAdventureEventRet EventRet = 3;
  if (has_eventret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->eventret(), output);
  }

  // optional uint32 CurEnergy = 4;
  if (has_curenergy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->curenergy(), output);
  }

  // optional uint32 StateSucc = 5;
  if (has_statesucc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->statesucc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTriggerEventRsp)
}

::google::protobuf::uint8* TAdventureTriggerEventRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTriggerEventRsp)
  // optional .pb.EEventStatus EventStatus = 1;
  if (has_eventstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->eventstatus(), target);
  }

  // repeated .pb.TCommonReward RewardArray = 2;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardarray(i), target);
  }

  // optional .pb.TAdventureEventRet EventRet = 3;
  if (has_eventret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->eventret(), target);
  }

  // optional uint32 CurEnergy = 4;
  if (has_curenergy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->curenergy(), target);
  }

  // optional uint32 StateSucc = 5;
  if (has_statesucc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->statesucc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTriggerEventRsp)
  return target;
}

int TAdventureTriggerEventRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EEventStatus EventStatus = 1;
    if (has_eventstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eventstatus());
    }

    // optional .pb.TAdventureEventRet EventRet = 3;
    if (has_eventret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eventret());
    }

    // optional uint32 CurEnergy = 4;
    if (has_curenergy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curenergy());
    }

    // optional uint32 StateSucc = 5;
    if (has_statesucc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->statesucc());
    }

  }
  // repeated .pb.TCommonReward RewardArray = 2;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTriggerEventRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTriggerEventRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTriggerEventRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTriggerEventRsp::MergeFrom(const TAdventureTriggerEventRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventstatus()) {
      set_eventstatus(from.eventstatus());
    }
    if (from.has_eventret()) {
      mutable_eventret()->::pb::TAdventureEventRet::MergeFrom(from.eventret());
    }
    if (from.has_curenergy()) {
      set_curenergy(from.curenergy());
    }
    if (from.has_statesucc()) {
      set_statesucc(from.statesucc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTriggerEventRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTriggerEventRsp::CopyFrom(const TAdventureTriggerEventRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTriggerEventRsp::IsInitialized() const {

  return true;
}

void TAdventureTriggerEventRsp::Swap(TAdventureTriggerEventRsp* other) {
  if (other != this) {
    std::swap(eventstatus_, other->eventstatus_);
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(eventret_, other->eventret_);
    std::swap(curenergy_, other->curenergy_);
    std::swap(statesucc_, other->statesucc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTriggerEventRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTriggerEventRsp_descriptor_;
  metadata.reflection = TAdventureTriggerEventRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureAnswerReq::kTeamIdFieldNumber;
const int TAdventureAnswerReq::kLayerIndexFieldNumber;
const int TAdventureAnswerReq::kXFieldNumber;
const int TAdventureAnswerReq::kYFieldNumber;
const int TAdventureAnswerReq::kEventIdFieldNumber;
const int TAdventureAnswerReq::kChoseIndexFieldNumber;
#endif  // !_MSC_VER

TAdventureAnswerReq::TAdventureAnswerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureAnswerReq)
}

void TAdventureAnswerReq::InitAsDefaultInstance() {
}

TAdventureAnswerReq::TAdventureAnswerReq(const TAdventureAnswerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureAnswerReq)
}

void TAdventureAnswerReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  layerindex_ = 0u;
  x_ = 0;
  y_ = 0;
  eventid_ = 0u;
  choseindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureAnswerReq::~TAdventureAnswerReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureAnswerReq)
  SharedDtor();
}

void TAdventureAnswerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureAnswerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureAnswerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureAnswerReq_descriptor_;
}

const TAdventureAnswerReq& TAdventureAnswerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureAnswerReq* TAdventureAnswerReq::default_instance_ = NULL;

TAdventureAnswerReq* TAdventureAnswerReq::New() const {
  return new TAdventureAnswerReq;
}

void TAdventureAnswerReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureAnswerReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(teamid_, choseindex_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureAnswerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureAnswerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LayerIndex;
        break;
      }

      // optional uint32 LayerIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_LayerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerindex_)));
          set_has_layerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_X;
        break;
      }

      // optional int32 X = 3;
      case 3: {
        if (tag == 24) {
         parse_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Y;
        break;
      }

      // optional int32 Y = 4;
      case 4: {
        if (tag == 32) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_EventId;
        break;
      }

      // optional uint32 EventId = 5;
      case 5: {
        if (tag == 40) {
         parse_EventId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ChoseIndex;
        break;
      }

      // optional uint32 ChoseIndex = 6;
      case 6: {
        if (tag == 48) {
         parse_ChoseIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &choseindex_)));
          set_has_choseindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureAnswerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureAnswerReq)
  return false;
#undef DO_
}

void TAdventureAnswerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureAnswerReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional uint32 LayerIndex = 2;
  if (has_layerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->layerindex(), output);
  }

  // optional int32 X = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x(), output);
  }

  // optional int32 Y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y(), output);
  }

  // optional uint32 EventId = 5;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->eventid(), output);
  }

  // optional uint32 ChoseIndex = 6;
  if (has_choseindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->choseindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureAnswerReq)
}

::google::protobuf::uint8* TAdventureAnswerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureAnswerReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional uint32 LayerIndex = 2;
  if (has_layerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->layerindex(), target);
  }

  // optional int32 X = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x(), target);
  }

  // optional int32 Y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y(), target);
  }

  // optional uint32 EventId = 5;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->eventid(), target);
  }

  // optional uint32 ChoseIndex = 6;
  if (has_choseindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->choseindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureAnswerReq)
  return target;
}

int TAdventureAnswerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 LayerIndex = 2;
    if (has_layerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerindex());
    }

    // optional int32 X = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 Y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional uint32 EventId = 5;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

    // optional uint32 ChoseIndex = 6;
    if (has_choseindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->choseindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureAnswerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureAnswerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureAnswerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureAnswerReq::MergeFrom(const TAdventureAnswerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_layerindex()) {
      set_layerindex(from.layerindex());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_choseindex()) {
      set_choseindex(from.choseindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureAnswerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureAnswerReq::CopyFrom(const TAdventureAnswerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureAnswerReq::IsInitialized() const {

  return true;
}

void TAdventureAnswerReq::Swap(TAdventureAnswerReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(layerindex_, other->layerindex_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(eventid_, other->eventid_);
    std::swap(choseindex_, other->choseindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureAnswerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureAnswerReq_descriptor_;
  metadata.reflection = TAdventureAnswerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureAnswerEndReq::kTeamIdFieldNumber;
const int TAdventureAnswerEndReq::kLayerIndexFieldNumber;
const int TAdventureAnswerEndReq::kXFieldNumber;
const int TAdventureAnswerEndReq::kYFieldNumber;
#endif  // !_MSC_VER

TAdventureAnswerEndReq::TAdventureAnswerEndReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureAnswerEndReq)
}

void TAdventureAnswerEndReq::InitAsDefaultInstance() {
}

TAdventureAnswerEndReq::TAdventureAnswerEndReq(const TAdventureAnswerEndReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureAnswerEndReq)
}

void TAdventureAnswerEndReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  layerindex_ = 0u;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureAnswerEndReq::~TAdventureAnswerEndReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureAnswerEndReq)
  SharedDtor();
}

void TAdventureAnswerEndReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureAnswerEndReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureAnswerEndReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureAnswerEndReq_descriptor_;
}

const TAdventureAnswerEndReq& TAdventureAnswerEndReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureAnswerEndReq* TAdventureAnswerEndReq::default_instance_ = NULL;

TAdventureAnswerEndReq* TAdventureAnswerEndReq::New() const {
  return new TAdventureAnswerEndReq;
}

void TAdventureAnswerEndReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureAnswerEndReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(teamid_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureAnswerEndReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureAnswerEndReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LayerIndex;
        break;
      }

      // optional uint32 LayerIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_LayerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerindex_)));
          set_has_layerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_X;
        break;
      }

      // optional int32 X = 3;
      case 3: {
        if (tag == 24) {
         parse_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Y;
        break;
      }

      // optional int32 Y = 4;
      case 4: {
        if (tag == 32) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureAnswerEndReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureAnswerEndReq)
  return false;
#undef DO_
}

void TAdventureAnswerEndReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureAnswerEndReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional uint32 LayerIndex = 2;
  if (has_layerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->layerindex(), output);
  }

  // optional int32 X = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x(), output);
  }

  // optional int32 Y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureAnswerEndReq)
}

::google::protobuf::uint8* TAdventureAnswerEndReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureAnswerEndReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional uint32 LayerIndex = 2;
  if (has_layerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->layerindex(), target);
  }

  // optional int32 X = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x(), target);
  }

  // optional int32 Y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureAnswerEndReq)
  return target;
}

int TAdventureAnswerEndReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 LayerIndex = 2;
    if (has_layerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerindex());
    }

    // optional int32 X = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 Y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureAnswerEndReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureAnswerEndReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureAnswerEndReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureAnswerEndReq::MergeFrom(const TAdventureAnswerEndReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_layerindex()) {
      set_layerindex(from.layerindex());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureAnswerEndReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureAnswerEndReq::CopyFrom(const TAdventureAnswerEndReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureAnswerEndReq::IsInitialized() const {

  return true;
}

void TAdventureAnswerEndReq::Swap(TAdventureAnswerEndReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(layerindex_, other->layerindex_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureAnswerEndReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureAnswerEndReq_descriptor_;
  metadata.reflection = TAdventureAnswerEndReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureGetBuffRsp::kBuffArrFieldNumber;
#endif  // !_MSC_VER

TAdventureGetBuffRsp::TAdventureGetBuffRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureGetBuffRsp)
}

void TAdventureGetBuffRsp::InitAsDefaultInstance() {
}

TAdventureGetBuffRsp::TAdventureGetBuffRsp(const TAdventureGetBuffRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureGetBuffRsp)
}

void TAdventureGetBuffRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureGetBuffRsp::~TAdventureGetBuffRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureGetBuffRsp)
  SharedDtor();
}

void TAdventureGetBuffRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureGetBuffRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureGetBuffRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureGetBuffRsp_descriptor_;
}

const TAdventureGetBuffRsp& TAdventureGetBuffRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureGetBuffRsp* TAdventureGetBuffRsp::default_instance_ = NULL;

TAdventureGetBuffRsp* TAdventureGetBuffRsp::New() const {
  return new TAdventureGetBuffRsp;
}

void TAdventureGetBuffRsp::Clear() {
  buffarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureGetBuffRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureGetBuffRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TAdventureBuff BuffArr = 1;
      case 1: {
        if (tag == 10) {
         parse_BuffArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buffarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_BuffArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureGetBuffRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureGetBuffRsp)
  return false;
#undef DO_
}

void TAdventureGetBuffRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureGetBuffRsp)
  // repeated .pb.TAdventureBuff BuffArr = 1;
  for (int i = 0; i < this->buffarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buffarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureGetBuffRsp)
}

::google::protobuf::uint8* TAdventureGetBuffRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureGetBuffRsp)
  // repeated .pb.TAdventureBuff BuffArr = 1;
  for (int i = 0; i < this->buffarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buffarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureGetBuffRsp)
  return target;
}

int TAdventureGetBuffRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TAdventureBuff BuffArr = 1;
  total_size += 1 * this->buffarr_size();
  for (int i = 0; i < this->buffarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buffarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureGetBuffRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureGetBuffRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureGetBuffRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureGetBuffRsp::MergeFrom(const TAdventureGetBuffRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffarr_.MergeFrom(from.buffarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureGetBuffRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureGetBuffRsp::CopyFrom(const TAdventureGetBuffRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureGetBuffRsp::IsInitialized() const {

  return true;
}

void TAdventureGetBuffRsp::Swap(TAdventureGetBuffRsp* other) {
  if (other != this) {
    buffarr_.Swap(&other->buffarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureGetBuffRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureGetBuffRsp_descriptor_;
  metadata.reflection = TAdventureGetBuffRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureReportBattleReq::kBattleResultFieldNumber;
const int TAdventureReportBattleReq::kLayerIndexFieldNumber;
const int TAdventureReportBattleReq::kPosXFieldNumber;
const int TAdventureReportBattleReq::kPosYFieldNumber;
#endif  // !_MSC_VER

TAdventureReportBattleReq::TAdventureReportBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureReportBattleReq)
}

void TAdventureReportBattleReq::InitAsDefaultInstance() {
}

TAdventureReportBattleReq::TAdventureReportBattleReq(const TAdventureReportBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureReportBattleReq)
}

void TAdventureReportBattleReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  battleresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layerindex_ = 0u;
  posx_ = 0;
  posy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureReportBattleReq::~TAdventureReportBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureReportBattleReq)
  SharedDtor();
}

void TAdventureReportBattleReq::SharedDtor() {
  if (battleresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleresult_;
  }
  if (this != default_instance_) {
  }
}

void TAdventureReportBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureReportBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureReportBattleReq_descriptor_;
}

const TAdventureReportBattleReq& TAdventureReportBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureReportBattleReq* TAdventureReportBattleReq::default_instance_ = NULL;

TAdventureReportBattleReq* TAdventureReportBattleReq::New() const {
  return new TAdventureReportBattleReq;
}

void TAdventureReportBattleReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureReportBattleReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(layerindex_, posy_);
    if (has_battleresult()) {
      if (battleresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battleresult_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureReportBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureReportBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes BattleResult = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battleresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LayerIndex;
        break;
      }

      // optional uint32 LayerIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_LayerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerindex_)));
          set_has_layerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PosX;
        break;
      }

      // optional int32 PosX = 3;
      case 3: {
        if (tag == 24) {
         parse_PosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PosY;
        break;
      }

      // optional int32 PosY = 4;
      case 4: {
        if (tag == 32) {
         parse_PosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureReportBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureReportBattleReq)
  return false;
#undef DO_
}

void TAdventureReportBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureReportBattleReq)
  // optional bytes BattleResult = 1;
  if (has_battleresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->battleresult(), output);
  }

  // optional uint32 LayerIndex = 2;
  if (has_layerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->layerindex(), output);
  }

  // optional int32 PosX = 3;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posx(), output);
  }

  // optional int32 PosY = 4;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->posy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureReportBattleReq)
}

::google::protobuf::uint8* TAdventureReportBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureReportBattleReq)
  // optional bytes BattleResult = 1;
  if (has_battleresult()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->battleresult(), target);
  }

  // optional uint32 LayerIndex = 2;
  if (has_layerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->layerindex(), target);
  }

  // optional int32 PosX = 3;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posx(), target);
  }

  // optional int32 PosY = 4;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->posy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureReportBattleReq)
  return target;
}

int TAdventureReportBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes BattleResult = 1;
    if (has_battleresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battleresult());
    }

    // optional uint32 LayerIndex = 2;
    if (has_layerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerindex());
    }

    // optional int32 PosX = 3;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 PosY = 4;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureReportBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureReportBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureReportBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureReportBattleReq::MergeFrom(const TAdventureReportBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleresult()) {
      set_battleresult(from.battleresult());
    }
    if (from.has_layerindex()) {
      set_layerindex(from.layerindex());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureReportBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureReportBattleReq::CopyFrom(const TAdventureReportBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureReportBattleReq::IsInitialized() const {

  return true;
}

void TAdventureReportBattleReq::Swap(TAdventureReportBattleReq* other) {
  if (other != this) {
    std::swap(battleresult_, other->battleresult_);
    std::swap(layerindex_, other->layerindex_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureReportBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureReportBattleReq_descriptor_;
  metadata.reflection = TAdventureReportBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureReportBattleRsp::kRewardArrayFieldNumber;
const int TAdventureReportBattleRsp::kCurEnergyFieldNumber;
const int TAdventureReportBattleRsp::kModelNameFieldNumber;
#endif  // !_MSC_VER

TAdventureReportBattleRsp::TAdventureReportBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureReportBattleRsp)
}

void TAdventureReportBattleRsp::InitAsDefaultInstance() {
}

TAdventureReportBattleRsp::TAdventureReportBattleRsp(const TAdventureReportBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureReportBattleRsp)
}

void TAdventureReportBattleRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  curenergy_ = 0u;
  modelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureReportBattleRsp::~TAdventureReportBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureReportBattleRsp)
  SharedDtor();
}

void TAdventureReportBattleRsp::SharedDtor() {
  if (modelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete modelname_;
  }
  if (this != default_instance_) {
  }
}

void TAdventureReportBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureReportBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureReportBattleRsp_descriptor_;
}

const TAdventureReportBattleRsp& TAdventureReportBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureReportBattleRsp* TAdventureReportBattleRsp::default_instance_ = NULL;

TAdventureReportBattleRsp* TAdventureReportBattleRsp::New() const {
  return new TAdventureReportBattleRsp;
}

void TAdventureReportBattleRsp::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    curenergy_ = 0u;
    if (has_modelname()) {
      if (modelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        modelname_->clear();
      }
    }
  }
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureReportBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureReportBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectTag(16)) goto parse_CurEnergy;
        break;
      }

      // optional uint32 CurEnergy = 2;
      case 2: {
        if (tag == 16) {
         parse_CurEnergy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curenergy_)));
          set_has_curenergy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ModelName;
        break;
      }

      // optional string ModelName = 3;
      case 3: {
        if (tag == 26) {
         parse_ModelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->modelname().data(), this->modelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "modelname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureReportBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureReportBattleRsp)
  return false;
#undef DO_
}

void TAdventureReportBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureReportBattleRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  // optional uint32 CurEnergy = 2;
  if (has_curenergy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curenergy(), output);
  }

  // optional string ModelName = 3;
  if (has_modelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modelname().data(), this->modelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modelname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->modelname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureReportBattleRsp)
}

::google::protobuf::uint8* TAdventureReportBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureReportBattleRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  // optional uint32 CurEnergy = 2;
  if (has_curenergy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curenergy(), target);
  }

  // optional string ModelName = 3;
  if (has_modelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modelname().data(), this->modelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modelname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->modelname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureReportBattleRsp)
  return target;
}

int TAdventureReportBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 CurEnergy = 2;
    if (has_curenergy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curenergy());
    }

    // optional string ModelName = 3;
    if (has_modelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modelname());
    }

  }
  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureReportBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureReportBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureReportBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureReportBattleRsp::MergeFrom(const TAdventureReportBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_curenergy()) {
      set_curenergy(from.curenergy());
    }
    if (from.has_modelname()) {
      set_modelname(from.modelname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureReportBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureReportBattleRsp::CopyFrom(const TAdventureReportBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureReportBattleRsp::IsInitialized() const {

  return true;
}

void TAdventureReportBattleRsp::Swap(TAdventureReportBattleRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(curenergy_, other->curenergy_);
    std::swap(modelname_, other->modelname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureReportBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureReportBattleRsp_descriptor_;
  metadata.reflection = TAdventureReportBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureStartBattleReq::kXFieldNumber;
const int TAdventureStartBattleReq::kYFieldNumber;
const int TAdventureStartBattleReq::kBattleCheckParamFieldNumber;
#endif  // !_MSC_VER

TAdventureStartBattleReq::TAdventureStartBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureStartBattleReq)
}

void TAdventureStartBattleReq::InitAsDefaultInstance() {
  battlecheckparam_ = const_cast< ::pb::TBattleCheckParam*>(&::pb::TBattleCheckParam::default_instance());
}

TAdventureStartBattleReq::TAdventureStartBattleReq(const TAdventureStartBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureStartBattleReq)
}

void TAdventureStartBattleReq::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  battlecheckparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureStartBattleReq::~TAdventureStartBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureStartBattleReq)
  SharedDtor();
}

void TAdventureStartBattleReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlecheckparam_;
  }
}

void TAdventureStartBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureStartBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureStartBattleReq_descriptor_;
}

const TAdventureStartBattleReq& TAdventureStartBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureStartBattleReq* TAdventureStartBattleReq::default_instance_ = NULL;

TAdventureStartBattleReq* TAdventureStartBattleReq::New() const {
  return new TAdventureStartBattleReq;
}

void TAdventureStartBattleReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureStartBattleReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(x_, y_);
    if (has_battlecheckparam()) {
      if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureStartBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureStartBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 X = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Y;
        break;
      }

      // optional int32 Y = 2;
      case 2: {
        if (tag == 16) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BattleCheckParam;
        break;
      }

      // optional .pb.TBattleCheckParam BattleCheckParam = 3;
      case 3: {
        if (tag == 26) {
         parse_BattleCheckParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecheckparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureStartBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureStartBattleReq)
  return false;
#undef DO_
}

void TAdventureStartBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureStartBattleReq)
  // optional int32 X = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 Y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 3;
  if (has_battlecheckparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battlecheckparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureStartBattleReq)
}

::google::protobuf::uint8* TAdventureStartBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureStartBattleReq)
  // optional int32 X = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 Y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 3;
  if (has_battlecheckparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battlecheckparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureStartBattleReq)
  return target;
}

int TAdventureStartBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 X = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 Y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional .pb.TBattleCheckParam BattleCheckParam = 3;
    if (has_battlecheckparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecheckparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureStartBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureStartBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureStartBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureStartBattleReq::MergeFrom(const TAdventureStartBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_battlecheckparam()) {
      mutable_battlecheckparam()->::pb::TBattleCheckParam::MergeFrom(from.battlecheckparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureStartBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureStartBattleReq::CopyFrom(const TAdventureStartBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureStartBattleReq::IsInitialized() const {

  return true;
}

void TAdventureStartBattleReq::Swap(TAdventureStartBattleReq* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(battlecheckparam_, other->battlecheckparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureStartBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureStartBattleReq_descriptor_;
  metadata.reflection = TAdventureStartBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureStartBattleRsp::kRetCodeFieldNumber;
const int TAdventureStartBattleRsp::kBattleinfoIdFieldNumber;
const int TAdventureStartBattleRsp::kBossLevelFieldNumber;
const int TAdventureStartBattleRsp::kMonsterInfoFieldNumber;
const int TAdventureStartBattleRsp::kBattleArgsFieldNumber;
#endif  // !_MSC_VER

TAdventureStartBattleRsp::TAdventureStartBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureStartBattleRsp)
}

void TAdventureStartBattleRsp::InitAsDefaultInstance() {
  monsterinfo_ = const_cast< ::pb::TAdventureBattleMonsterInfo*>(&::pb::TAdventureBattleMonsterInfo::default_instance());
  battleargs_ = const_cast< ::pb::TBattleArgs*>(&::pb::TBattleArgs::default_instance());
}

TAdventureStartBattleRsp::TAdventureStartBattleRsp(const TAdventureStartBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureStartBattleRsp)
}

void TAdventureStartBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 1;
  battleinfoid_ = 0u;
  bosslevel_ = 0u;
  monsterinfo_ = NULL;
  battleargs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureStartBattleRsp::~TAdventureStartBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureStartBattleRsp)
  SharedDtor();
}

void TAdventureStartBattleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete monsterinfo_;
    delete battleargs_;
  }
}

void TAdventureStartBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureStartBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureStartBattleRsp_descriptor_;
}

const TAdventureStartBattleRsp& TAdventureStartBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureStartBattleRsp* TAdventureStartBattleRsp::default_instance_ = NULL;

TAdventureStartBattleRsp* TAdventureStartBattleRsp::New() const {
  return new TAdventureStartBattleRsp;
}

void TAdventureStartBattleRsp::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    retcode_ = 1;
    battleinfoid_ = 0u;
    bosslevel_ = 0u;
    if (has_monsterinfo()) {
      if (monsterinfo_ != NULL) monsterinfo_->::pb::TAdventureBattleMonsterInfo::Clear();
    }
    if (has_battleargs()) {
      if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureStartBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureStartBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EAdventureStartBattleRetCode RetCode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAdventureStartBattleRetCode_IsValid(value)) {
            set_retcode(static_cast< ::pb::EAdventureStartBattleRetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BattleinfoId;
        break;
      }

      // optional uint32 BattleinfoId = 2;
      case 2: {
        if (tag == 16) {
         parse_BattleinfoId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleinfoid_)));
          set_has_battleinfoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BossLevel;
        break;
      }

      // optional uint32 BossLevel = 3;
      case 3: {
        if (tag == 24) {
         parse_BossLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bosslevel_)));
          set_has_bosslevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_MonsterInfo;
        break;
      }

      // optional .pb.TAdventureBattleMonsterInfo MonsterInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_MonsterInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monsterinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_BattleArgs;
        break;
      }

      // optional .pb.TBattleArgs BattleArgs = 5;
      case 5: {
        if (tag == 42) {
         parse_BattleArgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureStartBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureStartBattleRsp)
  return false;
#undef DO_
}

void TAdventureStartBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureStartBattleRsp)
  // optional .pb.EAdventureStartBattleRetCode RetCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->retcode(), output);
  }

  // optional uint32 BattleinfoId = 2;
  if (has_battleinfoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->battleinfoid(), output);
  }

  // optional uint32 BossLevel = 3;
  if (has_bosslevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bosslevel(), output);
  }

  // optional .pb.TAdventureBattleMonsterInfo MonsterInfo = 4;
  if (has_monsterinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->monsterinfo(), output);
  }

  // optional .pb.TBattleArgs BattleArgs = 5;
  if (has_battleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->battleargs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureStartBattleRsp)
}

::google::protobuf::uint8* TAdventureStartBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureStartBattleRsp)
  // optional .pb.EAdventureStartBattleRetCode RetCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->retcode(), target);
  }

  // optional uint32 BattleinfoId = 2;
  if (has_battleinfoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->battleinfoid(), target);
  }

  // optional uint32 BossLevel = 3;
  if (has_bosslevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bosslevel(), target);
  }

  // optional .pb.TAdventureBattleMonsterInfo MonsterInfo = 4;
  if (has_monsterinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->monsterinfo(), target);
  }

  // optional .pb.TBattleArgs BattleArgs = 5;
  if (has_battleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->battleargs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureStartBattleRsp)
  return target;
}

int TAdventureStartBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EAdventureStartBattleRetCode RetCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }

    // optional uint32 BattleinfoId = 2;
    if (has_battleinfoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleinfoid());
    }

    // optional uint32 BossLevel = 3;
    if (has_bosslevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bosslevel());
    }

    // optional .pb.TAdventureBattleMonsterInfo MonsterInfo = 4;
    if (has_monsterinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monsterinfo());
    }

    // optional .pb.TBattleArgs BattleArgs = 5;
    if (has_battleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleargs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureStartBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureStartBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureStartBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureStartBattleRsp::MergeFrom(const TAdventureStartBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_battleinfoid()) {
      set_battleinfoid(from.battleinfoid());
    }
    if (from.has_bosslevel()) {
      set_bosslevel(from.bosslevel());
    }
    if (from.has_monsterinfo()) {
      mutable_monsterinfo()->::pb::TAdventureBattleMonsterInfo::MergeFrom(from.monsterinfo());
    }
    if (from.has_battleargs()) {
      mutable_battleargs()->::pb::TBattleArgs::MergeFrom(from.battleargs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureStartBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureStartBattleRsp::CopyFrom(const TAdventureStartBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureStartBattleRsp::IsInitialized() const {

  if (has_battleargs()) {
    if (!this->battleargs().IsInitialized()) return false;
  }
  return true;
}

void TAdventureStartBattleRsp::Swap(TAdventureStartBattleRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(battleinfoid_, other->battleinfoid_);
    std::swap(bosslevel_, other->bosslevel_);
    std::swap(monsterinfo_, other->monsterinfo_);
    std::swap(battleargs_, other->battleargs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureStartBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureStartBattleRsp_descriptor_;
  metadata.reflection = TAdventureStartBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureBuyNumReq::kBuyNumFieldNumber;
#endif  // !_MSC_VER

TAdventureBuyNumReq::TAdventureBuyNumReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureBuyNumReq)
}

void TAdventureBuyNumReq::InitAsDefaultInstance() {
}

TAdventureBuyNumReq::TAdventureBuyNumReq(const TAdventureBuyNumReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureBuyNumReq)
}

void TAdventureBuyNumReq::SharedCtor() {
  _cached_size_ = 0;
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureBuyNumReq::~TAdventureBuyNumReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureBuyNumReq)
  SharedDtor();
}

void TAdventureBuyNumReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureBuyNumReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureBuyNumReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureBuyNumReq_descriptor_;
}

const TAdventureBuyNumReq& TAdventureBuyNumReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureBuyNumReq* TAdventureBuyNumReq::default_instance_ = NULL;

TAdventureBuyNumReq* TAdventureBuyNumReq::New() const {
  return new TAdventureBuyNumReq;
}

void TAdventureBuyNumReq::Clear() {
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureBuyNumReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureBuyNumReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BuyNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureBuyNumReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureBuyNumReq)
  return false;
#undef DO_
}

void TAdventureBuyNumReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureBuyNumReq)
  // optional uint32 BuyNum = 1;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureBuyNumReq)
}

::google::protobuf::uint8* TAdventureBuyNumReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureBuyNumReq)
  // optional uint32 BuyNum = 1;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureBuyNumReq)
  return target;
}

int TAdventureBuyNumReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BuyNum = 1;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureBuyNumReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureBuyNumReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureBuyNumReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureBuyNumReq::MergeFrom(const TAdventureBuyNumReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureBuyNumReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureBuyNumReq::CopyFrom(const TAdventureBuyNumReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureBuyNumReq::IsInitialized() const {

  return true;
}

void TAdventureBuyNumReq::Swap(TAdventureBuyNumReq* other) {
  if (other != this) {
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureBuyNumReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureBuyNumReq_descriptor_;
  metadata.reflection = TAdventureBuyNumReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventurePassBlocksReq::kBlockArrFieldNumber;
#endif  // !_MSC_VER

TAdventurePassBlocksReq::TAdventurePassBlocksReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventurePassBlocksReq)
}

void TAdventurePassBlocksReq::InitAsDefaultInstance() {
}

TAdventurePassBlocksReq::TAdventurePassBlocksReq(const TAdventurePassBlocksReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventurePassBlocksReq)
}

void TAdventurePassBlocksReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventurePassBlocksReq::~TAdventurePassBlocksReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventurePassBlocksReq)
  SharedDtor();
}

void TAdventurePassBlocksReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventurePassBlocksReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventurePassBlocksReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventurePassBlocksReq_descriptor_;
}

const TAdventurePassBlocksReq& TAdventurePassBlocksReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventurePassBlocksReq* TAdventurePassBlocksReq::default_instance_ = NULL;

TAdventurePassBlocksReq* TAdventurePassBlocksReq::New() const {
  return new TAdventurePassBlocksReq;
}

void TAdventurePassBlocksReq::Clear() {
  blockarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventurePassBlocksReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventurePassBlocksReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TAdventurePassBlock BlockArr = 1;
      case 1: {
        if (tag == 10) {
         parse_BlockArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blockarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_BlockArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventurePassBlocksReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventurePassBlocksReq)
  return false;
#undef DO_
}

void TAdventurePassBlocksReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventurePassBlocksReq)
  // repeated .pb.TAdventurePassBlock BlockArr = 1;
  for (int i = 0; i < this->blockarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blockarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventurePassBlocksReq)
}

::google::protobuf::uint8* TAdventurePassBlocksReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventurePassBlocksReq)
  // repeated .pb.TAdventurePassBlock BlockArr = 1;
  for (int i = 0; i < this->blockarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->blockarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventurePassBlocksReq)
  return target;
}

int TAdventurePassBlocksReq::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TAdventurePassBlock BlockArr = 1;
  total_size += 1 * this->blockarr_size();
  for (int i = 0; i < this->blockarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blockarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventurePassBlocksReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventurePassBlocksReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventurePassBlocksReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventurePassBlocksReq::MergeFrom(const TAdventurePassBlocksReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  blockarr_.MergeFrom(from.blockarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventurePassBlocksReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventurePassBlocksReq::CopyFrom(const TAdventurePassBlocksReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventurePassBlocksReq::IsInitialized() const {

  return true;
}

void TAdventurePassBlocksReq::Swap(TAdventurePassBlocksReq* other) {
  if (other != this) {
    blockarr_.Swap(&other->blockarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventurePassBlocksReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventurePassBlocksReq_descriptor_;
  metadata.reflection = TAdventurePassBlocksReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureReportTalkReq::kTalkIdFieldNumber;
const int TAdventureReportTalkReq::kChooseIdxFieldNumber;
#endif  // !_MSC_VER

TAdventureReportTalkReq::TAdventureReportTalkReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureReportTalkReq)
}

void TAdventureReportTalkReq::InitAsDefaultInstance() {
}

TAdventureReportTalkReq::TAdventureReportTalkReq(const TAdventureReportTalkReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureReportTalkReq)
}

void TAdventureReportTalkReq::SharedCtor() {
  _cached_size_ = 0;
  talkid_ = 0u;
  chooseidx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureReportTalkReq::~TAdventureReportTalkReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureReportTalkReq)
  SharedDtor();
}

void TAdventureReportTalkReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureReportTalkReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureReportTalkReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureReportTalkReq_descriptor_;
}

const TAdventureReportTalkReq& TAdventureReportTalkReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureReportTalkReq* TAdventureReportTalkReq::default_instance_ = NULL;

TAdventureReportTalkReq* TAdventureReportTalkReq::New() const {
  return new TAdventureReportTalkReq;
}

void TAdventureReportTalkReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureReportTalkReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(talkid_, chooseidx_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureReportTalkReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureReportTalkReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TalkId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &talkid_)));
          set_has_talkid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ChooseIdx;
        break;
      }

      // optional uint32 ChooseIdx = 2;
      case 2: {
        if (tag == 16) {
         parse_ChooseIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chooseidx_)));
          set_has_chooseidx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureReportTalkReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureReportTalkReq)
  return false;
#undef DO_
}

void TAdventureReportTalkReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureReportTalkReq)
  // optional uint32 TalkId = 1;
  if (has_talkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->talkid(), output);
  }

  // optional uint32 ChooseIdx = 2;
  if (has_chooseidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->chooseidx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureReportTalkReq)
}

::google::protobuf::uint8* TAdventureReportTalkReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureReportTalkReq)
  // optional uint32 TalkId = 1;
  if (has_talkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->talkid(), target);
  }

  // optional uint32 ChooseIdx = 2;
  if (has_chooseidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->chooseidx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureReportTalkReq)
  return target;
}

int TAdventureReportTalkReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TalkId = 1;
    if (has_talkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->talkid());
    }

    // optional uint32 ChooseIdx = 2;
    if (has_chooseidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chooseidx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureReportTalkReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureReportTalkReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureReportTalkReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureReportTalkReq::MergeFrom(const TAdventureReportTalkReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_talkid()) {
      set_talkid(from.talkid());
    }
    if (from.has_chooseidx()) {
      set_chooseidx(from.chooseidx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureReportTalkReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureReportTalkReq::CopyFrom(const TAdventureReportTalkReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureReportTalkReq::IsInitialized() const {

  return true;
}

void TAdventureReportTalkReq::Swap(TAdventureReportTalkReq* other) {
  if (other != this) {
    std::swap(talkid_, other->talkid_);
    std::swap(chooseidx_, other->chooseidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureReportTalkReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureReportTalkReq_descriptor_;
  metadata.reflection = TAdventureReportTalkReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureReportTalkRsp::kRewardArrayFieldNumber;
#endif  // !_MSC_VER

TAdventureReportTalkRsp::TAdventureReportTalkRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureReportTalkRsp)
}

void TAdventureReportTalkRsp::InitAsDefaultInstance() {
}

TAdventureReportTalkRsp::TAdventureReportTalkRsp(const TAdventureReportTalkRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureReportTalkRsp)
}

void TAdventureReportTalkRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureReportTalkRsp::~TAdventureReportTalkRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureReportTalkRsp)
  SharedDtor();
}

void TAdventureReportTalkRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureReportTalkRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureReportTalkRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureReportTalkRsp_descriptor_;
}

const TAdventureReportTalkRsp& TAdventureReportTalkRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureReportTalkRsp* TAdventureReportTalkRsp::default_instance_ = NULL;

TAdventureReportTalkRsp* TAdventureReportTalkRsp::New() const {
  return new TAdventureReportTalkRsp;
}

void TAdventureReportTalkRsp::Clear() {
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureReportTalkRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureReportTalkRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureReportTalkRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureReportTalkRsp)
  return false;
#undef DO_
}

void TAdventureReportTalkRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureReportTalkRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureReportTalkRsp)
}

::google::protobuf::uint8* TAdventureReportTalkRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureReportTalkRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureReportTalkRsp)
  return target;
}

int TAdventureReportTalkRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureReportTalkRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureReportTalkRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureReportTalkRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureReportTalkRsp::MergeFrom(const TAdventureReportTalkRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureReportTalkRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureReportTalkRsp::CopyFrom(const TAdventureReportTalkRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureReportTalkRsp::IsInitialized() const {

  return true;
}

void TAdventureReportTalkRsp::Swap(TAdventureReportTalkRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureReportTalkRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureReportTalkRsp_descriptor_;
  metadata.reflection = TAdventureReportTalkRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureBuyGoodsReq::kLayerIndexFieldNumber;
const int TAdventureBuyGoodsReq::kPosXFieldNumber;
const int TAdventureBuyGoodsReq::kPosYFieldNumber;
const int TAdventureBuyGoodsReq::kGoodsIdFieldNumber;
const int TAdventureBuyGoodsReq::kBuyNumFieldNumber;
#endif  // !_MSC_VER

TAdventureBuyGoodsReq::TAdventureBuyGoodsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureBuyGoodsReq)
}

void TAdventureBuyGoodsReq::InitAsDefaultInstance() {
}

TAdventureBuyGoodsReq::TAdventureBuyGoodsReq(const TAdventureBuyGoodsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureBuyGoodsReq)
}

void TAdventureBuyGoodsReq::SharedCtor() {
  _cached_size_ = 0;
  layerindex_ = 0u;
  posx_ = 0;
  posy_ = 0;
  goodsid_ = 0u;
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureBuyGoodsReq::~TAdventureBuyGoodsReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureBuyGoodsReq)
  SharedDtor();
}

void TAdventureBuyGoodsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureBuyGoodsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureBuyGoodsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureBuyGoodsReq_descriptor_;
}

const TAdventureBuyGoodsReq& TAdventureBuyGoodsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureBuyGoodsReq* TAdventureBuyGoodsReq::default_instance_ = NULL;

TAdventureBuyGoodsReq* TAdventureBuyGoodsReq::New() const {
  return new TAdventureBuyGoodsReq;
}

void TAdventureBuyGoodsReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureBuyGoodsReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(layerindex_, buynum_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureBuyGoodsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureBuyGoodsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LayerIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerindex_)));
          set_has_layerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PosX;
        break;
      }

      // optional int32 PosX = 2;
      case 2: {
        if (tag == 16) {
         parse_PosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PosY;
        break;
      }

      // optional int32 PosY = 3;
      case 3: {
        if (tag == 24) {
         parse_PosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_GoodsId;
        break;
      }

      // optional uint32 GoodsId = 4;
      case 4: {
        if (tag == 32) {
         parse_GoodsId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goodsid_)));
          set_has_goodsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BuyNum;
        break;
      }

      // optional uint32 BuyNum = 5;
      case 5: {
        if (tag == 40) {
         parse_BuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureBuyGoodsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureBuyGoodsReq)
  return false;
#undef DO_
}

void TAdventureBuyGoodsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureBuyGoodsReq)
  // optional uint32 LayerIndex = 1;
  if (has_layerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layerindex(), output);
  }

  // optional int32 PosX = 2;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posx(), output);
  }

  // optional int32 PosY = 3;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posy(), output);
  }

  // optional uint32 GoodsId = 4;
  if (has_goodsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->goodsid(), output);
  }

  // optional uint32 BuyNum = 5;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureBuyGoodsReq)
}

::google::protobuf::uint8* TAdventureBuyGoodsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureBuyGoodsReq)
  // optional uint32 LayerIndex = 1;
  if (has_layerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layerindex(), target);
  }

  // optional int32 PosX = 2;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posx(), target);
  }

  // optional int32 PosY = 3;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posy(), target);
  }

  // optional uint32 GoodsId = 4;
  if (has_goodsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->goodsid(), target);
  }

  // optional uint32 BuyNum = 5;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureBuyGoodsReq)
  return target;
}

int TAdventureBuyGoodsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LayerIndex = 1;
    if (has_layerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerindex());
    }

    // optional int32 PosX = 2;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 PosY = 3;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // optional uint32 GoodsId = 4;
    if (has_goodsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goodsid());
    }

    // optional uint32 BuyNum = 5;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureBuyGoodsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureBuyGoodsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureBuyGoodsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureBuyGoodsReq::MergeFrom(const TAdventureBuyGoodsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layerindex()) {
      set_layerindex(from.layerindex());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_goodsid()) {
      set_goodsid(from.goodsid());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureBuyGoodsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureBuyGoodsReq::CopyFrom(const TAdventureBuyGoodsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureBuyGoodsReq::IsInitialized() const {

  return true;
}

void TAdventureBuyGoodsReq::Swap(TAdventureBuyGoodsReq* other) {
  if (other != this) {
    std::swap(layerindex_, other->layerindex_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(goodsid_, other->goodsid_);
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureBuyGoodsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureBuyGoodsReq_descriptor_;
  metadata.reflection = TAdventureBuyGoodsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureReceiveCompleteRewardRsp::kRewardArrayFieldNumber;
#endif  // !_MSC_VER

TAdventureReceiveCompleteRewardRsp::TAdventureReceiveCompleteRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureReceiveCompleteRewardRsp)
}

void TAdventureReceiveCompleteRewardRsp::InitAsDefaultInstance() {
}

TAdventureReceiveCompleteRewardRsp::TAdventureReceiveCompleteRewardRsp(const TAdventureReceiveCompleteRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureReceiveCompleteRewardRsp)
}

void TAdventureReceiveCompleteRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureReceiveCompleteRewardRsp::~TAdventureReceiveCompleteRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureReceiveCompleteRewardRsp)
  SharedDtor();
}

void TAdventureReceiveCompleteRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureReceiveCompleteRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureReceiveCompleteRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureReceiveCompleteRewardRsp_descriptor_;
}

const TAdventureReceiveCompleteRewardRsp& TAdventureReceiveCompleteRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureReceiveCompleteRewardRsp* TAdventureReceiveCompleteRewardRsp::default_instance_ = NULL;

TAdventureReceiveCompleteRewardRsp* TAdventureReceiveCompleteRewardRsp::New() const {
  return new TAdventureReceiveCompleteRewardRsp;
}

void TAdventureReceiveCompleteRewardRsp::Clear() {
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureReceiveCompleteRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureReceiveCompleteRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureReceiveCompleteRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureReceiveCompleteRewardRsp)
  return false;
#undef DO_
}

void TAdventureReceiveCompleteRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureReceiveCompleteRewardRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureReceiveCompleteRewardRsp)
}

::google::protobuf::uint8* TAdventureReceiveCompleteRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureReceiveCompleteRewardRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureReceiveCompleteRewardRsp)
  return target;
}

int TAdventureReceiveCompleteRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureReceiveCompleteRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureReceiveCompleteRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureReceiveCompleteRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureReceiveCompleteRewardRsp::MergeFrom(const TAdventureReceiveCompleteRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureReceiveCompleteRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureReceiveCompleteRewardRsp::CopyFrom(const TAdventureReceiveCompleteRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureReceiveCompleteRewardRsp::IsInitialized() const {

  return true;
}

void TAdventureReceiveCompleteRewardRsp::Swap(TAdventureReceiveCompleteRewardRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureReceiveCompleteRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureReceiveCompleteRewardRsp_descriptor_;
  metadata.reflection = TAdventureReceiveCompleteRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureSendToTeamMateReq::kTeamIdFieldNumber;
const int TAdventureSendToTeamMateReq::kMateUidFieldNumber;
#endif  // !_MSC_VER

TAdventureSendToTeamMateReq::TAdventureSendToTeamMateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureSendToTeamMateReq)
}

void TAdventureSendToTeamMateReq::InitAsDefaultInstance() {
}

TAdventureSendToTeamMateReq::TAdventureSendToTeamMateReq(const TAdventureSendToTeamMateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureSendToTeamMateReq)
}

void TAdventureSendToTeamMateReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  mateuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureSendToTeamMateReq::~TAdventureSendToTeamMateReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureSendToTeamMateReq)
  SharedDtor();
}

void TAdventureSendToTeamMateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureSendToTeamMateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureSendToTeamMateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureSendToTeamMateReq_descriptor_;
}

const TAdventureSendToTeamMateReq& TAdventureSendToTeamMateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureSendToTeamMateReq* TAdventureSendToTeamMateReq::default_instance_ = NULL;

TAdventureSendToTeamMateReq* TAdventureSendToTeamMateReq::New() const {
  return new TAdventureSendToTeamMateReq;
}

void TAdventureSendToTeamMateReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureSendToTeamMateReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(teamid_, mateuid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureSendToTeamMateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureSendToTeamMateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MateUid;
        break;
      }

      // optional uint64 MateUid = 2;
      case 2: {
        if (tag == 16) {
         parse_MateUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mateuid_)));
          set_has_mateuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureSendToTeamMateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureSendToTeamMateReq)
  return false;
#undef DO_
}

void TAdventureSendToTeamMateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureSendToTeamMateReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional uint64 MateUid = 2;
  if (has_mateuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mateuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureSendToTeamMateReq)
}

::google::protobuf::uint8* TAdventureSendToTeamMateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureSendToTeamMateReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional uint64 MateUid = 2;
  if (has_mateuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mateuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureSendToTeamMateReq)
  return target;
}

int TAdventureSendToTeamMateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 MateUid = 2;
    if (has_mateuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mateuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureSendToTeamMateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureSendToTeamMateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureSendToTeamMateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureSendToTeamMateReq::MergeFrom(const TAdventureSendToTeamMateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_mateuid()) {
      set_mateuid(from.mateuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureSendToTeamMateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureSendToTeamMateReq::CopyFrom(const TAdventureSendToTeamMateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureSendToTeamMateReq::IsInitialized() const {

  return true;
}

void TAdventureSendToTeamMateReq::Swap(TAdventureSendToTeamMateReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(mateuid_, other->mateuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureSendToTeamMateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureSendToTeamMateReq_descriptor_;
  metadata.reflection = TAdventureSendToTeamMateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureCallTeamMateReq::kTeamIdFieldNumber;
const int TAdventureCallTeamMateReq::kMateUidFieldNumber;
#endif  // !_MSC_VER

TAdventureCallTeamMateReq::TAdventureCallTeamMateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureCallTeamMateReq)
}

void TAdventureCallTeamMateReq::InitAsDefaultInstance() {
}

TAdventureCallTeamMateReq::TAdventureCallTeamMateReq(const TAdventureCallTeamMateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureCallTeamMateReq)
}

void TAdventureCallTeamMateReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  mateuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureCallTeamMateReq::~TAdventureCallTeamMateReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureCallTeamMateReq)
  SharedDtor();
}

void TAdventureCallTeamMateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureCallTeamMateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureCallTeamMateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureCallTeamMateReq_descriptor_;
}

const TAdventureCallTeamMateReq& TAdventureCallTeamMateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureCallTeamMateReq* TAdventureCallTeamMateReq::default_instance_ = NULL;

TAdventureCallTeamMateReq* TAdventureCallTeamMateReq::New() const {
  return new TAdventureCallTeamMateReq;
}

void TAdventureCallTeamMateReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureCallTeamMateReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(teamid_, mateuid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureCallTeamMateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureCallTeamMateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MateUid;
        break;
      }

      // optional uint64 MateUid = 2;
      case 2: {
        if (tag == 16) {
         parse_MateUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mateuid_)));
          set_has_mateuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureCallTeamMateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureCallTeamMateReq)
  return false;
#undef DO_
}

void TAdventureCallTeamMateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureCallTeamMateReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional uint64 MateUid = 2;
  if (has_mateuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mateuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureCallTeamMateReq)
}

::google::protobuf::uint8* TAdventureCallTeamMateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureCallTeamMateReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional uint64 MateUid = 2;
  if (has_mateuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mateuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureCallTeamMateReq)
  return target;
}

int TAdventureCallTeamMateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 MateUid = 2;
    if (has_mateuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mateuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureCallTeamMateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureCallTeamMateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureCallTeamMateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureCallTeamMateReq::MergeFrom(const TAdventureCallTeamMateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_mateuid()) {
      set_mateuid(from.mateuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureCallTeamMateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureCallTeamMateReq::CopyFrom(const TAdventureCallTeamMateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureCallTeamMateReq::IsInitialized() const {

  return true;
}

void TAdventureCallTeamMateReq::Swap(TAdventureCallTeamMateReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(mateuid_, other->mateuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureCallTeamMateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureCallTeamMateReq_descriptor_;
  metadata.reflection = TAdventureCallTeamMateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureCallOrSendRsp::kRetCodeFieldNumber;
#endif  // !_MSC_VER

TAdventureCallOrSendRsp::TAdventureCallOrSendRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureCallOrSendRsp)
}

void TAdventureCallOrSendRsp::InitAsDefaultInstance() {
}

TAdventureCallOrSendRsp::TAdventureCallOrSendRsp(const TAdventureCallOrSendRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureCallOrSendRsp)
}

void TAdventureCallOrSendRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureCallOrSendRsp::~TAdventureCallOrSendRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureCallOrSendRsp)
  SharedDtor();
}

void TAdventureCallOrSendRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureCallOrSendRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureCallOrSendRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureCallOrSendRsp_descriptor_;
}

const TAdventureCallOrSendRsp& TAdventureCallOrSendRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureCallOrSendRsp* TAdventureCallOrSendRsp::default_instance_ = NULL;

TAdventureCallOrSendRsp* TAdventureCallOrSendRsp::New() const {
  return new TAdventureCallOrSendRsp;
}

void TAdventureCallOrSendRsp::Clear() {
  retcode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureCallOrSendRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureCallOrSendRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EAdventureSendToMateRetCode RetCode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAdventureSendToMateRetCode_IsValid(value)) {
            set_retcode(static_cast< ::pb::EAdventureSendToMateRetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureCallOrSendRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureCallOrSendRsp)
  return false;
#undef DO_
}

void TAdventureCallOrSendRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureCallOrSendRsp)
  // optional .pb.EAdventureSendToMateRetCode RetCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureCallOrSendRsp)
}

::google::protobuf::uint8* TAdventureCallOrSendRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureCallOrSendRsp)
  // optional .pb.EAdventureSendToMateRetCode RetCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureCallOrSendRsp)
  return target;
}

int TAdventureCallOrSendRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EAdventureSendToMateRetCode RetCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureCallOrSendRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureCallOrSendRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureCallOrSendRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureCallOrSendRsp::MergeFrom(const TAdventureCallOrSendRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureCallOrSendRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureCallOrSendRsp::CopyFrom(const TAdventureCallOrSendRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureCallOrSendRsp::IsInitialized() const {

  return true;
}

void TAdventureCallOrSendRsp::Swap(TAdventureCallOrSendRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureCallOrSendRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureCallOrSendRsp_descriptor_;
  metadata.reflection = TAdventureCallOrSendRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureAcceptCallReq::kTeamIdFieldNumber;
const int TAdventureAcceptCallReq::kMateUidFieldNumber;
#endif  // !_MSC_VER

TAdventureAcceptCallReq::TAdventureAcceptCallReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureAcceptCallReq)
}

void TAdventureAcceptCallReq::InitAsDefaultInstance() {
}

TAdventureAcceptCallReq::TAdventureAcceptCallReq(const TAdventureAcceptCallReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureAcceptCallReq)
}

void TAdventureAcceptCallReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  mateuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureAcceptCallReq::~TAdventureAcceptCallReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureAcceptCallReq)
  SharedDtor();
}

void TAdventureAcceptCallReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureAcceptCallReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureAcceptCallReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureAcceptCallReq_descriptor_;
}

const TAdventureAcceptCallReq& TAdventureAcceptCallReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureAcceptCallReq* TAdventureAcceptCallReq::default_instance_ = NULL;

TAdventureAcceptCallReq* TAdventureAcceptCallReq::New() const {
  return new TAdventureAcceptCallReq;
}

void TAdventureAcceptCallReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureAcceptCallReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(teamid_, mateuid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureAcceptCallReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureAcceptCallReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MateUid;
        break;
      }

      // optional uint64 MateUid = 2;
      case 2: {
        if (tag == 16) {
         parse_MateUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mateuid_)));
          set_has_mateuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureAcceptCallReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureAcceptCallReq)
  return false;
#undef DO_
}

void TAdventureAcceptCallReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureAcceptCallReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional uint64 MateUid = 2;
  if (has_mateuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mateuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureAcceptCallReq)
}

::google::protobuf::uint8* TAdventureAcceptCallReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureAcceptCallReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional uint64 MateUid = 2;
  if (has_mateuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mateuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureAcceptCallReq)
  return target;
}

int TAdventureAcceptCallReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 MateUid = 2;
    if (has_mateuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mateuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureAcceptCallReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureAcceptCallReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureAcceptCallReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureAcceptCallReq::MergeFrom(const TAdventureAcceptCallReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_mateuid()) {
      set_mateuid(from.mateuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureAcceptCallReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureAcceptCallReq::CopyFrom(const TAdventureAcceptCallReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureAcceptCallReq::IsInitialized() const {

  return true;
}

void TAdventureAcceptCallReq::Swap(TAdventureAcceptCallReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(mateuid_, other->mateuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureAcceptCallReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureAcceptCallReq_descriptor_;
  metadata.reflection = TAdventureAcceptCallReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureGetTeamRankReq::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TAdventureGetTeamRankReq::TAdventureGetTeamRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureGetTeamRankReq)
}

void TAdventureGetTeamRankReq::InitAsDefaultInstance() {
}

TAdventureGetTeamRankReq::TAdventureGetTeamRankReq(const TAdventureGetTeamRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureGetTeamRankReq)
}

void TAdventureGetTeamRankReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureGetTeamRankReq::~TAdventureGetTeamRankReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureGetTeamRankReq)
  SharedDtor();
}

void TAdventureGetTeamRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureGetTeamRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureGetTeamRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureGetTeamRankReq_descriptor_;
}

const TAdventureGetTeamRankReq& TAdventureGetTeamRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureGetTeamRankReq* TAdventureGetTeamRankReq::default_instance_ = NULL;

TAdventureGetTeamRankReq* TAdventureGetTeamRankReq::New() const {
  return new TAdventureGetTeamRankReq;
}

void TAdventureGetTeamRankReq::Clear() {
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureGetTeamRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureGetTeamRankReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureGetTeamRankReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureGetTeamRankReq)
  return false;
#undef DO_
}

void TAdventureGetTeamRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureGetTeamRankReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureGetTeamRankReq)
}

::google::protobuf::uint8* TAdventureGetTeamRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureGetTeamRankReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureGetTeamRankReq)
  return target;
}

int TAdventureGetTeamRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureGetTeamRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureGetTeamRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureGetTeamRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureGetTeamRankReq::MergeFrom(const TAdventureGetTeamRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureGetTeamRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureGetTeamRankReq::CopyFrom(const TAdventureGetTeamRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureGetTeamRankReq::IsInitialized() const {

  return true;
}

void TAdventureGetTeamRankReq::Swap(TAdventureGetTeamRankReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureGetTeamRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureGetTeamRankReq_descriptor_;
  metadata.reflection = TAdventureGetTeamRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureGetTeamRankRsp::kRankUserInfoFieldNumber;
#endif  // !_MSC_VER

TAdventureGetTeamRankRsp::TAdventureGetTeamRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureGetTeamRankRsp)
}

void TAdventureGetTeamRankRsp::InitAsDefaultInstance() {
}

TAdventureGetTeamRankRsp::TAdventureGetTeamRankRsp(const TAdventureGetTeamRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureGetTeamRankRsp)
}

void TAdventureGetTeamRankRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureGetTeamRankRsp::~TAdventureGetTeamRankRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureGetTeamRankRsp)
  SharedDtor();
}

void TAdventureGetTeamRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureGetTeamRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureGetTeamRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureGetTeamRankRsp_descriptor_;
}

const TAdventureGetTeamRankRsp& TAdventureGetTeamRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureGetTeamRankRsp* TAdventureGetTeamRankRsp::default_instance_ = NULL;

TAdventureGetTeamRankRsp* TAdventureGetTeamRankRsp::New() const {
  return new TAdventureGetTeamRankRsp;
}

void TAdventureGetTeamRankRsp::Clear() {
  rankuserinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureGetTeamRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureGetTeamRankRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TAdventureGetTeamRankUserInfo RankUserInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_RankUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RankUserInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureGetTeamRankRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureGetTeamRankRsp)
  return false;
#undef DO_
}

void TAdventureGetTeamRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureGetTeamRankRsp)
  // repeated .pb.TAdventureGetTeamRankUserInfo RankUserInfo = 1;
  for (int i = 0; i < this->rankuserinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankuserinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureGetTeamRankRsp)
}

::google::protobuf::uint8* TAdventureGetTeamRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureGetTeamRankRsp)
  // repeated .pb.TAdventureGetTeamRankUserInfo RankUserInfo = 1;
  for (int i = 0; i < this->rankuserinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankuserinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureGetTeamRankRsp)
  return target;
}

int TAdventureGetTeamRankRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TAdventureGetTeamRankUserInfo RankUserInfo = 1;
  total_size += 1 * this->rankuserinfo_size();
  for (int i = 0; i < this->rankuserinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankuserinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureGetTeamRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureGetTeamRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureGetTeamRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureGetTeamRankRsp::MergeFrom(const TAdventureGetTeamRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankuserinfo_.MergeFrom(from.rankuserinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureGetTeamRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureGetTeamRankRsp::CopyFrom(const TAdventureGetTeamRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureGetTeamRankRsp::IsInitialized() const {

  return true;
}

void TAdventureGetTeamRankRsp::Swap(TAdventureGetTeamRankRsp* other) {
  if (other != this) {
    rankuserinfo_.Swap(&other->rankuserinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureGetTeamRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureGetTeamRankRsp_descriptor_;
  metadata.reflection = TAdventureGetTeamRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureGetCurMapRewardRsp::kRewardArrayFieldNumber;
#endif  // !_MSC_VER

TAdventureGetCurMapRewardRsp::TAdventureGetCurMapRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureGetCurMapRewardRsp)
}

void TAdventureGetCurMapRewardRsp::InitAsDefaultInstance() {
}

TAdventureGetCurMapRewardRsp::TAdventureGetCurMapRewardRsp(const TAdventureGetCurMapRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureGetCurMapRewardRsp)
}

void TAdventureGetCurMapRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureGetCurMapRewardRsp::~TAdventureGetCurMapRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureGetCurMapRewardRsp)
  SharedDtor();
}

void TAdventureGetCurMapRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureGetCurMapRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureGetCurMapRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureGetCurMapRewardRsp_descriptor_;
}

const TAdventureGetCurMapRewardRsp& TAdventureGetCurMapRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureGetCurMapRewardRsp* TAdventureGetCurMapRewardRsp::default_instance_ = NULL;

TAdventureGetCurMapRewardRsp* TAdventureGetCurMapRewardRsp::New() const {
  return new TAdventureGetCurMapRewardRsp;
}

void TAdventureGetCurMapRewardRsp::Clear() {
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureGetCurMapRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureGetCurMapRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureGetCurMapRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureGetCurMapRewardRsp)
  return false;
#undef DO_
}

void TAdventureGetCurMapRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureGetCurMapRewardRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureGetCurMapRewardRsp)
}

::google::protobuf::uint8* TAdventureGetCurMapRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureGetCurMapRewardRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureGetCurMapRewardRsp)
  return target;
}

int TAdventureGetCurMapRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureGetCurMapRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureGetCurMapRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureGetCurMapRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureGetCurMapRewardRsp::MergeFrom(const TAdventureGetCurMapRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureGetCurMapRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureGetCurMapRewardRsp::CopyFrom(const TAdventureGetCurMapRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureGetCurMapRewardRsp::IsInitialized() const {

  return true;
}

void TAdventureGetCurMapRewardRsp::Swap(TAdventureGetCurMapRewardRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureGetCurMapRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureGetCurMapRewardRsp_descriptor_;
  metadata.reflection = TAdventureGetCurMapRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTeamExchangeRpcReq::kUidFieldNumber;
const int TAdventureTeamExchangeRpcReq::kTeamIdFieldNumber;
const int TAdventureTeamExchangeRpcReq::kTeamModeFieldNumber;
const int TAdventureTeamExchangeRpcReq::kCostArrFieldNumber;
const int TAdventureTeamExchangeRpcReq::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TAdventureTeamExchangeRpcReq::TAdventureTeamExchangeRpcReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTeamExchangeRpcReq)
}

void TAdventureTeamExchangeRpcReq::InitAsDefaultInstance() {
}

TAdventureTeamExchangeRpcReq::TAdventureTeamExchangeRpcReq(const TAdventureTeamExchangeRpcReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTeamExchangeRpcReq)
}

void TAdventureTeamExchangeRpcReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  teammode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTeamExchangeRpcReq::~TAdventureTeamExchangeRpcReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTeamExchangeRpcReq)
  SharedDtor();
}

void TAdventureTeamExchangeRpcReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureTeamExchangeRpcReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTeamExchangeRpcReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTeamExchangeRpcReq_descriptor_;
}

const TAdventureTeamExchangeRpcReq& TAdventureTeamExchangeRpcReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureTeamExchangeRpcReq* TAdventureTeamExchangeRpcReq::default_instance_ = NULL;

TAdventureTeamExchangeRpcReq* TAdventureTeamExchangeRpcReq::New() const {
  return new TAdventureTeamExchangeRpcReq;
}

void TAdventureTeamExchangeRpcReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureTeamExchangeRpcReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(uid_, teamid_);
    teammode_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  costarr_.Clear();
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTeamExchangeRpcReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTeamExchangeRpcReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TeamMode;
        break;
      }

      // optional .pb.ETeamMode TeamMode = 3;
      case 3: {
        if (tag == 24) {
         parse_TeamMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ETeamMode_IsValid(value)) {
            set_teammode(static_cast< ::pb::ETeamMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_CostArr;
        break;
      }

      // repeated .pb.TCommonReward CostArr = 4;
      case 4: {
        if (tag == 34) {
         parse_CostArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_costarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_CostArr;
        if (input->ExpectTag(42)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 5;
      case 5: {
        if (tag == 42) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTeamExchangeRpcReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTeamExchangeRpcReq)
  return false;
#undef DO_
}

void TAdventureTeamExchangeRpcReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTeamExchangeRpcReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  // optional .pb.ETeamMode TeamMode = 3;
  if (has_teammode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->teammode(), output);
  }

  // repeated .pb.TCommonReward CostArr = 4;
  for (int i = 0; i < this->costarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->costarr(i), output);
  }

  // repeated .pb.TCommonReward RewardArr = 5;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTeamExchangeRpcReq)
}

::google::protobuf::uint8* TAdventureTeamExchangeRpcReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTeamExchangeRpcReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  // optional .pb.ETeamMode TeamMode = 3;
  if (has_teammode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->teammode(), target);
  }

  // repeated .pb.TCommonReward CostArr = 4;
  for (int i = 0; i < this->costarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->costarr(i), target);
  }

  // repeated .pb.TCommonReward RewardArr = 5;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTeamExchangeRpcReq)
  return target;
}

int TAdventureTeamExchangeRpcReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .pb.ETeamMode TeamMode = 3;
    if (has_teammode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->teammode());
    }

  }
  // repeated .pb.TCommonReward CostArr = 4;
  total_size += 1 * this->costarr_size();
  for (int i = 0; i < this->costarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->costarr(i));
  }

  // repeated .pb.TCommonReward RewardArr = 5;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTeamExchangeRpcReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTeamExchangeRpcReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTeamExchangeRpcReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTeamExchangeRpcReq::MergeFrom(const TAdventureTeamExchangeRpcReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  costarr_.MergeFrom(from.costarr_);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_teammode()) {
      set_teammode(from.teammode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTeamExchangeRpcReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTeamExchangeRpcReq::CopyFrom(const TAdventureTeamExchangeRpcReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTeamExchangeRpcReq::IsInitialized() const {

  return true;
}

void TAdventureTeamExchangeRpcReq::Swap(TAdventureTeamExchangeRpcReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(teamid_, other->teamid_);
    std::swap(teammode_, other->teammode_);
    costarr_.Swap(&other->costarr_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTeamExchangeRpcReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTeamExchangeRpcReq_descriptor_;
  metadata.reflection = TAdventureTeamExchangeRpcReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTeamExchangeRpcRsp::kIsSuccessFieldNumber;
#endif  // !_MSC_VER

TAdventureTeamExchangeRpcRsp::TAdventureTeamExchangeRpcRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTeamExchangeRpcRsp)
}

void TAdventureTeamExchangeRpcRsp::InitAsDefaultInstance() {
}

TAdventureTeamExchangeRpcRsp::TAdventureTeamExchangeRpcRsp(const TAdventureTeamExchangeRpcRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTeamExchangeRpcRsp)
}

void TAdventureTeamExchangeRpcRsp::SharedCtor() {
  _cached_size_ = 0;
  issuccess_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTeamExchangeRpcRsp::~TAdventureTeamExchangeRpcRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTeamExchangeRpcRsp)
  SharedDtor();
}

void TAdventureTeamExchangeRpcRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureTeamExchangeRpcRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTeamExchangeRpcRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTeamExchangeRpcRsp_descriptor_;
}

const TAdventureTeamExchangeRpcRsp& TAdventureTeamExchangeRpcRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureTeamExchangeRpcRsp* TAdventureTeamExchangeRpcRsp::default_instance_ = NULL;

TAdventureTeamExchangeRpcRsp* TAdventureTeamExchangeRpcRsp::New() const {
  return new TAdventureTeamExchangeRpcRsp;
}

void TAdventureTeamExchangeRpcRsp::Clear() {
  issuccess_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTeamExchangeRpcRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTeamExchangeRpcRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsSuccess = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTeamExchangeRpcRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTeamExchangeRpcRsp)
  return false;
#undef DO_
}

void TAdventureTeamExchangeRpcRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTeamExchangeRpcRsp)
  // optional bool IsSuccess = 1;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->issuccess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTeamExchangeRpcRsp)
}

::google::protobuf::uint8* TAdventureTeamExchangeRpcRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTeamExchangeRpcRsp)
  // optional bool IsSuccess = 1;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->issuccess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTeamExchangeRpcRsp)
  return target;
}

int TAdventureTeamExchangeRpcRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsSuccess = 1;
    if (has_issuccess()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTeamExchangeRpcRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTeamExchangeRpcRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTeamExchangeRpcRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTeamExchangeRpcRsp::MergeFrom(const TAdventureTeamExchangeRpcRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTeamExchangeRpcRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTeamExchangeRpcRsp::CopyFrom(const TAdventureTeamExchangeRpcRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTeamExchangeRpcRsp::IsInitialized() const {

  return true;
}

void TAdventureTeamExchangeRpcRsp::Swap(TAdventureTeamExchangeRpcRsp* other) {
  if (other != this) {
    std::swap(issuccess_, other->issuccess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTeamExchangeRpcRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTeamExchangeRpcRsp_descriptor_;
  metadata.reflection = TAdventureTeamExchangeRpcRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureQualityPassInfo::kMapLevelFieldNumber;
const int TAdventureQualityPassInfo::kMapQualityFieldNumber;
const int TAdventureQualityPassInfo::kPassNumFieldNumber;
#endif  // !_MSC_VER

TAdventureQualityPassInfo::TAdventureQualityPassInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureQualityPassInfo)
}

void TAdventureQualityPassInfo::InitAsDefaultInstance() {
}

TAdventureQualityPassInfo::TAdventureQualityPassInfo(const TAdventureQualityPassInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureQualityPassInfo)
}

void TAdventureQualityPassInfo::SharedCtor() {
  _cached_size_ = 0;
  maplevel_ = 0u;
  mapquality_ = 0u;
  passnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureQualityPassInfo::~TAdventureQualityPassInfo() {
  // @@protoc_insertion_point(destructor:pb.TAdventureQualityPassInfo)
  SharedDtor();
}

void TAdventureQualityPassInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureQualityPassInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureQualityPassInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureQualityPassInfo_descriptor_;
}

const TAdventureQualityPassInfo& TAdventureQualityPassInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureQualityPassInfo* TAdventureQualityPassInfo::default_instance_ = NULL;

TAdventureQualityPassInfo* TAdventureQualityPassInfo::New() const {
  return new TAdventureQualityPassInfo;
}

void TAdventureQualityPassInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureQualityPassInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(maplevel_, passnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureQualityPassInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureQualityPassInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MapLevel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maplevel_)));
          set_has_maplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MapQuality;
        break;
      }

      // optional uint32 MapQuality = 2;
      case 2: {
        if (tag == 16) {
         parse_MapQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapquality_)));
          set_has_mapquality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PassNum;
        break;
      }

      // optional uint32 PassNum = 3;
      case 3: {
        if (tag == 24) {
         parse_PassNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passnum_)));
          set_has_passnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureQualityPassInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureQualityPassInfo)
  return false;
#undef DO_
}

void TAdventureQualityPassInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureQualityPassInfo)
  // optional uint32 MapLevel = 1;
  if (has_maplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maplevel(), output);
  }

  // optional uint32 MapQuality = 2;
  if (has_mapquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mapquality(), output);
  }

  // optional uint32 PassNum = 3;
  if (has_passnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->passnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureQualityPassInfo)
}

::google::protobuf::uint8* TAdventureQualityPassInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureQualityPassInfo)
  // optional uint32 MapLevel = 1;
  if (has_maplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maplevel(), target);
  }

  // optional uint32 MapQuality = 2;
  if (has_mapquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mapquality(), target);
  }

  // optional uint32 PassNum = 3;
  if (has_passnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->passnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureQualityPassInfo)
  return target;
}

int TAdventureQualityPassInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MapLevel = 1;
    if (has_maplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maplevel());
    }

    // optional uint32 MapQuality = 2;
    if (has_mapquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapquality());
    }

    // optional uint32 PassNum = 3;
    if (has_passnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureQualityPassInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureQualityPassInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureQualityPassInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureQualityPassInfo::MergeFrom(const TAdventureQualityPassInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maplevel()) {
      set_maplevel(from.maplevel());
    }
    if (from.has_mapquality()) {
      set_mapquality(from.mapquality());
    }
    if (from.has_passnum()) {
      set_passnum(from.passnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureQualityPassInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureQualityPassInfo::CopyFrom(const TAdventureQualityPassInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureQualityPassInfo::IsInitialized() const {

  return true;
}

void TAdventureQualityPassInfo::Swap(TAdventureQualityPassInfo* other) {
  if (other != this) {
    std::swap(maplevel_, other->maplevel_);
    std::swap(mapquality_, other->mapquality_);
    std::swap(passnum_, other->passnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureQualityPassInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureQualityPassInfo_descriptor_;
  metadata.reflection = TAdventureQualityPassInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureGetPassInfoRsp::kPassInfoArrFieldNumber;
#endif  // !_MSC_VER

TAdventureGetPassInfoRsp::TAdventureGetPassInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureGetPassInfoRsp)
}

void TAdventureGetPassInfoRsp::InitAsDefaultInstance() {
}

TAdventureGetPassInfoRsp::TAdventureGetPassInfoRsp(const TAdventureGetPassInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureGetPassInfoRsp)
}

void TAdventureGetPassInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureGetPassInfoRsp::~TAdventureGetPassInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureGetPassInfoRsp)
  SharedDtor();
}

void TAdventureGetPassInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureGetPassInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureGetPassInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureGetPassInfoRsp_descriptor_;
}

const TAdventureGetPassInfoRsp& TAdventureGetPassInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureGetPassInfoRsp* TAdventureGetPassInfoRsp::default_instance_ = NULL;

TAdventureGetPassInfoRsp* TAdventureGetPassInfoRsp::New() const {
  return new TAdventureGetPassInfoRsp;
}

void TAdventureGetPassInfoRsp::Clear() {
  passinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureGetPassInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureGetPassInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TAdventureQualityPassInfo PassInfoArr = 1;
      case 1: {
        if (tag == 10) {
         parse_PassInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_passinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_PassInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureGetPassInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureGetPassInfoRsp)
  return false;
#undef DO_
}

void TAdventureGetPassInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureGetPassInfoRsp)
  // repeated .pb.TAdventureQualityPassInfo PassInfoArr = 1;
  for (int i = 0; i < this->passinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->passinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureGetPassInfoRsp)
}

::google::protobuf::uint8* TAdventureGetPassInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureGetPassInfoRsp)
  // repeated .pb.TAdventureQualityPassInfo PassInfoArr = 1;
  for (int i = 0; i < this->passinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->passinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureGetPassInfoRsp)
  return target;
}

int TAdventureGetPassInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TAdventureQualityPassInfo PassInfoArr = 1;
  total_size += 1 * this->passinfoarr_size();
  for (int i = 0; i < this->passinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->passinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureGetPassInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureGetPassInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureGetPassInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureGetPassInfoRsp::MergeFrom(const TAdventureGetPassInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  passinfoarr_.MergeFrom(from.passinfoarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureGetPassInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureGetPassInfoRsp::CopyFrom(const TAdventureGetPassInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureGetPassInfoRsp::IsInitialized() const {

  return true;
}

void TAdventureGetPassInfoRsp::Swap(TAdventureGetPassInfoRsp* other) {
  if (other != this) {
    passinfoarr_.Swap(&other->passinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureGetPassInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureGetPassInfoRsp_descriptor_;
  metadata.reflection = TAdventureGetPassInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureRefreshActMapReq::kCostTypeFieldNumber;
#endif  // !_MSC_VER

TAdventureRefreshActMapReq::TAdventureRefreshActMapReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureRefreshActMapReq)
}

void TAdventureRefreshActMapReq::InitAsDefaultInstance() {
}

TAdventureRefreshActMapReq::TAdventureRefreshActMapReq(const TAdventureRefreshActMapReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureRefreshActMapReq)
}

void TAdventureRefreshActMapReq::SharedCtor() {
  _cached_size_ = 0;
  costtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureRefreshActMapReq::~TAdventureRefreshActMapReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureRefreshActMapReq)
  SharedDtor();
}

void TAdventureRefreshActMapReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureRefreshActMapReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureRefreshActMapReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureRefreshActMapReq_descriptor_;
}

const TAdventureRefreshActMapReq& TAdventureRefreshActMapReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureRefreshActMapReq* TAdventureRefreshActMapReq::default_instance_ = NULL;

TAdventureRefreshActMapReq* TAdventureRefreshActMapReq::New() const {
  return new TAdventureRefreshActMapReq;
}

void TAdventureRefreshActMapReq::Clear() {
  costtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureRefreshActMapReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureRefreshActMapReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EAdventureRefreshMapCostType CostType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAdventureRefreshMapCostType_IsValid(value)) {
            set_costtype(static_cast< ::pb::EAdventureRefreshMapCostType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureRefreshActMapReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureRefreshActMapReq)
  return false;
#undef DO_
}

void TAdventureRefreshActMapReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureRefreshActMapReq)
  // optional .pb.EAdventureRefreshMapCostType CostType = 1;
  if (has_costtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->costtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureRefreshActMapReq)
}

::google::protobuf::uint8* TAdventureRefreshActMapReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureRefreshActMapReq)
  // optional .pb.EAdventureRefreshMapCostType CostType = 1;
  if (has_costtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->costtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureRefreshActMapReq)
  return target;
}

int TAdventureRefreshActMapReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EAdventureRefreshMapCostType CostType = 1;
    if (has_costtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->costtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureRefreshActMapReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureRefreshActMapReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureRefreshActMapReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureRefreshActMapReq::MergeFrom(const TAdventureRefreshActMapReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_costtype()) {
      set_costtype(from.costtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureRefreshActMapReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureRefreshActMapReq::CopyFrom(const TAdventureRefreshActMapReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureRefreshActMapReq::IsInitialized() const {

  return true;
}

void TAdventureRefreshActMapReq::Swap(TAdventureRefreshActMapReq* other) {
  if (other != this) {
    std::swap(costtype_, other->costtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureRefreshActMapReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureRefreshActMapReq_descriptor_;
  metadata.reflection = TAdventureRefreshActMapReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureRefreshActMapRsp::kActMapIdFieldNumber;
#endif  // !_MSC_VER

TAdventureRefreshActMapRsp::TAdventureRefreshActMapRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureRefreshActMapRsp)
}

void TAdventureRefreshActMapRsp::InitAsDefaultInstance() {
}

TAdventureRefreshActMapRsp::TAdventureRefreshActMapRsp(const TAdventureRefreshActMapRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureRefreshActMapRsp)
}

void TAdventureRefreshActMapRsp::SharedCtor() {
  _cached_size_ = 0;
  actmapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureRefreshActMapRsp::~TAdventureRefreshActMapRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureRefreshActMapRsp)
  SharedDtor();
}

void TAdventureRefreshActMapRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureRefreshActMapRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureRefreshActMapRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureRefreshActMapRsp_descriptor_;
}

const TAdventureRefreshActMapRsp& TAdventureRefreshActMapRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureRefreshActMapRsp* TAdventureRefreshActMapRsp::default_instance_ = NULL;

TAdventureRefreshActMapRsp* TAdventureRefreshActMapRsp::New() const {
  return new TAdventureRefreshActMapRsp;
}

void TAdventureRefreshActMapRsp::Clear() {
  actmapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureRefreshActMapRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureRefreshActMapRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ActMapId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actmapid_)));
          set_has_actmapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureRefreshActMapRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureRefreshActMapRsp)
  return false;
#undef DO_
}

void TAdventureRefreshActMapRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureRefreshActMapRsp)
  // optional uint32 ActMapId = 1;
  if (has_actmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->actmapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureRefreshActMapRsp)
}

::google::protobuf::uint8* TAdventureRefreshActMapRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureRefreshActMapRsp)
  // optional uint32 ActMapId = 1;
  if (has_actmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->actmapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureRefreshActMapRsp)
  return target;
}

int TAdventureRefreshActMapRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ActMapId = 1;
    if (has_actmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actmapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureRefreshActMapRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureRefreshActMapRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureRefreshActMapRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureRefreshActMapRsp::MergeFrom(const TAdventureRefreshActMapRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actmapid()) {
      set_actmapid(from.actmapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureRefreshActMapRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureRefreshActMapRsp::CopyFrom(const TAdventureRefreshActMapRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureRefreshActMapRsp::IsInitialized() const {

  return true;
}

void TAdventureRefreshActMapRsp::Swap(TAdventureRefreshActMapRsp* other) {
  if (other != this) {
    std::swap(actmapid_, other->actmapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureRefreshActMapRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureRefreshActMapRsp_descriptor_;
  metadata.reflection = TAdventureRefreshActMapRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureBackToStartPosRsp::kStartLayerIndexFieldNumber;
const int TAdventureBackToStartPosRsp::kStartPosXFieldNumber;
const int TAdventureBackToStartPosRsp::kStartPosYFieldNumber;
#endif  // !_MSC_VER

TAdventureBackToStartPosRsp::TAdventureBackToStartPosRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureBackToStartPosRsp)
}

void TAdventureBackToStartPosRsp::InitAsDefaultInstance() {
}

TAdventureBackToStartPosRsp::TAdventureBackToStartPosRsp(const TAdventureBackToStartPosRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureBackToStartPosRsp)
}

void TAdventureBackToStartPosRsp::SharedCtor() {
  _cached_size_ = 0;
  startlayerindex_ = 0u;
  startposx_ = 0;
  startposy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureBackToStartPosRsp::~TAdventureBackToStartPosRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureBackToStartPosRsp)
  SharedDtor();
}

void TAdventureBackToStartPosRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureBackToStartPosRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureBackToStartPosRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureBackToStartPosRsp_descriptor_;
}

const TAdventureBackToStartPosRsp& TAdventureBackToStartPosRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureBackToStartPosRsp* TAdventureBackToStartPosRsp::default_instance_ = NULL;

TAdventureBackToStartPosRsp* TAdventureBackToStartPosRsp::New() const {
  return new TAdventureBackToStartPosRsp;
}

void TAdventureBackToStartPosRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureBackToStartPosRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(startlayerindex_, startposy_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureBackToStartPosRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureBackToStartPosRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 StartLayerIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startlayerindex_)));
          set_has_startlayerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_StartPosX;
        break;
      }

      // optional int32 StartPosX = 2;
      case 2: {
        if (tag == 16) {
         parse_StartPosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startposx_)));
          set_has_startposx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_StartPosY;
        break;
      }

      // optional int32 StartPosY = 3;
      case 3: {
        if (tag == 24) {
         parse_StartPosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startposy_)));
          set_has_startposy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureBackToStartPosRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureBackToStartPosRsp)
  return false;
#undef DO_
}

void TAdventureBackToStartPosRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureBackToStartPosRsp)
  // optional uint32 StartLayerIndex = 1;
  if (has_startlayerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->startlayerindex(), output);
  }

  // optional int32 StartPosX = 2;
  if (has_startposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->startposx(), output);
  }

  // optional int32 StartPosY = 3;
  if (has_startposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->startposy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureBackToStartPosRsp)
}

::google::protobuf::uint8* TAdventureBackToStartPosRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureBackToStartPosRsp)
  // optional uint32 StartLayerIndex = 1;
  if (has_startlayerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->startlayerindex(), target);
  }

  // optional int32 StartPosX = 2;
  if (has_startposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->startposx(), target);
  }

  // optional int32 StartPosY = 3;
  if (has_startposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->startposy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureBackToStartPosRsp)
  return target;
}

int TAdventureBackToStartPosRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 StartLayerIndex = 1;
    if (has_startlayerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startlayerindex());
    }

    // optional int32 StartPosX = 2;
    if (has_startposx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startposx());
    }

    // optional int32 StartPosY = 3;
    if (has_startposy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startposy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureBackToStartPosRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureBackToStartPosRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureBackToStartPosRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureBackToStartPosRsp::MergeFrom(const TAdventureBackToStartPosRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startlayerindex()) {
      set_startlayerindex(from.startlayerindex());
    }
    if (from.has_startposx()) {
      set_startposx(from.startposx());
    }
    if (from.has_startposy()) {
      set_startposy(from.startposy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureBackToStartPosRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureBackToStartPosRsp::CopyFrom(const TAdventureBackToStartPosRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureBackToStartPosRsp::IsInitialized() const {

  return true;
}

void TAdventureBackToStartPosRsp::Swap(TAdventureBackToStartPosRsp* other) {
  if (other != this) {
    std::swap(startlayerindex_, other->startlayerindex_);
    std::swap(startposx_, other->startposx_);
    std::swap(startposy_, other->startposy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureBackToStartPosRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureBackToStartPosRsp_descriptor_;
  metadata.reflection = TAdventureBackToStartPosRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureSetRatioModeReq::kRatioModeFieldNumber;
#endif  // !_MSC_VER

TAdventureSetRatioModeReq::TAdventureSetRatioModeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureSetRatioModeReq)
}

void TAdventureSetRatioModeReq::InitAsDefaultInstance() {
}

TAdventureSetRatioModeReq::TAdventureSetRatioModeReq(const TAdventureSetRatioModeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureSetRatioModeReq)
}

void TAdventureSetRatioModeReq::SharedCtor() {
  _cached_size_ = 0;
  ratiomode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureSetRatioModeReq::~TAdventureSetRatioModeReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureSetRatioModeReq)
  SharedDtor();
}

void TAdventureSetRatioModeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureSetRatioModeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureSetRatioModeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureSetRatioModeReq_descriptor_;
}

const TAdventureSetRatioModeReq& TAdventureSetRatioModeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureSetRatioModeReq* TAdventureSetRatioModeReq::default_instance_ = NULL;

TAdventureSetRatioModeReq* TAdventureSetRatioModeReq::New() const {
  return new TAdventureSetRatioModeReq;
}

void TAdventureSetRatioModeReq::Clear() {
  ratiomode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureSetRatioModeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureSetRatioModeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RatioMode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ratiomode_)));
          set_has_ratiomode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureSetRatioModeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureSetRatioModeReq)
  return false;
#undef DO_
}

void TAdventureSetRatioModeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureSetRatioModeReq)
  // optional uint32 RatioMode = 1;
  if (has_ratiomode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ratiomode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureSetRatioModeReq)
}

::google::protobuf::uint8* TAdventureSetRatioModeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureSetRatioModeReq)
  // optional uint32 RatioMode = 1;
  if (has_ratiomode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ratiomode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureSetRatioModeReq)
  return target;
}

int TAdventureSetRatioModeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RatioMode = 1;
    if (has_ratiomode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ratiomode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureSetRatioModeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureSetRatioModeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureSetRatioModeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureSetRatioModeReq::MergeFrom(const TAdventureSetRatioModeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ratiomode()) {
      set_ratiomode(from.ratiomode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureSetRatioModeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureSetRatioModeReq::CopyFrom(const TAdventureSetRatioModeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureSetRatioModeReq::IsInitialized() const {

  return true;
}

void TAdventureSetRatioModeReq::Swap(TAdventureSetRatioModeReq* other) {
  if (other != this) {
    std::swap(ratiomode_, other->ratiomode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureSetRatioModeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureSetRatioModeReq_descriptor_;
  metadata.reflection = TAdventureSetRatioModeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureGetHangUpInfoRsp::kPunishedUserArrFieldNumber;
#endif  // !_MSC_VER

TAdventureGetHangUpInfoRsp::TAdventureGetHangUpInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureGetHangUpInfoRsp)
}

void TAdventureGetHangUpInfoRsp::InitAsDefaultInstance() {
}

TAdventureGetHangUpInfoRsp::TAdventureGetHangUpInfoRsp(const TAdventureGetHangUpInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureGetHangUpInfoRsp)
}

void TAdventureGetHangUpInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureGetHangUpInfoRsp::~TAdventureGetHangUpInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureGetHangUpInfoRsp)
  SharedDtor();
}

void TAdventureGetHangUpInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureGetHangUpInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureGetHangUpInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureGetHangUpInfoRsp_descriptor_;
}

const TAdventureGetHangUpInfoRsp& TAdventureGetHangUpInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureGetHangUpInfoRsp* TAdventureGetHangUpInfoRsp::default_instance_ = NULL;

TAdventureGetHangUpInfoRsp* TAdventureGetHangUpInfoRsp::New() const {
  return new TAdventureGetHangUpInfoRsp;
}

void TAdventureGetHangUpInfoRsp::Clear() {
  punisheduserarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureGetHangUpInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureGetHangUpInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TAdventureUserSimpleInfo PunishedUserArr = 1;
      case 1: {
        if (tag == 10) {
         parse_PunishedUserArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_punisheduserarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_PunishedUserArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureGetHangUpInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureGetHangUpInfoRsp)
  return false;
#undef DO_
}

void TAdventureGetHangUpInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureGetHangUpInfoRsp)
  // repeated .pb.TAdventureUserSimpleInfo PunishedUserArr = 1;
  for (int i = 0; i < this->punisheduserarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->punisheduserarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureGetHangUpInfoRsp)
}

::google::protobuf::uint8* TAdventureGetHangUpInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureGetHangUpInfoRsp)
  // repeated .pb.TAdventureUserSimpleInfo PunishedUserArr = 1;
  for (int i = 0; i < this->punisheduserarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->punisheduserarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureGetHangUpInfoRsp)
  return target;
}

int TAdventureGetHangUpInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TAdventureUserSimpleInfo PunishedUserArr = 1;
  total_size += 1 * this->punisheduserarr_size();
  for (int i = 0; i < this->punisheduserarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->punisheduserarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureGetHangUpInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureGetHangUpInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureGetHangUpInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureGetHangUpInfoRsp::MergeFrom(const TAdventureGetHangUpInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  punisheduserarr_.MergeFrom(from.punisheduserarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureGetHangUpInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureGetHangUpInfoRsp::CopyFrom(const TAdventureGetHangUpInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureGetHangUpInfoRsp::IsInitialized() const {

  return true;
}

void TAdventureGetHangUpInfoRsp::Swap(TAdventureGetHangUpInfoRsp* other) {
  if (other != this) {
    punisheduserarr_.Swap(&other->punisheduserarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureGetHangUpInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureGetHangUpInfoRsp_descriptor_;
  metadata.reflection = TAdventureGetHangUpInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureSweepReq::kMapIdFieldNumber;
const int TAdventureSweepReq::kAdventureTypeFieldNumber;
#endif  // !_MSC_VER

TAdventureSweepReq::TAdventureSweepReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureSweepReq)
}

void TAdventureSweepReq::InitAsDefaultInstance() {
}

TAdventureSweepReq::TAdventureSweepReq(const TAdventureSweepReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureSweepReq)
}

void TAdventureSweepReq::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = GOOGLE_ULONGLONG(0);
  adventuretype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureSweepReq::~TAdventureSweepReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureSweepReq)
  SharedDtor();
}

void TAdventureSweepReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureSweepReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureSweepReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureSweepReq_descriptor_;
}

const TAdventureSweepReq& TAdventureSweepReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureSweepReq* TAdventureSweepReq::default_instance_ = NULL;

TAdventureSweepReq* TAdventureSweepReq::New() const {
  return new TAdventureSweepReq;
}

void TAdventureSweepReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureSweepReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mapid_, adventuretype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureSweepReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureSweepReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 MapId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AdventureType;
        break;
      }

      // optional .pb.EAdventureType AdventureType = 2;
      case 2: {
        if (tag == 16) {
         parse_AdventureType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAdventureType_IsValid(value)) {
            set_adventuretype(static_cast< ::pb::EAdventureType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureSweepReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureSweepReq)
  return false;
#undef DO_
}

void TAdventureSweepReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureSweepReq)
  // optional uint64 MapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mapid(), output);
  }

  // optional .pb.EAdventureType AdventureType = 2;
  if (has_adventuretype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->adventuretype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureSweepReq)
}

::google::protobuf::uint8* TAdventureSweepReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureSweepReq)
  // optional uint64 MapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mapid(), target);
  }

  // optional .pb.EAdventureType AdventureType = 2;
  if (has_adventuretype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->adventuretype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureSweepReq)
  return target;
}

int TAdventureSweepReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 MapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

    // optional .pb.EAdventureType AdventureType = 2;
    if (has_adventuretype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->adventuretype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureSweepReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureSweepReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureSweepReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureSweepReq::MergeFrom(const TAdventureSweepReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_adventuretype()) {
      set_adventuretype(from.adventuretype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureSweepReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureSweepReq::CopyFrom(const TAdventureSweepReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureSweepReq::IsInitialized() const {

  return true;
}

void TAdventureSweepReq::Swap(TAdventureSweepReq* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(adventuretype_, other->adventuretype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureSweepReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureSweepReq_descriptor_;
  metadata.reflection = TAdventureSweepReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureSweepRsp::kRewardArrayFieldNumber;
const int TAdventureSweepRsp::kRatioModeFieldNumber;
#endif  // !_MSC_VER

TAdventureSweepRsp::TAdventureSweepRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureSweepRsp)
}

void TAdventureSweepRsp::InitAsDefaultInstance() {
}

TAdventureSweepRsp::TAdventureSweepRsp(const TAdventureSweepRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureSweepRsp)
}

void TAdventureSweepRsp::SharedCtor() {
  _cached_size_ = 0;
  ratiomode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureSweepRsp::~TAdventureSweepRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureSweepRsp)
  SharedDtor();
}

void TAdventureSweepRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureSweepRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureSweepRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureSweepRsp_descriptor_;
}

const TAdventureSweepRsp& TAdventureSweepRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventure_2eproto();
  return *default_instance_;
}

TAdventureSweepRsp* TAdventureSweepRsp::default_instance_ = NULL;

TAdventureSweepRsp* TAdventureSweepRsp::New() const {
  return new TAdventureSweepRsp;
}

void TAdventureSweepRsp::Clear() {
  ratiomode_ = 0u;
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureSweepRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureSweepRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectTag(16)) goto parse_RatioMode;
        break;
      }

      // optional uint32 RatioMode = 2;
      case 2: {
        if (tag == 16) {
         parse_RatioMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ratiomode_)));
          set_has_ratiomode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureSweepRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureSweepRsp)
  return false;
#undef DO_
}

void TAdventureSweepRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureSweepRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  // optional uint32 RatioMode = 2;
  if (has_ratiomode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ratiomode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureSweepRsp)
}

::google::protobuf::uint8* TAdventureSweepRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureSweepRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  // optional uint32 RatioMode = 2;
  if (has_ratiomode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ratiomode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureSweepRsp)
  return target;
}

int TAdventureSweepRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 RatioMode = 2;
    if (has_ratiomode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ratiomode());
    }

  }
  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureSweepRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureSweepRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureSweepRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureSweepRsp::MergeFrom(const TAdventureSweepRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ratiomode()) {
      set_ratiomode(from.ratiomode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureSweepRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureSweepRsp::CopyFrom(const TAdventureSweepRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureSweepRsp::IsInitialized() const {

  return true;
}

void TAdventureSweepRsp::Swap(TAdventureSweepRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(ratiomode_, other->ratiomode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureSweepRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureSweepRsp_descriptor_;
  metadata.reflection = TAdventureSweepRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
