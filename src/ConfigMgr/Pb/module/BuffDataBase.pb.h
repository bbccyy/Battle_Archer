// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/BuffDataBase.proto

#ifndef PROTOBUF_module_2fBuffDataBase_2eproto__INCLUDED
#define PROTOBUF_module_2fBuffDataBase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

class BuffDataModel;
class BuffDatasModel;
class BuffDataAttribute;
class BuffModPropertyDecConfig;
class BuffModChangeDmgHelper;
class BuffModChangeDmgByBuffSubConfig;
class BuffModPropertyConfig;
class BuffSingleEffect;
class BuffRepeatedEffect;
class BuffModArmAttrAdd;
class BuffModArmAttrAddConfig;
class BuffModSkillOnLowLifeConfig;
class BuffModTransformationConfig;
class BuffModEffectInRangeConditionConfig;
class BuffModEffectInRangeConfig;
class BuffModPropertyFormulaConfig;
class BuffModResetBuffTimeConfig;
class BuffModAddSkillConfig;
class BuffModTauntConfig;
class BuffModToughnessConfig;
class BuffModNothingConfig;
class BuffModTransformScaleConfig;
class BuffModDieConfig;
class BuffModDisableConfig;
class BuffModScaleTextConfig;
class BuffModRepeatSkillConfig;
class BuffModSkillOnEndConfig;
class BuffModSpecifySkillTidConfig;
class BuffModMoveControlImmunityConfig;
class BuffModUnlimitedShieldConfig;
class BuffModShrinkControlDurationConfig;
class BuffModHideSomeAppearanceConfig;
class BuffModAddDefPointConfig;
class BuffModRemoveDefPointConfig;
class BuffModConditionChangeConfig;
class BuffModNoRageRecoverConfig;
class BuffModInheritExistBuffStackConfig;
class BuffModReflectBuffConfig;
class BuffModFatalDmgShiftConfig;
class BuffModRageImmunityConfig;
class BuffBaseDataModel;

enum EBattleAttrType {
  BATTLE_ATTR_TYPE_INVALID = 0,
  BATTLE_ATTR_TYPE_INCREASE = 1,
  BATTLE_ATTR_TYPE_REDUECE = 2
};
bool EBattleAttrType_IsValid(int value);
const EBattleAttrType EBattleAttrType_MIN = BATTLE_ATTR_TYPE_INVALID;
const EBattleAttrType EBattleAttrType_MAX = BATTLE_ATTR_TYPE_REDUECE;
const int EBattleAttrType_ARRAYSIZE = EBattleAttrType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EBattleAttrType_descriptor();
inline const ::std::string& EBattleAttrType_Name(EBattleAttrType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EBattleAttrType_descriptor(), value);
}
inline bool EBattleAttrType_Parse(
    const ::std::string& name, EBattleAttrType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EBattleAttrType>(
    EBattleAttrType_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>BuffDataModel</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffDataModel : public ::google::protobuf::Message {
 public:
  BuffDataModel();
  virtual ~BuffDataModel();

  BuffDataModel(const BuffDataModel& from);

  inline BuffDataModel& operator=(const BuffDataModel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffDataModel& default_instance();

  void Swap(BuffDataModel* other);

  // implements Message ----------------------------------------------

  BuffDataModel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffDataModel& from);
  void MergeFrom(const BuffDataModel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 PercentParam = 1;
  inline bool has_percentparam() const;
  inline void clear_percentparam();
  static const int kPercentParamFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffDataModel</name>
  	<Function>
  		<name>percentparam</name>
  		<replaceName>PercentParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_percentparam</name>
  		<replaceName>PercentParam</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_percentparam</name>
  		<replaceName>PercentParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 percentparam() const;
  inline void set_percentparam(::google::protobuf::int32 value);

  // optional int32 PercentGrowth = 2;
  inline bool has_percentgrowth() const;
  inline void clear_percentgrowth();
  static const int kPercentGrowthFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffDataModel</name>
  	<Function>
  		<name>percentgrowth</name>
  		<replaceName>PercentGrowth</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_percentgrowth</name>
  		<replaceName>PercentGrowth</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_percentgrowth</name>
  		<replaceName>PercentGrowth</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 percentgrowth() const;
  inline void set_percentgrowth(::google::protobuf::int32 value);

  // optional int32 ValueParma = 3;
  inline bool has_valueparma() const;
  inline void clear_valueparma();
  static const int kValueParmaFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffDataModel</name>
  	<Function>
  		<name>valueparma</name>
  		<replaceName>ValueParma</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_valueparma</name>
  		<replaceName>ValueParma</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_valueparma</name>
  		<replaceName>ValueParma</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 valueparma() const;
  inline void set_valueparma(::google::protobuf::int32 value);

  // optional int32 ValueGrowth = 4;
  inline bool has_valuegrowth() const;
  inline void clear_valuegrowth();
  static const int kValueGrowthFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffDataModel</name>
  	<Function>
  		<name>valuegrowth</name>
  		<replaceName>ValueGrowth</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_valuegrowth</name>
  		<replaceName>ValueGrowth</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_valuegrowth</name>
  		<replaceName>ValueGrowth</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 valuegrowth() const;
  inline void set_valuegrowth(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffDataModel)
 private:
  inline void set_has_percentparam();
  inline void clear_has_percentparam();
  inline void set_has_percentgrowth();
  inline void clear_has_percentgrowth();
  inline void set_has_valueparma();
  inline void clear_has_valueparma();
  inline void set_has_valuegrowth();
  inline void clear_has_valuegrowth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 percentparam_;
  ::google::protobuf::int32 percentgrowth_;
  ::google::protobuf::int32 valueparma_;
  ::google::protobuf::int32 valuegrowth_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffDataModel* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffDatasModel</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffDatasModel : public ::google::protobuf::Message {
 public:
  BuffDatasModel();
  virtual ~BuffDatasModel();

  BuffDatasModel(const BuffDatasModel& from);

  inline BuffDatasModel& operator=(const BuffDatasModel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffDatasModel& default_instance();

  void Swap(BuffDatasModel* other);

  // implements Message ----------------------------------------------

  BuffDatasModel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffDatasModel& from);
  void MergeFrom(const BuffDatasModel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 PercentParam = 1;
  inline int percentparam_size() const;
  inline void clear_percentparam();
  static const int kPercentParamFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffDatasModel</name>
  	<Function>
  		<name>percentparam</name>
  		<replaceName>PercentParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_percentparam</name>
  		<replaceName>PercentParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_percentparam</name>
  		<replaceName>PercentParam</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_percentparam</name>
  		<replaceName>PercentParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>percentparam_size</name>
  		<replaceName>PercentParam</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 percentparam(int index) const;
  inline void set_percentparam(int index, ::google::protobuf::int32 value);
  inline void add_percentparam(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      percentparam() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_percentparam();

  // repeated int32 PercentGrowth = 2;
  inline int percentgrowth_size() const;
  inline void clear_percentgrowth();
  static const int kPercentGrowthFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffDatasModel</name>
  	<Function>
  		<name>percentgrowth</name>
  		<replaceName>PercentGrowth</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_percentgrowth</name>
  		<replaceName>PercentGrowth</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_percentgrowth</name>
  		<replaceName>PercentGrowth</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_percentgrowth</name>
  		<replaceName>PercentGrowth</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>percentgrowth_size</name>
  		<replaceName>PercentGrowth</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 percentgrowth(int index) const;
  inline void set_percentgrowth(int index, ::google::protobuf::int32 value);
  inline void add_percentgrowth(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      percentgrowth() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_percentgrowth();

  // repeated int32 ValueParma = 3;
  inline int valueparma_size() const;
  inline void clear_valueparma();
  static const int kValueParmaFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffDatasModel</name>
  	<Function>
  		<name>valueparma</name>
  		<replaceName>ValueParma</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_valueparma</name>
  		<replaceName>ValueParma</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_valueparma</name>
  		<replaceName>ValueParma</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_valueparma</name>
  		<replaceName>ValueParma</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>valueparma_size</name>
  		<replaceName>ValueParma</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 valueparma(int index) const;
  inline void set_valueparma(int index, ::google::protobuf::int32 value);
  inline void add_valueparma(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      valueparma() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_valueparma();

  // repeated int32 ValueGrowth = 4;
  inline int valuegrowth_size() const;
  inline void clear_valuegrowth();
  static const int kValueGrowthFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffDatasModel</name>
  	<Function>
  		<name>valuegrowth</name>
  		<replaceName>ValueGrowth</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_valuegrowth</name>
  		<replaceName>ValueGrowth</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_valuegrowth</name>
  		<replaceName>ValueGrowth</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_valuegrowth</name>
  		<replaceName>ValueGrowth</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>valuegrowth_size</name>
  		<replaceName>ValueGrowth</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 valuegrowth(int index) const;
  inline void set_valuegrowth(int index, ::google::protobuf::int32 value);
  inline void add_valuegrowth(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      valuegrowth() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_valuegrowth();

  // @@protoc_insertion_point(class_scope:pb.BuffDatasModel)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > percentparam_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > percentgrowth_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > valueparma_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > valuegrowth_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffDatasModel* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffDataAttribute</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffDataAttribute : public ::google::protobuf::Message {
 public:
  BuffDataAttribute();
  virtual ~BuffDataAttribute();

  BuffDataAttribute(const BuffDataAttribute& from);

  inline BuffDataAttribute& operator=(const BuffDataAttribute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffDataAttribute& default_instance();

  void Swap(BuffDataAttribute* other);

  // implements Message ----------------------------------------------

  BuffDataAttribute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffDataAttribute& from);
  void MergeFrom(const BuffDataAttribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffDataAttribute</name>
  	<Function>
  		<name>type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional .pb.BuffDataModel Data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffDataAttribute</name>
  	<Function>
  		<name>data</name>
  		<replaceName>Data</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_data</name>
  		<replaceName>Data</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_data</name>
  		<replaceName>Data</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_data</name>
  		<replaceName>Data</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::BuffDataModel& data() const;
  inline ::pb::BuffDataModel* mutable_data();
  inline ::pb::BuffDataModel* release_data();
  inline void set_allocated_data(::pb::BuffDataModel* data);

  // @@protoc_insertion_point(class_scope:pb.BuffDataAttribute)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::BuffDataModel* data_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffDataAttribute* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModPropertyDecConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModPropertyDecConfig : public ::google::protobuf::Message {
 public:
  BuffModPropertyDecConfig();
  virtual ~BuffModPropertyDecConfig();

  BuffModPropertyDecConfig(const BuffModPropertyDecConfig& from);

  inline BuffModPropertyDecConfig& operator=(const BuffModPropertyDecConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModPropertyDecConfig& default_instance();

  void Swap(BuffModPropertyDecConfig* other);

  // implements Message ----------------------------------------------

  BuffModPropertyDecConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModPropertyDecConfig& from);
  void MergeFrom(const BuffModPropertyDecConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModPropertyDecConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModPropertyDecConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional int32 Type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModPropertyDecConfig</name>
  	<Function>
  		<name>type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModPropertyDecConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModPropertyDecConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModChangeDmgHelper</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModChangeDmgHelper : public ::google::protobuf::Message {
 public:
  BuffModChangeDmgHelper();
  virtual ~BuffModChangeDmgHelper();

  BuffModChangeDmgHelper(const BuffModChangeDmgHelper& from);

  inline BuffModChangeDmgHelper& operator=(const BuffModChangeDmgHelper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModChangeDmgHelper& default_instance();

  void Swap(BuffModChangeDmgHelper* other);

  // implements Message ----------------------------------------------

  BuffModChangeDmgHelper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModChangeDmgHelper& from);
  void MergeFrom(const BuffModChangeDmgHelper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModChangeDmgHelper</name>
  	<Function>
  		<name>type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 Value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModChangeDmgHelper</name>
  	<Function>
  		<name>value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // optional int32 Attribute = 3;
  inline bool has_attribute() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModChangeDmgHelper</name>
  	<Function>
  		<name>attribute</name>
  		<replaceName>Attribute</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attribute</name>
  		<replaceName>Attribute</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attribute</name>
  		<replaceName>Attribute</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 attribute() const;
  inline void set_attribute(::google::protobuf::int32 value);

  // optional int32 ValueGrowth = 4;
  inline bool has_valuegrowth() const;
  inline void clear_valuegrowth();
  static const int kValueGrowthFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModChangeDmgHelper</name>
  	<Function>
  		<name>valuegrowth</name>
  		<replaceName>ValueGrowth</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_valuegrowth</name>
  		<replaceName>ValueGrowth</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_valuegrowth</name>
  		<replaceName>ValueGrowth</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 valuegrowth() const;
  inline void set_valuegrowth(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModChangeDmgHelper)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_attribute();
  inline void clear_has_attribute();
  inline void set_has_valuegrowth();
  inline void clear_has_valuegrowth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::int32 attribute_;
  ::google::protobuf::int32 valuegrowth_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModChangeDmgHelper* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModChangeDmgByBuffSubConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModChangeDmgByBuffSubConfig : public ::google::protobuf::Message {
 public:
  BuffModChangeDmgByBuffSubConfig();
  virtual ~BuffModChangeDmgByBuffSubConfig();

  BuffModChangeDmgByBuffSubConfig(const BuffModChangeDmgByBuffSubConfig& from);

  inline BuffModChangeDmgByBuffSubConfig& operator=(const BuffModChangeDmgByBuffSubConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModChangeDmgByBuffSubConfig& default_instance();

  void Swap(BuffModChangeDmgByBuffSubConfig* other);

  // implements Message ----------------------------------------------

  BuffModChangeDmgByBuffSubConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModChangeDmgByBuffSubConfig& from);
  void MergeFrom(const BuffModChangeDmgByBuffSubConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModChangeDmgByBuffSubConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModChangeDmgByBuffSubConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // repeated .pb.BuffModChangeDmgHelper DataArr = 3;
  inline int dataarr_size() const;
  inline void clear_dataarr();
  static const int kDataArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModChangeDmgByBuffSubConfig</name>
  	<Function>
  		<name>dataarr</name>
  		<replaceName>DataArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_dataarr</name>
  		<replaceName>DataArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_dataarr</name>
  		<replaceName>DataArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dataarr</name>
  		<replaceName>DataArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>dataarr_size</name>
  		<replaceName>DataArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::BuffModChangeDmgHelper& dataarr(int index) const;
  inline ::pb::BuffModChangeDmgHelper* mutable_dataarr(int index);
  inline ::pb::BuffModChangeDmgHelper* add_dataarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::BuffModChangeDmgHelper >&
      dataarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::BuffModChangeDmgHelper >*
      mutable_dataarr();

  // @@protoc_insertion_point(class_scope:pb.BuffModChangeDmgByBuffSubConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::RepeatedPtrField< ::pb::BuffModChangeDmgHelper > dataarr_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModChangeDmgByBuffSubConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModPropertyConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModPropertyConfig : public ::google::protobuf::Message {
 public:
  BuffModPropertyConfig();
  virtual ~BuffModPropertyConfig();

  BuffModPropertyConfig(const BuffModPropertyConfig& from);

  inline BuffModPropertyConfig& operator=(const BuffModPropertyConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModPropertyConfig& default_instance();

  void Swap(BuffModPropertyConfig* other);

  // implements Message ----------------------------------------------

  BuffModPropertyConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModPropertyConfig& from);
  void MergeFrom(const BuffModPropertyConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModPropertyConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModPropertyConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // repeated .pb.BuffDataAttribute DataArr = 3;
  inline int dataarr_size() const;
  inline void clear_dataarr();
  static const int kDataArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModPropertyConfig</name>
  	<Function>
  		<name>dataarr</name>
  		<replaceName>DataArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_dataarr</name>
  		<replaceName>DataArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_dataarr</name>
  		<replaceName>DataArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dataarr</name>
  		<replaceName>DataArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>dataarr_size</name>
  		<replaceName>DataArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::BuffDataAttribute& dataarr(int index) const;
  inline ::pb::BuffDataAttribute* mutable_dataarr(int index);
  inline ::pb::BuffDataAttribute* add_dataarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::BuffDataAttribute >&
      dataarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::BuffDataAttribute >*
      mutable_dataarr();

  // optional .pb.EBattleAttrType Type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModPropertyConfig</name>
  	<Function>
  		<name>type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EBattleAttrType type() const;
  inline void set_type(::pb::EBattleAttrType value);

  // optional int32 LifeAddPercent = 5;
  inline bool has_lifeaddpercent() const;
  inline void clear_lifeaddpercent();
  static const int kLifeAddPercentFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>BuffModPropertyConfig</name>
  	<Function>
  		<name>lifeaddpercent</name>
  		<replaceName>LifeAddPercent</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lifeaddpercent</name>
  		<replaceName>LifeAddPercent</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lifeaddpercent</name>
  		<replaceName>LifeAddPercent</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 lifeaddpercent() const;
  inline void set_lifeaddpercent(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModPropertyConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_lifeaddpercent();
  inline void clear_has_lifeaddpercent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::RepeatedPtrField< ::pb::BuffDataAttribute > dataarr_;
  int type_;
  ::google::protobuf::int32 lifeaddpercent_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModPropertyConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffSingleEffect</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffSingleEffect : public ::google::protobuf::Message {
 public:
  BuffSingleEffect();
  virtual ~BuffSingleEffect();

  BuffSingleEffect(const BuffSingleEffect& from);

  inline BuffSingleEffect& operator=(const BuffSingleEffect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffSingleEffect& default_instance();

  void Swap(BuffSingleEffect* other);

  // implements Message ----------------------------------------------

  BuffSingleEffect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffSingleEffect& from);
  void MergeFrom(const BuffSingleEffect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Effect = 1;
  inline bool has_effect() const;
  inline void clear_effect();
  static const int kEffectFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffSingleEffect</name>
  	<Function>
  		<name>effect</name>
  		<replaceName>Effect</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_effect</name>
  		<replaceName>Effect</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_effect</name>
  		<replaceName>Effect</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& effect() const;
  inline void set_effect(const ::std::string& value);
  inline void set_effect(const char* value);
  inline void set_effect(const char* value, size_t size);
  inline ::std::string* mutable_effect();
  inline ::std::string* release_effect();
  inline void set_allocated_effect(::std::string* effect);

  // optional int32 Socket = 2;
  inline bool has_socket() const;
  inline void clear_socket();
  static const int kSocketFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffSingleEffect</name>
  	<Function>
  		<name>socket</name>
  		<replaceName>Socket</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_socket</name>
  		<replaceName>Socket</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_socket</name>
  		<replaceName>Socket</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 socket() const;
  inline void set_socket(::google::protobuf::int32 value);

  // optional bool TeamDirection = 3;
  inline bool has_teamdirection() const;
  inline void clear_teamdirection();
  static const int kTeamDirectionFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffSingleEffect</name>
  	<Function>
  		<name>teamdirection</name>
  		<replaceName>TeamDirection</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamdirection</name>
  		<replaceName>TeamDirection</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamdirection</name>
  		<replaceName>TeamDirection</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool teamdirection() const;
  inline void set_teamdirection(bool value);

  // @@protoc_insertion_point(class_scope:pb.BuffSingleEffect)
 private:
  inline void set_has_effect();
  inline void clear_has_effect();
  inline void set_has_socket();
  inline void clear_has_socket();
  inline void set_has_teamdirection();
  inline void clear_has_teamdirection();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* effect_;
  ::google::protobuf::int32 socket_;
  bool teamdirection_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffSingleEffect* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffRepeatedEffect</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffRepeatedEffect : public ::google::protobuf::Message {
 public:
  BuffRepeatedEffect();
  virtual ~BuffRepeatedEffect();

  BuffRepeatedEffect(const BuffRepeatedEffect& from);

  inline BuffRepeatedEffect& operator=(const BuffRepeatedEffect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffRepeatedEffect& default_instance();

  void Swap(BuffRepeatedEffect* other);

  // implements Message ----------------------------------------------

  BuffRepeatedEffect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffRepeatedEffect& from);
  void MergeFrom(const BuffRepeatedEffect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string EffectArr = 1;
  inline int effectarr_size() const;
  inline void clear_effectarr();
  static const int kEffectArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffRepeatedEffect</name>
  	<Function>
  		<name>effectarr</name>
  		<replaceName>EffectArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_effectarr</name>
  		<replaceName>EffectArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_effectarr</name>
  		<replaceName>EffectArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_effectarr</name>
  		<replaceName>EffectArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>effectarr_size</name>
  		<replaceName>EffectArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& effectarr(int index) const;
  inline ::std::string* mutable_effectarr(int index);
  inline void set_effectarr(int index, const ::std::string& value);
  inline void set_effectarr(int index, const char* value);
  inline void set_effectarr(int index, const char* value, size_t size);
  inline ::std::string* add_effectarr();
  inline void add_effectarr(const ::std::string& value);
  inline void add_effectarr(const char* value);
  inline void add_effectarr(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& effectarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_effectarr();

  // optional int32 Socket = 2;
  inline bool has_socket() const;
  inline void clear_socket();
  static const int kSocketFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffRepeatedEffect</name>
  	<Function>
  		<name>socket</name>
  		<replaceName>Socket</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_socket</name>
  		<replaceName>Socket</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_socket</name>
  		<replaceName>Socket</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 socket() const;
  inline void set_socket(::google::protobuf::int32 value);

  // optional bool TeamDirection = 3;
  inline bool has_teamdirection() const;
  inline void clear_teamdirection();
  static const int kTeamDirectionFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffRepeatedEffect</name>
  	<Function>
  		<name>teamdirection</name>
  		<replaceName>TeamDirection</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamdirection</name>
  		<replaceName>TeamDirection</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamdirection</name>
  		<replaceName>TeamDirection</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool teamdirection() const;
  inline void set_teamdirection(bool value);

  // optional int32 DelayTime = 4;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffRepeatedEffect</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffRepeatedEffect)
 private:
  inline void set_has_socket();
  inline void clear_has_socket();
  inline void set_has_teamdirection();
  inline void clear_has_teamdirection();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> effectarr_;
  ::google::protobuf::int32 socket_;
  bool teamdirection_;
  ::google::protobuf::int32 delaytime_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffRepeatedEffect* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModArmAttrAdd</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModArmAttrAdd : public ::google::protobuf::Message {
 public:
  BuffModArmAttrAdd();
  virtual ~BuffModArmAttrAdd();

  BuffModArmAttrAdd(const BuffModArmAttrAdd& from);

  inline BuffModArmAttrAdd& operator=(const BuffModArmAttrAdd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModArmAttrAdd& default_instance();

  void Swap(BuffModArmAttrAdd* other);

  // implements Message ----------------------------------------------

  BuffModArmAttrAdd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModArmAttrAdd& from);
  void MergeFrom(const BuffModArmAttrAdd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 AttrSource = 1;
  inline bool has_attrsource() const;
  inline void clear_attrsource();
  static const int kAttrSourceFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModArmAttrAdd</name>
  	<Function>
  		<name>attrsource</name>
  		<replaceName>AttrSource</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attrsource</name>
  		<replaceName>AttrSource</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attrsource</name>
  		<replaceName>AttrSource</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 attrsource() const;
  inline void set_attrsource(::google::protobuf::int32 value);

  // optional int32 AttrTarget = 2;
  inline bool has_attrtarget() const;
  inline void clear_attrtarget();
  static const int kAttrTargetFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModArmAttrAdd</name>
  	<Function>
  		<name>attrtarget</name>
  		<replaceName>AttrTarget</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attrtarget</name>
  		<replaceName>AttrTarget</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attrtarget</name>
  		<replaceName>AttrTarget</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 attrtarget() const;
  inline void set_attrtarget(::google::protobuf::int32 value);

  // optional int32 PercentParam = 3;
  inline bool has_percentparam() const;
  inline void clear_percentparam();
  static const int kPercentParamFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModArmAttrAdd</name>
  	<Function>
  		<name>percentparam</name>
  		<replaceName>PercentParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_percentparam</name>
  		<replaceName>PercentParam</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_percentparam</name>
  		<replaceName>PercentParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 percentparam() const;
  inline void set_percentparam(::google::protobuf::int32 value);

  // optional int32 LevelParam = 4;
  inline bool has_levelparam() const;
  inline void clear_levelparam();
  static const int kLevelParamFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModArmAttrAdd</name>
  	<Function>
  		<name>levelparam</name>
  		<replaceName>LevelParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_levelparam</name>
  		<replaceName>LevelParam</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_levelparam</name>
  		<replaceName>LevelParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 levelparam() const;
  inline void set_levelparam(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModArmAttrAdd)
 private:
  inline void set_has_attrsource();
  inline void clear_has_attrsource();
  inline void set_has_attrtarget();
  inline void clear_has_attrtarget();
  inline void set_has_percentparam();
  inline void clear_has_percentparam();
  inline void set_has_levelparam();
  inline void clear_has_levelparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 attrsource_;
  ::google::protobuf::int32 attrtarget_;
  ::google::protobuf::int32 percentparam_;
  ::google::protobuf::int32 levelparam_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModArmAttrAdd* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModArmAttrAddConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModArmAttrAddConfig : public ::google::protobuf::Message {
 public:
  BuffModArmAttrAddConfig();
  virtual ~BuffModArmAttrAddConfig();

  BuffModArmAttrAddConfig(const BuffModArmAttrAddConfig& from);

  inline BuffModArmAttrAddConfig& operator=(const BuffModArmAttrAddConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModArmAttrAddConfig& default_instance();

  void Swap(BuffModArmAttrAddConfig* other);

  // implements Message ----------------------------------------------

  BuffModArmAttrAddConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModArmAttrAddConfig& from);
  void MergeFrom(const BuffModArmAttrAddConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModArmAttrAddConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModArmAttrAddConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // repeated .pb.BuffModArmAttrAdd ArmAttrArr = 3;
  inline int armattrarr_size() const;
  inline void clear_armattrarr();
  static const int kArmAttrArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModArmAttrAddConfig</name>
  	<Function>
  		<name>armattrarr</name>
  		<replaceName>ArmAttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_armattrarr</name>
  		<replaceName>ArmAttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_armattrarr</name>
  		<replaceName>ArmAttrArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armattrarr</name>
  		<replaceName>ArmAttrArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>armattrarr_size</name>
  		<replaceName>ArmAttrArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::BuffModArmAttrAdd& armattrarr(int index) const;
  inline ::pb::BuffModArmAttrAdd* mutable_armattrarr(int index);
  inline ::pb::BuffModArmAttrAdd* add_armattrarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::BuffModArmAttrAdd >&
      armattrarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::BuffModArmAttrAdd >*
      mutable_armattrarr();

  // optional int32 LifeAddPercent = 4;
  inline bool has_lifeaddpercent() const;
  inline void clear_lifeaddpercent();
  static const int kLifeAddPercentFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModArmAttrAddConfig</name>
  	<Function>
  		<name>lifeaddpercent</name>
  		<replaceName>LifeAddPercent</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lifeaddpercent</name>
  		<replaceName>LifeAddPercent</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lifeaddpercent</name>
  		<replaceName>LifeAddPercent</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 lifeaddpercent() const;
  inline void set_lifeaddpercent(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModArmAttrAddConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_lifeaddpercent();
  inline void clear_has_lifeaddpercent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::RepeatedPtrField< ::pb::BuffModArmAttrAdd > armattrarr_;
  ::google::protobuf::int32 lifeaddpercent_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModArmAttrAddConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModSkillOnLowLifeConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModSkillOnLowLifeConfig : public ::google::protobuf::Message {
 public:
  BuffModSkillOnLowLifeConfig();
  virtual ~BuffModSkillOnLowLifeConfig();

  BuffModSkillOnLowLifeConfig(const BuffModSkillOnLowLifeConfig& from);

  inline BuffModSkillOnLowLifeConfig& operator=(const BuffModSkillOnLowLifeConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModSkillOnLowLifeConfig& default_instance();

  void Swap(BuffModSkillOnLowLifeConfig* other);

  // implements Message ----------------------------------------------

  BuffModSkillOnLowLifeConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModSkillOnLowLifeConfig& from);
  void MergeFrom(const BuffModSkillOnLowLifeConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModSkillOnLowLifeConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModSkillOnLowLifeConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional int32 LifeType = 3;
  inline bool has_lifetype() const;
  inline void clear_lifetype();
  static const int kLifeTypeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModSkillOnLowLifeConfig</name>
  	<Function>
  		<name>lifetype</name>
  		<replaceName>LifeType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lifetype</name>
  		<replaceName>LifeType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lifetype</name>
  		<replaceName>LifeType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 lifetype() const;
  inline void set_lifetype(::google::protobuf::int32 value);

  // optional int32 LifeValue = 4;
  inline bool has_lifevalue() const;
  inline void clear_lifevalue();
  static const int kLifeValueFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModSkillOnLowLifeConfig</name>
  	<Function>
  		<name>lifevalue</name>
  		<replaceName>LifeValue</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lifevalue</name>
  		<replaceName>LifeValue</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lifevalue</name>
  		<replaceName>LifeValue</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 lifevalue() const;
  inline void set_lifevalue(::google::protobuf::int32 value);

  // optional int32 SkillId = 5;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>BuffModSkillOnLowLifeConfig</name>
  	<Function>
  		<name>skillid</name>
  		<replaceName>SkillId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skillid</name>
  		<replaceName>SkillId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillid</name>
  		<replaceName>SkillId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // optional int32 DamageSource = 6;
  inline bool has_damagesource() const;
  inline void clear_damagesource();
  static const int kDamageSourceFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>BuffModSkillOnLowLifeConfig</name>
  	<Function>
  		<name>damagesource</name>
  		<replaceName>DamageSource</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damagesource</name>
  		<replaceName>DamageSource</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damagesource</name>
  		<replaceName>DamageSource</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 damagesource() const;
  inline void set_damagesource(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModSkillOnLowLifeConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_lifetype();
  inline void clear_has_lifetype();
  inline void set_has_lifevalue();
  inline void clear_has_lifevalue();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_damagesource();
  inline void clear_has_damagesource();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::int32 lifetype_;
  ::google::protobuf::int32 lifevalue_;
  ::google::protobuf::int32 skillid_;
  ::google::protobuf::int32 damagesource_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModSkillOnLowLifeConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModTransformationConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModTransformationConfig : public ::google::protobuf::Message {
 public:
  BuffModTransformationConfig();
  virtual ~BuffModTransformationConfig();

  BuffModTransformationConfig(const BuffModTransformationConfig& from);

  inline BuffModTransformationConfig& operator=(const BuffModTransformationConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModTransformationConfig& default_instance();

  void Swap(BuffModTransformationConfig* other);

  // implements Message ----------------------------------------------

  BuffModTransformationConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModTransformationConfig& from);
  void MergeFrom(const BuffModTransformationConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModTransformationConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModTransformationConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional int32 TransRoleID = 3;
  inline bool has_transroleid() const;
  inline void clear_transroleid();
  static const int kTransRoleIDFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModTransformationConfig</name>
  	<Function>
  		<name>transroleid</name>
  		<replaceName>TransRoleID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_transroleid</name>
  		<replaceName>TransRoleID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_transroleid</name>
  		<replaceName>TransRoleID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 transroleid() const;
  inline void set_transroleid(::google::protobuf::int32 value);

  // optional int32 TransBuffType = 4;
  inline bool has_transbufftype() const;
  inline void clear_transbufftype();
  static const int kTransBuffTypeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModTransformationConfig</name>
  	<Function>
  		<name>transbufftype</name>
  		<replaceName>TransBuffType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_transbufftype</name>
  		<replaceName>TransBuffType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_transbufftype</name>
  		<replaceName>TransBuffType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 transbufftype() const;
  inline void set_transbufftype(::google::protobuf::int32 value);

  // optional bool EndWhenDamaged = 5;
  inline bool has_endwhendamaged() const;
  inline void clear_endwhendamaged();
  static const int kEndWhenDamagedFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>BuffModTransformationConfig</name>
  	<Function>
  		<name>endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool endwhendamaged() const;
  inline void set_endwhendamaged(bool value);

  // optional bool InheritAttribute = 6;
  inline bool has_inheritattribute() const;
  inline void clear_inheritattribute();
  static const int kInheritAttributeFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>BuffModTransformationConfig</name>
  	<Function>
  		<name>inheritattribute</name>
  		<replaceName>InheritAttribute</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_inheritattribute</name>
  		<replaceName>InheritAttribute</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_inheritattribute</name>
  		<replaceName>InheritAttribute</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool inheritattribute() const;
  inline void set_inheritattribute(bool value);

  // optional bool InheritLevel = 7;
  inline bool has_inheritlevel() const;
  inline void clear_inheritlevel();
  static const int kInheritLevelFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>BuffModTransformationConfig</name>
  	<Function>
  		<name>inheritlevel</name>
  		<replaceName>InheritLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_inheritlevel</name>
  		<replaceName>InheritLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_inheritlevel</name>
  		<replaceName>InheritLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool inheritlevel() const;
  inline void set_inheritlevel(bool value);

  // optional int32 Level = 8;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>BuffModTransformationConfig</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional bool InheritSkill = 9;
  inline bool has_inheritskill() const;
  inline void clear_inheritskill();
  static const int kInheritSkillFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>BuffModTransformationConfig</name>
  	<Function>
  		<name>inheritskill</name>
  		<replaceName>InheritSkill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_inheritskill</name>
  		<replaceName>InheritSkill</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_inheritskill</name>
  		<replaceName>InheritSkill</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool inheritskill() const;
  inline void set_inheritskill(bool value);

  // optional bool KeepChainOrder = 10;
  inline bool has_keepchainorder() const;
  inline void clear_keepchainorder();
  static const int kKeepChainOrderFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>BuffModTransformationConfig</name>
  	<Function>
  		<name>keepchainorder</name>
  		<replaceName>KeepChainOrder</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_keepchainorder</name>
  		<replaceName>KeepChainOrder</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_keepchainorder</name>
  		<replaceName>KeepChainOrder</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool keepchainorder() const;
  inline void set_keepchainorder(bool value);

  // @@protoc_insertion_point(class_scope:pb.BuffModTransformationConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_transroleid();
  inline void clear_has_transroleid();
  inline void set_has_transbufftype();
  inline void clear_has_transbufftype();
  inline void set_has_endwhendamaged();
  inline void clear_has_endwhendamaged();
  inline void set_has_inheritattribute();
  inline void clear_has_inheritattribute();
  inline void set_has_inheritlevel();
  inline void clear_has_inheritlevel();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_inheritskill();
  inline void clear_has_inheritskill();
  inline void set_has_keepchainorder();
  inline void clear_has_keepchainorder();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::int32 transroleid_;
  ::google::protobuf::int32 transbufftype_;
  bool active_;
  bool endwhendamaged_;
  bool inheritattribute_;
  bool inheritlevel_;
  ::google::protobuf::int32 level_;
  bool inheritskill_;
  bool keepchainorder_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModTransformationConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModEffectInRangeConditionConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModEffectInRangeConditionConfig : public ::google::protobuf::Message {
 public:
  BuffModEffectInRangeConditionConfig();
  virtual ~BuffModEffectInRangeConditionConfig();

  BuffModEffectInRangeConditionConfig(const BuffModEffectInRangeConditionConfig& from);

  inline BuffModEffectInRangeConditionConfig& operator=(const BuffModEffectInRangeConditionConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModEffectInRangeConditionConfig& default_instance();

  void Swap(BuffModEffectInRangeConditionConfig* other);

  // implements Message ----------------------------------------------

  BuffModEffectInRangeConditionConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModEffectInRangeConditionConfig& from);
  void MergeFrom(const BuffModEffectInRangeConditionConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModEffectInRangeConditionConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModEffectInRangeConditionConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional int32 Range = 3;
  inline bool has_range() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModEffectInRangeConditionConfig</name>
  	<Function>
  		<name>range</name>
  		<replaceName>Range</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_range</name>
  		<replaceName>Range</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_range</name>
  		<replaceName>Range</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 range() const;
  inline void set_range(::google::protobuf::int32 value);

  // optional int32 EffectCondition = 4;
  inline bool has_effectcondition() const;
  inline void clear_effectcondition();
  static const int kEffectConditionFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModEffectInRangeConditionConfig</name>
  	<Function>
  		<name>effectcondition</name>
  		<replaceName>EffectCondition</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_effectcondition</name>
  		<replaceName>EffectCondition</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_effectcondition</name>
  		<replaceName>EffectCondition</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 effectcondition() const;
  inline void set_effectcondition(::google::protobuf::int32 value);

  // optional .pb.BuffDataAttribute AttributeData = 5;
  inline bool has_attributedata() const;
  inline void clear_attributedata();
  static const int kAttributeDataFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>BuffModEffectInRangeConditionConfig</name>
  	<Function>
  		<name>attributedata</name>
  		<replaceName>AttributeData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attributedata</name>
  		<replaceName>AttributeData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_attributedata</name>
  		<replaceName>AttributeData</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attributedata</name>
  		<replaceName>AttributeData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::BuffDataAttribute& attributedata() const;
  inline ::pb::BuffDataAttribute* mutable_attributedata();
  inline ::pb::BuffDataAttribute* release_attributedata();
  inline void set_allocated_attributedata(::pb::BuffDataAttribute* attributedata);

  // @@protoc_insertion_point(class_scope:pb.BuffModEffectInRangeConditionConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_range();
  inline void clear_has_range();
  inline void set_has_effectcondition();
  inline void clear_has_effectcondition();
  inline void set_has_attributedata();
  inline void clear_has_attributedata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::int32 range_;
  ::google::protobuf::int32 effectcondition_;
  ::pb::BuffDataAttribute* attributedata_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModEffectInRangeConditionConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModEffectInRangeConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModEffectInRangeConfig : public ::google::protobuf::Message {
 public:
  BuffModEffectInRangeConfig();
  virtual ~BuffModEffectInRangeConfig();

  BuffModEffectInRangeConfig(const BuffModEffectInRangeConfig& from);

  inline BuffModEffectInRangeConfig& operator=(const BuffModEffectInRangeConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModEffectInRangeConfig& default_instance();

  void Swap(BuffModEffectInRangeConfig* other);

  // implements Message ----------------------------------------------

  BuffModEffectInRangeConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModEffectInRangeConfig& from);
  void MergeFrom(const BuffModEffectInRangeConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModEffectInRangeConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModEffectInRangeConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional int32 Range = 3;
  inline bool has_range() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModEffectInRangeConfig</name>
  	<Function>
  		<name>range</name>
  		<replaceName>Range</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_range</name>
  		<replaceName>Range</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_range</name>
  		<replaceName>Range</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 range() const;
  inline void set_range(::google::protobuf::int32 value);

  // optional int32 EffectTarget = 4;
  inline bool has_effecttarget() const;
  inline void clear_effecttarget();
  static const int kEffectTargetFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModEffectInRangeConfig</name>
  	<Function>
  		<name>effecttarget</name>
  		<replaceName>EffectTarget</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_effecttarget</name>
  		<replaceName>EffectTarget</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_effecttarget</name>
  		<replaceName>EffectTarget</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 effecttarget() const;
  inline void set_effecttarget(::google::protobuf::int32 value);

  // optional int32 TimeBeforeEffect = 5;
  inline bool has_timebeforeeffect() const;
  inline void clear_timebeforeeffect();
  static const int kTimeBeforeEffectFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>BuffModEffectInRangeConfig</name>
  	<Function>
  		<name>timebeforeeffect</name>
  		<replaceName>TimeBeforeEffect</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_timebeforeeffect</name>
  		<replaceName>TimeBeforeEffect</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_timebeforeeffect</name>
  		<replaceName>TimeBeforeEffect</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 timebeforeeffect() const;
  inline void set_timebeforeeffect(::google::protobuf::int32 value);

  // optional int32 BuffId = 6;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffIdFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>BuffModEffectInRangeConfig</name>
  	<Function>
  		<name>buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 buffid() const;
  inline void set_buffid(::google::protobuf::int32 value);

  // optional bool RemoveWhenOutOfRange = 7;
  inline bool has_removewhenoutofrange() const;
  inline void clear_removewhenoutofrange();
  static const int kRemoveWhenOutOfRangeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>BuffModEffectInRangeConfig</name>
  	<Function>
  		<name>removewhenoutofrange</name>
  		<replaceName>RemoveWhenOutOfRange</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_removewhenoutofrange</name>
  		<replaceName>RemoveWhenOutOfRange</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_removewhenoutofrange</name>
  		<replaceName>RemoveWhenOutOfRange</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool removewhenoutofrange() const;
  inline void set_removewhenoutofrange(bool value);

  // @@protoc_insertion_point(class_scope:pb.BuffModEffectInRangeConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_range();
  inline void clear_has_range();
  inline void set_has_effecttarget();
  inline void clear_has_effecttarget();
  inline void set_has_timebeforeeffect();
  inline void clear_has_timebeforeeffect();
  inline void set_has_buffid();
  inline void clear_has_buffid();
  inline void set_has_removewhenoutofrange();
  inline void clear_has_removewhenoutofrange();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::int32 range_;
  ::google::protobuf::int32 effecttarget_;
  bool active_;
  bool removewhenoutofrange_;
  ::google::protobuf::int32 timebeforeeffect_;
  ::google::protobuf::int32 buffid_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModEffectInRangeConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModPropertyFormulaConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModPropertyFormulaConfig : public ::google::protobuf::Message {
 public:
  BuffModPropertyFormulaConfig();
  virtual ~BuffModPropertyFormulaConfig();

  BuffModPropertyFormulaConfig(const BuffModPropertyFormulaConfig& from);

  inline BuffModPropertyFormulaConfig& operator=(const BuffModPropertyFormulaConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModPropertyFormulaConfig& default_instance();

  void Swap(BuffModPropertyFormulaConfig* other);

  // implements Message ----------------------------------------------

  BuffModPropertyFormulaConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModPropertyFormulaConfig& from);
  void MergeFrom(const BuffModPropertyFormulaConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModPropertyFormulaConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModPropertyFormulaConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional string Formula = 3;
  inline bool has_formula() const;
  inline void clear_formula();
  static const int kFormulaFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModPropertyFormulaConfig</name>
  	<Function>
  		<name>formula</name>
  		<replaceName>Formula</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_formula</name>
  		<replaceName>Formula</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formula</name>
  		<replaceName>Formula</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& formula() const;
  inline void set_formula(const ::std::string& value);
  inline void set_formula(const char* value);
  inline void set_formula(const char* value, size_t size);
  inline ::std::string* mutable_formula();
  inline ::std::string* release_formula();
  inline void set_allocated_formula(::std::string* formula);

  // optional int32 ApplyTarget = 4;
  inline bool has_applytarget() const;
  inline void clear_applytarget();
  static const int kApplyTargetFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModPropertyFormulaConfig</name>
  	<Function>
  		<name>applytarget</name>
  		<replaceName>ApplyTarget</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_applytarget</name>
  		<replaceName>ApplyTarget</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_applytarget</name>
  		<replaceName>ApplyTarget</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 applytarget() const;
  inline void set_applytarget(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModPropertyFormulaConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_formula();
  inline void clear_has_formula();
  inline void set_has_applytarget();
  inline void clear_has_applytarget();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::std::string* formula_;
  ::google::protobuf::int32 applytarget_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModPropertyFormulaConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModResetBuffTimeConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModResetBuffTimeConfig : public ::google::protobuf::Message {
 public:
  BuffModResetBuffTimeConfig();
  virtual ~BuffModResetBuffTimeConfig();

  BuffModResetBuffTimeConfig(const BuffModResetBuffTimeConfig& from);

  inline BuffModResetBuffTimeConfig& operator=(const BuffModResetBuffTimeConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModResetBuffTimeConfig& default_instance();

  void Swap(BuffModResetBuffTimeConfig* other);

  // implements Message ----------------------------------------------

  BuffModResetBuffTimeConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModResetBuffTimeConfig& from);
  void MergeFrom(const BuffModResetBuffTimeConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModResetBuffTimeConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModResetBuffTimeConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // repeated int32 BuffIdArr = 3;
  inline int buffidarr_size() const;
  inline void clear_buffidarr();
  static const int kBuffIdArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModResetBuffTimeConfig</name>
  	<Function>
  		<name>buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buffidarr_size</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 buffidarr(int index) const;
  inline void set_buffidarr(int index, ::google::protobuf::int32 value);
  inline void add_buffidarr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      buffidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_buffidarr();

  // @@protoc_insertion_point(class_scope:pb.BuffModResetBuffTimeConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > buffidarr_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModResetBuffTimeConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModAddSkillConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModAddSkillConfig : public ::google::protobuf::Message {
 public:
  BuffModAddSkillConfig();
  virtual ~BuffModAddSkillConfig();

  BuffModAddSkillConfig(const BuffModAddSkillConfig& from);

  inline BuffModAddSkillConfig& operator=(const BuffModAddSkillConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModAddSkillConfig& default_instance();

  void Swap(BuffModAddSkillConfig* other);

  // implements Message ----------------------------------------------

  BuffModAddSkillConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModAddSkillConfig& from);
  void MergeFrom(const BuffModAddSkillConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModAddSkillConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModAddSkillConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // repeated int32 SkillIdArr = 3;
  inline int skillidarr_size() const;
  inline void clear_skillidarr();
  static const int kSkillIdArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModAddSkillConfig</name>
  	<Function>
  		<name>skillidarr</name>
  		<replaceName>SkillIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_skillidarr</name>
  		<replaceName>SkillIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_skillidarr</name>
  		<replaceName>SkillIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillidarr</name>
  		<replaceName>SkillIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>skillidarr_size</name>
  		<replaceName>SkillIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 skillidarr(int index) const;
  inline void set_skillidarr(int index, ::google::protobuf::int32 value);
  inline void add_skillidarr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      skillidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_skillidarr();

  // optional bool UseParentSkillLevel = 4;
  inline bool has_useparentskilllevel() const;
  inline void clear_useparentskilllevel();
  static const int kUseParentSkillLevelFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModAddSkillConfig</name>
  	<Function>
  		<name>useparentskilllevel</name>
  		<replaceName>UseParentSkillLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_useparentskilllevel</name>
  		<replaceName>UseParentSkillLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_useparentskilllevel</name>
  		<replaceName>UseParentSkillLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool useparentskilllevel() const;
  inline void set_useparentskilllevel(bool value);

  // optional int32 SkillLevel = 5;
  inline bool has_skilllevel() const;
  inline void clear_skilllevel();
  static const int kSkillLevelFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>BuffModAddSkillConfig</name>
  	<Function>
  		<name>skilllevel</name>
  		<replaceName>SkillLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skilllevel</name>
  		<replaceName>SkillLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skilllevel</name>
  		<replaceName>SkillLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 skilllevel() const;
  inline void set_skilllevel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModAddSkillConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_useparentskilllevel();
  inline void clear_has_useparentskilllevel();
  inline void set_has_skilllevel();
  inline void clear_has_skilllevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 delaytime_;
  bool active_;
  bool useparentskilllevel_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > skillidarr_;
  ::google::protobuf::int32 skilllevel_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModAddSkillConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModTauntConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModTauntConfig : public ::google::protobuf::Message {
 public:
  BuffModTauntConfig();
  virtual ~BuffModTauntConfig();

  BuffModTauntConfig(const BuffModTauntConfig& from);

  inline BuffModTauntConfig& operator=(const BuffModTauntConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModTauntConfig& default_instance();

  void Swap(BuffModTauntConfig* other);

  // implements Message ----------------------------------------------

  BuffModTauntConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModTauntConfig& from);
  void MergeFrom(const BuffModTauntConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModTauntConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModTauntConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional int32 BuffID = 3;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffIDFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModTauntConfig</name>
  	<Function>
  		<name>buffid</name>
  		<replaceName>BuffID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buffid</name>
  		<replaceName>BuffID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffid</name>
  		<replaceName>BuffID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 buffid() const;
  inline void set_buffid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModTauntConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_buffid();
  inline void clear_has_buffid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::int32 buffid_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModTauntConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModToughnessConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModToughnessConfig : public ::google::protobuf::Message {
 public:
  BuffModToughnessConfig();
  virtual ~BuffModToughnessConfig();

  BuffModToughnessConfig(const BuffModToughnessConfig& from);

  inline BuffModToughnessConfig& operator=(const BuffModToughnessConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModToughnessConfig& default_instance();

  void Swap(BuffModToughnessConfig* other);

  // implements Message ----------------------------------------------

  BuffModToughnessConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModToughnessConfig& from);
  void MergeFrom(const BuffModToughnessConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModToughnessConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModToughnessConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional int32 Type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModToughnessConfig</name>
  	<Function>
  		<name>type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 Param = 4;
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModToughnessConfig</name>
  	<Function>
  		<name>param</name>
  		<replaceName>Param</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_param</name>
  		<replaceName>Param</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_param</name>
  		<replaceName>Param</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 param() const;
  inline void set_param(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModToughnessConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 param_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModToughnessConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModNothingConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModNothingConfig : public ::google::protobuf::Message {
 public:
  BuffModNothingConfig();
  virtual ~BuffModNothingConfig();

  BuffModNothingConfig(const BuffModNothingConfig& from);

  inline BuffModNothingConfig& operator=(const BuffModNothingConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModNothingConfig& default_instance();

  void Swap(BuffModNothingConfig* other);

  // implements Message ----------------------------------------------

  BuffModNothingConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModNothingConfig& from);
  void MergeFrom(const BuffModNothingConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModNothingConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModNothingConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModNothingConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModNothingConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModTransformScaleConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModTransformScaleConfig : public ::google::protobuf::Message {
 public:
  BuffModTransformScaleConfig();
  virtual ~BuffModTransformScaleConfig();

  BuffModTransformScaleConfig(const BuffModTransformScaleConfig& from);

  inline BuffModTransformScaleConfig& operator=(const BuffModTransformScaleConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModTransformScaleConfig& default_instance();

  void Swap(BuffModTransformScaleConfig* other);

  // implements Message ----------------------------------------------

  BuffModTransformScaleConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModTransformScaleConfig& from);
  void MergeFrom(const BuffModTransformScaleConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModTransformScaleConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModTransformScaleConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional int32 PercentParam = 3;
  inline bool has_percentparam() const;
  inline void clear_percentparam();
  static const int kPercentParamFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModTransformScaleConfig</name>
  	<Function>
  		<name>percentparam</name>
  		<replaceName>PercentParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_percentparam</name>
  		<replaceName>PercentParam</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_percentparam</name>
  		<replaceName>PercentParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 percentparam() const;
  inline void set_percentparam(::google::protobuf::int32 value);

  // optional int32 ScaleTime = 4;
  inline bool has_scaletime() const;
  inline void clear_scaletime();
  static const int kScaleTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModTransformScaleConfig</name>
  	<Function>
  		<name>scaletime</name>
  		<replaceName>ScaleTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scaletime</name>
  		<replaceName>ScaleTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scaletime</name>
  		<replaceName>ScaleTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 scaletime() const;
  inline void set_scaletime(::google::protobuf::int32 value);

  // optional int32 BaseDelta = 5;
  inline bool has_basedelta() const;
  inline void clear_basedelta();
  static const int kBaseDeltaFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>BuffModTransformScaleConfig</name>
  	<Function>
  		<name>basedelta</name>
  		<replaceName>BaseDelta</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_basedelta</name>
  		<replaceName>BaseDelta</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_basedelta</name>
  		<replaceName>BaseDelta</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 basedelta() const;
  inline void set_basedelta(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModTransformScaleConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_percentparam();
  inline void clear_has_percentparam();
  inline void set_has_scaletime();
  inline void clear_has_scaletime();
  inline void set_has_basedelta();
  inline void clear_has_basedelta();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::int32 percentparam_;
  ::google::protobuf::int32 scaletime_;
  ::google::protobuf::int32 basedelta_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModTransformScaleConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModDieConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModDieConfig : public ::google::protobuf::Message {
 public:
  BuffModDieConfig();
  virtual ~BuffModDieConfig();

  BuffModDieConfig(const BuffModDieConfig& from);

  inline BuffModDieConfig& operator=(const BuffModDieConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModDieConfig& default_instance();

  void Swap(BuffModDieConfig* other);

  // implements Message ----------------------------------------------

  BuffModDieConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModDieConfig& from);
  void MergeFrom(const BuffModDieConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModDieConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // @@protoc_insertion_point(class_scope:pb.BuffModDieConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModDieConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModDisableConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModDisableConfig : public ::google::protobuf::Message {
 public:
  BuffModDisableConfig();
  virtual ~BuffModDisableConfig();

  BuffModDisableConfig(const BuffModDisableConfig& from);

  inline BuffModDisableConfig& operator=(const BuffModDisableConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModDisableConfig& default_instance();

  void Swap(BuffModDisableConfig* other);

  // implements Message ----------------------------------------------

  BuffModDisableConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModDisableConfig& from);
  void MergeFrom(const BuffModDisableConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModDisableConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModDisableConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModDisableConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModDisableConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModScaleTextConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModScaleTextConfig : public ::google::protobuf::Message {
 public:
  BuffModScaleTextConfig();
  virtual ~BuffModScaleTextConfig();

  BuffModScaleTextConfig(const BuffModScaleTextConfig& from);

  inline BuffModScaleTextConfig& operator=(const BuffModScaleTextConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModScaleTextConfig& default_instance();

  void Swap(BuffModScaleTextConfig* other);

  // implements Message ----------------------------------------------

  BuffModScaleTextConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModScaleTextConfig& from);
  void MergeFrom(const BuffModScaleTextConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModScaleTextConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModScaleTextConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional bool ScaleUp = 3;
  inline bool has_scaleup() const;
  inline void clear_scaleup();
  static const int kScaleUpFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModScaleTextConfig</name>
  	<Function>
  		<name>scaleup</name>
  		<replaceName>ScaleUp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scaleup</name>
  		<replaceName>ScaleUp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scaleup</name>
  		<replaceName>ScaleUp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool scaleup() const;
  inline void set_scaleup(bool value);

  // @@protoc_insertion_point(class_scope:pb.BuffModScaleTextConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_scaleup();
  inline void clear_has_scaleup();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 delaytime_;
  bool active_;
  bool scaleup_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModScaleTextConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModRepeatSkillConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModRepeatSkillConfig : public ::google::protobuf::Message {
 public:
  BuffModRepeatSkillConfig();
  virtual ~BuffModRepeatSkillConfig();

  BuffModRepeatSkillConfig(const BuffModRepeatSkillConfig& from);

  inline BuffModRepeatSkillConfig& operator=(const BuffModRepeatSkillConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModRepeatSkillConfig& default_instance();

  void Swap(BuffModRepeatSkillConfig* other);

  // implements Message ----------------------------------------------

  BuffModRepeatSkillConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModRepeatSkillConfig& from);
  void MergeFrom(const BuffModRepeatSkillConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModRepeatSkillConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModRepeatSkillConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional int32 SkillID = 3;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModRepeatSkillConfig</name>
  	<Function>
  		<name>skillid</name>
  		<replaceName>SkillID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skillid</name>
  		<replaceName>SkillID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillid</name>
  		<replaceName>SkillID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // optional int32 Interval = 4;
  inline bool has_interval() const;
  inline void clear_interval();
  static const int kIntervalFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModRepeatSkillConfig</name>
  	<Function>
  		<name>interval</name>
  		<replaceName>Interval</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_interval</name>
  		<replaceName>Interval</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_interval</name>
  		<replaceName>Interval</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 interval() const;
  inline void set_interval(::google::protobuf::int32 value);

  // optional int32 ReleaseCount = 5;
  inline bool has_releasecount() const;
  inline void clear_releasecount();
  static const int kReleaseCountFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>BuffModRepeatSkillConfig</name>
  	<Function>
  		<name>releasecount</name>
  		<replaceName>ReleaseCount</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_releasecount</name>
  		<replaceName>ReleaseCount</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_releasecount</name>
  		<replaceName>ReleaseCount</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 releasecount() const;
  inline void set_releasecount(::google::protobuf::int32 value);

  // optional int32 Source = 6;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>BuffModRepeatSkillConfig</name>
  	<Function>
  		<name>source</name>
  		<replaceName>Source</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_source</name>
  		<replaceName>Source</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_source</name>
  		<replaceName>Source</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 source() const;
  inline void set_source(::google::protobuf::int32 value);

  // optional int32 CastCondition = 7;
  inline bool has_castcondition() const;
  inline void clear_castcondition();
  static const int kCastConditionFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>BuffModRepeatSkillConfig</name>
  	<Function>
  		<name>castcondition</name>
  		<replaceName>CastCondition</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_castcondition</name>
  		<replaceName>CastCondition</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_castcondition</name>
  		<replaceName>CastCondition</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 castcondition() const;
  inline void set_castcondition(::google::protobuf::int32 value);

  // optional int32 ValueType = 8;
  inline bool has_valuetype() const;
  inline void clear_valuetype();
  static const int kValueTypeFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>BuffModRepeatSkillConfig</name>
  	<Function>
  		<name>valuetype</name>
  		<replaceName>ValueType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_valuetype</name>
  		<replaceName>ValueType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_valuetype</name>
  		<replaceName>ValueType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 valuetype() const;
  inline void set_valuetype(::google::protobuf::int32 value);

  // optional int32 Param1 = 9;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>BuffModRepeatSkillConfig</name>
  	<Function>
  		<name>param1</name>
  		<replaceName>Param1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_param1</name>
  		<replaceName>Param1</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_param1</name>
  		<replaceName>Param1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 param1() const;
  inline void set_param1(::google::protobuf::int32 value);

  // optional bool IgnoreNoSkill = 10;
  inline bool has_ignorenoskill() const;
  inline void clear_ignorenoskill();
  static const int kIgnoreNoSkillFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>BuffModRepeatSkillConfig</name>
  	<Function>
  		<name>ignorenoskill</name>
  		<replaceName>IgnoreNoSkill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ignorenoskill</name>
  		<replaceName>IgnoreNoSkill</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ignorenoskill</name>
  		<replaceName>IgnoreNoSkill</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool ignorenoskill() const;
  inline void set_ignorenoskill(bool value);

  // @@protoc_insertion_point(class_scope:pb.BuffModRepeatSkillConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_interval();
  inline void clear_has_interval();
  inline void set_has_releasecount();
  inline void clear_has_releasecount();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_castcondition();
  inline void clear_has_castcondition();
  inline void set_has_valuetype();
  inline void clear_has_valuetype();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_ignorenoskill();
  inline void clear_has_ignorenoskill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::int32 skillid_;
  ::google::protobuf::int32 interval_;
  ::google::protobuf::int32 releasecount_;
  bool active_;
  bool ignorenoskill_;
  ::google::protobuf::int32 source_;
  ::google::protobuf::int32 castcondition_;
  ::google::protobuf::int32 valuetype_;
  ::google::protobuf::int32 param1_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModRepeatSkillConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModSkillOnEndConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModSkillOnEndConfig : public ::google::protobuf::Message {
 public:
  BuffModSkillOnEndConfig();
  virtual ~BuffModSkillOnEndConfig();

  BuffModSkillOnEndConfig(const BuffModSkillOnEndConfig& from);

  inline BuffModSkillOnEndConfig& operator=(const BuffModSkillOnEndConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModSkillOnEndConfig& default_instance();

  void Swap(BuffModSkillOnEndConfig* other);

  // implements Message ----------------------------------------------

  BuffModSkillOnEndConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModSkillOnEndConfig& from);
  void MergeFrom(const BuffModSkillOnEndConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModSkillOnEndConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModSkillOnEndConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional int32 SkillID = 3;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModSkillOnEndConfig</name>
  	<Function>
  		<name>skillid</name>
  		<replaceName>SkillID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skillid</name>
  		<replaceName>SkillID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillid</name>
  		<replaceName>SkillID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // optional int32 Source = 4;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModSkillOnEndConfig</name>
  	<Function>
  		<name>source</name>
  		<replaceName>Source</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_source</name>
  		<replaceName>Source</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_source</name>
  		<replaceName>Source</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 source() const;
  inline void set_source(::google::protobuf::int32 value);

  // optional int32 DisableType = 5;
  inline bool has_disabletype() const;
  inline void clear_disabletype();
  static const int kDisableTypeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>BuffModSkillOnEndConfig</name>
  	<Function>
  		<name>disabletype</name>
  		<replaceName>DisableType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_disabletype</name>
  		<replaceName>DisableType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_disabletype</name>
  		<replaceName>DisableType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 disabletype() const;
  inline void set_disabletype(::google::protobuf::int32 value);

  // optional bool IgnoreNoSkill = 6;
  inline bool has_ignorenoskill() const;
  inline void clear_ignorenoskill();
  static const int kIgnoreNoSkillFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>BuffModSkillOnEndConfig</name>
  	<Function>
  		<name>ignorenoskill</name>
  		<replaceName>IgnoreNoSkill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ignorenoskill</name>
  		<replaceName>IgnoreNoSkill</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ignorenoskill</name>
  		<replaceName>IgnoreNoSkill</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool ignorenoskill() const;
  inline void set_ignorenoskill(bool value);

  // optional int32 SkillIDBack = 7;
  inline bool has_skillidback() const;
  inline void clear_skillidback();
  static const int kSkillIDBackFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>BuffModSkillOnEndConfig</name>
  	<Function>
  		<name>skillidback</name>
  		<replaceName>SkillIDBack</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skillidback</name>
  		<replaceName>SkillIDBack</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillidback</name>
  		<replaceName>SkillIDBack</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 skillidback() const;
  inline void set_skillidback(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModSkillOnEndConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_source();
  inline void clear_has_source();
  inline void set_has_disabletype();
  inline void clear_has_disabletype();
  inline void set_has_ignorenoskill();
  inline void clear_has_ignorenoskill();
  inline void set_has_skillidback();
  inline void clear_has_skillidback();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::int32 skillid_;
  bool active_;
  bool ignorenoskill_;
  ::google::protobuf::int32 source_;
  ::google::protobuf::int32 disabletype_;
  ::google::protobuf::int32 skillidback_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModSkillOnEndConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModSpecifySkillTidConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModSpecifySkillTidConfig : public ::google::protobuf::Message {
 public:
  BuffModSpecifySkillTidConfig();
  virtual ~BuffModSpecifySkillTidConfig();

  BuffModSpecifySkillTidConfig(const BuffModSpecifySkillTidConfig& from);

  inline BuffModSpecifySkillTidConfig& operator=(const BuffModSpecifySkillTidConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModSpecifySkillTidConfig& default_instance();

  void Swap(BuffModSpecifySkillTidConfig* other);

  // implements Message ----------------------------------------------

  BuffModSpecifySkillTidConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModSpecifySkillTidConfig& from);
  void MergeFrom(const BuffModSpecifySkillTidConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModSpecifySkillTidConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // repeated int32 SkillTidArr = 2;
  inline int skilltidarr_size() const;
  inline void clear_skilltidarr();
  static const int kSkillTidArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModSpecifySkillTidConfig</name>
  	<Function>
  		<name>skilltidarr</name>
  		<replaceName>SkillTidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_skilltidarr</name>
  		<replaceName>SkillTidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_skilltidarr</name>
  		<replaceName>SkillTidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skilltidarr</name>
  		<replaceName>SkillTidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>skilltidarr_size</name>
  		<replaceName>SkillTidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 skilltidarr(int index) const;
  inline void set_skilltidarr(int index, ::google::protobuf::int32 value);
  inline void add_skilltidarr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      skilltidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_skilltidarr();

  // @@protoc_insertion_point(class_scope:pb.BuffModSpecifySkillTidConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > skilltidarr_;
  bool active_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModSpecifySkillTidConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModMoveControlImmunityConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModMoveControlImmunityConfig : public ::google::protobuf::Message {
 public:
  BuffModMoveControlImmunityConfig();
  virtual ~BuffModMoveControlImmunityConfig();

  BuffModMoveControlImmunityConfig(const BuffModMoveControlImmunityConfig& from);

  inline BuffModMoveControlImmunityConfig& operator=(const BuffModMoveControlImmunityConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModMoveControlImmunityConfig& default_instance();

  void Swap(BuffModMoveControlImmunityConfig* other);

  // implements Message ----------------------------------------------

  BuffModMoveControlImmunityConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModMoveControlImmunityConfig& from);
  void MergeFrom(const BuffModMoveControlImmunityConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModMoveControlImmunityConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModMoveControlImmunityConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional int32 EnergyLevel = 3;
  inline bool has_energylevel() const;
  inline void clear_energylevel();
  static const int kEnergyLevelFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModMoveControlImmunityConfig</name>
  	<Function>
  		<name>energylevel</name>
  		<replaceName>EnergyLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_energylevel</name>
  		<replaceName>EnergyLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_energylevel</name>
  		<replaceName>EnergyLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 energylevel() const;
  inline void set_energylevel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModMoveControlImmunityConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_energylevel();
  inline void clear_has_energylevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::int32 energylevel_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModMoveControlImmunityConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModUnlimitedShieldConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModUnlimitedShieldConfig : public ::google::protobuf::Message {
 public:
  BuffModUnlimitedShieldConfig();
  virtual ~BuffModUnlimitedShieldConfig();

  BuffModUnlimitedShieldConfig(const BuffModUnlimitedShieldConfig& from);

  inline BuffModUnlimitedShieldConfig& operator=(const BuffModUnlimitedShieldConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModUnlimitedShieldConfig& default_instance();

  void Swap(BuffModUnlimitedShieldConfig* other);

  // implements Message ----------------------------------------------

  BuffModUnlimitedShieldConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModUnlimitedShieldConfig& from);
  void MergeFrom(const BuffModUnlimitedShieldConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModUnlimitedShieldConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 Percent = 2;
  inline bool has_percent() const;
  inline void clear_percent();
  static const int kPercentFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModUnlimitedShieldConfig</name>
  	<Function>
  		<name>percent</name>
  		<replaceName>Percent</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_percent</name>
  		<replaceName>Percent</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_percent</name>
  		<replaceName>Percent</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 percent() const;
  inline void set_percent(::google::protobuf::int32 value);

  // optional int32 Period = 3;
  inline bool has_period() const;
  inline void clear_period();
  static const int kPeriodFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModUnlimitedShieldConfig</name>
  	<Function>
  		<name>period</name>
  		<replaceName>Period</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_period</name>
  		<replaceName>Period</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_period</name>
  		<replaceName>Period</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 period() const;
  inline void set_period(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModUnlimitedShieldConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_percent();
  inline void clear_has_percent();
  inline void set_has_period();
  inline void clear_has_period();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 percent_;
  ::google::protobuf::int32 period_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModUnlimitedShieldConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModShrinkControlDurationConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModShrinkControlDurationConfig : public ::google::protobuf::Message {
 public:
  BuffModShrinkControlDurationConfig();
  virtual ~BuffModShrinkControlDurationConfig();

  BuffModShrinkControlDurationConfig(const BuffModShrinkControlDurationConfig& from);

  inline BuffModShrinkControlDurationConfig& operator=(const BuffModShrinkControlDurationConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModShrinkControlDurationConfig& default_instance();

  void Swap(BuffModShrinkControlDurationConfig* other);

  // implements Message ----------------------------------------------

  BuffModShrinkControlDurationConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModShrinkControlDurationConfig& from);
  void MergeFrom(const BuffModShrinkControlDurationConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModShrinkControlDurationConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 ShrinkRate = 2;
  inline bool has_shrinkrate() const;
  inline void clear_shrinkrate();
  static const int kShrinkRateFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModShrinkControlDurationConfig</name>
  	<Function>
  		<name>shrinkrate</name>
  		<replaceName>ShrinkRate</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_shrinkrate</name>
  		<replaceName>ShrinkRate</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_shrinkrate</name>
  		<replaceName>ShrinkRate</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 shrinkrate() const;
  inline void set_shrinkrate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModShrinkControlDurationConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_shrinkrate();
  inline void clear_has_shrinkrate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 shrinkrate_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModShrinkControlDurationConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModHideSomeAppearanceConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModHideSomeAppearanceConfig : public ::google::protobuf::Message {
 public:
  BuffModHideSomeAppearanceConfig();
  virtual ~BuffModHideSomeAppearanceConfig();

  BuffModHideSomeAppearanceConfig(const BuffModHideSomeAppearanceConfig& from);

  inline BuffModHideSomeAppearanceConfig& operator=(const BuffModHideSomeAppearanceConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModHideSomeAppearanceConfig& default_instance();

  void Swap(BuffModHideSomeAppearanceConfig* other);

  // implements Message ----------------------------------------------

  BuffModHideSomeAppearanceConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModHideSomeAppearanceConfig& from);
  void MergeFrom(const BuffModHideSomeAppearanceConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModHideSomeAppearanceConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModHideSomeAppearanceConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional bool BloodBar = 3;
  inline bool has_bloodbar() const;
  inline void clear_bloodbar();
  static const int kBloodBarFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModHideSomeAppearanceConfig</name>
  	<Function>
  		<name>bloodbar</name>
  		<replaceName>BloodBar</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bloodbar</name>
  		<replaceName>BloodBar</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bloodbar</name>
  		<replaceName>BloodBar</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool bloodbar() const;
  inline void set_bloodbar(bool value);

  // optional bool Text = 4;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModHideSomeAppearanceConfig</name>
  	<Function>
  		<name>text</name>
  		<replaceName>Text</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_text</name>
  		<replaceName>Text</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_text</name>
  		<replaceName>Text</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool text() const;
  inline void set_text(bool value);

  // @@protoc_insertion_point(class_scope:pb.BuffModHideSomeAppearanceConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_bloodbar();
  inline void clear_has_bloodbar();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 delaytime_;
  bool active_;
  bool bloodbar_;
  bool text_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModHideSomeAppearanceConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModAddDefPointConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModAddDefPointConfig : public ::google::protobuf::Message {
 public:
  BuffModAddDefPointConfig();
  virtual ~BuffModAddDefPointConfig();

  BuffModAddDefPointConfig(const BuffModAddDefPointConfig& from);

  inline BuffModAddDefPointConfig& operator=(const BuffModAddDefPointConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModAddDefPointConfig& default_instance();

  void Swap(BuffModAddDefPointConfig* other);

  // implements Message ----------------------------------------------

  BuffModAddDefPointConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModAddDefPointConfig& from);
  void MergeFrom(const BuffModAddDefPointConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModAddDefPointConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModAddDefPointConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional int32 Point = 3;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModAddDefPointConfig</name>
  	<Function>
  		<name>point</name>
  		<replaceName>Point</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_point</name>
  		<replaceName>Point</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_point</name>
  		<replaceName>Point</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 point() const;
  inline void set_point(::google::protobuf::int32 value);

  // optional int32 Type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModAddDefPointConfig</name>
  	<Function>
  		<name>type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 Color = 5;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>BuffModAddDefPointConfig</name>
  	<Function>
  		<name>color</name>
  		<replaceName>Color</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_color</name>
  		<replaceName>Color</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_color</name>
  		<replaceName>Color</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModAddDefPointConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_point();
  inline void clear_has_point();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::int32 point_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 color_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModAddDefPointConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModRemoveDefPointConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModRemoveDefPointConfig : public ::google::protobuf::Message {
 public:
  BuffModRemoveDefPointConfig();
  virtual ~BuffModRemoveDefPointConfig();

  BuffModRemoveDefPointConfig(const BuffModRemoveDefPointConfig& from);

  inline BuffModRemoveDefPointConfig& operator=(const BuffModRemoveDefPointConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModRemoveDefPointConfig& default_instance();

  void Swap(BuffModRemoveDefPointConfig* other);

  // implements Message ----------------------------------------------

  BuffModRemoveDefPointConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModRemoveDefPointConfig& from);
  void MergeFrom(const BuffModRemoveDefPointConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModRemoveDefPointConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModRemoveDefPointConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional int32 SkillId = 3;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModRemoveDefPointConfig</name>
  	<Function>
  		<name>skillid</name>
  		<replaceName>SkillId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skillid</name>
  		<replaceName>SkillId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillid</name>
  		<replaceName>SkillId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 skillid() const;
  inline void set_skillid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModRemoveDefPointConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_skillid();
  inline void clear_has_skillid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::int32 skillid_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModRemoveDefPointConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModConditionChangeConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModConditionChangeConfig : public ::google::protobuf::Message {
 public:
  BuffModConditionChangeConfig();
  virtual ~BuffModConditionChangeConfig();

  BuffModConditionChangeConfig(const BuffModConditionChangeConfig& from);

  inline BuffModConditionChangeConfig& operator=(const BuffModConditionChangeConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModConditionChangeConfig& default_instance();

  void Swap(BuffModConditionChangeConfig* other);

  // implements Message ----------------------------------------------

  BuffModConditionChangeConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModConditionChangeConfig& from);
  void MergeFrom(const BuffModConditionChangeConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModConditionChangeConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModConditionChangeConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional int32 MainType = 3;
  inline bool has_maintype() const;
  inline void clear_maintype();
  static const int kMainTypeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModConditionChangeConfig</name>
  	<Function>
  		<name>maintype</name>
  		<replaceName>MainType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maintype</name>
  		<replaceName>MainType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maintype</name>
  		<replaceName>MainType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 maintype() const;
  inline void set_maintype(::google::protobuf::int32 value);

  // optional int32 Relation = 4;
  inline bool has_relation() const;
  inline void clear_relation();
  static const int kRelationFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModConditionChangeConfig</name>
  	<Function>
  		<name>relation</name>
  		<replaceName>Relation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_relation</name>
  		<replaceName>Relation</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_relation</name>
  		<replaceName>Relation</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 relation() const;
  inline void set_relation(::google::protobuf::int32 value);

  // optional int32 Target = 5;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>BuffModConditionChangeConfig</name>
  	<Function>
  		<name>target</name>
  		<replaceName>Target</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_target</name>
  		<replaceName>Target</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_target</name>
  		<replaceName>Target</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 target() const;
  inline void set_target(::google::protobuf::int32 value);

  // optional int32 Param1 = 6;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>BuffModConditionChangeConfig</name>
  	<Function>
  		<name>param1</name>
  		<replaceName>Param1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_param1</name>
  		<replaceName>Param1</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_param1</name>
  		<replaceName>Param1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 param1() const;
  inline void set_param1(::google::protobuf::int32 value);

  // optional int32 Param2 = 7;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>BuffModConditionChangeConfig</name>
  	<Function>
  		<name>param2</name>
  		<replaceName>Param2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_param2</name>
  		<replaceName>Param2</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_param2</name>
  		<replaceName>Param2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 param2() const;
  inline void set_param2(::google::protobuf::int32 value);

  // repeated int32 ParamArr = 8;
  inline int paramarr_size() const;
  inline void clear_paramarr();
  static const int kParamArrFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>BuffModConditionChangeConfig</name>
  	<Function>
  		<name>paramarr</name>
  		<replaceName>ParamArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_paramarr</name>
  		<replaceName>ParamArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_paramarr</name>
  		<replaceName>ParamArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_paramarr</name>
  		<replaceName>ParamArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>paramarr_size</name>
  		<replaceName>ParamArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 paramarr(int index) const;
  inline void set_paramarr(int index, ::google::protobuf::int32 value);
  inline void add_paramarr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      paramarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_paramarr();

  // @@protoc_insertion_point(class_scope:pb.BuffModConditionChangeConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_maintype();
  inline void clear_has_maintype();
  inline void set_has_relation();
  inline void clear_has_relation();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::int32 maintype_;
  ::google::protobuf::int32 relation_;
  ::google::protobuf::int32 target_;
  ::google::protobuf::int32 param1_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > paramarr_;
  ::google::protobuf::int32 param2_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModConditionChangeConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModNoRageRecoverConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModNoRageRecoverConfig : public ::google::protobuf::Message {
 public:
  BuffModNoRageRecoverConfig();
  virtual ~BuffModNoRageRecoverConfig();

  BuffModNoRageRecoverConfig(const BuffModNoRageRecoverConfig& from);

  inline BuffModNoRageRecoverConfig& operator=(const BuffModNoRageRecoverConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModNoRageRecoverConfig& default_instance();

  void Swap(BuffModNoRageRecoverConfig* other);

  // implements Message ----------------------------------------------

  BuffModNoRageRecoverConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModNoRageRecoverConfig& from);
  void MergeFrom(const BuffModNoRageRecoverConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModNoRageRecoverConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModNoRageRecoverConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional bool EndWhenDamaged = 3;
  inline bool has_endwhendamaged() const;
  inline void clear_endwhendamaged();
  static const int kEndWhenDamagedFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModNoRageRecoverConfig</name>
  	<Function>
  		<name>endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool endwhendamaged() const;
  inline void set_endwhendamaged(bool value);

  // @@protoc_insertion_point(class_scope:pb.BuffModNoRageRecoverConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_endwhendamaged();
  inline void clear_has_endwhendamaged();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 delaytime_;
  bool active_;
  bool endwhendamaged_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModNoRageRecoverConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModInheritExistBuffStackConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModInheritExistBuffStackConfig : public ::google::protobuf::Message {
 public:
  BuffModInheritExistBuffStackConfig();
  virtual ~BuffModInheritExistBuffStackConfig();

  BuffModInheritExistBuffStackConfig(const BuffModInheritExistBuffStackConfig& from);

  inline BuffModInheritExistBuffStackConfig& operator=(const BuffModInheritExistBuffStackConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModInheritExistBuffStackConfig& default_instance();

  void Swap(BuffModInheritExistBuffStackConfig* other);

  // implements Message ----------------------------------------------

  BuffModInheritExistBuffStackConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModInheritExistBuffStackConfig& from);
  void MergeFrom(const BuffModInheritExistBuffStackConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModInheritExistBuffStackConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModInheritExistBuffStackConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional int32 BuffId = 3;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModInheritExistBuffStackConfig</name>
  	<Function>
  		<name>buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 buffid() const;
  inline void set_buffid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModInheritExistBuffStackConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_buffid();
  inline void clear_has_buffid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::int32 buffid_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModInheritExistBuffStackConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModReflectBuffConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModReflectBuffConfig : public ::google::protobuf::Message {
 public:
  BuffModReflectBuffConfig();
  virtual ~BuffModReflectBuffConfig();

  BuffModReflectBuffConfig(const BuffModReflectBuffConfig& from);

  inline BuffModReflectBuffConfig& operator=(const BuffModReflectBuffConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModReflectBuffConfig& default_instance();

  void Swap(BuffModReflectBuffConfig* other);

  // implements Message ----------------------------------------------

  BuffModReflectBuffConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModReflectBuffConfig& from);
  void MergeFrom(const BuffModReflectBuffConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModReflectBuffConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 CD = 2;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCDFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModReflectBuffConfig</name>
  	<Function>
  		<name>cd</name>
  		<replaceName>CD</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cd</name>
  		<replaceName>CD</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cd</name>
  		<replaceName>CD</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 cd() const;
  inline void set_cd(::google::protobuf::int32 value);

  // repeated int32 ReflectableSubTypes = 3;
  inline int reflectablesubtypes_size() const;
  inline void clear_reflectablesubtypes();
  static const int kReflectableSubTypesFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModReflectBuffConfig</name>
  	<Function>
  		<name>reflectablesubtypes</name>
  		<replaceName>ReflectableSubTypes</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_reflectablesubtypes</name>
  		<replaceName>ReflectableSubTypes</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_reflectablesubtypes</name>
  		<replaceName>ReflectableSubTypes</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reflectablesubtypes</name>
  		<replaceName>ReflectableSubTypes</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>reflectablesubtypes_size</name>
  		<replaceName>ReflectableSubTypes</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 reflectablesubtypes(int index) const;
  inline void set_reflectablesubtypes(int index, ::google::protobuf::int32 value);
  inline void add_reflectablesubtypes(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      reflectablesubtypes() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_reflectablesubtypes();

  // @@protoc_insertion_point(class_scope:pb.BuffModReflectBuffConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_cd();
  inline void clear_has_cd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 cd_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > reflectablesubtypes_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModReflectBuffConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModFatalDmgShiftConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModFatalDmgShiftConfig : public ::google::protobuf::Message {
 public:
  BuffModFatalDmgShiftConfig();
  virtual ~BuffModFatalDmgShiftConfig();

  BuffModFatalDmgShiftConfig(const BuffModFatalDmgShiftConfig& from);

  inline BuffModFatalDmgShiftConfig& operator=(const BuffModFatalDmgShiftConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModFatalDmgShiftConfig& default_instance();

  void Swap(BuffModFatalDmgShiftConfig* other);

  // implements Message ----------------------------------------------

  BuffModFatalDmgShiftConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModFatalDmgShiftConfig& from);
  void MergeFrom(const BuffModFatalDmgShiftConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModFatalDmgShiftConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 Count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModFatalDmgShiftConfig</name>
  	<Function>
  		<name>count</name>
  		<replaceName>Count</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_count</name>
  		<replaceName>Count</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_count</name>
  		<replaceName>Count</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // optional int32 CD = 3;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCDFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModFatalDmgShiftConfig</name>
  	<Function>
  		<name>cd</name>
  		<replaceName>CD</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cd</name>
  		<replaceName>CD</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cd</name>
  		<replaceName>CD</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 cd() const;
  inline void set_cd(::google::protobuf::int32 value);

  // optional int32 TargetType = 4;
  inline bool has_targettype() const;
  inline void clear_targettype();
  static const int kTargetTypeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModFatalDmgShiftConfig</name>
  	<Function>
  		<name>targettype</name>
  		<replaceName>TargetType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targettype</name>
  		<replaceName>TargetType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targettype</name>
  		<replaceName>TargetType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 targettype() const;
  inline void set_targettype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModFatalDmgShiftConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_cd();
  inline void clear_has_cd();
  inline void set_has_targettype();
  inline void clear_has_targettype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::int32 cd_;
  ::google::protobuf::int32 targettype_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModFatalDmgShiftConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModRageImmunityConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModRageImmunityConfig : public ::google::protobuf::Message {
 public:
  BuffModRageImmunityConfig();
  virtual ~BuffModRageImmunityConfig();

  BuffModRageImmunityConfig(const BuffModRageImmunityConfig& from);

  inline BuffModRageImmunityConfig& operator=(const BuffModRageImmunityConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModRageImmunityConfig& default_instance();

  void Swap(BuffModRageImmunityConfig* other);

  // implements Message ----------------------------------------------

  BuffModRageImmunityConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModRageImmunityConfig& from);
  void MergeFrom(const BuffModRageImmunityConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModRageImmunityConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 Type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModRageImmunityConfig</name>
  	<Function>
  		<name>type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModRageImmunityConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffModRageImmunityConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffBaseDataModel</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffBaseDataModel : public ::google::protobuf::Message {
 public:
  BuffBaseDataModel();
  virtual ~BuffBaseDataModel();

  BuffBaseDataModel(const BuffBaseDataModel& from);

  inline BuffBaseDataModel& operator=(const BuffBaseDataModel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffBaseDataModel& default_instance();

  void Swap(BuffBaseDataModel* other);

  // implements Message ----------------------------------------------

  BuffBaseDataModel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffBaseDataModel& from);
  void MergeFrom(const BuffBaseDataModel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 LabelID = 2;
  inline bool has_labelid() const;
  inline void clear_labelid();
  static const int kLabelIDFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>labelid</name>
  		<replaceName>LabelID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_labelid</name>
  		<replaceName>LabelID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_labelid</name>
  		<replaceName>LabelID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 labelid() const;
  inline void set_labelid(::google::protobuf::int32 value);

  // optional int32 HitRate = 3;
  inline bool has_hitrate() const;
  inline void clear_hitrate();
  static const int kHitRateFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>hitrate</name>
  		<replaceName>HitRate</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hitrate</name>
  		<replaceName>HitRate</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hitrate</name>
  		<replaceName>HitRate</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 hitrate() const;
  inline void set_hitrate(::google::protobuf::int32 value);

  // optional int32 MainType = 4;
  inline bool has_maintype() const;
  inline void clear_maintype();
  static const int kMainTypeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>maintype</name>
  		<replaceName>MainType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maintype</name>
  		<replaceName>MainType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maintype</name>
  		<replaceName>MainType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 maintype() const;
  inline void set_maintype(::google::protobuf::int32 value);

  // optional int32 SubType = 5;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubTypeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>subtype</name>
  		<replaceName>SubType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_subtype</name>
  		<replaceName>SubType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_subtype</name>
  		<replaceName>SubType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 subtype() const;
  inline void set_subtype(::google::protobuf::int32 value);

  // optional int32 LastTime = 6;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>lasttime</name>
  		<replaceName>LastTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lasttime</name>
  		<replaceName>LastTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lasttime</name>
  		<replaceName>LastTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 lasttime() const;
  inline void set_lasttime(::google::protobuf::int32 value);

  // optional int32 LastTimeGrowth = 7;
  inline bool has_lasttimegrowth() const;
  inline void clear_lasttimegrowth();
  static const int kLastTimeGrowthFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>lasttimegrowth</name>
  		<replaceName>LastTimeGrowth</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lasttimegrowth</name>
  		<replaceName>LastTimeGrowth</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lasttimegrowth</name>
  		<replaceName>LastTimeGrowth</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 lasttimegrowth() const;
  inline void set_lasttimegrowth(::google::protobuf::int32 value);

  // optional int32 PurgeType = 8;
  inline bool has_purgetype() const;
  inline void clear_purgetype();
  static const int kPurgeTypeFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>purgetype</name>
  		<replaceName>PurgeType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_purgetype</name>
  		<replaceName>PurgeType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_purgetype</name>
  		<replaceName>PurgeType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 purgetype() const;
  inline void set_purgetype(::google::protobuf::int32 value);

  // repeated int32 PurgeBuffArr = 25;
  inline int purgebuffarr_size() const;
  inline void clear_purgebuffarr();
  static const int kPurgeBuffArrFieldNumber = 25;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>purgebuffarr</name>
  		<replaceName>PurgeBuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_purgebuffarr</name>
  		<replaceName>PurgeBuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_purgebuffarr</name>
  		<replaceName>PurgeBuffArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_purgebuffarr</name>
  		<replaceName>PurgeBuffArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>purgebuffarr_size</name>
  		<replaceName>PurgeBuffArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 purgebuffarr(int index) const;
  inline void set_purgebuffarr(int index, ::google::protobuf::int32 value);
  inline void add_purgebuffarr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      purgebuffarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_purgebuffarr();

  // optional int32 OverlyType = 9;
  inline bool has_overlytype() const;
  inline void clear_overlytype();
  static const int kOverlyTypeFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>overlytype</name>
  		<replaceName>OverlyType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_overlytype</name>
  		<replaceName>OverlyType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_overlytype</name>
  		<replaceName>OverlyType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 overlytype() const;
  inline void set_overlytype(::google::protobuf::int32 value);

  // optional int32 MaxOverlyNum = 10;
  inline bool has_maxoverlynum() const;
  inline void clear_maxoverlynum();
  static const int kMaxOverlyNumFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>maxoverlynum</name>
  		<replaceName>MaxOverlyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxoverlynum</name>
  		<replaceName>MaxOverlyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxoverlynum</name>
  		<replaceName>MaxOverlyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 maxoverlynum() const;
  inline void set_maxoverlynum(::google::protobuf::int32 value);

  // optional string IconPath = 11;
  inline bool has_iconpath() const;
  inline void clear_iconpath();
  static const int kIconPathFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>iconpath</name>
  		<replaceName>IconPath</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iconpath</name>
  		<replaceName>IconPath</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iconpath</name>
  		<replaceName>IconPath</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& iconpath() const;
  inline void set_iconpath(const ::std::string& value);
  inline void set_iconpath(const char* value);
  inline void set_iconpath(const char* value, size_t size);
  inline ::std::string* mutable_iconpath();
  inline ::std::string* release_iconpath();
  inline void set_allocated_iconpath(::std::string* iconpath);

  // optional string StartEffectName = 12;
  inline bool has_starteffectname() const;
  inline void clear_starteffectname();
  static const int kStartEffectNameFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>starteffectname</name>
  		<replaceName>StartEffectName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starteffectname</name>
  		<replaceName>StartEffectName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starteffectname</name>
  		<replaceName>StartEffectName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& starteffectname() const;
  inline void set_starteffectname(const ::std::string& value);
  inline void set_starteffectname(const char* value);
  inline void set_starteffectname(const char* value, size_t size);
  inline ::std::string* mutable_starteffectname();
  inline ::std::string* release_starteffectname();
  inline void set_allocated_starteffectname(::std::string* starteffectname);

  // optional int32 StartEffectParent = 13;
  inline bool has_starteffectparent() const;
  inline void clear_starteffectparent();
  static const int kStartEffectParentFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>starteffectparent</name>
  		<replaceName>StartEffectParent</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starteffectparent</name>
  		<replaceName>StartEffectParent</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starteffectparent</name>
  		<replaceName>StartEffectParent</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 starteffectparent() const;
  inline void set_starteffectparent(::google::protobuf::int32 value);

  // optional int32 LastEffectParent = 15;
  inline bool has_lasteffectparent() const;
  inline void clear_lasteffectparent();
  static const int kLastEffectParentFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>lasteffectparent</name>
  		<replaceName>LastEffectParent</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lasteffectparent</name>
  		<replaceName>LastEffectParent</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lasteffectparent</name>
  		<replaceName>LastEffectParent</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 lasteffectparent() const;
  inline void set_lasteffectparent(::google::protobuf::int32 value);

  // optional string EndEffectName = 16;
  inline bool has_endeffectname() const;
  inline void clear_endeffectname();
  static const int kEndEffectNameFieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>endeffectname</name>
  		<replaceName>EndEffectName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endeffectname</name>
  		<replaceName>EndEffectName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endeffectname</name>
  		<replaceName>EndEffectName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& endeffectname() const;
  inline void set_endeffectname(const ::std::string& value);
  inline void set_endeffectname(const char* value);
  inline void set_endeffectname(const char* value, size_t size);
  inline ::std::string* mutable_endeffectname();
  inline ::std::string* release_endeffectname();
  inline void set_allocated_endeffectname(::std::string* endeffectname);

  // optional int32 EndEffectParent = 17;
  inline bool has_endeffectparent() const;
  inline void clear_endeffectparent();
  static const int kEndEffectParentFieldNumber = 17;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>endeffectparent</name>
  		<replaceName>EndEffectParent</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endeffectparent</name>
  		<replaceName>EndEffectParent</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endeffectparent</name>
  		<replaceName>EndEffectParent</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 endeffectparent() const;
  inline void set_endeffectparent(::google::protobuf::int32 value);

  // optional string SpecialShader = 18;
  inline bool has_specialshader() const;
  inline void clear_specialshader();
  static const int kSpecialShaderFieldNumber = 18;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>specialshader</name>
  		<replaceName>SpecialShader</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_specialshader</name>
  		<replaceName>SpecialShader</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_specialshader</name>
  		<replaceName>SpecialShader</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& specialshader() const;
  inline void set_specialshader(const ::std::string& value);
  inline void set_specialshader(const char* value);
  inline void set_specialshader(const char* value, size_t size);
  inline ::std::string* mutable_specialshader();
  inline ::std::string* release_specialshader();
  inline void set_allocated_specialshader(::std::string* specialshader);

  // optional string GeneralShader = 26;
  inline bool has_generalshader() const;
  inline void clear_generalshader();
  static const int kGeneralShaderFieldNumber = 26;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>generalshader</name>
  		<replaceName>GeneralShader</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_generalshader</name>
  		<replaceName>GeneralShader</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_generalshader</name>
  		<replaceName>GeneralShader</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& generalshader() const;
  inline void set_generalshader(const ::std::string& value);
  inline void set_generalshader(const char* value);
  inline void set_generalshader(const char* value, size_t size);
  inline ::std::string* mutable_generalshader();
  inline ::std::string* release_generalshader();
  inline void set_allocated_generalshader(::std::string* generalshader);

  // optional string LastingAction = 19;
  inline bool has_lastingaction() const;
  inline void clear_lastingaction();
  static const int kLastingActionFieldNumber = 19;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>lastingaction</name>
  		<replaceName>LastingAction</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lastingaction</name>
  		<replaceName>LastingAction</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lastingaction</name>
  		<replaceName>LastingAction</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& lastingaction() const;
  inline void set_lastingaction(const ::std::string& value);
  inline void set_lastingaction(const char* value);
  inline void set_lastingaction(const char* value, size_t size);
  inline ::std::string* mutable_lastingaction();
  inline ::std::string* release_lastingaction();
  inline void set_allocated_lastingaction(::std::string* lastingaction);

  // repeated string LastEffectArr = 20;
  inline int lasteffectarr_size() const;
  inline void clear_lasteffectarr();
  static const int kLastEffectArrFieldNumber = 20;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>lasteffectarr</name>
  		<replaceName>LastEffectArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_lasteffectarr</name>
  		<replaceName>LastEffectArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_lasteffectarr</name>
  		<replaceName>LastEffectArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lasteffectarr</name>
  		<replaceName>LastEffectArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>lasteffectarr_size</name>
  		<replaceName>LastEffectArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& lasteffectarr(int index) const;
  inline ::std::string* mutable_lasteffectarr(int index);
  inline void set_lasteffectarr(int index, const ::std::string& value);
  inline void set_lasteffectarr(int index, const char* value);
  inline void set_lasteffectarr(int index, const char* value, size_t size);
  inline ::std::string* add_lasteffectarr();
  inline void add_lasteffectarr(const ::std::string& value);
  inline void add_lasteffectarr(const char* value);
  inline void add_lasteffectarr(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& lasteffectarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_lasteffectarr();

  // optional int32 LastActionDelay = 21;
  inline bool has_lastactiondelay() const;
  inline void clear_lastactiondelay();
  static const int kLastActionDelayFieldNumber = 21;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>lastactiondelay</name>
  		<replaceName>LastActionDelay</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lastactiondelay</name>
  		<replaceName>LastActionDelay</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lastactiondelay</name>
  		<replaceName>LastActionDelay</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 lastactiondelay() const;
  inline void set_lastactiondelay(::google::protobuf::int32 value);

  // repeated .pb.BuffSingleEffect StartEffect = 22;
  inline int starteffect_size() const;
  inline void clear_starteffect();
  static const int kStartEffectFieldNumber = 22;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>starteffect</name>
  		<replaceName>StartEffect</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_starteffect</name>
  		<replaceName>StartEffect</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_starteffect</name>
  		<replaceName>StartEffect</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starteffect</name>
  		<replaceName>StartEffect</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>starteffect_size</name>
  		<replaceName>StartEffect</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::BuffSingleEffect& starteffect(int index) const;
  inline ::pb::BuffSingleEffect* mutable_starteffect(int index);
  inline ::pb::BuffSingleEffect* add_starteffect();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::BuffSingleEffect >&
      starteffect() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::BuffSingleEffect >*
      mutable_starteffect();

  // repeated .pb.BuffRepeatedEffect LastEffect = 23;
  inline int lasteffect_size() const;
  inline void clear_lasteffect();
  static const int kLastEffectFieldNumber = 23;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>lasteffect</name>
  		<replaceName>LastEffect</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_lasteffect</name>
  		<replaceName>LastEffect</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_lasteffect</name>
  		<replaceName>LastEffect</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lasteffect</name>
  		<replaceName>LastEffect</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>lasteffect_size</name>
  		<replaceName>LastEffect</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::BuffRepeatedEffect& lasteffect(int index) const;
  inline ::pb::BuffRepeatedEffect* mutable_lasteffect(int index);
  inline ::pb::BuffRepeatedEffect* add_lasteffect();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::BuffRepeatedEffect >&
      lasteffect() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::BuffRepeatedEffect >*
      mutable_lasteffect();

  // repeated .pb.BuffSingleEffect EndEffect = 24;
  inline int endeffect_size() const;
  inline void clear_endeffect();
  static const int kEndEffectFieldNumber = 24;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>endeffect</name>
  		<replaceName>EndEffect</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_endeffect</name>
  		<replaceName>EndEffect</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_endeffect</name>
  		<replaceName>EndEffect</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endeffect</name>
  		<replaceName>EndEffect</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>endeffect_size</name>
  		<replaceName>EndEffect</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::BuffSingleEffect& endeffect(int index) const;
  inline ::pb::BuffSingleEffect* mutable_endeffect(int index);
  inline ::pb::BuffSingleEffect* add_endeffect();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::BuffSingleEffect >&
      endeffect() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::BuffSingleEffect >*
      mutable_endeffect();

  // optional bool RemoveWhenBeControlled = 27;
  inline bool has_removewhenbecontrolled() const;
  inline void clear_removewhenbecontrolled();
  static const int kRemoveWhenBeControlledFieldNumber = 27;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>removewhenbecontrolled</name>
  		<replaceName>RemoveWhenBeControlled</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_removewhenbecontrolled</name>
  		<replaceName>RemoveWhenBeControlled</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_removewhenbecontrolled</name>
  		<replaceName>RemoveWhenBeControlled</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool removewhenbecontrolled() const;
  inline void set_removewhenbecontrolled(bool value);

  // optional bool NeedRemoveLastNonPermanentEffect = 28;
  inline bool has_needremovelastnonpermanenteffect() const;
  inline void clear_needremovelastnonpermanenteffect();
  static const int kNeedRemoveLastNonPermanentEffectFieldNumber = 28;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>needremovelastnonpermanenteffect</name>
  		<replaceName>NeedRemoveLastNonPermanentEffect</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_needremovelastnonpermanenteffect</name>
  		<replaceName>NeedRemoveLastNonPermanentEffect</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_needremovelastnonpermanenteffect</name>
  		<replaceName>NeedRemoveLastNonPermanentEffect</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool needremovelastnonpermanenteffect() const;
  inline void set_needremovelastnonpermanenteffect(bool value);

  // repeated int32 SubTypeArr = 29;
  inline int subtypearr_size() const;
  inline void clear_subtypearr();
  static const int kSubTypeArrFieldNumber = 29;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>subtypearr</name>
  		<replaceName>SubTypeArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_subtypearr</name>
  		<replaceName>SubTypeArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_subtypearr</name>
  		<replaceName>SubTypeArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_subtypearr</name>
  		<replaceName>SubTypeArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>subtypearr_size</name>
  		<replaceName>SubTypeArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 subtypearr(int index) const;
  inline void set_subtypearr(int index, ::google::protobuf::int32 value);
  inline void add_subtypearr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      subtypearr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_subtypearr();

  // optional bool RemoveWhenShapeShifted = 30;
  inline bool has_removewhenshapeshifted() const;
  inline void clear_removewhenshapeshifted();
  static const int kRemoveWhenShapeShiftedFieldNumber = 30;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>removewhenshapeshifted</name>
  		<replaceName>RemoveWhenShapeShifted</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_removewhenshapeshifted</name>
  		<replaceName>RemoveWhenShapeShifted</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_removewhenshapeshifted</name>
  		<replaceName>RemoveWhenShapeShifted</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool removewhenshapeshifted() const;
  inline void set_removewhenshapeshifted(bool value);

  // optional int32 BeCleanLevel = 31;
  inline bool has_becleanlevel() const;
  inline void clear_becleanlevel();
  static const int kBeCleanLevelFieldNumber = 31;
  /*FOR2LUA
  <Record>
  	<name>BuffBaseDataModel</name>
  	<Function>
  		<name>becleanlevel</name>
  		<replaceName>BeCleanLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_becleanlevel</name>
  		<replaceName>BeCleanLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_becleanlevel</name>
  		<replaceName>BeCleanLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 becleanlevel() const;
  inline void set_becleanlevel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffBaseDataModel)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_labelid();
  inline void clear_has_labelid();
  inline void set_has_hitrate();
  inline void clear_has_hitrate();
  inline void set_has_maintype();
  inline void clear_has_maintype();
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();
  inline void set_has_lasttimegrowth();
  inline void clear_has_lasttimegrowth();
  inline void set_has_purgetype();
  inline void clear_has_purgetype();
  inline void set_has_overlytype();
  inline void clear_has_overlytype();
  inline void set_has_maxoverlynum();
  inline void clear_has_maxoverlynum();
  inline void set_has_iconpath();
  inline void clear_has_iconpath();
  inline void set_has_starteffectname();
  inline void clear_has_starteffectname();
  inline void set_has_starteffectparent();
  inline void clear_has_starteffectparent();
  inline void set_has_lasteffectparent();
  inline void clear_has_lasteffectparent();
  inline void set_has_endeffectname();
  inline void clear_has_endeffectname();
  inline void set_has_endeffectparent();
  inline void clear_has_endeffectparent();
  inline void set_has_specialshader();
  inline void clear_has_specialshader();
  inline void set_has_generalshader();
  inline void clear_has_generalshader();
  inline void set_has_lastingaction();
  inline void clear_has_lastingaction();
  inline void set_has_lastactiondelay();
  inline void clear_has_lastactiondelay();
  inline void set_has_removewhenbecontrolled();
  inline void clear_has_removewhenbecontrolled();
  inline void set_has_needremovelastnonpermanenteffect();
  inline void clear_has_needremovelastnonpermanenteffect();
  inline void set_has_removewhenshapeshifted();
  inline void clear_has_removewhenshapeshifted();
  inline void set_has_becleanlevel();
  inline void clear_has_becleanlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 labelid_;
  ::google::protobuf::int32 hitrate_;
  ::google::protobuf::int32 maintype_;
  ::google::protobuf::int32 subtype_;
  ::google::protobuf::int32 lasttime_;
  ::google::protobuf::int32 lasttimegrowth_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > purgebuffarr_;
  ::google::protobuf::int32 purgetype_;
  ::google::protobuf::int32 overlytype_;
  ::std::string* iconpath_;
  ::google::protobuf::int32 maxoverlynum_;
  ::google::protobuf::int32 starteffectparent_;
  ::std::string* starteffectname_;
  ::std::string* endeffectname_;
  ::google::protobuf::int32 lasteffectparent_;
  ::google::protobuf::int32 endeffectparent_;
  ::std::string* specialshader_;
  ::std::string* generalshader_;
  ::std::string* lastingaction_;
  ::google::protobuf::RepeatedPtrField< ::std::string> lasteffectarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::BuffSingleEffect > starteffect_;
  ::google::protobuf::RepeatedPtrField< ::pb::BuffRepeatedEffect > lasteffect_;
  ::google::protobuf::RepeatedPtrField< ::pb::BuffSingleEffect > endeffect_;
  ::google::protobuf::int32 lastactiondelay_;
  bool removewhenbecontrolled_;
  bool needremovelastnonpermanenteffect_;
  bool removewhenshapeshifted_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > subtypearr_;
  ::google::protobuf::int32 becleanlevel_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase_2eproto();

  void InitAsDefaultInstance();
  static BuffBaseDataModel* default_instance_;
};
// ===================================================================


// ===================================================================

// BuffDataModel

// optional int32 PercentParam = 1;
inline bool BuffDataModel::has_percentparam() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffDataModel::set_has_percentparam() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffDataModel::clear_has_percentparam() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffDataModel::clear_percentparam() {
  percentparam_ = 0;
  clear_has_percentparam();
}
inline ::google::protobuf::int32 BuffDataModel::percentparam() const {
  // @@protoc_insertion_point(field_get:pb.BuffDataModel.PercentParam)
  return percentparam_;
}
inline void BuffDataModel::set_percentparam(::google::protobuf::int32 value) {
  set_has_percentparam();
  percentparam_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffDataModel.PercentParam)
}

// optional int32 PercentGrowth = 2;
inline bool BuffDataModel::has_percentgrowth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffDataModel::set_has_percentgrowth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffDataModel::clear_has_percentgrowth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffDataModel::clear_percentgrowth() {
  percentgrowth_ = 0;
  clear_has_percentgrowth();
}
inline ::google::protobuf::int32 BuffDataModel::percentgrowth() const {
  // @@protoc_insertion_point(field_get:pb.BuffDataModel.PercentGrowth)
  return percentgrowth_;
}
inline void BuffDataModel::set_percentgrowth(::google::protobuf::int32 value) {
  set_has_percentgrowth();
  percentgrowth_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffDataModel.PercentGrowth)
}

// optional int32 ValueParma = 3;
inline bool BuffDataModel::has_valueparma() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffDataModel::set_has_valueparma() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffDataModel::clear_has_valueparma() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffDataModel::clear_valueparma() {
  valueparma_ = 0;
  clear_has_valueparma();
}
inline ::google::protobuf::int32 BuffDataModel::valueparma() const {
  // @@protoc_insertion_point(field_get:pb.BuffDataModel.ValueParma)
  return valueparma_;
}
inline void BuffDataModel::set_valueparma(::google::protobuf::int32 value) {
  set_has_valueparma();
  valueparma_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffDataModel.ValueParma)
}

// optional int32 ValueGrowth = 4;
inline bool BuffDataModel::has_valuegrowth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffDataModel::set_has_valuegrowth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffDataModel::clear_has_valuegrowth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffDataModel::clear_valuegrowth() {
  valuegrowth_ = 0;
  clear_has_valuegrowth();
}
inline ::google::protobuf::int32 BuffDataModel::valuegrowth() const {
  // @@protoc_insertion_point(field_get:pb.BuffDataModel.ValueGrowth)
  return valuegrowth_;
}
inline void BuffDataModel::set_valuegrowth(::google::protobuf::int32 value) {
  set_has_valuegrowth();
  valuegrowth_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffDataModel.ValueGrowth)
}

// -------------------------------------------------------------------

// BuffDatasModel

// repeated int32 PercentParam = 1;
inline int BuffDatasModel::percentparam_size() const {
  return percentparam_.size();
}
inline void BuffDatasModel::clear_percentparam() {
  percentparam_.Clear();
}
inline ::google::protobuf::int32 BuffDatasModel::percentparam(int index) const {
  // @@protoc_insertion_point(field_get:pb.BuffDatasModel.PercentParam)
  return percentparam_.Get(index);
}
inline void BuffDatasModel::set_percentparam(int index, ::google::protobuf::int32 value) {
  percentparam_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.BuffDatasModel.PercentParam)
}
inline void BuffDatasModel::add_percentparam(::google::protobuf::int32 value) {
  percentparam_.Add(value);
  // @@protoc_insertion_point(field_add:pb.BuffDatasModel.PercentParam)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BuffDatasModel::percentparam() const {
  // @@protoc_insertion_point(field_list:pb.BuffDatasModel.PercentParam)
  return percentparam_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BuffDatasModel::mutable_percentparam() {
  // @@protoc_insertion_point(field_mutable_list:pb.BuffDatasModel.PercentParam)
  return &percentparam_;
}

// repeated int32 PercentGrowth = 2;
inline int BuffDatasModel::percentgrowth_size() const {
  return percentgrowth_.size();
}
inline void BuffDatasModel::clear_percentgrowth() {
  percentgrowth_.Clear();
}
inline ::google::protobuf::int32 BuffDatasModel::percentgrowth(int index) const {
  // @@protoc_insertion_point(field_get:pb.BuffDatasModel.PercentGrowth)
  return percentgrowth_.Get(index);
}
inline void BuffDatasModel::set_percentgrowth(int index, ::google::protobuf::int32 value) {
  percentgrowth_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.BuffDatasModel.PercentGrowth)
}
inline void BuffDatasModel::add_percentgrowth(::google::protobuf::int32 value) {
  percentgrowth_.Add(value);
  // @@protoc_insertion_point(field_add:pb.BuffDatasModel.PercentGrowth)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BuffDatasModel::percentgrowth() const {
  // @@protoc_insertion_point(field_list:pb.BuffDatasModel.PercentGrowth)
  return percentgrowth_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BuffDatasModel::mutable_percentgrowth() {
  // @@protoc_insertion_point(field_mutable_list:pb.BuffDatasModel.PercentGrowth)
  return &percentgrowth_;
}

// repeated int32 ValueParma = 3;
inline int BuffDatasModel::valueparma_size() const {
  return valueparma_.size();
}
inline void BuffDatasModel::clear_valueparma() {
  valueparma_.Clear();
}
inline ::google::protobuf::int32 BuffDatasModel::valueparma(int index) const {
  // @@protoc_insertion_point(field_get:pb.BuffDatasModel.ValueParma)
  return valueparma_.Get(index);
}
inline void BuffDatasModel::set_valueparma(int index, ::google::protobuf::int32 value) {
  valueparma_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.BuffDatasModel.ValueParma)
}
inline void BuffDatasModel::add_valueparma(::google::protobuf::int32 value) {
  valueparma_.Add(value);
  // @@protoc_insertion_point(field_add:pb.BuffDatasModel.ValueParma)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BuffDatasModel::valueparma() const {
  // @@protoc_insertion_point(field_list:pb.BuffDatasModel.ValueParma)
  return valueparma_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BuffDatasModel::mutable_valueparma() {
  // @@protoc_insertion_point(field_mutable_list:pb.BuffDatasModel.ValueParma)
  return &valueparma_;
}

// repeated int32 ValueGrowth = 4;
inline int BuffDatasModel::valuegrowth_size() const {
  return valuegrowth_.size();
}
inline void BuffDatasModel::clear_valuegrowth() {
  valuegrowth_.Clear();
}
inline ::google::protobuf::int32 BuffDatasModel::valuegrowth(int index) const {
  // @@protoc_insertion_point(field_get:pb.BuffDatasModel.ValueGrowth)
  return valuegrowth_.Get(index);
}
inline void BuffDatasModel::set_valuegrowth(int index, ::google::protobuf::int32 value) {
  valuegrowth_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.BuffDatasModel.ValueGrowth)
}
inline void BuffDatasModel::add_valuegrowth(::google::protobuf::int32 value) {
  valuegrowth_.Add(value);
  // @@protoc_insertion_point(field_add:pb.BuffDatasModel.ValueGrowth)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BuffDatasModel::valuegrowth() const {
  // @@protoc_insertion_point(field_list:pb.BuffDatasModel.ValueGrowth)
  return valuegrowth_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BuffDatasModel::mutable_valuegrowth() {
  // @@protoc_insertion_point(field_mutable_list:pb.BuffDatasModel.ValueGrowth)
  return &valuegrowth_;
}

// -------------------------------------------------------------------

// BuffDataAttribute

// optional int32 Type = 1;
inline bool BuffDataAttribute::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffDataAttribute::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffDataAttribute::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffDataAttribute::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BuffDataAttribute::type() const {
  // @@protoc_insertion_point(field_get:pb.BuffDataAttribute.Type)
  return type_;
}
inline void BuffDataAttribute::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffDataAttribute.Type)
}

// optional .pb.BuffDataModel Data = 2;
inline bool BuffDataAttribute::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffDataAttribute::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffDataAttribute::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffDataAttribute::clear_data() {
  if (data_ != NULL) data_->::pb::BuffDataModel::Clear();
  clear_has_data();
}
inline const ::pb::BuffDataModel& BuffDataAttribute::data() const {
  // @@protoc_insertion_point(field_get:pb.BuffDataAttribute.Data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::pb::BuffDataModel* BuffDataAttribute::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::pb::BuffDataModel;
  // @@protoc_insertion_point(field_mutable:pb.BuffDataAttribute.Data)
  return data_;
}
inline ::pb::BuffDataModel* BuffDataAttribute::release_data() {
  clear_has_data();
  ::pb::BuffDataModel* temp = data_;
  data_ = NULL;
  return temp;
}
inline void BuffDataAttribute::set_allocated_data(::pb::BuffDataModel* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BuffDataAttribute.Data)
}

// -------------------------------------------------------------------

// BuffModPropertyDecConfig

// optional bool Active = 1;
inline bool BuffModPropertyDecConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModPropertyDecConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModPropertyDecConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModPropertyDecConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModPropertyDecConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModPropertyDecConfig.Active)
  return active_;
}
inline void BuffModPropertyDecConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModPropertyDecConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModPropertyDecConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModPropertyDecConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModPropertyDecConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModPropertyDecConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModPropertyDecConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModPropertyDecConfig.DelayTime)
  return delaytime_;
}
inline void BuffModPropertyDecConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModPropertyDecConfig.DelayTime)
}

// optional int32 Type = 3;
inline bool BuffModPropertyDecConfig::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModPropertyDecConfig::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModPropertyDecConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModPropertyDecConfig::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BuffModPropertyDecConfig::type() const {
  // @@protoc_insertion_point(field_get:pb.BuffModPropertyDecConfig.Type)
  return type_;
}
inline void BuffModPropertyDecConfig::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModPropertyDecConfig.Type)
}

// -------------------------------------------------------------------

// BuffModChangeDmgHelper

// optional int32 Type = 1;
inline bool BuffModChangeDmgHelper::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModChangeDmgHelper::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModChangeDmgHelper::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModChangeDmgHelper::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BuffModChangeDmgHelper::type() const {
  // @@protoc_insertion_point(field_get:pb.BuffModChangeDmgHelper.Type)
  return type_;
}
inline void BuffModChangeDmgHelper::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModChangeDmgHelper.Type)
}

// optional int32 Value = 2;
inline bool BuffModChangeDmgHelper::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModChangeDmgHelper::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModChangeDmgHelper::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModChangeDmgHelper::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 BuffModChangeDmgHelper::value() const {
  // @@protoc_insertion_point(field_get:pb.BuffModChangeDmgHelper.Value)
  return value_;
}
inline void BuffModChangeDmgHelper::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModChangeDmgHelper.Value)
}

// optional int32 Attribute = 3;
inline bool BuffModChangeDmgHelper::has_attribute() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModChangeDmgHelper::set_has_attribute() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModChangeDmgHelper::clear_has_attribute() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModChangeDmgHelper::clear_attribute() {
  attribute_ = 0;
  clear_has_attribute();
}
inline ::google::protobuf::int32 BuffModChangeDmgHelper::attribute() const {
  // @@protoc_insertion_point(field_get:pb.BuffModChangeDmgHelper.Attribute)
  return attribute_;
}
inline void BuffModChangeDmgHelper::set_attribute(::google::protobuf::int32 value) {
  set_has_attribute();
  attribute_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModChangeDmgHelper.Attribute)
}

// optional int32 ValueGrowth = 4;
inline bool BuffModChangeDmgHelper::has_valuegrowth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffModChangeDmgHelper::set_has_valuegrowth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffModChangeDmgHelper::clear_has_valuegrowth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffModChangeDmgHelper::clear_valuegrowth() {
  valuegrowth_ = 0;
  clear_has_valuegrowth();
}
inline ::google::protobuf::int32 BuffModChangeDmgHelper::valuegrowth() const {
  // @@protoc_insertion_point(field_get:pb.BuffModChangeDmgHelper.ValueGrowth)
  return valuegrowth_;
}
inline void BuffModChangeDmgHelper::set_valuegrowth(::google::protobuf::int32 value) {
  set_has_valuegrowth();
  valuegrowth_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModChangeDmgHelper.ValueGrowth)
}

// -------------------------------------------------------------------

// BuffModChangeDmgByBuffSubConfig

// optional bool Active = 1;
inline bool BuffModChangeDmgByBuffSubConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModChangeDmgByBuffSubConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModChangeDmgByBuffSubConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModChangeDmgByBuffSubConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModChangeDmgByBuffSubConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModChangeDmgByBuffSubConfig.Active)
  return active_;
}
inline void BuffModChangeDmgByBuffSubConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModChangeDmgByBuffSubConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModChangeDmgByBuffSubConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModChangeDmgByBuffSubConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModChangeDmgByBuffSubConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModChangeDmgByBuffSubConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModChangeDmgByBuffSubConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModChangeDmgByBuffSubConfig.DelayTime)
  return delaytime_;
}
inline void BuffModChangeDmgByBuffSubConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModChangeDmgByBuffSubConfig.DelayTime)
}

// repeated .pb.BuffModChangeDmgHelper DataArr = 3;
inline int BuffModChangeDmgByBuffSubConfig::dataarr_size() const {
  return dataarr_.size();
}
inline void BuffModChangeDmgByBuffSubConfig::clear_dataarr() {
  dataarr_.Clear();
}
inline const ::pb::BuffModChangeDmgHelper& BuffModChangeDmgByBuffSubConfig::dataarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.BuffModChangeDmgByBuffSubConfig.DataArr)
  return dataarr_.Get(index);
}
inline ::pb::BuffModChangeDmgHelper* BuffModChangeDmgByBuffSubConfig::mutable_dataarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BuffModChangeDmgByBuffSubConfig.DataArr)
  return dataarr_.Mutable(index);
}
inline ::pb::BuffModChangeDmgHelper* BuffModChangeDmgByBuffSubConfig::add_dataarr() {
  // @@protoc_insertion_point(field_add:pb.BuffModChangeDmgByBuffSubConfig.DataArr)
  return dataarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::BuffModChangeDmgHelper >&
BuffModChangeDmgByBuffSubConfig::dataarr() const {
  // @@protoc_insertion_point(field_list:pb.BuffModChangeDmgByBuffSubConfig.DataArr)
  return dataarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::BuffModChangeDmgHelper >*
BuffModChangeDmgByBuffSubConfig::mutable_dataarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.BuffModChangeDmgByBuffSubConfig.DataArr)
  return &dataarr_;
}

// -------------------------------------------------------------------

// BuffModPropertyConfig

// optional bool Active = 1;
inline bool BuffModPropertyConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModPropertyConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModPropertyConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModPropertyConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModPropertyConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModPropertyConfig.Active)
  return active_;
}
inline void BuffModPropertyConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModPropertyConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModPropertyConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModPropertyConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModPropertyConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModPropertyConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModPropertyConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModPropertyConfig.DelayTime)
  return delaytime_;
}
inline void BuffModPropertyConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModPropertyConfig.DelayTime)
}

// repeated .pb.BuffDataAttribute DataArr = 3;
inline int BuffModPropertyConfig::dataarr_size() const {
  return dataarr_.size();
}
inline void BuffModPropertyConfig::clear_dataarr() {
  dataarr_.Clear();
}
inline const ::pb::BuffDataAttribute& BuffModPropertyConfig::dataarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.BuffModPropertyConfig.DataArr)
  return dataarr_.Get(index);
}
inline ::pb::BuffDataAttribute* BuffModPropertyConfig::mutable_dataarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BuffModPropertyConfig.DataArr)
  return dataarr_.Mutable(index);
}
inline ::pb::BuffDataAttribute* BuffModPropertyConfig::add_dataarr() {
  // @@protoc_insertion_point(field_add:pb.BuffModPropertyConfig.DataArr)
  return dataarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::BuffDataAttribute >&
BuffModPropertyConfig::dataarr() const {
  // @@protoc_insertion_point(field_list:pb.BuffModPropertyConfig.DataArr)
  return dataarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::BuffDataAttribute >*
BuffModPropertyConfig::mutable_dataarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.BuffModPropertyConfig.DataArr)
  return &dataarr_;
}

// optional .pb.EBattleAttrType Type = 4;
inline bool BuffModPropertyConfig::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffModPropertyConfig::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffModPropertyConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffModPropertyConfig::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::pb::EBattleAttrType BuffModPropertyConfig::type() const {
  // @@protoc_insertion_point(field_get:pb.BuffModPropertyConfig.Type)
  return static_cast< ::pb::EBattleAttrType >(type_);
}
inline void BuffModPropertyConfig::set_type(::pb::EBattleAttrType value) {
  assert(::pb::EBattleAttrType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModPropertyConfig.Type)
}

// optional int32 LifeAddPercent = 5;
inline bool BuffModPropertyConfig::has_lifeaddpercent() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BuffModPropertyConfig::set_has_lifeaddpercent() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BuffModPropertyConfig::clear_has_lifeaddpercent() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BuffModPropertyConfig::clear_lifeaddpercent() {
  lifeaddpercent_ = 0;
  clear_has_lifeaddpercent();
}
inline ::google::protobuf::int32 BuffModPropertyConfig::lifeaddpercent() const {
  // @@protoc_insertion_point(field_get:pb.BuffModPropertyConfig.LifeAddPercent)
  return lifeaddpercent_;
}
inline void BuffModPropertyConfig::set_lifeaddpercent(::google::protobuf::int32 value) {
  set_has_lifeaddpercent();
  lifeaddpercent_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModPropertyConfig.LifeAddPercent)
}

// -------------------------------------------------------------------

// BuffSingleEffect

// optional string Effect = 1;
inline bool BuffSingleEffect::has_effect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffSingleEffect::set_has_effect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffSingleEffect::clear_has_effect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffSingleEffect::clear_effect() {
  if (effect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effect_->clear();
  }
  clear_has_effect();
}
inline const ::std::string& BuffSingleEffect::effect() const {
  // @@protoc_insertion_point(field_get:pb.BuffSingleEffect.Effect)
  return *effect_;
}
inline void BuffSingleEffect::set_effect(const ::std::string& value) {
  set_has_effect();
  if (effect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effect_ = new ::std::string;
  }
  effect_->assign(value);
  // @@protoc_insertion_point(field_set:pb.BuffSingleEffect.Effect)
}
inline void BuffSingleEffect::set_effect(const char* value) {
  set_has_effect();
  if (effect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effect_ = new ::std::string;
  }
  effect_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.BuffSingleEffect.Effect)
}
inline void BuffSingleEffect::set_effect(const char* value, size_t size) {
  set_has_effect();
  if (effect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effect_ = new ::std::string;
  }
  effect_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.BuffSingleEffect.Effect)
}
inline ::std::string* BuffSingleEffect::mutable_effect() {
  set_has_effect();
  if (effect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    effect_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.BuffSingleEffect.Effect)
  return effect_;
}
inline ::std::string* BuffSingleEffect::release_effect() {
  clear_has_effect();
  if (effect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = effect_;
    effect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BuffSingleEffect::set_allocated_effect(::std::string* effect) {
  if (effect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete effect_;
  }
  if (effect) {
    set_has_effect();
    effect_ = effect;
  } else {
    clear_has_effect();
    effect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BuffSingleEffect.Effect)
}

// optional int32 Socket = 2;
inline bool BuffSingleEffect::has_socket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffSingleEffect::set_has_socket() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffSingleEffect::clear_has_socket() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffSingleEffect::clear_socket() {
  socket_ = 0;
  clear_has_socket();
}
inline ::google::protobuf::int32 BuffSingleEffect::socket() const {
  // @@protoc_insertion_point(field_get:pb.BuffSingleEffect.Socket)
  return socket_;
}
inline void BuffSingleEffect::set_socket(::google::protobuf::int32 value) {
  set_has_socket();
  socket_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffSingleEffect.Socket)
}

// optional bool TeamDirection = 3;
inline bool BuffSingleEffect::has_teamdirection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffSingleEffect::set_has_teamdirection() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffSingleEffect::clear_has_teamdirection() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffSingleEffect::clear_teamdirection() {
  teamdirection_ = false;
  clear_has_teamdirection();
}
inline bool BuffSingleEffect::teamdirection() const {
  // @@protoc_insertion_point(field_get:pb.BuffSingleEffect.TeamDirection)
  return teamdirection_;
}
inline void BuffSingleEffect::set_teamdirection(bool value) {
  set_has_teamdirection();
  teamdirection_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffSingleEffect.TeamDirection)
}

// -------------------------------------------------------------------

// BuffRepeatedEffect

// repeated string EffectArr = 1;
inline int BuffRepeatedEffect::effectarr_size() const {
  return effectarr_.size();
}
inline void BuffRepeatedEffect::clear_effectarr() {
  effectarr_.Clear();
}
inline const ::std::string& BuffRepeatedEffect::effectarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.BuffRepeatedEffect.EffectArr)
  return effectarr_.Get(index);
}
inline ::std::string* BuffRepeatedEffect::mutable_effectarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BuffRepeatedEffect.EffectArr)
  return effectarr_.Mutable(index);
}
inline void BuffRepeatedEffect::set_effectarr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.BuffRepeatedEffect.EffectArr)
  effectarr_.Mutable(index)->assign(value);
}
inline void BuffRepeatedEffect::set_effectarr(int index, const char* value) {
  effectarr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.BuffRepeatedEffect.EffectArr)
}
inline void BuffRepeatedEffect::set_effectarr(int index, const char* value, size_t size) {
  effectarr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.BuffRepeatedEffect.EffectArr)
}
inline ::std::string* BuffRepeatedEffect::add_effectarr() {
  return effectarr_.Add();
}
inline void BuffRepeatedEffect::add_effectarr(const ::std::string& value) {
  effectarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.BuffRepeatedEffect.EffectArr)
}
inline void BuffRepeatedEffect::add_effectarr(const char* value) {
  effectarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.BuffRepeatedEffect.EffectArr)
}
inline void BuffRepeatedEffect::add_effectarr(const char* value, size_t size) {
  effectarr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.BuffRepeatedEffect.EffectArr)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BuffRepeatedEffect::effectarr() const {
  // @@protoc_insertion_point(field_list:pb.BuffRepeatedEffect.EffectArr)
  return effectarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BuffRepeatedEffect::mutable_effectarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.BuffRepeatedEffect.EffectArr)
  return &effectarr_;
}

// optional int32 Socket = 2;
inline bool BuffRepeatedEffect::has_socket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffRepeatedEffect::set_has_socket() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffRepeatedEffect::clear_has_socket() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffRepeatedEffect::clear_socket() {
  socket_ = 0;
  clear_has_socket();
}
inline ::google::protobuf::int32 BuffRepeatedEffect::socket() const {
  // @@protoc_insertion_point(field_get:pb.BuffRepeatedEffect.Socket)
  return socket_;
}
inline void BuffRepeatedEffect::set_socket(::google::protobuf::int32 value) {
  set_has_socket();
  socket_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffRepeatedEffect.Socket)
}

// optional bool TeamDirection = 3;
inline bool BuffRepeatedEffect::has_teamdirection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffRepeatedEffect::set_has_teamdirection() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffRepeatedEffect::clear_has_teamdirection() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffRepeatedEffect::clear_teamdirection() {
  teamdirection_ = false;
  clear_has_teamdirection();
}
inline bool BuffRepeatedEffect::teamdirection() const {
  // @@protoc_insertion_point(field_get:pb.BuffRepeatedEffect.TeamDirection)
  return teamdirection_;
}
inline void BuffRepeatedEffect::set_teamdirection(bool value) {
  set_has_teamdirection();
  teamdirection_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffRepeatedEffect.TeamDirection)
}

// optional int32 DelayTime = 4;
inline bool BuffRepeatedEffect::has_delaytime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffRepeatedEffect::set_has_delaytime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffRepeatedEffect::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffRepeatedEffect::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffRepeatedEffect::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffRepeatedEffect.DelayTime)
  return delaytime_;
}
inline void BuffRepeatedEffect::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffRepeatedEffect.DelayTime)
}

// -------------------------------------------------------------------

// BuffModArmAttrAdd

// optional int32 AttrSource = 1;
inline bool BuffModArmAttrAdd::has_attrsource() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModArmAttrAdd::set_has_attrsource() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModArmAttrAdd::clear_has_attrsource() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModArmAttrAdd::clear_attrsource() {
  attrsource_ = 0;
  clear_has_attrsource();
}
inline ::google::protobuf::int32 BuffModArmAttrAdd::attrsource() const {
  // @@protoc_insertion_point(field_get:pb.BuffModArmAttrAdd.AttrSource)
  return attrsource_;
}
inline void BuffModArmAttrAdd::set_attrsource(::google::protobuf::int32 value) {
  set_has_attrsource();
  attrsource_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModArmAttrAdd.AttrSource)
}

// optional int32 AttrTarget = 2;
inline bool BuffModArmAttrAdd::has_attrtarget() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModArmAttrAdd::set_has_attrtarget() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModArmAttrAdd::clear_has_attrtarget() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModArmAttrAdd::clear_attrtarget() {
  attrtarget_ = 0;
  clear_has_attrtarget();
}
inline ::google::protobuf::int32 BuffModArmAttrAdd::attrtarget() const {
  // @@protoc_insertion_point(field_get:pb.BuffModArmAttrAdd.AttrTarget)
  return attrtarget_;
}
inline void BuffModArmAttrAdd::set_attrtarget(::google::protobuf::int32 value) {
  set_has_attrtarget();
  attrtarget_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModArmAttrAdd.AttrTarget)
}

// optional int32 PercentParam = 3;
inline bool BuffModArmAttrAdd::has_percentparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModArmAttrAdd::set_has_percentparam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModArmAttrAdd::clear_has_percentparam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModArmAttrAdd::clear_percentparam() {
  percentparam_ = 0;
  clear_has_percentparam();
}
inline ::google::protobuf::int32 BuffModArmAttrAdd::percentparam() const {
  // @@protoc_insertion_point(field_get:pb.BuffModArmAttrAdd.PercentParam)
  return percentparam_;
}
inline void BuffModArmAttrAdd::set_percentparam(::google::protobuf::int32 value) {
  set_has_percentparam();
  percentparam_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModArmAttrAdd.PercentParam)
}

// optional int32 LevelParam = 4;
inline bool BuffModArmAttrAdd::has_levelparam() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffModArmAttrAdd::set_has_levelparam() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffModArmAttrAdd::clear_has_levelparam() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffModArmAttrAdd::clear_levelparam() {
  levelparam_ = 0;
  clear_has_levelparam();
}
inline ::google::protobuf::int32 BuffModArmAttrAdd::levelparam() const {
  // @@protoc_insertion_point(field_get:pb.BuffModArmAttrAdd.LevelParam)
  return levelparam_;
}
inline void BuffModArmAttrAdd::set_levelparam(::google::protobuf::int32 value) {
  set_has_levelparam();
  levelparam_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModArmAttrAdd.LevelParam)
}

// -------------------------------------------------------------------

// BuffModArmAttrAddConfig

// optional bool Active = 1;
inline bool BuffModArmAttrAddConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModArmAttrAddConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModArmAttrAddConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModArmAttrAddConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModArmAttrAddConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModArmAttrAddConfig.Active)
  return active_;
}
inline void BuffModArmAttrAddConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModArmAttrAddConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModArmAttrAddConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModArmAttrAddConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModArmAttrAddConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModArmAttrAddConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModArmAttrAddConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModArmAttrAddConfig.DelayTime)
  return delaytime_;
}
inline void BuffModArmAttrAddConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModArmAttrAddConfig.DelayTime)
}

// repeated .pb.BuffModArmAttrAdd ArmAttrArr = 3;
inline int BuffModArmAttrAddConfig::armattrarr_size() const {
  return armattrarr_.size();
}
inline void BuffModArmAttrAddConfig::clear_armattrarr() {
  armattrarr_.Clear();
}
inline const ::pb::BuffModArmAttrAdd& BuffModArmAttrAddConfig::armattrarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.BuffModArmAttrAddConfig.ArmAttrArr)
  return armattrarr_.Get(index);
}
inline ::pb::BuffModArmAttrAdd* BuffModArmAttrAddConfig::mutable_armattrarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BuffModArmAttrAddConfig.ArmAttrArr)
  return armattrarr_.Mutable(index);
}
inline ::pb::BuffModArmAttrAdd* BuffModArmAttrAddConfig::add_armattrarr() {
  // @@protoc_insertion_point(field_add:pb.BuffModArmAttrAddConfig.ArmAttrArr)
  return armattrarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::BuffModArmAttrAdd >&
BuffModArmAttrAddConfig::armattrarr() const {
  // @@protoc_insertion_point(field_list:pb.BuffModArmAttrAddConfig.ArmAttrArr)
  return armattrarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::BuffModArmAttrAdd >*
BuffModArmAttrAddConfig::mutable_armattrarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.BuffModArmAttrAddConfig.ArmAttrArr)
  return &armattrarr_;
}

// optional int32 LifeAddPercent = 4;
inline bool BuffModArmAttrAddConfig::has_lifeaddpercent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffModArmAttrAddConfig::set_has_lifeaddpercent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffModArmAttrAddConfig::clear_has_lifeaddpercent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffModArmAttrAddConfig::clear_lifeaddpercent() {
  lifeaddpercent_ = 0;
  clear_has_lifeaddpercent();
}
inline ::google::protobuf::int32 BuffModArmAttrAddConfig::lifeaddpercent() const {
  // @@protoc_insertion_point(field_get:pb.BuffModArmAttrAddConfig.LifeAddPercent)
  return lifeaddpercent_;
}
inline void BuffModArmAttrAddConfig::set_lifeaddpercent(::google::protobuf::int32 value) {
  set_has_lifeaddpercent();
  lifeaddpercent_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModArmAttrAddConfig.LifeAddPercent)
}

// -------------------------------------------------------------------

// BuffModSkillOnLowLifeConfig

// optional bool Active = 1;
inline bool BuffModSkillOnLowLifeConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModSkillOnLowLifeConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModSkillOnLowLifeConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModSkillOnLowLifeConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModSkillOnLowLifeConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModSkillOnLowLifeConfig.Active)
  return active_;
}
inline void BuffModSkillOnLowLifeConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModSkillOnLowLifeConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModSkillOnLowLifeConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModSkillOnLowLifeConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModSkillOnLowLifeConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModSkillOnLowLifeConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModSkillOnLowLifeConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModSkillOnLowLifeConfig.DelayTime)
  return delaytime_;
}
inline void BuffModSkillOnLowLifeConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModSkillOnLowLifeConfig.DelayTime)
}

// optional int32 LifeType = 3;
inline bool BuffModSkillOnLowLifeConfig::has_lifetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModSkillOnLowLifeConfig::set_has_lifetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModSkillOnLowLifeConfig::clear_has_lifetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModSkillOnLowLifeConfig::clear_lifetype() {
  lifetype_ = 0;
  clear_has_lifetype();
}
inline ::google::protobuf::int32 BuffModSkillOnLowLifeConfig::lifetype() const {
  // @@protoc_insertion_point(field_get:pb.BuffModSkillOnLowLifeConfig.LifeType)
  return lifetype_;
}
inline void BuffModSkillOnLowLifeConfig::set_lifetype(::google::protobuf::int32 value) {
  set_has_lifetype();
  lifetype_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModSkillOnLowLifeConfig.LifeType)
}

// optional int32 LifeValue = 4;
inline bool BuffModSkillOnLowLifeConfig::has_lifevalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffModSkillOnLowLifeConfig::set_has_lifevalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffModSkillOnLowLifeConfig::clear_has_lifevalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffModSkillOnLowLifeConfig::clear_lifevalue() {
  lifevalue_ = 0;
  clear_has_lifevalue();
}
inline ::google::protobuf::int32 BuffModSkillOnLowLifeConfig::lifevalue() const {
  // @@protoc_insertion_point(field_get:pb.BuffModSkillOnLowLifeConfig.LifeValue)
  return lifevalue_;
}
inline void BuffModSkillOnLowLifeConfig::set_lifevalue(::google::protobuf::int32 value) {
  set_has_lifevalue();
  lifevalue_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModSkillOnLowLifeConfig.LifeValue)
}

// optional int32 SkillId = 5;
inline bool BuffModSkillOnLowLifeConfig::has_skillid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BuffModSkillOnLowLifeConfig::set_has_skillid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BuffModSkillOnLowLifeConfig::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BuffModSkillOnLowLifeConfig::clear_skillid() {
  skillid_ = 0;
  clear_has_skillid();
}
inline ::google::protobuf::int32 BuffModSkillOnLowLifeConfig::skillid() const {
  // @@protoc_insertion_point(field_get:pb.BuffModSkillOnLowLifeConfig.SkillId)
  return skillid_;
}
inline void BuffModSkillOnLowLifeConfig::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModSkillOnLowLifeConfig.SkillId)
}

// optional int32 DamageSource = 6;
inline bool BuffModSkillOnLowLifeConfig::has_damagesource() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BuffModSkillOnLowLifeConfig::set_has_damagesource() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BuffModSkillOnLowLifeConfig::clear_has_damagesource() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BuffModSkillOnLowLifeConfig::clear_damagesource() {
  damagesource_ = 0;
  clear_has_damagesource();
}
inline ::google::protobuf::int32 BuffModSkillOnLowLifeConfig::damagesource() const {
  // @@protoc_insertion_point(field_get:pb.BuffModSkillOnLowLifeConfig.DamageSource)
  return damagesource_;
}
inline void BuffModSkillOnLowLifeConfig::set_damagesource(::google::protobuf::int32 value) {
  set_has_damagesource();
  damagesource_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModSkillOnLowLifeConfig.DamageSource)
}

// -------------------------------------------------------------------

// BuffModTransformationConfig

// optional bool Active = 1;
inline bool BuffModTransformationConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModTransformationConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModTransformationConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModTransformationConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModTransformationConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModTransformationConfig.Active)
  return active_;
}
inline void BuffModTransformationConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModTransformationConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModTransformationConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModTransformationConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModTransformationConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModTransformationConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModTransformationConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModTransformationConfig.DelayTime)
  return delaytime_;
}
inline void BuffModTransformationConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModTransformationConfig.DelayTime)
}

// optional int32 TransRoleID = 3;
inline bool BuffModTransformationConfig::has_transroleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModTransformationConfig::set_has_transroleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModTransformationConfig::clear_has_transroleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModTransformationConfig::clear_transroleid() {
  transroleid_ = 0;
  clear_has_transroleid();
}
inline ::google::protobuf::int32 BuffModTransformationConfig::transroleid() const {
  // @@protoc_insertion_point(field_get:pb.BuffModTransformationConfig.TransRoleID)
  return transroleid_;
}
inline void BuffModTransformationConfig::set_transroleid(::google::protobuf::int32 value) {
  set_has_transroleid();
  transroleid_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModTransformationConfig.TransRoleID)
}

// optional int32 TransBuffType = 4;
inline bool BuffModTransformationConfig::has_transbufftype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffModTransformationConfig::set_has_transbufftype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffModTransformationConfig::clear_has_transbufftype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffModTransformationConfig::clear_transbufftype() {
  transbufftype_ = 0;
  clear_has_transbufftype();
}
inline ::google::protobuf::int32 BuffModTransformationConfig::transbufftype() const {
  // @@protoc_insertion_point(field_get:pb.BuffModTransformationConfig.TransBuffType)
  return transbufftype_;
}
inline void BuffModTransformationConfig::set_transbufftype(::google::protobuf::int32 value) {
  set_has_transbufftype();
  transbufftype_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModTransformationConfig.TransBuffType)
}

// optional bool EndWhenDamaged = 5;
inline bool BuffModTransformationConfig::has_endwhendamaged() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BuffModTransformationConfig::set_has_endwhendamaged() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BuffModTransformationConfig::clear_has_endwhendamaged() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BuffModTransformationConfig::clear_endwhendamaged() {
  endwhendamaged_ = false;
  clear_has_endwhendamaged();
}
inline bool BuffModTransformationConfig::endwhendamaged() const {
  // @@protoc_insertion_point(field_get:pb.BuffModTransformationConfig.EndWhenDamaged)
  return endwhendamaged_;
}
inline void BuffModTransformationConfig::set_endwhendamaged(bool value) {
  set_has_endwhendamaged();
  endwhendamaged_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModTransformationConfig.EndWhenDamaged)
}

// optional bool InheritAttribute = 6;
inline bool BuffModTransformationConfig::has_inheritattribute() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BuffModTransformationConfig::set_has_inheritattribute() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BuffModTransformationConfig::clear_has_inheritattribute() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BuffModTransformationConfig::clear_inheritattribute() {
  inheritattribute_ = false;
  clear_has_inheritattribute();
}
inline bool BuffModTransformationConfig::inheritattribute() const {
  // @@protoc_insertion_point(field_get:pb.BuffModTransformationConfig.InheritAttribute)
  return inheritattribute_;
}
inline void BuffModTransformationConfig::set_inheritattribute(bool value) {
  set_has_inheritattribute();
  inheritattribute_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModTransformationConfig.InheritAttribute)
}

// optional bool InheritLevel = 7;
inline bool BuffModTransformationConfig::has_inheritlevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BuffModTransformationConfig::set_has_inheritlevel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BuffModTransformationConfig::clear_has_inheritlevel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BuffModTransformationConfig::clear_inheritlevel() {
  inheritlevel_ = false;
  clear_has_inheritlevel();
}
inline bool BuffModTransformationConfig::inheritlevel() const {
  // @@protoc_insertion_point(field_get:pb.BuffModTransformationConfig.InheritLevel)
  return inheritlevel_;
}
inline void BuffModTransformationConfig::set_inheritlevel(bool value) {
  set_has_inheritlevel();
  inheritlevel_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModTransformationConfig.InheritLevel)
}

// optional int32 Level = 8;
inline bool BuffModTransformationConfig::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BuffModTransformationConfig::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BuffModTransformationConfig::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BuffModTransformationConfig::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 BuffModTransformationConfig::level() const {
  // @@protoc_insertion_point(field_get:pb.BuffModTransformationConfig.Level)
  return level_;
}
inline void BuffModTransformationConfig::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModTransformationConfig.Level)
}

// optional bool InheritSkill = 9;
inline bool BuffModTransformationConfig::has_inheritskill() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BuffModTransformationConfig::set_has_inheritskill() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BuffModTransformationConfig::clear_has_inheritskill() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BuffModTransformationConfig::clear_inheritskill() {
  inheritskill_ = false;
  clear_has_inheritskill();
}
inline bool BuffModTransformationConfig::inheritskill() const {
  // @@protoc_insertion_point(field_get:pb.BuffModTransformationConfig.InheritSkill)
  return inheritskill_;
}
inline void BuffModTransformationConfig::set_inheritskill(bool value) {
  set_has_inheritskill();
  inheritskill_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModTransformationConfig.InheritSkill)
}

// optional bool KeepChainOrder = 10;
inline bool BuffModTransformationConfig::has_keepchainorder() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BuffModTransformationConfig::set_has_keepchainorder() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BuffModTransformationConfig::clear_has_keepchainorder() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BuffModTransformationConfig::clear_keepchainorder() {
  keepchainorder_ = false;
  clear_has_keepchainorder();
}
inline bool BuffModTransformationConfig::keepchainorder() const {
  // @@protoc_insertion_point(field_get:pb.BuffModTransformationConfig.KeepChainOrder)
  return keepchainorder_;
}
inline void BuffModTransformationConfig::set_keepchainorder(bool value) {
  set_has_keepchainorder();
  keepchainorder_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModTransformationConfig.KeepChainOrder)
}

// -------------------------------------------------------------------

// BuffModEffectInRangeConditionConfig

// optional bool Active = 1;
inline bool BuffModEffectInRangeConditionConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModEffectInRangeConditionConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModEffectInRangeConditionConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModEffectInRangeConditionConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModEffectInRangeConditionConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModEffectInRangeConditionConfig.Active)
  return active_;
}
inline void BuffModEffectInRangeConditionConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModEffectInRangeConditionConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModEffectInRangeConditionConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModEffectInRangeConditionConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModEffectInRangeConditionConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModEffectInRangeConditionConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModEffectInRangeConditionConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModEffectInRangeConditionConfig.DelayTime)
  return delaytime_;
}
inline void BuffModEffectInRangeConditionConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModEffectInRangeConditionConfig.DelayTime)
}

// optional int32 Range = 3;
inline bool BuffModEffectInRangeConditionConfig::has_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModEffectInRangeConditionConfig::set_has_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModEffectInRangeConditionConfig::clear_has_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModEffectInRangeConditionConfig::clear_range() {
  range_ = 0;
  clear_has_range();
}
inline ::google::protobuf::int32 BuffModEffectInRangeConditionConfig::range() const {
  // @@protoc_insertion_point(field_get:pb.BuffModEffectInRangeConditionConfig.Range)
  return range_;
}
inline void BuffModEffectInRangeConditionConfig::set_range(::google::protobuf::int32 value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModEffectInRangeConditionConfig.Range)
}

// optional int32 EffectCondition = 4;
inline bool BuffModEffectInRangeConditionConfig::has_effectcondition() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffModEffectInRangeConditionConfig::set_has_effectcondition() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffModEffectInRangeConditionConfig::clear_has_effectcondition() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffModEffectInRangeConditionConfig::clear_effectcondition() {
  effectcondition_ = 0;
  clear_has_effectcondition();
}
inline ::google::protobuf::int32 BuffModEffectInRangeConditionConfig::effectcondition() const {
  // @@protoc_insertion_point(field_get:pb.BuffModEffectInRangeConditionConfig.EffectCondition)
  return effectcondition_;
}
inline void BuffModEffectInRangeConditionConfig::set_effectcondition(::google::protobuf::int32 value) {
  set_has_effectcondition();
  effectcondition_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModEffectInRangeConditionConfig.EffectCondition)
}

// optional .pb.BuffDataAttribute AttributeData = 5;
inline bool BuffModEffectInRangeConditionConfig::has_attributedata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BuffModEffectInRangeConditionConfig::set_has_attributedata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BuffModEffectInRangeConditionConfig::clear_has_attributedata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BuffModEffectInRangeConditionConfig::clear_attributedata() {
  if (attributedata_ != NULL) attributedata_->::pb::BuffDataAttribute::Clear();
  clear_has_attributedata();
}
inline const ::pb::BuffDataAttribute& BuffModEffectInRangeConditionConfig::attributedata() const {
  // @@protoc_insertion_point(field_get:pb.BuffModEffectInRangeConditionConfig.AttributeData)
  return attributedata_ != NULL ? *attributedata_ : *default_instance_->attributedata_;
}
inline ::pb::BuffDataAttribute* BuffModEffectInRangeConditionConfig::mutable_attributedata() {
  set_has_attributedata();
  if (attributedata_ == NULL) attributedata_ = new ::pb::BuffDataAttribute;
  // @@protoc_insertion_point(field_mutable:pb.BuffModEffectInRangeConditionConfig.AttributeData)
  return attributedata_;
}
inline ::pb::BuffDataAttribute* BuffModEffectInRangeConditionConfig::release_attributedata() {
  clear_has_attributedata();
  ::pb::BuffDataAttribute* temp = attributedata_;
  attributedata_ = NULL;
  return temp;
}
inline void BuffModEffectInRangeConditionConfig::set_allocated_attributedata(::pb::BuffDataAttribute* attributedata) {
  delete attributedata_;
  attributedata_ = attributedata;
  if (attributedata) {
    set_has_attributedata();
  } else {
    clear_has_attributedata();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BuffModEffectInRangeConditionConfig.AttributeData)
}

// -------------------------------------------------------------------

// BuffModEffectInRangeConfig

// optional bool Active = 1;
inline bool BuffModEffectInRangeConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModEffectInRangeConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModEffectInRangeConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModEffectInRangeConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModEffectInRangeConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModEffectInRangeConfig.Active)
  return active_;
}
inline void BuffModEffectInRangeConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModEffectInRangeConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModEffectInRangeConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModEffectInRangeConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModEffectInRangeConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModEffectInRangeConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModEffectInRangeConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModEffectInRangeConfig.DelayTime)
  return delaytime_;
}
inline void BuffModEffectInRangeConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModEffectInRangeConfig.DelayTime)
}

// optional int32 Range = 3;
inline bool BuffModEffectInRangeConfig::has_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModEffectInRangeConfig::set_has_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModEffectInRangeConfig::clear_has_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModEffectInRangeConfig::clear_range() {
  range_ = 0;
  clear_has_range();
}
inline ::google::protobuf::int32 BuffModEffectInRangeConfig::range() const {
  // @@protoc_insertion_point(field_get:pb.BuffModEffectInRangeConfig.Range)
  return range_;
}
inline void BuffModEffectInRangeConfig::set_range(::google::protobuf::int32 value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModEffectInRangeConfig.Range)
}

// optional int32 EffectTarget = 4;
inline bool BuffModEffectInRangeConfig::has_effecttarget() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffModEffectInRangeConfig::set_has_effecttarget() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffModEffectInRangeConfig::clear_has_effecttarget() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffModEffectInRangeConfig::clear_effecttarget() {
  effecttarget_ = 0;
  clear_has_effecttarget();
}
inline ::google::protobuf::int32 BuffModEffectInRangeConfig::effecttarget() const {
  // @@protoc_insertion_point(field_get:pb.BuffModEffectInRangeConfig.EffectTarget)
  return effecttarget_;
}
inline void BuffModEffectInRangeConfig::set_effecttarget(::google::protobuf::int32 value) {
  set_has_effecttarget();
  effecttarget_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModEffectInRangeConfig.EffectTarget)
}

// optional int32 TimeBeforeEffect = 5;
inline bool BuffModEffectInRangeConfig::has_timebeforeeffect() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BuffModEffectInRangeConfig::set_has_timebeforeeffect() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BuffModEffectInRangeConfig::clear_has_timebeforeeffect() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BuffModEffectInRangeConfig::clear_timebeforeeffect() {
  timebeforeeffect_ = 0;
  clear_has_timebeforeeffect();
}
inline ::google::protobuf::int32 BuffModEffectInRangeConfig::timebeforeeffect() const {
  // @@protoc_insertion_point(field_get:pb.BuffModEffectInRangeConfig.TimeBeforeEffect)
  return timebeforeeffect_;
}
inline void BuffModEffectInRangeConfig::set_timebeforeeffect(::google::protobuf::int32 value) {
  set_has_timebeforeeffect();
  timebeforeeffect_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModEffectInRangeConfig.TimeBeforeEffect)
}

// optional int32 BuffId = 6;
inline bool BuffModEffectInRangeConfig::has_buffid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BuffModEffectInRangeConfig::set_has_buffid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BuffModEffectInRangeConfig::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BuffModEffectInRangeConfig::clear_buffid() {
  buffid_ = 0;
  clear_has_buffid();
}
inline ::google::protobuf::int32 BuffModEffectInRangeConfig::buffid() const {
  // @@protoc_insertion_point(field_get:pb.BuffModEffectInRangeConfig.BuffId)
  return buffid_;
}
inline void BuffModEffectInRangeConfig::set_buffid(::google::protobuf::int32 value) {
  set_has_buffid();
  buffid_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModEffectInRangeConfig.BuffId)
}

// optional bool RemoveWhenOutOfRange = 7;
inline bool BuffModEffectInRangeConfig::has_removewhenoutofrange() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BuffModEffectInRangeConfig::set_has_removewhenoutofrange() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BuffModEffectInRangeConfig::clear_has_removewhenoutofrange() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BuffModEffectInRangeConfig::clear_removewhenoutofrange() {
  removewhenoutofrange_ = false;
  clear_has_removewhenoutofrange();
}
inline bool BuffModEffectInRangeConfig::removewhenoutofrange() const {
  // @@protoc_insertion_point(field_get:pb.BuffModEffectInRangeConfig.RemoveWhenOutOfRange)
  return removewhenoutofrange_;
}
inline void BuffModEffectInRangeConfig::set_removewhenoutofrange(bool value) {
  set_has_removewhenoutofrange();
  removewhenoutofrange_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModEffectInRangeConfig.RemoveWhenOutOfRange)
}

// -------------------------------------------------------------------

// BuffModPropertyFormulaConfig

// optional bool Active = 1;
inline bool BuffModPropertyFormulaConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModPropertyFormulaConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModPropertyFormulaConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModPropertyFormulaConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModPropertyFormulaConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModPropertyFormulaConfig.Active)
  return active_;
}
inline void BuffModPropertyFormulaConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModPropertyFormulaConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModPropertyFormulaConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModPropertyFormulaConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModPropertyFormulaConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModPropertyFormulaConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModPropertyFormulaConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModPropertyFormulaConfig.DelayTime)
  return delaytime_;
}
inline void BuffModPropertyFormulaConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModPropertyFormulaConfig.DelayTime)
}

// optional string Formula = 3;
inline bool BuffModPropertyFormulaConfig::has_formula() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModPropertyFormulaConfig::set_has_formula() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModPropertyFormulaConfig::clear_has_formula() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModPropertyFormulaConfig::clear_formula() {
  if (formula_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    formula_->clear();
  }
  clear_has_formula();
}
inline const ::std::string& BuffModPropertyFormulaConfig::formula() const {
  // @@protoc_insertion_point(field_get:pb.BuffModPropertyFormulaConfig.Formula)
  return *formula_;
}
inline void BuffModPropertyFormulaConfig::set_formula(const ::std::string& value) {
  set_has_formula();
  if (formula_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    formula_ = new ::std::string;
  }
  formula_->assign(value);
  // @@protoc_insertion_point(field_set:pb.BuffModPropertyFormulaConfig.Formula)
}
inline void BuffModPropertyFormulaConfig::set_formula(const char* value) {
  set_has_formula();
  if (formula_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    formula_ = new ::std::string;
  }
  formula_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.BuffModPropertyFormulaConfig.Formula)
}
inline void BuffModPropertyFormulaConfig::set_formula(const char* value, size_t size) {
  set_has_formula();
  if (formula_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    formula_ = new ::std::string;
  }
  formula_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.BuffModPropertyFormulaConfig.Formula)
}
inline ::std::string* BuffModPropertyFormulaConfig::mutable_formula() {
  set_has_formula();
  if (formula_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    formula_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.BuffModPropertyFormulaConfig.Formula)
  return formula_;
}
inline ::std::string* BuffModPropertyFormulaConfig::release_formula() {
  clear_has_formula();
  if (formula_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = formula_;
    formula_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BuffModPropertyFormulaConfig::set_allocated_formula(::std::string* formula) {
  if (formula_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete formula_;
  }
  if (formula) {
    set_has_formula();
    formula_ = formula;
  } else {
    clear_has_formula();
    formula_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BuffModPropertyFormulaConfig.Formula)
}

// optional int32 ApplyTarget = 4;
inline bool BuffModPropertyFormulaConfig::has_applytarget() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffModPropertyFormulaConfig::set_has_applytarget() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffModPropertyFormulaConfig::clear_has_applytarget() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffModPropertyFormulaConfig::clear_applytarget() {
  applytarget_ = 0;
  clear_has_applytarget();
}
inline ::google::protobuf::int32 BuffModPropertyFormulaConfig::applytarget() const {
  // @@protoc_insertion_point(field_get:pb.BuffModPropertyFormulaConfig.ApplyTarget)
  return applytarget_;
}
inline void BuffModPropertyFormulaConfig::set_applytarget(::google::protobuf::int32 value) {
  set_has_applytarget();
  applytarget_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModPropertyFormulaConfig.ApplyTarget)
}

// -------------------------------------------------------------------

// BuffModResetBuffTimeConfig

// optional bool Active = 1;
inline bool BuffModResetBuffTimeConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModResetBuffTimeConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModResetBuffTimeConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModResetBuffTimeConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModResetBuffTimeConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModResetBuffTimeConfig.Active)
  return active_;
}
inline void BuffModResetBuffTimeConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModResetBuffTimeConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModResetBuffTimeConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModResetBuffTimeConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModResetBuffTimeConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModResetBuffTimeConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModResetBuffTimeConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModResetBuffTimeConfig.DelayTime)
  return delaytime_;
}
inline void BuffModResetBuffTimeConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModResetBuffTimeConfig.DelayTime)
}

// repeated int32 BuffIdArr = 3;
inline int BuffModResetBuffTimeConfig::buffidarr_size() const {
  return buffidarr_.size();
}
inline void BuffModResetBuffTimeConfig::clear_buffidarr() {
  buffidarr_.Clear();
}
inline ::google::protobuf::int32 BuffModResetBuffTimeConfig::buffidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.BuffModResetBuffTimeConfig.BuffIdArr)
  return buffidarr_.Get(index);
}
inline void BuffModResetBuffTimeConfig::set_buffidarr(int index, ::google::protobuf::int32 value) {
  buffidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.BuffModResetBuffTimeConfig.BuffIdArr)
}
inline void BuffModResetBuffTimeConfig::add_buffidarr(::google::protobuf::int32 value) {
  buffidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.BuffModResetBuffTimeConfig.BuffIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BuffModResetBuffTimeConfig::buffidarr() const {
  // @@protoc_insertion_point(field_list:pb.BuffModResetBuffTimeConfig.BuffIdArr)
  return buffidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BuffModResetBuffTimeConfig::mutable_buffidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.BuffModResetBuffTimeConfig.BuffIdArr)
  return &buffidarr_;
}

// -------------------------------------------------------------------

// BuffModAddSkillConfig

// optional bool Active = 1;
inline bool BuffModAddSkillConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModAddSkillConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModAddSkillConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModAddSkillConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModAddSkillConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModAddSkillConfig.Active)
  return active_;
}
inline void BuffModAddSkillConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModAddSkillConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModAddSkillConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModAddSkillConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModAddSkillConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModAddSkillConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModAddSkillConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModAddSkillConfig.DelayTime)
  return delaytime_;
}
inline void BuffModAddSkillConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModAddSkillConfig.DelayTime)
}

// repeated int32 SkillIdArr = 3;
inline int BuffModAddSkillConfig::skillidarr_size() const {
  return skillidarr_.size();
}
inline void BuffModAddSkillConfig::clear_skillidarr() {
  skillidarr_.Clear();
}
inline ::google::protobuf::int32 BuffModAddSkillConfig::skillidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.BuffModAddSkillConfig.SkillIdArr)
  return skillidarr_.Get(index);
}
inline void BuffModAddSkillConfig::set_skillidarr(int index, ::google::protobuf::int32 value) {
  skillidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.BuffModAddSkillConfig.SkillIdArr)
}
inline void BuffModAddSkillConfig::add_skillidarr(::google::protobuf::int32 value) {
  skillidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.BuffModAddSkillConfig.SkillIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BuffModAddSkillConfig::skillidarr() const {
  // @@protoc_insertion_point(field_list:pb.BuffModAddSkillConfig.SkillIdArr)
  return skillidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BuffModAddSkillConfig::mutable_skillidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.BuffModAddSkillConfig.SkillIdArr)
  return &skillidarr_;
}

// optional bool UseParentSkillLevel = 4;
inline bool BuffModAddSkillConfig::has_useparentskilllevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffModAddSkillConfig::set_has_useparentskilllevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffModAddSkillConfig::clear_has_useparentskilllevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffModAddSkillConfig::clear_useparentskilllevel() {
  useparentskilllevel_ = false;
  clear_has_useparentskilllevel();
}
inline bool BuffModAddSkillConfig::useparentskilllevel() const {
  // @@protoc_insertion_point(field_get:pb.BuffModAddSkillConfig.UseParentSkillLevel)
  return useparentskilllevel_;
}
inline void BuffModAddSkillConfig::set_useparentskilllevel(bool value) {
  set_has_useparentskilllevel();
  useparentskilllevel_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModAddSkillConfig.UseParentSkillLevel)
}

// optional int32 SkillLevel = 5;
inline bool BuffModAddSkillConfig::has_skilllevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BuffModAddSkillConfig::set_has_skilllevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BuffModAddSkillConfig::clear_has_skilllevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BuffModAddSkillConfig::clear_skilllevel() {
  skilllevel_ = 0;
  clear_has_skilllevel();
}
inline ::google::protobuf::int32 BuffModAddSkillConfig::skilllevel() const {
  // @@protoc_insertion_point(field_get:pb.BuffModAddSkillConfig.SkillLevel)
  return skilllevel_;
}
inline void BuffModAddSkillConfig::set_skilllevel(::google::protobuf::int32 value) {
  set_has_skilllevel();
  skilllevel_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModAddSkillConfig.SkillLevel)
}

// -------------------------------------------------------------------

// BuffModTauntConfig

// optional bool Active = 1;
inline bool BuffModTauntConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModTauntConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModTauntConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModTauntConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModTauntConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModTauntConfig.Active)
  return active_;
}
inline void BuffModTauntConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModTauntConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModTauntConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModTauntConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModTauntConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModTauntConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModTauntConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModTauntConfig.DelayTime)
  return delaytime_;
}
inline void BuffModTauntConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModTauntConfig.DelayTime)
}

// optional int32 BuffID = 3;
inline bool BuffModTauntConfig::has_buffid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModTauntConfig::set_has_buffid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModTauntConfig::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModTauntConfig::clear_buffid() {
  buffid_ = 0;
  clear_has_buffid();
}
inline ::google::protobuf::int32 BuffModTauntConfig::buffid() const {
  // @@protoc_insertion_point(field_get:pb.BuffModTauntConfig.BuffID)
  return buffid_;
}
inline void BuffModTauntConfig::set_buffid(::google::protobuf::int32 value) {
  set_has_buffid();
  buffid_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModTauntConfig.BuffID)
}

// -------------------------------------------------------------------

// BuffModToughnessConfig

// optional bool Active = 1;
inline bool BuffModToughnessConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModToughnessConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModToughnessConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModToughnessConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModToughnessConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModToughnessConfig.Active)
  return active_;
}
inline void BuffModToughnessConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModToughnessConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModToughnessConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModToughnessConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModToughnessConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModToughnessConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModToughnessConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModToughnessConfig.DelayTime)
  return delaytime_;
}
inline void BuffModToughnessConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModToughnessConfig.DelayTime)
}

// optional int32 Type = 3;
inline bool BuffModToughnessConfig::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModToughnessConfig::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModToughnessConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModToughnessConfig::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BuffModToughnessConfig::type() const {
  // @@protoc_insertion_point(field_get:pb.BuffModToughnessConfig.Type)
  return type_;
}
inline void BuffModToughnessConfig::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModToughnessConfig.Type)
}

// optional int32 Param = 4;
inline bool BuffModToughnessConfig::has_param() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffModToughnessConfig::set_has_param() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffModToughnessConfig::clear_has_param() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffModToughnessConfig::clear_param() {
  param_ = 0;
  clear_has_param();
}
inline ::google::protobuf::int32 BuffModToughnessConfig::param() const {
  // @@protoc_insertion_point(field_get:pb.BuffModToughnessConfig.Param)
  return param_;
}
inline void BuffModToughnessConfig::set_param(::google::protobuf::int32 value) {
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModToughnessConfig.Param)
}

// -------------------------------------------------------------------

// BuffModNothingConfig

// optional bool Active = 1;
inline bool BuffModNothingConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModNothingConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModNothingConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModNothingConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModNothingConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModNothingConfig.Active)
  return active_;
}
inline void BuffModNothingConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModNothingConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModNothingConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModNothingConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModNothingConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModNothingConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModNothingConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModNothingConfig.DelayTime)
  return delaytime_;
}
inline void BuffModNothingConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModNothingConfig.DelayTime)
}

// -------------------------------------------------------------------

// BuffModTransformScaleConfig

// optional bool Active = 1;
inline bool BuffModTransformScaleConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModTransformScaleConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModTransformScaleConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModTransformScaleConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModTransformScaleConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModTransformScaleConfig.Active)
  return active_;
}
inline void BuffModTransformScaleConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModTransformScaleConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModTransformScaleConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModTransformScaleConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModTransformScaleConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModTransformScaleConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModTransformScaleConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModTransformScaleConfig.DelayTime)
  return delaytime_;
}
inline void BuffModTransformScaleConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModTransformScaleConfig.DelayTime)
}

// optional int32 PercentParam = 3;
inline bool BuffModTransformScaleConfig::has_percentparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModTransformScaleConfig::set_has_percentparam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModTransformScaleConfig::clear_has_percentparam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModTransformScaleConfig::clear_percentparam() {
  percentparam_ = 0;
  clear_has_percentparam();
}
inline ::google::protobuf::int32 BuffModTransformScaleConfig::percentparam() const {
  // @@protoc_insertion_point(field_get:pb.BuffModTransformScaleConfig.PercentParam)
  return percentparam_;
}
inline void BuffModTransformScaleConfig::set_percentparam(::google::protobuf::int32 value) {
  set_has_percentparam();
  percentparam_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModTransformScaleConfig.PercentParam)
}

// optional int32 ScaleTime = 4;
inline bool BuffModTransformScaleConfig::has_scaletime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffModTransformScaleConfig::set_has_scaletime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffModTransformScaleConfig::clear_has_scaletime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffModTransformScaleConfig::clear_scaletime() {
  scaletime_ = 0;
  clear_has_scaletime();
}
inline ::google::protobuf::int32 BuffModTransformScaleConfig::scaletime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModTransformScaleConfig.ScaleTime)
  return scaletime_;
}
inline void BuffModTransformScaleConfig::set_scaletime(::google::protobuf::int32 value) {
  set_has_scaletime();
  scaletime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModTransformScaleConfig.ScaleTime)
}

// optional int32 BaseDelta = 5;
inline bool BuffModTransformScaleConfig::has_basedelta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BuffModTransformScaleConfig::set_has_basedelta() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BuffModTransformScaleConfig::clear_has_basedelta() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BuffModTransformScaleConfig::clear_basedelta() {
  basedelta_ = 0;
  clear_has_basedelta();
}
inline ::google::protobuf::int32 BuffModTransformScaleConfig::basedelta() const {
  // @@protoc_insertion_point(field_get:pb.BuffModTransformScaleConfig.BaseDelta)
  return basedelta_;
}
inline void BuffModTransformScaleConfig::set_basedelta(::google::protobuf::int32 value) {
  set_has_basedelta();
  basedelta_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModTransformScaleConfig.BaseDelta)
}

// -------------------------------------------------------------------

// BuffModDieConfig

// optional bool Active = 1;
inline bool BuffModDieConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModDieConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModDieConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModDieConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModDieConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModDieConfig.Active)
  return active_;
}
inline void BuffModDieConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModDieConfig.Active)
}

// -------------------------------------------------------------------

// BuffModDisableConfig

// optional bool Active = 1;
inline bool BuffModDisableConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModDisableConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModDisableConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModDisableConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModDisableConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModDisableConfig.Active)
  return active_;
}
inline void BuffModDisableConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModDisableConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModDisableConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModDisableConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModDisableConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModDisableConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModDisableConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModDisableConfig.DelayTime)
  return delaytime_;
}
inline void BuffModDisableConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModDisableConfig.DelayTime)
}

// -------------------------------------------------------------------

// BuffModScaleTextConfig

// optional bool Active = 1;
inline bool BuffModScaleTextConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModScaleTextConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModScaleTextConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModScaleTextConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModScaleTextConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModScaleTextConfig.Active)
  return active_;
}
inline void BuffModScaleTextConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModScaleTextConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModScaleTextConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModScaleTextConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModScaleTextConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModScaleTextConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModScaleTextConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModScaleTextConfig.DelayTime)
  return delaytime_;
}
inline void BuffModScaleTextConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModScaleTextConfig.DelayTime)
}

// optional bool ScaleUp = 3;
inline bool BuffModScaleTextConfig::has_scaleup() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModScaleTextConfig::set_has_scaleup() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModScaleTextConfig::clear_has_scaleup() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModScaleTextConfig::clear_scaleup() {
  scaleup_ = false;
  clear_has_scaleup();
}
inline bool BuffModScaleTextConfig::scaleup() const {
  // @@protoc_insertion_point(field_get:pb.BuffModScaleTextConfig.ScaleUp)
  return scaleup_;
}
inline void BuffModScaleTextConfig::set_scaleup(bool value) {
  set_has_scaleup();
  scaleup_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModScaleTextConfig.ScaleUp)
}

// -------------------------------------------------------------------

// BuffModRepeatSkillConfig

// optional bool Active = 1;
inline bool BuffModRepeatSkillConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModRepeatSkillConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModRepeatSkillConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModRepeatSkillConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModRepeatSkillConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModRepeatSkillConfig.Active)
  return active_;
}
inline void BuffModRepeatSkillConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModRepeatSkillConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModRepeatSkillConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModRepeatSkillConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModRepeatSkillConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModRepeatSkillConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModRepeatSkillConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModRepeatSkillConfig.DelayTime)
  return delaytime_;
}
inline void BuffModRepeatSkillConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModRepeatSkillConfig.DelayTime)
}

// optional int32 SkillID = 3;
inline bool BuffModRepeatSkillConfig::has_skillid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModRepeatSkillConfig::set_has_skillid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModRepeatSkillConfig::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModRepeatSkillConfig::clear_skillid() {
  skillid_ = 0;
  clear_has_skillid();
}
inline ::google::protobuf::int32 BuffModRepeatSkillConfig::skillid() const {
  // @@protoc_insertion_point(field_get:pb.BuffModRepeatSkillConfig.SkillID)
  return skillid_;
}
inline void BuffModRepeatSkillConfig::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModRepeatSkillConfig.SkillID)
}

// optional int32 Interval = 4;
inline bool BuffModRepeatSkillConfig::has_interval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffModRepeatSkillConfig::set_has_interval() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffModRepeatSkillConfig::clear_has_interval() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffModRepeatSkillConfig::clear_interval() {
  interval_ = 0;
  clear_has_interval();
}
inline ::google::protobuf::int32 BuffModRepeatSkillConfig::interval() const {
  // @@protoc_insertion_point(field_get:pb.BuffModRepeatSkillConfig.Interval)
  return interval_;
}
inline void BuffModRepeatSkillConfig::set_interval(::google::protobuf::int32 value) {
  set_has_interval();
  interval_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModRepeatSkillConfig.Interval)
}

// optional int32 ReleaseCount = 5;
inline bool BuffModRepeatSkillConfig::has_releasecount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BuffModRepeatSkillConfig::set_has_releasecount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BuffModRepeatSkillConfig::clear_has_releasecount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BuffModRepeatSkillConfig::clear_releasecount() {
  releasecount_ = 0;
  clear_has_releasecount();
}
inline ::google::protobuf::int32 BuffModRepeatSkillConfig::releasecount() const {
  // @@protoc_insertion_point(field_get:pb.BuffModRepeatSkillConfig.ReleaseCount)
  return releasecount_;
}
inline void BuffModRepeatSkillConfig::set_releasecount(::google::protobuf::int32 value) {
  set_has_releasecount();
  releasecount_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModRepeatSkillConfig.ReleaseCount)
}

// optional int32 Source = 6;
inline bool BuffModRepeatSkillConfig::has_source() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BuffModRepeatSkillConfig::set_has_source() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BuffModRepeatSkillConfig::clear_has_source() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BuffModRepeatSkillConfig::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::google::protobuf::int32 BuffModRepeatSkillConfig::source() const {
  // @@protoc_insertion_point(field_get:pb.BuffModRepeatSkillConfig.Source)
  return source_;
}
inline void BuffModRepeatSkillConfig::set_source(::google::protobuf::int32 value) {
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModRepeatSkillConfig.Source)
}

// optional int32 CastCondition = 7;
inline bool BuffModRepeatSkillConfig::has_castcondition() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BuffModRepeatSkillConfig::set_has_castcondition() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BuffModRepeatSkillConfig::clear_has_castcondition() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BuffModRepeatSkillConfig::clear_castcondition() {
  castcondition_ = 0;
  clear_has_castcondition();
}
inline ::google::protobuf::int32 BuffModRepeatSkillConfig::castcondition() const {
  // @@protoc_insertion_point(field_get:pb.BuffModRepeatSkillConfig.CastCondition)
  return castcondition_;
}
inline void BuffModRepeatSkillConfig::set_castcondition(::google::protobuf::int32 value) {
  set_has_castcondition();
  castcondition_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModRepeatSkillConfig.CastCondition)
}

// optional int32 ValueType = 8;
inline bool BuffModRepeatSkillConfig::has_valuetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BuffModRepeatSkillConfig::set_has_valuetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BuffModRepeatSkillConfig::clear_has_valuetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BuffModRepeatSkillConfig::clear_valuetype() {
  valuetype_ = 0;
  clear_has_valuetype();
}
inline ::google::protobuf::int32 BuffModRepeatSkillConfig::valuetype() const {
  // @@protoc_insertion_point(field_get:pb.BuffModRepeatSkillConfig.ValueType)
  return valuetype_;
}
inline void BuffModRepeatSkillConfig::set_valuetype(::google::protobuf::int32 value) {
  set_has_valuetype();
  valuetype_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModRepeatSkillConfig.ValueType)
}

// optional int32 Param1 = 9;
inline bool BuffModRepeatSkillConfig::has_param1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BuffModRepeatSkillConfig::set_has_param1() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BuffModRepeatSkillConfig::clear_has_param1() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BuffModRepeatSkillConfig::clear_param1() {
  param1_ = 0;
  clear_has_param1();
}
inline ::google::protobuf::int32 BuffModRepeatSkillConfig::param1() const {
  // @@protoc_insertion_point(field_get:pb.BuffModRepeatSkillConfig.Param1)
  return param1_;
}
inline void BuffModRepeatSkillConfig::set_param1(::google::protobuf::int32 value) {
  set_has_param1();
  param1_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModRepeatSkillConfig.Param1)
}

// optional bool IgnoreNoSkill = 10;
inline bool BuffModRepeatSkillConfig::has_ignorenoskill() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BuffModRepeatSkillConfig::set_has_ignorenoskill() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BuffModRepeatSkillConfig::clear_has_ignorenoskill() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BuffModRepeatSkillConfig::clear_ignorenoskill() {
  ignorenoskill_ = false;
  clear_has_ignorenoskill();
}
inline bool BuffModRepeatSkillConfig::ignorenoskill() const {
  // @@protoc_insertion_point(field_get:pb.BuffModRepeatSkillConfig.IgnoreNoSkill)
  return ignorenoskill_;
}
inline void BuffModRepeatSkillConfig::set_ignorenoskill(bool value) {
  set_has_ignorenoskill();
  ignorenoskill_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModRepeatSkillConfig.IgnoreNoSkill)
}

// -------------------------------------------------------------------

// BuffModSkillOnEndConfig

// optional bool Active = 1;
inline bool BuffModSkillOnEndConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModSkillOnEndConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModSkillOnEndConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModSkillOnEndConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModSkillOnEndConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModSkillOnEndConfig.Active)
  return active_;
}
inline void BuffModSkillOnEndConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModSkillOnEndConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModSkillOnEndConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModSkillOnEndConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModSkillOnEndConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModSkillOnEndConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModSkillOnEndConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModSkillOnEndConfig.DelayTime)
  return delaytime_;
}
inline void BuffModSkillOnEndConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModSkillOnEndConfig.DelayTime)
}

// optional int32 SkillID = 3;
inline bool BuffModSkillOnEndConfig::has_skillid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModSkillOnEndConfig::set_has_skillid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModSkillOnEndConfig::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModSkillOnEndConfig::clear_skillid() {
  skillid_ = 0;
  clear_has_skillid();
}
inline ::google::protobuf::int32 BuffModSkillOnEndConfig::skillid() const {
  // @@protoc_insertion_point(field_get:pb.BuffModSkillOnEndConfig.SkillID)
  return skillid_;
}
inline void BuffModSkillOnEndConfig::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModSkillOnEndConfig.SkillID)
}

// optional int32 Source = 4;
inline bool BuffModSkillOnEndConfig::has_source() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffModSkillOnEndConfig::set_has_source() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffModSkillOnEndConfig::clear_has_source() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffModSkillOnEndConfig::clear_source() {
  source_ = 0;
  clear_has_source();
}
inline ::google::protobuf::int32 BuffModSkillOnEndConfig::source() const {
  // @@protoc_insertion_point(field_get:pb.BuffModSkillOnEndConfig.Source)
  return source_;
}
inline void BuffModSkillOnEndConfig::set_source(::google::protobuf::int32 value) {
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModSkillOnEndConfig.Source)
}

// optional int32 DisableType = 5;
inline bool BuffModSkillOnEndConfig::has_disabletype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BuffModSkillOnEndConfig::set_has_disabletype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BuffModSkillOnEndConfig::clear_has_disabletype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BuffModSkillOnEndConfig::clear_disabletype() {
  disabletype_ = 0;
  clear_has_disabletype();
}
inline ::google::protobuf::int32 BuffModSkillOnEndConfig::disabletype() const {
  // @@protoc_insertion_point(field_get:pb.BuffModSkillOnEndConfig.DisableType)
  return disabletype_;
}
inline void BuffModSkillOnEndConfig::set_disabletype(::google::protobuf::int32 value) {
  set_has_disabletype();
  disabletype_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModSkillOnEndConfig.DisableType)
}

// optional bool IgnoreNoSkill = 6;
inline bool BuffModSkillOnEndConfig::has_ignorenoskill() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BuffModSkillOnEndConfig::set_has_ignorenoskill() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BuffModSkillOnEndConfig::clear_has_ignorenoskill() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BuffModSkillOnEndConfig::clear_ignorenoskill() {
  ignorenoskill_ = false;
  clear_has_ignorenoskill();
}
inline bool BuffModSkillOnEndConfig::ignorenoskill() const {
  // @@protoc_insertion_point(field_get:pb.BuffModSkillOnEndConfig.IgnoreNoSkill)
  return ignorenoskill_;
}
inline void BuffModSkillOnEndConfig::set_ignorenoskill(bool value) {
  set_has_ignorenoskill();
  ignorenoskill_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModSkillOnEndConfig.IgnoreNoSkill)
}

// optional int32 SkillIDBack = 7;
inline bool BuffModSkillOnEndConfig::has_skillidback() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BuffModSkillOnEndConfig::set_has_skillidback() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BuffModSkillOnEndConfig::clear_has_skillidback() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BuffModSkillOnEndConfig::clear_skillidback() {
  skillidback_ = 0;
  clear_has_skillidback();
}
inline ::google::protobuf::int32 BuffModSkillOnEndConfig::skillidback() const {
  // @@protoc_insertion_point(field_get:pb.BuffModSkillOnEndConfig.SkillIDBack)
  return skillidback_;
}
inline void BuffModSkillOnEndConfig::set_skillidback(::google::protobuf::int32 value) {
  set_has_skillidback();
  skillidback_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModSkillOnEndConfig.SkillIDBack)
}

// -------------------------------------------------------------------

// BuffModSpecifySkillTidConfig

// optional bool Active = 1;
inline bool BuffModSpecifySkillTidConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModSpecifySkillTidConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModSpecifySkillTidConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModSpecifySkillTidConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModSpecifySkillTidConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModSpecifySkillTidConfig.Active)
  return active_;
}
inline void BuffModSpecifySkillTidConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModSpecifySkillTidConfig.Active)
}

// repeated int32 SkillTidArr = 2;
inline int BuffModSpecifySkillTidConfig::skilltidarr_size() const {
  return skilltidarr_.size();
}
inline void BuffModSpecifySkillTidConfig::clear_skilltidarr() {
  skilltidarr_.Clear();
}
inline ::google::protobuf::int32 BuffModSpecifySkillTidConfig::skilltidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.BuffModSpecifySkillTidConfig.SkillTidArr)
  return skilltidarr_.Get(index);
}
inline void BuffModSpecifySkillTidConfig::set_skilltidarr(int index, ::google::protobuf::int32 value) {
  skilltidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.BuffModSpecifySkillTidConfig.SkillTidArr)
}
inline void BuffModSpecifySkillTidConfig::add_skilltidarr(::google::protobuf::int32 value) {
  skilltidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.BuffModSpecifySkillTidConfig.SkillTidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BuffModSpecifySkillTidConfig::skilltidarr() const {
  // @@protoc_insertion_point(field_list:pb.BuffModSpecifySkillTidConfig.SkillTidArr)
  return skilltidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BuffModSpecifySkillTidConfig::mutable_skilltidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.BuffModSpecifySkillTidConfig.SkillTidArr)
  return &skilltidarr_;
}

// -------------------------------------------------------------------

// BuffModMoveControlImmunityConfig

// optional bool Active = 1;
inline bool BuffModMoveControlImmunityConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModMoveControlImmunityConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModMoveControlImmunityConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModMoveControlImmunityConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModMoveControlImmunityConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModMoveControlImmunityConfig.Active)
  return active_;
}
inline void BuffModMoveControlImmunityConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModMoveControlImmunityConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModMoveControlImmunityConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModMoveControlImmunityConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModMoveControlImmunityConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModMoveControlImmunityConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModMoveControlImmunityConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModMoveControlImmunityConfig.DelayTime)
  return delaytime_;
}
inline void BuffModMoveControlImmunityConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModMoveControlImmunityConfig.DelayTime)
}

// optional int32 EnergyLevel = 3;
inline bool BuffModMoveControlImmunityConfig::has_energylevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModMoveControlImmunityConfig::set_has_energylevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModMoveControlImmunityConfig::clear_has_energylevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModMoveControlImmunityConfig::clear_energylevel() {
  energylevel_ = 0;
  clear_has_energylevel();
}
inline ::google::protobuf::int32 BuffModMoveControlImmunityConfig::energylevel() const {
  // @@protoc_insertion_point(field_get:pb.BuffModMoveControlImmunityConfig.EnergyLevel)
  return energylevel_;
}
inline void BuffModMoveControlImmunityConfig::set_energylevel(::google::protobuf::int32 value) {
  set_has_energylevel();
  energylevel_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModMoveControlImmunityConfig.EnergyLevel)
}

// -------------------------------------------------------------------

// BuffModUnlimitedShieldConfig

// optional bool Active = 1;
inline bool BuffModUnlimitedShieldConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModUnlimitedShieldConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModUnlimitedShieldConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModUnlimitedShieldConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModUnlimitedShieldConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModUnlimitedShieldConfig.Active)
  return active_;
}
inline void BuffModUnlimitedShieldConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModUnlimitedShieldConfig.Active)
}

// optional int32 Percent = 2;
inline bool BuffModUnlimitedShieldConfig::has_percent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModUnlimitedShieldConfig::set_has_percent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModUnlimitedShieldConfig::clear_has_percent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModUnlimitedShieldConfig::clear_percent() {
  percent_ = 0;
  clear_has_percent();
}
inline ::google::protobuf::int32 BuffModUnlimitedShieldConfig::percent() const {
  // @@protoc_insertion_point(field_get:pb.BuffModUnlimitedShieldConfig.Percent)
  return percent_;
}
inline void BuffModUnlimitedShieldConfig::set_percent(::google::protobuf::int32 value) {
  set_has_percent();
  percent_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModUnlimitedShieldConfig.Percent)
}

// optional int32 Period = 3;
inline bool BuffModUnlimitedShieldConfig::has_period() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModUnlimitedShieldConfig::set_has_period() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModUnlimitedShieldConfig::clear_has_period() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModUnlimitedShieldConfig::clear_period() {
  period_ = 0;
  clear_has_period();
}
inline ::google::protobuf::int32 BuffModUnlimitedShieldConfig::period() const {
  // @@protoc_insertion_point(field_get:pb.BuffModUnlimitedShieldConfig.Period)
  return period_;
}
inline void BuffModUnlimitedShieldConfig::set_period(::google::protobuf::int32 value) {
  set_has_period();
  period_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModUnlimitedShieldConfig.Period)
}

// -------------------------------------------------------------------

// BuffModShrinkControlDurationConfig

// optional bool Active = 1;
inline bool BuffModShrinkControlDurationConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModShrinkControlDurationConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModShrinkControlDurationConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModShrinkControlDurationConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModShrinkControlDurationConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModShrinkControlDurationConfig.Active)
  return active_;
}
inline void BuffModShrinkControlDurationConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModShrinkControlDurationConfig.Active)
}

// optional int32 ShrinkRate = 2;
inline bool BuffModShrinkControlDurationConfig::has_shrinkrate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModShrinkControlDurationConfig::set_has_shrinkrate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModShrinkControlDurationConfig::clear_has_shrinkrate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModShrinkControlDurationConfig::clear_shrinkrate() {
  shrinkrate_ = 0;
  clear_has_shrinkrate();
}
inline ::google::protobuf::int32 BuffModShrinkControlDurationConfig::shrinkrate() const {
  // @@protoc_insertion_point(field_get:pb.BuffModShrinkControlDurationConfig.ShrinkRate)
  return shrinkrate_;
}
inline void BuffModShrinkControlDurationConfig::set_shrinkrate(::google::protobuf::int32 value) {
  set_has_shrinkrate();
  shrinkrate_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModShrinkControlDurationConfig.ShrinkRate)
}

// -------------------------------------------------------------------

// BuffModHideSomeAppearanceConfig

// optional bool Active = 1;
inline bool BuffModHideSomeAppearanceConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModHideSomeAppearanceConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModHideSomeAppearanceConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModHideSomeAppearanceConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModHideSomeAppearanceConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModHideSomeAppearanceConfig.Active)
  return active_;
}
inline void BuffModHideSomeAppearanceConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModHideSomeAppearanceConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModHideSomeAppearanceConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModHideSomeAppearanceConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModHideSomeAppearanceConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModHideSomeAppearanceConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModHideSomeAppearanceConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModHideSomeAppearanceConfig.DelayTime)
  return delaytime_;
}
inline void BuffModHideSomeAppearanceConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModHideSomeAppearanceConfig.DelayTime)
}

// optional bool BloodBar = 3;
inline bool BuffModHideSomeAppearanceConfig::has_bloodbar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModHideSomeAppearanceConfig::set_has_bloodbar() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModHideSomeAppearanceConfig::clear_has_bloodbar() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModHideSomeAppearanceConfig::clear_bloodbar() {
  bloodbar_ = false;
  clear_has_bloodbar();
}
inline bool BuffModHideSomeAppearanceConfig::bloodbar() const {
  // @@protoc_insertion_point(field_get:pb.BuffModHideSomeAppearanceConfig.BloodBar)
  return bloodbar_;
}
inline void BuffModHideSomeAppearanceConfig::set_bloodbar(bool value) {
  set_has_bloodbar();
  bloodbar_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModHideSomeAppearanceConfig.BloodBar)
}

// optional bool Text = 4;
inline bool BuffModHideSomeAppearanceConfig::has_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffModHideSomeAppearanceConfig::set_has_text() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffModHideSomeAppearanceConfig::clear_has_text() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffModHideSomeAppearanceConfig::clear_text() {
  text_ = false;
  clear_has_text();
}
inline bool BuffModHideSomeAppearanceConfig::text() const {
  // @@protoc_insertion_point(field_get:pb.BuffModHideSomeAppearanceConfig.Text)
  return text_;
}
inline void BuffModHideSomeAppearanceConfig::set_text(bool value) {
  set_has_text();
  text_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModHideSomeAppearanceConfig.Text)
}

// -------------------------------------------------------------------

// BuffModAddDefPointConfig

// optional bool Active = 1;
inline bool BuffModAddDefPointConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModAddDefPointConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModAddDefPointConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModAddDefPointConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModAddDefPointConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModAddDefPointConfig.Active)
  return active_;
}
inline void BuffModAddDefPointConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModAddDefPointConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModAddDefPointConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModAddDefPointConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModAddDefPointConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModAddDefPointConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModAddDefPointConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModAddDefPointConfig.DelayTime)
  return delaytime_;
}
inline void BuffModAddDefPointConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModAddDefPointConfig.DelayTime)
}

// optional int32 Point = 3;
inline bool BuffModAddDefPointConfig::has_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModAddDefPointConfig::set_has_point() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModAddDefPointConfig::clear_has_point() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModAddDefPointConfig::clear_point() {
  point_ = 0;
  clear_has_point();
}
inline ::google::protobuf::int32 BuffModAddDefPointConfig::point() const {
  // @@protoc_insertion_point(field_get:pb.BuffModAddDefPointConfig.Point)
  return point_;
}
inline void BuffModAddDefPointConfig::set_point(::google::protobuf::int32 value) {
  set_has_point();
  point_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModAddDefPointConfig.Point)
}

// optional int32 Type = 4;
inline bool BuffModAddDefPointConfig::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffModAddDefPointConfig::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffModAddDefPointConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffModAddDefPointConfig::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BuffModAddDefPointConfig::type() const {
  // @@protoc_insertion_point(field_get:pb.BuffModAddDefPointConfig.Type)
  return type_;
}
inline void BuffModAddDefPointConfig::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModAddDefPointConfig.Type)
}

// optional int32 Color = 5;
inline bool BuffModAddDefPointConfig::has_color() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BuffModAddDefPointConfig::set_has_color() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BuffModAddDefPointConfig::clear_has_color() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BuffModAddDefPointConfig::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 BuffModAddDefPointConfig::color() const {
  // @@protoc_insertion_point(field_get:pb.BuffModAddDefPointConfig.Color)
  return color_;
}
inline void BuffModAddDefPointConfig::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModAddDefPointConfig.Color)
}

// -------------------------------------------------------------------

// BuffModRemoveDefPointConfig

// optional bool Active = 1;
inline bool BuffModRemoveDefPointConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModRemoveDefPointConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModRemoveDefPointConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModRemoveDefPointConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModRemoveDefPointConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModRemoveDefPointConfig.Active)
  return active_;
}
inline void BuffModRemoveDefPointConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModRemoveDefPointConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModRemoveDefPointConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModRemoveDefPointConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModRemoveDefPointConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModRemoveDefPointConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModRemoveDefPointConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModRemoveDefPointConfig.DelayTime)
  return delaytime_;
}
inline void BuffModRemoveDefPointConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModRemoveDefPointConfig.DelayTime)
}

// optional int32 SkillId = 3;
inline bool BuffModRemoveDefPointConfig::has_skillid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModRemoveDefPointConfig::set_has_skillid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModRemoveDefPointConfig::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModRemoveDefPointConfig::clear_skillid() {
  skillid_ = 0;
  clear_has_skillid();
}
inline ::google::protobuf::int32 BuffModRemoveDefPointConfig::skillid() const {
  // @@protoc_insertion_point(field_get:pb.BuffModRemoveDefPointConfig.SkillId)
  return skillid_;
}
inline void BuffModRemoveDefPointConfig::set_skillid(::google::protobuf::int32 value) {
  set_has_skillid();
  skillid_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModRemoveDefPointConfig.SkillId)
}

// -------------------------------------------------------------------

// BuffModConditionChangeConfig

// optional bool Active = 1;
inline bool BuffModConditionChangeConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModConditionChangeConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModConditionChangeConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModConditionChangeConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModConditionChangeConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModConditionChangeConfig.Active)
  return active_;
}
inline void BuffModConditionChangeConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModConditionChangeConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModConditionChangeConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModConditionChangeConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModConditionChangeConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModConditionChangeConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModConditionChangeConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModConditionChangeConfig.DelayTime)
  return delaytime_;
}
inline void BuffModConditionChangeConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModConditionChangeConfig.DelayTime)
}

// optional int32 MainType = 3;
inline bool BuffModConditionChangeConfig::has_maintype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModConditionChangeConfig::set_has_maintype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModConditionChangeConfig::clear_has_maintype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModConditionChangeConfig::clear_maintype() {
  maintype_ = 0;
  clear_has_maintype();
}
inline ::google::protobuf::int32 BuffModConditionChangeConfig::maintype() const {
  // @@protoc_insertion_point(field_get:pb.BuffModConditionChangeConfig.MainType)
  return maintype_;
}
inline void BuffModConditionChangeConfig::set_maintype(::google::protobuf::int32 value) {
  set_has_maintype();
  maintype_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModConditionChangeConfig.MainType)
}

// optional int32 Relation = 4;
inline bool BuffModConditionChangeConfig::has_relation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffModConditionChangeConfig::set_has_relation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffModConditionChangeConfig::clear_has_relation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffModConditionChangeConfig::clear_relation() {
  relation_ = 0;
  clear_has_relation();
}
inline ::google::protobuf::int32 BuffModConditionChangeConfig::relation() const {
  // @@protoc_insertion_point(field_get:pb.BuffModConditionChangeConfig.Relation)
  return relation_;
}
inline void BuffModConditionChangeConfig::set_relation(::google::protobuf::int32 value) {
  set_has_relation();
  relation_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModConditionChangeConfig.Relation)
}

// optional int32 Target = 5;
inline bool BuffModConditionChangeConfig::has_target() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BuffModConditionChangeConfig::set_has_target() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BuffModConditionChangeConfig::clear_has_target() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BuffModConditionChangeConfig::clear_target() {
  target_ = 0;
  clear_has_target();
}
inline ::google::protobuf::int32 BuffModConditionChangeConfig::target() const {
  // @@protoc_insertion_point(field_get:pb.BuffModConditionChangeConfig.Target)
  return target_;
}
inline void BuffModConditionChangeConfig::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModConditionChangeConfig.Target)
}

// optional int32 Param1 = 6;
inline bool BuffModConditionChangeConfig::has_param1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BuffModConditionChangeConfig::set_has_param1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BuffModConditionChangeConfig::clear_has_param1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BuffModConditionChangeConfig::clear_param1() {
  param1_ = 0;
  clear_has_param1();
}
inline ::google::protobuf::int32 BuffModConditionChangeConfig::param1() const {
  // @@protoc_insertion_point(field_get:pb.BuffModConditionChangeConfig.Param1)
  return param1_;
}
inline void BuffModConditionChangeConfig::set_param1(::google::protobuf::int32 value) {
  set_has_param1();
  param1_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModConditionChangeConfig.Param1)
}

// optional int32 Param2 = 7;
inline bool BuffModConditionChangeConfig::has_param2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BuffModConditionChangeConfig::set_has_param2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BuffModConditionChangeConfig::clear_has_param2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BuffModConditionChangeConfig::clear_param2() {
  param2_ = 0;
  clear_has_param2();
}
inline ::google::protobuf::int32 BuffModConditionChangeConfig::param2() const {
  // @@protoc_insertion_point(field_get:pb.BuffModConditionChangeConfig.Param2)
  return param2_;
}
inline void BuffModConditionChangeConfig::set_param2(::google::protobuf::int32 value) {
  set_has_param2();
  param2_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModConditionChangeConfig.Param2)
}

// repeated int32 ParamArr = 8;
inline int BuffModConditionChangeConfig::paramarr_size() const {
  return paramarr_.size();
}
inline void BuffModConditionChangeConfig::clear_paramarr() {
  paramarr_.Clear();
}
inline ::google::protobuf::int32 BuffModConditionChangeConfig::paramarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.BuffModConditionChangeConfig.ParamArr)
  return paramarr_.Get(index);
}
inline void BuffModConditionChangeConfig::set_paramarr(int index, ::google::protobuf::int32 value) {
  paramarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.BuffModConditionChangeConfig.ParamArr)
}
inline void BuffModConditionChangeConfig::add_paramarr(::google::protobuf::int32 value) {
  paramarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.BuffModConditionChangeConfig.ParamArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BuffModConditionChangeConfig::paramarr() const {
  // @@protoc_insertion_point(field_list:pb.BuffModConditionChangeConfig.ParamArr)
  return paramarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BuffModConditionChangeConfig::mutable_paramarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.BuffModConditionChangeConfig.ParamArr)
  return &paramarr_;
}

// -------------------------------------------------------------------

// BuffModNoRageRecoverConfig

// optional bool Active = 1;
inline bool BuffModNoRageRecoverConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModNoRageRecoverConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModNoRageRecoverConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModNoRageRecoverConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModNoRageRecoverConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModNoRageRecoverConfig.Active)
  return active_;
}
inline void BuffModNoRageRecoverConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModNoRageRecoverConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModNoRageRecoverConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModNoRageRecoverConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModNoRageRecoverConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModNoRageRecoverConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModNoRageRecoverConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModNoRageRecoverConfig.DelayTime)
  return delaytime_;
}
inline void BuffModNoRageRecoverConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModNoRageRecoverConfig.DelayTime)
}

// optional bool EndWhenDamaged = 3;
inline bool BuffModNoRageRecoverConfig::has_endwhendamaged() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModNoRageRecoverConfig::set_has_endwhendamaged() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModNoRageRecoverConfig::clear_has_endwhendamaged() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModNoRageRecoverConfig::clear_endwhendamaged() {
  endwhendamaged_ = false;
  clear_has_endwhendamaged();
}
inline bool BuffModNoRageRecoverConfig::endwhendamaged() const {
  // @@protoc_insertion_point(field_get:pb.BuffModNoRageRecoverConfig.EndWhenDamaged)
  return endwhendamaged_;
}
inline void BuffModNoRageRecoverConfig::set_endwhendamaged(bool value) {
  set_has_endwhendamaged();
  endwhendamaged_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModNoRageRecoverConfig.EndWhenDamaged)
}

// -------------------------------------------------------------------

// BuffModInheritExistBuffStackConfig

// optional bool Active = 1;
inline bool BuffModInheritExistBuffStackConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModInheritExistBuffStackConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModInheritExistBuffStackConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModInheritExistBuffStackConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModInheritExistBuffStackConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModInheritExistBuffStackConfig.Active)
  return active_;
}
inline void BuffModInheritExistBuffStackConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModInheritExistBuffStackConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModInheritExistBuffStackConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModInheritExistBuffStackConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModInheritExistBuffStackConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModInheritExistBuffStackConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModInheritExistBuffStackConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModInheritExistBuffStackConfig.DelayTime)
  return delaytime_;
}
inline void BuffModInheritExistBuffStackConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModInheritExistBuffStackConfig.DelayTime)
}

// optional int32 BuffId = 3;
inline bool BuffModInheritExistBuffStackConfig::has_buffid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModInheritExistBuffStackConfig::set_has_buffid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModInheritExistBuffStackConfig::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModInheritExistBuffStackConfig::clear_buffid() {
  buffid_ = 0;
  clear_has_buffid();
}
inline ::google::protobuf::int32 BuffModInheritExistBuffStackConfig::buffid() const {
  // @@protoc_insertion_point(field_get:pb.BuffModInheritExistBuffStackConfig.BuffId)
  return buffid_;
}
inline void BuffModInheritExistBuffStackConfig::set_buffid(::google::protobuf::int32 value) {
  set_has_buffid();
  buffid_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModInheritExistBuffStackConfig.BuffId)
}

// -------------------------------------------------------------------

// BuffModReflectBuffConfig

// optional bool Active = 1;
inline bool BuffModReflectBuffConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModReflectBuffConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModReflectBuffConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModReflectBuffConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModReflectBuffConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModReflectBuffConfig.Active)
  return active_;
}
inline void BuffModReflectBuffConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModReflectBuffConfig.Active)
}

// optional int32 CD = 2;
inline bool BuffModReflectBuffConfig::has_cd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModReflectBuffConfig::set_has_cd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModReflectBuffConfig::clear_has_cd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModReflectBuffConfig::clear_cd() {
  cd_ = 0;
  clear_has_cd();
}
inline ::google::protobuf::int32 BuffModReflectBuffConfig::cd() const {
  // @@protoc_insertion_point(field_get:pb.BuffModReflectBuffConfig.CD)
  return cd_;
}
inline void BuffModReflectBuffConfig::set_cd(::google::protobuf::int32 value) {
  set_has_cd();
  cd_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModReflectBuffConfig.CD)
}

// repeated int32 ReflectableSubTypes = 3;
inline int BuffModReflectBuffConfig::reflectablesubtypes_size() const {
  return reflectablesubtypes_.size();
}
inline void BuffModReflectBuffConfig::clear_reflectablesubtypes() {
  reflectablesubtypes_.Clear();
}
inline ::google::protobuf::int32 BuffModReflectBuffConfig::reflectablesubtypes(int index) const {
  // @@protoc_insertion_point(field_get:pb.BuffModReflectBuffConfig.ReflectableSubTypes)
  return reflectablesubtypes_.Get(index);
}
inline void BuffModReflectBuffConfig::set_reflectablesubtypes(int index, ::google::protobuf::int32 value) {
  reflectablesubtypes_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.BuffModReflectBuffConfig.ReflectableSubTypes)
}
inline void BuffModReflectBuffConfig::add_reflectablesubtypes(::google::protobuf::int32 value) {
  reflectablesubtypes_.Add(value);
  // @@protoc_insertion_point(field_add:pb.BuffModReflectBuffConfig.ReflectableSubTypes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BuffModReflectBuffConfig::reflectablesubtypes() const {
  // @@protoc_insertion_point(field_list:pb.BuffModReflectBuffConfig.ReflectableSubTypes)
  return reflectablesubtypes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BuffModReflectBuffConfig::mutable_reflectablesubtypes() {
  // @@protoc_insertion_point(field_mutable_list:pb.BuffModReflectBuffConfig.ReflectableSubTypes)
  return &reflectablesubtypes_;
}

// -------------------------------------------------------------------

// BuffModFatalDmgShiftConfig

// optional bool Active = 1;
inline bool BuffModFatalDmgShiftConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModFatalDmgShiftConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModFatalDmgShiftConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModFatalDmgShiftConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModFatalDmgShiftConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModFatalDmgShiftConfig.Active)
  return active_;
}
inline void BuffModFatalDmgShiftConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModFatalDmgShiftConfig.Active)
}

// optional int32 Count = 2;
inline bool BuffModFatalDmgShiftConfig::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModFatalDmgShiftConfig::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModFatalDmgShiftConfig::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModFatalDmgShiftConfig::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 BuffModFatalDmgShiftConfig::count() const {
  // @@protoc_insertion_point(field_get:pb.BuffModFatalDmgShiftConfig.Count)
  return count_;
}
inline void BuffModFatalDmgShiftConfig::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModFatalDmgShiftConfig.Count)
}

// optional int32 CD = 3;
inline bool BuffModFatalDmgShiftConfig::has_cd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModFatalDmgShiftConfig::set_has_cd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModFatalDmgShiftConfig::clear_has_cd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModFatalDmgShiftConfig::clear_cd() {
  cd_ = 0;
  clear_has_cd();
}
inline ::google::protobuf::int32 BuffModFatalDmgShiftConfig::cd() const {
  // @@protoc_insertion_point(field_get:pb.BuffModFatalDmgShiftConfig.CD)
  return cd_;
}
inline void BuffModFatalDmgShiftConfig::set_cd(::google::protobuf::int32 value) {
  set_has_cd();
  cd_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModFatalDmgShiftConfig.CD)
}

// optional int32 TargetType = 4;
inline bool BuffModFatalDmgShiftConfig::has_targettype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffModFatalDmgShiftConfig::set_has_targettype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffModFatalDmgShiftConfig::clear_has_targettype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffModFatalDmgShiftConfig::clear_targettype() {
  targettype_ = 0;
  clear_has_targettype();
}
inline ::google::protobuf::int32 BuffModFatalDmgShiftConfig::targettype() const {
  // @@protoc_insertion_point(field_get:pb.BuffModFatalDmgShiftConfig.TargetType)
  return targettype_;
}
inline void BuffModFatalDmgShiftConfig::set_targettype(::google::protobuf::int32 value) {
  set_has_targettype();
  targettype_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModFatalDmgShiftConfig.TargetType)
}

// -------------------------------------------------------------------

// BuffModRageImmunityConfig

// optional bool Active = 1;
inline bool BuffModRageImmunityConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModRageImmunityConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModRageImmunityConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModRageImmunityConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModRageImmunityConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModRageImmunityConfig.Active)
  return active_;
}
inline void BuffModRageImmunityConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModRageImmunityConfig.Active)
}

// optional int32 Type = 2;
inline bool BuffModRageImmunityConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModRageImmunityConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModRageImmunityConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModRageImmunityConfig::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BuffModRageImmunityConfig::type() const {
  // @@protoc_insertion_point(field_get:pb.BuffModRageImmunityConfig.Type)
  return type_;
}
inline void BuffModRageImmunityConfig::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModRageImmunityConfig.Type)
}

// -------------------------------------------------------------------

// BuffBaseDataModel

// optional string Name = 1;
inline bool BuffBaseDataModel::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffBaseDataModel::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffBaseDataModel::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffBaseDataModel::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BuffBaseDataModel::name() const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.Name)
  return *name_;
}
inline void BuffBaseDataModel::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.Name)
}
inline void BuffBaseDataModel::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.BuffBaseDataModel.Name)
}
inline void BuffBaseDataModel::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.BuffBaseDataModel.Name)
}
inline ::std::string* BuffBaseDataModel::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.BuffBaseDataModel.Name)
  return name_;
}
inline ::std::string* BuffBaseDataModel::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BuffBaseDataModel::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BuffBaseDataModel.Name)
}

// optional int32 LabelID = 2;
inline bool BuffBaseDataModel::has_labelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffBaseDataModel::set_has_labelid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffBaseDataModel::clear_has_labelid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffBaseDataModel::clear_labelid() {
  labelid_ = 0;
  clear_has_labelid();
}
inline ::google::protobuf::int32 BuffBaseDataModel::labelid() const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.LabelID)
  return labelid_;
}
inline void BuffBaseDataModel::set_labelid(::google::protobuf::int32 value) {
  set_has_labelid();
  labelid_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.LabelID)
}

// optional int32 HitRate = 3;
inline bool BuffBaseDataModel::has_hitrate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffBaseDataModel::set_has_hitrate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffBaseDataModel::clear_has_hitrate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffBaseDataModel::clear_hitrate() {
  hitrate_ = 0;
  clear_has_hitrate();
}
inline ::google::protobuf::int32 BuffBaseDataModel::hitrate() const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.HitRate)
  return hitrate_;
}
inline void BuffBaseDataModel::set_hitrate(::google::protobuf::int32 value) {
  set_has_hitrate();
  hitrate_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.HitRate)
}

// optional int32 MainType = 4;
inline bool BuffBaseDataModel::has_maintype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffBaseDataModel::set_has_maintype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffBaseDataModel::clear_has_maintype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffBaseDataModel::clear_maintype() {
  maintype_ = 0;
  clear_has_maintype();
}
inline ::google::protobuf::int32 BuffBaseDataModel::maintype() const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.MainType)
  return maintype_;
}
inline void BuffBaseDataModel::set_maintype(::google::protobuf::int32 value) {
  set_has_maintype();
  maintype_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.MainType)
}

// optional int32 SubType = 5;
inline bool BuffBaseDataModel::has_subtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BuffBaseDataModel::set_has_subtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BuffBaseDataModel::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BuffBaseDataModel::clear_subtype() {
  subtype_ = 0;
  clear_has_subtype();
}
inline ::google::protobuf::int32 BuffBaseDataModel::subtype() const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.SubType)
  return subtype_;
}
inline void BuffBaseDataModel::set_subtype(::google::protobuf::int32 value) {
  set_has_subtype();
  subtype_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.SubType)
}

// optional int32 LastTime = 6;
inline bool BuffBaseDataModel::has_lasttime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BuffBaseDataModel::set_has_lasttime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BuffBaseDataModel::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BuffBaseDataModel::clear_lasttime() {
  lasttime_ = 0;
  clear_has_lasttime();
}
inline ::google::protobuf::int32 BuffBaseDataModel::lasttime() const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.LastTime)
  return lasttime_;
}
inline void BuffBaseDataModel::set_lasttime(::google::protobuf::int32 value) {
  set_has_lasttime();
  lasttime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.LastTime)
}

// optional int32 LastTimeGrowth = 7;
inline bool BuffBaseDataModel::has_lasttimegrowth() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BuffBaseDataModel::set_has_lasttimegrowth() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BuffBaseDataModel::clear_has_lasttimegrowth() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BuffBaseDataModel::clear_lasttimegrowth() {
  lasttimegrowth_ = 0;
  clear_has_lasttimegrowth();
}
inline ::google::protobuf::int32 BuffBaseDataModel::lasttimegrowth() const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.LastTimeGrowth)
  return lasttimegrowth_;
}
inline void BuffBaseDataModel::set_lasttimegrowth(::google::protobuf::int32 value) {
  set_has_lasttimegrowth();
  lasttimegrowth_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.LastTimeGrowth)
}

// optional int32 PurgeType = 8;
inline bool BuffBaseDataModel::has_purgetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BuffBaseDataModel::set_has_purgetype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BuffBaseDataModel::clear_has_purgetype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BuffBaseDataModel::clear_purgetype() {
  purgetype_ = 0;
  clear_has_purgetype();
}
inline ::google::protobuf::int32 BuffBaseDataModel::purgetype() const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.PurgeType)
  return purgetype_;
}
inline void BuffBaseDataModel::set_purgetype(::google::protobuf::int32 value) {
  set_has_purgetype();
  purgetype_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.PurgeType)
}

// repeated int32 PurgeBuffArr = 25;
inline int BuffBaseDataModel::purgebuffarr_size() const {
  return purgebuffarr_.size();
}
inline void BuffBaseDataModel::clear_purgebuffarr() {
  purgebuffarr_.Clear();
}
inline ::google::protobuf::int32 BuffBaseDataModel::purgebuffarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.PurgeBuffArr)
  return purgebuffarr_.Get(index);
}
inline void BuffBaseDataModel::set_purgebuffarr(int index, ::google::protobuf::int32 value) {
  purgebuffarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.PurgeBuffArr)
}
inline void BuffBaseDataModel::add_purgebuffarr(::google::protobuf::int32 value) {
  purgebuffarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.BuffBaseDataModel.PurgeBuffArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BuffBaseDataModel::purgebuffarr() const {
  // @@protoc_insertion_point(field_list:pb.BuffBaseDataModel.PurgeBuffArr)
  return purgebuffarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BuffBaseDataModel::mutable_purgebuffarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.BuffBaseDataModel.PurgeBuffArr)
  return &purgebuffarr_;
}

// optional int32 OverlyType = 9;
inline bool BuffBaseDataModel::has_overlytype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BuffBaseDataModel::set_has_overlytype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BuffBaseDataModel::clear_has_overlytype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BuffBaseDataModel::clear_overlytype() {
  overlytype_ = 0;
  clear_has_overlytype();
}
inline ::google::protobuf::int32 BuffBaseDataModel::overlytype() const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.OverlyType)
  return overlytype_;
}
inline void BuffBaseDataModel::set_overlytype(::google::protobuf::int32 value) {
  set_has_overlytype();
  overlytype_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.OverlyType)
}

// optional int32 MaxOverlyNum = 10;
inline bool BuffBaseDataModel::has_maxoverlynum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BuffBaseDataModel::set_has_maxoverlynum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BuffBaseDataModel::clear_has_maxoverlynum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BuffBaseDataModel::clear_maxoverlynum() {
  maxoverlynum_ = 0;
  clear_has_maxoverlynum();
}
inline ::google::protobuf::int32 BuffBaseDataModel::maxoverlynum() const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.MaxOverlyNum)
  return maxoverlynum_;
}
inline void BuffBaseDataModel::set_maxoverlynum(::google::protobuf::int32 value) {
  set_has_maxoverlynum();
  maxoverlynum_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.MaxOverlyNum)
}

// optional string IconPath = 11;
inline bool BuffBaseDataModel::has_iconpath() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BuffBaseDataModel::set_has_iconpath() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BuffBaseDataModel::clear_has_iconpath() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BuffBaseDataModel::clear_iconpath() {
  if (iconpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iconpath_->clear();
  }
  clear_has_iconpath();
}
inline const ::std::string& BuffBaseDataModel::iconpath() const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.IconPath)
  return *iconpath_;
}
inline void BuffBaseDataModel::set_iconpath(const ::std::string& value) {
  set_has_iconpath();
  if (iconpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iconpath_ = new ::std::string;
  }
  iconpath_->assign(value);
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.IconPath)
}
inline void BuffBaseDataModel::set_iconpath(const char* value) {
  set_has_iconpath();
  if (iconpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iconpath_ = new ::std::string;
  }
  iconpath_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.BuffBaseDataModel.IconPath)
}
inline void BuffBaseDataModel::set_iconpath(const char* value, size_t size) {
  set_has_iconpath();
  if (iconpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iconpath_ = new ::std::string;
  }
  iconpath_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.BuffBaseDataModel.IconPath)
}
inline ::std::string* BuffBaseDataModel::mutable_iconpath() {
  set_has_iconpath();
  if (iconpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    iconpath_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.BuffBaseDataModel.IconPath)
  return iconpath_;
}
inline ::std::string* BuffBaseDataModel::release_iconpath() {
  clear_has_iconpath();
  if (iconpath_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = iconpath_;
    iconpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BuffBaseDataModel::set_allocated_iconpath(::std::string* iconpath) {
  if (iconpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete iconpath_;
  }
  if (iconpath) {
    set_has_iconpath();
    iconpath_ = iconpath;
  } else {
    clear_has_iconpath();
    iconpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BuffBaseDataModel.IconPath)
}

// optional string StartEffectName = 12;
inline bool BuffBaseDataModel::has_starteffectname() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BuffBaseDataModel::set_has_starteffectname() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BuffBaseDataModel::clear_has_starteffectname() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BuffBaseDataModel::clear_starteffectname() {
  if (starteffectname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    starteffectname_->clear();
  }
  clear_has_starteffectname();
}
inline const ::std::string& BuffBaseDataModel::starteffectname() const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.StartEffectName)
  return *starteffectname_;
}
inline void BuffBaseDataModel::set_starteffectname(const ::std::string& value) {
  set_has_starteffectname();
  if (starteffectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    starteffectname_ = new ::std::string;
  }
  starteffectname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.StartEffectName)
}
inline void BuffBaseDataModel::set_starteffectname(const char* value) {
  set_has_starteffectname();
  if (starteffectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    starteffectname_ = new ::std::string;
  }
  starteffectname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.BuffBaseDataModel.StartEffectName)
}
inline void BuffBaseDataModel::set_starteffectname(const char* value, size_t size) {
  set_has_starteffectname();
  if (starteffectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    starteffectname_ = new ::std::string;
  }
  starteffectname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.BuffBaseDataModel.StartEffectName)
}
inline ::std::string* BuffBaseDataModel::mutable_starteffectname() {
  set_has_starteffectname();
  if (starteffectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    starteffectname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.BuffBaseDataModel.StartEffectName)
  return starteffectname_;
}
inline ::std::string* BuffBaseDataModel::release_starteffectname() {
  clear_has_starteffectname();
  if (starteffectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = starteffectname_;
    starteffectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BuffBaseDataModel::set_allocated_starteffectname(::std::string* starteffectname) {
  if (starteffectname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete starteffectname_;
  }
  if (starteffectname) {
    set_has_starteffectname();
    starteffectname_ = starteffectname;
  } else {
    clear_has_starteffectname();
    starteffectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BuffBaseDataModel.StartEffectName)
}

// optional int32 StartEffectParent = 13;
inline bool BuffBaseDataModel::has_starteffectparent() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BuffBaseDataModel::set_has_starteffectparent() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BuffBaseDataModel::clear_has_starteffectparent() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BuffBaseDataModel::clear_starteffectparent() {
  starteffectparent_ = 0;
  clear_has_starteffectparent();
}
inline ::google::protobuf::int32 BuffBaseDataModel::starteffectparent() const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.StartEffectParent)
  return starteffectparent_;
}
inline void BuffBaseDataModel::set_starteffectparent(::google::protobuf::int32 value) {
  set_has_starteffectparent();
  starteffectparent_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.StartEffectParent)
}

// optional int32 LastEffectParent = 15;
inline bool BuffBaseDataModel::has_lasteffectparent() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BuffBaseDataModel::set_has_lasteffectparent() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BuffBaseDataModel::clear_has_lasteffectparent() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BuffBaseDataModel::clear_lasteffectparent() {
  lasteffectparent_ = 0;
  clear_has_lasteffectparent();
}
inline ::google::protobuf::int32 BuffBaseDataModel::lasteffectparent() const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.LastEffectParent)
  return lasteffectparent_;
}
inline void BuffBaseDataModel::set_lasteffectparent(::google::protobuf::int32 value) {
  set_has_lasteffectparent();
  lasteffectparent_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.LastEffectParent)
}

// optional string EndEffectName = 16;
inline bool BuffBaseDataModel::has_endeffectname() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BuffBaseDataModel::set_has_endeffectname() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BuffBaseDataModel::clear_has_endeffectname() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BuffBaseDataModel::clear_endeffectname() {
  if (endeffectname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endeffectname_->clear();
  }
  clear_has_endeffectname();
}
inline const ::std::string& BuffBaseDataModel::endeffectname() const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.EndEffectName)
  return *endeffectname_;
}
inline void BuffBaseDataModel::set_endeffectname(const ::std::string& value) {
  set_has_endeffectname();
  if (endeffectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endeffectname_ = new ::std::string;
  }
  endeffectname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.EndEffectName)
}
inline void BuffBaseDataModel::set_endeffectname(const char* value) {
  set_has_endeffectname();
  if (endeffectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endeffectname_ = new ::std::string;
  }
  endeffectname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.BuffBaseDataModel.EndEffectName)
}
inline void BuffBaseDataModel::set_endeffectname(const char* value, size_t size) {
  set_has_endeffectname();
  if (endeffectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endeffectname_ = new ::std::string;
  }
  endeffectname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.BuffBaseDataModel.EndEffectName)
}
inline ::std::string* BuffBaseDataModel::mutable_endeffectname() {
  set_has_endeffectname();
  if (endeffectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endeffectname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.BuffBaseDataModel.EndEffectName)
  return endeffectname_;
}
inline ::std::string* BuffBaseDataModel::release_endeffectname() {
  clear_has_endeffectname();
  if (endeffectname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = endeffectname_;
    endeffectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BuffBaseDataModel::set_allocated_endeffectname(::std::string* endeffectname) {
  if (endeffectname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endeffectname_;
  }
  if (endeffectname) {
    set_has_endeffectname();
    endeffectname_ = endeffectname;
  } else {
    clear_has_endeffectname();
    endeffectname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BuffBaseDataModel.EndEffectName)
}

// optional int32 EndEffectParent = 17;
inline bool BuffBaseDataModel::has_endeffectparent() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BuffBaseDataModel::set_has_endeffectparent() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BuffBaseDataModel::clear_has_endeffectparent() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BuffBaseDataModel::clear_endeffectparent() {
  endeffectparent_ = 0;
  clear_has_endeffectparent();
}
inline ::google::protobuf::int32 BuffBaseDataModel::endeffectparent() const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.EndEffectParent)
  return endeffectparent_;
}
inline void BuffBaseDataModel::set_endeffectparent(::google::protobuf::int32 value) {
  set_has_endeffectparent();
  endeffectparent_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.EndEffectParent)
}

// optional string SpecialShader = 18;
inline bool BuffBaseDataModel::has_specialshader() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BuffBaseDataModel::set_has_specialshader() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BuffBaseDataModel::clear_has_specialshader() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BuffBaseDataModel::clear_specialshader() {
  if (specialshader_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specialshader_->clear();
  }
  clear_has_specialshader();
}
inline const ::std::string& BuffBaseDataModel::specialshader() const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.SpecialShader)
  return *specialshader_;
}
inline void BuffBaseDataModel::set_specialshader(const ::std::string& value) {
  set_has_specialshader();
  if (specialshader_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specialshader_ = new ::std::string;
  }
  specialshader_->assign(value);
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.SpecialShader)
}
inline void BuffBaseDataModel::set_specialshader(const char* value) {
  set_has_specialshader();
  if (specialshader_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specialshader_ = new ::std::string;
  }
  specialshader_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.BuffBaseDataModel.SpecialShader)
}
inline void BuffBaseDataModel::set_specialshader(const char* value, size_t size) {
  set_has_specialshader();
  if (specialshader_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specialshader_ = new ::std::string;
  }
  specialshader_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.BuffBaseDataModel.SpecialShader)
}
inline ::std::string* BuffBaseDataModel::mutable_specialshader() {
  set_has_specialshader();
  if (specialshader_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    specialshader_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.BuffBaseDataModel.SpecialShader)
  return specialshader_;
}
inline ::std::string* BuffBaseDataModel::release_specialshader() {
  clear_has_specialshader();
  if (specialshader_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = specialshader_;
    specialshader_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BuffBaseDataModel::set_allocated_specialshader(::std::string* specialshader) {
  if (specialshader_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete specialshader_;
  }
  if (specialshader) {
    set_has_specialshader();
    specialshader_ = specialshader;
  } else {
    clear_has_specialshader();
    specialshader_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BuffBaseDataModel.SpecialShader)
}

// optional string GeneralShader = 26;
inline bool BuffBaseDataModel::has_generalshader() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BuffBaseDataModel::set_has_generalshader() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BuffBaseDataModel::clear_has_generalshader() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BuffBaseDataModel::clear_generalshader() {
  if (generalshader_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    generalshader_->clear();
  }
  clear_has_generalshader();
}
inline const ::std::string& BuffBaseDataModel::generalshader() const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.GeneralShader)
  return *generalshader_;
}
inline void BuffBaseDataModel::set_generalshader(const ::std::string& value) {
  set_has_generalshader();
  if (generalshader_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    generalshader_ = new ::std::string;
  }
  generalshader_->assign(value);
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.GeneralShader)
}
inline void BuffBaseDataModel::set_generalshader(const char* value) {
  set_has_generalshader();
  if (generalshader_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    generalshader_ = new ::std::string;
  }
  generalshader_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.BuffBaseDataModel.GeneralShader)
}
inline void BuffBaseDataModel::set_generalshader(const char* value, size_t size) {
  set_has_generalshader();
  if (generalshader_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    generalshader_ = new ::std::string;
  }
  generalshader_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.BuffBaseDataModel.GeneralShader)
}
inline ::std::string* BuffBaseDataModel::mutable_generalshader() {
  set_has_generalshader();
  if (generalshader_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    generalshader_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.BuffBaseDataModel.GeneralShader)
  return generalshader_;
}
inline ::std::string* BuffBaseDataModel::release_generalshader() {
  clear_has_generalshader();
  if (generalshader_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = generalshader_;
    generalshader_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BuffBaseDataModel::set_allocated_generalshader(::std::string* generalshader) {
  if (generalshader_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete generalshader_;
  }
  if (generalshader) {
    set_has_generalshader();
    generalshader_ = generalshader;
  } else {
    clear_has_generalshader();
    generalshader_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BuffBaseDataModel.GeneralShader)
}

// optional string LastingAction = 19;
inline bool BuffBaseDataModel::has_lastingaction() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BuffBaseDataModel::set_has_lastingaction() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BuffBaseDataModel::clear_has_lastingaction() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BuffBaseDataModel::clear_lastingaction() {
  if (lastingaction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastingaction_->clear();
  }
  clear_has_lastingaction();
}
inline const ::std::string& BuffBaseDataModel::lastingaction() const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.LastingAction)
  return *lastingaction_;
}
inline void BuffBaseDataModel::set_lastingaction(const ::std::string& value) {
  set_has_lastingaction();
  if (lastingaction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastingaction_ = new ::std::string;
  }
  lastingaction_->assign(value);
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.LastingAction)
}
inline void BuffBaseDataModel::set_lastingaction(const char* value) {
  set_has_lastingaction();
  if (lastingaction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastingaction_ = new ::std::string;
  }
  lastingaction_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.BuffBaseDataModel.LastingAction)
}
inline void BuffBaseDataModel::set_lastingaction(const char* value, size_t size) {
  set_has_lastingaction();
  if (lastingaction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastingaction_ = new ::std::string;
  }
  lastingaction_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.BuffBaseDataModel.LastingAction)
}
inline ::std::string* BuffBaseDataModel::mutable_lastingaction() {
  set_has_lastingaction();
  if (lastingaction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lastingaction_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.BuffBaseDataModel.LastingAction)
  return lastingaction_;
}
inline ::std::string* BuffBaseDataModel::release_lastingaction() {
  clear_has_lastingaction();
  if (lastingaction_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lastingaction_;
    lastingaction_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BuffBaseDataModel::set_allocated_lastingaction(::std::string* lastingaction) {
  if (lastingaction_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lastingaction_;
  }
  if (lastingaction) {
    set_has_lastingaction();
    lastingaction_ = lastingaction;
  } else {
    clear_has_lastingaction();
    lastingaction_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BuffBaseDataModel.LastingAction)
}

// repeated string LastEffectArr = 20;
inline int BuffBaseDataModel::lasteffectarr_size() const {
  return lasteffectarr_.size();
}
inline void BuffBaseDataModel::clear_lasteffectarr() {
  lasteffectarr_.Clear();
}
inline const ::std::string& BuffBaseDataModel::lasteffectarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.LastEffectArr)
  return lasteffectarr_.Get(index);
}
inline ::std::string* BuffBaseDataModel::mutable_lasteffectarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BuffBaseDataModel.LastEffectArr)
  return lasteffectarr_.Mutable(index);
}
inline void BuffBaseDataModel::set_lasteffectarr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.LastEffectArr)
  lasteffectarr_.Mutable(index)->assign(value);
}
inline void BuffBaseDataModel::set_lasteffectarr(int index, const char* value) {
  lasteffectarr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.BuffBaseDataModel.LastEffectArr)
}
inline void BuffBaseDataModel::set_lasteffectarr(int index, const char* value, size_t size) {
  lasteffectarr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.BuffBaseDataModel.LastEffectArr)
}
inline ::std::string* BuffBaseDataModel::add_lasteffectarr() {
  return lasteffectarr_.Add();
}
inline void BuffBaseDataModel::add_lasteffectarr(const ::std::string& value) {
  lasteffectarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.BuffBaseDataModel.LastEffectArr)
}
inline void BuffBaseDataModel::add_lasteffectarr(const char* value) {
  lasteffectarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.BuffBaseDataModel.LastEffectArr)
}
inline void BuffBaseDataModel::add_lasteffectarr(const char* value, size_t size) {
  lasteffectarr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.BuffBaseDataModel.LastEffectArr)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BuffBaseDataModel::lasteffectarr() const {
  // @@protoc_insertion_point(field_list:pb.BuffBaseDataModel.LastEffectArr)
  return lasteffectarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BuffBaseDataModel::mutable_lasteffectarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.BuffBaseDataModel.LastEffectArr)
  return &lasteffectarr_;
}

// optional int32 LastActionDelay = 21;
inline bool BuffBaseDataModel::has_lastactiondelay() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BuffBaseDataModel::set_has_lastactiondelay() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BuffBaseDataModel::clear_has_lastactiondelay() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BuffBaseDataModel::clear_lastactiondelay() {
  lastactiondelay_ = 0;
  clear_has_lastactiondelay();
}
inline ::google::protobuf::int32 BuffBaseDataModel::lastactiondelay() const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.LastActionDelay)
  return lastactiondelay_;
}
inline void BuffBaseDataModel::set_lastactiondelay(::google::protobuf::int32 value) {
  set_has_lastactiondelay();
  lastactiondelay_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.LastActionDelay)
}

// repeated .pb.BuffSingleEffect StartEffect = 22;
inline int BuffBaseDataModel::starteffect_size() const {
  return starteffect_.size();
}
inline void BuffBaseDataModel::clear_starteffect() {
  starteffect_.Clear();
}
inline const ::pb::BuffSingleEffect& BuffBaseDataModel::starteffect(int index) const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.StartEffect)
  return starteffect_.Get(index);
}
inline ::pb::BuffSingleEffect* BuffBaseDataModel::mutable_starteffect(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BuffBaseDataModel.StartEffect)
  return starteffect_.Mutable(index);
}
inline ::pb::BuffSingleEffect* BuffBaseDataModel::add_starteffect() {
  // @@protoc_insertion_point(field_add:pb.BuffBaseDataModel.StartEffect)
  return starteffect_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::BuffSingleEffect >&
BuffBaseDataModel::starteffect() const {
  // @@protoc_insertion_point(field_list:pb.BuffBaseDataModel.StartEffect)
  return starteffect_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::BuffSingleEffect >*
BuffBaseDataModel::mutable_starteffect() {
  // @@protoc_insertion_point(field_mutable_list:pb.BuffBaseDataModel.StartEffect)
  return &starteffect_;
}

// repeated .pb.BuffRepeatedEffect LastEffect = 23;
inline int BuffBaseDataModel::lasteffect_size() const {
  return lasteffect_.size();
}
inline void BuffBaseDataModel::clear_lasteffect() {
  lasteffect_.Clear();
}
inline const ::pb::BuffRepeatedEffect& BuffBaseDataModel::lasteffect(int index) const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.LastEffect)
  return lasteffect_.Get(index);
}
inline ::pb::BuffRepeatedEffect* BuffBaseDataModel::mutable_lasteffect(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BuffBaseDataModel.LastEffect)
  return lasteffect_.Mutable(index);
}
inline ::pb::BuffRepeatedEffect* BuffBaseDataModel::add_lasteffect() {
  // @@protoc_insertion_point(field_add:pb.BuffBaseDataModel.LastEffect)
  return lasteffect_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::BuffRepeatedEffect >&
BuffBaseDataModel::lasteffect() const {
  // @@protoc_insertion_point(field_list:pb.BuffBaseDataModel.LastEffect)
  return lasteffect_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::BuffRepeatedEffect >*
BuffBaseDataModel::mutable_lasteffect() {
  // @@protoc_insertion_point(field_mutable_list:pb.BuffBaseDataModel.LastEffect)
  return &lasteffect_;
}

// repeated .pb.BuffSingleEffect EndEffect = 24;
inline int BuffBaseDataModel::endeffect_size() const {
  return endeffect_.size();
}
inline void BuffBaseDataModel::clear_endeffect() {
  endeffect_.Clear();
}
inline const ::pb::BuffSingleEffect& BuffBaseDataModel::endeffect(int index) const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.EndEffect)
  return endeffect_.Get(index);
}
inline ::pb::BuffSingleEffect* BuffBaseDataModel::mutable_endeffect(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BuffBaseDataModel.EndEffect)
  return endeffect_.Mutable(index);
}
inline ::pb::BuffSingleEffect* BuffBaseDataModel::add_endeffect() {
  // @@protoc_insertion_point(field_add:pb.BuffBaseDataModel.EndEffect)
  return endeffect_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::BuffSingleEffect >&
BuffBaseDataModel::endeffect() const {
  // @@protoc_insertion_point(field_list:pb.BuffBaseDataModel.EndEffect)
  return endeffect_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::BuffSingleEffect >*
BuffBaseDataModel::mutable_endeffect() {
  // @@protoc_insertion_point(field_mutable_list:pb.BuffBaseDataModel.EndEffect)
  return &endeffect_;
}

// optional bool RemoveWhenBeControlled = 27;
inline bool BuffBaseDataModel::has_removewhenbecontrolled() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void BuffBaseDataModel::set_has_removewhenbecontrolled() {
  _has_bits_[0] |= 0x02000000u;
}
inline void BuffBaseDataModel::clear_has_removewhenbecontrolled() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void BuffBaseDataModel::clear_removewhenbecontrolled() {
  removewhenbecontrolled_ = false;
  clear_has_removewhenbecontrolled();
}
inline bool BuffBaseDataModel::removewhenbecontrolled() const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.RemoveWhenBeControlled)
  return removewhenbecontrolled_;
}
inline void BuffBaseDataModel::set_removewhenbecontrolled(bool value) {
  set_has_removewhenbecontrolled();
  removewhenbecontrolled_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.RemoveWhenBeControlled)
}

// optional bool NeedRemoveLastNonPermanentEffect = 28;
inline bool BuffBaseDataModel::has_needremovelastnonpermanenteffect() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void BuffBaseDataModel::set_has_needremovelastnonpermanenteffect() {
  _has_bits_[0] |= 0x04000000u;
}
inline void BuffBaseDataModel::clear_has_needremovelastnonpermanenteffect() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void BuffBaseDataModel::clear_needremovelastnonpermanenteffect() {
  needremovelastnonpermanenteffect_ = false;
  clear_has_needremovelastnonpermanenteffect();
}
inline bool BuffBaseDataModel::needremovelastnonpermanenteffect() const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.NeedRemoveLastNonPermanentEffect)
  return needremovelastnonpermanenteffect_;
}
inline void BuffBaseDataModel::set_needremovelastnonpermanenteffect(bool value) {
  set_has_needremovelastnonpermanenteffect();
  needremovelastnonpermanenteffect_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.NeedRemoveLastNonPermanentEffect)
}

// repeated int32 SubTypeArr = 29;
inline int BuffBaseDataModel::subtypearr_size() const {
  return subtypearr_.size();
}
inline void BuffBaseDataModel::clear_subtypearr() {
  subtypearr_.Clear();
}
inline ::google::protobuf::int32 BuffBaseDataModel::subtypearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.SubTypeArr)
  return subtypearr_.Get(index);
}
inline void BuffBaseDataModel::set_subtypearr(int index, ::google::protobuf::int32 value) {
  subtypearr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.SubTypeArr)
}
inline void BuffBaseDataModel::add_subtypearr(::google::protobuf::int32 value) {
  subtypearr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.BuffBaseDataModel.SubTypeArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BuffBaseDataModel::subtypearr() const {
  // @@protoc_insertion_point(field_list:pb.BuffBaseDataModel.SubTypeArr)
  return subtypearr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BuffBaseDataModel::mutable_subtypearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.BuffBaseDataModel.SubTypeArr)
  return &subtypearr_;
}

// optional bool RemoveWhenShapeShifted = 30;
inline bool BuffBaseDataModel::has_removewhenshapeshifted() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void BuffBaseDataModel::set_has_removewhenshapeshifted() {
  _has_bits_[0] |= 0x10000000u;
}
inline void BuffBaseDataModel::clear_has_removewhenshapeshifted() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void BuffBaseDataModel::clear_removewhenshapeshifted() {
  removewhenshapeshifted_ = false;
  clear_has_removewhenshapeshifted();
}
inline bool BuffBaseDataModel::removewhenshapeshifted() const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.RemoveWhenShapeShifted)
  return removewhenshapeshifted_;
}
inline void BuffBaseDataModel::set_removewhenshapeshifted(bool value) {
  set_has_removewhenshapeshifted();
  removewhenshapeshifted_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.RemoveWhenShapeShifted)
}

// optional int32 BeCleanLevel = 31;
inline bool BuffBaseDataModel::has_becleanlevel() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void BuffBaseDataModel::set_has_becleanlevel() {
  _has_bits_[0] |= 0x20000000u;
}
inline void BuffBaseDataModel::clear_has_becleanlevel() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void BuffBaseDataModel::clear_becleanlevel() {
  becleanlevel_ = 0;
  clear_has_becleanlevel();
}
inline ::google::protobuf::int32 BuffBaseDataModel::becleanlevel() const {
  // @@protoc_insertion_point(field_get:pb.BuffBaseDataModel.BeCleanLevel)
  return becleanlevel_;
}
inline void BuffBaseDataModel::set_becleanlevel(::google::protobuf::int32 value) {
  set_has_becleanlevel();
  becleanlevel_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffBaseDataModel.BeCleanLevel)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EBattleAttrType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EBattleAttrType>() {
  return ::pb::EBattleAttrType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_module_2fBuffDataBase_2eproto__INCLUDED
