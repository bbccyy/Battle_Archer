// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/UgcUser.proto

#ifndef PROTOBUF_net_2fUgcUser_2eproto__INCLUDED
#define PROTOBUF_net_2fUgcUser_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fUgcUser_2eproto();
void protobuf_AssignDesc_net_2fUgcUser_2eproto();
void protobuf_ShutdownFile_net_2fUgcUser_2eproto();

class TUgcChangeUserSimpleInfoReq;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TUgcChangeUserSimpleInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UgcUser.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUgcChangeUserSimpleInfoReq : public ::google::protobuf::Message {
 public:
  TUgcChangeUserSimpleInfoReq();
  virtual ~TUgcChangeUserSimpleInfoReq();

  TUgcChangeUserSimpleInfoReq(const TUgcChangeUserSimpleInfoReq& from);

  inline TUgcChangeUserSimpleInfoReq& operator=(const TUgcChangeUserSimpleInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUgcChangeUserSimpleInfoReq& default_instance();

  void Swap(TUgcChangeUserSimpleInfoReq* other);

  // implements Message ----------------------------------------------

  TUgcChangeUserSimpleInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUgcChangeUserSimpleInfoReq& from);
  void MergeFrom(const TUgcChangeUserSimpleInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUgcChangeUserSimpleInfoReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string Uname = 2;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUgcChangeUserSimpleInfoReq</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional uint32 ImageTid = 3;
  inline bool has_imagetid() const;
  inline void clear_imagetid();
  static const int kImageTidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUgcChangeUserSimpleInfoReq</name>
  	<Function>
  		<name>imagetid</name>
  		<replaceName>ImageTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_imagetid</name>
  		<replaceName>ImageTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_imagetid</name>
  		<replaceName>ImageTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 imagetid() const;
  inline void set_imagetid(::google::protobuf::uint32 value);

  // optional uint32 ImageFrameTid = 4;
  inline bool has_imageframetid() const;
  inline void clear_imageframetid();
  static const int kImageFrameTidFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TUgcChangeUserSimpleInfoReq</name>
  	<Function>
  		<name>imageframetid</name>
  		<replaceName>ImageFrameTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_imageframetid</name>
  		<replaceName>ImageFrameTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_imageframetid</name>
  		<replaceName>ImageFrameTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 imageframetid() const;
  inline void set_imageframetid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TUgcChangeUserSimpleInfoReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_imagetid();
  inline void clear_has_imagetid();
  inline void set_has_imageframetid();
  inline void clear_has_imageframetid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* uname_;
  ::google::protobuf::uint32 imagetid_;
  ::google::protobuf::uint32 imageframetid_;
  friend void  protobuf_AddDesc_net_2fUgcUser_2eproto();
  friend void protobuf_AssignDesc_net_2fUgcUser_2eproto();
  friend void protobuf_ShutdownFile_net_2fUgcUser_2eproto();

  void InitAsDefaultInstance();
  static TUgcChangeUserSimpleInfoReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TUgcChangeUserSimpleInfoReq

// optional uint64 Uid = 1;
inline bool TUgcChangeUserSimpleInfoReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUgcChangeUserSimpleInfoReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUgcChangeUserSimpleInfoReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUgcChangeUserSimpleInfoReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TUgcChangeUserSimpleInfoReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TUgcChangeUserSimpleInfoReq.Uid)
  return uid_;
}
inline void TUgcChangeUserSimpleInfoReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcChangeUserSimpleInfoReq.Uid)
}

// optional string Uname = 2;
inline bool TUgcChangeUserSimpleInfoReq::has_uname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUgcChangeUserSimpleInfoReq::set_has_uname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUgcChangeUserSimpleInfoReq::clear_has_uname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUgcChangeUserSimpleInfoReq::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TUgcChangeUserSimpleInfoReq::uname() const {
  // @@protoc_insertion_point(field_get:pb.TUgcChangeUserSimpleInfoReq.Uname)
  return *uname_;
}
inline void TUgcChangeUserSimpleInfoReq::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TUgcChangeUserSimpleInfoReq.Uname)
}
inline void TUgcChangeUserSimpleInfoReq::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TUgcChangeUserSimpleInfoReq.Uname)
}
inline void TUgcChangeUserSimpleInfoReq::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TUgcChangeUserSimpleInfoReq.Uname)
}
inline ::std::string* TUgcChangeUserSimpleInfoReq::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TUgcChangeUserSimpleInfoReq.Uname)
  return uname_;
}
inline ::std::string* TUgcChangeUserSimpleInfoReq::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TUgcChangeUserSimpleInfoReq::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUgcChangeUserSimpleInfoReq.Uname)
}

// optional uint32 ImageTid = 3;
inline bool TUgcChangeUserSimpleInfoReq::has_imagetid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUgcChangeUserSimpleInfoReq::set_has_imagetid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUgcChangeUserSimpleInfoReq::clear_has_imagetid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUgcChangeUserSimpleInfoReq::clear_imagetid() {
  imagetid_ = 0u;
  clear_has_imagetid();
}
inline ::google::protobuf::uint32 TUgcChangeUserSimpleInfoReq::imagetid() const {
  // @@protoc_insertion_point(field_get:pb.TUgcChangeUserSimpleInfoReq.ImageTid)
  return imagetid_;
}
inline void TUgcChangeUserSimpleInfoReq::set_imagetid(::google::protobuf::uint32 value) {
  set_has_imagetid();
  imagetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcChangeUserSimpleInfoReq.ImageTid)
}

// optional uint32 ImageFrameTid = 4;
inline bool TUgcChangeUserSimpleInfoReq::has_imageframetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TUgcChangeUserSimpleInfoReq::set_has_imageframetid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TUgcChangeUserSimpleInfoReq::clear_has_imageframetid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TUgcChangeUserSimpleInfoReq::clear_imageframetid() {
  imageframetid_ = 0u;
  clear_has_imageframetid();
}
inline ::google::protobuf::uint32 TUgcChangeUserSimpleInfoReq::imageframetid() const {
  // @@protoc_insertion_point(field_get:pb.TUgcChangeUserSimpleInfoReq.ImageFrameTid)
  return imageframetid_;
}
inline void TUgcChangeUserSimpleInfoReq::set_imageframetid(::google::protobuf::uint32 value) {
  set_has_imageframetid();
  imageframetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcChangeUserSimpleInfoReq.ImageFrameTid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fUgcUser_2eproto__INCLUDED
