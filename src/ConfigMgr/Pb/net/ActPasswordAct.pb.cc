// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActPasswordAct.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActPasswordAct.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActPasswordActGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActPasswordActGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActPasswordActEnterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActPasswordActEnterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActPasswordActActiveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActPasswordActActiveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActPasswordActActiveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActPasswordActActiveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActPasswordActActiveByItemItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActPasswordActActiveByItemItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActPasswordActActiveByItemReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActPasswordActActiveByItemReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActPasswordActActiveByItemRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActPasswordActActiveByItemRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActPasswordActNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActPasswordActNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActPasswordActReceiveRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActPasswordActReceiveRewardReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActPasswordAct_2eproto() {
  protobuf_AddDesc_net_2fActPasswordAct_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActPasswordAct.proto");
  GOOGLE_CHECK(file != NULL);
  TActPasswordActGetInfoRsp_descriptor_ = file->message_type(0);
  static const int TActPasswordActGetInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActGetInfoRsp, arrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActGetInfoRsp, arrrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActGetInfoRsp, arrrandid_),
  };
  TActPasswordActGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActPasswordActGetInfoRsp_descriptor_,
      TActPasswordActGetInfoRsp::default_instance_,
      TActPasswordActGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActPasswordActGetInfoRsp));
  TActPasswordActEnterRsp_descriptor_ = file->message_type(1);
  static const int TActPasswordActEnterRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActEnterRsp, arrid_),
  };
  TActPasswordActEnterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActPasswordActEnterRsp_descriptor_,
      TActPasswordActEnterRsp::default_instance_,
      TActPasswordActEnterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActEnterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActEnterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActPasswordActEnterRsp));
  TActPasswordActActiveReq_descriptor_ = file->message_type(2);
  static const int TActPasswordActActiveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActActiveReq, strmsg_),
  };
  TActPasswordActActiveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActPasswordActActiveReq_descriptor_,
      TActPasswordActActiveReq::default_instance_,
      TActPasswordActActiveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActActiveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActActiveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActPasswordActActiveReq));
  TActPasswordActActiveRsp_descriptor_ = file->message_type(3);
  static const int TActPasswordActActiveRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActActiveRsp, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActActiveRsp, id_),
  };
  TActPasswordActActiveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActPasswordActActiveRsp_descriptor_,
      TActPasswordActActiveRsp::default_instance_,
      TActPasswordActActiveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActActiveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActActiveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActPasswordActActiveRsp));
  TActPasswordActActiveByItemItemInfo_descriptor_ = file->message_type(4);
  static const int TActPasswordActActiveByItemItemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActActiveByItemItemInfo, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActActiveByItemItemInfo, num_),
  };
  TActPasswordActActiveByItemItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActPasswordActActiveByItemItemInfo_descriptor_,
      TActPasswordActActiveByItemItemInfo::default_instance_,
      TActPasswordActActiveByItemItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActActiveByItemItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActActiveByItemItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActPasswordActActiveByItemItemInfo));
  TActPasswordActActiveByItemReq_descriptor_ = file->message_type(5);
  static const int TActPasswordActActiveByItemReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActActiveByItemReq, arriteminfo_),
  };
  TActPasswordActActiveByItemReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActPasswordActActiveByItemReq_descriptor_,
      TActPasswordActActiveByItemReq::default_instance_,
      TActPasswordActActiveByItemReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActActiveByItemReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActActiveByItemReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActPasswordActActiveByItemReq));
  TActPasswordActActiveByItemRsp_descriptor_ = file->message_type(6);
  static const int TActPasswordActActiveByItemRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActActiveByItemRsp, arrid_),
  };
  TActPasswordActActiveByItemRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActPasswordActActiveByItemRsp_descriptor_,
      TActPasswordActActiveByItemRsp::default_instance_,
      TActPasswordActActiveByItemRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActActiveByItemRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActActiveByItemRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActPasswordActActiveByItemRsp));
  TActPasswordActNotify_descriptor_ = file->message_type(7);
  static const int TActPasswordActNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActNotify, arrmid_),
  };
  TActPasswordActNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActPasswordActNotify_descriptor_,
      TActPasswordActNotify::default_instance_,
      TActPasswordActNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActPasswordActNotify));
  TActPasswordActReceiveRewardReq_descriptor_ = file->message_type(8);
  static const int TActPasswordActReceiveRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActReceiveRewardReq, id_),
  };
  TActPasswordActReceiveRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActPasswordActReceiveRewardReq_descriptor_,
      TActPasswordActReceiveRewardReq::default_instance_,
      TActPasswordActReceiveRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActReceiveRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActPasswordActReceiveRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActPasswordActReceiveRewardReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActPasswordAct_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActPasswordActGetInfoRsp_descriptor_, &TActPasswordActGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActPasswordActEnterRsp_descriptor_, &TActPasswordActEnterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActPasswordActActiveReq_descriptor_, &TActPasswordActActiveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActPasswordActActiveRsp_descriptor_, &TActPasswordActActiveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActPasswordActActiveByItemItemInfo_descriptor_, &TActPasswordActActiveByItemItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActPasswordActActiveByItemReq_descriptor_, &TActPasswordActActiveByItemReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActPasswordActActiveByItemRsp_descriptor_, &TActPasswordActActiveByItemRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActPasswordActNotify_descriptor_, &TActPasswordActNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActPasswordActReceiveRewardReq_descriptor_, &TActPasswordActReceiveRewardReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActPasswordAct_2eproto() {
  delete TActPasswordActGetInfoRsp::default_instance_;
  delete TActPasswordActGetInfoRsp_reflection_;
  delete TActPasswordActEnterRsp::default_instance_;
  delete TActPasswordActEnterRsp_reflection_;
  delete TActPasswordActActiveReq::default_instance_;
  delete TActPasswordActActiveReq_reflection_;
  delete TActPasswordActActiveRsp::default_instance_;
  delete TActPasswordActActiveRsp_reflection_;
  delete TActPasswordActActiveByItemItemInfo::default_instance_;
  delete TActPasswordActActiveByItemItemInfo_reflection_;
  delete TActPasswordActActiveByItemReq::default_instance_;
  delete TActPasswordActActiveByItemReq_reflection_;
  delete TActPasswordActActiveByItemRsp::default_instance_;
  delete TActPasswordActActiveByItemRsp_reflection_;
  delete TActPasswordActNotify::default_instance_;
  delete TActPasswordActNotify_reflection_;
  delete TActPasswordActReceiveRewardReq::default_instance_;
  delete TActPasswordActReceiveRewardReq_reflection_;
}

void protobuf_AddDesc_net_2fActPasswordAct_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030net/ActPasswordAct.proto\022\002pb\"M\n\031TActPa"
    "sswordActGetInfoRsp\022\r\n\005ArrId\030\001 \003(\r\022\016\n\006Ar"
    "rRid\030\002 \003(\r\022\021\n\tArrRandId\030\003 \003(\r\"(\n\027TActPas"
    "swordActEnterRsp\022\r\n\005ArrId\030\001 \003(\r\"*\n\030TActP"
    "asswordActActiveReq\022\016\n\006StrMsg\030\001 \001(\t\"7\n\030T"
    "ActPasswordActActiveRsp\022\017\n\007ErrCode\030\001 \001(\r"
    "\022\n\n\002Id\030\002 \001(\r\"\?\n#TActPasswordActActiveByI"
    "temItemInfo\022\013\n\003Tid\030\001 \001(\r\022\013\n\003Num\030\002 \001(\r\"^\n"
    "\036TActPasswordActActiveByItemReq\022<\n\013ArrIt"
    "emInfo\030\001 \003(\0132\'.pb.TActPasswordActActiveB"
    "yItemItemInfo\"/\n\036TActPasswordActActiveBy"
    "ItemRsp\022\r\n\005ArrId\030\001 \003(\r\"\'\n\025TActPasswordAc"
    "tNotify\022\016\n\006ArrMid\030\001 \003(\r\"-\n\037TActPasswordA"
    "ctReceiveRewardReq\022\n\n\002Id\030\001 \001(\r", 550);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActPasswordAct.proto", &protobuf_RegisterTypes);
  TActPasswordActGetInfoRsp::default_instance_ = new TActPasswordActGetInfoRsp();
  TActPasswordActEnterRsp::default_instance_ = new TActPasswordActEnterRsp();
  TActPasswordActActiveReq::default_instance_ = new TActPasswordActActiveReq();
  TActPasswordActActiveRsp::default_instance_ = new TActPasswordActActiveRsp();
  TActPasswordActActiveByItemItemInfo::default_instance_ = new TActPasswordActActiveByItemItemInfo();
  TActPasswordActActiveByItemReq::default_instance_ = new TActPasswordActActiveByItemReq();
  TActPasswordActActiveByItemRsp::default_instance_ = new TActPasswordActActiveByItemRsp();
  TActPasswordActNotify::default_instance_ = new TActPasswordActNotify();
  TActPasswordActReceiveRewardReq::default_instance_ = new TActPasswordActReceiveRewardReq();
  TActPasswordActGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TActPasswordActEnterRsp::default_instance_->InitAsDefaultInstance();
  TActPasswordActActiveReq::default_instance_->InitAsDefaultInstance();
  TActPasswordActActiveRsp::default_instance_->InitAsDefaultInstance();
  TActPasswordActActiveByItemItemInfo::default_instance_->InitAsDefaultInstance();
  TActPasswordActActiveByItemReq::default_instance_->InitAsDefaultInstance();
  TActPasswordActActiveByItemRsp::default_instance_->InitAsDefaultInstance();
  TActPasswordActNotify::default_instance_->InitAsDefaultInstance();
  TActPasswordActReceiveRewardReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActPasswordAct_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActPasswordAct_2eproto {
  StaticDescriptorInitializer_net_2fActPasswordAct_2eproto() {
    protobuf_AddDesc_net_2fActPasswordAct_2eproto();
  }
} static_descriptor_initializer_net_2fActPasswordAct_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TActPasswordActGetInfoRsp::kArrIdFieldNumber;
const int TActPasswordActGetInfoRsp::kArrRidFieldNumber;
const int TActPasswordActGetInfoRsp::kArrRandIdFieldNumber;
#endif  // !_MSC_VER

TActPasswordActGetInfoRsp::TActPasswordActGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActPasswordActGetInfoRsp)
}

void TActPasswordActGetInfoRsp::InitAsDefaultInstance() {
}

TActPasswordActGetInfoRsp::TActPasswordActGetInfoRsp(const TActPasswordActGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActPasswordActGetInfoRsp)
}

void TActPasswordActGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActPasswordActGetInfoRsp::~TActPasswordActGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActPasswordActGetInfoRsp)
  SharedDtor();
}

void TActPasswordActGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActPasswordActGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActPasswordActGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActPasswordActGetInfoRsp_descriptor_;
}

const TActPasswordActGetInfoRsp& TActPasswordActGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActPasswordAct_2eproto();
  return *default_instance_;
}

TActPasswordActGetInfoRsp* TActPasswordActGetInfoRsp::default_instance_ = NULL;

TActPasswordActGetInfoRsp* TActPasswordActGetInfoRsp::New() const {
  return new TActPasswordActGetInfoRsp;
}

void TActPasswordActGetInfoRsp::Clear() {
  arrid_.Clear();
  arrrid_.Clear();
  arrrandid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActPasswordActGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActPasswordActGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ArrId = 1;
      case 1: {
        if (tag == 8) {
         parse_ArrId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_arrid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_arrid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_ArrId;
        if (input->ExpectTag(16)) goto parse_ArrRid;
        break;
      }

      // repeated uint32 ArrRid = 2;
      case 2: {
        if (tag == 16) {
         parse_ArrRid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_arrrid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_arrrid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ArrRid;
        if (input->ExpectTag(24)) goto parse_ArrRandId;
        break;
      }

      // repeated uint32 ArrRandId = 3;
      case 3: {
        if (tag == 24) {
         parse_ArrRandId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_arrrandid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_arrrandid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ArrRandId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActPasswordActGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActPasswordActGetInfoRsp)
  return false;
#undef DO_
}

void TActPasswordActGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActPasswordActGetInfoRsp)
  // repeated uint32 ArrId = 1;
  for (int i = 0; i < this->arrid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->arrid(i), output);
  }

  // repeated uint32 ArrRid = 2;
  for (int i = 0; i < this->arrrid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->arrrid(i), output);
  }

  // repeated uint32 ArrRandId = 3;
  for (int i = 0; i < this->arrrandid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->arrrandid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActPasswordActGetInfoRsp)
}

::google::protobuf::uint8* TActPasswordActGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActPasswordActGetInfoRsp)
  // repeated uint32 ArrId = 1;
  for (int i = 0; i < this->arrid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->arrid(i), target);
  }

  // repeated uint32 ArrRid = 2;
  for (int i = 0; i < this->arrrid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->arrrid(i), target);
  }

  // repeated uint32 ArrRandId = 3;
  for (int i = 0; i < this->arrrandid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->arrrandid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActPasswordActGetInfoRsp)
  return target;
}

int TActPasswordActGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 ArrId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->arrid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->arrid(i));
    }
    total_size += 1 * this->arrid_size() + data_size;
  }

  // repeated uint32 ArrRid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->arrrid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->arrrid(i));
    }
    total_size += 1 * this->arrrid_size() + data_size;
  }

  // repeated uint32 ArrRandId = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->arrrandid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->arrrandid(i));
    }
    total_size += 1 * this->arrrandid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActPasswordActGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActPasswordActGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActPasswordActGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActPasswordActGetInfoRsp::MergeFrom(const TActPasswordActGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrid_.MergeFrom(from.arrid_);
  arrrid_.MergeFrom(from.arrrid_);
  arrrandid_.MergeFrom(from.arrrandid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActPasswordActGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActPasswordActGetInfoRsp::CopyFrom(const TActPasswordActGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActPasswordActGetInfoRsp::IsInitialized() const {

  return true;
}

void TActPasswordActGetInfoRsp::Swap(TActPasswordActGetInfoRsp* other) {
  if (other != this) {
    arrid_.Swap(&other->arrid_);
    arrrid_.Swap(&other->arrrid_);
    arrrandid_.Swap(&other->arrrandid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActPasswordActGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActPasswordActGetInfoRsp_descriptor_;
  metadata.reflection = TActPasswordActGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActPasswordActEnterRsp::kArrIdFieldNumber;
#endif  // !_MSC_VER

TActPasswordActEnterRsp::TActPasswordActEnterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActPasswordActEnterRsp)
}

void TActPasswordActEnterRsp::InitAsDefaultInstance() {
}

TActPasswordActEnterRsp::TActPasswordActEnterRsp(const TActPasswordActEnterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActPasswordActEnterRsp)
}

void TActPasswordActEnterRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActPasswordActEnterRsp::~TActPasswordActEnterRsp() {
  // @@protoc_insertion_point(destructor:pb.TActPasswordActEnterRsp)
  SharedDtor();
}

void TActPasswordActEnterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActPasswordActEnterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActPasswordActEnterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActPasswordActEnterRsp_descriptor_;
}

const TActPasswordActEnterRsp& TActPasswordActEnterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActPasswordAct_2eproto();
  return *default_instance_;
}

TActPasswordActEnterRsp* TActPasswordActEnterRsp::default_instance_ = NULL;

TActPasswordActEnterRsp* TActPasswordActEnterRsp::New() const {
  return new TActPasswordActEnterRsp;
}

void TActPasswordActEnterRsp::Clear() {
  arrid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActPasswordActEnterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActPasswordActEnterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ArrId = 1;
      case 1: {
        if (tag == 8) {
         parse_ArrId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_arrid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_arrid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_ArrId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActPasswordActEnterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActPasswordActEnterRsp)
  return false;
#undef DO_
}

void TActPasswordActEnterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActPasswordActEnterRsp)
  // repeated uint32 ArrId = 1;
  for (int i = 0; i < this->arrid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->arrid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActPasswordActEnterRsp)
}

::google::protobuf::uint8* TActPasswordActEnterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActPasswordActEnterRsp)
  // repeated uint32 ArrId = 1;
  for (int i = 0; i < this->arrid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->arrid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActPasswordActEnterRsp)
  return target;
}

int TActPasswordActEnterRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 ArrId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->arrid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->arrid(i));
    }
    total_size += 1 * this->arrid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActPasswordActEnterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActPasswordActEnterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActPasswordActEnterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActPasswordActEnterRsp::MergeFrom(const TActPasswordActEnterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrid_.MergeFrom(from.arrid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActPasswordActEnterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActPasswordActEnterRsp::CopyFrom(const TActPasswordActEnterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActPasswordActEnterRsp::IsInitialized() const {

  return true;
}

void TActPasswordActEnterRsp::Swap(TActPasswordActEnterRsp* other) {
  if (other != this) {
    arrid_.Swap(&other->arrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActPasswordActEnterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActPasswordActEnterRsp_descriptor_;
  metadata.reflection = TActPasswordActEnterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActPasswordActActiveReq::kStrMsgFieldNumber;
#endif  // !_MSC_VER

TActPasswordActActiveReq::TActPasswordActActiveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActPasswordActActiveReq)
}

void TActPasswordActActiveReq::InitAsDefaultInstance() {
}

TActPasswordActActiveReq::TActPasswordActActiveReq(const TActPasswordActActiveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActPasswordActActiveReq)
}

void TActPasswordActActiveReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  strmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActPasswordActActiveReq::~TActPasswordActActiveReq() {
  // @@protoc_insertion_point(destructor:pb.TActPasswordActActiveReq)
  SharedDtor();
}

void TActPasswordActActiveReq::SharedDtor() {
  if (strmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strmsg_;
  }
  if (this != default_instance_) {
  }
}

void TActPasswordActActiveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActPasswordActActiveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActPasswordActActiveReq_descriptor_;
}

const TActPasswordActActiveReq& TActPasswordActActiveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActPasswordAct_2eproto();
  return *default_instance_;
}

TActPasswordActActiveReq* TActPasswordActActiveReq::default_instance_ = NULL;

TActPasswordActActiveReq* TActPasswordActActiveReq::New() const {
  return new TActPasswordActActiveReq;
}

void TActPasswordActActiveReq::Clear() {
  if (has_strmsg()) {
    if (strmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      strmsg_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActPasswordActActiveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActPasswordActActiveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string StrMsg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strmsg().data(), this->strmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "strmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActPasswordActActiveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActPasswordActActiveReq)
  return false;
#undef DO_
}

void TActPasswordActActiveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActPasswordActActiveReq)
  // optional string StrMsg = 1;
  if (has_strmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strmsg().data(), this->strmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActPasswordActActiveReq)
}

::google::protobuf::uint8* TActPasswordActActiveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActPasswordActActiveReq)
  // optional string StrMsg = 1;
  if (has_strmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strmsg().data(), this->strmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActPasswordActActiveReq)
  return target;
}

int TActPasswordActActiveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string StrMsg = 1;
    if (has_strmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActPasswordActActiveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActPasswordActActiveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActPasswordActActiveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActPasswordActActiveReq::MergeFrom(const TActPasswordActActiveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strmsg()) {
      set_strmsg(from.strmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActPasswordActActiveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActPasswordActActiveReq::CopyFrom(const TActPasswordActActiveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActPasswordActActiveReq::IsInitialized() const {

  return true;
}

void TActPasswordActActiveReq::Swap(TActPasswordActActiveReq* other) {
  if (other != this) {
    std::swap(strmsg_, other->strmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActPasswordActActiveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActPasswordActActiveReq_descriptor_;
  metadata.reflection = TActPasswordActActiveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActPasswordActActiveRsp::kErrCodeFieldNumber;
const int TActPasswordActActiveRsp::kIdFieldNumber;
#endif  // !_MSC_VER

TActPasswordActActiveRsp::TActPasswordActActiveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActPasswordActActiveRsp)
}

void TActPasswordActActiveRsp::InitAsDefaultInstance() {
}

TActPasswordActActiveRsp::TActPasswordActActiveRsp(const TActPasswordActActiveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActPasswordActActiveRsp)
}

void TActPasswordActActiveRsp::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActPasswordActActiveRsp::~TActPasswordActActiveRsp() {
  // @@protoc_insertion_point(destructor:pb.TActPasswordActActiveRsp)
  SharedDtor();
}

void TActPasswordActActiveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActPasswordActActiveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActPasswordActActiveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActPasswordActActiveRsp_descriptor_;
}

const TActPasswordActActiveRsp& TActPasswordActActiveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActPasswordAct_2eproto();
  return *default_instance_;
}

TActPasswordActActiveRsp* TActPasswordActActiveRsp::default_instance_ = NULL;

TActPasswordActActiveRsp* TActPasswordActActiveRsp::New() const {
  return new TActPasswordActActiveRsp;
}

void TActPasswordActActiveRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActPasswordActActiveRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(errcode_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActPasswordActActiveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActPasswordActActiveRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ErrCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Id;
        break;
      }

      // optional uint32 Id = 2;
      case 2: {
        if (tag == 16) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActPasswordActActiveRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActPasswordActActiveRsp)
  return false;
#undef DO_
}

void TActPasswordActActiveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActPasswordActActiveRsp)
  // optional uint32 ErrCode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errcode(), output);
  }

  // optional uint32 Id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActPasswordActActiveRsp)
}

::google::protobuf::uint8* TActPasswordActActiveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActPasswordActActiveRsp)
  // optional uint32 ErrCode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errcode(), target);
  }

  // optional uint32 Id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActPasswordActActiveRsp)
  return target;
}

int TActPasswordActActiveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ErrCode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }

    // optional uint32 Id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActPasswordActActiveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActPasswordActActiveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActPasswordActActiveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActPasswordActActiveRsp::MergeFrom(const TActPasswordActActiveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActPasswordActActiveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActPasswordActActiveRsp::CopyFrom(const TActPasswordActActiveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActPasswordActActiveRsp::IsInitialized() const {

  return true;
}

void TActPasswordActActiveRsp::Swap(TActPasswordActActiveRsp* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActPasswordActActiveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActPasswordActActiveRsp_descriptor_;
  metadata.reflection = TActPasswordActActiveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActPasswordActActiveByItemItemInfo::kTidFieldNumber;
const int TActPasswordActActiveByItemItemInfo::kNumFieldNumber;
#endif  // !_MSC_VER

TActPasswordActActiveByItemItemInfo::TActPasswordActActiveByItemItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActPasswordActActiveByItemItemInfo)
}

void TActPasswordActActiveByItemItemInfo::InitAsDefaultInstance() {
}

TActPasswordActActiveByItemItemInfo::TActPasswordActActiveByItemItemInfo(const TActPasswordActActiveByItemItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActPasswordActActiveByItemItemInfo)
}

void TActPasswordActActiveByItemItemInfo::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActPasswordActActiveByItemItemInfo::~TActPasswordActActiveByItemItemInfo() {
  // @@protoc_insertion_point(destructor:pb.TActPasswordActActiveByItemItemInfo)
  SharedDtor();
}

void TActPasswordActActiveByItemItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActPasswordActActiveByItemItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActPasswordActActiveByItemItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActPasswordActActiveByItemItemInfo_descriptor_;
}

const TActPasswordActActiveByItemItemInfo& TActPasswordActActiveByItemItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActPasswordAct_2eproto();
  return *default_instance_;
}

TActPasswordActActiveByItemItemInfo* TActPasswordActActiveByItemItemInfo::default_instance_ = NULL;

TActPasswordActActiveByItemItemInfo* TActPasswordActActiveByItemItemInfo::New() const {
  return new TActPasswordActActiveByItemItemInfo;
}

void TActPasswordActActiveByItemItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActPasswordActActiveByItemItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActPasswordActActiveByItemItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActPasswordActActiveByItemItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActPasswordActActiveByItemItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActPasswordActActiveByItemItemInfo)
  return false;
#undef DO_
}

void TActPasswordActActiveByItemItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActPasswordActActiveByItemItemInfo)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tid(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActPasswordActActiveByItemItemInfo)
}

::google::protobuf::uint8* TActPasswordActActiveByItemItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActPasswordActActiveByItemItemInfo)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tid(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActPasswordActActiveByItemItemInfo)
  return target;
}

int TActPasswordActActiveByItemItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActPasswordActActiveByItemItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActPasswordActActiveByItemItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActPasswordActActiveByItemItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActPasswordActActiveByItemItemInfo::MergeFrom(const TActPasswordActActiveByItemItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActPasswordActActiveByItemItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActPasswordActActiveByItemItemInfo::CopyFrom(const TActPasswordActActiveByItemItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActPasswordActActiveByItemItemInfo::IsInitialized() const {

  return true;
}

void TActPasswordActActiveByItemItemInfo::Swap(TActPasswordActActiveByItemItemInfo* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActPasswordActActiveByItemItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActPasswordActActiveByItemItemInfo_descriptor_;
  metadata.reflection = TActPasswordActActiveByItemItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActPasswordActActiveByItemReq::kArrItemInfoFieldNumber;
#endif  // !_MSC_VER

TActPasswordActActiveByItemReq::TActPasswordActActiveByItemReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActPasswordActActiveByItemReq)
}

void TActPasswordActActiveByItemReq::InitAsDefaultInstance() {
}

TActPasswordActActiveByItemReq::TActPasswordActActiveByItemReq(const TActPasswordActActiveByItemReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActPasswordActActiveByItemReq)
}

void TActPasswordActActiveByItemReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActPasswordActActiveByItemReq::~TActPasswordActActiveByItemReq() {
  // @@protoc_insertion_point(destructor:pb.TActPasswordActActiveByItemReq)
  SharedDtor();
}

void TActPasswordActActiveByItemReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActPasswordActActiveByItemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActPasswordActActiveByItemReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActPasswordActActiveByItemReq_descriptor_;
}

const TActPasswordActActiveByItemReq& TActPasswordActActiveByItemReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActPasswordAct_2eproto();
  return *default_instance_;
}

TActPasswordActActiveByItemReq* TActPasswordActActiveByItemReq::default_instance_ = NULL;

TActPasswordActActiveByItemReq* TActPasswordActActiveByItemReq::New() const {
  return new TActPasswordActActiveByItemReq;
}

void TActPasswordActActiveByItemReq::Clear() {
  arriteminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActPasswordActActiveByItemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActPasswordActActiveByItemReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActPasswordActActiveByItemItemInfo ArrItemInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrItemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arriteminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrItemInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActPasswordActActiveByItemReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActPasswordActActiveByItemReq)
  return false;
#undef DO_
}

void TActPasswordActActiveByItemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActPasswordActActiveByItemReq)
  // repeated .pb.TActPasswordActActiveByItemItemInfo ArrItemInfo = 1;
  for (int i = 0; i < this->arriteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arriteminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActPasswordActActiveByItemReq)
}

::google::protobuf::uint8* TActPasswordActActiveByItemReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActPasswordActActiveByItemReq)
  // repeated .pb.TActPasswordActActiveByItemItemInfo ArrItemInfo = 1;
  for (int i = 0; i < this->arriteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arriteminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActPasswordActActiveByItemReq)
  return target;
}

int TActPasswordActActiveByItemReq::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActPasswordActActiveByItemItemInfo ArrItemInfo = 1;
  total_size += 1 * this->arriteminfo_size();
  for (int i = 0; i < this->arriteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arriteminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActPasswordActActiveByItemReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActPasswordActActiveByItemReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActPasswordActActiveByItemReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActPasswordActActiveByItemReq::MergeFrom(const TActPasswordActActiveByItemReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  arriteminfo_.MergeFrom(from.arriteminfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActPasswordActActiveByItemReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActPasswordActActiveByItemReq::CopyFrom(const TActPasswordActActiveByItemReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActPasswordActActiveByItemReq::IsInitialized() const {

  return true;
}

void TActPasswordActActiveByItemReq::Swap(TActPasswordActActiveByItemReq* other) {
  if (other != this) {
    arriteminfo_.Swap(&other->arriteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActPasswordActActiveByItemReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActPasswordActActiveByItemReq_descriptor_;
  metadata.reflection = TActPasswordActActiveByItemReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActPasswordActActiveByItemRsp::kArrIdFieldNumber;
#endif  // !_MSC_VER

TActPasswordActActiveByItemRsp::TActPasswordActActiveByItemRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActPasswordActActiveByItemRsp)
}

void TActPasswordActActiveByItemRsp::InitAsDefaultInstance() {
}

TActPasswordActActiveByItemRsp::TActPasswordActActiveByItemRsp(const TActPasswordActActiveByItemRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActPasswordActActiveByItemRsp)
}

void TActPasswordActActiveByItemRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActPasswordActActiveByItemRsp::~TActPasswordActActiveByItemRsp() {
  // @@protoc_insertion_point(destructor:pb.TActPasswordActActiveByItemRsp)
  SharedDtor();
}

void TActPasswordActActiveByItemRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActPasswordActActiveByItemRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActPasswordActActiveByItemRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActPasswordActActiveByItemRsp_descriptor_;
}

const TActPasswordActActiveByItemRsp& TActPasswordActActiveByItemRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActPasswordAct_2eproto();
  return *default_instance_;
}

TActPasswordActActiveByItemRsp* TActPasswordActActiveByItemRsp::default_instance_ = NULL;

TActPasswordActActiveByItemRsp* TActPasswordActActiveByItemRsp::New() const {
  return new TActPasswordActActiveByItemRsp;
}

void TActPasswordActActiveByItemRsp::Clear() {
  arrid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActPasswordActActiveByItemRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActPasswordActActiveByItemRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ArrId = 1;
      case 1: {
        if (tag == 8) {
         parse_ArrId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_arrid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_arrid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_ArrId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActPasswordActActiveByItemRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActPasswordActActiveByItemRsp)
  return false;
#undef DO_
}

void TActPasswordActActiveByItemRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActPasswordActActiveByItemRsp)
  // repeated uint32 ArrId = 1;
  for (int i = 0; i < this->arrid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->arrid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActPasswordActActiveByItemRsp)
}

::google::protobuf::uint8* TActPasswordActActiveByItemRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActPasswordActActiveByItemRsp)
  // repeated uint32 ArrId = 1;
  for (int i = 0; i < this->arrid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->arrid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActPasswordActActiveByItemRsp)
  return target;
}

int TActPasswordActActiveByItemRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 ArrId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->arrid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->arrid(i));
    }
    total_size += 1 * this->arrid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActPasswordActActiveByItemRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActPasswordActActiveByItemRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActPasswordActActiveByItemRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActPasswordActActiveByItemRsp::MergeFrom(const TActPasswordActActiveByItemRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrid_.MergeFrom(from.arrid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActPasswordActActiveByItemRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActPasswordActActiveByItemRsp::CopyFrom(const TActPasswordActActiveByItemRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActPasswordActActiveByItemRsp::IsInitialized() const {

  return true;
}

void TActPasswordActActiveByItemRsp::Swap(TActPasswordActActiveByItemRsp* other) {
  if (other != this) {
    arrid_.Swap(&other->arrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActPasswordActActiveByItemRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActPasswordActActiveByItemRsp_descriptor_;
  metadata.reflection = TActPasswordActActiveByItemRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActPasswordActNotify::kArrMidFieldNumber;
#endif  // !_MSC_VER

TActPasswordActNotify::TActPasswordActNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActPasswordActNotify)
}

void TActPasswordActNotify::InitAsDefaultInstance() {
}

TActPasswordActNotify::TActPasswordActNotify(const TActPasswordActNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActPasswordActNotify)
}

void TActPasswordActNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActPasswordActNotify::~TActPasswordActNotify() {
  // @@protoc_insertion_point(destructor:pb.TActPasswordActNotify)
  SharedDtor();
}

void TActPasswordActNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActPasswordActNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActPasswordActNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActPasswordActNotify_descriptor_;
}

const TActPasswordActNotify& TActPasswordActNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActPasswordAct_2eproto();
  return *default_instance_;
}

TActPasswordActNotify* TActPasswordActNotify::default_instance_ = NULL;

TActPasswordActNotify* TActPasswordActNotify::New() const {
  return new TActPasswordActNotify;
}

void TActPasswordActNotify::Clear() {
  arrmid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActPasswordActNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActPasswordActNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ArrMid = 1;
      case 1: {
        if (tag == 8) {
         parse_ArrMid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_arrmid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_arrmid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_ArrMid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActPasswordActNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActPasswordActNotify)
  return false;
#undef DO_
}

void TActPasswordActNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActPasswordActNotify)
  // repeated uint32 ArrMid = 1;
  for (int i = 0; i < this->arrmid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->arrmid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActPasswordActNotify)
}

::google::protobuf::uint8* TActPasswordActNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActPasswordActNotify)
  // repeated uint32 ArrMid = 1;
  for (int i = 0; i < this->arrmid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->arrmid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActPasswordActNotify)
  return target;
}

int TActPasswordActNotify::ByteSize() const {
  int total_size = 0;

  // repeated uint32 ArrMid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->arrmid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->arrmid(i));
    }
    total_size += 1 * this->arrmid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActPasswordActNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActPasswordActNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActPasswordActNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActPasswordActNotify::MergeFrom(const TActPasswordActNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrmid_.MergeFrom(from.arrmid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActPasswordActNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActPasswordActNotify::CopyFrom(const TActPasswordActNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActPasswordActNotify::IsInitialized() const {

  return true;
}

void TActPasswordActNotify::Swap(TActPasswordActNotify* other) {
  if (other != this) {
    arrmid_.Swap(&other->arrmid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActPasswordActNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActPasswordActNotify_descriptor_;
  metadata.reflection = TActPasswordActNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActPasswordActReceiveRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

TActPasswordActReceiveRewardReq::TActPasswordActReceiveRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActPasswordActReceiveRewardReq)
}

void TActPasswordActReceiveRewardReq::InitAsDefaultInstance() {
}

TActPasswordActReceiveRewardReq::TActPasswordActReceiveRewardReq(const TActPasswordActReceiveRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActPasswordActReceiveRewardReq)
}

void TActPasswordActReceiveRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActPasswordActReceiveRewardReq::~TActPasswordActReceiveRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TActPasswordActReceiveRewardReq)
  SharedDtor();
}

void TActPasswordActReceiveRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActPasswordActReceiveRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActPasswordActReceiveRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActPasswordActReceiveRewardReq_descriptor_;
}

const TActPasswordActReceiveRewardReq& TActPasswordActReceiveRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActPasswordAct_2eproto();
  return *default_instance_;
}

TActPasswordActReceiveRewardReq* TActPasswordActReceiveRewardReq::default_instance_ = NULL;

TActPasswordActReceiveRewardReq* TActPasswordActReceiveRewardReq::New() const {
  return new TActPasswordActReceiveRewardReq;
}

void TActPasswordActReceiveRewardReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActPasswordActReceiveRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActPasswordActReceiveRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActPasswordActReceiveRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActPasswordActReceiveRewardReq)
  return false;
#undef DO_
}

void TActPasswordActReceiveRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActPasswordActReceiveRewardReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActPasswordActReceiveRewardReq)
}

::google::protobuf::uint8* TActPasswordActReceiveRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActPasswordActReceiveRewardReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActPasswordActReceiveRewardReq)
  return target;
}

int TActPasswordActReceiveRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActPasswordActReceiveRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActPasswordActReceiveRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActPasswordActReceiveRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActPasswordActReceiveRewardReq::MergeFrom(const TActPasswordActReceiveRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActPasswordActReceiveRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActPasswordActReceiveRewardReq::CopyFrom(const TActPasswordActReceiveRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActPasswordActReceiveRewardReq::IsInitialized() const {

  return true;
}

void TActPasswordActReceiveRewardReq::Swap(TActPasswordActReceiveRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActPasswordActReceiveRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActPasswordActReceiveRewardReq_descriptor_;
  metadata.reflection = TActPasswordActReceiveRewardReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
