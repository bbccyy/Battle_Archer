// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CrossLevy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/CrossLevy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TCrossLevyCityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyCityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyUserRecordViewInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyUserRecordViewInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevySelfRecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevySelfRecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyRecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyRecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyBossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyMyCampInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyMyCampInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyCampInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyCampInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyMonsterHpInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyMonsterHpInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyMonsterArmyHpInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyMonsterArmyHpInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyMonsterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyMonsterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyHidPosInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyHidPosInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyFormationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyFormationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyEnemyFormation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyEnemyFormation_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyGuildUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGuildUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyEnemyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyEnemyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyEnemyCampInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyEnemyCampInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyGetServerTeamInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGetServerTeamInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyEnterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyEnterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyGetUserInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGetUserInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyGetCityInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGetCityInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyGetCityInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGetCityInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyMoveToEmptyCampReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyMoveToEmptyCampReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevySetDefFormationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevySetDefFormationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevySetAtkFormationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevySetAtkFormationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyGetEnemyFormationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGetEnemyFormationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyGetEnemyFormationRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGetEnemyFormationRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyForceCollectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyForceCollectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyForceCollectRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyForceCollectRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyPlunderReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyPlunderReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyPlunderRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyPlunderRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyExpelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyExpelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyExpelRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyExpelRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyForceMoveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyForceMoveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyForceMoveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyForceMoveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyGetBattleArgsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGetBattleArgsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyGetBattleArgsRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGetBattleArgsRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyReportBattleBossReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyReportBattleBossReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyReportBattleBossRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyReportBattleBossRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyReportBattleMonsterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyReportBattleMonsterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyReportBattleMonsterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyReportBattleMonsterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyGetSelfRecordInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGetSelfRecordInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyGetRecordResultInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGetRecordResultInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyGetRecordResultInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGetRecordResultInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyReceiveScoreRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyReceiveScoreRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyReceiveScoreRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyReceiveScoreRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyGetGuildUserListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGetGuildUserListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyReceiveSettleRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyReceiveSettleRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyReceiveSettleRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyReceiveSettleRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyBuyChallengeNumReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyBuyChallengeNumReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyGetEnemyListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGetEnemyListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyRemoveEnemyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyRemoveEnemyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyGetEnemyCampListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGetEnemyCampListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyGetEnemyCampListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGetEnemyCampListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyUserBeMovedNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyUserBeMovedNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyCityUserNumInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyCityUserNumInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyCityUserNumNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyCityUserNumNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyCityCampNumInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyCityCampNumInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyCityCampNumNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyCityCampNumNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyBossBeKilledNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyBossBeKilledNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyRecordNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyRecordNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ECrossLevyRecordType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fCrossLevy_2eproto() {
  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/CrossLevy.proto");
  GOOGLE_CHECK(file != NULL);
  TCrossLevyCityInfo_descriptor_ = file->message_type(0);
  static const int TCrossLevyCityInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCityInfo, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCityInfo, campnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCityInfo, usernum_),
  };
  TCrossLevyCityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyCityInfo_descriptor_,
      TCrossLevyCityInfo::default_instance_,
      TCrossLevyCityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyCityInfo));
  TCrossLevyUserRecordViewInfo_descriptor_ = file->message_type(1);
  static const int TCrossLevyUserRecordViewInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyUserRecordViewInfo, recordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyUserRecordViewInfo, isatkwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyUserRecordViewInfo, atkarmyarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyUserRecordViewInfo, defarmyarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyUserRecordViewInfo, atkfightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyUserRecordViewInfo, deffightforce_),
  };
  TCrossLevyUserRecordViewInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyUserRecordViewInfo_descriptor_,
      TCrossLevyUserRecordViewInfo::default_instance_,
      TCrossLevyUserRecordViewInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyUserRecordViewInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyUserRecordViewInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyUserRecordViewInfo));
  TCrossLevySelfRecordInfo_descriptor_ = file->message_type(2);
  static const int TCrossLevySelfRecordInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevySelfRecordInfo, recordresultid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevySelfRecordInfo, recordtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevySelfRecordInfo, recordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevySelfRecordInfo, atkuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevySelfRecordInfo, defuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevySelfRecordInfo, isatkwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevySelfRecordInfo, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevySelfRecordInfo, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevySelfRecordInfo, targetcityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevySelfRecordInfo, targetcampid_),
  };
  TCrossLevySelfRecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevySelfRecordInfo_descriptor_,
      TCrossLevySelfRecordInfo::default_instance_,
      TCrossLevySelfRecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevySelfRecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevySelfRecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevySelfRecordInfo));
  TCrossLevyRecordInfo_descriptor_ = file->message_type(3);
  static const int TCrossLevyRecordInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyRecordInfo, recordresultid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyRecordInfo, recordtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyRecordInfo, recordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyRecordInfo, atkuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyRecordInfo, defuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyRecordInfo, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyRecordInfo, isatkwin_),
  };
  TCrossLevyRecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyRecordInfo_descriptor_,
      TCrossLevyRecordInfo::default_instance_,
      TCrossLevyRecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyRecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyRecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyRecordInfo));
  TCrossLevyBossInfo_descriptor_ = file->message_type(4);
  static const int TCrossLevyBossInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyBossInfo, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyBossInfo, refreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyBossInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyBossInfo, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyBossInfo, fightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyBossInfo, pos_),
  };
  TCrossLevyBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyBossInfo_descriptor_,
      TCrossLevyBossInfo::default_instance_,
      TCrossLevyBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyBossInfo));
  TCrossLevyMyCampInfo_descriptor_ = file->message_type(5);
  static const int TCrossLevyMyCampInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMyCampInfo, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMyCampInfo, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMyCampInfo, settletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMyCampInfo, settlenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMyCampInfo, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMyCampInfo, extrarewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMyCampInfo, beplunderednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMyCampInfo, settlescore_),
  };
  TCrossLevyMyCampInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyMyCampInfo_descriptor_,
      TCrossLevyMyCampInfo::default_instance_,
      TCrossLevyMyCampInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMyCampInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMyCampInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyMyCampInfo));
  TCrossLevyCampInfo_descriptor_ = file->message_type(6);
  static const int TCrossLevyCampInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCampInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCampInfo, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCampInfo, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCampInfo, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCampInfo, beplunderednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCampInfo, settlenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCampInfo, lastbeattackedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCampInfo, lastbeplunderedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCampInfo, isenemy_),
  };
  TCrossLevyCampInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyCampInfo_descriptor_,
      TCrossLevyCampInfo::default_instance_,
      TCrossLevyCampInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCampInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCampInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyCampInfo));
  TCrossLevyMonsterHpInfo_descriptor_ = file->message_type(7);
  static const int TCrossLevyMonsterHpInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMonsterHpInfo, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMonsterHpInfo, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMonsterHpInfo, maxhp_),
  };
  TCrossLevyMonsterHpInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyMonsterHpInfo_descriptor_,
      TCrossLevyMonsterHpInfo::default_instance_,
      TCrossLevyMonsterHpInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMonsterHpInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMonsterHpInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyMonsterHpInfo));
  TCrossLevyMonsterArmyHpInfo_descriptor_ = file->message_type(8);
  static const int TCrossLevyMonsterArmyHpInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMonsterArmyHpInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMonsterArmyHpInfo, monsterhpinfoarr_),
  };
  TCrossLevyMonsterArmyHpInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyMonsterArmyHpInfo_descriptor_,
      TCrossLevyMonsterArmyHpInfo::default_instance_,
      TCrossLevyMonsterArmyHpInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMonsterArmyHpInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMonsterArmyHpInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyMonsterArmyHpInfo));
  TCrossLevyMonsterInfo_descriptor_ = file->message_type(9);
  static const int TCrossLevyMonsterInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMonsterInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMonsterInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMonsterInfo, monsterarmyhpinfoarr_),
  };
  TCrossLevyMonsterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyMonsterInfo_descriptor_,
      TCrossLevyMonsterInfo::default_instance_,
      TCrossLevyMonsterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMonsterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMonsterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyMonsterInfo));
  TCrossLevyHidPosInfo_descriptor_ = file->message_type(10);
  static const int TCrossLevyHidPosInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyHidPosInfo, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyHidPosInfo, pos_),
  };
  TCrossLevyHidPosInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyHidPosInfo_descriptor_,
      TCrossLevyHidPosInfo::default_instance_,
      TCrossLevyHidPosInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyHidPosInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyHidPosInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyHidPosInfo));
  TCrossLevyFormationInfo_descriptor_ = file->message_type(11);
  static const int TCrossLevyFormationInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyFormationInfo, formationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyFormationInfo, hidposarr_),
  };
  TCrossLevyFormationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyFormationInfo_descriptor_,
      TCrossLevyFormationInfo::default_instance_,
      TCrossLevyFormationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyFormationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyFormationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyFormationInfo));
  TCrossLevyEnemyFormation_descriptor_ = file->message_type(12);
  static const int TCrossLevyEnemyFormation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnemyFormation, formationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnemyFormation, unitarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnemyFormation, fightforce_),
  };
  TCrossLevyEnemyFormation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyEnemyFormation_descriptor_,
      TCrossLevyEnemyFormation::default_instance_,
      TCrossLevyEnemyFormation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnemyFormation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnemyFormation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyEnemyFormation));
  TCrossLevyGuildUserInfo_descriptor_ = file->message_type(13);
  static const int TCrossLevyGuildUserInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGuildUserInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGuildUserInfo, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGuildUserInfo, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGuildUserInfo, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGuildUserInfo, connectnum_),
  };
  TCrossLevyGuildUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGuildUserInfo_descriptor_,
      TCrossLevyGuildUserInfo::default_instance_,
      TCrossLevyGuildUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGuildUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGuildUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGuildUserInfo));
  TCrossLevyEnemyInfo_descriptor_ = file->message_type(14);
  static const int TCrossLevyEnemyInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnemyInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnemyInfo, hatenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnemyInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnemyInfo, userinfo_),
  };
  TCrossLevyEnemyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyEnemyInfo_descriptor_,
      TCrossLevyEnemyInfo::default_instance_,
      TCrossLevyEnemyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnemyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnemyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyEnemyInfo));
  TCrossLevyEnemyCampInfo_descriptor_ = file->message_type(15);
  static const int TCrossLevyEnemyCampInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnemyCampInfo, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnemyCampInfo, campid_),
  };
  TCrossLevyEnemyCampInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyEnemyCampInfo_descriptor_,
      TCrossLevyEnemyCampInfo::default_instance_,
      TCrossLevyEnemyCampInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnemyCampInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnemyCampInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyEnemyCampInfo));
  TCrossLevyGetServerTeamInfoRsp_descriptor_ = file->message_type(16);
  static const int TCrossLevyGetServerTeamInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetServerTeamInfoRsp, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetServerTeamInfoRsp, serverid_),
  };
  TCrossLevyGetServerTeamInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGetServerTeamInfoRsp_descriptor_,
      TCrossLevyGetServerTeamInfoRsp::default_instance_,
      TCrossLevyGetServerTeamInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetServerTeamInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetServerTeamInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGetServerTeamInfoRsp));
  TCrossLevyEnterRsp_descriptor_ = file->message_type(17);
  static const int TCrossLevyEnterRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnterRsp, cityinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnterRsp, recordinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnterRsp, bossinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnterRsp, recordarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnterRsp, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnterRsp, rewardid_),
  };
  TCrossLevyEnterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyEnterRsp_descriptor_,
      TCrossLevyEnterRsp::default_instance_,
      TCrossLevyEnterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyEnterRsp));
  TCrossLevyGetUserInfoRsp_descriptor_ = file->message_type(18);
  static const int TCrossLevyGetUserInfoRsp_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetUserInfoRsp, leftchallengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetUserInfoRsp, buychallengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetUserInfoRsp, forcenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetUserInfoRsp, atkbossnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetUserInfoRsp, plundernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetUserInfoRsp, mycampinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetUserInfoRsp, monsterrfrtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetUserInfoRsp, monsterinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetUserInfoRsp, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetUserInfoRsp, rewardidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetUserInfoRsp, atkfmtarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetUserInfoRsp, deffmtarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetUserInfoRsp, plunderbenefitnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetUserInfoRsp, expelbenefitnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetUserInfoRsp, lastrecovertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetUserInfoRsp, lastatkbosstime_),
  };
  TCrossLevyGetUserInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGetUserInfoRsp_descriptor_,
      TCrossLevyGetUserInfoRsp::default_instance_,
      TCrossLevyGetUserInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetUserInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetUserInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGetUserInfoRsp));
  TCrossLevyGetCityInfoReq_descriptor_ = file->message_type(19);
  static const int TCrossLevyGetCityInfoReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetCityInfoReq, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetCityInfoReq, cityindex_),
  };
  TCrossLevyGetCityInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGetCityInfoReq_descriptor_,
      TCrossLevyGetCityInfoReq::default_instance_,
      TCrossLevyGetCityInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetCityInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetCityInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGetCityInfoReq));
  TCrossLevyGetCityInfoRsp_descriptor_ = file->message_type(20);
  static const int TCrossLevyGetCityInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetCityInfoRsp, campinfoarr_),
  };
  TCrossLevyGetCityInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGetCityInfoRsp_descriptor_,
      TCrossLevyGetCityInfoRsp::default_instance_,
      TCrossLevyGetCityInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetCityInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetCityInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGetCityInfoRsp));
  TCrossLevyMoveToEmptyCampReq_descriptor_ = file->message_type(21);
  static const int TCrossLevyMoveToEmptyCampReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMoveToEmptyCampReq, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMoveToEmptyCampReq, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMoveToEmptyCampReq, oricityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMoveToEmptyCampReq, oricampid_),
  };
  TCrossLevyMoveToEmptyCampReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyMoveToEmptyCampReq_descriptor_,
      TCrossLevyMoveToEmptyCampReq::default_instance_,
      TCrossLevyMoveToEmptyCampReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMoveToEmptyCampReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyMoveToEmptyCampReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyMoveToEmptyCampReq));
  TCrossLevySetDefFormationReq_descriptor_ = file->message_type(22);
  static const int TCrossLevySetDefFormationReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevySetDefFormationReq, formationarr_),
  };
  TCrossLevySetDefFormationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevySetDefFormationReq_descriptor_,
      TCrossLevySetDefFormationReq::default_instance_,
      TCrossLevySetDefFormationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevySetDefFormationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevySetDefFormationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevySetDefFormationReq));
  TCrossLevySetAtkFormationReq_descriptor_ = file->message_type(23);
  static const int TCrossLevySetAtkFormationReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevySetAtkFormationReq, formationarr_),
  };
  TCrossLevySetAtkFormationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevySetAtkFormationReq_descriptor_,
      TCrossLevySetAtkFormationReq::default_instance_,
      TCrossLevySetAtkFormationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevySetAtkFormationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevySetAtkFormationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevySetAtkFormationReq));
  TCrossLevyGetEnemyFormationReq_descriptor_ = file->message_type(24);
  static const int TCrossLevyGetEnemyFormationReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetEnemyFormationReq, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetEnemyFormationReq, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetEnemyFormationReq, enemyuid_),
  };
  TCrossLevyGetEnemyFormationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGetEnemyFormationReq_descriptor_,
      TCrossLevyGetEnemyFormationReq::default_instance_,
      TCrossLevyGetEnemyFormationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetEnemyFormationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetEnemyFormationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGetEnemyFormationReq));
  TCrossLevyGetEnemyFormationRsp_descriptor_ = file->message_type(25);
  static const int TCrossLevyGetEnemyFormationRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetEnemyFormationRsp, enemyformationarr_),
  };
  TCrossLevyGetEnemyFormationRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGetEnemyFormationRsp_descriptor_,
      TCrossLevyGetEnemyFormationRsp::default_instance_,
      TCrossLevyGetEnemyFormationRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetEnemyFormationRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetEnemyFormationRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGetEnemyFormationRsp));
  TCrossLevyForceCollectReq_descriptor_ = file->message_type(26);
  static const int TCrossLevyForceCollectReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyForceCollectReq, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyForceCollectReq, campid_),
  };
  TCrossLevyForceCollectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyForceCollectReq_descriptor_,
      TCrossLevyForceCollectReq::default_instance_,
      TCrossLevyForceCollectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyForceCollectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyForceCollectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyForceCollectReq));
  TCrossLevyForceCollectRsp_descriptor_ = file->message_type(27);
  static const int TCrossLevyForceCollectRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyForceCollectRsp, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyForceCollectRsp, settlescore_),
  };
  TCrossLevyForceCollectRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyForceCollectRsp_descriptor_,
      TCrossLevyForceCollectRsp::default_instance_,
      TCrossLevyForceCollectRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyForceCollectRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyForceCollectRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyForceCollectRsp));
  TCrossLevyPlunderReq_descriptor_ = file->message_type(28);
  static const int TCrossLevyPlunderReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyPlunderReq, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyPlunderReq, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyPlunderReq, enemyuid_),
  };
  TCrossLevyPlunderReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyPlunderReq_descriptor_,
      TCrossLevyPlunderReq::default_instance_,
      TCrossLevyPlunderReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyPlunderReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyPlunderReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyPlunderReq));
  TCrossLevyPlunderRsp_descriptor_ = file->message_type(29);
  static const int TCrossLevyPlunderRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyPlunderRsp, isatkwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyPlunderRsp, atkuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyPlunderRsp, defuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyPlunderRsp, recordarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyPlunderRsp, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyPlunderRsp, rewardscore_),
  };
  TCrossLevyPlunderRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyPlunderRsp_descriptor_,
      TCrossLevyPlunderRsp::default_instance_,
      TCrossLevyPlunderRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyPlunderRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyPlunderRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyPlunderRsp));
  TCrossLevyExpelReq_descriptor_ = file->message_type(30);
  static const int TCrossLevyExpelReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyExpelReq, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyExpelReq, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyExpelReq, enemyuid_),
  };
  TCrossLevyExpelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyExpelReq_descriptor_,
      TCrossLevyExpelReq::default_instance_,
      TCrossLevyExpelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyExpelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyExpelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyExpelReq));
  TCrossLevyExpelRsp_descriptor_ = file->message_type(31);
  static const int TCrossLevyExpelRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyExpelRsp, isatkwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyExpelRsp, atkuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyExpelRsp, defuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyExpelRsp, recordarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyExpelRsp, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyExpelRsp, rewardscore_),
  };
  TCrossLevyExpelRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyExpelRsp_descriptor_,
      TCrossLevyExpelRsp::default_instance_,
      TCrossLevyExpelRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyExpelRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyExpelRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyExpelRsp));
  TCrossLevyForceMoveReq_descriptor_ = file->message_type(32);
  static const int TCrossLevyForceMoveReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyForceMoveReq, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyForceMoveReq, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyForceMoveReq, enemyuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyForceMoveReq, oricityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyForceMoveReq, oricampid_),
  };
  TCrossLevyForceMoveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyForceMoveReq_descriptor_,
      TCrossLevyForceMoveReq::default_instance_,
      TCrossLevyForceMoveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyForceMoveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyForceMoveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyForceMoveReq));
  TCrossLevyForceMoveRsp_descriptor_ = file->message_type(33);
  static const int TCrossLevyForceMoveRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyForceMoveRsp, isatkwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyForceMoveRsp, atkuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyForceMoveRsp, defuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyForceMoveRsp, recordarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyForceMoveRsp, rewardscore_),
  };
  TCrossLevyForceMoveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyForceMoveRsp_descriptor_,
      TCrossLevyForceMoveRsp::default_instance_,
      TCrossLevyForceMoveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyForceMoveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyForceMoveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyForceMoveRsp));
  TCrossLevyGetBattleArgsReq_descriptor_ = file->message_type(34);
  static const int TCrossLevyGetBattleArgsReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetBattleArgsReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetBattleArgsReq, battlecheckparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetBattleArgsReq, refreshtime_),
  };
  TCrossLevyGetBattleArgsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGetBattleArgsReq_descriptor_,
      TCrossLevyGetBattleArgsReq::default_instance_,
      TCrossLevyGetBattleArgsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetBattleArgsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetBattleArgsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGetBattleArgsReq));
  TCrossLevyGetBattleArgsRsp_descriptor_ = file->message_type(35);
  static const int TCrossLevyGetBattleArgsRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetBattleArgsRsp, battleargs_),
  };
  TCrossLevyGetBattleArgsRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGetBattleArgsRsp_descriptor_,
      TCrossLevyGetBattleArgsRsp::default_instance_,
      TCrossLevyGetBattleArgsRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetBattleArgsRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetBattleArgsRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGetBattleArgsRsp));
  TCrossLevyReportBattleBossReq_descriptor_ = file->message_type(36);
  static const int TCrossLevyReportBattleBossReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportBattleBossReq, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportBattleBossReq, refreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportBattleBossReq, battleret_),
  };
  TCrossLevyReportBattleBossReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyReportBattleBossReq_descriptor_,
      TCrossLevyReportBattleBossReq::default_instance_,
      TCrossLevyReportBattleBossReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportBattleBossReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportBattleBossReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyReportBattleBossReq));
  TCrossLevyReportBattleBossRsp_descriptor_ = file->message_type(37);
  static const int TCrossLevyReportBattleBossRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportBattleBossRsp, isfinalstrike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportBattleBossRsp, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportBattleBossRsp, lastatkbosstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportBattleBossRsp, rewardscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportBattleBossRsp, curhp_),
  };
  TCrossLevyReportBattleBossRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyReportBattleBossRsp_descriptor_,
      TCrossLevyReportBattleBossRsp::default_instance_,
      TCrossLevyReportBattleBossRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportBattleBossRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportBattleBossRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyReportBattleBossRsp));
  TCrossLevyReportBattleMonsterReq_descriptor_ = file->message_type(38);
  static const int TCrossLevyReportBattleMonsterReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportBattleMonsterReq, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportBattleMonsterReq, monsterrfrtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportBattleMonsterReq, battleret_),
  };
  TCrossLevyReportBattleMonsterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyReportBattleMonsterReq_descriptor_,
      TCrossLevyReportBattleMonsterReq::default_instance_,
      TCrossLevyReportBattleMonsterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportBattleMonsterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportBattleMonsterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyReportBattleMonsterReq));
  TCrossLevyReportBattleMonsterRsp_descriptor_ = file->message_type(39);
  static const int TCrossLevyReportBattleMonsterRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportBattleMonsterRsp, rewardscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportBattleMonsterRsp, monsterarmyhpinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportBattleMonsterRsp, rewardarr_),
  };
  TCrossLevyReportBattleMonsterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyReportBattleMonsterRsp_descriptor_,
      TCrossLevyReportBattleMonsterRsp::default_instance_,
      TCrossLevyReportBattleMonsterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportBattleMonsterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportBattleMonsterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyReportBattleMonsterRsp));
  TCrossLevyGetSelfRecordInfoRsp_descriptor_ = file->message_type(40);
  static const int TCrossLevyGetSelfRecordInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetSelfRecordInfoRsp, recordarr_),
  };
  TCrossLevyGetSelfRecordInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGetSelfRecordInfoRsp_descriptor_,
      TCrossLevyGetSelfRecordInfoRsp::default_instance_,
      TCrossLevyGetSelfRecordInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetSelfRecordInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetSelfRecordInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGetSelfRecordInfoRsp));
  TCrossLevyGetRecordResultInfoReq_descriptor_ = file->message_type(41);
  static const int TCrossLevyGetRecordResultInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetRecordResultInfoReq, recordresultid_),
  };
  TCrossLevyGetRecordResultInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGetRecordResultInfoReq_descriptor_,
      TCrossLevyGetRecordResultInfoReq::default_instance_,
      TCrossLevyGetRecordResultInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetRecordResultInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetRecordResultInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGetRecordResultInfoReq));
  TCrossLevyGetRecordResultInfoRsp_descriptor_ = file->message_type(42);
  static const int TCrossLevyGetRecordResultInfoRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetRecordResultInfoRsp, isatkwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetRecordResultInfoRsp, atkuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetRecordResultInfoRsp, defuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetRecordResultInfoRsp, recordarr_),
  };
  TCrossLevyGetRecordResultInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGetRecordResultInfoRsp_descriptor_,
      TCrossLevyGetRecordResultInfoRsp::default_instance_,
      TCrossLevyGetRecordResultInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetRecordResultInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetRecordResultInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGetRecordResultInfoRsp));
  TCrossLevyReceiveScoreRewardReq_descriptor_ = file->message_type(43);
  static const int TCrossLevyReceiveScoreRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReceiveScoreRewardReq, id_),
  };
  TCrossLevyReceiveScoreRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyReceiveScoreRewardReq_descriptor_,
      TCrossLevyReceiveScoreRewardReq::default_instance_,
      TCrossLevyReceiveScoreRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReceiveScoreRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReceiveScoreRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyReceiveScoreRewardReq));
  TCrossLevyReceiveScoreRewardRsp_descriptor_ = file->message_type(44);
  static const int TCrossLevyReceiveScoreRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReceiveScoreRewardRsp, rewardarr_),
  };
  TCrossLevyReceiveScoreRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyReceiveScoreRewardRsp_descriptor_,
      TCrossLevyReceiveScoreRewardRsp::default_instance_,
      TCrossLevyReceiveScoreRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReceiveScoreRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReceiveScoreRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyReceiveScoreRewardRsp));
  TCrossLevyGetGuildUserListRsp_descriptor_ = file->message_type(45);
  static const int TCrossLevyGetGuildUserListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetGuildUserListRsp, guilduserarr_),
  };
  TCrossLevyGetGuildUserListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGetGuildUserListRsp_descriptor_,
      TCrossLevyGetGuildUserListRsp::default_instance_,
      TCrossLevyGetGuildUserListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetGuildUserListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetGuildUserListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGetGuildUserListRsp));
  TCrossLevyReceiveSettleRewardReq_descriptor_ = file->message_type(46);
  static const int TCrossLevyReceiveSettleRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReceiveSettleRewardReq, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReceiveSettleRewardReq, campid_),
  };
  TCrossLevyReceiveSettleRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyReceiveSettleRewardReq_descriptor_,
      TCrossLevyReceiveSettleRewardReq::default_instance_,
      TCrossLevyReceiveSettleRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReceiveSettleRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReceiveSettleRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyReceiveSettleRewardReq));
  TCrossLevyReceiveSettleRewardRsp_descriptor_ = file->message_type(47);
  static const int TCrossLevyReceiveSettleRewardRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReceiveSettleRewardRsp, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReceiveSettleRewardRsp, settlescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReceiveSettleRewardRsp, recordarr_),
  };
  TCrossLevyReceiveSettleRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyReceiveSettleRewardRsp_descriptor_,
      TCrossLevyReceiveSettleRewardRsp::default_instance_,
      TCrossLevyReceiveSettleRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReceiveSettleRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReceiveSettleRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyReceiveSettleRewardRsp));
  TCrossLevyBuyChallengeNumReq_descriptor_ = file->message_type(48);
  static const int TCrossLevyBuyChallengeNumReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyBuyChallengeNumReq, num_),
  };
  TCrossLevyBuyChallengeNumReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyBuyChallengeNumReq_descriptor_,
      TCrossLevyBuyChallengeNumReq::default_instance_,
      TCrossLevyBuyChallengeNumReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyBuyChallengeNumReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyBuyChallengeNumReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyBuyChallengeNumReq));
  TCrossLevyGetEnemyListRsp_descriptor_ = file->message_type(49);
  static const int TCrossLevyGetEnemyListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetEnemyListRsp, enemylist_),
  };
  TCrossLevyGetEnemyListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGetEnemyListRsp_descriptor_,
      TCrossLevyGetEnemyListRsp::default_instance_,
      TCrossLevyGetEnemyListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetEnemyListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetEnemyListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGetEnemyListRsp));
  TCrossLevyRemoveEnemyReq_descriptor_ = file->message_type(50);
  static const int TCrossLevyRemoveEnemyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyRemoveEnemyReq, uid_),
  };
  TCrossLevyRemoveEnemyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyRemoveEnemyReq_descriptor_,
      TCrossLevyRemoveEnemyReq::default_instance_,
      TCrossLevyRemoveEnemyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyRemoveEnemyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyRemoveEnemyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyRemoveEnemyReq));
  TCrossLevyGetEnemyCampListReq_descriptor_ = file->message_type(51);
  static const int TCrossLevyGetEnemyCampListReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetEnemyCampListReq, uid_),
  };
  TCrossLevyGetEnemyCampListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGetEnemyCampListReq_descriptor_,
      TCrossLevyGetEnemyCampListReq::default_instance_,
      TCrossLevyGetEnemyCampListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetEnemyCampListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetEnemyCampListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGetEnemyCampListReq));
  TCrossLevyGetEnemyCampListRsp_descriptor_ = file->message_type(52);
  static const int TCrossLevyGetEnemyCampListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetEnemyCampListRsp, enemycamplist_),
  };
  TCrossLevyGetEnemyCampListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGetEnemyCampListRsp_descriptor_,
      TCrossLevyGetEnemyCampListRsp::default_instance_,
      TCrossLevyGetEnemyCampListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetEnemyCampListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetEnemyCampListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGetEnemyCampListRsp));
  TCrossLevyUserBeMovedNotify_descriptor_ = file->message_type(53);
  static const int TCrossLevyUserBeMovedNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyUserBeMovedNotify, oricityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyUserBeMovedNotify, oricampid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyUserBeMovedNotify, curcityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyUserBeMovedNotify, curcampid_),
  };
  TCrossLevyUserBeMovedNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyUserBeMovedNotify_descriptor_,
      TCrossLevyUserBeMovedNotify::default_instance_,
      TCrossLevyUserBeMovedNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyUserBeMovedNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyUserBeMovedNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyUserBeMovedNotify));
  TCrossLevyCityUserNumInfo_descriptor_ = file->message_type(54);
  static const int TCrossLevyCityUserNumInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCityUserNumInfo, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCityUserNumInfo, usernum_),
  };
  TCrossLevyCityUserNumInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyCityUserNumInfo_descriptor_,
      TCrossLevyCityUserNumInfo::default_instance_,
      TCrossLevyCityUserNumInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCityUserNumInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCityUserNumInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyCityUserNumInfo));
  TCrossLevyCityUserNumNotify_descriptor_ = file->message_type(55);
  static const int TCrossLevyCityUserNumNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCityUserNumNotify, cityusernuminfoarr_),
  };
  TCrossLevyCityUserNumNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyCityUserNumNotify_descriptor_,
      TCrossLevyCityUserNumNotify::default_instance_,
      TCrossLevyCityUserNumNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCityUserNumNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCityUserNumNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyCityUserNumNotify));
  TCrossLevyCityCampNumInfo_descriptor_ = file->message_type(56);
  static const int TCrossLevyCityCampNumInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCityCampNumInfo, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCityCampNumInfo, campnum_),
  };
  TCrossLevyCityCampNumInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyCityCampNumInfo_descriptor_,
      TCrossLevyCityCampNumInfo::default_instance_,
      TCrossLevyCityCampNumInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCityCampNumInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCityCampNumInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyCityCampNumInfo));
  TCrossLevyCityCampNumNotify_descriptor_ = file->message_type(57);
  static const int TCrossLevyCityCampNumNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCityCampNumNotify, citycampnuminfoarr_),
  };
  TCrossLevyCityCampNumNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyCityCampNumNotify_descriptor_,
      TCrossLevyCityCampNumNotify::default_instance_,
      TCrossLevyCityCampNumNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCityCampNumNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyCityCampNumNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyCityCampNumNotify));
  TCrossLevyBossBeKilledNotify_descriptor_ = file->message_type(58);
  static const int TCrossLevyBossBeKilledNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyBossBeKilledNotify, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyBossBeKilledNotify, refreshtime_),
  };
  TCrossLevyBossBeKilledNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyBossBeKilledNotify_descriptor_,
      TCrossLevyBossBeKilledNotify::default_instance_,
      TCrossLevyBossBeKilledNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyBossBeKilledNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyBossBeKilledNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyBossBeKilledNotify));
  TCrossLevyRecordNotify_descriptor_ = file->message_type(59);
  static const int TCrossLevyRecordNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyRecordNotify, recordinfo_),
  };
  TCrossLevyRecordNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyRecordNotify_descriptor_,
      TCrossLevyRecordNotify::default_instance_,
      TCrossLevyRecordNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyRecordNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyRecordNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyRecordNotify));
  ECrossLevyRecordType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fCrossLevy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyCityInfo_descriptor_, &TCrossLevyCityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyUserRecordViewInfo_descriptor_, &TCrossLevyUserRecordViewInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevySelfRecordInfo_descriptor_, &TCrossLevySelfRecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyRecordInfo_descriptor_, &TCrossLevyRecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyBossInfo_descriptor_, &TCrossLevyBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyMyCampInfo_descriptor_, &TCrossLevyMyCampInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyCampInfo_descriptor_, &TCrossLevyCampInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyMonsterHpInfo_descriptor_, &TCrossLevyMonsterHpInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyMonsterArmyHpInfo_descriptor_, &TCrossLevyMonsterArmyHpInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyMonsterInfo_descriptor_, &TCrossLevyMonsterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyHidPosInfo_descriptor_, &TCrossLevyHidPosInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyFormationInfo_descriptor_, &TCrossLevyFormationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyEnemyFormation_descriptor_, &TCrossLevyEnemyFormation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGuildUserInfo_descriptor_, &TCrossLevyGuildUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyEnemyInfo_descriptor_, &TCrossLevyEnemyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyEnemyCampInfo_descriptor_, &TCrossLevyEnemyCampInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGetServerTeamInfoRsp_descriptor_, &TCrossLevyGetServerTeamInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyEnterRsp_descriptor_, &TCrossLevyEnterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGetUserInfoRsp_descriptor_, &TCrossLevyGetUserInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGetCityInfoReq_descriptor_, &TCrossLevyGetCityInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGetCityInfoRsp_descriptor_, &TCrossLevyGetCityInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyMoveToEmptyCampReq_descriptor_, &TCrossLevyMoveToEmptyCampReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevySetDefFormationReq_descriptor_, &TCrossLevySetDefFormationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevySetAtkFormationReq_descriptor_, &TCrossLevySetAtkFormationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGetEnemyFormationReq_descriptor_, &TCrossLevyGetEnemyFormationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGetEnemyFormationRsp_descriptor_, &TCrossLevyGetEnemyFormationRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyForceCollectReq_descriptor_, &TCrossLevyForceCollectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyForceCollectRsp_descriptor_, &TCrossLevyForceCollectRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyPlunderReq_descriptor_, &TCrossLevyPlunderReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyPlunderRsp_descriptor_, &TCrossLevyPlunderRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyExpelReq_descriptor_, &TCrossLevyExpelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyExpelRsp_descriptor_, &TCrossLevyExpelRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyForceMoveReq_descriptor_, &TCrossLevyForceMoveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyForceMoveRsp_descriptor_, &TCrossLevyForceMoveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGetBattleArgsReq_descriptor_, &TCrossLevyGetBattleArgsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGetBattleArgsRsp_descriptor_, &TCrossLevyGetBattleArgsRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyReportBattleBossReq_descriptor_, &TCrossLevyReportBattleBossReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyReportBattleBossRsp_descriptor_, &TCrossLevyReportBattleBossRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyReportBattleMonsterReq_descriptor_, &TCrossLevyReportBattleMonsterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyReportBattleMonsterRsp_descriptor_, &TCrossLevyReportBattleMonsterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGetSelfRecordInfoRsp_descriptor_, &TCrossLevyGetSelfRecordInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGetRecordResultInfoReq_descriptor_, &TCrossLevyGetRecordResultInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGetRecordResultInfoRsp_descriptor_, &TCrossLevyGetRecordResultInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyReceiveScoreRewardReq_descriptor_, &TCrossLevyReceiveScoreRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyReceiveScoreRewardRsp_descriptor_, &TCrossLevyReceiveScoreRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGetGuildUserListRsp_descriptor_, &TCrossLevyGetGuildUserListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyReceiveSettleRewardReq_descriptor_, &TCrossLevyReceiveSettleRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyReceiveSettleRewardRsp_descriptor_, &TCrossLevyReceiveSettleRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyBuyChallengeNumReq_descriptor_, &TCrossLevyBuyChallengeNumReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGetEnemyListRsp_descriptor_, &TCrossLevyGetEnemyListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyRemoveEnemyReq_descriptor_, &TCrossLevyRemoveEnemyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGetEnemyCampListReq_descriptor_, &TCrossLevyGetEnemyCampListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGetEnemyCampListRsp_descriptor_, &TCrossLevyGetEnemyCampListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyUserBeMovedNotify_descriptor_, &TCrossLevyUserBeMovedNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyCityUserNumInfo_descriptor_, &TCrossLevyCityUserNumInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyCityUserNumNotify_descriptor_, &TCrossLevyCityUserNumNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyCityCampNumInfo_descriptor_, &TCrossLevyCityCampNumInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyCityCampNumNotify_descriptor_, &TCrossLevyCityCampNumNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyBossBeKilledNotify_descriptor_, &TCrossLevyBossBeKilledNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyRecordNotify_descriptor_, &TCrossLevyRecordNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fCrossLevy_2eproto() {
  delete TCrossLevyCityInfo::default_instance_;
  delete TCrossLevyCityInfo_reflection_;
  delete TCrossLevyUserRecordViewInfo::default_instance_;
  delete TCrossLevyUserRecordViewInfo_reflection_;
  delete TCrossLevySelfRecordInfo::default_instance_;
  delete TCrossLevySelfRecordInfo_reflection_;
  delete TCrossLevyRecordInfo::default_instance_;
  delete TCrossLevyRecordInfo_reflection_;
  delete TCrossLevyBossInfo::default_instance_;
  delete TCrossLevyBossInfo_reflection_;
  delete TCrossLevyMyCampInfo::default_instance_;
  delete TCrossLevyMyCampInfo_reflection_;
  delete TCrossLevyCampInfo::default_instance_;
  delete TCrossLevyCampInfo_reflection_;
  delete TCrossLevyMonsterHpInfo::default_instance_;
  delete TCrossLevyMonsterHpInfo_reflection_;
  delete TCrossLevyMonsterArmyHpInfo::default_instance_;
  delete TCrossLevyMonsterArmyHpInfo_reflection_;
  delete TCrossLevyMonsterInfo::default_instance_;
  delete TCrossLevyMonsterInfo_reflection_;
  delete TCrossLevyHidPosInfo::default_instance_;
  delete TCrossLevyHidPosInfo_reflection_;
  delete TCrossLevyFormationInfo::default_instance_;
  delete TCrossLevyFormationInfo_reflection_;
  delete TCrossLevyEnemyFormation::default_instance_;
  delete TCrossLevyEnemyFormation_reflection_;
  delete TCrossLevyGuildUserInfo::default_instance_;
  delete TCrossLevyGuildUserInfo_reflection_;
  delete TCrossLevyEnemyInfo::default_instance_;
  delete TCrossLevyEnemyInfo_reflection_;
  delete TCrossLevyEnemyCampInfo::default_instance_;
  delete TCrossLevyEnemyCampInfo_reflection_;
  delete TCrossLevyGetServerTeamInfoRsp::default_instance_;
  delete TCrossLevyGetServerTeamInfoRsp_reflection_;
  delete TCrossLevyEnterRsp::default_instance_;
  delete TCrossLevyEnterRsp_reflection_;
  delete TCrossLevyGetUserInfoRsp::default_instance_;
  delete TCrossLevyGetUserInfoRsp_reflection_;
  delete TCrossLevyGetCityInfoReq::default_instance_;
  delete TCrossLevyGetCityInfoReq_reflection_;
  delete TCrossLevyGetCityInfoRsp::default_instance_;
  delete TCrossLevyGetCityInfoRsp_reflection_;
  delete TCrossLevyMoveToEmptyCampReq::default_instance_;
  delete TCrossLevyMoveToEmptyCampReq_reflection_;
  delete TCrossLevySetDefFormationReq::default_instance_;
  delete TCrossLevySetDefFormationReq_reflection_;
  delete TCrossLevySetAtkFormationReq::default_instance_;
  delete TCrossLevySetAtkFormationReq_reflection_;
  delete TCrossLevyGetEnemyFormationReq::default_instance_;
  delete TCrossLevyGetEnemyFormationReq_reflection_;
  delete TCrossLevyGetEnemyFormationRsp::default_instance_;
  delete TCrossLevyGetEnemyFormationRsp_reflection_;
  delete TCrossLevyForceCollectReq::default_instance_;
  delete TCrossLevyForceCollectReq_reflection_;
  delete TCrossLevyForceCollectRsp::default_instance_;
  delete TCrossLevyForceCollectRsp_reflection_;
  delete TCrossLevyPlunderReq::default_instance_;
  delete TCrossLevyPlunderReq_reflection_;
  delete TCrossLevyPlunderRsp::default_instance_;
  delete TCrossLevyPlunderRsp_reflection_;
  delete TCrossLevyExpelReq::default_instance_;
  delete TCrossLevyExpelReq_reflection_;
  delete TCrossLevyExpelRsp::default_instance_;
  delete TCrossLevyExpelRsp_reflection_;
  delete TCrossLevyForceMoveReq::default_instance_;
  delete TCrossLevyForceMoveReq_reflection_;
  delete TCrossLevyForceMoveRsp::default_instance_;
  delete TCrossLevyForceMoveRsp_reflection_;
  delete TCrossLevyGetBattleArgsReq::default_instance_;
  delete TCrossLevyGetBattleArgsReq_reflection_;
  delete TCrossLevyGetBattleArgsRsp::default_instance_;
  delete TCrossLevyGetBattleArgsRsp_reflection_;
  delete TCrossLevyReportBattleBossReq::default_instance_;
  delete TCrossLevyReportBattleBossReq_reflection_;
  delete TCrossLevyReportBattleBossRsp::default_instance_;
  delete TCrossLevyReportBattleBossRsp_reflection_;
  delete TCrossLevyReportBattleMonsterReq::default_instance_;
  delete TCrossLevyReportBattleMonsterReq_reflection_;
  delete TCrossLevyReportBattleMonsterRsp::default_instance_;
  delete TCrossLevyReportBattleMonsterRsp_reflection_;
  delete TCrossLevyGetSelfRecordInfoRsp::default_instance_;
  delete TCrossLevyGetSelfRecordInfoRsp_reflection_;
  delete TCrossLevyGetRecordResultInfoReq::default_instance_;
  delete TCrossLevyGetRecordResultInfoReq_reflection_;
  delete TCrossLevyGetRecordResultInfoRsp::default_instance_;
  delete TCrossLevyGetRecordResultInfoRsp_reflection_;
  delete TCrossLevyReceiveScoreRewardReq::default_instance_;
  delete TCrossLevyReceiveScoreRewardReq_reflection_;
  delete TCrossLevyReceiveScoreRewardRsp::default_instance_;
  delete TCrossLevyReceiveScoreRewardRsp_reflection_;
  delete TCrossLevyGetGuildUserListRsp::default_instance_;
  delete TCrossLevyGetGuildUserListRsp_reflection_;
  delete TCrossLevyReceiveSettleRewardReq::default_instance_;
  delete TCrossLevyReceiveSettleRewardReq_reflection_;
  delete TCrossLevyReceiveSettleRewardRsp::default_instance_;
  delete TCrossLevyReceiveSettleRewardRsp_reflection_;
  delete TCrossLevyBuyChallengeNumReq::default_instance_;
  delete TCrossLevyBuyChallengeNumReq_reflection_;
  delete TCrossLevyGetEnemyListRsp::default_instance_;
  delete TCrossLevyGetEnemyListRsp_reflection_;
  delete TCrossLevyRemoveEnemyReq::default_instance_;
  delete TCrossLevyRemoveEnemyReq_reflection_;
  delete TCrossLevyGetEnemyCampListReq::default_instance_;
  delete TCrossLevyGetEnemyCampListReq_reflection_;
  delete TCrossLevyGetEnemyCampListRsp::default_instance_;
  delete TCrossLevyGetEnemyCampListRsp_reflection_;
  delete TCrossLevyUserBeMovedNotify::default_instance_;
  delete TCrossLevyUserBeMovedNotify_reflection_;
  delete TCrossLevyCityUserNumInfo::default_instance_;
  delete TCrossLevyCityUserNumInfo_reflection_;
  delete TCrossLevyCityUserNumNotify::default_instance_;
  delete TCrossLevyCityUserNumNotify_reflection_;
  delete TCrossLevyCityCampNumInfo::default_instance_;
  delete TCrossLevyCityCampNumInfo_reflection_;
  delete TCrossLevyCityCampNumNotify::default_instance_;
  delete TCrossLevyCityCampNumNotify_reflection_;
  delete TCrossLevyBossBeKilledNotify::default_instance_;
  delete TCrossLevyBossBeKilledNotify_reflection_;
  delete TCrossLevyRecordNotify::default_instance_;
  delete TCrossLevyRecordNotify_reflection_;
}

void protobuf_AddDesc_net_2fCrossLevy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023net/CrossLevy.proto\022\002pb\032\016net/User.prot"
    "o\032\020net/Battle.proto\032\026net/CommonReward.pr"
    "oto\032\030net/ArenaHighOrder.proto\"F\n\022TCrossL"
    "evyCityInfo\022\016\n\006CityId\030\001 \001(\r\022\017\n\007CampNum\030\002"
    " \001(\r\022\017\n\007UserNum\030\003 \001(\r\"\276\001\n\034TCrossLevyUser"
    "RecordViewInfo\022\020\n\010RecordId\030\001 \001(\004\022\020\n\010IsAt"
    "kWin\030\002 \001(\010\022%\n\nAtkArmyArr\030\003 \003(\0132\021.pb.TArm"
    "yViewInfo\022%\n\nDefArmyArr\030\004 \003(\0132\021.pb.TArmy"
    "ViewInfo\022\025\n\rAtkFightForce\030\005 \001(\004\022\025\n\rDefFi"
    "ghtForce\030\006 \001(\004\"\246\002\n\030TCrossLevySelfRecordI"
    "nfo\022\026\n\016RecordResultId\030\001 \001(\r\022,\n\nRecordTyp"
    "e\030\002 \001(\0162\030.pb.ECrossLevyRecordType\022\022\n\nRec"
    "ordTime\030\003 \001(\004\022(\n\013AtkUserInfo\030\004 \001(\0132\023.pb."
    "TUserSimpleInfo\022(\n\013DefUserInfo\030\005 \001(\0132\023.p"
    "b.TUserSimpleInfo\022\020\n\010IsAtkWin\030\006 \001(\010\022\016\n\006C"
    "ityId\030\007 \001(\r\022\016\n\006CampId\030\010 \001(\r\022\024\n\014TargetCit"
    "yId\030\t \001(\r\022\024\n\014TargetCampId\030\n \001(\r\"\374\001\n\024TCro"
    "ssLevyRecordInfo\022\026\n\016RecordResultId\030\001 \001(\r"
    "\022,\n\nRecordType\030\002 \001(\0162\030.pb.ECrossLevyReco"
    "rdType\022\022\n\nRecordTime\030\003 \001(\004\022(\n\013AtkUserInf"
    "o\030\004 \001(\0132\023.pb.TUserSimpleInfo\022(\n\013DefUserI"
    "nfo\030\005 \001(\0132\023.pb.TUserSimpleInfo\022$\n\tReward"
    "Arr\030\006 \003(\0132\021.pb.TCommonReward\022\020\n\010IsAtkWin"
    "\030\007 \001(\010\"u\n\022TCrossLevyBossInfo\022\016\n\006BossId\030\001"
    " \001(\r\022\023\n\013RefreshTime\030\002 \001(\004\022\n\n\002Hp\030\003 \001(\004\022\r\n"
    "\005MaxHp\030\004 \001(\004\022\022\n\nFightForce\030\005 \001(\004\022\013\n\003Pos\030"
    "\006 \001(\r\"\333\001\n\024TCrossLevyMyCampInfo\022\016\n\006CityId"
    "\030\001 \001(\r\022\016\n\006CampId\030\002 \001(\r\022\022\n\nSettleTime\030\003 \001"
    "(\004\022\021\n\tSettleNum\030\004 \001(\r\022$\n\tRewardArr\030\005 \003(\013"
    "2\021.pb.TCommonReward\022)\n\016ExtraRewardArr\030\006 "
    "\003(\0132\021.pb.TCommonReward\022\026\n\016BePlunderedNum"
    "\030\007 \001(\r\022\023\n\013SettleScore\030\010 \001(\r\"\366\001\n\022TCrossLe"
    "vyCampInfo\022%\n\010UserInfo\030\001 \001(\0132\023.pb.TUserS"
    "impleInfo\022\016\n\006CityId\030\002 \001(\r\022\016\n\006CampId\030\003 \001("
    "\r\022$\n\tRewardArr\030\004 \003(\0132\021.pb.TCommonReward\022"
    "\026\n\016BePlunderedNum\030\005 \001(\r\022\021\n\tSettleNum\030\006 \001"
    "(\r\022\032\n\022LastBeAttackedTime\030\007 \001(\004\022\033\n\023LastBe"
    "PlunderedTime\030\010 \001(\004\022\017\n\007IsEnemy\030\t \001(\010\"D\n\027"
    "TCrossLevyMonsterHpInfo\022\013\n\003Hid\030\001 \001(\r\022\r\n\005"
    "CurHp\030\002 \001(\004\022\r\n\005MaxHp\030\003 \001(\004\"`\n\033TCrossLevy"
    "MonsterArmyHpInfo\022\n\n\002Id\030\001 \001(\r\0225\n\020Monster"
    "HpInfoArr\030\002 \003(\0132\033.pb.TCrossLevyMonsterHp"
    "Info\"o\n\025TCrossLevyMonsterInfo\022\n\n\002Id\030\001 \001("
    "\r\022\013\n\003Pos\030\002 \001(\r\022=\n\024MonsterArmyHpInfoArr\030\003"
    " \003(\0132\037.pb.TCrossLevyMonsterArmyHpInfo\"0\n"
    "\024TCrossLevyHidPosInfo\022\013\n\003Hid\030\001 \001(\r\022\013\n\003Po"
    "s\030\002 \001(\r\"[\n\027TCrossLevyFormationInfo\022\023\n\013Fo"
    "rmationId\030\001 \001(\r\022+\n\tHidPosArr\030\002 \003(\0132\030.pb."
    "TCrossLevyHidPosInfo\"c\n\030TCrossLevyEnemyF"
    "ormation\022\023\n\013FormationId\030\001 \001(\r\022\036\n\007UnitArr"
    "\030\002 \003(\0132\r.pb.TUnitInfo\022\022\n\nFightForce\030\003 \001("
    "\004\"i\n\027TCrossLevyGuildUserInfo\022\013\n\003Uid\030\001 \001("
    "\004\022\r\n\005Uname\030\002 \001(\t\022\016\n\006CityId\030\003 \001(\r\022\016\n\006Camp"
    "Id\030\004 \001(\r\022\022\n\nConnectNum\030\005 \001(\r\"h\n\023TCrossLe"
    "vyEnemyInfo\022\013\n\003Uid\030\001 \001(\004\022\017\n\007HateNum\030\002 \001("
    "\r\022\014\n\004Time\030\003 \001(\004\022%\n\010UserInfo\030\004 \001(\0132\023.pb.T"
    "UserSimpleInfo\"9\n\027TCrossLevyEnemyCampInf"
    "o\022\016\n\006CityId\030\001 \001(\r\022\016\n\006CampId\030\002 \001(\r\"B\n\036TCr"
    "ossLevyGetServerTeamInfoRsp\022\016\n\006TeamId\030\001 "
    "\001(\r\022\020\n\010ServerId\030\002 \001(\t\"\363\001\n\022TCrossLevyEnte"
    "rRsp\022+\n\013CityInfoArr\030\001 \003(\0132\026.pb.TCrossLev"
    "yCityInfo\0223\n\rRecordInfoArr\030\002 \003(\0132\034.pb.TC"
    "rossLevySelfRecordInfo\022+\n\013BossInfoArr\030\003 "
    "\003(\0132\026.pb.TCrossLevyBossInfo\022+\n\tRecordArr"
    "\030\004 \003(\0132\030.pb.TCrossLevyRecordInfo\022\017\n\007Scen"
    "eId\030\005 \001(\t\022\020\n\010RewardId\030\006 \001(\r\"\355\003\n\030TCrossLe"
    "vyGetUserInfoRsp\022\030\n\020LeftChallengeNum\030\001 \001"
    "(\r\022\027\n\017BuyChallengeNum\030\002 \001(\r\022\020\n\010ForceNum\030"
    "\003 \001(\r\022\022\n\nAtkBossNum\030\004 \001(\r\022\022\n\nPlunderNum\030"
    "\005 \001(\r\022/\n\rMyCampInfoArr\030\006 \003(\0132\030.pb.TCross"
    "LevyMyCampInfo\022\026\n\016MonsterRfrTime\030\007 \001(\004\0221"
    "\n\016MonsterInfoArr\030\010 \003(\0132\031.pb.TCrossLevyMo"
    "nsterInfo\022\r\n\005Score\030\t \001(\r\022\023\n\013RewardIdArr\030"
    "\n \003(\r\022.\n\tAtkFmtArr\030\013 \003(\0132\033.pb.TCrossLevy"
    "FormationInfo\022.\n\tDefFmtArr\030\014 \003(\0132\033.pb.TC"
    "rossLevyFormationInfo\022\031\n\021PlunderBenefitN"
    "um\030\r \001(\r\022\027\n\017ExpelBenefitNum\030\016 \001(\r\022\027\n\017Las"
    "tRecoverTime\030\017 \001(\004\022\027\n\017LastAtkBossTime\030\020 "
    "\001(\004\"=\n\030TCrossLevyGetCityInfoReq\022\016\n\006CityI"
    "d\030\001 \001(\r\022\021\n\tCityIndex\030\002 \001(\r\"G\n\030TCrossLevy"
    "GetCityInfoRsp\022+\n\013CampInfoArr\030\001 \003(\0132\026.pb"
    ".TCrossLevyCampInfo\"d\n\034TCrossLevyMoveToE"
    "mptyCampReq\022\016\n\006CityId\030\001 \001(\r\022\016\n\006CampId\030\002 "
    "\001(\r\022\021\n\tOriCityId\030\003 \001(\r\022\021\n\tOriCampId\030\004 \001("
    "\r\"Q\n\034TCrossLevySetDefFormationReq\0221\n\014For"
    "mationArr\030\001 \003(\0132\033.pb.TCrossLevyFormation"
    "Info\"Q\n\034TCrossLevySetAtkFormationReq\0221\n\014"
    "FormationArr\030\001 \003(\0132\033.pb.TCrossLevyFormat"
    "ionInfo\"R\n\036TCrossLevyGetEnemyFormationRe"
    "q\022\016\n\006CityId\030\001 \001(\r\022\016\n\006CampId\030\002 \001(\r\022\020\n\010Ene"
    "myUid\030\003 \001(\004\"Y\n\036TCrossLevyGetEnemyFormati"
    "onRsp\0227\n\021EnemyFormationArr\030\001 \003(\0132\034.pb.TC"
    "rossLevyEnemyFormation\";\n\031TCrossLevyForc"
    "eCollectReq\022\016\n\006CityId\030\001 \001(\r\022\016\n\006CampId\030\002 "
    "\001(\r\"V\n\031TCrossLevyForceCollectRsp\022$\n\tRewa"
    "rdArr\030\001 \003(\0132\021.pb.TCommonReward\022\023\n\013Settle"
    "Score\030\002 \001(\r\"H\n\024TCrossLevyPlunderReq\022\016\n\006C"
    "ityId\030\001 \001(\r\022\016\n\006CampId\030\002 \001(\r\022\020\n\010EnemyUid\030"
    "\003 \001(\004\"\354\001\n\024TCrossLevyPlunderRsp\022\020\n\010IsAtkW"
    "in\030\001 \001(\010\022(\n\013AtkUserInfo\030\002 \001(\0132\023.pb.TUser"
    "SimpleInfo\022(\n\013DefUserInfo\030\003 \001(\0132\023.pb.TUs"
    "erSimpleInfo\0223\n\tRecordArr\030\004 \003(\0132 .pb.TCr"
    "ossLevyUserRecordViewInfo\022$\n\tRewardArr\030\005"
    " \003(\0132\021.pb.TCommonReward\022\023\n\013RewardScore\030\006"
    " \001(\r\"F\n\022TCrossLevyExpelReq\022\016\n\006CityId\030\001 \001"
    "(\r\022\016\n\006CampId\030\002 \001(\r\022\020\n\010EnemyUid\030\003 \001(\004\"\352\001\n"
    "\022TCrossLevyExpelRsp\022\020\n\010IsAtkWin\030\001 \001(\010\022(\n"
    "\013AtkUserInfo\030\002 \001(\0132\023.pb.TUserSimpleInfo\022"
    "(\n\013DefUserInfo\030\003 \001(\0132\023.pb.TUserSimpleInf"
    "o\0223\n\tRecordArr\030\004 \003(\0132 .pb.TCrossLevyUser"
    "RecordViewInfo\022$\n\tRewardArr\030\005 \003(\0132\021.pb.T"
    "CommonReward\022\023\n\013RewardScore\030\006 \001(\r\"p\n\026TCr"
    "ossLevyForceMoveReq\022\016\n\006CityId\030\001 \001(\r\022\016\n\006C"
    "ampId\030\002 \001(\r\022\020\n\010EnemyUid\030\003 \001(\004\022\021\n\tOriCity"
    "Id\030\004 \001(\r\022\021\n\tOriCampId\030\005 \001(\r\"\310\001\n\026TCrossLe"
    "vyForceMoveRsp\022\020\n\010IsAtkWin\030\001 \001(\010\022(\n\013AtkU"
    "serInfo\030\002 \001(\0132\023.pb.TUserSimpleInfo\022(\n\013De"
    "fUserInfo\030\003 \001(\0132\023.pb.TUserSimpleInfo\0223\n\t"
    "RecordArr\030\004 \003(\0132 .pb.TCrossLevyUserRecor"
    "dViewInfo\022\023\n\013RewardScore\030\005 \001(\r\"n\n\032TCross"
    "LevyGetBattleArgsReq\022\n\n\002Id\030\001 \001(\r\022/\n\020Batt"
    "leCheckParam\030\002 \001(\0132\025.pb.TBattleCheckPara"
    "m\022\023\n\013RefreshTime\030\003 \001(\004\"A\n\032TCrossLevyGetB"
    "attleArgsRsp\022#\n\nBattleArgs\030\001 \001(\0132\017.pb.TB"
    "attleArgs\"W\n\035TCrossLevyReportBattleBossR"
    "eq\022\016\n\006BossId\030\001 \001(\r\022\023\n\013RefreshTime\030\002 \001(\004\022"
    "\021\n\tBattleRet\030\003 \001(\014\"\231\001\n\035TCrossLevyReportB"
    "attleBossRsp\022\025\n\risFinalStrike\030\001 \001(\r\022$\n\tR"
    "ewardArr\030\002 \003(\0132\021.pb.TCommonReward\022\027\n\017Las"
    "tAtkBossTime\030\003 \001(\004\022\023\n\013RewardScore\030\004 \001(\r\022"
    "\r\n\005CurHp\030\005 \001(\004\"`\n TCrossLevyReportBattle"
    "MonsterReq\022\021\n\tMonsterId\030\001 \001(\r\022\026\n\016Monster"
    "RfrTime\030\002 \001(\004\022\021\n\tBattleRet\030\003 \001(\014\"\234\001\n TCr"
    "ossLevyReportBattleMonsterRsp\022\023\n\013RewardS"
    "core\030\001 \001(\r\022=\n\024MonsterArmyHpInfoArr\030\002 \003(\013"
    "2\037.pb.TCrossLevyMonsterArmyHpInfo\022$\n\tRew"
    "ardArr\030\003 \003(\0132\021.pb.TCommonReward\"Q\n\036TCros"
    "sLevyGetSelfRecordInfoRsp\022/\n\tRecordArr\030\001"
    " \003(\0132\034.pb.TCrossLevySelfRecordInfo\":\n TC"
    "rossLevyGetRecordResultInfoReq\022\026\n\016Record"
    "ResultId\030\001 \001(\r\"\275\001\n TCrossLevyGetRecordRe"
    "sultInfoRsp\022\020\n\010IsAtkWin\030\001 \001(\010\022(\n\013AtkUser"
    "Info\030\002 \001(\0132\023.pb.TUserSimpleInfo\022(\n\013DefUs"
    "erInfo\030\003 \001(\0132\023.pb.TUserSimpleInfo\0223\n\tRec"
    "ordArr\030\004 \003(\0132 .pb.TCrossLevyUserRecordVi"
    "ewInfo\"-\n\037TCrossLevyReceiveScoreRewardRe"
    "q\022\n\n\002Id\030\001 \001(\r\"G\n\037TCrossLevyReceiveScoreR"
    "ewardRsp\022$\n\tRewardArr\030\001 \003(\0132\021.pb.TCommon"
    "Reward\"R\n\035TCrossLevyGetGuildUserListRsp\022"
    "1\n\014GuildUserArr\030\001 \003(\0132\033.pb.TCrossLevyGui"
    "ldUserInfo\"B\n TCrossLevyReceiveSettleRew"
    "ardReq\022\016\n\006CityId\030\001 \001(\r\022\016\n\006CampId\030\002 \001(\r\"\212"
    "\001\n TCrossLevyReceiveSettleRewardRsp\022$\n\tR"
    "ewardArr\030\001 \003(\0132\021.pb.TCommonReward\022\023\n\013Set"
    "tleScore\030\002 \001(\r\022+\n\tRecordArr\030\003 \003(\0132\030.pb.T"
    "CrossLevyRecordInfo\"+\n\034TCrossLevyBuyChal"
    "lengeNumReq\022\013\n\003Num\030\001 \001(\r\"G\n\031TCrossLevyGe"
    "tEnemyListRsp\022*\n\tEnemyList\030\001 \003(\0132\027.pb.TC"
    "rossLevyEnemyInfo\"\'\n\030TCrossLevyRemoveEne"
    "myReq\022\013\n\003Uid\030\001 \001(\004\",\n\035TCrossLevyGetEnemy"
    "CampListReq\022\013\n\003Uid\030\001 \001(\004\"S\n\035TCrossLevyGe"
    "tEnemyCampListRsp\0222\n\rEnemyCampList\030\001 \003(\013"
    "2\033.pb.TCrossLevyEnemyCampInfo\"i\n\033TCrossL"
    "evyUserBeMovedNotify\022\021\n\tOriCityId\030\001 \001(\r\022"
    "\021\n\tOriCampId\030\002 \001(\r\022\021\n\tCurCityId\030\003 \001(\r\022\021\n"
    "\tCurCampId\030\004 \001(\r\"<\n\031TCrossLevyCityUserNu"
    "mInfo\022\016\n\006CityId\030\001 \001(\r\022\017\n\007UserNum\030\002 \001(\r\"X"
    "\n\033TCrossLevyCityUserNumNotify\0229\n\022CityUse"
    "rNumInfoArr\030\001 \003(\0132\035.pb.TCrossLevyCityUse"
    "rNumInfo\"<\n\031TCrossLevyCityCampNumInfo\022\016\n"
    "\006CityId\030\001 \001(\r\022\017\n\007CampNum\030\002 \001(\r\"X\n\033TCross"
    "LevyCityCampNumNotify\0229\n\022CityCampNumInfo"
    "Arr\030\001 \003(\0132\035.pb.TCrossLevyCityCampNumInfo"
    "\"C\n\034TCrossLevyBossBeKilledNotify\022\016\n\006Boss"
    "Id\030\001 \001(\r\022\023\n\013RefreshTime\030\002 \001(\004\"F\n\026TCrossL"
    "evyRecordNotify\022,\n\nRecordInfo\030\001 \001(\0132\030.pb"
    ".TCrossLevyRecordInfo*_\n\024ECrossLevyRecor"
    "dType\022\026\n\022CROSS_LEVY_PLUNDER\020e\022\031\n\025CROSS_L"
    "EVY_FORCE_MOVE\020f\022\024\n\020CROSS_LEVY_EXPEL\020g", 7158);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/CrossLevy.proto", &protobuf_RegisterTypes);
  TCrossLevyCityInfo::default_instance_ = new TCrossLevyCityInfo();
  TCrossLevyUserRecordViewInfo::default_instance_ = new TCrossLevyUserRecordViewInfo();
  TCrossLevySelfRecordInfo::default_instance_ = new TCrossLevySelfRecordInfo();
  TCrossLevyRecordInfo::default_instance_ = new TCrossLevyRecordInfo();
  TCrossLevyBossInfo::default_instance_ = new TCrossLevyBossInfo();
  TCrossLevyMyCampInfo::default_instance_ = new TCrossLevyMyCampInfo();
  TCrossLevyCampInfo::default_instance_ = new TCrossLevyCampInfo();
  TCrossLevyMonsterHpInfo::default_instance_ = new TCrossLevyMonsterHpInfo();
  TCrossLevyMonsterArmyHpInfo::default_instance_ = new TCrossLevyMonsterArmyHpInfo();
  TCrossLevyMonsterInfo::default_instance_ = new TCrossLevyMonsterInfo();
  TCrossLevyHidPosInfo::default_instance_ = new TCrossLevyHidPosInfo();
  TCrossLevyFormationInfo::default_instance_ = new TCrossLevyFormationInfo();
  TCrossLevyEnemyFormation::default_instance_ = new TCrossLevyEnemyFormation();
  TCrossLevyGuildUserInfo::default_instance_ = new TCrossLevyGuildUserInfo();
  TCrossLevyEnemyInfo::default_instance_ = new TCrossLevyEnemyInfo();
  TCrossLevyEnemyCampInfo::default_instance_ = new TCrossLevyEnemyCampInfo();
  TCrossLevyGetServerTeamInfoRsp::default_instance_ = new TCrossLevyGetServerTeamInfoRsp();
  TCrossLevyEnterRsp::default_instance_ = new TCrossLevyEnterRsp();
  TCrossLevyGetUserInfoRsp::default_instance_ = new TCrossLevyGetUserInfoRsp();
  TCrossLevyGetCityInfoReq::default_instance_ = new TCrossLevyGetCityInfoReq();
  TCrossLevyGetCityInfoRsp::default_instance_ = new TCrossLevyGetCityInfoRsp();
  TCrossLevyMoveToEmptyCampReq::default_instance_ = new TCrossLevyMoveToEmptyCampReq();
  TCrossLevySetDefFormationReq::default_instance_ = new TCrossLevySetDefFormationReq();
  TCrossLevySetAtkFormationReq::default_instance_ = new TCrossLevySetAtkFormationReq();
  TCrossLevyGetEnemyFormationReq::default_instance_ = new TCrossLevyGetEnemyFormationReq();
  TCrossLevyGetEnemyFormationRsp::default_instance_ = new TCrossLevyGetEnemyFormationRsp();
  TCrossLevyForceCollectReq::default_instance_ = new TCrossLevyForceCollectReq();
  TCrossLevyForceCollectRsp::default_instance_ = new TCrossLevyForceCollectRsp();
  TCrossLevyPlunderReq::default_instance_ = new TCrossLevyPlunderReq();
  TCrossLevyPlunderRsp::default_instance_ = new TCrossLevyPlunderRsp();
  TCrossLevyExpelReq::default_instance_ = new TCrossLevyExpelReq();
  TCrossLevyExpelRsp::default_instance_ = new TCrossLevyExpelRsp();
  TCrossLevyForceMoveReq::default_instance_ = new TCrossLevyForceMoveReq();
  TCrossLevyForceMoveRsp::default_instance_ = new TCrossLevyForceMoveRsp();
  TCrossLevyGetBattleArgsReq::default_instance_ = new TCrossLevyGetBattleArgsReq();
  TCrossLevyGetBattleArgsRsp::default_instance_ = new TCrossLevyGetBattleArgsRsp();
  TCrossLevyReportBattleBossReq::default_instance_ = new TCrossLevyReportBattleBossReq();
  TCrossLevyReportBattleBossRsp::default_instance_ = new TCrossLevyReportBattleBossRsp();
  TCrossLevyReportBattleMonsterReq::default_instance_ = new TCrossLevyReportBattleMonsterReq();
  TCrossLevyReportBattleMonsterRsp::default_instance_ = new TCrossLevyReportBattleMonsterRsp();
  TCrossLevyGetSelfRecordInfoRsp::default_instance_ = new TCrossLevyGetSelfRecordInfoRsp();
  TCrossLevyGetRecordResultInfoReq::default_instance_ = new TCrossLevyGetRecordResultInfoReq();
  TCrossLevyGetRecordResultInfoRsp::default_instance_ = new TCrossLevyGetRecordResultInfoRsp();
  TCrossLevyReceiveScoreRewardReq::default_instance_ = new TCrossLevyReceiveScoreRewardReq();
  TCrossLevyReceiveScoreRewardRsp::default_instance_ = new TCrossLevyReceiveScoreRewardRsp();
  TCrossLevyGetGuildUserListRsp::default_instance_ = new TCrossLevyGetGuildUserListRsp();
  TCrossLevyReceiveSettleRewardReq::default_instance_ = new TCrossLevyReceiveSettleRewardReq();
  TCrossLevyReceiveSettleRewardRsp::default_instance_ = new TCrossLevyReceiveSettleRewardRsp();
  TCrossLevyBuyChallengeNumReq::default_instance_ = new TCrossLevyBuyChallengeNumReq();
  TCrossLevyGetEnemyListRsp::default_instance_ = new TCrossLevyGetEnemyListRsp();
  TCrossLevyRemoveEnemyReq::default_instance_ = new TCrossLevyRemoveEnemyReq();
  TCrossLevyGetEnemyCampListReq::default_instance_ = new TCrossLevyGetEnemyCampListReq();
  TCrossLevyGetEnemyCampListRsp::default_instance_ = new TCrossLevyGetEnemyCampListRsp();
  TCrossLevyUserBeMovedNotify::default_instance_ = new TCrossLevyUserBeMovedNotify();
  TCrossLevyCityUserNumInfo::default_instance_ = new TCrossLevyCityUserNumInfo();
  TCrossLevyCityUserNumNotify::default_instance_ = new TCrossLevyCityUserNumNotify();
  TCrossLevyCityCampNumInfo::default_instance_ = new TCrossLevyCityCampNumInfo();
  TCrossLevyCityCampNumNotify::default_instance_ = new TCrossLevyCityCampNumNotify();
  TCrossLevyBossBeKilledNotify::default_instance_ = new TCrossLevyBossBeKilledNotify();
  TCrossLevyRecordNotify::default_instance_ = new TCrossLevyRecordNotify();
  TCrossLevyCityInfo::default_instance_->InitAsDefaultInstance();
  TCrossLevyUserRecordViewInfo::default_instance_->InitAsDefaultInstance();
  TCrossLevySelfRecordInfo::default_instance_->InitAsDefaultInstance();
  TCrossLevyRecordInfo::default_instance_->InitAsDefaultInstance();
  TCrossLevyBossInfo::default_instance_->InitAsDefaultInstance();
  TCrossLevyMyCampInfo::default_instance_->InitAsDefaultInstance();
  TCrossLevyCampInfo::default_instance_->InitAsDefaultInstance();
  TCrossLevyMonsterHpInfo::default_instance_->InitAsDefaultInstance();
  TCrossLevyMonsterArmyHpInfo::default_instance_->InitAsDefaultInstance();
  TCrossLevyMonsterInfo::default_instance_->InitAsDefaultInstance();
  TCrossLevyHidPosInfo::default_instance_->InitAsDefaultInstance();
  TCrossLevyFormationInfo::default_instance_->InitAsDefaultInstance();
  TCrossLevyEnemyFormation::default_instance_->InitAsDefaultInstance();
  TCrossLevyGuildUserInfo::default_instance_->InitAsDefaultInstance();
  TCrossLevyEnemyInfo::default_instance_->InitAsDefaultInstance();
  TCrossLevyEnemyCampInfo::default_instance_->InitAsDefaultInstance();
  TCrossLevyGetServerTeamInfoRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyEnterRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyGetUserInfoRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyGetCityInfoReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyGetCityInfoRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyMoveToEmptyCampReq::default_instance_->InitAsDefaultInstance();
  TCrossLevySetDefFormationReq::default_instance_->InitAsDefaultInstance();
  TCrossLevySetAtkFormationReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyGetEnemyFormationReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyGetEnemyFormationRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyForceCollectReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyForceCollectRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyPlunderReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyPlunderRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyExpelReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyExpelRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyForceMoveReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyForceMoveRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyGetBattleArgsReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyGetBattleArgsRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyReportBattleBossReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyReportBattleBossRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyReportBattleMonsterReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyReportBattleMonsterRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyGetSelfRecordInfoRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyGetRecordResultInfoReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyGetRecordResultInfoRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyReceiveScoreRewardReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyReceiveScoreRewardRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyGetGuildUserListRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyReceiveSettleRewardReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyReceiveSettleRewardRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyBuyChallengeNumReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyGetEnemyListRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyRemoveEnemyReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyGetEnemyCampListReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyGetEnemyCampListRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyUserBeMovedNotify::default_instance_->InitAsDefaultInstance();
  TCrossLevyCityUserNumInfo::default_instance_->InitAsDefaultInstance();
  TCrossLevyCityUserNumNotify::default_instance_->InitAsDefaultInstance();
  TCrossLevyCityCampNumInfo::default_instance_->InitAsDefaultInstance();
  TCrossLevyCityCampNumNotify::default_instance_->InitAsDefaultInstance();
  TCrossLevyBossBeKilledNotify::default_instance_->InitAsDefaultInstance();
  TCrossLevyRecordNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fCrossLevy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fCrossLevy_2eproto {
  StaticDescriptorInitializer_net_2fCrossLevy_2eproto() {
    protobuf_AddDesc_net_2fCrossLevy_2eproto();
  }
} static_descriptor_initializer_net_2fCrossLevy_2eproto_;
const ::google::protobuf::EnumDescriptor* ECrossLevyRecordType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECrossLevyRecordType_descriptor_;
}
bool ECrossLevyRecordType_IsValid(int value) {
  switch(value) {
    case 101:
    case 102:
    case 103:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyCityInfo::kCityIdFieldNumber;
const int TCrossLevyCityInfo::kCampNumFieldNumber;
const int TCrossLevyCityInfo::kUserNumFieldNumber;
#endif  // !_MSC_VER

TCrossLevyCityInfo::TCrossLevyCityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyCityInfo)
}

void TCrossLevyCityInfo::InitAsDefaultInstance() {
}

TCrossLevyCityInfo::TCrossLevyCityInfo(const TCrossLevyCityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyCityInfo)
}

void TCrossLevyCityInfo::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  campnum_ = 0u;
  usernum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyCityInfo::~TCrossLevyCityInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyCityInfo)
  SharedDtor();
}

void TCrossLevyCityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyCityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyCityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyCityInfo_descriptor_;
}

const TCrossLevyCityInfo& TCrossLevyCityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyCityInfo* TCrossLevyCityInfo::default_instance_ = NULL;

TCrossLevyCityInfo* TCrossLevyCityInfo::New() const {
  return new TCrossLevyCityInfo;
}

void TCrossLevyCityInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyCityInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cityid_, usernum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyCityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyCityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CampNum;
        break;
      }

      // optional uint32 CampNum = 2;
      case 2: {
        if (tag == 16) {
         parse_CampNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campnum_)));
          set_has_campnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_UserNum;
        break;
      }

      // optional uint32 UserNum = 3;
      case 3: {
        if (tag == 24) {
         parse_UserNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usernum_)));
          set_has_usernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyCityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyCityInfo)
  return false;
#undef DO_
}

void TCrossLevyCityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyCityInfo)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // optional uint32 CampNum = 2;
  if (has_campnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->campnum(), output);
  }

  // optional uint32 UserNum = 3;
  if (has_usernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usernum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyCityInfo)
}

::google::protobuf::uint8* TCrossLevyCityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyCityInfo)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // optional uint32 CampNum = 2;
  if (has_campnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->campnum(), target);
  }

  // optional uint32 UserNum = 3;
  if (has_usernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usernum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyCityInfo)
  return target;
}

int TCrossLevyCityInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 CampNum = 2;
    if (has_campnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campnum());
    }

    // optional uint32 UserNum = 3;
    if (has_usernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usernum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyCityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyCityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyCityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyCityInfo::MergeFrom(const TCrossLevyCityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_campnum()) {
      set_campnum(from.campnum());
    }
    if (from.has_usernum()) {
      set_usernum(from.usernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyCityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyCityInfo::CopyFrom(const TCrossLevyCityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyCityInfo::IsInitialized() const {

  return true;
}

void TCrossLevyCityInfo::Swap(TCrossLevyCityInfo* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(campnum_, other->campnum_);
    std::swap(usernum_, other->usernum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyCityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyCityInfo_descriptor_;
  metadata.reflection = TCrossLevyCityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyUserRecordViewInfo::kRecordIdFieldNumber;
const int TCrossLevyUserRecordViewInfo::kIsAtkWinFieldNumber;
const int TCrossLevyUserRecordViewInfo::kAtkArmyArrFieldNumber;
const int TCrossLevyUserRecordViewInfo::kDefArmyArrFieldNumber;
const int TCrossLevyUserRecordViewInfo::kAtkFightForceFieldNumber;
const int TCrossLevyUserRecordViewInfo::kDefFightForceFieldNumber;
#endif  // !_MSC_VER

TCrossLevyUserRecordViewInfo::TCrossLevyUserRecordViewInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyUserRecordViewInfo)
}

void TCrossLevyUserRecordViewInfo::InitAsDefaultInstance() {
}

TCrossLevyUserRecordViewInfo::TCrossLevyUserRecordViewInfo(const TCrossLevyUserRecordViewInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyUserRecordViewInfo)
}

void TCrossLevyUserRecordViewInfo::SharedCtor() {
  _cached_size_ = 0;
  recordid_ = GOOGLE_ULONGLONG(0);
  isatkwin_ = false;
  atkfightforce_ = GOOGLE_ULONGLONG(0);
  deffightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyUserRecordViewInfo::~TCrossLevyUserRecordViewInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyUserRecordViewInfo)
  SharedDtor();
}

void TCrossLevyUserRecordViewInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyUserRecordViewInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyUserRecordViewInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyUserRecordViewInfo_descriptor_;
}

const TCrossLevyUserRecordViewInfo& TCrossLevyUserRecordViewInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyUserRecordViewInfo* TCrossLevyUserRecordViewInfo::default_instance_ = NULL;

TCrossLevyUserRecordViewInfo* TCrossLevyUserRecordViewInfo::New() const {
  return new TCrossLevyUserRecordViewInfo;
}

void TCrossLevyUserRecordViewInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyUserRecordViewInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 51) {
    ZR_(atkfightforce_, isatkwin_);
    recordid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  atkarmyarr_.Clear();
  defarmyarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyUserRecordViewInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyUserRecordViewInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RecordId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordid_)));
          set_has_recordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsAtkWin;
        break;
      }

      // optional bool IsAtkWin = 2;
      case 2: {
        if (tag == 16) {
         parse_IsAtkWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isatkwin_)));
          set_has_isatkwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AtkArmyArr;
        break;
      }

      // repeated .pb.TArmyViewInfo AtkArmyArr = 3;
      case 3: {
        if (tag == 26) {
         parse_AtkArmyArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atkarmyarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AtkArmyArr;
        if (input->ExpectTag(34)) goto parse_DefArmyArr;
        break;
      }

      // repeated .pb.TArmyViewInfo DefArmyArr = 4;
      case 4: {
        if (tag == 34) {
         parse_DefArmyArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defarmyarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_DefArmyArr;
        if (input->ExpectTag(40)) goto parse_AtkFightForce;
        break;
      }

      // optional uint64 AtkFightForce = 5;
      case 5: {
        if (tag == 40) {
         parse_AtkFightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &atkfightforce_)));
          set_has_atkfightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_DefFightForce;
        break;
      }

      // optional uint64 DefFightForce = 6;
      case 6: {
        if (tag == 48) {
         parse_DefFightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deffightforce_)));
          set_has_deffightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyUserRecordViewInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyUserRecordViewInfo)
  return false;
#undef DO_
}

void TCrossLevyUserRecordViewInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyUserRecordViewInfo)
  // optional uint64 RecordId = 1;
  if (has_recordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->recordid(), output);
  }

  // optional bool IsAtkWin = 2;
  if (has_isatkwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isatkwin(), output);
  }

  // repeated .pb.TArmyViewInfo AtkArmyArr = 3;
  for (int i = 0; i < this->atkarmyarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->atkarmyarr(i), output);
  }

  // repeated .pb.TArmyViewInfo DefArmyArr = 4;
  for (int i = 0; i < this->defarmyarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->defarmyarr(i), output);
  }

  // optional uint64 AtkFightForce = 5;
  if (has_atkfightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->atkfightforce(), output);
  }

  // optional uint64 DefFightForce = 6;
  if (has_deffightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->deffightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyUserRecordViewInfo)
}

::google::protobuf::uint8* TCrossLevyUserRecordViewInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyUserRecordViewInfo)
  // optional uint64 RecordId = 1;
  if (has_recordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->recordid(), target);
  }

  // optional bool IsAtkWin = 2;
  if (has_isatkwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isatkwin(), target);
  }

  // repeated .pb.TArmyViewInfo AtkArmyArr = 3;
  for (int i = 0; i < this->atkarmyarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->atkarmyarr(i), target);
  }

  // repeated .pb.TArmyViewInfo DefArmyArr = 4;
  for (int i = 0; i < this->defarmyarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->defarmyarr(i), target);
  }

  // optional uint64 AtkFightForce = 5;
  if (has_atkfightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->atkfightforce(), target);
  }

  // optional uint64 DefFightForce = 6;
  if (has_deffightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->deffightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyUserRecordViewInfo)
  return target;
}

int TCrossLevyUserRecordViewInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RecordId = 1;
    if (has_recordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordid());
    }

    // optional bool IsAtkWin = 2;
    if (has_isatkwin()) {
      total_size += 1 + 1;
    }

    // optional uint64 AtkFightForce = 5;
    if (has_atkfightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->atkfightforce());
    }

    // optional uint64 DefFightForce = 6;
    if (has_deffightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deffightforce());
    }

  }
  // repeated .pb.TArmyViewInfo AtkArmyArr = 3;
  total_size += 1 * this->atkarmyarr_size();
  for (int i = 0; i < this->atkarmyarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atkarmyarr(i));
  }

  // repeated .pb.TArmyViewInfo DefArmyArr = 4;
  total_size += 1 * this->defarmyarr_size();
  for (int i = 0; i < this->defarmyarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defarmyarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyUserRecordViewInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyUserRecordViewInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyUserRecordViewInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyUserRecordViewInfo::MergeFrom(const TCrossLevyUserRecordViewInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  atkarmyarr_.MergeFrom(from.atkarmyarr_);
  defarmyarr_.MergeFrom(from.defarmyarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recordid()) {
      set_recordid(from.recordid());
    }
    if (from.has_isatkwin()) {
      set_isatkwin(from.isatkwin());
    }
    if (from.has_atkfightforce()) {
      set_atkfightforce(from.atkfightforce());
    }
    if (from.has_deffightforce()) {
      set_deffightforce(from.deffightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyUserRecordViewInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyUserRecordViewInfo::CopyFrom(const TCrossLevyUserRecordViewInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyUserRecordViewInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->atkarmyarr())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->defarmyarr())) return false;
  return true;
}

void TCrossLevyUserRecordViewInfo::Swap(TCrossLevyUserRecordViewInfo* other) {
  if (other != this) {
    std::swap(recordid_, other->recordid_);
    std::swap(isatkwin_, other->isatkwin_);
    atkarmyarr_.Swap(&other->atkarmyarr_);
    defarmyarr_.Swap(&other->defarmyarr_);
    std::swap(atkfightforce_, other->atkfightforce_);
    std::swap(deffightforce_, other->deffightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyUserRecordViewInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyUserRecordViewInfo_descriptor_;
  metadata.reflection = TCrossLevyUserRecordViewInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevySelfRecordInfo::kRecordResultIdFieldNumber;
const int TCrossLevySelfRecordInfo::kRecordTypeFieldNumber;
const int TCrossLevySelfRecordInfo::kRecordTimeFieldNumber;
const int TCrossLevySelfRecordInfo::kAtkUserInfoFieldNumber;
const int TCrossLevySelfRecordInfo::kDefUserInfoFieldNumber;
const int TCrossLevySelfRecordInfo::kIsAtkWinFieldNumber;
const int TCrossLevySelfRecordInfo::kCityIdFieldNumber;
const int TCrossLevySelfRecordInfo::kCampIdFieldNumber;
const int TCrossLevySelfRecordInfo::kTargetCityIdFieldNumber;
const int TCrossLevySelfRecordInfo::kTargetCampIdFieldNumber;
#endif  // !_MSC_VER

TCrossLevySelfRecordInfo::TCrossLevySelfRecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevySelfRecordInfo)
}

void TCrossLevySelfRecordInfo::InitAsDefaultInstance() {
  atkuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
  defuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TCrossLevySelfRecordInfo::TCrossLevySelfRecordInfo(const TCrossLevySelfRecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevySelfRecordInfo)
}

void TCrossLevySelfRecordInfo::SharedCtor() {
  _cached_size_ = 0;
  recordresultid_ = 0u;
  recordtype_ = 101;
  recordtime_ = GOOGLE_ULONGLONG(0);
  atkuserinfo_ = NULL;
  defuserinfo_ = NULL;
  isatkwin_ = false;
  cityid_ = 0u;
  campid_ = 0u;
  targetcityid_ = 0u;
  targetcampid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevySelfRecordInfo::~TCrossLevySelfRecordInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevySelfRecordInfo)
  SharedDtor();
}

void TCrossLevySelfRecordInfo::SharedDtor() {
  if (this != default_instance_) {
    delete atkuserinfo_;
    delete defuserinfo_;
  }
}

void TCrossLevySelfRecordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevySelfRecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevySelfRecordInfo_descriptor_;
}

const TCrossLevySelfRecordInfo& TCrossLevySelfRecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevySelfRecordInfo* TCrossLevySelfRecordInfo::default_instance_ = NULL;

TCrossLevySelfRecordInfo* TCrossLevySelfRecordInfo::New() const {
  return new TCrossLevySelfRecordInfo;
}

void TCrossLevySelfRecordInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevySelfRecordInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(isatkwin_, campid_);
    recordresultid_ = 0u;
    recordtype_ = 101;
    recordtime_ = GOOGLE_ULONGLONG(0);
    if (has_atkuserinfo()) {
      if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
    if (has_defuserinfo()) {
      if (defuserinfo_ != NULL) defuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }
  ZR_(targetcityid_, targetcampid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevySelfRecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevySelfRecordInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RecordResultId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordresultid_)));
          set_has_recordresultid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RecordType;
        break;
      }

      // optional .pb.ECrossLevyRecordType RecordType = 2;
      case 2: {
        if (tag == 16) {
         parse_RecordType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ECrossLevyRecordType_IsValid(value)) {
            set_recordtype(static_cast< ::pb::ECrossLevyRecordType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RecordTime;
        break;
      }

      // optional uint64 RecordTime = 3;
      case 3: {
        if (tag == 24) {
         parse_RecordTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AtkUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo AtkUserInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_AtkUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atkuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DefUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo DefUserInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_DefUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_IsAtkWin;
        break;
      }

      // optional bool IsAtkWin = 6;
      case 6: {
        if (tag == 48) {
         parse_IsAtkWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isatkwin_)));
          set_has_isatkwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_CityId;
        break;
      }

      // optional uint32 CityId = 7;
      case 7: {
        if (tag == 56) {
         parse_CityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_CampId;
        break;
      }

      // optional uint32 CampId = 8;
      case 8: {
        if (tag == 64) {
         parse_CampId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_TargetCityId;
        break;
      }

      // optional uint32 TargetCityId = 9;
      case 9: {
        if (tag == 72) {
         parse_TargetCityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetcityid_)));
          set_has_targetcityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_TargetCampId;
        break;
      }

      // optional uint32 TargetCampId = 10;
      case 10: {
        if (tag == 80) {
         parse_TargetCampId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetcampid_)));
          set_has_targetcampid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevySelfRecordInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevySelfRecordInfo)
  return false;
#undef DO_
}

void TCrossLevySelfRecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevySelfRecordInfo)
  // optional uint32 RecordResultId = 1;
  if (has_recordresultid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recordresultid(), output);
  }

  // optional .pb.ECrossLevyRecordType RecordType = 2;
  if (has_recordtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->recordtype(), output);
  }

  // optional uint64 RecordTime = 3;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->recordtime(), output);
  }

  // optional .pb.TUserSimpleInfo AtkUserInfo = 4;
  if (has_atkuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->atkuserinfo(), output);
  }

  // optional .pb.TUserSimpleInfo DefUserInfo = 5;
  if (has_defuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->defuserinfo(), output);
  }

  // optional bool IsAtkWin = 6;
  if (has_isatkwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isatkwin(), output);
  }

  // optional uint32 CityId = 7;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cityid(), output);
  }

  // optional uint32 CampId = 8;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->campid(), output);
  }

  // optional uint32 TargetCityId = 9;
  if (has_targetcityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->targetcityid(), output);
  }

  // optional uint32 TargetCampId = 10;
  if (has_targetcampid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->targetcampid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevySelfRecordInfo)
}

::google::protobuf::uint8* TCrossLevySelfRecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevySelfRecordInfo)
  // optional uint32 RecordResultId = 1;
  if (has_recordresultid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recordresultid(), target);
  }

  // optional .pb.ECrossLevyRecordType RecordType = 2;
  if (has_recordtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->recordtype(), target);
  }

  // optional uint64 RecordTime = 3;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->recordtime(), target);
  }

  // optional .pb.TUserSimpleInfo AtkUserInfo = 4;
  if (has_atkuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->atkuserinfo(), target);
  }

  // optional .pb.TUserSimpleInfo DefUserInfo = 5;
  if (has_defuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->defuserinfo(), target);
  }

  // optional bool IsAtkWin = 6;
  if (has_isatkwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isatkwin(), target);
  }

  // optional uint32 CityId = 7;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cityid(), target);
  }

  // optional uint32 CampId = 8;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->campid(), target);
  }

  // optional uint32 TargetCityId = 9;
  if (has_targetcityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->targetcityid(), target);
  }

  // optional uint32 TargetCampId = 10;
  if (has_targetcampid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->targetcampid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevySelfRecordInfo)
  return target;
}

int TCrossLevySelfRecordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RecordResultId = 1;
    if (has_recordresultid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recordresultid());
    }

    // optional .pb.ECrossLevyRecordType RecordType = 2;
    if (has_recordtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->recordtype());
    }

    // optional uint64 RecordTime = 3;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordtime());
    }

    // optional .pb.TUserSimpleInfo AtkUserInfo = 4;
    if (has_atkuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atkuserinfo());
    }

    // optional .pb.TUserSimpleInfo DefUserInfo = 5;
    if (has_defuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defuserinfo());
    }

    // optional bool IsAtkWin = 6;
    if (has_isatkwin()) {
      total_size += 1 + 1;
    }

    // optional uint32 CityId = 7;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 CampId = 8;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 TargetCityId = 9;
    if (has_targetcityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetcityid());
    }

    // optional uint32 TargetCampId = 10;
    if (has_targetcampid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetcampid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevySelfRecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevySelfRecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevySelfRecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevySelfRecordInfo::MergeFrom(const TCrossLevySelfRecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recordresultid()) {
      set_recordresultid(from.recordresultid());
    }
    if (from.has_recordtype()) {
      set_recordtype(from.recordtype());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
    if (from.has_atkuserinfo()) {
      mutable_atkuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.atkuserinfo());
    }
    if (from.has_defuserinfo()) {
      mutable_defuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.defuserinfo());
    }
    if (from.has_isatkwin()) {
      set_isatkwin(from.isatkwin());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_targetcityid()) {
      set_targetcityid(from.targetcityid());
    }
    if (from.has_targetcampid()) {
      set_targetcampid(from.targetcampid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevySelfRecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevySelfRecordInfo::CopyFrom(const TCrossLevySelfRecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevySelfRecordInfo::IsInitialized() const {

  return true;
}

void TCrossLevySelfRecordInfo::Swap(TCrossLevySelfRecordInfo* other) {
  if (other != this) {
    std::swap(recordresultid_, other->recordresultid_);
    std::swap(recordtype_, other->recordtype_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(atkuserinfo_, other->atkuserinfo_);
    std::swap(defuserinfo_, other->defuserinfo_);
    std::swap(isatkwin_, other->isatkwin_);
    std::swap(cityid_, other->cityid_);
    std::swap(campid_, other->campid_);
    std::swap(targetcityid_, other->targetcityid_);
    std::swap(targetcampid_, other->targetcampid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevySelfRecordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevySelfRecordInfo_descriptor_;
  metadata.reflection = TCrossLevySelfRecordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyRecordInfo::kRecordResultIdFieldNumber;
const int TCrossLevyRecordInfo::kRecordTypeFieldNumber;
const int TCrossLevyRecordInfo::kRecordTimeFieldNumber;
const int TCrossLevyRecordInfo::kAtkUserInfoFieldNumber;
const int TCrossLevyRecordInfo::kDefUserInfoFieldNumber;
const int TCrossLevyRecordInfo::kRewardArrFieldNumber;
const int TCrossLevyRecordInfo::kIsAtkWinFieldNumber;
#endif  // !_MSC_VER

TCrossLevyRecordInfo::TCrossLevyRecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyRecordInfo)
}

void TCrossLevyRecordInfo::InitAsDefaultInstance() {
  atkuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
  defuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TCrossLevyRecordInfo::TCrossLevyRecordInfo(const TCrossLevyRecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyRecordInfo)
}

void TCrossLevyRecordInfo::SharedCtor() {
  _cached_size_ = 0;
  recordresultid_ = 0u;
  recordtype_ = 101;
  recordtime_ = GOOGLE_ULONGLONG(0);
  atkuserinfo_ = NULL;
  defuserinfo_ = NULL;
  isatkwin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyRecordInfo::~TCrossLevyRecordInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyRecordInfo)
  SharedDtor();
}

void TCrossLevyRecordInfo::SharedDtor() {
  if (this != default_instance_) {
    delete atkuserinfo_;
    delete defuserinfo_;
  }
}

void TCrossLevyRecordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyRecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyRecordInfo_descriptor_;
}

const TCrossLevyRecordInfo& TCrossLevyRecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyRecordInfo* TCrossLevyRecordInfo::default_instance_ = NULL;

TCrossLevyRecordInfo* TCrossLevyRecordInfo::New() const {
  return new TCrossLevyRecordInfo;
}

void TCrossLevyRecordInfo::Clear() {
  if (_has_bits_[0 / 32] & 95) {
    recordresultid_ = 0u;
    recordtype_ = 101;
    recordtime_ = GOOGLE_ULONGLONG(0);
    if (has_atkuserinfo()) {
      if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
    if (has_defuserinfo()) {
      if (defuserinfo_ != NULL) defuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
    isatkwin_ = false;
  }
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyRecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyRecordInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RecordResultId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordresultid_)));
          set_has_recordresultid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RecordType;
        break;
      }

      // optional .pb.ECrossLevyRecordType RecordType = 2;
      case 2: {
        if (tag == 16) {
         parse_RecordType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ECrossLevyRecordType_IsValid(value)) {
            set_recordtype(static_cast< ::pb::ECrossLevyRecordType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RecordTime;
        break;
      }

      // optional uint64 RecordTime = 3;
      case 3: {
        if (tag == 24) {
         parse_RecordTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AtkUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo AtkUserInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_AtkUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atkuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DefUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo DefUserInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_DefUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 6;
      case 6: {
        if (tag == 50) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_RewardArr;
        if (input->ExpectTag(56)) goto parse_IsAtkWin;
        break;
      }

      // optional bool IsAtkWin = 7;
      case 7: {
        if (tag == 56) {
         parse_IsAtkWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isatkwin_)));
          set_has_isatkwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyRecordInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyRecordInfo)
  return false;
#undef DO_
}

void TCrossLevyRecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyRecordInfo)
  // optional uint32 RecordResultId = 1;
  if (has_recordresultid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recordresultid(), output);
  }

  // optional .pb.ECrossLevyRecordType RecordType = 2;
  if (has_recordtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->recordtype(), output);
  }

  // optional uint64 RecordTime = 3;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->recordtime(), output);
  }

  // optional .pb.TUserSimpleInfo AtkUserInfo = 4;
  if (has_atkuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->atkuserinfo(), output);
  }

  // optional .pb.TUserSimpleInfo DefUserInfo = 5;
  if (has_defuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->defuserinfo(), output);
  }

  // repeated .pb.TCommonReward RewardArr = 6;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rewardarr(i), output);
  }

  // optional bool IsAtkWin = 7;
  if (has_isatkwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isatkwin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyRecordInfo)
}

::google::protobuf::uint8* TCrossLevyRecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyRecordInfo)
  // optional uint32 RecordResultId = 1;
  if (has_recordresultid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recordresultid(), target);
  }

  // optional .pb.ECrossLevyRecordType RecordType = 2;
  if (has_recordtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->recordtype(), target);
  }

  // optional uint64 RecordTime = 3;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->recordtime(), target);
  }

  // optional .pb.TUserSimpleInfo AtkUserInfo = 4;
  if (has_atkuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->atkuserinfo(), target);
  }

  // optional .pb.TUserSimpleInfo DefUserInfo = 5;
  if (has_defuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->defuserinfo(), target);
  }

  // repeated .pb.TCommonReward RewardArr = 6;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rewardarr(i), target);
  }

  // optional bool IsAtkWin = 7;
  if (has_isatkwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isatkwin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyRecordInfo)
  return target;
}

int TCrossLevyRecordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RecordResultId = 1;
    if (has_recordresultid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recordresultid());
    }

    // optional .pb.ECrossLevyRecordType RecordType = 2;
    if (has_recordtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->recordtype());
    }

    // optional uint64 RecordTime = 3;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordtime());
    }

    // optional .pb.TUserSimpleInfo AtkUserInfo = 4;
    if (has_atkuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atkuserinfo());
    }

    // optional .pb.TUserSimpleInfo DefUserInfo = 5;
    if (has_defuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defuserinfo());
    }

    // optional bool IsAtkWin = 7;
    if (has_isatkwin()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pb.TCommonReward RewardArr = 6;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyRecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyRecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyRecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyRecordInfo::MergeFrom(const TCrossLevyRecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recordresultid()) {
      set_recordresultid(from.recordresultid());
    }
    if (from.has_recordtype()) {
      set_recordtype(from.recordtype());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
    if (from.has_atkuserinfo()) {
      mutable_atkuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.atkuserinfo());
    }
    if (from.has_defuserinfo()) {
      mutable_defuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.defuserinfo());
    }
    if (from.has_isatkwin()) {
      set_isatkwin(from.isatkwin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyRecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyRecordInfo::CopyFrom(const TCrossLevyRecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyRecordInfo::IsInitialized() const {

  return true;
}

void TCrossLevyRecordInfo::Swap(TCrossLevyRecordInfo* other) {
  if (other != this) {
    std::swap(recordresultid_, other->recordresultid_);
    std::swap(recordtype_, other->recordtype_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(atkuserinfo_, other->atkuserinfo_);
    std::swap(defuserinfo_, other->defuserinfo_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(isatkwin_, other->isatkwin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyRecordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyRecordInfo_descriptor_;
  metadata.reflection = TCrossLevyRecordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyBossInfo::kBossIdFieldNumber;
const int TCrossLevyBossInfo::kRefreshTimeFieldNumber;
const int TCrossLevyBossInfo::kHpFieldNumber;
const int TCrossLevyBossInfo::kMaxHpFieldNumber;
const int TCrossLevyBossInfo::kFightForceFieldNumber;
const int TCrossLevyBossInfo::kPosFieldNumber;
#endif  // !_MSC_VER

TCrossLevyBossInfo::TCrossLevyBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyBossInfo)
}

void TCrossLevyBossInfo::InitAsDefaultInstance() {
}

TCrossLevyBossInfo::TCrossLevyBossInfo(const TCrossLevyBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyBossInfo)
}

void TCrossLevyBossInfo::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  refreshtime_ = GOOGLE_ULONGLONG(0);
  hp_ = GOOGLE_ULONGLONG(0);
  maxhp_ = GOOGLE_ULONGLONG(0);
  fightforce_ = GOOGLE_ULONGLONG(0);
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyBossInfo::~TCrossLevyBossInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyBossInfo)
  SharedDtor();
}

void TCrossLevyBossInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyBossInfo_descriptor_;
}

const TCrossLevyBossInfo& TCrossLevyBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyBossInfo* TCrossLevyBossInfo::default_instance_ = NULL;

TCrossLevyBossInfo* TCrossLevyBossInfo::New() const {
  return new TCrossLevyBossInfo;
}

void TCrossLevyBossInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyBossInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(refreshtime_, fightforce_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyBossInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RefreshTime;
        break;
      }

      // optional uint64 RefreshTime = 2;
      case 2: {
        if (tag == 16) {
         parse_RefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refreshtime_)));
          set_has_refreshtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Hp;
        break;
      }

      // optional uint64 Hp = 3;
      case 3: {
        if (tag == 24) {
         parse_Hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MaxHp;
        break;
      }

      // optional uint64 MaxHp = 4;
      case 4: {
        if (tag == 32) {
         parse_MaxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 5;
      case 5: {
        if (tag == 40) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Pos;
        break;
      }

      // optional uint32 Pos = 6;
      case 6: {
        if (tag == 48) {
         parse_Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyBossInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyBossInfo)
  return false;
#undef DO_
}

void TCrossLevyBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyBossInfo)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  // optional uint64 RefreshTime = 2;
  if (has_refreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->refreshtime(), output);
  }

  // optional uint64 Hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hp(), output);
  }

  // optional uint64 MaxHp = 4;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->maxhp(), output);
  }

  // optional uint64 FightForce = 5;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fightforce(), output);
  }

  // optional uint32 Pos = 6;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyBossInfo)
}

::google::protobuf::uint8* TCrossLevyBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyBossInfo)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  // optional uint64 RefreshTime = 2;
  if (has_refreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->refreshtime(), target);
  }

  // optional uint64 Hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hp(), target);
  }

  // optional uint64 MaxHp = 4;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->maxhp(), target);
  }

  // optional uint64 FightForce = 5;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->fightforce(), target);
  }

  // optional uint32 Pos = 6;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyBossInfo)
  return target;
}

int TCrossLevyBossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional uint64 RefreshTime = 2;
    if (has_refreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refreshtime());
    }

    // optional uint64 Hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hp());
    }

    // optional uint64 MaxHp = 4;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxhp());
    }

    // optional uint64 FightForce = 5;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

    // optional uint32 Pos = 6;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyBossInfo::MergeFrom(const TCrossLevyBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_refreshtime()) {
      set_refreshtime(from.refreshtime());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyBossInfo::CopyFrom(const TCrossLevyBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyBossInfo::IsInitialized() const {

  return true;
}

void TCrossLevyBossInfo::Swap(TCrossLevyBossInfo* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(refreshtime_, other->refreshtime_);
    std::swap(hp_, other->hp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyBossInfo_descriptor_;
  metadata.reflection = TCrossLevyBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyMyCampInfo::kCityIdFieldNumber;
const int TCrossLevyMyCampInfo::kCampIdFieldNumber;
const int TCrossLevyMyCampInfo::kSettleTimeFieldNumber;
const int TCrossLevyMyCampInfo::kSettleNumFieldNumber;
const int TCrossLevyMyCampInfo::kRewardArrFieldNumber;
const int TCrossLevyMyCampInfo::kExtraRewardArrFieldNumber;
const int TCrossLevyMyCampInfo::kBePlunderedNumFieldNumber;
const int TCrossLevyMyCampInfo::kSettleScoreFieldNumber;
#endif  // !_MSC_VER

TCrossLevyMyCampInfo::TCrossLevyMyCampInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyMyCampInfo)
}

void TCrossLevyMyCampInfo::InitAsDefaultInstance() {
}

TCrossLevyMyCampInfo::TCrossLevyMyCampInfo(const TCrossLevyMyCampInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyMyCampInfo)
}

void TCrossLevyMyCampInfo::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  campid_ = 0u;
  settletime_ = GOOGLE_ULONGLONG(0);
  settlenum_ = 0u;
  beplunderednum_ = 0u;
  settlescore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyMyCampInfo::~TCrossLevyMyCampInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyMyCampInfo)
  SharedDtor();
}

void TCrossLevyMyCampInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyMyCampInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyMyCampInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyMyCampInfo_descriptor_;
}

const TCrossLevyMyCampInfo& TCrossLevyMyCampInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyMyCampInfo* TCrossLevyMyCampInfo::default_instance_ = NULL;

TCrossLevyMyCampInfo* TCrossLevyMyCampInfo::New() const {
  return new TCrossLevyMyCampInfo;
}

void TCrossLevyMyCampInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyMyCampInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 207) {
    ZR_(cityid_, settletime_);
    ZR_(settlenum_, beplunderednum_);
    settlescore_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewardarr_.Clear();
  extrarewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyMyCampInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyMyCampInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CampId;
        break;
      }

      // optional uint32 CampId = 2;
      case 2: {
        if (tag == 16) {
         parse_CampId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SettleTime;
        break;
      }

      // optional uint64 SettleTime = 3;
      case 3: {
        if (tag == 24) {
         parse_SettleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &settletime_)));
          set_has_settletime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SettleNum;
        break;
      }

      // optional uint32 SettleNum = 4;
      case 4: {
        if (tag == 32) {
         parse_SettleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &settlenum_)));
          set_has_settlenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 5;
      case 5: {
        if (tag == 42) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_RewardArr;
        if (input->ExpectTag(50)) goto parse_ExtraRewardArr;
        break;
      }

      // repeated .pb.TCommonReward ExtraRewardArr = 6;
      case 6: {
        if (tag == 50) {
         parse_ExtraRewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extrarewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ExtraRewardArr;
        if (input->ExpectTag(56)) goto parse_BePlunderedNum;
        break;
      }

      // optional uint32 BePlunderedNum = 7;
      case 7: {
        if (tag == 56) {
         parse_BePlunderedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beplunderednum_)));
          set_has_beplunderednum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_SettleScore;
        break;
      }

      // optional uint32 SettleScore = 8;
      case 8: {
        if (tag == 64) {
         parse_SettleScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &settlescore_)));
          set_has_settlescore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyMyCampInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyMyCampInfo)
  return false;
#undef DO_
}

void TCrossLevyMyCampInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyMyCampInfo)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // optional uint32 CampId = 2;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->campid(), output);
  }

  // optional uint64 SettleTime = 3;
  if (has_settletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->settletime(), output);
  }

  // optional uint32 SettleNum = 4;
  if (has_settlenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->settlenum(), output);
  }

  // repeated .pb.TCommonReward RewardArr = 5;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rewardarr(i), output);
  }

  // repeated .pb.TCommonReward ExtraRewardArr = 6;
  for (int i = 0; i < this->extrarewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->extrarewardarr(i), output);
  }

  // optional uint32 BePlunderedNum = 7;
  if (has_beplunderednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->beplunderednum(), output);
  }

  // optional uint32 SettleScore = 8;
  if (has_settlescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->settlescore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyMyCampInfo)
}

::google::protobuf::uint8* TCrossLevyMyCampInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyMyCampInfo)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // optional uint32 CampId = 2;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->campid(), target);
  }

  // optional uint64 SettleTime = 3;
  if (has_settletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->settletime(), target);
  }

  // optional uint32 SettleNum = 4;
  if (has_settlenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->settlenum(), target);
  }

  // repeated .pb.TCommonReward RewardArr = 5;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rewardarr(i), target);
  }

  // repeated .pb.TCommonReward ExtraRewardArr = 6;
  for (int i = 0; i < this->extrarewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->extrarewardarr(i), target);
  }

  // optional uint32 BePlunderedNum = 7;
  if (has_beplunderednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->beplunderednum(), target);
  }

  // optional uint32 SettleScore = 8;
  if (has_settlescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->settlescore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyMyCampInfo)
  return target;
}

int TCrossLevyMyCampInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 CampId = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // optional uint64 SettleTime = 3;
    if (has_settletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->settletime());
    }

    // optional uint32 SettleNum = 4;
    if (has_settlenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->settlenum());
    }

    // optional uint32 BePlunderedNum = 7;
    if (has_beplunderednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beplunderednum());
    }

    // optional uint32 SettleScore = 8;
    if (has_settlescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->settlescore());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 5;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  // repeated .pb.TCommonReward ExtraRewardArr = 6;
  total_size += 1 * this->extrarewardarr_size();
  for (int i = 0; i < this->extrarewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extrarewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyMyCampInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyMyCampInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyMyCampInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyMyCampInfo::MergeFrom(const TCrossLevyMyCampInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  extrarewardarr_.MergeFrom(from.extrarewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_settletime()) {
      set_settletime(from.settletime());
    }
    if (from.has_settlenum()) {
      set_settlenum(from.settlenum());
    }
    if (from.has_beplunderednum()) {
      set_beplunderednum(from.beplunderednum());
    }
    if (from.has_settlescore()) {
      set_settlescore(from.settlescore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyMyCampInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyMyCampInfo::CopyFrom(const TCrossLevyMyCampInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyMyCampInfo::IsInitialized() const {

  return true;
}

void TCrossLevyMyCampInfo::Swap(TCrossLevyMyCampInfo* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(campid_, other->campid_);
    std::swap(settletime_, other->settletime_);
    std::swap(settlenum_, other->settlenum_);
    rewardarr_.Swap(&other->rewardarr_);
    extrarewardarr_.Swap(&other->extrarewardarr_);
    std::swap(beplunderednum_, other->beplunderednum_);
    std::swap(settlescore_, other->settlescore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyMyCampInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyMyCampInfo_descriptor_;
  metadata.reflection = TCrossLevyMyCampInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyCampInfo::kUserInfoFieldNumber;
const int TCrossLevyCampInfo::kCityIdFieldNumber;
const int TCrossLevyCampInfo::kCampIdFieldNumber;
const int TCrossLevyCampInfo::kRewardArrFieldNumber;
const int TCrossLevyCampInfo::kBePlunderedNumFieldNumber;
const int TCrossLevyCampInfo::kSettleNumFieldNumber;
const int TCrossLevyCampInfo::kLastBeAttackedTimeFieldNumber;
const int TCrossLevyCampInfo::kLastBePlunderedTimeFieldNumber;
const int TCrossLevyCampInfo::kIsEnemyFieldNumber;
#endif  // !_MSC_VER

TCrossLevyCampInfo::TCrossLevyCampInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyCampInfo)
}

void TCrossLevyCampInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TCrossLevyCampInfo::TCrossLevyCampInfo(const TCrossLevyCampInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyCampInfo)
}

void TCrossLevyCampInfo::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  cityid_ = 0u;
  campid_ = 0u;
  beplunderednum_ = 0u;
  settlenum_ = 0u;
  lastbeattackedtime_ = GOOGLE_ULONGLONG(0);
  lastbeplunderedtime_ = GOOGLE_ULONGLONG(0);
  isenemy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyCampInfo::~TCrossLevyCampInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyCampInfo)
  SharedDtor();
}

void TCrossLevyCampInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TCrossLevyCampInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyCampInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyCampInfo_descriptor_;
}

const TCrossLevyCampInfo& TCrossLevyCampInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyCampInfo* TCrossLevyCampInfo::default_instance_ = NULL;

TCrossLevyCampInfo* TCrossLevyCampInfo::New() const {
  return new TCrossLevyCampInfo;
}

void TCrossLevyCampInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyCampInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(cityid_, campid_);
    ZR_(beplunderednum_, lastbeplunderedtime_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }
  isenemy_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyCampInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyCampInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CityId;
        break;
      }

      // optional uint32 CityId = 2;
      case 2: {
        if (tag == 16) {
         parse_CityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CampId;
        break;
      }

      // optional uint32 CampId = 3;
      case 3: {
        if (tag == 24) {
         parse_CampId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 4;
      case 4: {
        if (tag == 34) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RewardArr;
        if (input->ExpectTag(40)) goto parse_BePlunderedNum;
        break;
      }

      // optional uint32 BePlunderedNum = 5;
      case 5: {
        if (tag == 40) {
         parse_BePlunderedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beplunderednum_)));
          set_has_beplunderednum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_SettleNum;
        break;
      }

      // optional uint32 SettleNum = 6;
      case 6: {
        if (tag == 48) {
         parse_SettleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &settlenum_)));
          set_has_settlenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_LastBeAttackedTime;
        break;
      }

      // optional uint64 LastBeAttackedTime = 7;
      case 7: {
        if (tag == 56) {
         parse_LastBeAttackedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastbeattackedtime_)));
          set_has_lastbeattackedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_LastBePlunderedTime;
        break;
      }

      // optional uint64 LastBePlunderedTime = 8;
      case 8: {
        if (tag == 64) {
         parse_LastBePlunderedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastbeplunderedtime_)));
          set_has_lastbeplunderedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_IsEnemy;
        break;
      }

      // optional bool IsEnemy = 9;
      case 9: {
        if (tag == 72) {
         parse_IsEnemy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isenemy_)));
          set_has_isenemy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyCampInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyCampInfo)
  return false;
#undef DO_
}

void TCrossLevyCampInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyCampInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint32 CityId = 2;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cityid(), output);
  }

  // optional uint32 CampId = 3;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->campid(), output);
  }

  // repeated .pb.TCommonReward RewardArr = 4;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rewardarr(i), output);
  }

  // optional uint32 BePlunderedNum = 5;
  if (has_beplunderednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->beplunderednum(), output);
  }

  // optional uint32 SettleNum = 6;
  if (has_settlenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->settlenum(), output);
  }

  // optional uint64 LastBeAttackedTime = 7;
  if (has_lastbeattackedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->lastbeattackedtime(), output);
  }

  // optional uint64 LastBePlunderedTime = 8;
  if (has_lastbeplunderedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->lastbeplunderedtime(), output);
  }

  // optional bool IsEnemy = 9;
  if (has_isenemy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isenemy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyCampInfo)
}

::google::protobuf::uint8* TCrossLevyCampInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyCampInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint32 CityId = 2;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cityid(), target);
  }

  // optional uint32 CampId = 3;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->campid(), target);
  }

  // repeated .pb.TCommonReward RewardArr = 4;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rewardarr(i), target);
  }

  // optional uint32 BePlunderedNum = 5;
  if (has_beplunderednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->beplunderednum(), target);
  }

  // optional uint32 SettleNum = 6;
  if (has_settlenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->settlenum(), target);
  }

  // optional uint64 LastBeAttackedTime = 7;
  if (has_lastbeattackedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->lastbeattackedtime(), target);
  }

  // optional uint64 LastBePlunderedTime = 8;
  if (has_lastbeplunderedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->lastbeplunderedtime(), target);
  }

  // optional bool IsEnemy = 9;
  if (has_isenemy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isenemy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyCampInfo)
  return target;
}

int TCrossLevyCampInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 CityId = 2;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 CampId = 3;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // optional uint32 BePlunderedNum = 5;
    if (has_beplunderednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beplunderednum());
    }

    // optional uint32 SettleNum = 6;
    if (has_settlenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->settlenum());
    }

    // optional uint64 LastBeAttackedTime = 7;
    if (has_lastbeattackedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastbeattackedtime());
    }

    // optional uint64 LastBePlunderedTime = 8;
    if (has_lastbeplunderedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastbeplunderedtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool IsEnemy = 9;
    if (has_isenemy()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pb.TCommonReward RewardArr = 4;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyCampInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyCampInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyCampInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyCampInfo::MergeFrom(const TCrossLevyCampInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_beplunderednum()) {
      set_beplunderednum(from.beplunderednum());
    }
    if (from.has_settlenum()) {
      set_settlenum(from.settlenum());
    }
    if (from.has_lastbeattackedtime()) {
      set_lastbeattackedtime(from.lastbeattackedtime());
    }
    if (from.has_lastbeplunderedtime()) {
      set_lastbeplunderedtime(from.lastbeplunderedtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isenemy()) {
      set_isenemy(from.isenemy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyCampInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyCampInfo::CopyFrom(const TCrossLevyCampInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyCampInfo::IsInitialized() const {

  return true;
}

void TCrossLevyCampInfo::Swap(TCrossLevyCampInfo* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(cityid_, other->cityid_);
    std::swap(campid_, other->campid_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(beplunderednum_, other->beplunderednum_);
    std::swap(settlenum_, other->settlenum_);
    std::swap(lastbeattackedtime_, other->lastbeattackedtime_);
    std::swap(lastbeplunderedtime_, other->lastbeplunderedtime_);
    std::swap(isenemy_, other->isenemy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyCampInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyCampInfo_descriptor_;
  metadata.reflection = TCrossLevyCampInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyMonsterHpInfo::kHidFieldNumber;
const int TCrossLevyMonsterHpInfo::kCurHpFieldNumber;
const int TCrossLevyMonsterHpInfo::kMaxHpFieldNumber;
#endif  // !_MSC_VER

TCrossLevyMonsterHpInfo::TCrossLevyMonsterHpInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyMonsterHpInfo)
}

void TCrossLevyMonsterHpInfo::InitAsDefaultInstance() {
}

TCrossLevyMonsterHpInfo::TCrossLevyMonsterHpInfo(const TCrossLevyMonsterHpInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyMonsterHpInfo)
}

void TCrossLevyMonsterHpInfo::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  curhp_ = GOOGLE_ULONGLONG(0);
  maxhp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyMonsterHpInfo::~TCrossLevyMonsterHpInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyMonsterHpInfo)
  SharedDtor();
}

void TCrossLevyMonsterHpInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyMonsterHpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyMonsterHpInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyMonsterHpInfo_descriptor_;
}

const TCrossLevyMonsterHpInfo& TCrossLevyMonsterHpInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyMonsterHpInfo* TCrossLevyMonsterHpInfo::default_instance_ = NULL;

TCrossLevyMonsterHpInfo* TCrossLevyMonsterHpInfo::New() const {
  return new TCrossLevyMonsterHpInfo;
}

void TCrossLevyMonsterHpInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyMonsterHpInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(curhp_, hid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyMonsterHpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyMonsterHpInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CurHp;
        break;
      }

      // optional uint64 CurHp = 2;
      case 2: {
        if (tag == 16) {
         parse_CurHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MaxHp;
        break;
      }

      // optional uint64 MaxHp = 3;
      case 3: {
        if (tag == 24) {
         parse_MaxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyMonsterHpInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyMonsterHpInfo)
  return false;
#undef DO_
}

void TCrossLevyMonsterHpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyMonsterHpInfo)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // optional uint64 CurHp = 2;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->curhp(), output);
  }

  // optional uint64 MaxHp = 3;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->maxhp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyMonsterHpInfo)
}

::google::protobuf::uint8* TCrossLevyMonsterHpInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyMonsterHpInfo)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // optional uint64 CurHp = 2;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->curhp(), target);
  }

  // optional uint64 MaxHp = 3;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->maxhp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyMonsterHpInfo)
  return target;
}

int TCrossLevyMonsterHpInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint64 CurHp = 2;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curhp());
    }

    // optional uint64 MaxHp = 3;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxhp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyMonsterHpInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyMonsterHpInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyMonsterHpInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyMonsterHpInfo::MergeFrom(const TCrossLevyMonsterHpInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyMonsterHpInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyMonsterHpInfo::CopyFrom(const TCrossLevyMonsterHpInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyMonsterHpInfo::IsInitialized() const {

  return true;
}

void TCrossLevyMonsterHpInfo::Swap(TCrossLevyMonsterHpInfo* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(curhp_, other->curhp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyMonsterHpInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyMonsterHpInfo_descriptor_;
  metadata.reflection = TCrossLevyMonsterHpInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyMonsterArmyHpInfo::kIdFieldNumber;
const int TCrossLevyMonsterArmyHpInfo::kMonsterHpInfoArrFieldNumber;
#endif  // !_MSC_VER

TCrossLevyMonsterArmyHpInfo::TCrossLevyMonsterArmyHpInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyMonsterArmyHpInfo)
}

void TCrossLevyMonsterArmyHpInfo::InitAsDefaultInstance() {
}

TCrossLevyMonsterArmyHpInfo::TCrossLevyMonsterArmyHpInfo(const TCrossLevyMonsterArmyHpInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyMonsterArmyHpInfo)
}

void TCrossLevyMonsterArmyHpInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyMonsterArmyHpInfo::~TCrossLevyMonsterArmyHpInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyMonsterArmyHpInfo)
  SharedDtor();
}

void TCrossLevyMonsterArmyHpInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyMonsterArmyHpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyMonsterArmyHpInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyMonsterArmyHpInfo_descriptor_;
}

const TCrossLevyMonsterArmyHpInfo& TCrossLevyMonsterArmyHpInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyMonsterArmyHpInfo* TCrossLevyMonsterArmyHpInfo::default_instance_ = NULL;

TCrossLevyMonsterArmyHpInfo* TCrossLevyMonsterArmyHpInfo::New() const {
  return new TCrossLevyMonsterArmyHpInfo;
}

void TCrossLevyMonsterArmyHpInfo::Clear() {
  id_ = 0u;
  monsterhpinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyMonsterArmyHpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyMonsterArmyHpInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MonsterHpInfoArr;
        break;
      }

      // repeated .pb.TCrossLevyMonsterHpInfo MonsterHpInfoArr = 2;
      case 2: {
        if (tag == 18) {
         parse_MonsterHpInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterhpinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MonsterHpInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyMonsterArmyHpInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyMonsterArmyHpInfo)
  return false;
#undef DO_
}

void TCrossLevyMonsterArmyHpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyMonsterArmyHpInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .pb.TCrossLevyMonsterHpInfo MonsterHpInfoArr = 2;
  for (int i = 0; i < this->monsterhpinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->monsterhpinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyMonsterArmyHpInfo)
}

::google::protobuf::uint8* TCrossLevyMonsterArmyHpInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyMonsterArmyHpInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .pb.TCrossLevyMonsterHpInfo MonsterHpInfoArr = 2;
  for (int i = 0; i < this->monsterhpinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->monsterhpinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyMonsterArmyHpInfo)
  return target;
}

int TCrossLevyMonsterArmyHpInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated .pb.TCrossLevyMonsterHpInfo MonsterHpInfoArr = 2;
  total_size += 1 * this->monsterhpinfoarr_size();
  for (int i = 0; i < this->monsterhpinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterhpinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyMonsterArmyHpInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyMonsterArmyHpInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyMonsterArmyHpInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyMonsterArmyHpInfo::MergeFrom(const TCrossLevyMonsterArmyHpInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterhpinfoarr_.MergeFrom(from.monsterhpinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyMonsterArmyHpInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyMonsterArmyHpInfo::CopyFrom(const TCrossLevyMonsterArmyHpInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyMonsterArmyHpInfo::IsInitialized() const {

  return true;
}

void TCrossLevyMonsterArmyHpInfo::Swap(TCrossLevyMonsterArmyHpInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    monsterhpinfoarr_.Swap(&other->monsterhpinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyMonsterArmyHpInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyMonsterArmyHpInfo_descriptor_;
  metadata.reflection = TCrossLevyMonsterArmyHpInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyMonsterInfo::kIdFieldNumber;
const int TCrossLevyMonsterInfo::kPosFieldNumber;
const int TCrossLevyMonsterInfo::kMonsterArmyHpInfoArrFieldNumber;
#endif  // !_MSC_VER

TCrossLevyMonsterInfo::TCrossLevyMonsterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyMonsterInfo)
}

void TCrossLevyMonsterInfo::InitAsDefaultInstance() {
}

TCrossLevyMonsterInfo::TCrossLevyMonsterInfo(const TCrossLevyMonsterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyMonsterInfo)
}

void TCrossLevyMonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyMonsterInfo::~TCrossLevyMonsterInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyMonsterInfo)
  SharedDtor();
}

void TCrossLevyMonsterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyMonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyMonsterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyMonsterInfo_descriptor_;
}

const TCrossLevyMonsterInfo& TCrossLevyMonsterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyMonsterInfo* TCrossLevyMonsterInfo::default_instance_ = NULL;

TCrossLevyMonsterInfo* TCrossLevyMonsterInfo::New() const {
  return new TCrossLevyMonsterInfo;
}

void TCrossLevyMonsterInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyMonsterInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, pos_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  monsterarmyhpinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyMonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyMonsterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Pos;
        break;
      }

      // optional uint32 Pos = 2;
      case 2: {
        if (tag == 16) {
         parse_Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_MonsterArmyHpInfoArr;
        break;
      }

      // repeated .pb.TCrossLevyMonsterArmyHpInfo MonsterArmyHpInfoArr = 3;
      case 3: {
        if (tag == 26) {
         parse_MonsterArmyHpInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterarmyhpinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_MonsterArmyHpInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyMonsterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyMonsterInfo)
  return false;
#undef DO_
}

void TCrossLevyMonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyMonsterInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // repeated .pb.TCrossLevyMonsterArmyHpInfo MonsterArmyHpInfoArr = 3;
  for (int i = 0; i < this->monsterarmyhpinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->monsterarmyhpinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyMonsterInfo)
}

::google::protobuf::uint8* TCrossLevyMonsterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyMonsterInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // repeated .pb.TCrossLevyMonsterArmyHpInfo MonsterArmyHpInfoArr = 3;
  for (int i = 0; i < this->monsterarmyhpinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->monsterarmyhpinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyMonsterInfo)
  return target;
}

int TCrossLevyMonsterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  // repeated .pb.TCrossLevyMonsterArmyHpInfo MonsterArmyHpInfoArr = 3;
  total_size += 1 * this->monsterarmyhpinfoarr_size();
  for (int i = 0; i < this->monsterarmyhpinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterarmyhpinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyMonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyMonsterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyMonsterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyMonsterInfo::MergeFrom(const TCrossLevyMonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterarmyhpinfoarr_.MergeFrom(from.monsterarmyhpinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyMonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyMonsterInfo::CopyFrom(const TCrossLevyMonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyMonsterInfo::IsInitialized() const {

  return true;
}

void TCrossLevyMonsterInfo::Swap(TCrossLevyMonsterInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pos_, other->pos_);
    monsterarmyhpinfoarr_.Swap(&other->monsterarmyhpinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyMonsterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyMonsterInfo_descriptor_;
  metadata.reflection = TCrossLevyMonsterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyHidPosInfo::kHidFieldNumber;
const int TCrossLevyHidPosInfo::kPosFieldNumber;
#endif  // !_MSC_VER

TCrossLevyHidPosInfo::TCrossLevyHidPosInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyHidPosInfo)
}

void TCrossLevyHidPosInfo::InitAsDefaultInstance() {
}

TCrossLevyHidPosInfo::TCrossLevyHidPosInfo(const TCrossLevyHidPosInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyHidPosInfo)
}

void TCrossLevyHidPosInfo::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyHidPosInfo::~TCrossLevyHidPosInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyHidPosInfo)
  SharedDtor();
}

void TCrossLevyHidPosInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyHidPosInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyHidPosInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyHidPosInfo_descriptor_;
}

const TCrossLevyHidPosInfo& TCrossLevyHidPosInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyHidPosInfo* TCrossLevyHidPosInfo::default_instance_ = NULL;

TCrossLevyHidPosInfo* TCrossLevyHidPosInfo::New() const {
  return new TCrossLevyHidPosInfo;
}

void TCrossLevyHidPosInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyHidPosInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hid_, pos_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyHidPosInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyHidPosInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Pos;
        break;
      }

      // optional uint32 Pos = 2;
      case 2: {
        if (tag == 16) {
         parse_Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyHidPosInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyHidPosInfo)
  return false;
#undef DO_
}

void TCrossLevyHidPosInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyHidPosInfo)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyHidPosInfo)
}

::google::protobuf::uint8* TCrossLevyHidPosInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyHidPosInfo)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyHidPosInfo)
  return target;
}

int TCrossLevyHidPosInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint32 Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyHidPosInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyHidPosInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyHidPosInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyHidPosInfo::MergeFrom(const TCrossLevyHidPosInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyHidPosInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyHidPosInfo::CopyFrom(const TCrossLevyHidPosInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyHidPosInfo::IsInitialized() const {

  return true;
}

void TCrossLevyHidPosInfo::Swap(TCrossLevyHidPosInfo* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyHidPosInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyHidPosInfo_descriptor_;
  metadata.reflection = TCrossLevyHidPosInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyFormationInfo::kFormationIdFieldNumber;
const int TCrossLevyFormationInfo::kHidPosArrFieldNumber;
#endif  // !_MSC_VER

TCrossLevyFormationInfo::TCrossLevyFormationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyFormationInfo)
}

void TCrossLevyFormationInfo::InitAsDefaultInstance() {
}

TCrossLevyFormationInfo::TCrossLevyFormationInfo(const TCrossLevyFormationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyFormationInfo)
}

void TCrossLevyFormationInfo::SharedCtor() {
  _cached_size_ = 0;
  formationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyFormationInfo::~TCrossLevyFormationInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyFormationInfo)
  SharedDtor();
}

void TCrossLevyFormationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyFormationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyFormationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyFormationInfo_descriptor_;
}

const TCrossLevyFormationInfo& TCrossLevyFormationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyFormationInfo* TCrossLevyFormationInfo::default_instance_ = NULL;

TCrossLevyFormationInfo* TCrossLevyFormationInfo::New() const {
  return new TCrossLevyFormationInfo;
}

void TCrossLevyFormationInfo::Clear() {
  formationid_ = 0u;
  hidposarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyFormationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyFormationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FormationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &formationid_)));
          set_has_formationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_HidPosArr;
        break;
      }

      // repeated .pb.TCrossLevyHidPosInfo HidPosArr = 2;
      case 2: {
        if (tag == 18) {
         parse_HidPosArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hidposarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_HidPosArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyFormationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyFormationInfo)
  return false;
#undef DO_
}

void TCrossLevyFormationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyFormationInfo)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->formationid(), output);
  }

  // repeated .pb.TCrossLevyHidPosInfo HidPosArr = 2;
  for (int i = 0; i < this->hidposarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hidposarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyFormationInfo)
}

::google::protobuf::uint8* TCrossLevyFormationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyFormationInfo)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->formationid(), target);
  }

  // repeated .pb.TCrossLevyHidPosInfo HidPosArr = 2;
  for (int i = 0; i < this->hidposarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hidposarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyFormationInfo)
  return target;
}

int TCrossLevyFormationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FormationId = 1;
    if (has_formationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->formationid());
    }

  }
  // repeated .pb.TCrossLevyHidPosInfo HidPosArr = 2;
  total_size += 1 * this->hidposarr_size();
  for (int i = 0; i < this->hidposarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hidposarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyFormationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyFormationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyFormationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyFormationInfo::MergeFrom(const TCrossLevyFormationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  hidposarr_.MergeFrom(from.hidposarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formationid()) {
      set_formationid(from.formationid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyFormationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyFormationInfo::CopyFrom(const TCrossLevyFormationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyFormationInfo::IsInitialized() const {

  return true;
}

void TCrossLevyFormationInfo::Swap(TCrossLevyFormationInfo* other) {
  if (other != this) {
    std::swap(formationid_, other->formationid_);
    hidposarr_.Swap(&other->hidposarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyFormationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyFormationInfo_descriptor_;
  metadata.reflection = TCrossLevyFormationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyEnemyFormation::kFormationIdFieldNumber;
const int TCrossLevyEnemyFormation::kUnitArrFieldNumber;
const int TCrossLevyEnemyFormation::kFightForceFieldNumber;
#endif  // !_MSC_VER

TCrossLevyEnemyFormation::TCrossLevyEnemyFormation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyEnemyFormation)
}

void TCrossLevyEnemyFormation::InitAsDefaultInstance() {
}

TCrossLevyEnemyFormation::TCrossLevyEnemyFormation(const TCrossLevyEnemyFormation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyEnemyFormation)
}

void TCrossLevyEnemyFormation::SharedCtor() {
  _cached_size_ = 0;
  formationid_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyEnemyFormation::~TCrossLevyEnemyFormation() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyEnemyFormation)
  SharedDtor();
}

void TCrossLevyEnemyFormation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyEnemyFormation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyEnemyFormation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyEnemyFormation_descriptor_;
}

const TCrossLevyEnemyFormation& TCrossLevyEnemyFormation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyEnemyFormation* TCrossLevyEnemyFormation::default_instance_ = NULL;

TCrossLevyEnemyFormation* TCrossLevyEnemyFormation::New() const {
  return new TCrossLevyEnemyFormation;
}

void TCrossLevyEnemyFormation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyEnemyFormation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fightforce_, formationid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  unitarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyEnemyFormation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyEnemyFormation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FormationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &formationid_)));
          set_has_formationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UnitArr;
        break;
      }

      // repeated .pb.TUnitInfo UnitArr = 2;
      case 2: {
        if (tag == 18) {
         parse_UnitArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UnitArr;
        if (input->ExpectTag(24)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 3;
      case 3: {
        if (tag == 24) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyEnemyFormation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyEnemyFormation)
  return false;
#undef DO_
}

void TCrossLevyEnemyFormation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyEnemyFormation)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->formationid(), output);
  }

  // repeated .pb.TUnitInfo UnitArr = 2;
  for (int i = 0; i < this->unitarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unitarr(i), output);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyEnemyFormation)
}

::google::protobuf::uint8* TCrossLevyEnemyFormation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyEnemyFormation)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->formationid(), target);
  }

  // repeated .pb.TUnitInfo UnitArr = 2;
  for (int i = 0; i < this->unitarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unitarr(i), target);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyEnemyFormation)
  return target;
}

int TCrossLevyEnemyFormation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FormationId = 1;
    if (has_formationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->formationid());
    }

    // optional uint64 FightForce = 3;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

  }
  // repeated .pb.TUnitInfo UnitArr = 2;
  total_size += 1 * this->unitarr_size();
  for (int i = 0; i < this->unitarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyEnemyFormation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyEnemyFormation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyEnemyFormation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyEnemyFormation::MergeFrom(const TCrossLevyEnemyFormation& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitarr_.MergeFrom(from.unitarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formationid()) {
      set_formationid(from.formationid());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyEnemyFormation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyEnemyFormation::CopyFrom(const TCrossLevyEnemyFormation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyEnemyFormation::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->unitarr())) return false;
  return true;
}

void TCrossLevyEnemyFormation::Swap(TCrossLevyEnemyFormation* other) {
  if (other != this) {
    std::swap(formationid_, other->formationid_);
    unitarr_.Swap(&other->unitarr_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyEnemyFormation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyEnemyFormation_descriptor_;
  metadata.reflection = TCrossLevyEnemyFormation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGuildUserInfo::kUidFieldNumber;
const int TCrossLevyGuildUserInfo::kUnameFieldNumber;
const int TCrossLevyGuildUserInfo::kCityIdFieldNumber;
const int TCrossLevyGuildUserInfo::kCampIdFieldNumber;
const int TCrossLevyGuildUserInfo::kConnectNumFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGuildUserInfo::TCrossLevyGuildUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGuildUserInfo)
}

void TCrossLevyGuildUserInfo::InitAsDefaultInstance() {
}

TCrossLevyGuildUserInfo::TCrossLevyGuildUserInfo(const TCrossLevyGuildUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGuildUserInfo)
}

void TCrossLevyGuildUserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cityid_ = 0u;
  campid_ = 0u;
  connectnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGuildUserInfo::~TCrossLevyGuildUserInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGuildUserInfo)
  SharedDtor();
}

void TCrossLevyGuildUserInfo::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (this != default_instance_) {
  }
}

void TCrossLevyGuildUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGuildUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGuildUserInfo_descriptor_;
}

const TCrossLevyGuildUserInfo& TCrossLevyGuildUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyGuildUserInfo* TCrossLevyGuildUserInfo::default_instance_ = NULL;

TCrossLevyGuildUserInfo* TCrossLevyGuildUserInfo::New() const {
  return new TCrossLevyGuildUserInfo;
}

void TCrossLevyGuildUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyGuildUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(cityid_, connectnum_);
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGuildUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGuildUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Uname;
        break;
      }

      // optional string Uname = 2;
      case 2: {
        if (tag == 18) {
         parse_Uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CityId;
        break;
      }

      // optional uint32 CityId = 3;
      case 3: {
        if (tag == 24) {
         parse_CityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_CampId;
        break;
      }

      // optional uint32 CampId = 4;
      case 4: {
        if (tag == 32) {
         parse_CampId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ConnectNum;
        break;
      }

      // optional uint32 ConnectNum = 5;
      case 5: {
        if (tag == 40) {
         parse_ConnectNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &connectnum_)));
          set_has_connectnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGuildUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGuildUserInfo)
  return false;
#undef DO_
}

void TCrossLevyGuildUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGuildUserInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string Uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uname(), output);
  }

  // optional uint32 CityId = 3;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cityid(), output);
  }

  // optional uint32 CampId = 4;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->campid(), output);
  }

  // optional uint32 ConnectNum = 5;
  if (has_connectnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->connectnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGuildUserInfo)
}

::google::protobuf::uint8* TCrossLevyGuildUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGuildUserInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string Uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uname(), target);
  }

  // optional uint32 CityId = 3;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cityid(), target);
  }

  // optional uint32 CampId = 4;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->campid(), target);
  }

  // optional uint32 ConnectNum = 5;
  if (has_connectnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->connectnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGuildUserInfo)
  return target;
}

int TCrossLevyGuildUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string Uname = 2;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional uint32 CityId = 3;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 CampId = 4;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // optional uint32 ConnectNum = 5;
    if (has_connectnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->connectnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGuildUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGuildUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGuildUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGuildUserInfo::MergeFrom(const TCrossLevyGuildUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_connectnum()) {
      set_connectnum(from.connectnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGuildUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGuildUserInfo::CopyFrom(const TCrossLevyGuildUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGuildUserInfo::IsInitialized() const {

  return true;
}

void TCrossLevyGuildUserInfo::Swap(TCrossLevyGuildUserInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(uname_, other->uname_);
    std::swap(cityid_, other->cityid_);
    std::swap(campid_, other->campid_);
    std::swap(connectnum_, other->connectnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGuildUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGuildUserInfo_descriptor_;
  metadata.reflection = TCrossLevyGuildUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyEnemyInfo::kUidFieldNumber;
const int TCrossLevyEnemyInfo::kHateNumFieldNumber;
const int TCrossLevyEnemyInfo::kTimeFieldNumber;
const int TCrossLevyEnemyInfo::kUserInfoFieldNumber;
#endif  // !_MSC_VER

TCrossLevyEnemyInfo::TCrossLevyEnemyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyEnemyInfo)
}

void TCrossLevyEnemyInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TCrossLevyEnemyInfo::TCrossLevyEnemyInfo(const TCrossLevyEnemyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyEnemyInfo)
}

void TCrossLevyEnemyInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  hatenum_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyEnemyInfo::~TCrossLevyEnemyInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyEnemyInfo)
  SharedDtor();
}

void TCrossLevyEnemyInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TCrossLevyEnemyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyEnemyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyEnemyInfo_descriptor_;
}

const TCrossLevyEnemyInfo& TCrossLevyEnemyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyEnemyInfo* TCrossLevyEnemyInfo::default_instance_ = NULL;

TCrossLevyEnemyInfo* TCrossLevyEnemyInfo::New() const {
  return new TCrossLevyEnemyInfo;
}

void TCrossLevyEnemyInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyEnemyInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(uid_, time_);
    hatenum_ = 0u;
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyEnemyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyEnemyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HateNum;
        break;
      }

      // optional uint32 HateNum = 2;
      case 2: {
        if (tag == 16) {
         parse_HateNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hatenum_)));
          set_has_hatenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Time;
        break;
      }

      // optional uint64 Time = 3;
      case 3: {
        if (tag == 24) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_UserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo UserInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyEnemyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyEnemyInfo)
  return false;
#undef DO_
}

void TCrossLevyEnemyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyEnemyInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 HateNum = 2;
  if (has_hatenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hatenum(), output);
  }

  // optional uint64 Time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 4;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyEnemyInfo)
}

::google::protobuf::uint8* TCrossLevyEnemyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyEnemyInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 HateNum = 2;
  if (has_hatenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hatenum(), target);
  }

  // optional uint64 Time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 4;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyEnemyInfo)
  return target;
}

int TCrossLevyEnemyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 HateNum = 2;
    if (has_hatenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hatenum());
    }

    // optional uint64 Time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional .pb.TUserSimpleInfo UserInfo = 4;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyEnemyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyEnemyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyEnemyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyEnemyInfo::MergeFrom(const TCrossLevyEnemyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_hatenum()) {
      set_hatenum(from.hatenum());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyEnemyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyEnemyInfo::CopyFrom(const TCrossLevyEnemyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyEnemyInfo::IsInitialized() const {

  return true;
}

void TCrossLevyEnemyInfo::Swap(TCrossLevyEnemyInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(hatenum_, other->hatenum_);
    std::swap(time_, other->time_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyEnemyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyEnemyInfo_descriptor_;
  metadata.reflection = TCrossLevyEnemyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyEnemyCampInfo::kCityIdFieldNumber;
const int TCrossLevyEnemyCampInfo::kCampIdFieldNumber;
#endif  // !_MSC_VER

TCrossLevyEnemyCampInfo::TCrossLevyEnemyCampInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyEnemyCampInfo)
}

void TCrossLevyEnemyCampInfo::InitAsDefaultInstance() {
}

TCrossLevyEnemyCampInfo::TCrossLevyEnemyCampInfo(const TCrossLevyEnemyCampInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyEnemyCampInfo)
}

void TCrossLevyEnemyCampInfo::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  campid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyEnemyCampInfo::~TCrossLevyEnemyCampInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyEnemyCampInfo)
  SharedDtor();
}

void TCrossLevyEnemyCampInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyEnemyCampInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyEnemyCampInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyEnemyCampInfo_descriptor_;
}

const TCrossLevyEnemyCampInfo& TCrossLevyEnemyCampInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyEnemyCampInfo* TCrossLevyEnemyCampInfo::default_instance_ = NULL;

TCrossLevyEnemyCampInfo* TCrossLevyEnemyCampInfo::New() const {
  return new TCrossLevyEnemyCampInfo;
}

void TCrossLevyEnemyCampInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyEnemyCampInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cityid_, campid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyEnemyCampInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyEnemyCampInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CampId;
        break;
      }

      // optional uint32 CampId = 2;
      case 2: {
        if (tag == 16) {
         parse_CampId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyEnemyCampInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyEnemyCampInfo)
  return false;
#undef DO_
}

void TCrossLevyEnemyCampInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyEnemyCampInfo)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // optional uint32 CampId = 2;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->campid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyEnemyCampInfo)
}

::google::protobuf::uint8* TCrossLevyEnemyCampInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyEnemyCampInfo)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // optional uint32 CampId = 2;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->campid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyEnemyCampInfo)
  return target;
}

int TCrossLevyEnemyCampInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 CampId = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyEnemyCampInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyEnemyCampInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyEnemyCampInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyEnemyCampInfo::MergeFrom(const TCrossLevyEnemyCampInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyEnemyCampInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyEnemyCampInfo::CopyFrom(const TCrossLevyEnemyCampInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyEnemyCampInfo::IsInitialized() const {

  return true;
}

void TCrossLevyEnemyCampInfo::Swap(TCrossLevyEnemyCampInfo* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(campid_, other->campid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyEnemyCampInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyEnemyCampInfo_descriptor_;
  metadata.reflection = TCrossLevyEnemyCampInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGetServerTeamInfoRsp::kTeamIdFieldNumber;
const int TCrossLevyGetServerTeamInfoRsp::kServerIdFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGetServerTeamInfoRsp::TCrossLevyGetServerTeamInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGetServerTeamInfoRsp)
}

void TCrossLevyGetServerTeamInfoRsp::InitAsDefaultInstance() {
}

TCrossLevyGetServerTeamInfoRsp::TCrossLevyGetServerTeamInfoRsp(const TCrossLevyGetServerTeamInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGetServerTeamInfoRsp)
}

void TCrossLevyGetServerTeamInfoRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  teamid_ = 0u;
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGetServerTeamInfoRsp::~TCrossLevyGetServerTeamInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGetServerTeamInfoRsp)
  SharedDtor();
}

void TCrossLevyGetServerTeamInfoRsp::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void TCrossLevyGetServerTeamInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGetServerTeamInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGetServerTeamInfoRsp_descriptor_;
}

const TCrossLevyGetServerTeamInfoRsp& TCrossLevyGetServerTeamInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyGetServerTeamInfoRsp* TCrossLevyGetServerTeamInfoRsp::default_instance_ = NULL;

TCrossLevyGetServerTeamInfoRsp* TCrossLevyGetServerTeamInfoRsp::New() const {
  return new TCrossLevyGetServerTeamInfoRsp;
}

void TCrossLevyGetServerTeamInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    teamid_ = 0u;
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGetServerTeamInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGetServerTeamInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 2;
      case 2: {
        if (tag == 18) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGetServerTeamInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGetServerTeamInfoRsp)
  return false;
#undef DO_
}

void TCrossLevyGetServerTeamInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGetServerTeamInfoRsp)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGetServerTeamInfoRsp)
}

::google::protobuf::uint8* TCrossLevyGetServerTeamInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGetServerTeamInfoRsp)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGetServerTeamInfoRsp)
  return target;
}

int TCrossLevyGetServerTeamInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional string ServerId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGetServerTeamInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGetServerTeamInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGetServerTeamInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGetServerTeamInfoRsp::MergeFrom(const TCrossLevyGetServerTeamInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGetServerTeamInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGetServerTeamInfoRsp::CopyFrom(const TCrossLevyGetServerTeamInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGetServerTeamInfoRsp::IsInitialized() const {

  return true;
}

void TCrossLevyGetServerTeamInfoRsp::Swap(TCrossLevyGetServerTeamInfoRsp* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGetServerTeamInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGetServerTeamInfoRsp_descriptor_;
  metadata.reflection = TCrossLevyGetServerTeamInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyEnterRsp::kCityInfoArrFieldNumber;
const int TCrossLevyEnterRsp::kRecordInfoArrFieldNumber;
const int TCrossLevyEnterRsp::kBossInfoArrFieldNumber;
const int TCrossLevyEnterRsp::kRecordArrFieldNumber;
const int TCrossLevyEnterRsp::kSceneIdFieldNumber;
const int TCrossLevyEnterRsp::kRewardIdFieldNumber;
#endif  // !_MSC_VER

TCrossLevyEnterRsp::TCrossLevyEnterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyEnterRsp)
}

void TCrossLevyEnterRsp::InitAsDefaultInstance() {
}

TCrossLevyEnterRsp::TCrossLevyEnterRsp(const TCrossLevyEnterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyEnterRsp)
}

void TCrossLevyEnterRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sceneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rewardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyEnterRsp::~TCrossLevyEnterRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyEnterRsp)
  SharedDtor();
}

void TCrossLevyEnterRsp::SharedDtor() {
  if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sceneid_;
  }
  if (this != default_instance_) {
  }
}

void TCrossLevyEnterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyEnterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyEnterRsp_descriptor_;
}

const TCrossLevyEnterRsp& TCrossLevyEnterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyEnterRsp* TCrossLevyEnterRsp::default_instance_ = NULL;

TCrossLevyEnterRsp* TCrossLevyEnterRsp::New() const {
  return new TCrossLevyEnterRsp;
}

void TCrossLevyEnterRsp::Clear() {
  if (_has_bits_[0 / 32] & 48) {
    if (has_sceneid()) {
      if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sceneid_->clear();
      }
    }
    rewardid_ = 0u;
  }
  cityinfoarr_.Clear();
  recordinfoarr_.Clear();
  bossinfoarr_.Clear();
  recordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyEnterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyEnterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossLevyCityInfo CityInfoArr = 1;
      case 1: {
        if (tag == 10) {
         parse_CityInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cityinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_CityInfoArr;
        if (input->ExpectTag(18)) goto parse_RecordInfoArr;
        break;
      }

      // repeated .pb.TCrossLevySelfRecordInfo RecordInfoArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RecordInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RecordInfoArr;
        if (input->ExpectTag(26)) goto parse_BossInfoArr;
        break;
      }

      // repeated .pb.TCrossLevyBossInfo BossInfoArr = 3;
      case 3: {
        if (tag == 26) {
         parse_BossInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bossinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BossInfoArr;
        if (input->ExpectTag(34)) goto parse_RecordArr;
        break;
      }

      // repeated .pb.TCrossLevyRecordInfo RecordArr = 4;
      case 4: {
        if (tag == 34) {
         parse_RecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RecordArr;
        if (input->ExpectTag(42)) goto parse_SceneId;
        break;
      }

      // optional string SceneId = 5;
      case 5: {
        if (tag == 42) {
         parse_SceneId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sceneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sceneid().data(), this->sceneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sceneid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_RewardId;
        break;
      }

      // optional uint32 RewardId = 6;
      case 6: {
        if (tag == 48) {
         parse_RewardId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyEnterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyEnterRsp)
  return false;
#undef DO_
}

void TCrossLevyEnterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyEnterRsp)
  // repeated .pb.TCrossLevyCityInfo CityInfoArr = 1;
  for (int i = 0; i < this->cityinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cityinfoarr(i), output);
  }

  // repeated .pb.TCrossLevySelfRecordInfo RecordInfoArr = 2;
  for (int i = 0; i < this->recordinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->recordinfoarr(i), output);
  }

  // repeated .pb.TCrossLevyBossInfo BossInfoArr = 3;
  for (int i = 0; i < this->bossinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bossinfoarr(i), output);
  }

  // repeated .pb.TCrossLevyRecordInfo RecordArr = 4;
  for (int i = 0; i < this->recordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->recordarr(i), output);
  }

  // optional string SceneId = 5;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sceneid().data(), this->sceneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sceneid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sceneid(), output);
  }

  // optional uint32 RewardId = 6;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyEnterRsp)
}

::google::protobuf::uint8* TCrossLevyEnterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyEnterRsp)
  // repeated .pb.TCrossLevyCityInfo CityInfoArr = 1;
  for (int i = 0; i < this->cityinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cityinfoarr(i), target);
  }

  // repeated .pb.TCrossLevySelfRecordInfo RecordInfoArr = 2;
  for (int i = 0; i < this->recordinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->recordinfoarr(i), target);
  }

  // repeated .pb.TCrossLevyBossInfo BossInfoArr = 3;
  for (int i = 0; i < this->bossinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bossinfoarr(i), target);
  }

  // repeated .pb.TCrossLevyRecordInfo RecordArr = 4;
  for (int i = 0; i < this->recordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->recordarr(i), target);
  }

  // optional string SceneId = 5;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sceneid().data(), this->sceneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sceneid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sceneid(), target);
  }

  // optional uint32 RewardId = 6;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyEnterRsp)
  return target;
}

int TCrossLevyEnterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional string SceneId = 5;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sceneid());
    }

    // optional uint32 RewardId = 6;
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardid());
    }

  }
  // repeated .pb.TCrossLevyCityInfo CityInfoArr = 1;
  total_size += 1 * this->cityinfoarr_size();
  for (int i = 0; i < this->cityinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cityinfoarr(i));
  }

  // repeated .pb.TCrossLevySelfRecordInfo RecordInfoArr = 2;
  total_size += 1 * this->recordinfoarr_size();
  for (int i = 0; i < this->recordinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordinfoarr(i));
  }

  // repeated .pb.TCrossLevyBossInfo BossInfoArr = 3;
  total_size += 1 * this->bossinfoarr_size();
  for (int i = 0; i < this->bossinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bossinfoarr(i));
  }

  // repeated .pb.TCrossLevyRecordInfo RecordArr = 4;
  total_size += 1 * this->recordarr_size();
  for (int i = 0; i < this->recordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyEnterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyEnterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyEnterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyEnterRsp::MergeFrom(const TCrossLevyEnterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cityinfoarr_.MergeFrom(from.cityinfoarr_);
  recordinfoarr_.MergeFrom(from.recordinfoarr_);
  bossinfoarr_.MergeFrom(from.bossinfoarr_);
  recordarr_.MergeFrom(from.recordarr_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyEnterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyEnterRsp::CopyFrom(const TCrossLevyEnterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyEnterRsp::IsInitialized() const {

  return true;
}

void TCrossLevyEnterRsp::Swap(TCrossLevyEnterRsp* other) {
  if (other != this) {
    cityinfoarr_.Swap(&other->cityinfoarr_);
    recordinfoarr_.Swap(&other->recordinfoarr_);
    bossinfoarr_.Swap(&other->bossinfoarr_);
    recordarr_.Swap(&other->recordarr_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(rewardid_, other->rewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyEnterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyEnterRsp_descriptor_;
  metadata.reflection = TCrossLevyEnterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGetUserInfoRsp::kLeftChallengeNumFieldNumber;
const int TCrossLevyGetUserInfoRsp::kBuyChallengeNumFieldNumber;
const int TCrossLevyGetUserInfoRsp::kForceNumFieldNumber;
const int TCrossLevyGetUserInfoRsp::kAtkBossNumFieldNumber;
const int TCrossLevyGetUserInfoRsp::kPlunderNumFieldNumber;
const int TCrossLevyGetUserInfoRsp::kMyCampInfoArrFieldNumber;
const int TCrossLevyGetUserInfoRsp::kMonsterRfrTimeFieldNumber;
const int TCrossLevyGetUserInfoRsp::kMonsterInfoArrFieldNumber;
const int TCrossLevyGetUserInfoRsp::kScoreFieldNumber;
const int TCrossLevyGetUserInfoRsp::kRewardIdArrFieldNumber;
const int TCrossLevyGetUserInfoRsp::kAtkFmtArrFieldNumber;
const int TCrossLevyGetUserInfoRsp::kDefFmtArrFieldNumber;
const int TCrossLevyGetUserInfoRsp::kPlunderBenefitNumFieldNumber;
const int TCrossLevyGetUserInfoRsp::kExpelBenefitNumFieldNumber;
const int TCrossLevyGetUserInfoRsp::kLastRecoverTimeFieldNumber;
const int TCrossLevyGetUserInfoRsp::kLastAtkBossTimeFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGetUserInfoRsp::TCrossLevyGetUserInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGetUserInfoRsp)
}

void TCrossLevyGetUserInfoRsp::InitAsDefaultInstance() {
}

TCrossLevyGetUserInfoRsp::TCrossLevyGetUserInfoRsp(const TCrossLevyGetUserInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGetUserInfoRsp)
}

void TCrossLevyGetUserInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  leftchallengenum_ = 0u;
  buychallengenum_ = 0u;
  forcenum_ = 0u;
  atkbossnum_ = 0u;
  plundernum_ = 0u;
  monsterrfrtime_ = GOOGLE_ULONGLONG(0);
  score_ = 0u;
  plunderbenefitnum_ = 0u;
  expelbenefitnum_ = 0u;
  lastrecovertime_ = GOOGLE_ULONGLONG(0);
  lastatkbosstime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGetUserInfoRsp::~TCrossLevyGetUserInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGetUserInfoRsp)
  SharedDtor();
}

void TCrossLevyGetUserInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyGetUserInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGetUserInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGetUserInfoRsp_descriptor_;
}

const TCrossLevyGetUserInfoRsp& TCrossLevyGetUserInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyGetUserInfoRsp* TCrossLevyGetUserInfoRsp::default_instance_ = NULL;

TCrossLevyGetUserInfoRsp* TCrossLevyGetUserInfoRsp::New() const {
  return new TCrossLevyGetUserInfoRsp;
}

void TCrossLevyGetUserInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyGetUserInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 95) {
    ZR_(leftchallengenum_, atkbossnum_);
    ZR_(monsterrfrtime_, plundernum_);
  }
  if (_has_bits_[8 / 32] & 61696) {
    ZR_(plunderbenefitnum_, lastatkbosstime_);
    score_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mycampinfoarr_.Clear();
  monsterinfoarr_.Clear();
  rewardidarr_.Clear();
  atkfmtarr_.Clear();
  deffmtarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGetUserInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGetUserInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LeftChallengeNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftchallengenum_)));
          set_has_leftchallengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyChallengeNum;
        break;
      }

      // optional uint32 BuyChallengeNum = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyChallengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buychallengenum_)));
          set_has_buychallengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ForceNum;
        break;
      }

      // optional uint32 ForceNum = 3;
      case 3: {
        if (tag == 24) {
         parse_ForceNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forcenum_)));
          set_has_forcenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AtkBossNum;
        break;
      }

      // optional uint32 AtkBossNum = 4;
      case 4: {
        if (tag == 32) {
         parse_AtkBossNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atkbossnum_)));
          set_has_atkbossnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_PlunderNum;
        break;
      }

      // optional uint32 PlunderNum = 5;
      case 5: {
        if (tag == 40) {
         parse_PlunderNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plundernum_)));
          set_has_plundernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_MyCampInfoArr;
        break;
      }

      // repeated .pb.TCrossLevyMyCampInfo MyCampInfoArr = 6;
      case 6: {
        if (tag == 50) {
         parse_MyCampInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mycampinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_MyCampInfoArr;
        if (input->ExpectTag(56)) goto parse_MonsterRfrTime;
        break;
      }

      // optional uint64 MonsterRfrTime = 7;
      case 7: {
        if (tag == 56) {
         parse_MonsterRfrTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &monsterrfrtime_)));
          set_has_monsterrfrtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_MonsterInfoArr;
        break;
      }

      // repeated .pb.TCrossLevyMonsterInfo MonsterInfoArr = 8;
      case 8: {
        if (tag == 66) {
         parse_MonsterInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_MonsterInfoArr;
        if (input->ExpectTag(72)) goto parse_Score;
        break;
      }

      // optional uint32 Score = 9;
      case 9: {
        if (tag == 72) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_RewardIdArr;
        break;
      }

      // repeated uint32 RewardIdArr = 10;
      case 10: {
        if (tag == 80) {
         parse_RewardIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_rewardidarr())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rewardidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_RewardIdArr;
        if (input->ExpectTag(90)) goto parse_AtkFmtArr;
        break;
      }

      // repeated .pb.TCrossLevyFormationInfo AtkFmtArr = 11;
      case 11: {
        if (tag == 90) {
         parse_AtkFmtArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atkfmtarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_AtkFmtArr;
        if (input->ExpectTag(98)) goto parse_DefFmtArr;
        break;
      }

      // repeated .pb.TCrossLevyFormationInfo DefFmtArr = 12;
      case 12: {
        if (tag == 98) {
         parse_DefFmtArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deffmtarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_DefFmtArr;
        if (input->ExpectTag(104)) goto parse_PlunderBenefitNum;
        break;
      }

      // optional uint32 PlunderBenefitNum = 13;
      case 13: {
        if (tag == 104) {
         parse_PlunderBenefitNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plunderbenefitnum_)));
          set_has_plunderbenefitnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_ExpelBenefitNum;
        break;
      }

      // optional uint32 ExpelBenefitNum = 14;
      case 14: {
        if (tag == 112) {
         parse_ExpelBenefitNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expelbenefitnum_)));
          set_has_expelbenefitnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_LastRecoverTime;
        break;
      }

      // optional uint64 LastRecoverTime = 15;
      case 15: {
        if (tag == 120) {
         parse_LastRecoverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastrecovertime_)));
          set_has_lastrecovertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_LastAtkBossTime;
        break;
      }

      // optional uint64 LastAtkBossTime = 16;
      case 16: {
        if (tag == 128) {
         parse_LastAtkBossTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastatkbosstime_)));
          set_has_lastatkbosstime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGetUserInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGetUserInfoRsp)
  return false;
#undef DO_
}

void TCrossLevyGetUserInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGetUserInfoRsp)
  // optional uint32 LeftChallengeNum = 1;
  if (has_leftchallengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->leftchallengenum(), output);
  }

  // optional uint32 BuyChallengeNum = 2;
  if (has_buychallengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buychallengenum(), output);
  }

  // optional uint32 ForceNum = 3;
  if (has_forcenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->forcenum(), output);
  }

  // optional uint32 AtkBossNum = 4;
  if (has_atkbossnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->atkbossnum(), output);
  }

  // optional uint32 PlunderNum = 5;
  if (has_plundernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->plundernum(), output);
  }

  // repeated .pb.TCrossLevyMyCampInfo MyCampInfoArr = 6;
  for (int i = 0; i < this->mycampinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mycampinfoarr(i), output);
  }

  // optional uint64 MonsterRfrTime = 7;
  if (has_monsterrfrtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->monsterrfrtime(), output);
  }

  // repeated .pb.TCrossLevyMonsterInfo MonsterInfoArr = 8;
  for (int i = 0; i < this->monsterinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->monsterinfoarr(i), output);
  }

  // optional uint32 Score = 9;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->score(), output);
  }

  // repeated uint32 RewardIdArr = 10;
  for (int i = 0; i < this->rewardidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->rewardidarr(i), output);
  }

  // repeated .pb.TCrossLevyFormationInfo AtkFmtArr = 11;
  for (int i = 0; i < this->atkfmtarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->atkfmtarr(i), output);
  }

  // repeated .pb.TCrossLevyFormationInfo DefFmtArr = 12;
  for (int i = 0; i < this->deffmtarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->deffmtarr(i), output);
  }

  // optional uint32 PlunderBenefitNum = 13;
  if (has_plunderbenefitnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->plunderbenefitnum(), output);
  }

  // optional uint32 ExpelBenefitNum = 14;
  if (has_expelbenefitnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->expelbenefitnum(), output);
  }

  // optional uint64 LastRecoverTime = 15;
  if (has_lastrecovertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->lastrecovertime(), output);
  }

  // optional uint64 LastAtkBossTime = 16;
  if (has_lastatkbosstime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->lastatkbosstime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGetUserInfoRsp)
}

::google::protobuf::uint8* TCrossLevyGetUserInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGetUserInfoRsp)
  // optional uint32 LeftChallengeNum = 1;
  if (has_leftchallengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->leftchallengenum(), target);
  }

  // optional uint32 BuyChallengeNum = 2;
  if (has_buychallengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buychallengenum(), target);
  }

  // optional uint32 ForceNum = 3;
  if (has_forcenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->forcenum(), target);
  }

  // optional uint32 AtkBossNum = 4;
  if (has_atkbossnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->atkbossnum(), target);
  }

  // optional uint32 PlunderNum = 5;
  if (has_plundernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->plundernum(), target);
  }

  // repeated .pb.TCrossLevyMyCampInfo MyCampInfoArr = 6;
  for (int i = 0; i < this->mycampinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mycampinfoarr(i), target);
  }

  // optional uint64 MonsterRfrTime = 7;
  if (has_monsterrfrtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->monsterrfrtime(), target);
  }

  // repeated .pb.TCrossLevyMonsterInfo MonsterInfoArr = 8;
  for (int i = 0; i < this->monsterinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->monsterinfoarr(i), target);
  }

  // optional uint32 Score = 9;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->score(), target);
  }

  // repeated uint32 RewardIdArr = 10;
  for (int i = 0; i < this->rewardidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->rewardidarr(i), target);
  }

  // repeated .pb.TCrossLevyFormationInfo AtkFmtArr = 11;
  for (int i = 0; i < this->atkfmtarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->atkfmtarr(i), target);
  }

  // repeated .pb.TCrossLevyFormationInfo DefFmtArr = 12;
  for (int i = 0; i < this->deffmtarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->deffmtarr(i), target);
  }

  // optional uint32 PlunderBenefitNum = 13;
  if (has_plunderbenefitnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->plunderbenefitnum(), target);
  }

  // optional uint32 ExpelBenefitNum = 14;
  if (has_expelbenefitnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->expelbenefitnum(), target);
  }

  // optional uint64 LastRecoverTime = 15;
  if (has_lastrecovertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->lastrecovertime(), target);
  }

  // optional uint64 LastAtkBossTime = 16;
  if (has_lastatkbosstime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->lastatkbosstime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGetUserInfoRsp)
  return target;
}

int TCrossLevyGetUserInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LeftChallengeNum = 1;
    if (has_leftchallengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leftchallengenum());
    }

    // optional uint32 BuyChallengeNum = 2;
    if (has_buychallengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buychallengenum());
    }

    // optional uint32 ForceNum = 3;
    if (has_forcenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forcenum());
    }

    // optional uint32 AtkBossNum = 4;
    if (has_atkbossnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atkbossnum());
    }

    // optional uint32 PlunderNum = 5;
    if (has_plundernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plundernum());
    }

    // optional uint64 MonsterRfrTime = 7;
    if (has_monsterrfrtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->monsterrfrtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Score = 9;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 PlunderBenefitNum = 13;
    if (has_plunderbenefitnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plunderbenefitnum());
    }

    // optional uint32 ExpelBenefitNum = 14;
    if (has_expelbenefitnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expelbenefitnum());
    }

    // optional uint64 LastRecoverTime = 15;
    if (has_lastrecovertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastrecovertime());
    }

    // optional uint64 LastAtkBossTime = 16;
    if (has_lastatkbosstime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastatkbosstime());
    }

  }
  // repeated .pb.TCrossLevyMyCampInfo MyCampInfoArr = 6;
  total_size += 1 * this->mycampinfoarr_size();
  for (int i = 0; i < this->mycampinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mycampinfoarr(i));
  }

  // repeated .pb.TCrossLevyMonsterInfo MonsterInfoArr = 8;
  total_size += 1 * this->monsterinfoarr_size();
  for (int i = 0; i < this->monsterinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterinfoarr(i));
  }

  // repeated uint32 RewardIdArr = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rewardidarr(i));
    }
    total_size += 1 * this->rewardidarr_size() + data_size;
  }

  // repeated .pb.TCrossLevyFormationInfo AtkFmtArr = 11;
  total_size += 1 * this->atkfmtarr_size();
  for (int i = 0; i < this->atkfmtarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atkfmtarr(i));
  }

  // repeated .pb.TCrossLevyFormationInfo DefFmtArr = 12;
  total_size += 1 * this->deffmtarr_size();
  for (int i = 0; i < this->deffmtarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deffmtarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGetUserInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGetUserInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGetUserInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGetUserInfoRsp::MergeFrom(const TCrossLevyGetUserInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mycampinfoarr_.MergeFrom(from.mycampinfoarr_);
  monsterinfoarr_.MergeFrom(from.monsterinfoarr_);
  rewardidarr_.MergeFrom(from.rewardidarr_);
  atkfmtarr_.MergeFrom(from.atkfmtarr_);
  deffmtarr_.MergeFrom(from.deffmtarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leftchallengenum()) {
      set_leftchallengenum(from.leftchallengenum());
    }
    if (from.has_buychallengenum()) {
      set_buychallengenum(from.buychallengenum());
    }
    if (from.has_forcenum()) {
      set_forcenum(from.forcenum());
    }
    if (from.has_atkbossnum()) {
      set_atkbossnum(from.atkbossnum());
    }
    if (from.has_plundernum()) {
      set_plundernum(from.plundernum());
    }
    if (from.has_monsterrfrtime()) {
      set_monsterrfrtime(from.monsterrfrtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_plunderbenefitnum()) {
      set_plunderbenefitnum(from.plunderbenefitnum());
    }
    if (from.has_expelbenefitnum()) {
      set_expelbenefitnum(from.expelbenefitnum());
    }
    if (from.has_lastrecovertime()) {
      set_lastrecovertime(from.lastrecovertime());
    }
    if (from.has_lastatkbosstime()) {
      set_lastatkbosstime(from.lastatkbosstime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGetUserInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGetUserInfoRsp::CopyFrom(const TCrossLevyGetUserInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGetUserInfoRsp::IsInitialized() const {

  return true;
}

void TCrossLevyGetUserInfoRsp::Swap(TCrossLevyGetUserInfoRsp* other) {
  if (other != this) {
    std::swap(leftchallengenum_, other->leftchallengenum_);
    std::swap(buychallengenum_, other->buychallengenum_);
    std::swap(forcenum_, other->forcenum_);
    std::swap(atkbossnum_, other->atkbossnum_);
    std::swap(plundernum_, other->plundernum_);
    mycampinfoarr_.Swap(&other->mycampinfoarr_);
    std::swap(monsterrfrtime_, other->monsterrfrtime_);
    monsterinfoarr_.Swap(&other->monsterinfoarr_);
    std::swap(score_, other->score_);
    rewardidarr_.Swap(&other->rewardidarr_);
    atkfmtarr_.Swap(&other->atkfmtarr_);
    deffmtarr_.Swap(&other->deffmtarr_);
    std::swap(plunderbenefitnum_, other->plunderbenefitnum_);
    std::swap(expelbenefitnum_, other->expelbenefitnum_);
    std::swap(lastrecovertime_, other->lastrecovertime_);
    std::swap(lastatkbosstime_, other->lastatkbosstime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGetUserInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGetUserInfoRsp_descriptor_;
  metadata.reflection = TCrossLevyGetUserInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGetCityInfoReq::kCityIdFieldNumber;
const int TCrossLevyGetCityInfoReq::kCityIndexFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGetCityInfoReq::TCrossLevyGetCityInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGetCityInfoReq)
}

void TCrossLevyGetCityInfoReq::InitAsDefaultInstance() {
}

TCrossLevyGetCityInfoReq::TCrossLevyGetCityInfoReq(const TCrossLevyGetCityInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGetCityInfoReq)
}

void TCrossLevyGetCityInfoReq::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  cityindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGetCityInfoReq::~TCrossLevyGetCityInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGetCityInfoReq)
  SharedDtor();
}

void TCrossLevyGetCityInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyGetCityInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGetCityInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGetCityInfoReq_descriptor_;
}

const TCrossLevyGetCityInfoReq& TCrossLevyGetCityInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyGetCityInfoReq* TCrossLevyGetCityInfoReq::default_instance_ = NULL;

TCrossLevyGetCityInfoReq* TCrossLevyGetCityInfoReq::New() const {
  return new TCrossLevyGetCityInfoReq;
}

void TCrossLevyGetCityInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyGetCityInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cityid_, cityindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGetCityInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGetCityInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CityIndex;
        break;
      }

      // optional uint32 CityIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_CityIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityindex_)));
          set_has_cityindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGetCityInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGetCityInfoReq)
  return false;
#undef DO_
}

void TCrossLevyGetCityInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGetCityInfoReq)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // optional uint32 CityIndex = 2;
  if (has_cityindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cityindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGetCityInfoReq)
}

::google::protobuf::uint8* TCrossLevyGetCityInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGetCityInfoReq)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // optional uint32 CityIndex = 2;
  if (has_cityindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cityindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGetCityInfoReq)
  return target;
}

int TCrossLevyGetCityInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 CityIndex = 2;
    if (has_cityindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGetCityInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGetCityInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGetCityInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGetCityInfoReq::MergeFrom(const TCrossLevyGetCityInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_cityindex()) {
      set_cityindex(from.cityindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGetCityInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGetCityInfoReq::CopyFrom(const TCrossLevyGetCityInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGetCityInfoReq::IsInitialized() const {

  return true;
}

void TCrossLevyGetCityInfoReq::Swap(TCrossLevyGetCityInfoReq* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(cityindex_, other->cityindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGetCityInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGetCityInfoReq_descriptor_;
  metadata.reflection = TCrossLevyGetCityInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGetCityInfoRsp::kCampInfoArrFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGetCityInfoRsp::TCrossLevyGetCityInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGetCityInfoRsp)
}

void TCrossLevyGetCityInfoRsp::InitAsDefaultInstance() {
}

TCrossLevyGetCityInfoRsp::TCrossLevyGetCityInfoRsp(const TCrossLevyGetCityInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGetCityInfoRsp)
}

void TCrossLevyGetCityInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGetCityInfoRsp::~TCrossLevyGetCityInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGetCityInfoRsp)
  SharedDtor();
}

void TCrossLevyGetCityInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyGetCityInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGetCityInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGetCityInfoRsp_descriptor_;
}

const TCrossLevyGetCityInfoRsp& TCrossLevyGetCityInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyGetCityInfoRsp* TCrossLevyGetCityInfoRsp::default_instance_ = NULL;

TCrossLevyGetCityInfoRsp* TCrossLevyGetCityInfoRsp::New() const {
  return new TCrossLevyGetCityInfoRsp;
}

void TCrossLevyGetCityInfoRsp::Clear() {
  campinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGetCityInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGetCityInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossLevyCampInfo CampInfoArr = 1;
      case 1: {
        if (tag == 10) {
         parse_CampInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_campinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_CampInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGetCityInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGetCityInfoRsp)
  return false;
#undef DO_
}

void TCrossLevyGetCityInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGetCityInfoRsp)
  // repeated .pb.TCrossLevyCampInfo CampInfoArr = 1;
  for (int i = 0; i < this->campinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->campinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGetCityInfoRsp)
}

::google::protobuf::uint8* TCrossLevyGetCityInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGetCityInfoRsp)
  // repeated .pb.TCrossLevyCampInfo CampInfoArr = 1;
  for (int i = 0; i < this->campinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->campinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGetCityInfoRsp)
  return target;
}

int TCrossLevyGetCityInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossLevyCampInfo CampInfoArr = 1;
  total_size += 1 * this->campinfoarr_size();
  for (int i = 0; i < this->campinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->campinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGetCityInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGetCityInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGetCityInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGetCityInfoRsp::MergeFrom(const TCrossLevyGetCityInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  campinfoarr_.MergeFrom(from.campinfoarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGetCityInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGetCityInfoRsp::CopyFrom(const TCrossLevyGetCityInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGetCityInfoRsp::IsInitialized() const {

  return true;
}

void TCrossLevyGetCityInfoRsp::Swap(TCrossLevyGetCityInfoRsp* other) {
  if (other != this) {
    campinfoarr_.Swap(&other->campinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGetCityInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGetCityInfoRsp_descriptor_;
  metadata.reflection = TCrossLevyGetCityInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyMoveToEmptyCampReq::kCityIdFieldNumber;
const int TCrossLevyMoveToEmptyCampReq::kCampIdFieldNumber;
const int TCrossLevyMoveToEmptyCampReq::kOriCityIdFieldNumber;
const int TCrossLevyMoveToEmptyCampReq::kOriCampIdFieldNumber;
#endif  // !_MSC_VER

TCrossLevyMoveToEmptyCampReq::TCrossLevyMoveToEmptyCampReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyMoveToEmptyCampReq)
}

void TCrossLevyMoveToEmptyCampReq::InitAsDefaultInstance() {
}

TCrossLevyMoveToEmptyCampReq::TCrossLevyMoveToEmptyCampReq(const TCrossLevyMoveToEmptyCampReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyMoveToEmptyCampReq)
}

void TCrossLevyMoveToEmptyCampReq::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  campid_ = 0u;
  oricityid_ = 0u;
  oricampid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyMoveToEmptyCampReq::~TCrossLevyMoveToEmptyCampReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyMoveToEmptyCampReq)
  SharedDtor();
}

void TCrossLevyMoveToEmptyCampReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyMoveToEmptyCampReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyMoveToEmptyCampReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyMoveToEmptyCampReq_descriptor_;
}

const TCrossLevyMoveToEmptyCampReq& TCrossLevyMoveToEmptyCampReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyMoveToEmptyCampReq* TCrossLevyMoveToEmptyCampReq::default_instance_ = NULL;

TCrossLevyMoveToEmptyCampReq* TCrossLevyMoveToEmptyCampReq::New() const {
  return new TCrossLevyMoveToEmptyCampReq;
}

void TCrossLevyMoveToEmptyCampReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyMoveToEmptyCampReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cityid_, oricampid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyMoveToEmptyCampReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyMoveToEmptyCampReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CampId;
        break;
      }

      // optional uint32 CampId = 2;
      case 2: {
        if (tag == 16) {
         parse_CampId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_OriCityId;
        break;
      }

      // optional uint32 OriCityId = 3;
      case 3: {
        if (tag == 24) {
         parse_OriCityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oricityid_)));
          set_has_oricityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_OriCampId;
        break;
      }

      // optional uint32 OriCampId = 4;
      case 4: {
        if (tag == 32) {
         parse_OriCampId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oricampid_)));
          set_has_oricampid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyMoveToEmptyCampReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyMoveToEmptyCampReq)
  return false;
#undef DO_
}

void TCrossLevyMoveToEmptyCampReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyMoveToEmptyCampReq)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // optional uint32 CampId = 2;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->campid(), output);
  }

  // optional uint32 OriCityId = 3;
  if (has_oricityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->oricityid(), output);
  }

  // optional uint32 OriCampId = 4;
  if (has_oricampid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->oricampid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyMoveToEmptyCampReq)
}

::google::protobuf::uint8* TCrossLevyMoveToEmptyCampReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyMoveToEmptyCampReq)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // optional uint32 CampId = 2;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->campid(), target);
  }

  // optional uint32 OriCityId = 3;
  if (has_oricityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->oricityid(), target);
  }

  // optional uint32 OriCampId = 4;
  if (has_oricampid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->oricampid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyMoveToEmptyCampReq)
  return target;
}

int TCrossLevyMoveToEmptyCampReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 CampId = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // optional uint32 OriCityId = 3;
    if (has_oricityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oricityid());
    }

    // optional uint32 OriCampId = 4;
    if (has_oricampid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oricampid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyMoveToEmptyCampReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyMoveToEmptyCampReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyMoveToEmptyCampReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyMoveToEmptyCampReq::MergeFrom(const TCrossLevyMoveToEmptyCampReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_oricityid()) {
      set_oricityid(from.oricityid());
    }
    if (from.has_oricampid()) {
      set_oricampid(from.oricampid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyMoveToEmptyCampReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyMoveToEmptyCampReq::CopyFrom(const TCrossLevyMoveToEmptyCampReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyMoveToEmptyCampReq::IsInitialized() const {

  return true;
}

void TCrossLevyMoveToEmptyCampReq::Swap(TCrossLevyMoveToEmptyCampReq* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(campid_, other->campid_);
    std::swap(oricityid_, other->oricityid_);
    std::swap(oricampid_, other->oricampid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyMoveToEmptyCampReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyMoveToEmptyCampReq_descriptor_;
  metadata.reflection = TCrossLevyMoveToEmptyCampReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevySetDefFormationReq::kFormationArrFieldNumber;
#endif  // !_MSC_VER

TCrossLevySetDefFormationReq::TCrossLevySetDefFormationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevySetDefFormationReq)
}

void TCrossLevySetDefFormationReq::InitAsDefaultInstance() {
}

TCrossLevySetDefFormationReq::TCrossLevySetDefFormationReq(const TCrossLevySetDefFormationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevySetDefFormationReq)
}

void TCrossLevySetDefFormationReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevySetDefFormationReq::~TCrossLevySetDefFormationReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevySetDefFormationReq)
  SharedDtor();
}

void TCrossLevySetDefFormationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevySetDefFormationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevySetDefFormationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevySetDefFormationReq_descriptor_;
}

const TCrossLevySetDefFormationReq& TCrossLevySetDefFormationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevySetDefFormationReq* TCrossLevySetDefFormationReq::default_instance_ = NULL;

TCrossLevySetDefFormationReq* TCrossLevySetDefFormationReq::New() const {
  return new TCrossLevySetDefFormationReq;
}

void TCrossLevySetDefFormationReq::Clear() {
  formationarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevySetDefFormationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevySetDefFormationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossLevyFormationInfo FormationArr = 1;
      case 1: {
        if (tag == 10) {
         parse_FormationArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formationarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FormationArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevySetDefFormationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevySetDefFormationReq)
  return false;
#undef DO_
}

void TCrossLevySetDefFormationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevySetDefFormationReq)
  // repeated .pb.TCrossLevyFormationInfo FormationArr = 1;
  for (int i = 0; i < this->formationarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->formationarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevySetDefFormationReq)
}

::google::protobuf::uint8* TCrossLevySetDefFormationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevySetDefFormationReq)
  // repeated .pb.TCrossLevyFormationInfo FormationArr = 1;
  for (int i = 0; i < this->formationarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->formationarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevySetDefFormationReq)
  return target;
}

int TCrossLevySetDefFormationReq::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossLevyFormationInfo FormationArr = 1;
  total_size += 1 * this->formationarr_size();
  for (int i = 0; i < this->formationarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->formationarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevySetDefFormationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevySetDefFormationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevySetDefFormationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevySetDefFormationReq::MergeFrom(const TCrossLevySetDefFormationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  formationarr_.MergeFrom(from.formationarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevySetDefFormationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevySetDefFormationReq::CopyFrom(const TCrossLevySetDefFormationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevySetDefFormationReq::IsInitialized() const {

  return true;
}

void TCrossLevySetDefFormationReq::Swap(TCrossLevySetDefFormationReq* other) {
  if (other != this) {
    formationarr_.Swap(&other->formationarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevySetDefFormationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevySetDefFormationReq_descriptor_;
  metadata.reflection = TCrossLevySetDefFormationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevySetAtkFormationReq::kFormationArrFieldNumber;
#endif  // !_MSC_VER

TCrossLevySetAtkFormationReq::TCrossLevySetAtkFormationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevySetAtkFormationReq)
}

void TCrossLevySetAtkFormationReq::InitAsDefaultInstance() {
}

TCrossLevySetAtkFormationReq::TCrossLevySetAtkFormationReq(const TCrossLevySetAtkFormationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevySetAtkFormationReq)
}

void TCrossLevySetAtkFormationReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevySetAtkFormationReq::~TCrossLevySetAtkFormationReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevySetAtkFormationReq)
  SharedDtor();
}

void TCrossLevySetAtkFormationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevySetAtkFormationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevySetAtkFormationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevySetAtkFormationReq_descriptor_;
}

const TCrossLevySetAtkFormationReq& TCrossLevySetAtkFormationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevySetAtkFormationReq* TCrossLevySetAtkFormationReq::default_instance_ = NULL;

TCrossLevySetAtkFormationReq* TCrossLevySetAtkFormationReq::New() const {
  return new TCrossLevySetAtkFormationReq;
}

void TCrossLevySetAtkFormationReq::Clear() {
  formationarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevySetAtkFormationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevySetAtkFormationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossLevyFormationInfo FormationArr = 1;
      case 1: {
        if (tag == 10) {
         parse_FormationArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formationarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FormationArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevySetAtkFormationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevySetAtkFormationReq)
  return false;
#undef DO_
}

void TCrossLevySetAtkFormationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevySetAtkFormationReq)
  // repeated .pb.TCrossLevyFormationInfo FormationArr = 1;
  for (int i = 0; i < this->formationarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->formationarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevySetAtkFormationReq)
}

::google::protobuf::uint8* TCrossLevySetAtkFormationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevySetAtkFormationReq)
  // repeated .pb.TCrossLevyFormationInfo FormationArr = 1;
  for (int i = 0; i < this->formationarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->formationarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevySetAtkFormationReq)
  return target;
}

int TCrossLevySetAtkFormationReq::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossLevyFormationInfo FormationArr = 1;
  total_size += 1 * this->formationarr_size();
  for (int i = 0; i < this->formationarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->formationarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevySetAtkFormationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevySetAtkFormationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevySetAtkFormationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevySetAtkFormationReq::MergeFrom(const TCrossLevySetAtkFormationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  formationarr_.MergeFrom(from.formationarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevySetAtkFormationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevySetAtkFormationReq::CopyFrom(const TCrossLevySetAtkFormationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevySetAtkFormationReq::IsInitialized() const {

  return true;
}

void TCrossLevySetAtkFormationReq::Swap(TCrossLevySetAtkFormationReq* other) {
  if (other != this) {
    formationarr_.Swap(&other->formationarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevySetAtkFormationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevySetAtkFormationReq_descriptor_;
  metadata.reflection = TCrossLevySetAtkFormationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGetEnemyFormationReq::kCityIdFieldNumber;
const int TCrossLevyGetEnemyFormationReq::kCampIdFieldNumber;
const int TCrossLevyGetEnemyFormationReq::kEnemyUidFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGetEnemyFormationReq::TCrossLevyGetEnemyFormationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGetEnemyFormationReq)
}

void TCrossLevyGetEnemyFormationReq::InitAsDefaultInstance() {
}

TCrossLevyGetEnemyFormationReq::TCrossLevyGetEnemyFormationReq(const TCrossLevyGetEnemyFormationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGetEnemyFormationReq)
}

void TCrossLevyGetEnemyFormationReq::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  campid_ = 0u;
  enemyuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGetEnemyFormationReq::~TCrossLevyGetEnemyFormationReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGetEnemyFormationReq)
  SharedDtor();
}

void TCrossLevyGetEnemyFormationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyGetEnemyFormationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGetEnemyFormationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGetEnemyFormationReq_descriptor_;
}

const TCrossLevyGetEnemyFormationReq& TCrossLevyGetEnemyFormationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyGetEnemyFormationReq* TCrossLevyGetEnemyFormationReq::default_instance_ = NULL;

TCrossLevyGetEnemyFormationReq* TCrossLevyGetEnemyFormationReq::New() const {
  return new TCrossLevyGetEnemyFormationReq;
}

void TCrossLevyGetEnemyFormationReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyGetEnemyFormationReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cityid_, enemyuid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGetEnemyFormationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGetEnemyFormationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CampId;
        break;
      }

      // optional uint32 CampId = 2;
      case 2: {
        if (tag == 16) {
         parse_CampId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EnemyUid;
        break;
      }

      // optional uint64 EnemyUid = 3;
      case 3: {
        if (tag == 24) {
         parse_EnemyUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enemyuid_)));
          set_has_enemyuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGetEnemyFormationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGetEnemyFormationReq)
  return false;
#undef DO_
}

void TCrossLevyGetEnemyFormationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGetEnemyFormationReq)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // optional uint32 CampId = 2;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->campid(), output);
  }

  // optional uint64 EnemyUid = 3;
  if (has_enemyuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->enemyuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGetEnemyFormationReq)
}

::google::protobuf::uint8* TCrossLevyGetEnemyFormationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGetEnemyFormationReq)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // optional uint32 CampId = 2;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->campid(), target);
  }

  // optional uint64 EnemyUid = 3;
  if (has_enemyuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->enemyuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGetEnemyFormationReq)
  return target;
}

int TCrossLevyGetEnemyFormationReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 CampId = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // optional uint64 EnemyUid = 3;
    if (has_enemyuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enemyuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGetEnemyFormationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGetEnemyFormationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGetEnemyFormationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGetEnemyFormationReq::MergeFrom(const TCrossLevyGetEnemyFormationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_enemyuid()) {
      set_enemyuid(from.enemyuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGetEnemyFormationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGetEnemyFormationReq::CopyFrom(const TCrossLevyGetEnemyFormationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGetEnemyFormationReq::IsInitialized() const {

  return true;
}

void TCrossLevyGetEnemyFormationReq::Swap(TCrossLevyGetEnemyFormationReq* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(campid_, other->campid_);
    std::swap(enemyuid_, other->enemyuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGetEnemyFormationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGetEnemyFormationReq_descriptor_;
  metadata.reflection = TCrossLevyGetEnemyFormationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGetEnemyFormationRsp::kEnemyFormationArrFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGetEnemyFormationRsp::TCrossLevyGetEnemyFormationRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGetEnemyFormationRsp)
}

void TCrossLevyGetEnemyFormationRsp::InitAsDefaultInstance() {
}

TCrossLevyGetEnemyFormationRsp::TCrossLevyGetEnemyFormationRsp(const TCrossLevyGetEnemyFormationRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGetEnemyFormationRsp)
}

void TCrossLevyGetEnemyFormationRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGetEnemyFormationRsp::~TCrossLevyGetEnemyFormationRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGetEnemyFormationRsp)
  SharedDtor();
}

void TCrossLevyGetEnemyFormationRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyGetEnemyFormationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGetEnemyFormationRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGetEnemyFormationRsp_descriptor_;
}

const TCrossLevyGetEnemyFormationRsp& TCrossLevyGetEnemyFormationRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyGetEnemyFormationRsp* TCrossLevyGetEnemyFormationRsp::default_instance_ = NULL;

TCrossLevyGetEnemyFormationRsp* TCrossLevyGetEnemyFormationRsp::New() const {
  return new TCrossLevyGetEnemyFormationRsp;
}

void TCrossLevyGetEnemyFormationRsp::Clear() {
  enemyformationarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGetEnemyFormationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGetEnemyFormationRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossLevyEnemyFormation EnemyFormationArr = 1;
      case 1: {
        if (tag == 10) {
         parse_EnemyFormationArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemyformationarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_EnemyFormationArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGetEnemyFormationRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGetEnemyFormationRsp)
  return false;
#undef DO_
}

void TCrossLevyGetEnemyFormationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGetEnemyFormationRsp)
  // repeated .pb.TCrossLevyEnemyFormation EnemyFormationArr = 1;
  for (int i = 0; i < this->enemyformationarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->enemyformationarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGetEnemyFormationRsp)
}

::google::protobuf::uint8* TCrossLevyGetEnemyFormationRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGetEnemyFormationRsp)
  // repeated .pb.TCrossLevyEnemyFormation EnemyFormationArr = 1;
  for (int i = 0; i < this->enemyformationarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->enemyformationarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGetEnemyFormationRsp)
  return target;
}

int TCrossLevyGetEnemyFormationRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossLevyEnemyFormation EnemyFormationArr = 1;
  total_size += 1 * this->enemyformationarr_size();
  for (int i = 0; i < this->enemyformationarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemyformationarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGetEnemyFormationRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGetEnemyFormationRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGetEnemyFormationRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGetEnemyFormationRsp::MergeFrom(const TCrossLevyGetEnemyFormationRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  enemyformationarr_.MergeFrom(from.enemyformationarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGetEnemyFormationRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGetEnemyFormationRsp::CopyFrom(const TCrossLevyGetEnemyFormationRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGetEnemyFormationRsp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->enemyformationarr())) return false;
  return true;
}

void TCrossLevyGetEnemyFormationRsp::Swap(TCrossLevyGetEnemyFormationRsp* other) {
  if (other != this) {
    enemyformationarr_.Swap(&other->enemyformationarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGetEnemyFormationRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGetEnemyFormationRsp_descriptor_;
  metadata.reflection = TCrossLevyGetEnemyFormationRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyForceCollectReq::kCityIdFieldNumber;
const int TCrossLevyForceCollectReq::kCampIdFieldNumber;
#endif  // !_MSC_VER

TCrossLevyForceCollectReq::TCrossLevyForceCollectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyForceCollectReq)
}

void TCrossLevyForceCollectReq::InitAsDefaultInstance() {
}

TCrossLevyForceCollectReq::TCrossLevyForceCollectReq(const TCrossLevyForceCollectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyForceCollectReq)
}

void TCrossLevyForceCollectReq::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  campid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyForceCollectReq::~TCrossLevyForceCollectReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyForceCollectReq)
  SharedDtor();
}

void TCrossLevyForceCollectReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyForceCollectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyForceCollectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyForceCollectReq_descriptor_;
}

const TCrossLevyForceCollectReq& TCrossLevyForceCollectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyForceCollectReq* TCrossLevyForceCollectReq::default_instance_ = NULL;

TCrossLevyForceCollectReq* TCrossLevyForceCollectReq::New() const {
  return new TCrossLevyForceCollectReq;
}

void TCrossLevyForceCollectReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyForceCollectReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cityid_, campid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyForceCollectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyForceCollectReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CampId;
        break;
      }

      // optional uint32 CampId = 2;
      case 2: {
        if (tag == 16) {
         parse_CampId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyForceCollectReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyForceCollectReq)
  return false;
#undef DO_
}

void TCrossLevyForceCollectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyForceCollectReq)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // optional uint32 CampId = 2;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->campid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyForceCollectReq)
}

::google::protobuf::uint8* TCrossLevyForceCollectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyForceCollectReq)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // optional uint32 CampId = 2;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->campid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyForceCollectReq)
  return target;
}

int TCrossLevyForceCollectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 CampId = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyForceCollectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyForceCollectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyForceCollectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyForceCollectReq::MergeFrom(const TCrossLevyForceCollectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyForceCollectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyForceCollectReq::CopyFrom(const TCrossLevyForceCollectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyForceCollectReq::IsInitialized() const {

  return true;
}

void TCrossLevyForceCollectReq::Swap(TCrossLevyForceCollectReq* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(campid_, other->campid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyForceCollectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyForceCollectReq_descriptor_;
  metadata.reflection = TCrossLevyForceCollectReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyForceCollectRsp::kRewardArrFieldNumber;
const int TCrossLevyForceCollectRsp::kSettleScoreFieldNumber;
#endif  // !_MSC_VER

TCrossLevyForceCollectRsp::TCrossLevyForceCollectRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyForceCollectRsp)
}

void TCrossLevyForceCollectRsp::InitAsDefaultInstance() {
}

TCrossLevyForceCollectRsp::TCrossLevyForceCollectRsp(const TCrossLevyForceCollectRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyForceCollectRsp)
}

void TCrossLevyForceCollectRsp::SharedCtor() {
  _cached_size_ = 0;
  settlescore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyForceCollectRsp::~TCrossLevyForceCollectRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyForceCollectRsp)
  SharedDtor();
}

void TCrossLevyForceCollectRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyForceCollectRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyForceCollectRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyForceCollectRsp_descriptor_;
}

const TCrossLevyForceCollectRsp& TCrossLevyForceCollectRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyForceCollectRsp* TCrossLevyForceCollectRsp::default_instance_ = NULL;

TCrossLevyForceCollectRsp* TCrossLevyForceCollectRsp::New() const {
  return new TCrossLevyForceCollectRsp;
}

void TCrossLevyForceCollectRsp::Clear() {
  settlescore_ = 0u;
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyForceCollectRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyForceCollectRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectTag(16)) goto parse_SettleScore;
        break;
      }

      // optional uint32 SettleScore = 2;
      case 2: {
        if (tag == 16) {
         parse_SettleScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &settlescore_)));
          set_has_settlescore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyForceCollectRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyForceCollectRsp)
  return false;
#undef DO_
}

void TCrossLevyForceCollectRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyForceCollectRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  // optional uint32 SettleScore = 2;
  if (has_settlescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->settlescore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyForceCollectRsp)
}

::google::protobuf::uint8* TCrossLevyForceCollectRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyForceCollectRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  // optional uint32 SettleScore = 2;
  if (has_settlescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->settlescore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyForceCollectRsp)
  return target;
}

int TCrossLevyForceCollectRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 SettleScore = 2;
    if (has_settlescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->settlescore());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyForceCollectRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyForceCollectRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyForceCollectRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyForceCollectRsp::MergeFrom(const TCrossLevyForceCollectRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_settlescore()) {
      set_settlescore(from.settlescore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyForceCollectRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyForceCollectRsp::CopyFrom(const TCrossLevyForceCollectRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyForceCollectRsp::IsInitialized() const {

  return true;
}

void TCrossLevyForceCollectRsp::Swap(TCrossLevyForceCollectRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(settlescore_, other->settlescore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyForceCollectRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyForceCollectRsp_descriptor_;
  metadata.reflection = TCrossLevyForceCollectRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyPlunderReq::kCityIdFieldNumber;
const int TCrossLevyPlunderReq::kCampIdFieldNumber;
const int TCrossLevyPlunderReq::kEnemyUidFieldNumber;
#endif  // !_MSC_VER

TCrossLevyPlunderReq::TCrossLevyPlunderReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyPlunderReq)
}

void TCrossLevyPlunderReq::InitAsDefaultInstance() {
}

TCrossLevyPlunderReq::TCrossLevyPlunderReq(const TCrossLevyPlunderReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyPlunderReq)
}

void TCrossLevyPlunderReq::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  campid_ = 0u;
  enemyuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyPlunderReq::~TCrossLevyPlunderReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyPlunderReq)
  SharedDtor();
}

void TCrossLevyPlunderReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyPlunderReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyPlunderReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyPlunderReq_descriptor_;
}

const TCrossLevyPlunderReq& TCrossLevyPlunderReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyPlunderReq* TCrossLevyPlunderReq::default_instance_ = NULL;

TCrossLevyPlunderReq* TCrossLevyPlunderReq::New() const {
  return new TCrossLevyPlunderReq;
}

void TCrossLevyPlunderReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyPlunderReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cityid_, enemyuid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyPlunderReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyPlunderReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CampId;
        break;
      }

      // optional uint32 CampId = 2;
      case 2: {
        if (tag == 16) {
         parse_CampId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EnemyUid;
        break;
      }

      // optional uint64 EnemyUid = 3;
      case 3: {
        if (tag == 24) {
         parse_EnemyUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enemyuid_)));
          set_has_enemyuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyPlunderReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyPlunderReq)
  return false;
#undef DO_
}

void TCrossLevyPlunderReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyPlunderReq)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // optional uint32 CampId = 2;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->campid(), output);
  }

  // optional uint64 EnemyUid = 3;
  if (has_enemyuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->enemyuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyPlunderReq)
}

::google::protobuf::uint8* TCrossLevyPlunderReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyPlunderReq)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // optional uint32 CampId = 2;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->campid(), target);
  }

  // optional uint64 EnemyUid = 3;
  if (has_enemyuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->enemyuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyPlunderReq)
  return target;
}

int TCrossLevyPlunderReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 CampId = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // optional uint64 EnemyUid = 3;
    if (has_enemyuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enemyuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyPlunderReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyPlunderReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyPlunderReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyPlunderReq::MergeFrom(const TCrossLevyPlunderReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_enemyuid()) {
      set_enemyuid(from.enemyuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyPlunderReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyPlunderReq::CopyFrom(const TCrossLevyPlunderReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyPlunderReq::IsInitialized() const {

  return true;
}

void TCrossLevyPlunderReq::Swap(TCrossLevyPlunderReq* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(campid_, other->campid_);
    std::swap(enemyuid_, other->enemyuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyPlunderReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyPlunderReq_descriptor_;
  metadata.reflection = TCrossLevyPlunderReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyPlunderRsp::kIsAtkWinFieldNumber;
const int TCrossLevyPlunderRsp::kAtkUserInfoFieldNumber;
const int TCrossLevyPlunderRsp::kDefUserInfoFieldNumber;
const int TCrossLevyPlunderRsp::kRecordArrFieldNumber;
const int TCrossLevyPlunderRsp::kRewardArrFieldNumber;
const int TCrossLevyPlunderRsp::kRewardScoreFieldNumber;
#endif  // !_MSC_VER

TCrossLevyPlunderRsp::TCrossLevyPlunderRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyPlunderRsp)
}

void TCrossLevyPlunderRsp::InitAsDefaultInstance() {
  atkuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
  defuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TCrossLevyPlunderRsp::TCrossLevyPlunderRsp(const TCrossLevyPlunderRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyPlunderRsp)
}

void TCrossLevyPlunderRsp::SharedCtor() {
  _cached_size_ = 0;
  isatkwin_ = false;
  atkuserinfo_ = NULL;
  defuserinfo_ = NULL;
  rewardscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyPlunderRsp::~TCrossLevyPlunderRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyPlunderRsp)
  SharedDtor();
}

void TCrossLevyPlunderRsp::SharedDtor() {
  if (this != default_instance_) {
    delete atkuserinfo_;
    delete defuserinfo_;
  }
}

void TCrossLevyPlunderRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyPlunderRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyPlunderRsp_descriptor_;
}

const TCrossLevyPlunderRsp& TCrossLevyPlunderRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyPlunderRsp* TCrossLevyPlunderRsp::default_instance_ = NULL;

TCrossLevyPlunderRsp* TCrossLevyPlunderRsp::New() const {
  return new TCrossLevyPlunderRsp;
}

void TCrossLevyPlunderRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyPlunderRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 39) {
    ZR_(isatkwin_, rewardscore_);
    if (has_atkuserinfo()) {
      if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
    if (has_defuserinfo()) {
      if (defuserinfo_ != NULL) defuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  recordarr_.Clear();
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyPlunderRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyPlunderRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsAtkWin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isatkwin_)));
          set_has_isatkwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AtkUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_AtkUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atkuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DefUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo DefUserInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_DefUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RecordArr;
        break;
      }

      // repeated .pb.TCrossLevyUserRecordViewInfo RecordArr = 4;
      case 4: {
        if (tag == 34) {
         parse_RecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RecordArr;
        if (input->ExpectTag(42)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 5;
      case 5: {
        if (tag == 42) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_RewardArr;
        if (input->ExpectTag(48)) goto parse_RewardScore;
        break;
      }

      // optional uint32 RewardScore = 6;
      case 6: {
        if (tag == 48) {
         parse_RewardScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardscore_)));
          set_has_rewardscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyPlunderRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyPlunderRsp)
  return false;
#undef DO_
}

void TCrossLevyPlunderRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyPlunderRsp)
  // optional bool IsAtkWin = 1;
  if (has_isatkwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isatkwin(), output);
  }

  // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
  if (has_atkuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->atkuserinfo(), output);
  }

  // optional .pb.TUserSimpleInfo DefUserInfo = 3;
  if (has_defuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->defuserinfo(), output);
  }

  // repeated .pb.TCrossLevyUserRecordViewInfo RecordArr = 4;
  for (int i = 0; i < this->recordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->recordarr(i), output);
  }

  // repeated .pb.TCommonReward RewardArr = 5;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rewardarr(i), output);
  }

  // optional uint32 RewardScore = 6;
  if (has_rewardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rewardscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyPlunderRsp)
}

::google::protobuf::uint8* TCrossLevyPlunderRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyPlunderRsp)
  // optional bool IsAtkWin = 1;
  if (has_isatkwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isatkwin(), target);
  }

  // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
  if (has_atkuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->atkuserinfo(), target);
  }

  // optional .pb.TUserSimpleInfo DefUserInfo = 3;
  if (has_defuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->defuserinfo(), target);
  }

  // repeated .pb.TCrossLevyUserRecordViewInfo RecordArr = 4;
  for (int i = 0; i < this->recordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->recordarr(i), target);
  }

  // repeated .pb.TCommonReward RewardArr = 5;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rewardarr(i), target);
  }

  // optional uint32 RewardScore = 6;
  if (has_rewardscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rewardscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyPlunderRsp)
  return target;
}

int TCrossLevyPlunderRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsAtkWin = 1;
    if (has_isatkwin()) {
      total_size += 1 + 1;
    }

    // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
    if (has_atkuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atkuserinfo());
    }

    // optional .pb.TUserSimpleInfo DefUserInfo = 3;
    if (has_defuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defuserinfo());
    }

    // optional uint32 RewardScore = 6;
    if (has_rewardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardscore());
    }

  }
  // repeated .pb.TCrossLevyUserRecordViewInfo RecordArr = 4;
  total_size += 1 * this->recordarr_size();
  for (int i = 0; i < this->recordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordarr(i));
  }

  // repeated .pb.TCommonReward RewardArr = 5;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyPlunderRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyPlunderRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyPlunderRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyPlunderRsp::MergeFrom(const TCrossLevyPlunderRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordarr_.MergeFrom(from.recordarr_);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isatkwin()) {
      set_isatkwin(from.isatkwin());
    }
    if (from.has_atkuserinfo()) {
      mutable_atkuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.atkuserinfo());
    }
    if (from.has_defuserinfo()) {
      mutable_defuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.defuserinfo());
    }
    if (from.has_rewardscore()) {
      set_rewardscore(from.rewardscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyPlunderRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyPlunderRsp::CopyFrom(const TCrossLevyPlunderRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyPlunderRsp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->recordarr())) return false;
  return true;
}

void TCrossLevyPlunderRsp::Swap(TCrossLevyPlunderRsp* other) {
  if (other != this) {
    std::swap(isatkwin_, other->isatkwin_);
    std::swap(atkuserinfo_, other->atkuserinfo_);
    std::swap(defuserinfo_, other->defuserinfo_);
    recordarr_.Swap(&other->recordarr_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(rewardscore_, other->rewardscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyPlunderRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyPlunderRsp_descriptor_;
  metadata.reflection = TCrossLevyPlunderRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyExpelReq::kCityIdFieldNumber;
const int TCrossLevyExpelReq::kCampIdFieldNumber;
const int TCrossLevyExpelReq::kEnemyUidFieldNumber;
#endif  // !_MSC_VER

TCrossLevyExpelReq::TCrossLevyExpelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyExpelReq)
}

void TCrossLevyExpelReq::InitAsDefaultInstance() {
}

TCrossLevyExpelReq::TCrossLevyExpelReq(const TCrossLevyExpelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyExpelReq)
}

void TCrossLevyExpelReq::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  campid_ = 0u;
  enemyuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyExpelReq::~TCrossLevyExpelReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyExpelReq)
  SharedDtor();
}

void TCrossLevyExpelReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyExpelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyExpelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyExpelReq_descriptor_;
}

const TCrossLevyExpelReq& TCrossLevyExpelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyExpelReq* TCrossLevyExpelReq::default_instance_ = NULL;

TCrossLevyExpelReq* TCrossLevyExpelReq::New() const {
  return new TCrossLevyExpelReq;
}

void TCrossLevyExpelReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyExpelReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cityid_, enemyuid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyExpelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyExpelReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CampId;
        break;
      }

      // optional uint32 CampId = 2;
      case 2: {
        if (tag == 16) {
         parse_CampId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EnemyUid;
        break;
      }

      // optional uint64 EnemyUid = 3;
      case 3: {
        if (tag == 24) {
         parse_EnemyUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enemyuid_)));
          set_has_enemyuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyExpelReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyExpelReq)
  return false;
#undef DO_
}

void TCrossLevyExpelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyExpelReq)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // optional uint32 CampId = 2;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->campid(), output);
  }

  // optional uint64 EnemyUid = 3;
  if (has_enemyuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->enemyuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyExpelReq)
}

::google::protobuf::uint8* TCrossLevyExpelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyExpelReq)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // optional uint32 CampId = 2;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->campid(), target);
  }

  // optional uint64 EnemyUid = 3;
  if (has_enemyuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->enemyuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyExpelReq)
  return target;
}

int TCrossLevyExpelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 CampId = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // optional uint64 EnemyUid = 3;
    if (has_enemyuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enemyuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyExpelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyExpelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyExpelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyExpelReq::MergeFrom(const TCrossLevyExpelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_enemyuid()) {
      set_enemyuid(from.enemyuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyExpelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyExpelReq::CopyFrom(const TCrossLevyExpelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyExpelReq::IsInitialized() const {

  return true;
}

void TCrossLevyExpelReq::Swap(TCrossLevyExpelReq* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(campid_, other->campid_);
    std::swap(enemyuid_, other->enemyuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyExpelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyExpelReq_descriptor_;
  metadata.reflection = TCrossLevyExpelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyExpelRsp::kIsAtkWinFieldNumber;
const int TCrossLevyExpelRsp::kAtkUserInfoFieldNumber;
const int TCrossLevyExpelRsp::kDefUserInfoFieldNumber;
const int TCrossLevyExpelRsp::kRecordArrFieldNumber;
const int TCrossLevyExpelRsp::kRewardArrFieldNumber;
const int TCrossLevyExpelRsp::kRewardScoreFieldNumber;
#endif  // !_MSC_VER

TCrossLevyExpelRsp::TCrossLevyExpelRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyExpelRsp)
}

void TCrossLevyExpelRsp::InitAsDefaultInstance() {
  atkuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
  defuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TCrossLevyExpelRsp::TCrossLevyExpelRsp(const TCrossLevyExpelRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyExpelRsp)
}

void TCrossLevyExpelRsp::SharedCtor() {
  _cached_size_ = 0;
  isatkwin_ = false;
  atkuserinfo_ = NULL;
  defuserinfo_ = NULL;
  rewardscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyExpelRsp::~TCrossLevyExpelRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyExpelRsp)
  SharedDtor();
}

void TCrossLevyExpelRsp::SharedDtor() {
  if (this != default_instance_) {
    delete atkuserinfo_;
    delete defuserinfo_;
  }
}

void TCrossLevyExpelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyExpelRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyExpelRsp_descriptor_;
}

const TCrossLevyExpelRsp& TCrossLevyExpelRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyExpelRsp* TCrossLevyExpelRsp::default_instance_ = NULL;

TCrossLevyExpelRsp* TCrossLevyExpelRsp::New() const {
  return new TCrossLevyExpelRsp;
}

void TCrossLevyExpelRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyExpelRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 39) {
    ZR_(isatkwin_, rewardscore_);
    if (has_atkuserinfo()) {
      if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
    if (has_defuserinfo()) {
      if (defuserinfo_ != NULL) defuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  recordarr_.Clear();
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyExpelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyExpelRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsAtkWin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isatkwin_)));
          set_has_isatkwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AtkUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_AtkUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atkuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DefUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo DefUserInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_DefUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RecordArr;
        break;
      }

      // repeated .pb.TCrossLevyUserRecordViewInfo RecordArr = 4;
      case 4: {
        if (tag == 34) {
         parse_RecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RecordArr;
        if (input->ExpectTag(42)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 5;
      case 5: {
        if (tag == 42) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_RewardArr;
        if (input->ExpectTag(48)) goto parse_RewardScore;
        break;
      }

      // optional uint32 RewardScore = 6;
      case 6: {
        if (tag == 48) {
         parse_RewardScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardscore_)));
          set_has_rewardscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyExpelRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyExpelRsp)
  return false;
#undef DO_
}

void TCrossLevyExpelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyExpelRsp)
  // optional bool IsAtkWin = 1;
  if (has_isatkwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isatkwin(), output);
  }

  // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
  if (has_atkuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->atkuserinfo(), output);
  }

  // optional .pb.TUserSimpleInfo DefUserInfo = 3;
  if (has_defuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->defuserinfo(), output);
  }

  // repeated .pb.TCrossLevyUserRecordViewInfo RecordArr = 4;
  for (int i = 0; i < this->recordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->recordarr(i), output);
  }

  // repeated .pb.TCommonReward RewardArr = 5;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->rewardarr(i), output);
  }

  // optional uint32 RewardScore = 6;
  if (has_rewardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rewardscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyExpelRsp)
}

::google::protobuf::uint8* TCrossLevyExpelRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyExpelRsp)
  // optional bool IsAtkWin = 1;
  if (has_isatkwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isatkwin(), target);
  }

  // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
  if (has_atkuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->atkuserinfo(), target);
  }

  // optional .pb.TUserSimpleInfo DefUserInfo = 3;
  if (has_defuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->defuserinfo(), target);
  }

  // repeated .pb.TCrossLevyUserRecordViewInfo RecordArr = 4;
  for (int i = 0; i < this->recordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->recordarr(i), target);
  }

  // repeated .pb.TCommonReward RewardArr = 5;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->rewardarr(i), target);
  }

  // optional uint32 RewardScore = 6;
  if (has_rewardscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rewardscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyExpelRsp)
  return target;
}

int TCrossLevyExpelRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsAtkWin = 1;
    if (has_isatkwin()) {
      total_size += 1 + 1;
    }

    // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
    if (has_atkuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atkuserinfo());
    }

    // optional .pb.TUserSimpleInfo DefUserInfo = 3;
    if (has_defuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defuserinfo());
    }

    // optional uint32 RewardScore = 6;
    if (has_rewardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardscore());
    }

  }
  // repeated .pb.TCrossLevyUserRecordViewInfo RecordArr = 4;
  total_size += 1 * this->recordarr_size();
  for (int i = 0; i < this->recordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordarr(i));
  }

  // repeated .pb.TCommonReward RewardArr = 5;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyExpelRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyExpelRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyExpelRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyExpelRsp::MergeFrom(const TCrossLevyExpelRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordarr_.MergeFrom(from.recordarr_);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isatkwin()) {
      set_isatkwin(from.isatkwin());
    }
    if (from.has_atkuserinfo()) {
      mutable_atkuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.atkuserinfo());
    }
    if (from.has_defuserinfo()) {
      mutable_defuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.defuserinfo());
    }
    if (from.has_rewardscore()) {
      set_rewardscore(from.rewardscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyExpelRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyExpelRsp::CopyFrom(const TCrossLevyExpelRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyExpelRsp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->recordarr())) return false;
  return true;
}

void TCrossLevyExpelRsp::Swap(TCrossLevyExpelRsp* other) {
  if (other != this) {
    std::swap(isatkwin_, other->isatkwin_);
    std::swap(atkuserinfo_, other->atkuserinfo_);
    std::swap(defuserinfo_, other->defuserinfo_);
    recordarr_.Swap(&other->recordarr_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(rewardscore_, other->rewardscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyExpelRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyExpelRsp_descriptor_;
  metadata.reflection = TCrossLevyExpelRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyForceMoveReq::kCityIdFieldNumber;
const int TCrossLevyForceMoveReq::kCampIdFieldNumber;
const int TCrossLevyForceMoveReq::kEnemyUidFieldNumber;
const int TCrossLevyForceMoveReq::kOriCityIdFieldNumber;
const int TCrossLevyForceMoveReq::kOriCampIdFieldNumber;
#endif  // !_MSC_VER

TCrossLevyForceMoveReq::TCrossLevyForceMoveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyForceMoveReq)
}

void TCrossLevyForceMoveReq::InitAsDefaultInstance() {
}

TCrossLevyForceMoveReq::TCrossLevyForceMoveReq(const TCrossLevyForceMoveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyForceMoveReq)
}

void TCrossLevyForceMoveReq::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  campid_ = 0u;
  enemyuid_ = GOOGLE_ULONGLONG(0);
  oricityid_ = 0u;
  oricampid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyForceMoveReq::~TCrossLevyForceMoveReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyForceMoveReq)
  SharedDtor();
}

void TCrossLevyForceMoveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyForceMoveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyForceMoveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyForceMoveReq_descriptor_;
}

const TCrossLevyForceMoveReq& TCrossLevyForceMoveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyForceMoveReq* TCrossLevyForceMoveReq::default_instance_ = NULL;

TCrossLevyForceMoveReq* TCrossLevyForceMoveReq::New() const {
  return new TCrossLevyForceMoveReq;
}

void TCrossLevyForceMoveReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyForceMoveReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(cityid_, oricampid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyForceMoveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyForceMoveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CampId;
        break;
      }

      // optional uint32 CampId = 2;
      case 2: {
        if (tag == 16) {
         parse_CampId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EnemyUid;
        break;
      }

      // optional uint64 EnemyUid = 3;
      case 3: {
        if (tag == 24) {
         parse_EnemyUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enemyuid_)));
          set_has_enemyuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_OriCityId;
        break;
      }

      // optional uint32 OriCityId = 4;
      case 4: {
        if (tag == 32) {
         parse_OriCityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oricityid_)));
          set_has_oricityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_OriCampId;
        break;
      }

      // optional uint32 OriCampId = 5;
      case 5: {
        if (tag == 40) {
         parse_OriCampId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oricampid_)));
          set_has_oricampid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyForceMoveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyForceMoveReq)
  return false;
#undef DO_
}

void TCrossLevyForceMoveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyForceMoveReq)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // optional uint32 CampId = 2;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->campid(), output);
  }

  // optional uint64 EnemyUid = 3;
  if (has_enemyuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->enemyuid(), output);
  }

  // optional uint32 OriCityId = 4;
  if (has_oricityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->oricityid(), output);
  }

  // optional uint32 OriCampId = 5;
  if (has_oricampid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->oricampid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyForceMoveReq)
}

::google::protobuf::uint8* TCrossLevyForceMoveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyForceMoveReq)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // optional uint32 CampId = 2;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->campid(), target);
  }

  // optional uint64 EnemyUid = 3;
  if (has_enemyuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->enemyuid(), target);
  }

  // optional uint32 OriCityId = 4;
  if (has_oricityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->oricityid(), target);
  }

  // optional uint32 OriCampId = 5;
  if (has_oricampid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->oricampid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyForceMoveReq)
  return target;
}

int TCrossLevyForceMoveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 CampId = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // optional uint64 EnemyUid = 3;
    if (has_enemyuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enemyuid());
    }

    // optional uint32 OriCityId = 4;
    if (has_oricityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oricityid());
    }

    // optional uint32 OriCampId = 5;
    if (has_oricampid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oricampid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyForceMoveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyForceMoveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyForceMoveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyForceMoveReq::MergeFrom(const TCrossLevyForceMoveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_enemyuid()) {
      set_enemyuid(from.enemyuid());
    }
    if (from.has_oricityid()) {
      set_oricityid(from.oricityid());
    }
    if (from.has_oricampid()) {
      set_oricampid(from.oricampid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyForceMoveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyForceMoveReq::CopyFrom(const TCrossLevyForceMoveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyForceMoveReq::IsInitialized() const {

  return true;
}

void TCrossLevyForceMoveReq::Swap(TCrossLevyForceMoveReq* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(campid_, other->campid_);
    std::swap(enemyuid_, other->enemyuid_);
    std::swap(oricityid_, other->oricityid_);
    std::swap(oricampid_, other->oricampid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyForceMoveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyForceMoveReq_descriptor_;
  metadata.reflection = TCrossLevyForceMoveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyForceMoveRsp::kIsAtkWinFieldNumber;
const int TCrossLevyForceMoveRsp::kAtkUserInfoFieldNumber;
const int TCrossLevyForceMoveRsp::kDefUserInfoFieldNumber;
const int TCrossLevyForceMoveRsp::kRecordArrFieldNumber;
const int TCrossLevyForceMoveRsp::kRewardScoreFieldNumber;
#endif  // !_MSC_VER

TCrossLevyForceMoveRsp::TCrossLevyForceMoveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyForceMoveRsp)
}

void TCrossLevyForceMoveRsp::InitAsDefaultInstance() {
  atkuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
  defuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TCrossLevyForceMoveRsp::TCrossLevyForceMoveRsp(const TCrossLevyForceMoveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyForceMoveRsp)
}

void TCrossLevyForceMoveRsp::SharedCtor() {
  _cached_size_ = 0;
  isatkwin_ = false;
  atkuserinfo_ = NULL;
  defuserinfo_ = NULL;
  rewardscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyForceMoveRsp::~TCrossLevyForceMoveRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyForceMoveRsp)
  SharedDtor();
}

void TCrossLevyForceMoveRsp::SharedDtor() {
  if (this != default_instance_) {
    delete atkuserinfo_;
    delete defuserinfo_;
  }
}

void TCrossLevyForceMoveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyForceMoveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyForceMoveRsp_descriptor_;
}

const TCrossLevyForceMoveRsp& TCrossLevyForceMoveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyForceMoveRsp* TCrossLevyForceMoveRsp::default_instance_ = NULL;

TCrossLevyForceMoveRsp* TCrossLevyForceMoveRsp::New() const {
  return new TCrossLevyForceMoveRsp;
}

void TCrossLevyForceMoveRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyForceMoveRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 23) {
    ZR_(isatkwin_, rewardscore_);
    if (has_atkuserinfo()) {
      if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
    if (has_defuserinfo()) {
      if (defuserinfo_ != NULL) defuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  recordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyForceMoveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyForceMoveRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsAtkWin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isatkwin_)));
          set_has_isatkwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AtkUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_AtkUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atkuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DefUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo DefUserInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_DefUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RecordArr;
        break;
      }

      // repeated .pb.TCrossLevyUserRecordViewInfo RecordArr = 4;
      case 4: {
        if (tag == 34) {
         parse_RecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RecordArr;
        if (input->ExpectTag(40)) goto parse_RewardScore;
        break;
      }

      // optional uint32 RewardScore = 5;
      case 5: {
        if (tag == 40) {
         parse_RewardScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardscore_)));
          set_has_rewardscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyForceMoveRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyForceMoveRsp)
  return false;
#undef DO_
}

void TCrossLevyForceMoveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyForceMoveRsp)
  // optional bool IsAtkWin = 1;
  if (has_isatkwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isatkwin(), output);
  }

  // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
  if (has_atkuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->atkuserinfo(), output);
  }

  // optional .pb.TUserSimpleInfo DefUserInfo = 3;
  if (has_defuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->defuserinfo(), output);
  }

  // repeated .pb.TCrossLevyUserRecordViewInfo RecordArr = 4;
  for (int i = 0; i < this->recordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->recordarr(i), output);
  }

  // optional uint32 RewardScore = 5;
  if (has_rewardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rewardscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyForceMoveRsp)
}

::google::protobuf::uint8* TCrossLevyForceMoveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyForceMoveRsp)
  // optional bool IsAtkWin = 1;
  if (has_isatkwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isatkwin(), target);
  }

  // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
  if (has_atkuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->atkuserinfo(), target);
  }

  // optional .pb.TUserSimpleInfo DefUserInfo = 3;
  if (has_defuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->defuserinfo(), target);
  }

  // repeated .pb.TCrossLevyUserRecordViewInfo RecordArr = 4;
  for (int i = 0; i < this->recordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->recordarr(i), target);
  }

  // optional uint32 RewardScore = 5;
  if (has_rewardscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rewardscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyForceMoveRsp)
  return target;
}

int TCrossLevyForceMoveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsAtkWin = 1;
    if (has_isatkwin()) {
      total_size += 1 + 1;
    }

    // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
    if (has_atkuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atkuserinfo());
    }

    // optional .pb.TUserSimpleInfo DefUserInfo = 3;
    if (has_defuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defuserinfo());
    }

    // optional uint32 RewardScore = 5;
    if (has_rewardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardscore());
    }

  }
  // repeated .pb.TCrossLevyUserRecordViewInfo RecordArr = 4;
  total_size += 1 * this->recordarr_size();
  for (int i = 0; i < this->recordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyForceMoveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyForceMoveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyForceMoveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyForceMoveRsp::MergeFrom(const TCrossLevyForceMoveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordarr_.MergeFrom(from.recordarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isatkwin()) {
      set_isatkwin(from.isatkwin());
    }
    if (from.has_atkuserinfo()) {
      mutable_atkuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.atkuserinfo());
    }
    if (from.has_defuserinfo()) {
      mutable_defuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.defuserinfo());
    }
    if (from.has_rewardscore()) {
      set_rewardscore(from.rewardscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyForceMoveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyForceMoveRsp::CopyFrom(const TCrossLevyForceMoveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyForceMoveRsp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->recordarr())) return false;
  return true;
}

void TCrossLevyForceMoveRsp::Swap(TCrossLevyForceMoveRsp* other) {
  if (other != this) {
    std::swap(isatkwin_, other->isatkwin_);
    std::swap(atkuserinfo_, other->atkuserinfo_);
    std::swap(defuserinfo_, other->defuserinfo_);
    recordarr_.Swap(&other->recordarr_);
    std::swap(rewardscore_, other->rewardscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyForceMoveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyForceMoveRsp_descriptor_;
  metadata.reflection = TCrossLevyForceMoveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGetBattleArgsReq::kIdFieldNumber;
const int TCrossLevyGetBattleArgsReq::kBattleCheckParamFieldNumber;
const int TCrossLevyGetBattleArgsReq::kRefreshTimeFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGetBattleArgsReq::TCrossLevyGetBattleArgsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGetBattleArgsReq)
}

void TCrossLevyGetBattleArgsReq::InitAsDefaultInstance() {
  battlecheckparam_ = const_cast< ::pb::TBattleCheckParam*>(&::pb::TBattleCheckParam::default_instance());
}

TCrossLevyGetBattleArgsReq::TCrossLevyGetBattleArgsReq(const TCrossLevyGetBattleArgsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGetBattleArgsReq)
}

void TCrossLevyGetBattleArgsReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  battlecheckparam_ = NULL;
  refreshtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGetBattleArgsReq::~TCrossLevyGetBattleArgsReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGetBattleArgsReq)
  SharedDtor();
}

void TCrossLevyGetBattleArgsReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlecheckparam_;
  }
}

void TCrossLevyGetBattleArgsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGetBattleArgsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGetBattleArgsReq_descriptor_;
}

const TCrossLevyGetBattleArgsReq& TCrossLevyGetBattleArgsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyGetBattleArgsReq* TCrossLevyGetBattleArgsReq::default_instance_ = NULL;

TCrossLevyGetBattleArgsReq* TCrossLevyGetBattleArgsReq::New() const {
  return new TCrossLevyGetBattleArgsReq;
}

void TCrossLevyGetBattleArgsReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyGetBattleArgsReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(refreshtime_, id_);
    if (has_battlecheckparam()) {
      if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGetBattleArgsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGetBattleArgsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleCheckParam;
        break;
      }

      // optional .pb.TBattleCheckParam BattleCheckParam = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleCheckParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecheckparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RefreshTime;
        break;
      }

      // optional uint64 RefreshTime = 3;
      case 3: {
        if (tag == 24) {
         parse_RefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refreshtime_)));
          set_has_refreshtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGetBattleArgsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGetBattleArgsReq)
  return false;
#undef DO_
}

void TCrossLevyGetBattleArgsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGetBattleArgsReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battlecheckparam(), output);
  }

  // optional uint64 RefreshTime = 3;
  if (has_refreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->refreshtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGetBattleArgsReq)
}

::google::protobuf::uint8* TCrossLevyGetBattleArgsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGetBattleArgsReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battlecheckparam(), target);
  }

  // optional uint64 RefreshTime = 3;
  if (has_refreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->refreshtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGetBattleArgsReq)
  return target;
}

int TCrossLevyGetBattleArgsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .pb.TBattleCheckParam BattleCheckParam = 2;
    if (has_battlecheckparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecheckparam());
    }

    // optional uint64 RefreshTime = 3;
    if (has_refreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refreshtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGetBattleArgsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGetBattleArgsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGetBattleArgsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGetBattleArgsReq::MergeFrom(const TCrossLevyGetBattleArgsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_battlecheckparam()) {
      mutable_battlecheckparam()->::pb::TBattleCheckParam::MergeFrom(from.battlecheckparam());
    }
    if (from.has_refreshtime()) {
      set_refreshtime(from.refreshtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGetBattleArgsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGetBattleArgsReq::CopyFrom(const TCrossLevyGetBattleArgsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGetBattleArgsReq::IsInitialized() const {

  return true;
}

void TCrossLevyGetBattleArgsReq::Swap(TCrossLevyGetBattleArgsReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(battlecheckparam_, other->battlecheckparam_);
    std::swap(refreshtime_, other->refreshtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGetBattleArgsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGetBattleArgsReq_descriptor_;
  metadata.reflection = TCrossLevyGetBattleArgsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGetBattleArgsRsp::kBattleArgsFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGetBattleArgsRsp::TCrossLevyGetBattleArgsRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGetBattleArgsRsp)
}

void TCrossLevyGetBattleArgsRsp::InitAsDefaultInstance() {
  battleargs_ = const_cast< ::pb::TBattleArgs*>(&::pb::TBattleArgs::default_instance());
}

TCrossLevyGetBattleArgsRsp::TCrossLevyGetBattleArgsRsp(const TCrossLevyGetBattleArgsRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGetBattleArgsRsp)
}

void TCrossLevyGetBattleArgsRsp::SharedCtor() {
  _cached_size_ = 0;
  battleargs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGetBattleArgsRsp::~TCrossLevyGetBattleArgsRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGetBattleArgsRsp)
  SharedDtor();
}

void TCrossLevyGetBattleArgsRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battleargs_;
  }
}

void TCrossLevyGetBattleArgsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGetBattleArgsRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGetBattleArgsRsp_descriptor_;
}

const TCrossLevyGetBattleArgsRsp& TCrossLevyGetBattleArgsRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyGetBattleArgsRsp* TCrossLevyGetBattleArgsRsp::default_instance_ = NULL;

TCrossLevyGetBattleArgsRsp* TCrossLevyGetBattleArgsRsp::New() const {
  return new TCrossLevyGetBattleArgsRsp;
}

void TCrossLevyGetBattleArgsRsp::Clear() {
  if (has_battleargs()) {
    if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGetBattleArgsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGetBattleArgsRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBattleArgs BattleArgs = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGetBattleArgsRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGetBattleArgsRsp)
  return false;
#undef DO_
}

void TCrossLevyGetBattleArgsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGetBattleArgsRsp)
  // optional .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battleargs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGetBattleArgsRsp)
}

::google::protobuf::uint8* TCrossLevyGetBattleArgsRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGetBattleArgsRsp)
  // optional .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battleargs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGetBattleArgsRsp)
  return target;
}

int TCrossLevyGetBattleArgsRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBattleArgs BattleArgs = 1;
    if (has_battleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleargs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGetBattleArgsRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGetBattleArgsRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGetBattleArgsRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGetBattleArgsRsp::MergeFrom(const TCrossLevyGetBattleArgsRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleargs()) {
      mutable_battleargs()->::pb::TBattleArgs::MergeFrom(from.battleargs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGetBattleArgsRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGetBattleArgsRsp::CopyFrom(const TCrossLevyGetBattleArgsRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGetBattleArgsRsp::IsInitialized() const {

  if (has_battleargs()) {
    if (!this->battleargs().IsInitialized()) return false;
  }
  return true;
}

void TCrossLevyGetBattleArgsRsp::Swap(TCrossLevyGetBattleArgsRsp* other) {
  if (other != this) {
    std::swap(battleargs_, other->battleargs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGetBattleArgsRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGetBattleArgsRsp_descriptor_;
  metadata.reflection = TCrossLevyGetBattleArgsRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyReportBattleBossReq::kBossIdFieldNumber;
const int TCrossLevyReportBattleBossReq::kRefreshTimeFieldNumber;
const int TCrossLevyReportBattleBossReq::kBattleRetFieldNumber;
#endif  // !_MSC_VER

TCrossLevyReportBattleBossReq::TCrossLevyReportBattleBossReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyReportBattleBossReq)
}

void TCrossLevyReportBattleBossReq::InitAsDefaultInstance() {
}

TCrossLevyReportBattleBossReq::TCrossLevyReportBattleBossReq(const TCrossLevyReportBattleBossReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyReportBattleBossReq)
}

void TCrossLevyReportBattleBossReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bossid_ = 0u;
  refreshtime_ = GOOGLE_ULONGLONG(0);
  battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyReportBattleBossReq::~TCrossLevyReportBattleBossReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyReportBattleBossReq)
  SharedDtor();
}

void TCrossLevyReportBattleBossReq::SharedDtor() {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleret_;
  }
  if (this != default_instance_) {
  }
}

void TCrossLevyReportBattleBossReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyReportBattleBossReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyReportBattleBossReq_descriptor_;
}

const TCrossLevyReportBattleBossReq& TCrossLevyReportBattleBossReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyReportBattleBossReq* TCrossLevyReportBattleBossReq::default_instance_ = NULL;

TCrossLevyReportBattleBossReq* TCrossLevyReportBattleBossReq::New() const {
  return new TCrossLevyReportBattleBossReq;
}

void TCrossLevyReportBattleBossReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    bossid_ = 0u;
    refreshtime_ = GOOGLE_ULONGLONG(0);
    if (has_battleret()) {
      if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battleret_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyReportBattleBossReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyReportBattleBossReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RefreshTime;
        break;
      }

      // optional uint64 RefreshTime = 2;
      case 2: {
        if (tag == 16) {
         parse_RefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refreshtime_)));
          set_has_refreshtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BattleRet;
        break;
      }

      // optional bytes BattleRet = 3;
      case 3: {
        if (tag == 26) {
         parse_BattleRet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battleret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyReportBattleBossReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyReportBattleBossReq)
  return false;
#undef DO_
}

void TCrossLevyReportBattleBossReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyReportBattleBossReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  // optional uint64 RefreshTime = 2;
  if (has_refreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->refreshtime(), output);
  }

  // optional bytes BattleRet = 3;
  if (has_battleret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->battleret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyReportBattleBossReq)
}

::google::protobuf::uint8* TCrossLevyReportBattleBossReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyReportBattleBossReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  // optional uint64 RefreshTime = 2;
  if (has_refreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->refreshtime(), target);
  }

  // optional bytes BattleRet = 3;
  if (has_battleret()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->battleret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyReportBattleBossReq)
  return target;
}

int TCrossLevyReportBattleBossReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional uint64 RefreshTime = 2;
    if (has_refreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refreshtime());
    }

    // optional bytes BattleRet = 3;
    if (has_battleret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battleret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyReportBattleBossReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyReportBattleBossReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyReportBattleBossReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyReportBattleBossReq::MergeFrom(const TCrossLevyReportBattleBossReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_refreshtime()) {
      set_refreshtime(from.refreshtime());
    }
    if (from.has_battleret()) {
      set_battleret(from.battleret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyReportBattleBossReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyReportBattleBossReq::CopyFrom(const TCrossLevyReportBattleBossReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyReportBattleBossReq::IsInitialized() const {

  return true;
}

void TCrossLevyReportBattleBossReq::Swap(TCrossLevyReportBattleBossReq* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(refreshtime_, other->refreshtime_);
    std::swap(battleret_, other->battleret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyReportBattleBossReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyReportBattleBossReq_descriptor_;
  metadata.reflection = TCrossLevyReportBattleBossReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyReportBattleBossRsp::kIsFinalStrikeFieldNumber;
const int TCrossLevyReportBattleBossRsp::kRewardArrFieldNumber;
const int TCrossLevyReportBattleBossRsp::kLastAtkBossTimeFieldNumber;
const int TCrossLevyReportBattleBossRsp::kRewardScoreFieldNumber;
const int TCrossLevyReportBattleBossRsp::kCurHpFieldNumber;
#endif  // !_MSC_VER

TCrossLevyReportBattleBossRsp::TCrossLevyReportBattleBossRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyReportBattleBossRsp)
}

void TCrossLevyReportBattleBossRsp::InitAsDefaultInstance() {
}

TCrossLevyReportBattleBossRsp::TCrossLevyReportBattleBossRsp(const TCrossLevyReportBattleBossRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyReportBattleBossRsp)
}

void TCrossLevyReportBattleBossRsp::SharedCtor() {
  _cached_size_ = 0;
  isfinalstrike_ = 0u;
  lastatkbosstime_ = GOOGLE_ULONGLONG(0);
  rewardscore_ = 0u;
  curhp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyReportBattleBossRsp::~TCrossLevyReportBattleBossRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyReportBattleBossRsp)
  SharedDtor();
}

void TCrossLevyReportBattleBossRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyReportBattleBossRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyReportBattleBossRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyReportBattleBossRsp_descriptor_;
}

const TCrossLevyReportBattleBossRsp& TCrossLevyReportBattleBossRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyReportBattleBossRsp* TCrossLevyReportBattleBossRsp::default_instance_ = NULL;

TCrossLevyReportBattleBossRsp* TCrossLevyReportBattleBossRsp::New() const {
  return new TCrossLevyReportBattleBossRsp;
}

void TCrossLevyReportBattleBossRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyReportBattleBossRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(isfinalstrike_, curhp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyReportBattleBossRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyReportBattleBossRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 isFinalStrike = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfinalstrike_)));
          set_has_isfinalstrike();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArr;
        if (input->ExpectTag(24)) goto parse_LastAtkBossTime;
        break;
      }

      // optional uint64 LastAtkBossTime = 3;
      case 3: {
        if (tag == 24) {
         parse_LastAtkBossTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastatkbosstime_)));
          set_has_lastatkbosstime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RewardScore;
        break;
      }

      // optional uint32 RewardScore = 4;
      case 4: {
        if (tag == 32) {
         parse_RewardScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardscore_)));
          set_has_rewardscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CurHp;
        break;
      }

      // optional uint64 CurHp = 5;
      case 5: {
        if (tag == 40) {
         parse_CurHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyReportBattleBossRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyReportBattleBossRsp)
  return false;
#undef DO_
}

void TCrossLevyReportBattleBossRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyReportBattleBossRsp)
  // optional uint32 isFinalStrike = 1;
  if (has_isfinalstrike()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->isfinalstrike(), output);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardarr(i), output);
  }

  // optional uint64 LastAtkBossTime = 3;
  if (has_lastatkbosstime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lastatkbosstime(), output);
  }

  // optional uint32 RewardScore = 4;
  if (has_rewardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rewardscore(), output);
  }

  // optional uint64 CurHp = 5;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->curhp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyReportBattleBossRsp)
}

::google::protobuf::uint8* TCrossLevyReportBattleBossRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyReportBattleBossRsp)
  // optional uint32 isFinalStrike = 1;
  if (has_isfinalstrike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->isfinalstrike(), target);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardarr(i), target);
  }

  // optional uint64 LastAtkBossTime = 3;
  if (has_lastatkbosstime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lastatkbosstime(), target);
  }

  // optional uint32 RewardScore = 4;
  if (has_rewardscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rewardscore(), target);
  }

  // optional uint64 CurHp = 5;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->curhp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyReportBattleBossRsp)
  return target;
}

int TCrossLevyReportBattleBossRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 isFinalStrike = 1;
    if (has_isfinalstrike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfinalstrike());
    }

    // optional uint64 LastAtkBossTime = 3;
    if (has_lastatkbosstime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastatkbosstime());
    }

    // optional uint32 RewardScore = 4;
    if (has_rewardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardscore());
    }

    // optional uint64 CurHp = 5;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curhp());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 2;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyReportBattleBossRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyReportBattleBossRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyReportBattleBossRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyReportBattleBossRsp::MergeFrom(const TCrossLevyReportBattleBossRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfinalstrike()) {
      set_isfinalstrike(from.isfinalstrike());
    }
    if (from.has_lastatkbosstime()) {
      set_lastatkbosstime(from.lastatkbosstime());
    }
    if (from.has_rewardscore()) {
      set_rewardscore(from.rewardscore());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyReportBattleBossRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyReportBattleBossRsp::CopyFrom(const TCrossLevyReportBattleBossRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyReportBattleBossRsp::IsInitialized() const {

  return true;
}

void TCrossLevyReportBattleBossRsp::Swap(TCrossLevyReportBattleBossRsp* other) {
  if (other != this) {
    std::swap(isfinalstrike_, other->isfinalstrike_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(lastatkbosstime_, other->lastatkbosstime_);
    std::swap(rewardscore_, other->rewardscore_);
    std::swap(curhp_, other->curhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyReportBattleBossRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyReportBattleBossRsp_descriptor_;
  metadata.reflection = TCrossLevyReportBattleBossRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyReportBattleMonsterReq::kMonsterIdFieldNumber;
const int TCrossLevyReportBattleMonsterReq::kMonsterRfrTimeFieldNumber;
const int TCrossLevyReportBattleMonsterReq::kBattleRetFieldNumber;
#endif  // !_MSC_VER

TCrossLevyReportBattleMonsterReq::TCrossLevyReportBattleMonsterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyReportBattleMonsterReq)
}

void TCrossLevyReportBattleMonsterReq::InitAsDefaultInstance() {
}

TCrossLevyReportBattleMonsterReq::TCrossLevyReportBattleMonsterReq(const TCrossLevyReportBattleMonsterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyReportBattleMonsterReq)
}

void TCrossLevyReportBattleMonsterReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  monsterid_ = 0u;
  monsterrfrtime_ = GOOGLE_ULONGLONG(0);
  battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyReportBattleMonsterReq::~TCrossLevyReportBattleMonsterReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyReportBattleMonsterReq)
  SharedDtor();
}

void TCrossLevyReportBattleMonsterReq::SharedDtor() {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleret_;
  }
  if (this != default_instance_) {
  }
}

void TCrossLevyReportBattleMonsterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyReportBattleMonsterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyReportBattleMonsterReq_descriptor_;
}

const TCrossLevyReportBattleMonsterReq& TCrossLevyReportBattleMonsterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyReportBattleMonsterReq* TCrossLevyReportBattleMonsterReq::default_instance_ = NULL;

TCrossLevyReportBattleMonsterReq* TCrossLevyReportBattleMonsterReq::New() const {
  return new TCrossLevyReportBattleMonsterReq;
}

void TCrossLevyReportBattleMonsterReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    monsterid_ = 0u;
    monsterrfrtime_ = GOOGLE_ULONGLONG(0);
    if (has_battleret()) {
      if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battleret_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyReportBattleMonsterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyReportBattleMonsterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MonsterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MonsterRfrTime;
        break;
      }

      // optional uint64 MonsterRfrTime = 2;
      case 2: {
        if (tag == 16) {
         parse_MonsterRfrTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &monsterrfrtime_)));
          set_has_monsterrfrtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BattleRet;
        break;
      }

      // optional bytes BattleRet = 3;
      case 3: {
        if (tag == 26) {
         parse_BattleRet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battleret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyReportBattleMonsterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyReportBattleMonsterReq)
  return false;
#undef DO_
}

void TCrossLevyReportBattleMonsterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyReportBattleMonsterReq)
  // optional uint32 MonsterId = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }

  // optional uint64 MonsterRfrTime = 2;
  if (has_monsterrfrtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->monsterrfrtime(), output);
  }

  // optional bytes BattleRet = 3;
  if (has_battleret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->battleret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyReportBattleMonsterReq)
}

::google::protobuf::uint8* TCrossLevyReportBattleMonsterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyReportBattleMonsterReq)
  // optional uint32 MonsterId = 1;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monsterid(), target);
  }

  // optional uint64 MonsterRfrTime = 2;
  if (has_monsterrfrtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->monsterrfrtime(), target);
  }

  // optional bytes BattleRet = 3;
  if (has_battleret()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->battleret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyReportBattleMonsterReq)
  return target;
}

int TCrossLevyReportBattleMonsterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MonsterId = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

    // optional uint64 MonsterRfrTime = 2;
    if (has_monsterrfrtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->monsterrfrtime());
    }

    // optional bytes BattleRet = 3;
    if (has_battleret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battleret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyReportBattleMonsterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyReportBattleMonsterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyReportBattleMonsterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyReportBattleMonsterReq::MergeFrom(const TCrossLevyReportBattleMonsterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_monsterrfrtime()) {
      set_monsterrfrtime(from.monsterrfrtime());
    }
    if (from.has_battleret()) {
      set_battleret(from.battleret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyReportBattleMonsterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyReportBattleMonsterReq::CopyFrom(const TCrossLevyReportBattleMonsterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyReportBattleMonsterReq::IsInitialized() const {

  return true;
}

void TCrossLevyReportBattleMonsterReq::Swap(TCrossLevyReportBattleMonsterReq* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(monsterrfrtime_, other->monsterrfrtime_);
    std::swap(battleret_, other->battleret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyReportBattleMonsterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyReportBattleMonsterReq_descriptor_;
  metadata.reflection = TCrossLevyReportBattleMonsterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyReportBattleMonsterRsp::kRewardScoreFieldNumber;
const int TCrossLevyReportBattleMonsterRsp::kMonsterArmyHpInfoArrFieldNumber;
const int TCrossLevyReportBattleMonsterRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TCrossLevyReportBattleMonsterRsp::TCrossLevyReportBattleMonsterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyReportBattleMonsterRsp)
}

void TCrossLevyReportBattleMonsterRsp::InitAsDefaultInstance() {
}

TCrossLevyReportBattleMonsterRsp::TCrossLevyReportBattleMonsterRsp(const TCrossLevyReportBattleMonsterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyReportBattleMonsterRsp)
}

void TCrossLevyReportBattleMonsterRsp::SharedCtor() {
  _cached_size_ = 0;
  rewardscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyReportBattleMonsterRsp::~TCrossLevyReportBattleMonsterRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyReportBattleMonsterRsp)
  SharedDtor();
}

void TCrossLevyReportBattleMonsterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyReportBattleMonsterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyReportBattleMonsterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyReportBattleMonsterRsp_descriptor_;
}

const TCrossLevyReportBattleMonsterRsp& TCrossLevyReportBattleMonsterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyReportBattleMonsterRsp* TCrossLevyReportBattleMonsterRsp::default_instance_ = NULL;

TCrossLevyReportBattleMonsterRsp* TCrossLevyReportBattleMonsterRsp::New() const {
  return new TCrossLevyReportBattleMonsterRsp;
}

void TCrossLevyReportBattleMonsterRsp::Clear() {
  rewardscore_ = 0u;
  monsterarmyhpinfoarr_.Clear();
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyReportBattleMonsterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyReportBattleMonsterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RewardScore = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardscore_)));
          set_has_rewardscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MonsterArmyHpInfoArr;
        break;
      }

      // repeated .pb.TCrossLevyMonsterArmyHpInfo MonsterArmyHpInfoArr = 2;
      case 2: {
        if (tag == 18) {
         parse_MonsterArmyHpInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterarmyhpinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MonsterArmyHpInfoArr;
        if (input->ExpectTag(26)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 3;
      case 3: {
        if (tag == 26) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyReportBattleMonsterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyReportBattleMonsterRsp)
  return false;
#undef DO_
}

void TCrossLevyReportBattleMonsterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyReportBattleMonsterRsp)
  // optional uint32 RewardScore = 1;
  if (has_rewardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rewardscore(), output);
  }

  // repeated .pb.TCrossLevyMonsterArmyHpInfo MonsterArmyHpInfoArr = 2;
  for (int i = 0; i < this->monsterarmyhpinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->monsterarmyhpinfoarr(i), output);
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyReportBattleMonsterRsp)
}

::google::protobuf::uint8* TCrossLevyReportBattleMonsterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyReportBattleMonsterRsp)
  // optional uint32 RewardScore = 1;
  if (has_rewardscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rewardscore(), target);
  }

  // repeated .pb.TCrossLevyMonsterArmyHpInfo MonsterArmyHpInfoArr = 2;
  for (int i = 0; i < this->monsterarmyhpinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->monsterarmyhpinfoarr(i), target);
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyReportBattleMonsterRsp)
  return target;
}

int TCrossLevyReportBattleMonsterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RewardScore = 1;
    if (has_rewardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardscore());
    }

  }
  // repeated .pb.TCrossLevyMonsterArmyHpInfo MonsterArmyHpInfoArr = 2;
  total_size += 1 * this->monsterarmyhpinfoarr_size();
  for (int i = 0; i < this->monsterarmyhpinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterarmyhpinfoarr(i));
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyReportBattleMonsterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyReportBattleMonsterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyReportBattleMonsterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyReportBattleMonsterRsp::MergeFrom(const TCrossLevyReportBattleMonsterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterarmyhpinfoarr_.MergeFrom(from.monsterarmyhpinfoarr_);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardscore()) {
      set_rewardscore(from.rewardscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyReportBattleMonsterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyReportBattleMonsterRsp::CopyFrom(const TCrossLevyReportBattleMonsterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyReportBattleMonsterRsp::IsInitialized() const {

  return true;
}

void TCrossLevyReportBattleMonsterRsp::Swap(TCrossLevyReportBattleMonsterRsp* other) {
  if (other != this) {
    std::swap(rewardscore_, other->rewardscore_);
    monsterarmyhpinfoarr_.Swap(&other->monsterarmyhpinfoarr_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyReportBattleMonsterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyReportBattleMonsterRsp_descriptor_;
  metadata.reflection = TCrossLevyReportBattleMonsterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGetSelfRecordInfoRsp::kRecordArrFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGetSelfRecordInfoRsp::TCrossLevyGetSelfRecordInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGetSelfRecordInfoRsp)
}

void TCrossLevyGetSelfRecordInfoRsp::InitAsDefaultInstance() {
}

TCrossLevyGetSelfRecordInfoRsp::TCrossLevyGetSelfRecordInfoRsp(const TCrossLevyGetSelfRecordInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGetSelfRecordInfoRsp)
}

void TCrossLevyGetSelfRecordInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGetSelfRecordInfoRsp::~TCrossLevyGetSelfRecordInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGetSelfRecordInfoRsp)
  SharedDtor();
}

void TCrossLevyGetSelfRecordInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyGetSelfRecordInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGetSelfRecordInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGetSelfRecordInfoRsp_descriptor_;
}

const TCrossLevyGetSelfRecordInfoRsp& TCrossLevyGetSelfRecordInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyGetSelfRecordInfoRsp* TCrossLevyGetSelfRecordInfoRsp::default_instance_ = NULL;

TCrossLevyGetSelfRecordInfoRsp* TCrossLevyGetSelfRecordInfoRsp::New() const {
  return new TCrossLevyGetSelfRecordInfoRsp;
}

void TCrossLevyGetSelfRecordInfoRsp::Clear() {
  recordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGetSelfRecordInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGetSelfRecordInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossLevySelfRecordInfo RecordArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RecordArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGetSelfRecordInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGetSelfRecordInfoRsp)
  return false;
#undef DO_
}

void TCrossLevyGetSelfRecordInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGetSelfRecordInfoRsp)
  // repeated .pb.TCrossLevySelfRecordInfo RecordArr = 1;
  for (int i = 0; i < this->recordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recordarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGetSelfRecordInfoRsp)
}

::google::protobuf::uint8* TCrossLevyGetSelfRecordInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGetSelfRecordInfoRsp)
  // repeated .pb.TCrossLevySelfRecordInfo RecordArr = 1;
  for (int i = 0; i < this->recordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recordarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGetSelfRecordInfoRsp)
  return target;
}

int TCrossLevyGetSelfRecordInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossLevySelfRecordInfo RecordArr = 1;
  total_size += 1 * this->recordarr_size();
  for (int i = 0; i < this->recordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGetSelfRecordInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGetSelfRecordInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGetSelfRecordInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGetSelfRecordInfoRsp::MergeFrom(const TCrossLevyGetSelfRecordInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordarr_.MergeFrom(from.recordarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGetSelfRecordInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGetSelfRecordInfoRsp::CopyFrom(const TCrossLevyGetSelfRecordInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGetSelfRecordInfoRsp::IsInitialized() const {

  return true;
}

void TCrossLevyGetSelfRecordInfoRsp::Swap(TCrossLevyGetSelfRecordInfoRsp* other) {
  if (other != this) {
    recordarr_.Swap(&other->recordarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGetSelfRecordInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGetSelfRecordInfoRsp_descriptor_;
  metadata.reflection = TCrossLevyGetSelfRecordInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGetRecordResultInfoReq::kRecordResultIdFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGetRecordResultInfoReq::TCrossLevyGetRecordResultInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGetRecordResultInfoReq)
}

void TCrossLevyGetRecordResultInfoReq::InitAsDefaultInstance() {
}

TCrossLevyGetRecordResultInfoReq::TCrossLevyGetRecordResultInfoReq(const TCrossLevyGetRecordResultInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGetRecordResultInfoReq)
}

void TCrossLevyGetRecordResultInfoReq::SharedCtor() {
  _cached_size_ = 0;
  recordresultid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGetRecordResultInfoReq::~TCrossLevyGetRecordResultInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGetRecordResultInfoReq)
  SharedDtor();
}

void TCrossLevyGetRecordResultInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyGetRecordResultInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGetRecordResultInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGetRecordResultInfoReq_descriptor_;
}

const TCrossLevyGetRecordResultInfoReq& TCrossLevyGetRecordResultInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyGetRecordResultInfoReq* TCrossLevyGetRecordResultInfoReq::default_instance_ = NULL;

TCrossLevyGetRecordResultInfoReq* TCrossLevyGetRecordResultInfoReq::New() const {
  return new TCrossLevyGetRecordResultInfoReq;
}

void TCrossLevyGetRecordResultInfoReq::Clear() {
  recordresultid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGetRecordResultInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGetRecordResultInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RecordResultId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordresultid_)));
          set_has_recordresultid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGetRecordResultInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGetRecordResultInfoReq)
  return false;
#undef DO_
}

void TCrossLevyGetRecordResultInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGetRecordResultInfoReq)
  // optional uint32 RecordResultId = 1;
  if (has_recordresultid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recordresultid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGetRecordResultInfoReq)
}

::google::protobuf::uint8* TCrossLevyGetRecordResultInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGetRecordResultInfoReq)
  // optional uint32 RecordResultId = 1;
  if (has_recordresultid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recordresultid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGetRecordResultInfoReq)
  return target;
}

int TCrossLevyGetRecordResultInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RecordResultId = 1;
    if (has_recordresultid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recordresultid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGetRecordResultInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGetRecordResultInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGetRecordResultInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGetRecordResultInfoReq::MergeFrom(const TCrossLevyGetRecordResultInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recordresultid()) {
      set_recordresultid(from.recordresultid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGetRecordResultInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGetRecordResultInfoReq::CopyFrom(const TCrossLevyGetRecordResultInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGetRecordResultInfoReq::IsInitialized() const {

  return true;
}

void TCrossLevyGetRecordResultInfoReq::Swap(TCrossLevyGetRecordResultInfoReq* other) {
  if (other != this) {
    std::swap(recordresultid_, other->recordresultid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGetRecordResultInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGetRecordResultInfoReq_descriptor_;
  metadata.reflection = TCrossLevyGetRecordResultInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGetRecordResultInfoRsp::kIsAtkWinFieldNumber;
const int TCrossLevyGetRecordResultInfoRsp::kAtkUserInfoFieldNumber;
const int TCrossLevyGetRecordResultInfoRsp::kDefUserInfoFieldNumber;
const int TCrossLevyGetRecordResultInfoRsp::kRecordArrFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGetRecordResultInfoRsp::TCrossLevyGetRecordResultInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGetRecordResultInfoRsp)
}

void TCrossLevyGetRecordResultInfoRsp::InitAsDefaultInstance() {
  atkuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
  defuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TCrossLevyGetRecordResultInfoRsp::TCrossLevyGetRecordResultInfoRsp(const TCrossLevyGetRecordResultInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGetRecordResultInfoRsp)
}

void TCrossLevyGetRecordResultInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  isatkwin_ = false;
  atkuserinfo_ = NULL;
  defuserinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGetRecordResultInfoRsp::~TCrossLevyGetRecordResultInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGetRecordResultInfoRsp)
  SharedDtor();
}

void TCrossLevyGetRecordResultInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete atkuserinfo_;
    delete defuserinfo_;
  }
}

void TCrossLevyGetRecordResultInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGetRecordResultInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGetRecordResultInfoRsp_descriptor_;
}

const TCrossLevyGetRecordResultInfoRsp& TCrossLevyGetRecordResultInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyGetRecordResultInfoRsp* TCrossLevyGetRecordResultInfoRsp::default_instance_ = NULL;

TCrossLevyGetRecordResultInfoRsp* TCrossLevyGetRecordResultInfoRsp::New() const {
  return new TCrossLevyGetRecordResultInfoRsp;
}

void TCrossLevyGetRecordResultInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    isatkwin_ = false;
    if (has_atkuserinfo()) {
      if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
    if (has_defuserinfo()) {
      if (defuserinfo_ != NULL) defuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }
  recordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGetRecordResultInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGetRecordResultInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsAtkWin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isatkwin_)));
          set_has_isatkwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AtkUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_AtkUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atkuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DefUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo DefUserInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_DefUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RecordArr;
        break;
      }

      // repeated .pb.TCrossLevyUserRecordViewInfo RecordArr = 4;
      case 4: {
        if (tag == 34) {
         parse_RecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RecordArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGetRecordResultInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGetRecordResultInfoRsp)
  return false;
#undef DO_
}

void TCrossLevyGetRecordResultInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGetRecordResultInfoRsp)
  // optional bool IsAtkWin = 1;
  if (has_isatkwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isatkwin(), output);
  }

  // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
  if (has_atkuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->atkuserinfo(), output);
  }

  // optional .pb.TUserSimpleInfo DefUserInfo = 3;
  if (has_defuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->defuserinfo(), output);
  }

  // repeated .pb.TCrossLevyUserRecordViewInfo RecordArr = 4;
  for (int i = 0; i < this->recordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->recordarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGetRecordResultInfoRsp)
}

::google::protobuf::uint8* TCrossLevyGetRecordResultInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGetRecordResultInfoRsp)
  // optional bool IsAtkWin = 1;
  if (has_isatkwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isatkwin(), target);
  }

  // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
  if (has_atkuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->atkuserinfo(), target);
  }

  // optional .pb.TUserSimpleInfo DefUserInfo = 3;
  if (has_defuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->defuserinfo(), target);
  }

  // repeated .pb.TCrossLevyUserRecordViewInfo RecordArr = 4;
  for (int i = 0; i < this->recordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->recordarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGetRecordResultInfoRsp)
  return target;
}

int TCrossLevyGetRecordResultInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsAtkWin = 1;
    if (has_isatkwin()) {
      total_size += 1 + 1;
    }

    // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
    if (has_atkuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atkuserinfo());
    }

    // optional .pb.TUserSimpleInfo DefUserInfo = 3;
    if (has_defuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defuserinfo());
    }

  }
  // repeated .pb.TCrossLevyUserRecordViewInfo RecordArr = 4;
  total_size += 1 * this->recordarr_size();
  for (int i = 0; i < this->recordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGetRecordResultInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGetRecordResultInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGetRecordResultInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGetRecordResultInfoRsp::MergeFrom(const TCrossLevyGetRecordResultInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordarr_.MergeFrom(from.recordarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isatkwin()) {
      set_isatkwin(from.isatkwin());
    }
    if (from.has_atkuserinfo()) {
      mutable_atkuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.atkuserinfo());
    }
    if (from.has_defuserinfo()) {
      mutable_defuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.defuserinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGetRecordResultInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGetRecordResultInfoRsp::CopyFrom(const TCrossLevyGetRecordResultInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGetRecordResultInfoRsp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->recordarr())) return false;
  return true;
}

void TCrossLevyGetRecordResultInfoRsp::Swap(TCrossLevyGetRecordResultInfoRsp* other) {
  if (other != this) {
    std::swap(isatkwin_, other->isatkwin_);
    std::swap(atkuserinfo_, other->atkuserinfo_);
    std::swap(defuserinfo_, other->defuserinfo_);
    recordarr_.Swap(&other->recordarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGetRecordResultInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGetRecordResultInfoRsp_descriptor_;
  metadata.reflection = TCrossLevyGetRecordResultInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyReceiveScoreRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

TCrossLevyReceiveScoreRewardReq::TCrossLevyReceiveScoreRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyReceiveScoreRewardReq)
}

void TCrossLevyReceiveScoreRewardReq::InitAsDefaultInstance() {
}

TCrossLevyReceiveScoreRewardReq::TCrossLevyReceiveScoreRewardReq(const TCrossLevyReceiveScoreRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyReceiveScoreRewardReq)
}

void TCrossLevyReceiveScoreRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyReceiveScoreRewardReq::~TCrossLevyReceiveScoreRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyReceiveScoreRewardReq)
  SharedDtor();
}

void TCrossLevyReceiveScoreRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyReceiveScoreRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyReceiveScoreRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyReceiveScoreRewardReq_descriptor_;
}

const TCrossLevyReceiveScoreRewardReq& TCrossLevyReceiveScoreRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyReceiveScoreRewardReq* TCrossLevyReceiveScoreRewardReq::default_instance_ = NULL;

TCrossLevyReceiveScoreRewardReq* TCrossLevyReceiveScoreRewardReq::New() const {
  return new TCrossLevyReceiveScoreRewardReq;
}

void TCrossLevyReceiveScoreRewardReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyReceiveScoreRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyReceiveScoreRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyReceiveScoreRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyReceiveScoreRewardReq)
  return false;
#undef DO_
}

void TCrossLevyReceiveScoreRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyReceiveScoreRewardReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyReceiveScoreRewardReq)
}

::google::protobuf::uint8* TCrossLevyReceiveScoreRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyReceiveScoreRewardReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyReceiveScoreRewardReq)
  return target;
}

int TCrossLevyReceiveScoreRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyReceiveScoreRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyReceiveScoreRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyReceiveScoreRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyReceiveScoreRewardReq::MergeFrom(const TCrossLevyReceiveScoreRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyReceiveScoreRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyReceiveScoreRewardReq::CopyFrom(const TCrossLevyReceiveScoreRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyReceiveScoreRewardReq::IsInitialized() const {

  return true;
}

void TCrossLevyReceiveScoreRewardReq::Swap(TCrossLevyReceiveScoreRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyReceiveScoreRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyReceiveScoreRewardReq_descriptor_;
  metadata.reflection = TCrossLevyReceiveScoreRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyReceiveScoreRewardRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TCrossLevyReceiveScoreRewardRsp::TCrossLevyReceiveScoreRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyReceiveScoreRewardRsp)
}

void TCrossLevyReceiveScoreRewardRsp::InitAsDefaultInstance() {
}

TCrossLevyReceiveScoreRewardRsp::TCrossLevyReceiveScoreRewardRsp(const TCrossLevyReceiveScoreRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyReceiveScoreRewardRsp)
}

void TCrossLevyReceiveScoreRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyReceiveScoreRewardRsp::~TCrossLevyReceiveScoreRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyReceiveScoreRewardRsp)
  SharedDtor();
}

void TCrossLevyReceiveScoreRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyReceiveScoreRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyReceiveScoreRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyReceiveScoreRewardRsp_descriptor_;
}

const TCrossLevyReceiveScoreRewardRsp& TCrossLevyReceiveScoreRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyReceiveScoreRewardRsp* TCrossLevyReceiveScoreRewardRsp::default_instance_ = NULL;

TCrossLevyReceiveScoreRewardRsp* TCrossLevyReceiveScoreRewardRsp::New() const {
  return new TCrossLevyReceiveScoreRewardRsp;
}

void TCrossLevyReceiveScoreRewardRsp::Clear() {
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyReceiveScoreRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyReceiveScoreRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyReceiveScoreRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyReceiveScoreRewardRsp)
  return false;
#undef DO_
}

void TCrossLevyReceiveScoreRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyReceiveScoreRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyReceiveScoreRewardRsp)
}

::google::protobuf::uint8* TCrossLevyReceiveScoreRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyReceiveScoreRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyReceiveScoreRewardRsp)
  return target;
}

int TCrossLevyReceiveScoreRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyReceiveScoreRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyReceiveScoreRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyReceiveScoreRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyReceiveScoreRewardRsp::MergeFrom(const TCrossLevyReceiveScoreRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyReceiveScoreRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyReceiveScoreRewardRsp::CopyFrom(const TCrossLevyReceiveScoreRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyReceiveScoreRewardRsp::IsInitialized() const {

  return true;
}

void TCrossLevyReceiveScoreRewardRsp::Swap(TCrossLevyReceiveScoreRewardRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyReceiveScoreRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyReceiveScoreRewardRsp_descriptor_;
  metadata.reflection = TCrossLevyReceiveScoreRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGetGuildUserListRsp::kGuildUserArrFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGetGuildUserListRsp::TCrossLevyGetGuildUserListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGetGuildUserListRsp)
}

void TCrossLevyGetGuildUserListRsp::InitAsDefaultInstance() {
}

TCrossLevyGetGuildUserListRsp::TCrossLevyGetGuildUserListRsp(const TCrossLevyGetGuildUserListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGetGuildUserListRsp)
}

void TCrossLevyGetGuildUserListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGetGuildUserListRsp::~TCrossLevyGetGuildUserListRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGetGuildUserListRsp)
  SharedDtor();
}

void TCrossLevyGetGuildUserListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyGetGuildUserListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGetGuildUserListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGetGuildUserListRsp_descriptor_;
}

const TCrossLevyGetGuildUserListRsp& TCrossLevyGetGuildUserListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyGetGuildUserListRsp* TCrossLevyGetGuildUserListRsp::default_instance_ = NULL;

TCrossLevyGetGuildUserListRsp* TCrossLevyGetGuildUserListRsp::New() const {
  return new TCrossLevyGetGuildUserListRsp;
}

void TCrossLevyGetGuildUserListRsp::Clear() {
  guilduserarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGetGuildUserListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGetGuildUserListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossLevyGuildUserInfo GuildUserArr = 1;
      case 1: {
        if (tag == 10) {
         parse_GuildUserArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guilduserarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_GuildUserArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGetGuildUserListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGetGuildUserListRsp)
  return false;
#undef DO_
}

void TCrossLevyGetGuildUserListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGetGuildUserListRsp)
  // repeated .pb.TCrossLevyGuildUserInfo GuildUserArr = 1;
  for (int i = 0; i < this->guilduserarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guilduserarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGetGuildUserListRsp)
}

::google::protobuf::uint8* TCrossLevyGetGuildUserListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGetGuildUserListRsp)
  // repeated .pb.TCrossLevyGuildUserInfo GuildUserArr = 1;
  for (int i = 0; i < this->guilduserarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guilduserarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGetGuildUserListRsp)
  return target;
}

int TCrossLevyGetGuildUserListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossLevyGuildUserInfo GuildUserArr = 1;
  total_size += 1 * this->guilduserarr_size();
  for (int i = 0; i < this->guilduserarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guilduserarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGetGuildUserListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGetGuildUserListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGetGuildUserListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGetGuildUserListRsp::MergeFrom(const TCrossLevyGetGuildUserListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  guilduserarr_.MergeFrom(from.guilduserarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGetGuildUserListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGetGuildUserListRsp::CopyFrom(const TCrossLevyGetGuildUserListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGetGuildUserListRsp::IsInitialized() const {

  return true;
}

void TCrossLevyGetGuildUserListRsp::Swap(TCrossLevyGetGuildUserListRsp* other) {
  if (other != this) {
    guilduserarr_.Swap(&other->guilduserarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGetGuildUserListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGetGuildUserListRsp_descriptor_;
  metadata.reflection = TCrossLevyGetGuildUserListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyReceiveSettleRewardReq::kCityIdFieldNumber;
const int TCrossLevyReceiveSettleRewardReq::kCampIdFieldNumber;
#endif  // !_MSC_VER

TCrossLevyReceiveSettleRewardReq::TCrossLevyReceiveSettleRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyReceiveSettleRewardReq)
}

void TCrossLevyReceiveSettleRewardReq::InitAsDefaultInstance() {
}

TCrossLevyReceiveSettleRewardReq::TCrossLevyReceiveSettleRewardReq(const TCrossLevyReceiveSettleRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyReceiveSettleRewardReq)
}

void TCrossLevyReceiveSettleRewardReq::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  campid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyReceiveSettleRewardReq::~TCrossLevyReceiveSettleRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyReceiveSettleRewardReq)
  SharedDtor();
}

void TCrossLevyReceiveSettleRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyReceiveSettleRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyReceiveSettleRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyReceiveSettleRewardReq_descriptor_;
}

const TCrossLevyReceiveSettleRewardReq& TCrossLevyReceiveSettleRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyReceiveSettleRewardReq* TCrossLevyReceiveSettleRewardReq::default_instance_ = NULL;

TCrossLevyReceiveSettleRewardReq* TCrossLevyReceiveSettleRewardReq::New() const {
  return new TCrossLevyReceiveSettleRewardReq;
}

void TCrossLevyReceiveSettleRewardReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyReceiveSettleRewardReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cityid_, campid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyReceiveSettleRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyReceiveSettleRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CampId;
        break;
      }

      // optional uint32 CampId = 2;
      case 2: {
        if (tag == 16) {
         parse_CampId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyReceiveSettleRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyReceiveSettleRewardReq)
  return false;
#undef DO_
}

void TCrossLevyReceiveSettleRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyReceiveSettleRewardReq)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // optional uint32 CampId = 2;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->campid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyReceiveSettleRewardReq)
}

::google::protobuf::uint8* TCrossLevyReceiveSettleRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyReceiveSettleRewardReq)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // optional uint32 CampId = 2;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->campid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyReceiveSettleRewardReq)
  return target;
}

int TCrossLevyReceiveSettleRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 CampId = 2;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyReceiveSettleRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyReceiveSettleRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyReceiveSettleRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyReceiveSettleRewardReq::MergeFrom(const TCrossLevyReceiveSettleRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyReceiveSettleRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyReceiveSettleRewardReq::CopyFrom(const TCrossLevyReceiveSettleRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyReceiveSettleRewardReq::IsInitialized() const {

  return true;
}

void TCrossLevyReceiveSettleRewardReq::Swap(TCrossLevyReceiveSettleRewardReq* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(campid_, other->campid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyReceiveSettleRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyReceiveSettleRewardReq_descriptor_;
  metadata.reflection = TCrossLevyReceiveSettleRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyReceiveSettleRewardRsp::kRewardArrFieldNumber;
const int TCrossLevyReceiveSettleRewardRsp::kSettleScoreFieldNumber;
const int TCrossLevyReceiveSettleRewardRsp::kRecordArrFieldNumber;
#endif  // !_MSC_VER

TCrossLevyReceiveSettleRewardRsp::TCrossLevyReceiveSettleRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyReceiveSettleRewardRsp)
}

void TCrossLevyReceiveSettleRewardRsp::InitAsDefaultInstance() {
}

TCrossLevyReceiveSettleRewardRsp::TCrossLevyReceiveSettleRewardRsp(const TCrossLevyReceiveSettleRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyReceiveSettleRewardRsp)
}

void TCrossLevyReceiveSettleRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  settlescore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyReceiveSettleRewardRsp::~TCrossLevyReceiveSettleRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyReceiveSettleRewardRsp)
  SharedDtor();
}

void TCrossLevyReceiveSettleRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyReceiveSettleRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyReceiveSettleRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyReceiveSettleRewardRsp_descriptor_;
}

const TCrossLevyReceiveSettleRewardRsp& TCrossLevyReceiveSettleRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyReceiveSettleRewardRsp* TCrossLevyReceiveSettleRewardRsp::default_instance_ = NULL;

TCrossLevyReceiveSettleRewardRsp* TCrossLevyReceiveSettleRewardRsp::New() const {
  return new TCrossLevyReceiveSettleRewardRsp;
}

void TCrossLevyReceiveSettleRewardRsp::Clear() {
  settlescore_ = 0u;
  rewardarr_.Clear();
  recordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyReceiveSettleRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyReceiveSettleRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectTag(16)) goto parse_SettleScore;
        break;
      }

      // optional uint32 SettleScore = 2;
      case 2: {
        if (tag == 16) {
         parse_SettleScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &settlescore_)));
          set_has_settlescore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RecordArr;
        break;
      }

      // repeated .pb.TCrossLevyRecordInfo RecordArr = 3;
      case 3: {
        if (tag == 26) {
         parse_RecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RecordArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyReceiveSettleRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyReceiveSettleRewardRsp)
  return false;
#undef DO_
}

void TCrossLevyReceiveSettleRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyReceiveSettleRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  // optional uint32 SettleScore = 2;
  if (has_settlescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->settlescore(), output);
  }

  // repeated .pb.TCrossLevyRecordInfo RecordArr = 3;
  for (int i = 0; i < this->recordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->recordarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyReceiveSettleRewardRsp)
}

::google::protobuf::uint8* TCrossLevyReceiveSettleRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyReceiveSettleRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  // optional uint32 SettleScore = 2;
  if (has_settlescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->settlescore(), target);
  }

  // repeated .pb.TCrossLevyRecordInfo RecordArr = 3;
  for (int i = 0; i < this->recordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->recordarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyReceiveSettleRewardRsp)
  return target;
}

int TCrossLevyReceiveSettleRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 SettleScore = 2;
    if (has_settlescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->settlescore());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  // repeated .pb.TCrossLevyRecordInfo RecordArr = 3;
  total_size += 1 * this->recordarr_size();
  for (int i = 0; i < this->recordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyReceiveSettleRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyReceiveSettleRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyReceiveSettleRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyReceiveSettleRewardRsp::MergeFrom(const TCrossLevyReceiveSettleRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  recordarr_.MergeFrom(from.recordarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_settlescore()) {
      set_settlescore(from.settlescore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyReceiveSettleRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyReceiveSettleRewardRsp::CopyFrom(const TCrossLevyReceiveSettleRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyReceiveSettleRewardRsp::IsInitialized() const {

  return true;
}

void TCrossLevyReceiveSettleRewardRsp::Swap(TCrossLevyReceiveSettleRewardRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(settlescore_, other->settlescore_);
    recordarr_.Swap(&other->recordarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyReceiveSettleRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyReceiveSettleRewardRsp_descriptor_;
  metadata.reflection = TCrossLevyReceiveSettleRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyBuyChallengeNumReq::kNumFieldNumber;
#endif  // !_MSC_VER

TCrossLevyBuyChallengeNumReq::TCrossLevyBuyChallengeNumReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyBuyChallengeNumReq)
}

void TCrossLevyBuyChallengeNumReq::InitAsDefaultInstance() {
}

TCrossLevyBuyChallengeNumReq::TCrossLevyBuyChallengeNumReq(const TCrossLevyBuyChallengeNumReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyBuyChallengeNumReq)
}

void TCrossLevyBuyChallengeNumReq::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyBuyChallengeNumReq::~TCrossLevyBuyChallengeNumReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyBuyChallengeNumReq)
  SharedDtor();
}

void TCrossLevyBuyChallengeNumReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyBuyChallengeNumReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyBuyChallengeNumReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyBuyChallengeNumReq_descriptor_;
}

const TCrossLevyBuyChallengeNumReq& TCrossLevyBuyChallengeNumReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyBuyChallengeNumReq* TCrossLevyBuyChallengeNumReq::default_instance_ = NULL;

TCrossLevyBuyChallengeNumReq* TCrossLevyBuyChallengeNumReq::New() const {
  return new TCrossLevyBuyChallengeNumReq;
}

void TCrossLevyBuyChallengeNumReq::Clear() {
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyBuyChallengeNumReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyBuyChallengeNumReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyBuyChallengeNumReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyBuyChallengeNumReq)
  return false;
#undef DO_
}

void TCrossLevyBuyChallengeNumReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyBuyChallengeNumReq)
  // optional uint32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyBuyChallengeNumReq)
}

::google::protobuf::uint8* TCrossLevyBuyChallengeNumReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyBuyChallengeNumReq)
  // optional uint32 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyBuyChallengeNumReq)
  return target;
}

int TCrossLevyBuyChallengeNumReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyBuyChallengeNumReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyBuyChallengeNumReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyBuyChallengeNumReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyBuyChallengeNumReq::MergeFrom(const TCrossLevyBuyChallengeNumReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyBuyChallengeNumReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyBuyChallengeNumReq::CopyFrom(const TCrossLevyBuyChallengeNumReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyBuyChallengeNumReq::IsInitialized() const {

  return true;
}

void TCrossLevyBuyChallengeNumReq::Swap(TCrossLevyBuyChallengeNumReq* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyBuyChallengeNumReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyBuyChallengeNumReq_descriptor_;
  metadata.reflection = TCrossLevyBuyChallengeNumReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGetEnemyListRsp::kEnemyListFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGetEnemyListRsp::TCrossLevyGetEnemyListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGetEnemyListRsp)
}

void TCrossLevyGetEnemyListRsp::InitAsDefaultInstance() {
}

TCrossLevyGetEnemyListRsp::TCrossLevyGetEnemyListRsp(const TCrossLevyGetEnemyListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGetEnemyListRsp)
}

void TCrossLevyGetEnemyListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGetEnemyListRsp::~TCrossLevyGetEnemyListRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGetEnemyListRsp)
  SharedDtor();
}

void TCrossLevyGetEnemyListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyGetEnemyListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGetEnemyListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGetEnemyListRsp_descriptor_;
}

const TCrossLevyGetEnemyListRsp& TCrossLevyGetEnemyListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyGetEnemyListRsp* TCrossLevyGetEnemyListRsp::default_instance_ = NULL;

TCrossLevyGetEnemyListRsp* TCrossLevyGetEnemyListRsp::New() const {
  return new TCrossLevyGetEnemyListRsp;
}

void TCrossLevyGetEnemyListRsp::Clear() {
  enemylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGetEnemyListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGetEnemyListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossLevyEnemyInfo EnemyList = 1;
      case 1: {
        if (tag == 10) {
         parse_EnemyList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemylist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_EnemyList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGetEnemyListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGetEnemyListRsp)
  return false;
#undef DO_
}

void TCrossLevyGetEnemyListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGetEnemyListRsp)
  // repeated .pb.TCrossLevyEnemyInfo EnemyList = 1;
  for (int i = 0; i < this->enemylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->enemylist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGetEnemyListRsp)
}

::google::protobuf::uint8* TCrossLevyGetEnemyListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGetEnemyListRsp)
  // repeated .pb.TCrossLevyEnemyInfo EnemyList = 1;
  for (int i = 0; i < this->enemylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->enemylist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGetEnemyListRsp)
  return target;
}

int TCrossLevyGetEnemyListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossLevyEnemyInfo EnemyList = 1;
  total_size += 1 * this->enemylist_size();
  for (int i = 0; i < this->enemylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemylist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGetEnemyListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGetEnemyListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGetEnemyListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGetEnemyListRsp::MergeFrom(const TCrossLevyGetEnemyListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  enemylist_.MergeFrom(from.enemylist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGetEnemyListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGetEnemyListRsp::CopyFrom(const TCrossLevyGetEnemyListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGetEnemyListRsp::IsInitialized() const {

  return true;
}

void TCrossLevyGetEnemyListRsp::Swap(TCrossLevyGetEnemyListRsp* other) {
  if (other != this) {
    enemylist_.Swap(&other->enemylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGetEnemyListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGetEnemyListRsp_descriptor_;
  metadata.reflection = TCrossLevyGetEnemyListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyRemoveEnemyReq::kUidFieldNumber;
#endif  // !_MSC_VER

TCrossLevyRemoveEnemyReq::TCrossLevyRemoveEnemyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyRemoveEnemyReq)
}

void TCrossLevyRemoveEnemyReq::InitAsDefaultInstance() {
}

TCrossLevyRemoveEnemyReq::TCrossLevyRemoveEnemyReq(const TCrossLevyRemoveEnemyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyRemoveEnemyReq)
}

void TCrossLevyRemoveEnemyReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyRemoveEnemyReq::~TCrossLevyRemoveEnemyReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyRemoveEnemyReq)
  SharedDtor();
}

void TCrossLevyRemoveEnemyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyRemoveEnemyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyRemoveEnemyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyRemoveEnemyReq_descriptor_;
}

const TCrossLevyRemoveEnemyReq& TCrossLevyRemoveEnemyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyRemoveEnemyReq* TCrossLevyRemoveEnemyReq::default_instance_ = NULL;

TCrossLevyRemoveEnemyReq* TCrossLevyRemoveEnemyReq::New() const {
  return new TCrossLevyRemoveEnemyReq;
}

void TCrossLevyRemoveEnemyReq::Clear() {
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyRemoveEnemyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyRemoveEnemyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyRemoveEnemyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyRemoveEnemyReq)
  return false;
#undef DO_
}

void TCrossLevyRemoveEnemyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyRemoveEnemyReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyRemoveEnemyReq)
}

::google::protobuf::uint8* TCrossLevyRemoveEnemyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyRemoveEnemyReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyRemoveEnemyReq)
  return target;
}

int TCrossLevyRemoveEnemyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyRemoveEnemyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyRemoveEnemyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyRemoveEnemyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyRemoveEnemyReq::MergeFrom(const TCrossLevyRemoveEnemyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyRemoveEnemyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyRemoveEnemyReq::CopyFrom(const TCrossLevyRemoveEnemyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyRemoveEnemyReq::IsInitialized() const {

  return true;
}

void TCrossLevyRemoveEnemyReq::Swap(TCrossLevyRemoveEnemyReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyRemoveEnemyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyRemoveEnemyReq_descriptor_;
  metadata.reflection = TCrossLevyRemoveEnemyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGetEnemyCampListReq::kUidFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGetEnemyCampListReq::TCrossLevyGetEnemyCampListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGetEnemyCampListReq)
}

void TCrossLevyGetEnemyCampListReq::InitAsDefaultInstance() {
}

TCrossLevyGetEnemyCampListReq::TCrossLevyGetEnemyCampListReq(const TCrossLevyGetEnemyCampListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGetEnemyCampListReq)
}

void TCrossLevyGetEnemyCampListReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGetEnemyCampListReq::~TCrossLevyGetEnemyCampListReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGetEnemyCampListReq)
  SharedDtor();
}

void TCrossLevyGetEnemyCampListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyGetEnemyCampListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGetEnemyCampListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGetEnemyCampListReq_descriptor_;
}

const TCrossLevyGetEnemyCampListReq& TCrossLevyGetEnemyCampListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyGetEnemyCampListReq* TCrossLevyGetEnemyCampListReq::default_instance_ = NULL;

TCrossLevyGetEnemyCampListReq* TCrossLevyGetEnemyCampListReq::New() const {
  return new TCrossLevyGetEnemyCampListReq;
}

void TCrossLevyGetEnemyCampListReq::Clear() {
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGetEnemyCampListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGetEnemyCampListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGetEnemyCampListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGetEnemyCampListReq)
  return false;
#undef DO_
}

void TCrossLevyGetEnemyCampListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGetEnemyCampListReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGetEnemyCampListReq)
}

::google::protobuf::uint8* TCrossLevyGetEnemyCampListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGetEnemyCampListReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGetEnemyCampListReq)
  return target;
}

int TCrossLevyGetEnemyCampListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGetEnemyCampListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGetEnemyCampListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGetEnemyCampListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGetEnemyCampListReq::MergeFrom(const TCrossLevyGetEnemyCampListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGetEnemyCampListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGetEnemyCampListReq::CopyFrom(const TCrossLevyGetEnemyCampListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGetEnemyCampListReq::IsInitialized() const {

  return true;
}

void TCrossLevyGetEnemyCampListReq::Swap(TCrossLevyGetEnemyCampListReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGetEnemyCampListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGetEnemyCampListReq_descriptor_;
  metadata.reflection = TCrossLevyGetEnemyCampListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGetEnemyCampListRsp::kEnemyCampListFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGetEnemyCampListRsp::TCrossLevyGetEnemyCampListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGetEnemyCampListRsp)
}

void TCrossLevyGetEnemyCampListRsp::InitAsDefaultInstance() {
}

TCrossLevyGetEnemyCampListRsp::TCrossLevyGetEnemyCampListRsp(const TCrossLevyGetEnemyCampListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGetEnemyCampListRsp)
}

void TCrossLevyGetEnemyCampListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGetEnemyCampListRsp::~TCrossLevyGetEnemyCampListRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGetEnemyCampListRsp)
  SharedDtor();
}

void TCrossLevyGetEnemyCampListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyGetEnemyCampListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGetEnemyCampListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGetEnemyCampListRsp_descriptor_;
}

const TCrossLevyGetEnemyCampListRsp& TCrossLevyGetEnemyCampListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyGetEnemyCampListRsp* TCrossLevyGetEnemyCampListRsp::default_instance_ = NULL;

TCrossLevyGetEnemyCampListRsp* TCrossLevyGetEnemyCampListRsp::New() const {
  return new TCrossLevyGetEnemyCampListRsp;
}

void TCrossLevyGetEnemyCampListRsp::Clear() {
  enemycamplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGetEnemyCampListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGetEnemyCampListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossLevyEnemyCampInfo EnemyCampList = 1;
      case 1: {
        if (tag == 10) {
         parse_EnemyCampList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemycamplist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_EnemyCampList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGetEnemyCampListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGetEnemyCampListRsp)
  return false;
#undef DO_
}

void TCrossLevyGetEnemyCampListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGetEnemyCampListRsp)
  // repeated .pb.TCrossLevyEnemyCampInfo EnemyCampList = 1;
  for (int i = 0; i < this->enemycamplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->enemycamplist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGetEnemyCampListRsp)
}

::google::protobuf::uint8* TCrossLevyGetEnemyCampListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGetEnemyCampListRsp)
  // repeated .pb.TCrossLevyEnemyCampInfo EnemyCampList = 1;
  for (int i = 0; i < this->enemycamplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->enemycamplist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGetEnemyCampListRsp)
  return target;
}

int TCrossLevyGetEnemyCampListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossLevyEnemyCampInfo EnemyCampList = 1;
  total_size += 1 * this->enemycamplist_size();
  for (int i = 0; i < this->enemycamplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemycamplist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGetEnemyCampListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGetEnemyCampListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGetEnemyCampListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGetEnemyCampListRsp::MergeFrom(const TCrossLevyGetEnemyCampListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  enemycamplist_.MergeFrom(from.enemycamplist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGetEnemyCampListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGetEnemyCampListRsp::CopyFrom(const TCrossLevyGetEnemyCampListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGetEnemyCampListRsp::IsInitialized() const {

  return true;
}

void TCrossLevyGetEnemyCampListRsp::Swap(TCrossLevyGetEnemyCampListRsp* other) {
  if (other != this) {
    enemycamplist_.Swap(&other->enemycamplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGetEnemyCampListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGetEnemyCampListRsp_descriptor_;
  metadata.reflection = TCrossLevyGetEnemyCampListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyUserBeMovedNotify::kOriCityIdFieldNumber;
const int TCrossLevyUserBeMovedNotify::kOriCampIdFieldNumber;
const int TCrossLevyUserBeMovedNotify::kCurCityIdFieldNumber;
const int TCrossLevyUserBeMovedNotify::kCurCampIdFieldNumber;
#endif  // !_MSC_VER

TCrossLevyUserBeMovedNotify::TCrossLevyUserBeMovedNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyUserBeMovedNotify)
}

void TCrossLevyUserBeMovedNotify::InitAsDefaultInstance() {
}

TCrossLevyUserBeMovedNotify::TCrossLevyUserBeMovedNotify(const TCrossLevyUserBeMovedNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyUserBeMovedNotify)
}

void TCrossLevyUserBeMovedNotify::SharedCtor() {
  _cached_size_ = 0;
  oricityid_ = 0u;
  oricampid_ = 0u;
  curcityid_ = 0u;
  curcampid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyUserBeMovedNotify::~TCrossLevyUserBeMovedNotify() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyUserBeMovedNotify)
  SharedDtor();
}

void TCrossLevyUserBeMovedNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyUserBeMovedNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyUserBeMovedNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyUserBeMovedNotify_descriptor_;
}

const TCrossLevyUserBeMovedNotify& TCrossLevyUserBeMovedNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyUserBeMovedNotify* TCrossLevyUserBeMovedNotify::default_instance_ = NULL;

TCrossLevyUserBeMovedNotify* TCrossLevyUserBeMovedNotify::New() const {
  return new TCrossLevyUserBeMovedNotify;
}

void TCrossLevyUserBeMovedNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyUserBeMovedNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(oricityid_, curcampid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyUserBeMovedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyUserBeMovedNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 OriCityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oricityid_)));
          set_has_oricityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OriCampId;
        break;
      }

      // optional uint32 OriCampId = 2;
      case 2: {
        if (tag == 16) {
         parse_OriCampId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oricampid_)));
          set_has_oricampid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CurCityId;
        break;
      }

      // optional uint32 CurCityId = 3;
      case 3: {
        if (tag == 24) {
         parse_CurCityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curcityid_)));
          set_has_curcityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_CurCampId;
        break;
      }

      // optional uint32 CurCampId = 4;
      case 4: {
        if (tag == 32) {
         parse_CurCampId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curcampid_)));
          set_has_curcampid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyUserBeMovedNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyUserBeMovedNotify)
  return false;
#undef DO_
}

void TCrossLevyUserBeMovedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyUserBeMovedNotify)
  // optional uint32 OriCityId = 1;
  if (has_oricityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oricityid(), output);
  }

  // optional uint32 OriCampId = 2;
  if (has_oricampid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->oricampid(), output);
  }

  // optional uint32 CurCityId = 3;
  if (has_curcityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curcityid(), output);
  }

  // optional uint32 CurCampId = 4;
  if (has_curcampid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->curcampid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyUserBeMovedNotify)
}

::google::protobuf::uint8* TCrossLevyUserBeMovedNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyUserBeMovedNotify)
  // optional uint32 OriCityId = 1;
  if (has_oricityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oricityid(), target);
  }

  // optional uint32 OriCampId = 2;
  if (has_oricampid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->oricampid(), target);
  }

  // optional uint32 CurCityId = 3;
  if (has_curcityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curcityid(), target);
  }

  // optional uint32 CurCampId = 4;
  if (has_curcampid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->curcampid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyUserBeMovedNotify)
  return target;
}

int TCrossLevyUserBeMovedNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 OriCityId = 1;
    if (has_oricityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oricityid());
    }

    // optional uint32 OriCampId = 2;
    if (has_oricampid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oricampid());
    }

    // optional uint32 CurCityId = 3;
    if (has_curcityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curcityid());
    }

    // optional uint32 CurCampId = 4;
    if (has_curcampid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curcampid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyUserBeMovedNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyUserBeMovedNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyUserBeMovedNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyUserBeMovedNotify::MergeFrom(const TCrossLevyUserBeMovedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oricityid()) {
      set_oricityid(from.oricityid());
    }
    if (from.has_oricampid()) {
      set_oricampid(from.oricampid());
    }
    if (from.has_curcityid()) {
      set_curcityid(from.curcityid());
    }
    if (from.has_curcampid()) {
      set_curcampid(from.curcampid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyUserBeMovedNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyUserBeMovedNotify::CopyFrom(const TCrossLevyUserBeMovedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyUserBeMovedNotify::IsInitialized() const {

  return true;
}

void TCrossLevyUserBeMovedNotify::Swap(TCrossLevyUserBeMovedNotify* other) {
  if (other != this) {
    std::swap(oricityid_, other->oricityid_);
    std::swap(oricampid_, other->oricampid_);
    std::swap(curcityid_, other->curcityid_);
    std::swap(curcampid_, other->curcampid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyUserBeMovedNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyUserBeMovedNotify_descriptor_;
  metadata.reflection = TCrossLevyUserBeMovedNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyCityUserNumInfo::kCityIdFieldNumber;
const int TCrossLevyCityUserNumInfo::kUserNumFieldNumber;
#endif  // !_MSC_VER

TCrossLevyCityUserNumInfo::TCrossLevyCityUserNumInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyCityUserNumInfo)
}

void TCrossLevyCityUserNumInfo::InitAsDefaultInstance() {
}

TCrossLevyCityUserNumInfo::TCrossLevyCityUserNumInfo(const TCrossLevyCityUserNumInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyCityUserNumInfo)
}

void TCrossLevyCityUserNumInfo::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  usernum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyCityUserNumInfo::~TCrossLevyCityUserNumInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyCityUserNumInfo)
  SharedDtor();
}

void TCrossLevyCityUserNumInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyCityUserNumInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyCityUserNumInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyCityUserNumInfo_descriptor_;
}

const TCrossLevyCityUserNumInfo& TCrossLevyCityUserNumInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyCityUserNumInfo* TCrossLevyCityUserNumInfo::default_instance_ = NULL;

TCrossLevyCityUserNumInfo* TCrossLevyCityUserNumInfo::New() const {
  return new TCrossLevyCityUserNumInfo;
}

void TCrossLevyCityUserNumInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyCityUserNumInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cityid_, usernum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyCityUserNumInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyCityUserNumInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UserNum;
        break;
      }

      // optional uint32 UserNum = 2;
      case 2: {
        if (tag == 16) {
         parse_UserNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usernum_)));
          set_has_usernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyCityUserNumInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyCityUserNumInfo)
  return false;
#undef DO_
}

void TCrossLevyCityUserNumInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyCityUserNumInfo)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // optional uint32 UserNum = 2;
  if (has_usernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usernum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyCityUserNumInfo)
}

::google::protobuf::uint8* TCrossLevyCityUserNumInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyCityUserNumInfo)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // optional uint32 UserNum = 2;
  if (has_usernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usernum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyCityUserNumInfo)
  return target;
}

int TCrossLevyCityUserNumInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 UserNum = 2;
    if (has_usernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usernum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyCityUserNumInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyCityUserNumInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyCityUserNumInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyCityUserNumInfo::MergeFrom(const TCrossLevyCityUserNumInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_usernum()) {
      set_usernum(from.usernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyCityUserNumInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyCityUserNumInfo::CopyFrom(const TCrossLevyCityUserNumInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyCityUserNumInfo::IsInitialized() const {

  return true;
}

void TCrossLevyCityUserNumInfo::Swap(TCrossLevyCityUserNumInfo* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(usernum_, other->usernum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyCityUserNumInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyCityUserNumInfo_descriptor_;
  metadata.reflection = TCrossLevyCityUserNumInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyCityUserNumNotify::kCityUserNumInfoArrFieldNumber;
#endif  // !_MSC_VER

TCrossLevyCityUserNumNotify::TCrossLevyCityUserNumNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyCityUserNumNotify)
}

void TCrossLevyCityUserNumNotify::InitAsDefaultInstance() {
}

TCrossLevyCityUserNumNotify::TCrossLevyCityUserNumNotify(const TCrossLevyCityUserNumNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyCityUserNumNotify)
}

void TCrossLevyCityUserNumNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyCityUserNumNotify::~TCrossLevyCityUserNumNotify() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyCityUserNumNotify)
  SharedDtor();
}

void TCrossLevyCityUserNumNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyCityUserNumNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyCityUserNumNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyCityUserNumNotify_descriptor_;
}

const TCrossLevyCityUserNumNotify& TCrossLevyCityUserNumNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyCityUserNumNotify* TCrossLevyCityUserNumNotify::default_instance_ = NULL;

TCrossLevyCityUserNumNotify* TCrossLevyCityUserNumNotify::New() const {
  return new TCrossLevyCityUserNumNotify;
}

void TCrossLevyCityUserNumNotify::Clear() {
  cityusernuminfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyCityUserNumNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyCityUserNumNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossLevyCityUserNumInfo CityUserNumInfoArr = 1;
      case 1: {
        if (tag == 10) {
         parse_CityUserNumInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cityusernuminfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_CityUserNumInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyCityUserNumNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyCityUserNumNotify)
  return false;
#undef DO_
}

void TCrossLevyCityUserNumNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyCityUserNumNotify)
  // repeated .pb.TCrossLevyCityUserNumInfo CityUserNumInfoArr = 1;
  for (int i = 0; i < this->cityusernuminfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cityusernuminfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyCityUserNumNotify)
}

::google::protobuf::uint8* TCrossLevyCityUserNumNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyCityUserNumNotify)
  // repeated .pb.TCrossLevyCityUserNumInfo CityUserNumInfoArr = 1;
  for (int i = 0; i < this->cityusernuminfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cityusernuminfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyCityUserNumNotify)
  return target;
}

int TCrossLevyCityUserNumNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossLevyCityUserNumInfo CityUserNumInfoArr = 1;
  total_size += 1 * this->cityusernuminfoarr_size();
  for (int i = 0; i < this->cityusernuminfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cityusernuminfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyCityUserNumNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyCityUserNumNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyCityUserNumNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyCityUserNumNotify::MergeFrom(const TCrossLevyCityUserNumNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  cityusernuminfoarr_.MergeFrom(from.cityusernuminfoarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyCityUserNumNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyCityUserNumNotify::CopyFrom(const TCrossLevyCityUserNumNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyCityUserNumNotify::IsInitialized() const {

  return true;
}

void TCrossLevyCityUserNumNotify::Swap(TCrossLevyCityUserNumNotify* other) {
  if (other != this) {
    cityusernuminfoarr_.Swap(&other->cityusernuminfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyCityUserNumNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyCityUserNumNotify_descriptor_;
  metadata.reflection = TCrossLevyCityUserNumNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyCityCampNumInfo::kCityIdFieldNumber;
const int TCrossLevyCityCampNumInfo::kCampNumFieldNumber;
#endif  // !_MSC_VER

TCrossLevyCityCampNumInfo::TCrossLevyCityCampNumInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyCityCampNumInfo)
}

void TCrossLevyCityCampNumInfo::InitAsDefaultInstance() {
}

TCrossLevyCityCampNumInfo::TCrossLevyCityCampNumInfo(const TCrossLevyCityCampNumInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyCityCampNumInfo)
}

void TCrossLevyCityCampNumInfo::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  campnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyCityCampNumInfo::~TCrossLevyCityCampNumInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyCityCampNumInfo)
  SharedDtor();
}

void TCrossLevyCityCampNumInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyCityCampNumInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyCityCampNumInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyCityCampNumInfo_descriptor_;
}

const TCrossLevyCityCampNumInfo& TCrossLevyCityCampNumInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyCityCampNumInfo* TCrossLevyCityCampNumInfo::default_instance_ = NULL;

TCrossLevyCityCampNumInfo* TCrossLevyCityCampNumInfo::New() const {
  return new TCrossLevyCityCampNumInfo;
}

void TCrossLevyCityCampNumInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyCityCampNumInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cityid_, campnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyCityCampNumInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyCityCampNumInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CampNum;
        break;
      }

      // optional uint32 CampNum = 2;
      case 2: {
        if (tag == 16) {
         parse_CampNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campnum_)));
          set_has_campnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyCityCampNumInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyCityCampNumInfo)
  return false;
#undef DO_
}

void TCrossLevyCityCampNumInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyCityCampNumInfo)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // optional uint32 CampNum = 2;
  if (has_campnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->campnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyCityCampNumInfo)
}

::google::protobuf::uint8* TCrossLevyCityCampNumInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyCityCampNumInfo)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // optional uint32 CampNum = 2;
  if (has_campnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->campnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyCityCampNumInfo)
  return target;
}

int TCrossLevyCityCampNumInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 CampNum = 2;
    if (has_campnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyCityCampNumInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyCityCampNumInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyCityCampNumInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyCityCampNumInfo::MergeFrom(const TCrossLevyCityCampNumInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_campnum()) {
      set_campnum(from.campnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyCityCampNumInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyCityCampNumInfo::CopyFrom(const TCrossLevyCityCampNumInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyCityCampNumInfo::IsInitialized() const {

  return true;
}

void TCrossLevyCityCampNumInfo::Swap(TCrossLevyCityCampNumInfo* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(campnum_, other->campnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyCityCampNumInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyCityCampNumInfo_descriptor_;
  metadata.reflection = TCrossLevyCityCampNumInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyCityCampNumNotify::kCityCampNumInfoArrFieldNumber;
#endif  // !_MSC_VER

TCrossLevyCityCampNumNotify::TCrossLevyCityCampNumNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyCityCampNumNotify)
}

void TCrossLevyCityCampNumNotify::InitAsDefaultInstance() {
}

TCrossLevyCityCampNumNotify::TCrossLevyCityCampNumNotify(const TCrossLevyCityCampNumNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyCityCampNumNotify)
}

void TCrossLevyCityCampNumNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyCityCampNumNotify::~TCrossLevyCityCampNumNotify() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyCityCampNumNotify)
  SharedDtor();
}

void TCrossLevyCityCampNumNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyCityCampNumNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyCityCampNumNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyCityCampNumNotify_descriptor_;
}

const TCrossLevyCityCampNumNotify& TCrossLevyCityCampNumNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyCityCampNumNotify* TCrossLevyCityCampNumNotify::default_instance_ = NULL;

TCrossLevyCityCampNumNotify* TCrossLevyCityCampNumNotify::New() const {
  return new TCrossLevyCityCampNumNotify;
}

void TCrossLevyCityCampNumNotify::Clear() {
  citycampnuminfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyCityCampNumNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyCityCampNumNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossLevyCityCampNumInfo CityCampNumInfoArr = 1;
      case 1: {
        if (tag == 10) {
         parse_CityCampNumInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_citycampnuminfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_CityCampNumInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyCityCampNumNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyCityCampNumNotify)
  return false;
#undef DO_
}

void TCrossLevyCityCampNumNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyCityCampNumNotify)
  // repeated .pb.TCrossLevyCityCampNumInfo CityCampNumInfoArr = 1;
  for (int i = 0; i < this->citycampnuminfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->citycampnuminfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyCityCampNumNotify)
}

::google::protobuf::uint8* TCrossLevyCityCampNumNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyCityCampNumNotify)
  // repeated .pb.TCrossLevyCityCampNumInfo CityCampNumInfoArr = 1;
  for (int i = 0; i < this->citycampnuminfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->citycampnuminfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyCityCampNumNotify)
  return target;
}

int TCrossLevyCityCampNumNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossLevyCityCampNumInfo CityCampNumInfoArr = 1;
  total_size += 1 * this->citycampnuminfoarr_size();
  for (int i = 0; i < this->citycampnuminfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->citycampnuminfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyCityCampNumNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyCityCampNumNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyCityCampNumNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyCityCampNumNotify::MergeFrom(const TCrossLevyCityCampNumNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  citycampnuminfoarr_.MergeFrom(from.citycampnuminfoarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyCityCampNumNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyCityCampNumNotify::CopyFrom(const TCrossLevyCityCampNumNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyCityCampNumNotify::IsInitialized() const {

  return true;
}

void TCrossLevyCityCampNumNotify::Swap(TCrossLevyCityCampNumNotify* other) {
  if (other != this) {
    citycampnuminfoarr_.Swap(&other->citycampnuminfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyCityCampNumNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyCityCampNumNotify_descriptor_;
  metadata.reflection = TCrossLevyCityCampNumNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyBossBeKilledNotify::kBossIdFieldNumber;
const int TCrossLevyBossBeKilledNotify::kRefreshTimeFieldNumber;
#endif  // !_MSC_VER

TCrossLevyBossBeKilledNotify::TCrossLevyBossBeKilledNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyBossBeKilledNotify)
}

void TCrossLevyBossBeKilledNotify::InitAsDefaultInstance() {
}

TCrossLevyBossBeKilledNotify::TCrossLevyBossBeKilledNotify(const TCrossLevyBossBeKilledNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyBossBeKilledNotify)
}

void TCrossLevyBossBeKilledNotify::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  refreshtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyBossBeKilledNotify::~TCrossLevyBossBeKilledNotify() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyBossBeKilledNotify)
  SharedDtor();
}

void TCrossLevyBossBeKilledNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyBossBeKilledNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyBossBeKilledNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyBossBeKilledNotify_descriptor_;
}

const TCrossLevyBossBeKilledNotify& TCrossLevyBossBeKilledNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyBossBeKilledNotify* TCrossLevyBossBeKilledNotify::default_instance_ = NULL;

TCrossLevyBossBeKilledNotify* TCrossLevyBossBeKilledNotify::New() const {
  return new TCrossLevyBossBeKilledNotify;
}

void TCrossLevyBossBeKilledNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyBossBeKilledNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(refreshtime_, bossid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyBossBeKilledNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyBossBeKilledNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RefreshTime;
        break;
      }

      // optional uint64 RefreshTime = 2;
      case 2: {
        if (tag == 16) {
         parse_RefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refreshtime_)));
          set_has_refreshtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyBossBeKilledNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyBossBeKilledNotify)
  return false;
#undef DO_
}

void TCrossLevyBossBeKilledNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyBossBeKilledNotify)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  // optional uint64 RefreshTime = 2;
  if (has_refreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->refreshtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyBossBeKilledNotify)
}

::google::protobuf::uint8* TCrossLevyBossBeKilledNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyBossBeKilledNotify)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  // optional uint64 RefreshTime = 2;
  if (has_refreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->refreshtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyBossBeKilledNotify)
  return target;
}

int TCrossLevyBossBeKilledNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional uint64 RefreshTime = 2;
    if (has_refreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refreshtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyBossBeKilledNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyBossBeKilledNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyBossBeKilledNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyBossBeKilledNotify::MergeFrom(const TCrossLevyBossBeKilledNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_refreshtime()) {
      set_refreshtime(from.refreshtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyBossBeKilledNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyBossBeKilledNotify::CopyFrom(const TCrossLevyBossBeKilledNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyBossBeKilledNotify::IsInitialized() const {

  return true;
}

void TCrossLevyBossBeKilledNotify::Swap(TCrossLevyBossBeKilledNotify* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(refreshtime_, other->refreshtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyBossBeKilledNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyBossBeKilledNotify_descriptor_;
  metadata.reflection = TCrossLevyBossBeKilledNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyRecordNotify::kRecordInfoFieldNumber;
#endif  // !_MSC_VER

TCrossLevyRecordNotify::TCrossLevyRecordNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyRecordNotify)
}

void TCrossLevyRecordNotify::InitAsDefaultInstance() {
  recordinfo_ = const_cast< ::pb::TCrossLevyRecordInfo*>(&::pb::TCrossLevyRecordInfo::default_instance());
}

TCrossLevyRecordNotify::TCrossLevyRecordNotify(const TCrossLevyRecordNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyRecordNotify)
}

void TCrossLevyRecordNotify::SharedCtor() {
  _cached_size_ = 0;
  recordinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyRecordNotify::~TCrossLevyRecordNotify() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyRecordNotify)
  SharedDtor();
}

void TCrossLevyRecordNotify::SharedDtor() {
  if (this != default_instance_) {
    delete recordinfo_;
  }
}

void TCrossLevyRecordNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyRecordNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyRecordNotify_descriptor_;
}

const TCrossLevyRecordNotify& TCrossLevyRecordNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevy_2eproto();
  return *default_instance_;
}

TCrossLevyRecordNotify* TCrossLevyRecordNotify::default_instance_ = NULL;

TCrossLevyRecordNotify* TCrossLevyRecordNotify::New() const {
  return new TCrossLevyRecordNotify;
}

void TCrossLevyRecordNotify::Clear() {
  if (has_recordinfo()) {
    if (recordinfo_ != NULL) recordinfo_->::pb::TCrossLevyRecordInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyRecordNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyRecordNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TCrossLevyRecordInfo RecordInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recordinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyRecordNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyRecordNotify)
  return false;
#undef DO_
}

void TCrossLevyRecordNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyRecordNotify)
  // optional .pb.TCrossLevyRecordInfo RecordInfo = 1;
  if (has_recordinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recordinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyRecordNotify)
}

::google::protobuf::uint8* TCrossLevyRecordNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyRecordNotify)
  // optional .pb.TCrossLevyRecordInfo RecordInfo = 1;
  if (has_recordinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recordinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyRecordNotify)
  return target;
}

int TCrossLevyRecordNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TCrossLevyRecordInfo RecordInfo = 1;
    if (has_recordinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recordinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyRecordNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyRecordNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyRecordNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyRecordNotify::MergeFrom(const TCrossLevyRecordNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recordinfo()) {
      mutable_recordinfo()->::pb::TCrossLevyRecordInfo::MergeFrom(from.recordinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyRecordNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyRecordNotify::CopyFrom(const TCrossLevyRecordNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyRecordNotify::IsInitialized() const {

  return true;
}

void TCrossLevyRecordNotify::Swap(TCrossLevyRecordNotify* other) {
  if (other != this) {
    std::swap(recordinfo_, other->recordinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyRecordNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyRecordNotify_descriptor_;
  metadata.reflection = TCrossLevyRecordNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
