// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Pubg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Pubg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TPubgUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgOwnerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgOwnerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgChickenEaterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgChickenEaterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgCampInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgCampInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgCityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgCityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgAreaInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgAreaInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgFieldInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgFieldInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgProcessInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgProcessInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgPosInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgPosInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgFmtInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgFmtInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgFmtDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgFmtDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgBattleSimple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgBattleSimple_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgBattleDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgBattleDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgBattleRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgBattleRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgLocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgEnterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgEnterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgGetCampListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgGetCampListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgGetCampListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgGetCampListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgSignRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgSignRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgGetMyFmtRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgGetMyFmtRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgSetMyFmtReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgSetMyFmtReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgAttackReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgAttackReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgAttackRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgAttackRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgGetEnemyInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgGetEnemyInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgGetEnemyInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgGetEnemyInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgBuyTokenReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgBuyTokenReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgBuyTokenRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgBuyTokenRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgGetBattleRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgGetBattleRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgGetBattleRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgGetBattleRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgGetServerTeamInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgGetServerTeamInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgBattleNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgBattleNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgOutOwner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgOutOwner_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgOutNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgOutNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPubgWinnerNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPubgWinnerNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EPubgStage_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPubgStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPubgFieldType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPubgSettleType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fPubg_2eproto() {
  protobuf_AddDesc_net_2fPubg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Pubg.proto");
  GOOGLE_CHECK(file != NULL);
  TPubgUserInfo_descriptor_ = file->message_type(0);
  static const int TPubgUserInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgUserInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgUserInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgUserInfo, serverteamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgUserInfo, signtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgUserInfo, fieldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgUserInfo, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgUserInfo, surviveround_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgUserInfo, isalive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgUserInfo, totalchickennum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgUserInfo, seasonwinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgUserInfo, tokennum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgUserInfo, tokenrecovertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgUserInfo, buytokennum_),
  };
  TPubgUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgUserInfo_descriptor_,
      TPubgUserInfo::default_instance_,
      TPubgUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgUserInfo));
  TPubgOwnerInfo_descriptor_ = file->message_type(1);
  static const int TPubgOwnerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgOwnerInfo, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgOwnerInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgOwnerInfo, hp_),
  };
  TPubgOwnerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgOwnerInfo_descriptor_,
      TPubgOwnerInfo::default_instance_,
      TPubgOwnerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgOwnerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgOwnerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgOwnerInfo));
  TPubgChickenEaterInfo_descriptor_ = file->message_type(2);
  static const int TPubgChickenEaterInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgChickenEaterInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgChickenEaterInfo, totalchickennum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgChickenEaterInfo, seasonwinnum_),
  };
  TPubgChickenEaterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgChickenEaterInfo_descriptor_,
      TPubgChickenEaterInfo::default_instance_,
      TPubgChickenEaterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgChickenEaterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgChickenEaterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgChickenEaterInfo));
  TPubgCampInfo_descriptor_ = file->message_type(3);
  static const int TPubgCampInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgCampInfo, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgCampInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgCampInfo, owner_),
  };
  TPubgCampInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgCampInfo_descriptor_,
      TPubgCampInfo::default_instance_,
      TPubgCampInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgCampInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgCampInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgCampInfo));
  TPubgCityInfo_descriptor_ = file->message_type(4);
  static const int TPubgCityInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgCityInfo, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgCityInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgCityInfo, occupynum_),
  };
  TPubgCityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgCityInfo_descriptor_,
      TPubgCityInfo::default_instance_,
      TPubgCityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgCityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgCityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgCityInfo));
  TPubgAreaInfo_descriptor_ = file->message_type(5);
  static const int TPubgAreaInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgAreaInfo, areaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgAreaInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgAreaInfo, arrcity_),
  };
  TPubgAreaInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgAreaInfo_descriptor_,
      TPubgAreaInfo::default_instance_,
      TPubgAreaInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgAreaInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgAreaInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgAreaInfo));
  TPubgFieldInfo_descriptor_ = file->message_type(6);
  static const int TPubgFieldInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgFieldInfo, fieldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgFieldInfo, fieldtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgFieldInfo, arrarea_),
  };
  TPubgFieldInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgFieldInfo_descriptor_,
      TPubgFieldInfo::default_instance_,
      TPubgFieldInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgFieldInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgFieldInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgFieldInfo));
  TPubgProcessInfo_descriptor_ = file->message_type(7);
  static const int TPubgProcessInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgProcessInfo, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgProcessInfo, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgProcessInfo, begtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgProcessInfo, endtime_),
  };
  TPubgProcessInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgProcessInfo_descriptor_,
      TPubgProcessInfo::default_instance_,
      TPubgProcessInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgProcessInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgProcessInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgProcessInfo));
  TPubgPosInfo_descriptor_ = file->message_type(8);
  static const int TPubgPosInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgPosInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgPosInfo, hid_),
  };
  TPubgPosInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgPosInfo_descriptor_,
      TPubgPosInfo::default_instance_,
      TPubgPosInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgPosInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgPosInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgPosInfo));
  TPubgFmtInfo_descriptor_ = file->message_type(9);
  static const int TPubgFmtInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgFmtInfo, fmtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgFmtInfo, arrpos_),
  };
  TPubgFmtInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgFmtInfo_descriptor_,
      TPubgFmtInfo::default_instance_,
      TPubgFmtInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgFmtInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgFmtInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgFmtInfo));
  TPubgFmtDetail_descriptor_ = file->message_type(10);
  static const int TPubgFmtDetail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgFmtDetail, fmtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgFmtDetail, unitarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgFmtDetail, fightforce_),
  };
  TPubgFmtDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgFmtDetail_descriptor_,
      TPubgFmtDetail::default_instance_,
      TPubgFmtDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgFmtDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgFmtDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgFmtDetail));
  TPubgBattleSimple_descriptor_ = file->message_type(11);
  static const int TPubgBattleSimple_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleSimple, fmtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleSimple, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleSimple, rid_),
  };
  TPubgBattleSimple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgBattleSimple_descriptor_,
      TPubgBattleSimple::default_instance_,
      TPubgBattleSimple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleSimple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleSimple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgBattleSimple));
  TPubgBattleDetail_descriptor_ = file->message_type(12);
  static const int TPubgBattleDetail_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleDetail, fmtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleDetail, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleDetail, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleDetail, battleresult_),
  };
  TPubgBattleDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgBattleDetail_descriptor_,
      TPubgBattleDetail::default_instance_,
      TPubgBattleDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgBattleDetail));
  TPubgBattleRecord_descriptor_ = file->message_type(13);
  static const int TPubgBattleRecord_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleRecord, atklocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleRecord, atkownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleRecord, atkserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleRecord, atkuname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleRecord, atkhtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleRecord, deflocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleRecord, defownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleRecord, defserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleRecord, defuname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleRecord, defhtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleRecord, recordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleRecord, arrbattlesimple_),
  };
  TPubgBattleRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgBattleRecord_descriptor_,
      TPubgBattleRecord::default_instance_,
      TPubgBattleRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgBattleRecord));
  TPubgLocation_descriptor_ = file->message_type(14);
  static const int TPubgLocation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgLocation, areaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgLocation, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgLocation, campid_),
  };
  TPubgLocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgLocation_descriptor_,
      TPubgLocation::default_instance_,
      TPubgLocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgLocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgLocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgLocation));
  TPubgGetInfoRsp_descriptor_ = file->message_type(15);
  static const int TPubgGetInfoRsp_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetInfoRsp, arrprocessinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetInfoRsp, serveropen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetInfoRsp, curround_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetInfoRsp, curstage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetInfoRsp, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetInfoRsp, fieldinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetInfoRsp, chickeneaterinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetInfoRsp, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetInfoRsp, winneroffseasonbegtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetInfoRsp, winnerfieldinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetInfoRsp, winnerarrprocessinfo_),
  };
  TPubgGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgGetInfoRsp_descriptor_,
      TPubgGetInfoRsp::default_instance_,
      TPubgGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgGetInfoRsp));
  TPubgEnterReq_descriptor_ = file->message_type(16);
  static const int TPubgEnterReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgEnterReq, fieldid_),
  };
  TPubgEnterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgEnterReq_descriptor_,
      TPubgEnterReq::default_instance_,
      TPubgEnterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgEnterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgEnterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgEnterReq));
  TPubgGetCampListReq_descriptor_ = file->message_type(17);
  static const int TPubgGetCampListReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetCampListReq, areaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetCampListReq, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetCampListReq, fieldid_),
  };
  TPubgGetCampListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgGetCampListReq_descriptor_,
      TPubgGetCampListReq::default_instance_,
      TPubgGetCampListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetCampListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetCampListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgGetCampListReq));
  TPubgGetCampListRsp_descriptor_ = file->message_type(18);
  static const int TPubgGetCampListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetCampListRsp, arrcamp_),
  };
  TPubgGetCampListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgGetCampListRsp_descriptor_,
      TPubgGetCampListRsp::default_instance_,
      TPubgGetCampListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetCampListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetCampListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgGetCampListRsp));
  TPubgSignRsp_descriptor_ = file->message_type(19);
  static const int TPubgSignRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgSignRsp, signtime_),
  };
  TPubgSignRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgSignRsp_descriptor_,
      TPubgSignRsp::default_instance_,
      TPubgSignRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgSignRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgSignRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgSignRsp));
  TPubgGetMyFmtRsp_descriptor_ = file->message_type(20);
  static const int TPubgGetMyFmtRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetMyFmtRsp, arrfmt_),
  };
  TPubgGetMyFmtRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgGetMyFmtRsp_descriptor_,
      TPubgGetMyFmtRsp::default_instance_,
      TPubgGetMyFmtRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetMyFmtRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetMyFmtRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgGetMyFmtRsp));
  TPubgSetMyFmtReq_descriptor_ = file->message_type(21);
  static const int TPubgSetMyFmtReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgSetMyFmtReq, arrfmt_),
  };
  TPubgSetMyFmtReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgSetMyFmtReq_descriptor_,
      TPubgSetMyFmtReq::default_instance_,
      TPubgSetMyFmtReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgSetMyFmtReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgSetMyFmtReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgSetMyFmtReq));
  TPubgAttackReq_descriptor_ = file->message_type(22);
  static const int TPubgAttackReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgAttackReq, mylocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgAttackReq, enemylocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgAttackReq, enemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgAttackReq, skipbattle_),
  };
  TPubgAttackReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgAttackReq_descriptor_,
      TPubgAttackReq::default_instance_,
      TPubgAttackReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgAttackReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgAttackReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgAttackReq));
  TPubgAttackRsp_descriptor_ = file->message_type(23);
  static const int TPubgAttackRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgAttackRsp, iswin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgAttackRsp, arrbattledetail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgAttackRsp, arrreward_),
  };
  TPubgAttackRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgAttackRsp_descriptor_,
      TPubgAttackRsp::default_instance_,
      TPubgAttackRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgAttackRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgAttackRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgAttackRsp));
  TPubgGetEnemyInfoReq_descriptor_ = file->message_type(24);
  static const int TPubgGetEnemyInfoReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetEnemyInfoReq, enemylocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetEnemyInfoReq, enemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetEnemyInfoReq, fieldid_),
  };
  TPubgGetEnemyInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgGetEnemyInfoReq_descriptor_,
      TPubgGetEnemyInfoReq::default_instance_,
      TPubgGetEnemyInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetEnemyInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetEnemyInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgGetEnemyInfoReq));
  TPubgGetEnemyInfoRsp_descriptor_ = file->message_type(25);
  static const int TPubgGetEnemyInfoRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetEnemyInfoRsp, arrfmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetEnemyInfoRsp, htid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetEnemyInfoRsp, fightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetEnemyInfoRsp, playerimageframetid_),
  };
  TPubgGetEnemyInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgGetEnemyInfoRsp_descriptor_,
      TPubgGetEnemyInfoRsp::default_instance_,
      TPubgGetEnemyInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetEnemyInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetEnemyInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgGetEnemyInfoRsp));
  TPubgBuyTokenReq_descriptor_ = file->message_type(26);
  static const int TPubgBuyTokenReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBuyTokenReq, buynum_),
  };
  TPubgBuyTokenReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgBuyTokenReq_descriptor_,
      TPubgBuyTokenReq::default_instance_,
      TPubgBuyTokenReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBuyTokenReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBuyTokenReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgBuyTokenReq));
  TPubgBuyTokenRsp_descriptor_ = file->message_type(27);
  static const int TPubgBuyTokenRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBuyTokenRsp, tokennum_),
  };
  TPubgBuyTokenRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgBuyTokenRsp_descriptor_,
      TPubgBuyTokenRsp::default_instance_,
      TPubgBuyTokenRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBuyTokenRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBuyTokenRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgBuyTokenRsp));
  TPubgGetBattleRecordReq_descriptor_ = file->message_type(28);
  static const int TPubgGetBattleRecordReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetBattleRecordReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetBattleRecordReq, limit_),
  };
  TPubgGetBattleRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgGetBattleRecordReq_descriptor_,
      TPubgGetBattleRecordReq::default_instance_,
      TPubgGetBattleRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetBattleRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetBattleRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgGetBattleRecordReq));
  TPubgGetBattleRecordRsp_descriptor_ = file->message_type(29);
  static const int TPubgGetBattleRecordRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetBattleRecordRsp, battlerecordarr_),
  };
  TPubgGetBattleRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgGetBattleRecordRsp_descriptor_,
      TPubgGetBattleRecordRsp::default_instance_,
      TPubgGetBattleRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetBattleRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetBattleRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgGetBattleRecordRsp));
  TPubgGetServerTeamInfoRsp_descriptor_ = file->message_type(30);
  static const int TPubgGetServerTeamInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetServerTeamInfoRsp, serverteamid_),
  };
  TPubgGetServerTeamInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgGetServerTeamInfoRsp_descriptor_,
      TPubgGetServerTeamInfoRsp::default_instance_,
      TPubgGetServerTeamInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetServerTeamInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgGetServerTeamInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgGetServerTeamInfoRsp));
  TPubgBattleNotify_descriptor_ = file->message_type(31);
  static const int TPubgBattleNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleNotify, battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleNotify, fieldid_),
  };
  TPubgBattleNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgBattleNotify_descriptor_,
      TPubgBattleNotify::default_instance_,
      TPubgBattleNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgBattleNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgBattleNotify));
  TPubgOutOwner_descriptor_ = file->message_type(32);
  static const int TPubgOutOwner_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgOutOwner, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgOutOwner, ownerid_),
  };
  TPubgOutOwner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgOutOwner_descriptor_,
      TPubgOutOwner::default_instance_,
      TPubgOutOwner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgOutOwner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgOutOwner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgOutOwner));
  TPubgOutNotify_descriptor_ = file->message_type(33);
  static const int TPubgOutNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgOutNotify, arrowner_),
  };
  TPubgOutNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgOutNotify_descriptor_,
      TPubgOutNotify::default_instance_,
      TPubgOutNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgOutNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgOutNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgOutNotify));
  TPubgWinnerNotify_descriptor_ = file->message_type(34);
  static const int TPubgWinnerNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgWinnerNotify, chickeneaterinfo_),
  };
  TPubgWinnerNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPubgWinnerNotify_descriptor_,
      TPubgWinnerNotify::default_instance_,
      TPubgWinnerNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgWinnerNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPubgWinnerNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPubgWinnerNotify));
  EPubgStage_descriptor_ = file->enum_type(0);
  EPubgStatus_descriptor_ = file->enum_type(1);
  EPubgFieldType_descriptor_ = file->enum_type(2);
  EPubgSettleType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fPubg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgUserInfo_descriptor_, &TPubgUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgOwnerInfo_descriptor_, &TPubgOwnerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgChickenEaterInfo_descriptor_, &TPubgChickenEaterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgCampInfo_descriptor_, &TPubgCampInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgCityInfo_descriptor_, &TPubgCityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgAreaInfo_descriptor_, &TPubgAreaInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgFieldInfo_descriptor_, &TPubgFieldInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgProcessInfo_descriptor_, &TPubgProcessInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgPosInfo_descriptor_, &TPubgPosInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgFmtInfo_descriptor_, &TPubgFmtInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgFmtDetail_descriptor_, &TPubgFmtDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgBattleSimple_descriptor_, &TPubgBattleSimple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgBattleDetail_descriptor_, &TPubgBattleDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgBattleRecord_descriptor_, &TPubgBattleRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgLocation_descriptor_, &TPubgLocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgGetInfoRsp_descriptor_, &TPubgGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgEnterReq_descriptor_, &TPubgEnterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgGetCampListReq_descriptor_, &TPubgGetCampListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgGetCampListRsp_descriptor_, &TPubgGetCampListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgSignRsp_descriptor_, &TPubgSignRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgGetMyFmtRsp_descriptor_, &TPubgGetMyFmtRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgSetMyFmtReq_descriptor_, &TPubgSetMyFmtReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgAttackReq_descriptor_, &TPubgAttackReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgAttackRsp_descriptor_, &TPubgAttackRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgGetEnemyInfoReq_descriptor_, &TPubgGetEnemyInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgGetEnemyInfoRsp_descriptor_, &TPubgGetEnemyInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgBuyTokenReq_descriptor_, &TPubgBuyTokenReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgBuyTokenRsp_descriptor_, &TPubgBuyTokenRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgGetBattleRecordReq_descriptor_, &TPubgGetBattleRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgGetBattleRecordRsp_descriptor_, &TPubgGetBattleRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgGetServerTeamInfoRsp_descriptor_, &TPubgGetServerTeamInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgBattleNotify_descriptor_, &TPubgBattleNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgOutOwner_descriptor_, &TPubgOutOwner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgOutNotify_descriptor_, &TPubgOutNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPubgWinnerNotify_descriptor_, &TPubgWinnerNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fPubg_2eproto() {
  delete TPubgUserInfo::default_instance_;
  delete TPubgUserInfo_reflection_;
  delete TPubgOwnerInfo::default_instance_;
  delete TPubgOwnerInfo_reflection_;
  delete TPubgChickenEaterInfo::default_instance_;
  delete TPubgChickenEaterInfo_reflection_;
  delete TPubgCampInfo::default_instance_;
  delete TPubgCampInfo_reflection_;
  delete TPubgCityInfo::default_instance_;
  delete TPubgCityInfo_reflection_;
  delete TPubgAreaInfo::default_instance_;
  delete TPubgAreaInfo_reflection_;
  delete TPubgFieldInfo::default_instance_;
  delete TPubgFieldInfo_reflection_;
  delete TPubgProcessInfo::default_instance_;
  delete TPubgProcessInfo_reflection_;
  delete TPubgPosInfo::default_instance_;
  delete TPubgPosInfo_reflection_;
  delete TPubgFmtInfo::default_instance_;
  delete TPubgFmtInfo_reflection_;
  delete TPubgFmtDetail::default_instance_;
  delete TPubgFmtDetail_reflection_;
  delete TPubgBattleSimple::default_instance_;
  delete TPubgBattleSimple_reflection_;
  delete TPubgBattleDetail::default_instance_;
  delete TPubgBattleDetail_reflection_;
  delete TPubgBattleRecord::default_instance_;
  delete TPubgBattleRecord_reflection_;
  delete TPubgLocation::default_instance_;
  delete TPubgLocation_reflection_;
  delete TPubgGetInfoRsp::default_instance_;
  delete TPubgGetInfoRsp_reflection_;
  delete TPubgEnterReq::default_instance_;
  delete TPubgEnterReq_reflection_;
  delete TPubgGetCampListReq::default_instance_;
  delete TPubgGetCampListReq_reflection_;
  delete TPubgGetCampListRsp::default_instance_;
  delete TPubgGetCampListRsp_reflection_;
  delete TPubgSignRsp::default_instance_;
  delete TPubgSignRsp_reflection_;
  delete TPubgGetMyFmtRsp::default_instance_;
  delete TPubgGetMyFmtRsp_reflection_;
  delete TPubgSetMyFmtReq::default_instance_;
  delete TPubgSetMyFmtReq_reflection_;
  delete TPubgAttackReq::default_instance_;
  delete TPubgAttackReq_reflection_;
  delete TPubgAttackRsp::default_instance_;
  delete TPubgAttackRsp_reflection_;
  delete TPubgGetEnemyInfoReq::default_instance_;
  delete TPubgGetEnemyInfoReq_reflection_;
  delete TPubgGetEnemyInfoRsp::default_instance_;
  delete TPubgGetEnemyInfoRsp_reflection_;
  delete TPubgBuyTokenReq::default_instance_;
  delete TPubgBuyTokenReq_reflection_;
  delete TPubgBuyTokenRsp::default_instance_;
  delete TPubgBuyTokenRsp_reflection_;
  delete TPubgGetBattleRecordReq::default_instance_;
  delete TPubgGetBattleRecordReq_reflection_;
  delete TPubgGetBattleRecordRsp::default_instance_;
  delete TPubgGetBattleRecordRsp_reflection_;
  delete TPubgGetServerTeamInfoRsp::default_instance_;
  delete TPubgGetServerTeamInfoRsp_reflection_;
  delete TPubgBattleNotify::default_instance_;
  delete TPubgBattleNotify_reflection_;
  delete TPubgOutOwner::default_instance_;
  delete TPubgOutOwner_reflection_;
  delete TPubgOutNotify::default_instance_;
  delete TPubgOutNotify_reflection_;
  delete TPubgWinnerNotify::default_instance_;
  delete TPubgWinnerNotify_reflection_;
}

void protobuf_AddDesc_net_2fPubg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016net/Pubg.proto\022\002pb\032\020net/Battle.proto\032\016"
    "net/User.proto\032\026net/CommonReward.proto\"\243"
    "\002\n\rTPubgUserInfo\022\013\n\003Uid\030\001 \001(\004\022\020\n\010ServerI"
    "d\030\002 \001(\t\022\024\n\014ServerTeamId\030\003 \001(\r\022\020\n\010SignTim"
    "e\030\004 \001(\004\022\017\n\007FieldId\030\005 \001(\t\022#\n\010Location\030\006 \001"
    "(\0132\021.pb.TPubgLocation\022\024\n\014SurviveRound\030\007 "
    "\001(\r\022\017\n\007IsAlive\030\010 \001(\010\022\027\n\017TotalChickenNum\030"
    "\t \001(\r\022\024\n\014SeasonWinNum\030\n \001(\r\022\020\n\010TokenNum\030"
    "\013 \001(\r\022\030\n\020TokenRecoverTime\030\014 \001(\004\022\023\n\013BuyTo"
    "kenNum\030\r \001(\r\"T\n\016TPubgOwnerInfo\022\017\n\007OwnerI"
    "d\030\001 \001(\004\022%\n\010UserInfo\030\002 \001(\0132\023.pb.TUserSimp"
    "leInfo\022\n\n\002Hp\030\003 \001(\004\"m\n\025TPubgChickenEaterI"
    "nfo\022%\n\010UserInfo\030\001 \001(\0132\023.pb.TUserSimpleIn"
    "fo\022\027\n\017TotalChickenNum\030\002 \001(\r\022\024\n\014SeasonWin"
    "Num\030\003 \001(\r\"c\n\rTPubgCampInfo\022\016\n\006CampId\030\001 \001"
    "(\r\022\037\n\006Status\030\002 \001(\0162\017.pb.EPubgStatus\022!\n\005O"
    "wner\030\003 \001(\0132\022.pb.TPubgOwnerInfo\"S\n\rTPubgC"
    "ityInfo\022\016\n\006CityId\030\001 \001(\r\022\037\n\006Status\030\002 \001(\0162"
    "\017.pb.EPubgStatus\022\021\n\tOccupyNum\030\003 \001(\r\"d\n\rT"
    "PubgAreaInfo\022\016\n\006AreaId\030\001 \001(\r\022\037\n\006Status\030\002"
    " \001(\0162\017.pb.EPubgStatus\022\"\n\007ArrCity\030\003 \003(\0132\021"
    ".pb.TPubgCityInfo\"l\n\016TPubgFieldInfo\022\017\n\007F"
    "ieldId\030\001 \001(\t\022%\n\tFieldType\030\002 \001(\0162\022.pb.EPu"
    "bgFieldType\022\"\n\007ArrArea\030\003 \003(\0132\021.pb.TPubgA"
    "reaInfo\"b\n\020TPubgProcessInfo\022\r\n\005Round\030\001 \001"
    "(\r\022\035\n\005Stage\030\002 \001(\0162\016.pb.EPubgStage\022\017\n\007Beg"
    "Time\030\003 \001(\004\022\017\n\007EndTime\030\004 \001(\004\"(\n\014TPubgPosI"
    "nfo\022\013\n\003Pos\030\001 \001(\r\022\013\n\003Hid\030\002 \001(\r\"\?\n\014TPubgFm"
    "tInfo\022\r\n\005FmtId\030\001 \001(\r\022 \n\006ArrPos\030\002 \003(\0132\020.p"
    "b.TPubgPosInfo\"S\n\016TPubgFmtDetail\022\r\n\005FmtI"
    "d\030\001 \001(\r\022\036\n\007UnitArr\030\002 \003(\0132\r.pb.TUnitInfo\022"
    "\022\n\nFightForce\030\003 \001(\004\"\?\n\021TPubgBattleSimple"
    "\022\r\n\005FmtId\030\001 \001(\r\022\016\n\006Result\030\002 \001(\010\022\013\n\003Rid\030\003"
    " \001(\004\"U\n\021TPubgBattleDetail\022\r\n\005FmtId\030\001 \001(\r"
    "\022\016\n\006Result\030\002 \001(\010\022\013\n\003Rid\030\003 \001(\004\022\024\n\014BattleR"
    "esult\030\004 \001(\014\"\277\002\n\021TPubgBattleRecord\022&\n\013Atk"
    "Location\030\001 \001(\0132\021.pb.TPubgLocation\022\022\n\nAtk"
    "OwnerId\030\002 \001(\004\022\023\n\013AtkServerId\030\003 \001(\t\022\020\n\010At"
    "kUname\030\004 \001(\t\022\017\n\007AtkHtid\030\005 \001(\r\022&\n\013DefLoca"
    "tion\030\006 \001(\0132\021.pb.TPubgLocation\022\022\n\nDefOwne"
    "rId\030\007 \001(\004\022\023\n\013DefServerId\030\010 \001(\t\022\020\n\010DefUna"
    "me\030\t \001(\t\022\017\n\007DefHtid\030\n \001(\r\022\022\n\nRecordTime\030"
    "\013 \001(\004\022.\n\017ArrBattleSimple\030\014 \003(\0132\025.pb.TPub"
    "gBattleSimple\"\?\n\rTPubgLocation\022\016\n\006AreaId"
    "\030\001 \001(\r\022\016\n\006CityId\030\002 \001(\r\022\016\n\006CampId\030\003 \001(\r\"\232"
    "\003\n\017TPubgGetInfoRsp\022,\n\016ArrProcessInfo\030\001 \003"
    "(\0132\024.pb.TPubgProcessInfo\022\022\n\nServerOpen\030\002"
    " \001(\010\022\020\n\010CurRound\030\003 \001(\r\022 \n\010CurStage\030\004 \001(\016"
    "2\016.pb.EPubgStage\022#\n\010UserInfo\030\005 \001(\0132\021.pb."
    "TPubgUserInfo\022%\n\tFieldInfo\030\006 \001(\0132\022.pb.TP"
    "ubgFieldInfo\0223\n\020ChickenEaterInfo\030\007 \001(\0132\031"
    ".pb.TPubgChickenEaterInfo\022\017\n\007SceneId\030\010 \001"
    "(\t\022\036\n\026WinnerOffseasonBegTime\030\t \001(\004\022+\n\017Wi"
    "nnerFieldInfo\030\n \001(\0132\022.pb.TPubgFieldInfo\022"
    "2\n\024WinnerArrProcessInfo\030\013 \003(\0132\024.pb.TPubg"
    "ProcessInfo\" \n\rTPubgEnterReq\022\017\n\007FieldId\030"
    "\001 \001(\t\"F\n\023TPubgGetCampListReq\022\016\n\006AreaId\030\001"
    " \001(\r\022\016\n\006CityId\030\002 \001(\r\022\017\n\007FieldId\030\003 \001(\t\"9\n"
    "\023TPubgGetCampListRsp\022\"\n\007ArrCamp\030\001 \003(\0132\021."
    "pb.TPubgCampInfo\" \n\014TPubgSignRsp\022\020\n\010Sign"
    "Time\030\001 \001(\004\"4\n\020TPubgGetMyFmtRsp\022 \n\006ArrFmt"
    "\030\001 \003(\0132\020.pb.TPubgFmtInfo\"4\n\020TPubgSetMyFm"
    "tReq\022 \n\006ArrFmt\030\001 \003(\0132\020.pb.TPubgFmtInfo\"\206"
    "\001\n\016TPubgAttackReq\022%\n\nMyLocation\030\001 \001(\0132\021."
    "pb.TPubgLocation\022(\n\rEnemyLocation\030\002 \001(\0132"
    "\021.pb.TPubgLocation\022\017\n\007EnemyId\030\003 \001(\004\022\022\n\nS"
    "kipBattle\030\004 \001(\010\"u\n\016TPubgAttackRsp\022\r\n\005IsW"
    "in\030\001 \001(\010\022.\n\017ArrBattleDetail\030\002 \003(\0132\025.pb.T"
    "PubgBattleDetail\022$\n\tArrReward\030\003 \003(\0132\021.pb"
    ".TCommonReward\"b\n\024TPubgGetEnemyInfoReq\022("
    "\n\rEnemyLocation\030\001 \001(\0132\021.pb.TPubgLocation"
    "\022\017\n\007EnemyId\030\002 \001(\004\022\017\n\007FieldId\030\003 \001(\t\"y\n\024TP"
    "ubgGetEnemyInfoRsp\022\"\n\006ArrFmt\030\001 \003(\0132\022.pb."
    "TPubgFmtDetail\022\014\n\004Htid\030\002 \001(\r\022\022\n\nFightFor"
    "ce\030\003 \001(\004\022\033\n\023PlayerImageFrameTid\030\004 \001(\r\"\"\n"
    "\020TPubgBuyTokenReq\022\016\n\006BuyNum\030\001 \001(\r\"$\n\020TPu"
    "bgBuyTokenRsp\022\020\n\010TokenNum\030\001 \001(\r\"8\n\027TPubg"
    "GetBattleRecordReq\022\016\n\006Offset\030\001 \001(\r\022\r\n\005Li"
    "mit\030\002 \001(\r\"I\n\027TPubgGetBattleRecordRsp\022.\n\017"
    "BattleRecordArr\030\001 \003(\0132\025.pb.TPubgBattleRe"
    "cord\"1\n\031TPubgGetServerTeamInfoRsp\022\024\n\014Ser"
    "verTeamId\030\001 \001(\r\"K\n\021TPubgBattleNotify\022%\n\006"
    "Battle\030\001 \001(\0132\025.pb.TPubgBattleRecord\022\017\n\007F"
    "ieldId\030\002 \001(\t\"E\n\rTPubgOutOwner\022#\n\010Locatio"
    "n\030\001 \001(\0132\021.pb.TPubgLocation\022\017\n\007OwnerId\030\002 "
    "\001(\004\"5\n\016TPubgOutNotify\022#\n\010ArrOwner\030\001 \003(\0132"
    "\021.pb.TPubgOutOwner\"H\n\021TPubgWinnerNotify\022"
    "3\n\020ChickenEaterInfo\030\001 \001(\0132\031.pb.TPubgChic"
    "kenEaterInfo*\316\002\n\nEPubgStage\022\027\n\023EPUBG_STA"
    "GE_INVALID\020\000\022\025\n\021EPUBG_STAGE_GROUP\020\001\022\024\n\020E"
    "PUBG_STAGE_SIGN\020\002\022\025\n\021EPUBG_STAGE_ALLOC\020\003"
    "\022)\n%EPUBG_STAGE_DAILY_WINNER_NORMAL_FIGH"
    "T\020\004\022)\n%EPUBG_STAGE_DAILY_WINNER_BUFFER_F"
    "IGHT\020\005\022#\n\037EPUBG_STAGE_DAILY_WINNER_SETTL"
    "E\020\006\022(\n$EPUBG_STAGE_DAILY_LOSER_NORMAL_FI"
    "GHT\020\007\022\"\n\036EPUBG_STAGE_DAILY_LOSER_SETTLE\020"
    "\010\022\032\n\026EPUBG_STAGE_OFF_SEASON\020d*q\n\013EPubgSt"
    "atus\022\027\n\023EPUBG_STATUS_NORMAL\020\000\022\027\n\023EPUBG_S"
    "TATUS_REWARD\020\001\022\027\n\023EPUBG_STATUS_DANGER\020\002\022"
    "\027\n\023EPUBG_STATUS_REMOVE\020\003*I\n\016EPubgFieldTy"
    "pe\022\033\n\027EPUBG_FIELD_TYPE_WINNER\020\000\022\032\n\026EPUBG"
    "_FIELD_TYPE_LOSER\020\001*i\n\017EPubgSettleType\022\035"
    "\n\031EPUBG_SETTLE_TYPE_SURVIVE\020\000\022\031\n\025EPUBG_S"
    "ETTLE_TYPE_OUT\020\001\022\034\n\030EPUBG_SETTLE_TYPE_HA"
    "NGUP\020\002", 4166);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Pubg.proto", &protobuf_RegisterTypes);
  TPubgUserInfo::default_instance_ = new TPubgUserInfo();
  TPubgOwnerInfo::default_instance_ = new TPubgOwnerInfo();
  TPubgChickenEaterInfo::default_instance_ = new TPubgChickenEaterInfo();
  TPubgCampInfo::default_instance_ = new TPubgCampInfo();
  TPubgCityInfo::default_instance_ = new TPubgCityInfo();
  TPubgAreaInfo::default_instance_ = new TPubgAreaInfo();
  TPubgFieldInfo::default_instance_ = new TPubgFieldInfo();
  TPubgProcessInfo::default_instance_ = new TPubgProcessInfo();
  TPubgPosInfo::default_instance_ = new TPubgPosInfo();
  TPubgFmtInfo::default_instance_ = new TPubgFmtInfo();
  TPubgFmtDetail::default_instance_ = new TPubgFmtDetail();
  TPubgBattleSimple::default_instance_ = new TPubgBattleSimple();
  TPubgBattleDetail::default_instance_ = new TPubgBattleDetail();
  TPubgBattleRecord::default_instance_ = new TPubgBattleRecord();
  TPubgLocation::default_instance_ = new TPubgLocation();
  TPubgGetInfoRsp::default_instance_ = new TPubgGetInfoRsp();
  TPubgEnterReq::default_instance_ = new TPubgEnterReq();
  TPubgGetCampListReq::default_instance_ = new TPubgGetCampListReq();
  TPubgGetCampListRsp::default_instance_ = new TPubgGetCampListRsp();
  TPubgSignRsp::default_instance_ = new TPubgSignRsp();
  TPubgGetMyFmtRsp::default_instance_ = new TPubgGetMyFmtRsp();
  TPubgSetMyFmtReq::default_instance_ = new TPubgSetMyFmtReq();
  TPubgAttackReq::default_instance_ = new TPubgAttackReq();
  TPubgAttackRsp::default_instance_ = new TPubgAttackRsp();
  TPubgGetEnemyInfoReq::default_instance_ = new TPubgGetEnemyInfoReq();
  TPubgGetEnemyInfoRsp::default_instance_ = new TPubgGetEnemyInfoRsp();
  TPubgBuyTokenReq::default_instance_ = new TPubgBuyTokenReq();
  TPubgBuyTokenRsp::default_instance_ = new TPubgBuyTokenRsp();
  TPubgGetBattleRecordReq::default_instance_ = new TPubgGetBattleRecordReq();
  TPubgGetBattleRecordRsp::default_instance_ = new TPubgGetBattleRecordRsp();
  TPubgGetServerTeamInfoRsp::default_instance_ = new TPubgGetServerTeamInfoRsp();
  TPubgBattleNotify::default_instance_ = new TPubgBattleNotify();
  TPubgOutOwner::default_instance_ = new TPubgOutOwner();
  TPubgOutNotify::default_instance_ = new TPubgOutNotify();
  TPubgWinnerNotify::default_instance_ = new TPubgWinnerNotify();
  TPubgUserInfo::default_instance_->InitAsDefaultInstance();
  TPubgOwnerInfo::default_instance_->InitAsDefaultInstance();
  TPubgChickenEaterInfo::default_instance_->InitAsDefaultInstance();
  TPubgCampInfo::default_instance_->InitAsDefaultInstance();
  TPubgCityInfo::default_instance_->InitAsDefaultInstance();
  TPubgAreaInfo::default_instance_->InitAsDefaultInstance();
  TPubgFieldInfo::default_instance_->InitAsDefaultInstance();
  TPubgProcessInfo::default_instance_->InitAsDefaultInstance();
  TPubgPosInfo::default_instance_->InitAsDefaultInstance();
  TPubgFmtInfo::default_instance_->InitAsDefaultInstance();
  TPubgFmtDetail::default_instance_->InitAsDefaultInstance();
  TPubgBattleSimple::default_instance_->InitAsDefaultInstance();
  TPubgBattleDetail::default_instance_->InitAsDefaultInstance();
  TPubgBattleRecord::default_instance_->InitAsDefaultInstance();
  TPubgLocation::default_instance_->InitAsDefaultInstance();
  TPubgGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TPubgEnterReq::default_instance_->InitAsDefaultInstance();
  TPubgGetCampListReq::default_instance_->InitAsDefaultInstance();
  TPubgGetCampListRsp::default_instance_->InitAsDefaultInstance();
  TPubgSignRsp::default_instance_->InitAsDefaultInstance();
  TPubgGetMyFmtRsp::default_instance_->InitAsDefaultInstance();
  TPubgSetMyFmtReq::default_instance_->InitAsDefaultInstance();
  TPubgAttackReq::default_instance_->InitAsDefaultInstance();
  TPubgAttackRsp::default_instance_->InitAsDefaultInstance();
  TPubgGetEnemyInfoReq::default_instance_->InitAsDefaultInstance();
  TPubgGetEnemyInfoRsp::default_instance_->InitAsDefaultInstance();
  TPubgBuyTokenReq::default_instance_->InitAsDefaultInstance();
  TPubgBuyTokenRsp::default_instance_->InitAsDefaultInstance();
  TPubgGetBattleRecordReq::default_instance_->InitAsDefaultInstance();
  TPubgGetBattleRecordRsp::default_instance_->InitAsDefaultInstance();
  TPubgGetServerTeamInfoRsp::default_instance_->InitAsDefaultInstance();
  TPubgBattleNotify::default_instance_->InitAsDefaultInstance();
  TPubgOutOwner::default_instance_->InitAsDefaultInstance();
  TPubgOutNotify::default_instance_->InitAsDefaultInstance();
  TPubgWinnerNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fPubg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fPubg_2eproto {
  StaticDescriptorInitializer_net_2fPubg_2eproto() {
    protobuf_AddDesc_net_2fPubg_2eproto();
  }
} static_descriptor_initializer_net_2fPubg_2eproto_;
const ::google::protobuf::EnumDescriptor* EPubgStage_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPubgStage_descriptor_;
}
bool EPubgStage_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPubgStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPubgStatus_descriptor_;
}
bool EPubgStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPubgFieldType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPubgFieldType_descriptor_;
}
bool EPubgFieldType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPubgSettleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPubgSettleType_descriptor_;
}
bool EPubgSettleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgUserInfo::kUidFieldNumber;
const int TPubgUserInfo::kServerIdFieldNumber;
const int TPubgUserInfo::kServerTeamIdFieldNumber;
const int TPubgUserInfo::kSignTimeFieldNumber;
const int TPubgUserInfo::kFieldIdFieldNumber;
const int TPubgUserInfo::kLocationFieldNumber;
const int TPubgUserInfo::kSurviveRoundFieldNumber;
const int TPubgUserInfo::kIsAliveFieldNumber;
const int TPubgUserInfo::kTotalChickenNumFieldNumber;
const int TPubgUserInfo::kSeasonWinNumFieldNumber;
const int TPubgUserInfo::kTokenNumFieldNumber;
const int TPubgUserInfo::kTokenRecoverTimeFieldNumber;
const int TPubgUserInfo::kBuyTokenNumFieldNumber;
#endif  // !_MSC_VER

TPubgUserInfo::TPubgUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgUserInfo)
}

void TPubgUserInfo::InitAsDefaultInstance() {
  location_ = const_cast< ::pb::TPubgLocation*>(&::pb::TPubgLocation::default_instance());
}

TPubgUserInfo::TPubgUserInfo(const TPubgUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgUserInfo)
}

void TPubgUserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverteamid_ = 0u;
  signtime_ = GOOGLE_ULONGLONG(0);
  fieldid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_ = NULL;
  surviveround_ = 0u;
  isalive_ = false;
  totalchickennum_ = 0u;
  seasonwinnum_ = 0u;
  tokennum_ = 0u;
  tokenrecovertime_ = GOOGLE_ULONGLONG(0);
  buytokennum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgUserInfo::~TPubgUserInfo() {
  // @@protoc_insertion_point(destructor:pb.TPubgUserInfo)
  SharedDtor();
}

void TPubgUserInfo::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (fieldid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fieldid_;
  }
  if (this != default_instance_) {
    delete location_;
  }
}

void TPubgUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgUserInfo_descriptor_;
}

const TPubgUserInfo& TPubgUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgUserInfo* TPubgUserInfo::default_instance_ = NULL;

TPubgUserInfo* TPubgUserInfo::New() const {
  return new TPubgUserInfo;
}

void TPubgUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPubgUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(serverteamid_, surviveround_);
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
    signtime_ = GOOGLE_ULONGLONG(0);
    if (has_fieldid()) {
      if (fieldid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fieldid_->clear();
      }
    }
    if (has_location()) {
      if (location_ != NULL) location_->::pb::TPubgLocation::Clear();
    }
    isalive_ = false;
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(totalchickennum_, buytokennum_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 2;
      case 2: {
        if (tag == 18) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ServerTeamId;
        break;
      }

      // optional uint32 ServerTeamId = 3;
      case 3: {
        if (tag == 24) {
         parse_ServerTeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverteamid_)));
          set_has_serverteamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SignTime;
        break;
      }

      // optional uint64 SignTime = 4;
      case 4: {
        if (tag == 32) {
         parse_SignTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signtime_)));
          set_has_signtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_FieldId;
        break;
      }

      // optional string FieldId = 5;
      case 5: {
        if (tag == 42) {
         parse_FieldId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fieldid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fieldid().data(), this->fieldid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fieldid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Location;
        break;
      }

      // optional .pb.TPubgLocation Location = 6;
      case 6: {
        if (tag == 50) {
         parse_Location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_SurviveRound;
        break;
      }

      // optional uint32 SurviveRound = 7;
      case 7: {
        if (tag == 56) {
         parse_SurviveRound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surviveround_)));
          set_has_surviveround();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_IsAlive;
        break;
      }

      // optional bool IsAlive = 8;
      case 8: {
        if (tag == 64) {
         parse_IsAlive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isalive_)));
          set_has_isalive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_TotalChickenNum;
        break;
      }

      // optional uint32 TotalChickenNum = 9;
      case 9: {
        if (tag == 72) {
         parse_TotalChickenNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalchickennum_)));
          set_has_totalchickennum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_SeasonWinNum;
        break;
      }

      // optional uint32 SeasonWinNum = 10;
      case 10: {
        if (tag == 80) {
         parse_SeasonWinNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seasonwinnum_)));
          set_has_seasonwinnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_TokenNum;
        break;
      }

      // optional uint32 TokenNum = 11;
      case 11: {
        if (tag == 88) {
         parse_TokenNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tokennum_)));
          set_has_tokennum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_TokenRecoverTime;
        break;
      }

      // optional uint64 TokenRecoverTime = 12;
      case 12: {
        if (tag == 96) {
         parse_TokenRecoverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tokenrecovertime_)));
          set_has_tokenrecovertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_BuyTokenNum;
        break;
      }

      // optional uint32 BuyTokenNum = 13;
      case 13: {
        if (tag == 104) {
         parse_BuyTokenNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buytokennum_)));
          set_has_buytokennum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgUserInfo)
  return false;
#undef DO_
}

void TPubgUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgUserInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverid(), output);
  }

  // optional uint32 ServerTeamId = 3;
  if (has_serverteamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverteamid(), output);
  }

  // optional uint64 SignTime = 4;
  if (has_signtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->signtime(), output);
  }

  // optional string FieldId = 5;
  if (has_fieldid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fieldid().data(), this->fieldid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fieldid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->fieldid(), output);
  }

  // optional .pb.TPubgLocation Location = 6;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->location(), output);
  }

  // optional uint32 SurviveRound = 7;
  if (has_surviveround()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->surviveround(), output);
  }

  // optional bool IsAlive = 8;
  if (has_isalive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isalive(), output);
  }

  // optional uint32 TotalChickenNum = 9;
  if (has_totalchickennum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->totalchickennum(), output);
  }

  // optional uint32 SeasonWinNum = 10;
  if (has_seasonwinnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->seasonwinnum(), output);
  }

  // optional uint32 TokenNum = 11;
  if (has_tokennum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->tokennum(), output);
  }

  // optional uint64 TokenRecoverTime = 12;
  if (has_tokenrecovertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->tokenrecovertime(), output);
  }

  // optional uint32 BuyTokenNum = 13;
  if (has_buytokennum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->buytokennum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgUserInfo)
}

::google::protobuf::uint8* TPubgUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgUserInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverid(), target);
  }

  // optional uint32 ServerTeamId = 3;
  if (has_serverteamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverteamid(), target);
  }

  // optional uint64 SignTime = 4;
  if (has_signtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->signtime(), target);
  }

  // optional string FieldId = 5;
  if (has_fieldid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fieldid().data(), this->fieldid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fieldid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->fieldid(), target);
  }

  // optional .pb.TPubgLocation Location = 6;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->location(), target);
  }

  // optional uint32 SurviveRound = 7;
  if (has_surviveround()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->surviveround(), target);
  }

  // optional bool IsAlive = 8;
  if (has_isalive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isalive(), target);
  }

  // optional uint32 TotalChickenNum = 9;
  if (has_totalchickennum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->totalchickennum(), target);
  }

  // optional uint32 SeasonWinNum = 10;
  if (has_seasonwinnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->seasonwinnum(), target);
  }

  // optional uint32 TokenNum = 11;
  if (has_tokennum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->tokennum(), target);
  }

  // optional uint64 TokenRecoverTime = 12;
  if (has_tokenrecovertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->tokenrecovertime(), target);
  }

  // optional uint32 BuyTokenNum = 13;
  if (has_buytokennum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->buytokennum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgUserInfo)
  return target;
}

int TPubgUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string ServerId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

    // optional uint32 ServerTeamId = 3;
    if (has_serverteamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverteamid());
    }

    // optional uint64 SignTime = 4;
    if (has_signtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signtime());
    }

    // optional string FieldId = 5;
    if (has_fieldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fieldid());
    }

    // optional .pb.TPubgLocation Location = 6;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

    // optional uint32 SurviveRound = 7;
    if (has_surviveround()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surviveround());
    }

    // optional bool IsAlive = 8;
    if (has_isalive()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 TotalChickenNum = 9;
    if (has_totalchickennum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalchickennum());
    }

    // optional uint32 SeasonWinNum = 10;
    if (has_seasonwinnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seasonwinnum());
    }

    // optional uint32 TokenNum = 11;
    if (has_tokennum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tokennum());
    }

    // optional uint64 TokenRecoverTime = 12;
    if (has_tokenrecovertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tokenrecovertime());
    }

    // optional uint32 BuyTokenNum = 13;
    if (has_buytokennum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buytokennum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgUserInfo::MergeFrom(const TPubgUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_serverteamid()) {
      set_serverteamid(from.serverteamid());
    }
    if (from.has_signtime()) {
      set_signtime(from.signtime());
    }
    if (from.has_fieldid()) {
      set_fieldid(from.fieldid());
    }
    if (from.has_location()) {
      mutable_location()->::pb::TPubgLocation::MergeFrom(from.location());
    }
    if (from.has_surviveround()) {
      set_surviveround(from.surviveround());
    }
    if (from.has_isalive()) {
      set_isalive(from.isalive());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_totalchickennum()) {
      set_totalchickennum(from.totalchickennum());
    }
    if (from.has_seasonwinnum()) {
      set_seasonwinnum(from.seasonwinnum());
    }
    if (from.has_tokennum()) {
      set_tokennum(from.tokennum());
    }
    if (from.has_tokenrecovertime()) {
      set_tokenrecovertime(from.tokenrecovertime());
    }
    if (from.has_buytokennum()) {
      set_buytokennum(from.buytokennum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgUserInfo::CopyFrom(const TPubgUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgUserInfo::IsInitialized() const {

  return true;
}

void TPubgUserInfo::Swap(TPubgUserInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(serverid_, other->serverid_);
    std::swap(serverteamid_, other->serverteamid_);
    std::swap(signtime_, other->signtime_);
    std::swap(fieldid_, other->fieldid_);
    std::swap(location_, other->location_);
    std::swap(surviveround_, other->surviveround_);
    std::swap(isalive_, other->isalive_);
    std::swap(totalchickennum_, other->totalchickennum_);
    std::swap(seasonwinnum_, other->seasonwinnum_);
    std::swap(tokennum_, other->tokennum_);
    std::swap(tokenrecovertime_, other->tokenrecovertime_);
    std::swap(buytokennum_, other->buytokennum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgUserInfo_descriptor_;
  metadata.reflection = TPubgUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgOwnerInfo::kOwnerIdFieldNumber;
const int TPubgOwnerInfo::kUserInfoFieldNumber;
const int TPubgOwnerInfo::kHpFieldNumber;
#endif  // !_MSC_VER

TPubgOwnerInfo::TPubgOwnerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgOwnerInfo)
}

void TPubgOwnerInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TPubgOwnerInfo::TPubgOwnerInfo(const TPubgOwnerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgOwnerInfo)
}

void TPubgOwnerInfo::SharedCtor() {
  _cached_size_ = 0;
  ownerid_ = GOOGLE_ULONGLONG(0);
  userinfo_ = NULL;
  hp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgOwnerInfo::~TPubgOwnerInfo() {
  // @@protoc_insertion_point(destructor:pb.TPubgOwnerInfo)
  SharedDtor();
}

void TPubgOwnerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TPubgOwnerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgOwnerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgOwnerInfo_descriptor_;
}

const TPubgOwnerInfo& TPubgOwnerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgOwnerInfo* TPubgOwnerInfo::default_instance_ = NULL;

TPubgOwnerInfo* TPubgOwnerInfo::New() const {
  return new TPubgOwnerInfo;
}

void TPubgOwnerInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    ownerid_ = GOOGLE_ULONGLONG(0);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
    hp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgOwnerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgOwnerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 OwnerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo UserInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Hp;
        break;
      }

      // optional uint64 Hp = 3;
      case 3: {
        if (tag == 24) {
         parse_Hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgOwnerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgOwnerInfo)
  return false;
#undef DO_
}

void TPubgOwnerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgOwnerInfo)
  // optional uint64 OwnerId = 1;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ownerid(), output);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 2;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userinfo(), output);
  }

  // optional uint64 Hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgOwnerInfo)
}

::google::protobuf::uint8* TPubgOwnerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgOwnerInfo)
  // optional uint64 OwnerId = 1;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ownerid(), target);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 2;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userinfo(), target);
  }

  // optional uint64 Hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgOwnerInfo)
  return target;
}

int TPubgOwnerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 OwnerId = 1;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ownerid());
    }

    // optional .pb.TUserSimpleInfo UserInfo = 2;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint64 Hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgOwnerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgOwnerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgOwnerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgOwnerInfo::MergeFrom(const TPubgOwnerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgOwnerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgOwnerInfo::CopyFrom(const TPubgOwnerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgOwnerInfo::IsInitialized() const {

  return true;
}

void TPubgOwnerInfo::Swap(TPubgOwnerInfo* other) {
  if (other != this) {
    std::swap(ownerid_, other->ownerid_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgOwnerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgOwnerInfo_descriptor_;
  metadata.reflection = TPubgOwnerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgChickenEaterInfo::kUserInfoFieldNumber;
const int TPubgChickenEaterInfo::kTotalChickenNumFieldNumber;
const int TPubgChickenEaterInfo::kSeasonWinNumFieldNumber;
#endif  // !_MSC_VER

TPubgChickenEaterInfo::TPubgChickenEaterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgChickenEaterInfo)
}

void TPubgChickenEaterInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TPubgChickenEaterInfo::TPubgChickenEaterInfo(const TPubgChickenEaterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgChickenEaterInfo)
}

void TPubgChickenEaterInfo::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  totalchickennum_ = 0u;
  seasonwinnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgChickenEaterInfo::~TPubgChickenEaterInfo() {
  // @@protoc_insertion_point(destructor:pb.TPubgChickenEaterInfo)
  SharedDtor();
}

void TPubgChickenEaterInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TPubgChickenEaterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgChickenEaterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgChickenEaterInfo_descriptor_;
}

const TPubgChickenEaterInfo& TPubgChickenEaterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgChickenEaterInfo* TPubgChickenEaterInfo::default_instance_ = NULL;

TPubgChickenEaterInfo* TPubgChickenEaterInfo::New() const {
  return new TPubgChickenEaterInfo;
}

void TPubgChickenEaterInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPubgChickenEaterInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(totalchickennum_, seasonwinnum_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgChickenEaterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgChickenEaterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TotalChickenNum;
        break;
      }

      // optional uint32 TotalChickenNum = 2;
      case 2: {
        if (tag == 16) {
         parse_TotalChickenNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalchickennum_)));
          set_has_totalchickennum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SeasonWinNum;
        break;
      }

      // optional uint32 SeasonWinNum = 3;
      case 3: {
        if (tag == 24) {
         parse_SeasonWinNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seasonwinnum_)));
          set_has_seasonwinnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgChickenEaterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgChickenEaterInfo)
  return false;
#undef DO_
}

void TPubgChickenEaterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgChickenEaterInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint32 TotalChickenNum = 2;
  if (has_totalchickennum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->totalchickennum(), output);
  }

  // optional uint32 SeasonWinNum = 3;
  if (has_seasonwinnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seasonwinnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgChickenEaterInfo)
}

::google::protobuf::uint8* TPubgChickenEaterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgChickenEaterInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint32 TotalChickenNum = 2;
  if (has_totalchickennum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->totalchickennum(), target);
  }

  // optional uint32 SeasonWinNum = 3;
  if (has_seasonwinnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seasonwinnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgChickenEaterInfo)
  return target;
}

int TPubgChickenEaterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 TotalChickenNum = 2;
    if (has_totalchickennum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalchickennum());
    }

    // optional uint32 SeasonWinNum = 3;
    if (has_seasonwinnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seasonwinnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgChickenEaterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgChickenEaterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgChickenEaterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgChickenEaterInfo::MergeFrom(const TPubgChickenEaterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_totalchickennum()) {
      set_totalchickennum(from.totalchickennum());
    }
    if (from.has_seasonwinnum()) {
      set_seasonwinnum(from.seasonwinnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgChickenEaterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgChickenEaterInfo::CopyFrom(const TPubgChickenEaterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgChickenEaterInfo::IsInitialized() const {

  return true;
}

void TPubgChickenEaterInfo::Swap(TPubgChickenEaterInfo* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(totalchickennum_, other->totalchickennum_);
    std::swap(seasonwinnum_, other->seasonwinnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgChickenEaterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgChickenEaterInfo_descriptor_;
  metadata.reflection = TPubgChickenEaterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgCampInfo::kCampIdFieldNumber;
const int TPubgCampInfo::kStatusFieldNumber;
const int TPubgCampInfo::kOwnerFieldNumber;
#endif  // !_MSC_VER

TPubgCampInfo::TPubgCampInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgCampInfo)
}

void TPubgCampInfo::InitAsDefaultInstance() {
  owner_ = const_cast< ::pb::TPubgOwnerInfo*>(&::pb::TPubgOwnerInfo::default_instance());
}

TPubgCampInfo::TPubgCampInfo(const TPubgCampInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgCampInfo)
}

void TPubgCampInfo::SharedCtor() {
  _cached_size_ = 0;
  campid_ = 0u;
  status_ = 0;
  owner_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgCampInfo::~TPubgCampInfo() {
  // @@protoc_insertion_point(destructor:pb.TPubgCampInfo)
  SharedDtor();
}

void TPubgCampInfo::SharedDtor() {
  if (this != default_instance_) {
    delete owner_;
  }
}

void TPubgCampInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgCampInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgCampInfo_descriptor_;
}

const TPubgCampInfo& TPubgCampInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgCampInfo* TPubgCampInfo::default_instance_ = NULL;

TPubgCampInfo* TPubgCampInfo::New() const {
  return new TPubgCampInfo;
}

void TPubgCampInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPubgCampInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(campid_, status_);
    if (has_owner()) {
      if (owner_ != NULL) owner_->::pb::TPubgOwnerInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgCampInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgCampInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CampId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }

      // optional .pb.EPubgStatus Status = 2;
      case 2: {
        if (tag == 16) {
         parse_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EPubgStatus_IsValid(value)) {
            set_status(static_cast< ::pb::EPubgStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Owner;
        break;
      }

      // optional .pb.TPubgOwnerInfo Owner = 3;
      case 3: {
        if (tag == 26) {
         parse_Owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgCampInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgCampInfo)
  return false;
#undef DO_
}

void TPubgCampInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgCampInfo)
  // optional uint32 CampId = 1;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->campid(), output);
  }

  // optional .pb.EPubgStatus Status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional .pb.TPubgOwnerInfo Owner = 3;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->owner(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgCampInfo)
}

::google::protobuf::uint8* TPubgCampInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgCampInfo)
  // optional uint32 CampId = 1;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->campid(), target);
  }

  // optional .pb.EPubgStatus Status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional .pb.TPubgOwnerInfo Owner = 3;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->owner(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgCampInfo)
  return target;
}

int TPubgCampInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CampId = 1;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // optional .pb.EPubgStatus Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .pb.TPubgOwnerInfo Owner = 3;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->owner());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgCampInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgCampInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgCampInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgCampInfo::MergeFrom(const TPubgCampInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_owner()) {
      mutable_owner()->::pb::TPubgOwnerInfo::MergeFrom(from.owner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgCampInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgCampInfo::CopyFrom(const TPubgCampInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgCampInfo::IsInitialized() const {

  return true;
}

void TPubgCampInfo::Swap(TPubgCampInfo* other) {
  if (other != this) {
    std::swap(campid_, other->campid_);
    std::swap(status_, other->status_);
    std::swap(owner_, other->owner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgCampInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgCampInfo_descriptor_;
  metadata.reflection = TPubgCampInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgCityInfo::kCityIdFieldNumber;
const int TPubgCityInfo::kStatusFieldNumber;
const int TPubgCityInfo::kOccupyNumFieldNumber;
#endif  // !_MSC_VER

TPubgCityInfo::TPubgCityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgCityInfo)
}

void TPubgCityInfo::InitAsDefaultInstance() {
}

TPubgCityInfo::TPubgCityInfo(const TPubgCityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgCityInfo)
}

void TPubgCityInfo::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  status_ = 0;
  occupynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgCityInfo::~TPubgCityInfo() {
  // @@protoc_insertion_point(destructor:pb.TPubgCityInfo)
  SharedDtor();
}

void TPubgCityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPubgCityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgCityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgCityInfo_descriptor_;
}

const TPubgCityInfo& TPubgCityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgCityInfo* TPubgCityInfo::default_instance_ = NULL;

TPubgCityInfo* TPubgCityInfo::New() const {
  return new TPubgCityInfo;
}

void TPubgCityInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPubgCityInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cityid_, occupynum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgCityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgCityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }

      // optional .pb.EPubgStatus Status = 2;
      case 2: {
        if (tag == 16) {
         parse_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EPubgStatus_IsValid(value)) {
            set_status(static_cast< ::pb::EPubgStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_OccupyNum;
        break;
      }

      // optional uint32 OccupyNum = 3;
      case 3: {
        if (tag == 24) {
         parse_OccupyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &occupynum_)));
          set_has_occupynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgCityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgCityInfo)
  return false;
#undef DO_
}

void TPubgCityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgCityInfo)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // optional .pb.EPubgStatus Status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional uint32 OccupyNum = 3;
  if (has_occupynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->occupynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgCityInfo)
}

::google::protobuf::uint8* TPubgCityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgCityInfo)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // optional .pb.EPubgStatus Status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional uint32 OccupyNum = 3;
  if (has_occupynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->occupynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgCityInfo)
  return target;
}

int TPubgCityInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional .pb.EPubgStatus Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 OccupyNum = 3;
    if (has_occupynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->occupynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgCityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgCityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgCityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgCityInfo::MergeFrom(const TPubgCityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_occupynum()) {
      set_occupynum(from.occupynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgCityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgCityInfo::CopyFrom(const TPubgCityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgCityInfo::IsInitialized() const {

  return true;
}

void TPubgCityInfo::Swap(TPubgCityInfo* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(status_, other->status_);
    std::swap(occupynum_, other->occupynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgCityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgCityInfo_descriptor_;
  metadata.reflection = TPubgCityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgAreaInfo::kAreaIdFieldNumber;
const int TPubgAreaInfo::kStatusFieldNumber;
const int TPubgAreaInfo::kArrCityFieldNumber;
#endif  // !_MSC_VER

TPubgAreaInfo::TPubgAreaInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgAreaInfo)
}

void TPubgAreaInfo::InitAsDefaultInstance() {
}

TPubgAreaInfo::TPubgAreaInfo(const TPubgAreaInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgAreaInfo)
}

void TPubgAreaInfo::SharedCtor() {
  _cached_size_ = 0;
  areaid_ = 0u;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgAreaInfo::~TPubgAreaInfo() {
  // @@protoc_insertion_point(destructor:pb.TPubgAreaInfo)
  SharedDtor();
}

void TPubgAreaInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPubgAreaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgAreaInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgAreaInfo_descriptor_;
}

const TPubgAreaInfo& TPubgAreaInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgAreaInfo* TPubgAreaInfo::default_instance_ = NULL;

TPubgAreaInfo* TPubgAreaInfo::New() const {
  return new TPubgAreaInfo;
}

void TPubgAreaInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPubgAreaInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(areaid_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrcity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgAreaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgAreaInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AreaId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }

      // optional .pb.EPubgStatus Status = 2;
      case 2: {
        if (tag == 16) {
         parse_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EPubgStatus_IsValid(value)) {
            set_status(static_cast< ::pb::EPubgStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrCity;
        break;
      }

      // repeated .pb.TPubgCityInfo ArrCity = 3;
      case 3: {
        if (tag == 26) {
         parse_ArrCity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrcity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrCity;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgAreaInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgAreaInfo)
  return false;
#undef DO_
}

void TPubgAreaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgAreaInfo)
  // optional uint32 AreaId = 1;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->areaid(), output);
  }

  // optional .pb.EPubgStatus Status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // repeated .pb.TPubgCityInfo ArrCity = 3;
  for (int i = 0; i < this->arrcity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arrcity(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgAreaInfo)
}

::google::protobuf::uint8* TPubgAreaInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgAreaInfo)
  // optional uint32 AreaId = 1;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->areaid(), target);
  }

  // optional .pb.EPubgStatus Status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // repeated .pb.TPubgCityInfo ArrCity = 3;
  for (int i = 0; i < this->arrcity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arrcity(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgAreaInfo)
  return target;
}

int TPubgAreaInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AreaId = 1;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areaid());
    }

    // optional .pb.EPubgStatus Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated .pb.TPubgCityInfo ArrCity = 3;
  total_size += 1 * this->arrcity_size();
  for (int i = 0; i < this->arrcity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrcity(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgAreaInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgAreaInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgAreaInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgAreaInfo::MergeFrom(const TPubgAreaInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrcity_.MergeFrom(from.arrcity_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgAreaInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgAreaInfo::CopyFrom(const TPubgAreaInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgAreaInfo::IsInitialized() const {

  return true;
}

void TPubgAreaInfo::Swap(TPubgAreaInfo* other) {
  if (other != this) {
    std::swap(areaid_, other->areaid_);
    std::swap(status_, other->status_);
    arrcity_.Swap(&other->arrcity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgAreaInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgAreaInfo_descriptor_;
  metadata.reflection = TPubgAreaInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgFieldInfo::kFieldIdFieldNumber;
const int TPubgFieldInfo::kFieldTypeFieldNumber;
const int TPubgFieldInfo::kArrAreaFieldNumber;
#endif  // !_MSC_VER

TPubgFieldInfo::TPubgFieldInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgFieldInfo)
}

void TPubgFieldInfo::InitAsDefaultInstance() {
}

TPubgFieldInfo::TPubgFieldInfo(const TPubgFieldInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgFieldInfo)
}

void TPubgFieldInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fieldid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fieldtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgFieldInfo::~TPubgFieldInfo() {
  // @@protoc_insertion_point(destructor:pb.TPubgFieldInfo)
  SharedDtor();
}

void TPubgFieldInfo::SharedDtor() {
  if (fieldid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fieldid_;
  }
  if (this != default_instance_) {
  }
}

void TPubgFieldInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgFieldInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgFieldInfo_descriptor_;
}

const TPubgFieldInfo& TPubgFieldInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgFieldInfo* TPubgFieldInfo::default_instance_ = NULL;

TPubgFieldInfo* TPubgFieldInfo::New() const {
  return new TPubgFieldInfo;
}

void TPubgFieldInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_fieldid()) {
      if (fieldid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fieldid_->clear();
      }
    }
    fieldtype_ = 0;
  }
  arrarea_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgFieldInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgFieldInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string FieldId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fieldid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fieldid().data(), this->fieldid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fieldid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_FieldType;
        break;
      }

      // optional .pb.EPubgFieldType FieldType = 2;
      case 2: {
        if (tag == 16) {
         parse_FieldType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EPubgFieldType_IsValid(value)) {
            set_fieldtype(static_cast< ::pb::EPubgFieldType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrArea;
        break;
      }

      // repeated .pb.TPubgAreaInfo ArrArea = 3;
      case 3: {
        if (tag == 26) {
         parse_ArrArea:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrarea()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrArea;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgFieldInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgFieldInfo)
  return false;
#undef DO_
}

void TPubgFieldInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgFieldInfo)
  // optional string FieldId = 1;
  if (has_fieldid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fieldid().data(), this->fieldid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fieldid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fieldid(), output);
  }

  // optional .pb.EPubgFieldType FieldType = 2;
  if (has_fieldtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->fieldtype(), output);
  }

  // repeated .pb.TPubgAreaInfo ArrArea = 3;
  for (int i = 0; i < this->arrarea_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arrarea(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgFieldInfo)
}

::google::protobuf::uint8* TPubgFieldInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgFieldInfo)
  // optional string FieldId = 1;
  if (has_fieldid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fieldid().data(), this->fieldid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fieldid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fieldid(), target);
  }

  // optional .pb.EPubgFieldType FieldType = 2;
  if (has_fieldtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->fieldtype(), target);
  }

  // repeated .pb.TPubgAreaInfo ArrArea = 3;
  for (int i = 0; i < this->arrarea_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arrarea(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgFieldInfo)
  return target;
}

int TPubgFieldInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string FieldId = 1;
    if (has_fieldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fieldid());
    }

    // optional .pb.EPubgFieldType FieldType = 2;
    if (has_fieldtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fieldtype());
    }

  }
  // repeated .pb.TPubgAreaInfo ArrArea = 3;
  total_size += 1 * this->arrarea_size();
  for (int i = 0; i < this->arrarea_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrarea(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgFieldInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgFieldInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgFieldInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgFieldInfo::MergeFrom(const TPubgFieldInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrarea_.MergeFrom(from.arrarea_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fieldid()) {
      set_fieldid(from.fieldid());
    }
    if (from.has_fieldtype()) {
      set_fieldtype(from.fieldtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgFieldInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgFieldInfo::CopyFrom(const TPubgFieldInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgFieldInfo::IsInitialized() const {

  return true;
}

void TPubgFieldInfo::Swap(TPubgFieldInfo* other) {
  if (other != this) {
    std::swap(fieldid_, other->fieldid_);
    std::swap(fieldtype_, other->fieldtype_);
    arrarea_.Swap(&other->arrarea_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgFieldInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgFieldInfo_descriptor_;
  metadata.reflection = TPubgFieldInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgProcessInfo::kRoundFieldNumber;
const int TPubgProcessInfo::kStageFieldNumber;
const int TPubgProcessInfo::kBegTimeFieldNumber;
const int TPubgProcessInfo::kEndTimeFieldNumber;
#endif  // !_MSC_VER

TPubgProcessInfo::TPubgProcessInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgProcessInfo)
}

void TPubgProcessInfo::InitAsDefaultInstance() {
}

TPubgProcessInfo::TPubgProcessInfo(const TPubgProcessInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgProcessInfo)
}

void TPubgProcessInfo::SharedCtor() {
  _cached_size_ = 0;
  round_ = 0u;
  stage_ = 0;
  begtime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgProcessInfo::~TPubgProcessInfo() {
  // @@protoc_insertion_point(destructor:pb.TPubgProcessInfo)
  SharedDtor();
}

void TPubgProcessInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPubgProcessInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgProcessInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgProcessInfo_descriptor_;
}

const TPubgProcessInfo& TPubgProcessInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgProcessInfo* TPubgProcessInfo::default_instance_ = NULL;

TPubgProcessInfo* TPubgProcessInfo::New() const {
  return new TPubgProcessInfo;
}

void TPubgProcessInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPubgProcessInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(round_, endtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgProcessInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgProcessInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Round = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Stage;
        break;
      }

      // optional .pb.EPubgStage Stage = 2;
      case 2: {
        if (tag == 16) {
         parse_Stage:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EPubgStage_IsValid(value)) {
            set_stage(static_cast< ::pb::EPubgStage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BegTime;
        break;
      }

      // optional uint64 BegTime = 3;
      case 3: {
        if (tag == 24) {
         parse_BegTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begtime_)));
          set_has_begtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_EndTime;
        break;
      }

      // optional uint64 EndTime = 4;
      case 4: {
        if (tag == 32) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgProcessInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgProcessInfo)
  return false;
#undef DO_
}

void TPubgProcessInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgProcessInfo)
  // optional uint32 Round = 1;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->round(), output);
  }

  // optional .pb.EPubgStage Stage = 2;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->stage(), output);
  }

  // optional uint64 BegTime = 3;
  if (has_begtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->begtime(), output);
  }

  // optional uint64 EndTime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgProcessInfo)
}

::google::protobuf::uint8* TPubgProcessInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgProcessInfo)
  // optional uint32 Round = 1;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->round(), target);
  }

  // optional .pb.EPubgStage Stage = 2;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->stage(), target);
  }

  // optional uint64 BegTime = 3;
  if (has_begtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->begtime(), target);
  }

  // optional uint64 EndTime = 4;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgProcessInfo)
  return target;
}

int TPubgProcessInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Round = 1;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->round());
    }

    // optional .pb.EPubgStage Stage = 2;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());
    }

    // optional uint64 BegTime = 3;
    if (has_begtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begtime());
    }

    // optional uint64 EndTime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgProcessInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgProcessInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgProcessInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgProcessInfo::MergeFrom(const TPubgProcessInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_begtime()) {
      set_begtime(from.begtime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgProcessInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgProcessInfo::CopyFrom(const TPubgProcessInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgProcessInfo::IsInitialized() const {

  return true;
}

void TPubgProcessInfo::Swap(TPubgProcessInfo* other) {
  if (other != this) {
    std::swap(round_, other->round_);
    std::swap(stage_, other->stage_);
    std::swap(begtime_, other->begtime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgProcessInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgProcessInfo_descriptor_;
  metadata.reflection = TPubgProcessInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgPosInfo::kPosFieldNumber;
const int TPubgPosInfo::kHidFieldNumber;
#endif  // !_MSC_VER

TPubgPosInfo::TPubgPosInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgPosInfo)
}

void TPubgPosInfo::InitAsDefaultInstance() {
}

TPubgPosInfo::TPubgPosInfo(const TPubgPosInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgPosInfo)
}

void TPubgPosInfo::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  hid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgPosInfo::~TPubgPosInfo() {
  // @@protoc_insertion_point(destructor:pb.TPubgPosInfo)
  SharedDtor();
}

void TPubgPosInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPubgPosInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgPosInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgPosInfo_descriptor_;
}

const TPubgPosInfo& TPubgPosInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgPosInfo* TPubgPosInfo::default_instance_ = NULL;

TPubgPosInfo* TPubgPosInfo::New() const {
  return new TPubgPosInfo;
}

void TPubgPosInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPubgPosInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pos_, hid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgPosInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgPosInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Pos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Hid;
        break;
      }

      // optional uint32 Hid = 2;
      case 2: {
        if (tag == 16) {
         parse_Hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgPosInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgPosInfo)
  return false;
#undef DO_
}

void TPubgPosInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgPosInfo)
  // optional uint32 Pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // optional uint32 Hid = 2;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgPosInfo)
}

::google::protobuf::uint8* TPubgPosInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgPosInfo)
  // optional uint32 Pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // optional uint32 Hid = 2;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgPosInfo)
  return target;
}

int TPubgPosInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 Hid = 2;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgPosInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgPosInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgPosInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgPosInfo::MergeFrom(const TPubgPosInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgPosInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgPosInfo::CopyFrom(const TPubgPosInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgPosInfo::IsInitialized() const {

  return true;
}

void TPubgPosInfo::Swap(TPubgPosInfo* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(hid_, other->hid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgPosInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgPosInfo_descriptor_;
  metadata.reflection = TPubgPosInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgFmtInfo::kFmtIdFieldNumber;
const int TPubgFmtInfo::kArrPosFieldNumber;
#endif  // !_MSC_VER

TPubgFmtInfo::TPubgFmtInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgFmtInfo)
}

void TPubgFmtInfo::InitAsDefaultInstance() {
}

TPubgFmtInfo::TPubgFmtInfo(const TPubgFmtInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgFmtInfo)
}

void TPubgFmtInfo::SharedCtor() {
  _cached_size_ = 0;
  fmtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgFmtInfo::~TPubgFmtInfo() {
  // @@protoc_insertion_point(destructor:pb.TPubgFmtInfo)
  SharedDtor();
}

void TPubgFmtInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPubgFmtInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgFmtInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgFmtInfo_descriptor_;
}

const TPubgFmtInfo& TPubgFmtInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgFmtInfo* TPubgFmtInfo::default_instance_ = NULL;

TPubgFmtInfo* TPubgFmtInfo::New() const {
  return new TPubgFmtInfo;
}

void TPubgFmtInfo::Clear() {
  fmtid_ = 0u;
  arrpos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgFmtInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgFmtInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FmtId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fmtid_)));
          set_has_fmtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrPos;
        break;
      }

      // repeated .pb.TPubgPosInfo ArrPos = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrPos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgFmtInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgFmtInfo)
  return false;
#undef DO_
}

void TPubgFmtInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgFmtInfo)
  // optional uint32 FmtId = 1;
  if (has_fmtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fmtid(), output);
  }

  // repeated .pb.TPubgPosInfo ArrPos = 2;
  for (int i = 0; i < this->arrpos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrpos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgFmtInfo)
}

::google::protobuf::uint8* TPubgFmtInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgFmtInfo)
  // optional uint32 FmtId = 1;
  if (has_fmtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fmtid(), target);
  }

  // repeated .pb.TPubgPosInfo ArrPos = 2;
  for (int i = 0; i < this->arrpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrpos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgFmtInfo)
  return target;
}

int TPubgFmtInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FmtId = 1;
    if (has_fmtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fmtid());
    }

  }
  // repeated .pb.TPubgPosInfo ArrPos = 2;
  total_size += 1 * this->arrpos_size();
  for (int i = 0; i < this->arrpos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrpos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgFmtInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgFmtInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgFmtInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgFmtInfo::MergeFrom(const TPubgFmtInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrpos_.MergeFrom(from.arrpos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fmtid()) {
      set_fmtid(from.fmtid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgFmtInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgFmtInfo::CopyFrom(const TPubgFmtInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgFmtInfo::IsInitialized() const {

  return true;
}

void TPubgFmtInfo::Swap(TPubgFmtInfo* other) {
  if (other != this) {
    std::swap(fmtid_, other->fmtid_);
    arrpos_.Swap(&other->arrpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgFmtInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgFmtInfo_descriptor_;
  metadata.reflection = TPubgFmtInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgFmtDetail::kFmtIdFieldNumber;
const int TPubgFmtDetail::kUnitArrFieldNumber;
const int TPubgFmtDetail::kFightForceFieldNumber;
#endif  // !_MSC_VER

TPubgFmtDetail::TPubgFmtDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgFmtDetail)
}

void TPubgFmtDetail::InitAsDefaultInstance() {
}

TPubgFmtDetail::TPubgFmtDetail(const TPubgFmtDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgFmtDetail)
}

void TPubgFmtDetail::SharedCtor() {
  _cached_size_ = 0;
  fmtid_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgFmtDetail::~TPubgFmtDetail() {
  // @@protoc_insertion_point(destructor:pb.TPubgFmtDetail)
  SharedDtor();
}

void TPubgFmtDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPubgFmtDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgFmtDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgFmtDetail_descriptor_;
}

const TPubgFmtDetail& TPubgFmtDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgFmtDetail* TPubgFmtDetail::default_instance_ = NULL;

TPubgFmtDetail* TPubgFmtDetail::New() const {
  return new TPubgFmtDetail;
}

void TPubgFmtDetail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPubgFmtDetail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fightforce_, fmtid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  unitarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgFmtDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgFmtDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FmtId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fmtid_)));
          set_has_fmtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UnitArr;
        break;
      }

      // repeated .pb.TUnitInfo UnitArr = 2;
      case 2: {
        if (tag == 18) {
         parse_UnitArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UnitArr;
        if (input->ExpectTag(24)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 3;
      case 3: {
        if (tag == 24) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgFmtDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgFmtDetail)
  return false;
#undef DO_
}

void TPubgFmtDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgFmtDetail)
  // optional uint32 FmtId = 1;
  if (has_fmtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fmtid(), output);
  }

  // repeated .pb.TUnitInfo UnitArr = 2;
  for (int i = 0; i < this->unitarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unitarr(i), output);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgFmtDetail)
}

::google::protobuf::uint8* TPubgFmtDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgFmtDetail)
  // optional uint32 FmtId = 1;
  if (has_fmtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fmtid(), target);
  }

  // repeated .pb.TUnitInfo UnitArr = 2;
  for (int i = 0; i < this->unitarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unitarr(i), target);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgFmtDetail)
  return target;
}

int TPubgFmtDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FmtId = 1;
    if (has_fmtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fmtid());
    }

    // optional uint64 FightForce = 3;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

  }
  // repeated .pb.TUnitInfo UnitArr = 2;
  total_size += 1 * this->unitarr_size();
  for (int i = 0; i < this->unitarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgFmtDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgFmtDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgFmtDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgFmtDetail::MergeFrom(const TPubgFmtDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitarr_.MergeFrom(from.unitarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fmtid()) {
      set_fmtid(from.fmtid());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgFmtDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgFmtDetail::CopyFrom(const TPubgFmtDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgFmtDetail::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->unitarr())) return false;
  return true;
}

void TPubgFmtDetail::Swap(TPubgFmtDetail* other) {
  if (other != this) {
    std::swap(fmtid_, other->fmtid_);
    unitarr_.Swap(&other->unitarr_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgFmtDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgFmtDetail_descriptor_;
  metadata.reflection = TPubgFmtDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgBattleSimple::kFmtIdFieldNumber;
const int TPubgBattleSimple::kResultFieldNumber;
const int TPubgBattleSimple::kRidFieldNumber;
#endif  // !_MSC_VER

TPubgBattleSimple::TPubgBattleSimple()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgBattleSimple)
}

void TPubgBattleSimple::InitAsDefaultInstance() {
}

TPubgBattleSimple::TPubgBattleSimple(const TPubgBattleSimple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgBattleSimple)
}

void TPubgBattleSimple::SharedCtor() {
  _cached_size_ = 0;
  fmtid_ = 0u;
  result_ = false;
  rid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgBattleSimple::~TPubgBattleSimple() {
  // @@protoc_insertion_point(destructor:pb.TPubgBattleSimple)
  SharedDtor();
}

void TPubgBattleSimple::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPubgBattleSimple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgBattleSimple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgBattleSimple_descriptor_;
}

const TPubgBattleSimple& TPubgBattleSimple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgBattleSimple* TPubgBattleSimple::default_instance_ = NULL;

TPubgBattleSimple* TPubgBattleSimple::New() const {
  return new TPubgBattleSimple;
}

void TPubgBattleSimple::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPubgBattleSimple*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fmtid_, rid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgBattleSimple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgBattleSimple)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FmtId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fmtid_)));
          set_has_fmtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }

      // optional bool Result = 2;
      case 2: {
        if (tag == 16) {
         parse_Result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Rid;
        break;
      }

      // optional uint64 Rid = 3;
      case 3: {
        if (tag == 24) {
         parse_Rid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgBattleSimple)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgBattleSimple)
  return false;
#undef DO_
}

void TPubgBattleSimple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgBattleSimple)
  // optional uint32 FmtId = 1;
  if (has_fmtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fmtid(), output);
  }

  // optional bool Result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }

  // optional uint64 Rid = 3;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->rid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgBattleSimple)
}

::google::protobuf::uint8* TPubgBattleSimple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgBattleSimple)
  // optional uint32 FmtId = 1;
  if (has_fmtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fmtid(), target);
  }

  // optional bool Result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }

  // optional uint64 Rid = 3;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->rid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgBattleSimple)
  return target;
}

int TPubgBattleSimple::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FmtId = 1;
    if (has_fmtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fmtid());
    }

    // optional bool Result = 2;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional uint64 Rid = 3;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgBattleSimple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgBattleSimple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgBattleSimple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgBattleSimple::MergeFrom(const TPubgBattleSimple& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fmtid()) {
      set_fmtid(from.fmtid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rid()) {
      set_rid(from.rid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgBattleSimple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgBattleSimple::CopyFrom(const TPubgBattleSimple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgBattleSimple::IsInitialized() const {

  return true;
}

void TPubgBattleSimple::Swap(TPubgBattleSimple* other) {
  if (other != this) {
    std::swap(fmtid_, other->fmtid_);
    std::swap(result_, other->result_);
    std::swap(rid_, other->rid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgBattleSimple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgBattleSimple_descriptor_;
  metadata.reflection = TPubgBattleSimple_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgBattleDetail::kFmtIdFieldNumber;
const int TPubgBattleDetail::kResultFieldNumber;
const int TPubgBattleDetail::kRidFieldNumber;
const int TPubgBattleDetail::kBattleResultFieldNumber;
#endif  // !_MSC_VER

TPubgBattleDetail::TPubgBattleDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgBattleDetail)
}

void TPubgBattleDetail::InitAsDefaultInstance() {
}

TPubgBattleDetail::TPubgBattleDetail(const TPubgBattleDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgBattleDetail)
}

void TPubgBattleDetail::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fmtid_ = 0u;
  result_ = false;
  rid_ = GOOGLE_ULONGLONG(0);
  battleresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgBattleDetail::~TPubgBattleDetail() {
  // @@protoc_insertion_point(destructor:pb.TPubgBattleDetail)
  SharedDtor();
}

void TPubgBattleDetail::SharedDtor() {
  if (battleresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleresult_;
  }
  if (this != default_instance_) {
  }
}

void TPubgBattleDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgBattleDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgBattleDetail_descriptor_;
}

const TPubgBattleDetail& TPubgBattleDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgBattleDetail* TPubgBattleDetail::default_instance_ = NULL;

TPubgBattleDetail* TPubgBattleDetail::New() const {
  return new TPubgBattleDetail;
}

void TPubgBattleDetail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPubgBattleDetail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(fmtid_, rid_);
    if (has_battleresult()) {
      if (battleresult_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battleresult_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgBattleDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgBattleDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FmtId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fmtid_)));
          set_has_fmtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Result;
        break;
      }

      // optional bool Result = 2;
      case 2: {
        if (tag == 16) {
         parse_Result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Rid;
        break;
      }

      // optional uint64 Rid = 3;
      case 3: {
        if (tag == 24) {
         parse_Rid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BattleResult;
        break;
      }

      // optional bytes BattleResult = 4;
      case 4: {
        if (tag == 34) {
         parse_BattleResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battleresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgBattleDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgBattleDetail)
  return false;
#undef DO_
}

void TPubgBattleDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgBattleDetail)
  // optional uint32 FmtId = 1;
  if (has_fmtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fmtid(), output);
  }

  // optional bool Result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }

  // optional uint64 Rid = 3;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->rid(), output);
  }

  // optional bytes BattleResult = 4;
  if (has_battleresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->battleresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgBattleDetail)
}

::google::protobuf::uint8* TPubgBattleDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgBattleDetail)
  // optional uint32 FmtId = 1;
  if (has_fmtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fmtid(), target);
  }

  // optional bool Result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }

  // optional uint64 Rid = 3;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->rid(), target);
  }

  // optional bytes BattleResult = 4;
  if (has_battleresult()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->battleresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgBattleDetail)
  return target;
}

int TPubgBattleDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FmtId = 1;
    if (has_fmtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fmtid());
    }

    // optional bool Result = 2;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional uint64 Rid = 3;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rid());
    }

    // optional bytes BattleResult = 4;
    if (has_battleresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battleresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgBattleDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgBattleDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgBattleDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgBattleDetail::MergeFrom(const TPubgBattleDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fmtid()) {
      set_fmtid(from.fmtid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_battleresult()) {
      set_battleresult(from.battleresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgBattleDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgBattleDetail::CopyFrom(const TPubgBattleDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgBattleDetail::IsInitialized() const {

  return true;
}

void TPubgBattleDetail::Swap(TPubgBattleDetail* other) {
  if (other != this) {
    std::swap(fmtid_, other->fmtid_);
    std::swap(result_, other->result_);
    std::swap(rid_, other->rid_);
    std::swap(battleresult_, other->battleresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgBattleDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgBattleDetail_descriptor_;
  metadata.reflection = TPubgBattleDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgBattleRecord::kAtkLocationFieldNumber;
const int TPubgBattleRecord::kAtkOwnerIdFieldNumber;
const int TPubgBattleRecord::kAtkServerIdFieldNumber;
const int TPubgBattleRecord::kAtkUnameFieldNumber;
const int TPubgBattleRecord::kAtkHtidFieldNumber;
const int TPubgBattleRecord::kDefLocationFieldNumber;
const int TPubgBattleRecord::kDefOwnerIdFieldNumber;
const int TPubgBattleRecord::kDefServerIdFieldNumber;
const int TPubgBattleRecord::kDefUnameFieldNumber;
const int TPubgBattleRecord::kDefHtidFieldNumber;
const int TPubgBattleRecord::kRecordTimeFieldNumber;
const int TPubgBattleRecord::kArrBattleSimpleFieldNumber;
#endif  // !_MSC_VER

TPubgBattleRecord::TPubgBattleRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgBattleRecord)
}

void TPubgBattleRecord::InitAsDefaultInstance() {
  atklocation_ = const_cast< ::pb::TPubgLocation*>(&::pb::TPubgLocation::default_instance());
  deflocation_ = const_cast< ::pb::TPubgLocation*>(&::pb::TPubgLocation::default_instance());
}

TPubgBattleRecord::TPubgBattleRecord(const TPubgBattleRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgBattleRecord)
}

void TPubgBattleRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  atklocation_ = NULL;
  atkownerid_ = GOOGLE_ULONGLONG(0);
  atkserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  atkuname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  atkhtid_ = 0u;
  deflocation_ = NULL;
  defownerid_ = GOOGLE_ULONGLONG(0);
  defserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defuname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defhtid_ = 0u;
  recordtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgBattleRecord::~TPubgBattleRecord() {
  // @@protoc_insertion_point(destructor:pb.TPubgBattleRecord)
  SharedDtor();
}

void TPubgBattleRecord::SharedDtor() {
  if (atkserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete atkserverid_;
  }
  if (atkuname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete atkuname_;
  }
  if (defserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete defserverid_;
  }
  if (defuname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete defuname_;
  }
  if (this != default_instance_) {
    delete atklocation_;
    delete deflocation_;
  }
}

void TPubgBattleRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgBattleRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgBattleRecord_descriptor_;
}

const TPubgBattleRecord& TPubgBattleRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgBattleRecord* TPubgBattleRecord::default_instance_ = NULL;

TPubgBattleRecord* TPubgBattleRecord::New() const {
  return new TPubgBattleRecord;
}

void TPubgBattleRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPubgBattleRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(defownerid_, atkhtid_);
    if (has_atklocation()) {
      if (atklocation_ != NULL) atklocation_->::pb::TPubgLocation::Clear();
    }
    atkownerid_ = GOOGLE_ULONGLONG(0);
    if (has_atkserverid()) {
      if (atkserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        atkserverid_->clear();
      }
    }
    if (has_atkuname()) {
      if (atkuname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        atkuname_->clear();
      }
    }
    if (has_deflocation()) {
      if (deflocation_ != NULL) deflocation_->::pb::TPubgLocation::Clear();
    }
    if (has_defserverid()) {
      if (defserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        defserverid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    if (has_defuname()) {
      if (defuname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        defuname_->clear();
      }
    }
    defhtid_ = 0u;
    recordtime_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrbattlesimple_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgBattleRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgBattleRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TPubgLocation AtkLocation = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atklocation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AtkOwnerId;
        break;
      }

      // optional uint64 AtkOwnerId = 2;
      case 2: {
        if (tag == 16) {
         parse_AtkOwnerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &atkownerid_)));
          set_has_atkownerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AtkServerId;
        break;
      }

      // optional string AtkServerId = 3;
      case 3: {
        if (tag == 26) {
         parse_AtkServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_atkserverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->atkserverid().data(), this->atkserverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "atkserverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AtkUname;
        break;
      }

      // optional string AtkUname = 4;
      case 4: {
        if (tag == 34) {
         parse_AtkUname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_atkuname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->atkuname().data(), this->atkuname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "atkuname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_AtkHtid;
        break;
      }

      // optional uint32 AtkHtid = 5;
      case 5: {
        if (tag == 40) {
         parse_AtkHtid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atkhtid_)));
          set_has_atkhtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_DefLocation;
        break;
      }

      // optional .pb.TPubgLocation DefLocation = 6;
      case 6: {
        if (tag == 50) {
         parse_DefLocation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deflocation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_DefOwnerId;
        break;
      }

      // optional uint64 DefOwnerId = 7;
      case 7: {
        if (tag == 56) {
         parse_DefOwnerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &defownerid_)));
          set_has_defownerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_DefServerId;
        break;
      }

      // optional string DefServerId = 8;
      case 8: {
        if (tag == 66) {
         parse_DefServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defserverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->defserverid().data(), this->defserverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "defserverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_DefUname;
        break;
      }

      // optional string DefUname = 9;
      case 9: {
        if (tag == 74) {
         parse_DefUname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defuname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->defuname().data(), this->defuname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "defuname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_DefHtid;
        break;
      }

      // optional uint32 DefHtid = 10;
      case 10: {
        if (tag == 80) {
         parse_DefHtid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defhtid_)));
          set_has_defhtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_RecordTime;
        break;
      }

      // optional uint64 RecordTime = 11;
      case 11: {
        if (tag == 88) {
         parse_RecordTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_ArrBattleSimple;
        break;
      }

      // repeated .pb.TPubgBattleSimple ArrBattleSimple = 12;
      case 12: {
        if (tag == 98) {
         parse_ArrBattleSimple:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrbattlesimple()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_ArrBattleSimple;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgBattleRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgBattleRecord)
  return false;
#undef DO_
}

void TPubgBattleRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgBattleRecord)
  // optional .pb.TPubgLocation AtkLocation = 1;
  if (has_atklocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->atklocation(), output);
  }

  // optional uint64 AtkOwnerId = 2;
  if (has_atkownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->atkownerid(), output);
  }

  // optional string AtkServerId = 3;
  if (has_atkserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->atkserverid().data(), this->atkserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "atkserverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->atkserverid(), output);
  }

  // optional string AtkUname = 4;
  if (has_atkuname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->atkuname().data(), this->atkuname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "atkuname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->atkuname(), output);
  }

  // optional uint32 AtkHtid = 5;
  if (has_atkhtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->atkhtid(), output);
  }

  // optional .pb.TPubgLocation DefLocation = 6;
  if (has_deflocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->deflocation(), output);
  }

  // optional uint64 DefOwnerId = 7;
  if (has_defownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->defownerid(), output);
  }

  // optional string DefServerId = 8;
  if (has_defserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defserverid().data(), this->defserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "defserverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->defserverid(), output);
  }

  // optional string DefUname = 9;
  if (has_defuname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defuname().data(), this->defuname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "defuname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->defuname(), output);
  }

  // optional uint32 DefHtid = 10;
  if (has_defhtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->defhtid(), output);
  }

  // optional uint64 RecordTime = 11;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->recordtime(), output);
  }

  // repeated .pb.TPubgBattleSimple ArrBattleSimple = 12;
  for (int i = 0; i < this->arrbattlesimple_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->arrbattlesimple(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgBattleRecord)
}

::google::protobuf::uint8* TPubgBattleRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgBattleRecord)
  // optional .pb.TPubgLocation AtkLocation = 1;
  if (has_atklocation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->atklocation(), target);
  }

  // optional uint64 AtkOwnerId = 2;
  if (has_atkownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->atkownerid(), target);
  }

  // optional string AtkServerId = 3;
  if (has_atkserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->atkserverid().data(), this->atkserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "atkserverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->atkserverid(), target);
  }

  // optional string AtkUname = 4;
  if (has_atkuname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->atkuname().data(), this->atkuname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "atkuname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->atkuname(), target);
  }

  // optional uint32 AtkHtid = 5;
  if (has_atkhtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->atkhtid(), target);
  }

  // optional .pb.TPubgLocation DefLocation = 6;
  if (has_deflocation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->deflocation(), target);
  }

  // optional uint64 DefOwnerId = 7;
  if (has_defownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->defownerid(), target);
  }

  // optional string DefServerId = 8;
  if (has_defserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defserverid().data(), this->defserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "defserverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->defserverid(), target);
  }

  // optional string DefUname = 9;
  if (has_defuname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defuname().data(), this->defuname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "defuname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->defuname(), target);
  }

  // optional uint32 DefHtid = 10;
  if (has_defhtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->defhtid(), target);
  }

  // optional uint64 RecordTime = 11;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->recordtime(), target);
  }

  // repeated .pb.TPubgBattleSimple ArrBattleSimple = 12;
  for (int i = 0; i < this->arrbattlesimple_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->arrbattlesimple(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgBattleRecord)
  return target;
}

int TPubgBattleRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TPubgLocation AtkLocation = 1;
    if (has_atklocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atklocation());
    }

    // optional uint64 AtkOwnerId = 2;
    if (has_atkownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->atkownerid());
    }

    // optional string AtkServerId = 3;
    if (has_atkserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->atkserverid());
    }

    // optional string AtkUname = 4;
    if (has_atkuname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->atkuname());
    }

    // optional uint32 AtkHtid = 5;
    if (has_atkhtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atkhtid());
    }

    // optional .pb.TPubgLocation DefLocation = 6;
    if (has_deflocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deflocation());
    }

    // optional uint64 DefOwnerId = 7;
    if (has_defownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->defownerid());
    }

    // optional string DefServerId = 8;
    if (has_defserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defserverid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string DefUname = 9;
    if (has_defuname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defuname());
    }

    // optional uint32 DefHtid = 10;
    if (has_defhtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defhtid());
    }

    // optional uint64 RecordTime = 11;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordtime());
    }

  }
  // repeated .pb.TPubgBattleSimple ArrBattleSimple = 12;
  total_size += 1 * this->arrbattlesimple_size();
  for (int i = 0; i < this->arrbattlesimple_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrbattlesimple(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgBattleRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgBattleRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgBattleRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgBattleRecord::MergeFrom(const TPubgBattleRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrbattlesimple_.MergeFrom(from.arrbattlesimple_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_atklocation()) {
      mutable_atklocation()->::pb::TPubgLocation::MergeFrom(from.atklocation());
    }
    if (from.has_atkownerid()) {
      set_atkownerid(from.atkownerid());
    }
    if (from.has_atkserverid()) {
      set_atkserverid(from.atkserverid());
    }
    if (from.has_atkuname()) {
      set_atkuname(from.atkuname());
    }
    if (from.has_atkhtid()) {
      set_atkhtid(from.atkhtid());
    }
    if (from.has_deflocation()) {
      mutable_deflocation()->::pb::TPubgLocation::MergeFrom(from.deflocation());
    }
    if (from.has_defownerid()) {
      set_defownerid(from.defownerid());
    }
    if (from.has_defserverid()) {
      set_defserverid(from.defserverid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_defuname()) {
      set_defuname(from.defuname());
    }
    if (from.has_defhtid()) {
      set_defhtid(from.defhtid());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgBattleRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgBattleRecord::CopyFrom(const TPubgBattleRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgBattleRecord::IsInitialized() const {

  return true;
}

void TPubgBattleRecord::Swap(TPubgBattleRecord* other) {
  if (other != this) {
    std::swap(atklocation_, other->atklocation_);
    std::swap(atkownerid_, other->atkownerid_);
    std::swap(atkserverid_, other->atkserverid_);
    std::swap(atkuname_, other->atkuname_);
    std::swap(atkhtid_, other->atkhtid_);
    std::swap(deflocation_, other->deflocation_);
    std::swap(defownerid_, other->defownerid_);
    std::swap(defserverid_, other->defserverid_);
    std::swap(defuname_, other->defuname_);
    std::swap(defhtid_, other->defhtid_);
    std::swap(recordtime_, other->recordtime_);
    arrbattlesimple_.Swap(&other->arrbattlesimple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgBattleRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgBattleRecord_descriptor_;
  metadata.reflection = TPubgBattleRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgLocation::kAreaIdFieldNumber;
const int TPubgLocation::kCityIdFieldNumber;
const int TPubgLocation::kCampIdFieldNumber;
#endif  // !_MSC_VER

TPubgLocation::TPubgLocation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgLocation)
}

void TPubgLocation::InitAsDefaultInstance() {
}

TPubgLocation::TPubgLocation(const TPubgLocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgLocation)
}

void TPubgLocation::SharedCtor() {
  _cached_size_ = 0;
  areaid_ = 0u;
  cityid_ = 0u;
  campid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgLocation::~TPubgLocation() {
  // @@protoc_insertion_point(destructor:pb.TPubgLocation)
  SharedDtor();
}

void TPubgLocation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPubgLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgLocation_descriptor_;
}

const TPubgLocation& TPubgLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgLocation* TPubgLocation::default_instance_ = NULL;

TPubgLocation* TPubgLocation::New() const {
  return new TPubgLocation;
}

void TPubgLocation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPubgLocation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(areaid_, campid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AreaId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CityId;
        break;
      }

      // optional uint32 CityId = 2;
      case 2: {
        if (tag == 16) {
         parse_CityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CampId;
        break;
      }

      // optional uint32 CampId = 3;
      case 3: {
        if (tag == 24) {
         parse_CampId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgLocation)
  return false;
#undef DO_
}

void TPubgLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgLocation)
  // optional uint32 AreaId = 1;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->areaid(), output);
  }

  // optional uint32 CityId = 2;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cityid(), output);
  }

  // optional uint32 CampId = 3;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->campid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgLocation)
}

::google::protobuf::uint8* TPubgLocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgLocation)
  // optional uint32 AreaId = 1;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->areaid(), target);
  }

  // optional uint32 CityId = 2;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cityid(), target);
  }

  // optional uint32 CampId = 3;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->campid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgLocation)
  return target;
}

int TPubgLocation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AreaId = 1;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areaid());
    }

    // optional uint32 CityId = 2;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint32 CampId = 3;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgLocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgLocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgLocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgLocation::MergeFrom(const TPubgLocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgLocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgLocation::CopyFrom(const TPubgLocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgLocation::IsInitialized() const {

  return true;
}

void TPubgLocation::Swap(TPubgLocation* other) {
  if (other != this) {
    std::swap(areaid_, other->areaid_);
    std::swap(cityid_, other->cityid_);
    std::swap(campid_, other->campid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgLocation_descriptor_;
  metadata.reflection = TPubgLocation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgGetInfoRsp::kArrProcessInfoFieldNumber;
const int TPubgGetInfoRsp::kServerOpenFieldNumber;
const int TPubgGetInfoRsp::kCurRoundFieldNumber;
const int TPubgGetInfoRsp::kCurStageFieldNumber;
const int TPubgGetInfoRsp::kUserInfoFieldNumber;
const int TPubgGetInfoRsp::kFieldInfoFieldNumber;
const int TPubgGetInfoRsp::kChickenEaterInfoFieldNumber;
const int TPubgGetInfoRsp::kSceneIdFieldNumber;
const int TPubgGetInfoRsp::kWinnerOffseasonBegTimeFieldNumber;
const int TPubgGetInfoRsp::kWinnerFieldInfoFieldNumber;
const int TPubgGetInfoRsp::kWinnerArrProcessInfoFieldNumber;
#endif  // !_MSC_VER

TPubgGetInfoRsp::TPubgGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgGetInfoRsp)
}

void TPubgGetInfoRsp::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TPubgUserInfo*>(&::pb::TPubgUserInfo::default_instance());
  fieldinfo_ = const_cast< ::pb::TPubgFieldInfo*>(&::pb::TPubgFieldInfo::default_instance());
  chickeneaterinfo_ = const_cast< ::pb::TPubgChickenEaterInfo*>(&::pb::TPubgChickenEaterInfo::default_instance());
  winnerfieldinfo_ = const_cast< ::pb::TPubgFieldInfo*>(&::pb::TPubgFieldInfo::default_instance());
}

TPubgGetInfoRsp::TPubgGetInfoRsp(const TPubgGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgGetInfoRsp)
}

void TPubgGetInfoRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serveropen_ = false;
  curround_ = 0u;
  curstage_ = 0;
  userinfo_ = NULL;
  fieldinfo_ = NULL;
  chickeneaterinfo_ = NULL;
  sceneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  winneroffseasonbegtime_ = GOOGLE_ULONGLONG(0);
  winnerfieldinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgGetInfoRsp::~TPubgGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TPubgGetInfoRsp)
  SharedDtor();
}

void TPubgGetInfoRsp::SharedDtor() {
  if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sceneid_;
  }
  if (this != default_instance_) {
    delete userinfo_;
    delete fieldinfo_;
    delete chickeneaterinfo_;
    delete winnerfieldinfo_;
  }
}

void TPubgGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgGetInfoRsp_descriptor_;
}

const TPubgGetInfoRsp& TPubgGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgGetInfoRsp* TPubgGetInfoRsp::default_instance_ = NULL;

TPubgGetInfoRsp* TPubgGetInfoRsp::New() const {
  return new TPubgGetInfoRsp;
}

void TPubgGetInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPubgGetInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 254) {
    ZR_(serveropen_, curround_);
    curstage_ = 0;
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TPubgUserInfo::Clear();
    }
    if (has_fieldinfo()) {
      if (fieldinfo_ != NULL) fieldinfo_->::pb::TPubgFieldInfo::Clear();
    }
    if (has_chickeneaterinfo()) {
      if (chickeneaterinfo_ != NULL) chickeneaterinfo_->::pb::TPubgChickenEaterInfo::Clear();
    }
    if (has_sceneid()) {
      if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sceneid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 768) {
    winneroffseasonbegtime_ = GOOGLE_ULONGLONG(0);
    if (has_winnerfieldinfo()) {
      if (winnerfieldinfo_ != NULL) winnerfieldinfo_->::pb::TPubgFieldInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrprocessinfo_.Clear();
  winnerarrprocessinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPubgProcessInfo ArrProcessInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrProcessInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrprocessinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrProcessInfo;
        if (input->ExpectTag(16)) goto parse_ServerOpen;
        break;
      }

      // optional bool ServerOpen = 2;
      case 2: {
        if (tag == 16) {
         parse_ServerOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &serveropen_)));
          set_has_serveropen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CurRound;
        break;
      }

      // optional uint32 CurRound = 3;
      case 3: {
        if (tag == 24) {
         parse_CurRound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curround_)));
          set_has_curround();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_CurStage;
        break;
      }

      // optional .pb.EPubgStage CurStage = 4;
      case 4: {
        if (tag == 32) {
         parse_CurStage:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EPubgStage_IsValid(value)) {
            set_curstage(static_cast< ::pb::EPubgStage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_UserInfo;
        break;
      }

      // optional .pb.TPubgUserInfo UserInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_FieldInfo;
        break;
      }

      // optional .pb.TPubgFieldInfo FieldInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_FieldInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fieldinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ChickenEaterInfo;
        break;
      }

      // optional .pb.TPubgChickenEaterInfo ChickenEaterInfo = 7;
      case 7: {
        if (tag == 58) {
         parse_ChickenEaterInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chickeneaterinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_SceneId;
        break;
      }

      // optional string SceneId = 8;
      case 8: {
        if (tag == 66) {
         parse_SceneId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sceneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sceneid().data(), this->sceneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sceneid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_WinnerOffseasonBegTime;
        break;
      }

      // optional uint64 WinnerOffseasonBegTime = 9;
      case 9: {
        if (tag == 72) {
         parse_WinnerOffseasonBegTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &winneroffseasonbegtime_)));
          set_has_winneroffseasonbegtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_WinnerFieldInfo;
        break;
      }

      // optional .pb.TPubgFieldInfo WinnerFieldInfo = 10;
      case 10: {
        if (tag == 82) {
         parse_WinnerFieldInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_winnerfieldinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_WinnerArrProcessInfo;
        break;
      }

      // repeated .pb.TPubgProcessInfo WinnerArrProcessInfo = 11;
      case 11: {
        if (tag == 90) {
         parse_WinnerArrProcessInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_winnerarrprocessinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_WinnerArrProcessInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgGetInfoRsp)
  return false;
#undef DO_
}

void TPubgGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgGetInfoRsp)
  // repeated .pb.TPubgProcessInfo ArrProcessInfo = 1;
  for (int i = 0; i < this->arrprocessinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrprocessinfo(i), output);
  }

  // optional bool ServerOpen = 2;
  if (has_serveropen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->serveropen(), output);
  }

  // optional uint32 CurRound = 3;
  if (has_curround()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curround(), output);
  }

  // optional .pb.EPubgStage CurStage = 4;
  if (has_curstage()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->curstage(), output);
  }

  // optional .pb.TPubgUserInfo UserInfo = 5;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->userinfo(), output);
  }

  // optional .pb.TPubgFieldInfo FieldInfo = 6;
  if (has_fieldinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->fieldinfo(), output);
  }

  // optional .pb.TPubgChickenEaterInfo ChickenEaterInfo = 7;
  if (has_chickeneaterinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->chickeneaterinfo(), output);
  }

  // optional string SceneId = 8;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sceneid().data(), this->sceneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sceneid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->sceneid(), output);
  }

  // optional uint64 WinnerOffseasonBegTime = 9;
  if (has_winneroffseasonbegtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->winneroffseasonbegtime(), output);
  }

  // optional .pb.TPubgFieldInfo WinnerFieldInfo = 10;
  if (has_winnerfieldinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->winnerfieldinfo(), output);
  }

  // repeated .pb.TPubgProcessInfo WinnerArrProcessInfo = 11;
  for (int i = 0; i < this->winnerarrprocessinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->winnerarrprocessinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgGetInfoRsp)
}

::google::protobuf::uint8* TPubgGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgGetInfoRsp)
  // repeated .pb.TPubgProcessInfo ArrProcessInfo = 1;
  for (int i = 0; i < this->arrprocessinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrprocessinfo(i), target);
  }

  // optional bool ServerOpen = 2;
  if (has_serveropen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->serveropen(), target);
  }

  // optional uint32 CurRound = 3;
  if (has_curround()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curround(), target);
  }

  // optional .pb.EPubgStage CurStage = 4;
  if (has_curstage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->curstage(), target);
  }

  // optional .pb.TPubgUserInfo UserInfo = 5;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->userinfo(), target);
  }

  // optional .pb.TPubgFieldInfo FieldInfo = 6;
  if (has_fieldinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->fieldinfo(), target);
  }

  // optional .pb.TPubgChickenEaterInfo ChickenEaterInfo = 7;
  if (has_chickeneaterinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->chickeneaterinfo(), target);
  }

  // optional string SceneId = 8;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sceneid().data(), this->sceneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sceneid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sceneid(), target);
  }

  // optional uint64 WinnerOffseasonBegTime = 9;
  if (has_winneroffseasonbegtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->winneroffseasonbegtime(), target);
  }

  // optional .pb.TPubgFieldInfo WinnerFieldInfo = 10;
  if (has_winnerfieldinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->winnerfieldinfo(), target);
  }

  // repeated .pb.TPubgProcessInfo WinnerArrProcessInfo = 11;
  for (int i = 0; i < this->winnerarrprocessinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->winnerarrprocessinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgGetInfoRsp)
  return target;
}

int TPubgGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool ServerOpen = 2;
    if (has_serveropen()) {
      total_size += 1 + 1;
    }

    // optional uint32 CurRound = 3;
    if (has_curround()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curround());
    }

    // optional .pb.EPubgStage CurStage = 4;
    if (has_curstage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->curstage());
    }

    // optional .pb.TPubgUserInfo UserInfo = 5;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional .pb.TPubgFieldInfo FieldInfo = 6;
    if (has_fieldinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fieldinfo());
    }

    // optional .pb.TPubgChickenEaterInfo ChickenEaterInfo = 7;
    if (has_chickeneaterinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chickeneaterinfo());
    }

    // optional string SceneId = 8;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sceneid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 WinnerOffseasonBegTime = 9;
    if (has_winneroffseasonbegtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->winneroffseasonbegtime());
    }

    // optional .pb.TPubgFieldInfo WinnerFieldInfo = 10;
    if (has_winnerfieldinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->winnerfieldinfo());
    }

  }
  // repeated .pb.TPubgProcessInfo ArrProcessInfo = 1;
  total_size += 1 * this->arrprocessinfo_size();
  for (int i = 0; i < this->arrprocessinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrprocessinfo(i));
  }

  // repeated .pb.TPubgProcessInfo WinnerArrProcessInfo = 11;
  total_size += 1 * this->winnerarrprocessinfo_size();
  for (int i = 0; i < this->winnerarrprocessinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->winnerarrprocessinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgGetInfoRsp::MergeFrom(const TPubgGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrprocessinfo_.MergeFrom(from.arrprocessinfo_);
  winnerarrprocessinfo_.MergeFrom(from.winnerarrprocessinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_serveropen()) {
      set_serveropen(from.serveropen());
    }
    if (from.has_curround()) {
      set_curround(from.curround());
    }
    if (from.has_curstage()) {
      set_curstage(from.curstage());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TPubgUserInfo::MergeFrom(from.userinfo());
    }
    if (from.has_fieldinfo()) {
      mutable_fieldinfo()->::pb::TPubgFieldInfo::MergeFrom(from.fieldinfo());
    }
    if (from.has_chickeneaterinfo()) {
      mutable_chickeneaterinfo()->::pb::TPubgChickenEaterInfo::MergeFrom(from.chickeneaterinfo());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_winneroffseasonbegtime()) {
      set_winneroffseasonbegtime(from.winneroffseasonbegtime());
    }
    if (from.has_winnerfieldinfo()) {
      mutable_winnerfieldinfo()->::pb::TPubgFieldInfo::MergeFrom(from.winnerfieldinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgGetInfoRsp::CopyFrom(const TPubgGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgGetInfoRsp::IsInitialized() const {

  return true;
}

void TPubgGetInfoRsp::Swap(TPubgGetInfoRsp* other) {
  if (other != this) {
    arrprocessinfo_.Swap(&other->arrprocessinfo_);
    std::swap(serveropen_, other->serveropen_);
    std::swap(curround_, other->curround_);
    std::swap(curstage_, other->curstage_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(fieldinfo_, other->fieldinfo_);
    std::swap(chickeneaterinfo_, other->chickeneaterinfo_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(winneroffseasonbegtime_, other->winneroffseasonbegtime_);
    std::swap(winnerfieldinfo_, other->winnerfieldinfo_);
    winnerarrprocessinfo_.Swap(&other->winnerarrprocessinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgGetInfoRsp_descriptor_;
  metadata.reflection = TPubgGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgEnterReq::kFieldIdFieldNumber;
#endif  // !_MSC_VER

TPubgEnterReq::TPubgEnterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgEnterReq)
}

void TPubgEnterReq::InitAsDefaultInstance() {
}

TPubgEnterReq::TPubgEnterReq(const TPubgEnterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgEnterReq)
}

void TPubgEnterReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fieldid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgEnterReq::~TPubgEnterReq() {
  // @@protoc_insertion_point(destructor:pb.TPubgEnterReq)
  SharedDtor();
}

void TPubgEnterReq::SharedDtor() {
  if (fieldid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fieldid_;
  }
  if (this != default_instance_) {
  }
}

void TPubgEnterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgEnterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgEnterReq_descriptor_;
}

const TPubgEnterReq& TPubgEnterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgEnterReq* TPubgEnterReq::default_instance_ = NULL;

TPubgEnterReq* TPubgEnterReq::New() const {
  return new TPubgEnterReq;
}

void TPubgEnterReq::Clear() {
  if (has_fieldid()) {
    if (fieldid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      fieldid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgEnterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgEnterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string FieldId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fieldid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fieldid().data(), this->fieldid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fieldid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgEnterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgEnterReq)
  return false;
#undef DO_
}

void TPubgEnterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgEnterReq)
  // optional string FieldId = 1;
  if (has_fieldid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fieldid().data(), this->fieldid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fieldid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fieldid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgEnterReq)
}

::google::protobuf::uint8* TPubgEnterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgEnterReq)
  // optional string FieldId = 1;
  if (has_fieldid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fieldid().data(), this->fieldid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fieldid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fieldid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgEnterReq)
  return target;
}

int TPubgEnterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string FieldId = 1;
    if (has_fieldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fieldid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgEnterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgEnterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgEnterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgEnterReq::MergeFrom(const TPubgEnterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fieldid()) {
      set_fieldid(from.fieldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgEnterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgEnterReq::CopyFrom(const TPubgEnterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgEnterReq::IsInitialized() const {

  return true;
}

void TPubgEnterReq::Swap(TPubgEnterReq* other) {
  if (other != this) {
    std::swap(fieldid_, other->fieldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgEnterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgEnterReq_descriptor_;
  metadata.reflection = TPubgEnterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgGetCampListReq::kAreaIdFieldNumber;
const int TPubgGetCampListReq::kCityIdFieldNumber;
const int TPubgGetCampListReq::kFieldIdFieldNumber;
#endif  // !_MSC_VER

TPubgGetCampListReq::TPubgGetCampListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgGetCampListReq)
}

void TPubgGetCampListReq::InitAsDefaultInstance() {
}

TPubgGetCampListReq::TPubgGetCampListReq(const TPubgGetCampListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgGetCampListReq)
}

void TPubgGetCampListReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  areaid_ = 0u;
  cityid_ = 0u;
  fieldid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgGetCampListReq::~TPubgGetCampListReq() {
  // @@protoc_insertion_point(destructor:pb.TPubgGetCampListReq)
  SharedDtor();
}

void TPubgGetCampListReq::SharedDtor() {
  if (fieldid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fieldid_;
  }
  if (this != default_instance_) {
  }
}

void TPubgGetCampListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgGetCampListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgGetCampListReq_descriptor_;
}

const TPubgGetCampListReq& TPubgGetCampListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgGetCampListReq* TPubgGetCampListReq::default_instance_ = NULL;

TPubgGetCampListReq* TPubgGetCampListReq::New() const {
  return new TPubgGetCampListReq;
}

void TPubgGetCampListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPubgGetCampListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(areaid_, cityid_);
    if (has_fieldid()) {
      if (fieldid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fieldid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgGetCampListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgGetCampListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AreaId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CityId;
        break;
      }

      // optional uint32 CityId = 2;
      case 2: {
        if (tag == 16) {
         parse_CityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FieldId;
        break;
      }

      // optional string FieldId = 3;
      case 3: {
        if (tag == 26) {
         parse_FieldId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fieldid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fieldid().data(), this->fieldid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fieldid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgGetCampListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgGetCampListReq)
  return false;
#undef DO_
}

void TPubgGetCampListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgGetCampListReq)
  // optional uint32 AreaId = 1;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->areaid(), output);
  }

  // optional uint32 CityId = 2;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cityid(), output);
  }

  // optional string FieldId = 3;
  if (has_fieldid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fieldid().data(), this->fieldid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fieldid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fieldid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgGetCampListReq)
}

::google::protobuf::uint8* TPubgGetCampListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgGetCampListReq)
  // optional uint32 AreaId = 1;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->areaid(), target);
  }

  // optional uint32 CityId = 2;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cityid(), target);
  }

  // optional string FieldId = 3;
  if (has_fieldid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fieldid().data(), this->fieldid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fieldid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fieldid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgGetCampListReq)
  return target;
}

int TPubgGetCampListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AreaId = 1;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areaid());
    }

    // optional uint32 CityId = 2;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional string FieldId = 3;
    if (has_fieldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fieldid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgGetCampListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgGetCampListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgGetCampListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgGetCampListReq::MergeFrom(const TPubgGetCampListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_fieldid()) {
      set_fieldid(from.fieldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgGetCampListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgGetCampListReq::CopyFrom(const TPubgGetCampListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgGetCampListReq::IsInitialized() const {

  return true;
}

void TPubgGetCampListReq::Swap(TPubgGetCampListReq* other) {
  if (other != this) {
    std::swap(areaid_, other->areaid_);
    std::swap(cityid_, other->cityid_);
    std::swap(fieldid_, other->fieldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgGetCampListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgGetCampListReq_descriptor_;
  metadata.reflection = TPubgGetCampListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgGetCampListRsp::kArrCampFieldNumber;
#endif  // !_MSC_VER

TPubgGetCampListRsp::TPubgGetCampListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgGetCampListRsp)
}

void TPubgGetCampListRsp::InitAsDefaultInstance() {
}

TPubgGetCampListRsp::TPubgGetCampListRsp(const TPubgGetCampListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgGetCampListRsp)
}

void TPubgGetCampListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgGetCampListRsp::~TPubgGetCampListRsp() {
  // @@protoc_insertion_point(destructor:pb.TPubgGetCampListRsp)
  SharedDtor();
}

void TPubgGetCampListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPubgGetCampListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgGetCampListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgGetCampListRsp_descriptor_;
}

const TPubgGetCampListRsp& TPubgGetCampListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgGetCampListRsp* TPubgGetCampListRsp::default_instance_ = NULL;

TPubgGetCampListRsp* TPubgGetCampListRsp::New() const {
  return new TPubgGetCampListRsp;
}

void TPubgGetCampListRsp::Clear() {
  arrcamp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgGetCampListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgGetCampListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPubgCampInfo ArrCamp = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrCamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrcamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrCamp;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgGetCampListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgGetCampListRsp)
  return false;
#undef DO_
}

void TPubgGetCampListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgGetCampListRsp)
  // repeated .pb.TPubgCampInfo ArrCamp = 1;
  for (int i = 0; i < this->arrcamp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrcamp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgGetCampListRsp)
}

::google::protobuf::uint8* TPubgGetCampListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgGetCampListRsp)
  // repeated .pb.TPubgCampInfo ArrCamp = 1;
  for (int i = 0; i < this->arrcamp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrcamp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgGetCampListRsp)
  return target;
}

int TPubgGetCampListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TPubgCampInfo ArrCamp = 1;
  total_size += 1 * this->arrcamp_size();
  for (int i = 0; i < this->arrcamp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrcamp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgGetCampListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgGetCampListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgGetCampListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgGetCampListRsp::MergeFrom(const TPubgGetCampListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrcamp_.MergeFrom(from.arrcamp_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgGetCampListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgGetCampListRsp::CopyFrom(const TPubgGetCampListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgGetCampListRsp::IsInitialized() const {

  return true;
}

void TPubgGetCampListRsp::Swap(TPubgGetCampListRsp* other) {
  if (other != this) {
    arrcamp_.Swap(&other->arrcamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgGetCampListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgGetCampListRsp_descriptor_;
  metadata.reflection = TPubgGetCampListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgSignRsp::kSignTimeFieldNumber;
#endif  // !_MSC_VER

TPubgSignRsp::TPubgSignRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgSignRsp)
}

void TPubgSignRsp::InitAsDefaultInstance() {
}

TPubgSignRsp::TPubgSignRsp(const TPubgSignRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgSignRsp)
}

void TPubgSignRsp::SharedCtor() {
  _cached_size_ = 0;
  signtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgSignRsp::~TPubgSignRsp() {
  // @@protoc_insertion_point(destructor:pb.TPubgSignRsp)
  SharedDtor();
}

void TPubgSignRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPubgSignRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgSignRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgSignRsp_descriptor_;
}

const TPubgSignRsp& TPubgSignRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgSignRsp* TPubgSignRsp::default_instance_ = NULL;

TPubgSignRsp* TPubgSignRsp::New() const {
  return new TPubgSignRsp;
}

void TPubgSignRsp::Clear() {
  signtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgSignRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgSignRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 SignTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signtime_)));
          set_has_signtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgSignRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgSignRsp)
  return false;
#undef DO_
}

void TPubgSignRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgSignRsp)
  // optional uint64 SignTime = 1;
  if (has_signtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->signtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgSignRsp)
}

::google::protobuf::uint8* TPubgSignRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgSignRsp)
  // optional uint64 SignTime = 1;
  if (has_signtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->signtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgSignRsp)
  return target;
}

int TPubgSignRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 SignTime = 1;
    if (has_signtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgSignRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgSignRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgSignRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgSignRsp::MergeFrom(const TPubgSignRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signtime()) {
      set_signtime(from.signtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgSignRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgSignRsp::CopyFrom(const TPubgSignRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgSignRsp::IsInitialized() const {

  return true;
}

void TPubgSignRsp::Swap(TPubgSignRsp* other) {
  if (other != this) {
    std::swap(signtime_, other->signtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgSignRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgSignRsp_descriptor_;
  metadata.reflection = TPubgSignRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgGetMyFmtRsp::kArrFmtFieldNumber;
#endif  // !_MSC_VER

TPubgGetMyFmtRsp::TPubgGetMyFmtRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgGetMyFmtRsp)
}

void TPubgGetMyFmtRsp::InitAsDefaultInstance() {
}

TPubgGetMyFmtRsp::TPubgGetMyFmtRsp(const TPubgGetMyFmtRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgGetMyFmtRsp)
}

void TPubgGetMyFmtRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgGetMyFmtRsp::~TPubgGetMyFmtRsp() {
  // @@protoc_insertion_point(destructor:pb.TPubgGetMyFmtRsp)
  SharedDtor();
}

void TPubgGetMyFmtRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPubgGetMyFmtRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgGetMyFmtRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgGetMyFmtRsp_descriptor_;
}

const TPubgGetMyFmtRsp& TPubgGetMyFmtRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgGetMyFmtRsp* TPubgGetMyFmtRsp::default_instance_ = NULL;

TPubgGetMyFmtRsp* TPubgGetMyFmtRsp::New() const {
  return new TPubgGetMyFmtRsp;
}

void TPubgGetMyFmtRsp::Clear() {
  arrfmt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgGetMyFmtRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgGetMyFmtRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPubgFmtInfo ArrFmt = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrFmt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrfmt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrFmt;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgGetMyFmtRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgGetMyFmtRsp)
  return false;
#undef DO_
}

void TPubgGetMyFmtRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgGetMyFmtRsp)
  // repeated .pb.TPubgFmtInfo ArrFmt = 1;
  for (int i = 0; i < this->arrfmt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrfmt(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgGetMyFmtRsp)
}

::google::protobuf::uint8* TPubgGetMyFmtRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgGetMyFmtRsp)
  // repeated .pb.TPubgFmtInfo ArrFmt = 1;
  for (int i = 0; i < this->arrfmt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrfmt(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgGetMyFmtRsp)
  return target;
}

int TPubgGetMyFmtRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TPubgFmtInfo ArrFmt = 1;
  total_size += 1 * this->arrfmt_size();
  for (int i = 0; i < this->arrfmt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrfmt(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgGetMyFmtRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgGetMyFmtRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgGetMyFmtRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgGetMyFmtRsp::MergeFrom(const TPubgGetMyFmtRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrfmt_.MergeFrom(from.arrfmt_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgGetMyFmtRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgGetMyFmtRsp::CopyFrom(const TPubgGetMyFmtRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgGetMyFmtRsp::IsInitialized() const {

  return true;
}

void TPubgGetMyFmtRsp::Swap(TPubgGetMyFmtRsp* other) {
  if (other != this) {
    arrfmt_.Swap(&other->arrfmt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgGetMyFmtRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgGetMyFmtRsp_descriptor_;
  metadata.reflection = TPubgGetMyFmtRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgSetMyFmtReq::kArrFmtFieldNumber;
#endif  // !_MSC_VER

TPubgSetMyFmtReq::TPubgSetMyFmtReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgSetMyFmtReq)
}

void TPubgSetMyFmtReq::InitAsDefaultInstance() {
}

TPubgSetMyFmtReq::TPubgSetMyFmtReq(const TPubgSetMyFmtReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgSetMyFmtReq)
}

void TPubgSetMyFmtReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgSetMyFmtReq::~TPubgSetMyFmtReq() {
  // @@protoc_insertion_point(destructor:pb.TPubgSetMyFmtReq)
  SharedDtor();
}

void TPubgSetMyFmtReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPubgSetMyFmtReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgSetMyFmtReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgSetMyFmtReq_descriptor_;
}

const TPubgSetMyFmtReq& TPubgSetMyFmtReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgSetMyFmtReq* TPubgSetMyFmtReq::default_instance_ = NULL;

TPubgSetMyFmtReq* TPubgSetMyFmtReq::New() const {
  return new TPubgSetMyFmtReq;
}

void TPubgSetMyFmtReq::Clear() {
  arrfmt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgSetMyFmtReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgSetMyFmtReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPubgFmtInfo ArrFmt = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrFmt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrfmt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrFmt;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgSetMyFmtReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgSetMyFmtReq)
  return false;
#undef DO_
}

void TPubgSetMyFmtReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgSetMyFmtReq)
  // repeated .pb.TPubgFmtInfo ArrFmt = 1;
  for (int i = 0; i < this->arrfmt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrfmt(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgSetMyFmtReq)
}

::google::protobuf::uint8* TPubgSetMyFmtReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgSetMyFmtReq)
  // repeated .pb.TPubgFmtInfo ArrFmt = 1;
  for (int i = 0; i < this->arrfmt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrfmt(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgSetMyFmtReq)
  return target;
}

int TPubgSetMyFmtReq::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TPubgFmtInfo ArrFmt = 1;
  total_size += 1 * this->arrfmt_size();
  for (int i = 0; i < this->arrfmt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrfmt(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgSetMyFmtReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgSetMyFmtReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgSetMyFmtReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgSetMyFmtReq::MergeFrom(const TPubgSetMyFmtReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrfmt_.MergeFrom(from.arrfmt_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgSetMyFmtReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgSetMyFmtReq::CopyFrom(const TPubgSetMyFmtReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgSetMyFmtReq::IsInitialized() const {

  return true;
}

void TPubgSetMyFmtReq::Swap(TPubgSetMyFmtReq* other) {
  if (other != this) {
    arrfmt_.Swap(&other->arrfmt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgSetMyFmtReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgSetMyFmtReq_descriptor_;
  metadata.reflection = TPubgSetMyFmtReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgAttackReq::kMyLocationFieldNumber;
const int TPubgAttackReq::kEnemyLocationFieldNumber;
const int TPubgAttackReq::kEnemyIdFieldNumber;
const int TPubgAttackReq::kSkipBattleFieldNumber;
#endif  // !_MSC_VER

TPubgAttackReq::TPubgAttackReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgAttackReq)
}

void TPubgAttackReq::InitAsDefaultInstance() {
  mylocation_ = const_cast< ::pb::TPubgLocation*>(&::pb::TPubgLocation::default_instance());
  enemylocation_ = const_cast< ::pb::TPubgLocation*>(&::pb::TPubgLocation::default_instance());
}

TPubgAttackReq::TPubgAttackReq(const TPubgAttackReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgAttackReq)
}

void TPubgAttackReq::SharedCtor() {
  _cached_size_ = 0;
  mylocation_ = NULL;
  enemylocation_ = NULL;
  enemyid_ = GOOGLE_ULONGLONG(0);
  skipbattle_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgAttackReq::~TPubgAttackReq() {
  // @@protoc_insertion_point(destructor:pb.TPubgAttackReq)
  SharedDtor();
}

void TPubgAttackReq::SharedDtor() {
  if (this != default_instance_) {
    delete mylocation_;
    delete enemylocation_;
  }
}

void TPubgAttackReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgAttackReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgAttackReq_descriptor_;
}

const TPubgAttackReq& TPubgAttackReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgAttackReq* TPubgAttackReq::default_instance_ = NULL;

TPubgAttackReq* TPubgAttackReq::New() const {
  return new TPubgAttackReq;
}

void TPubgAttackReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPubgAttackReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(enemyid_, skipbattle_);
    if (has_mylocation()) {
      if (mylocation_ != NULL) mylocation_->::pb::TPubgLocation::Clear();
    }
    if (has_enemylocation()) {
      if (enemylocation_ != NULL) enemylocation_->::pb::TPubgLocation::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgAttackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgAttackReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TPubgLocation MyLocation = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mylocation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_EnemyLocation;
        break;
      }

      // optional .pb.TPubgLocation EnemyLocation = 2;
      case 2: {
        if (tag == 18) {
         parse_EnemyLocation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enemylocation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EnemyId;
        break;
      }

      // optional uint64 EnemyId = 3;
      case 3: {
        if (tag == 24) {
         parse_EnemyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enemyid_)));
          set_has_enemyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SkipBattle;
        break;
      }

      // optional bool SkipBattle = 4;
      case 4: {
        if (tag == 32) {
         parse_SkipBattle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skipbattle_)));
          set_has_skipbattle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgAttackReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgAttackReq)
  return false;
#undef DO_
}

void TPubgAttackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgAttackReq)
  // optional .pb.TPubgLocation MyLocation = 1;
  if (has_mylocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mylocation(), output);
  }

  // optional .pb.TPubgLocation EnemyLocation = 2;
  if (has_enemylocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->enemylocation(), output);
  }

  // optional uint64 EnemyId = 3;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->enemyid(), output);
  }

  // optional bool SkipBattle = 4;
  if (has_skipbattle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->skipbattle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgAttackReq)
}

::google::protobuf::uint8* TPubgAttackReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgAttackReq)
  // optional .pb.TPubgLocation MyLocation = 1;
  if (has_mylocation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mylocation(), target);
  }

  // optional .pb.TPubgLocation EnemyLocation = 2;
  if (has_enemylocation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->enemylocation(), target);
  }

  // optional uint64 EnemyId = 3;
  if (has_enemyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->enemyid(), target);
  }

  // optional bool SkipBattle = 4;
  if (has_skipbattle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->skipbattle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgAttackReq)
  return target;
}

int TPubgAttackReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TPubgLocation MyLocation = 1;
    if (has_mylocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mylocation());
    }

    // optional .pb.TPubgLocation EnemyLocation = 2;
    if (has_enemylocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enemylocation());
    }

    // optional uint64 EnemyId = 3;
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enemyid());
    }

    // optional bool SkipBattle = 4;
    if (has_skipbattle()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgAttackReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgAttackReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgAttackReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgAttackReq::MergeFrom(const TPubgAttackReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mylocation()) {
      mutable_mylocation()->::pb::TPubgLocation::MergeFrom(from.mylocation());
    }
    if (from.has_enemylocation()) {
      mutable_enemylocation()->::pb::TPubgLocation::MergeFrom(from.enemylocation());
    }
    if (from.has_enemyid()) {
      set_enemyid(from.enemyid());
    }
    if (from.has_skipbattle()) {
      set_skipbattle(from.skipbattle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgAttackReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgAttackReq::CopyFrom(const TPubgAttackReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgAttackReq::IsInitialized() const {

  return true;
}

void TPubgAttackReq::Swap(TPubgAttackReq* other) {
  if (other != this) {
    std::swap(mylocation_, other->mylocation_);
    std::swap(enemylocation_, other->enemylocation_);
    std::swap(enemyid_, other->enemyid_);
    std::swap(skipbattle_, other->skipbattle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgAttackReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgAttackReq_descriptor_;
  metadata.reflection = TPubgAttackReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgAttackRsp::kIsWinFieldNumber;
const int TPubgAttackRsp::kArrBattleDetailFieldNumber;
const int TPubgAttackRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TPubgAttackRsp::TPubgAttackRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgAttackRsp)
}

void TPubgAttackRsp::InitAsDefaultInstance() {
}

TPubgAttackRsp::TPubgAttackRsp(const TPubgAttackRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgAttackRsp)
}

void TPubgAttackRsp::SharedCtor() {
  _cached_size_ = 0;
  iswin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgAttackRsp::~TPubgAttackRsp() {
  // @@protoc_insertion_point(destructor:pb.TPubgAttackRsp)
  SharedDtor();
}

void TPubgAttackRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPubgAttackRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgAttackRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgAttackRsp_descriptor_;
}

const TPubgAttackRsp& TPubgAttackRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgAttackRsp* TPubgAttackRsp::default_instance_ = NULL;

TPubgAttackRsp* TPubgAttackRsp::New() const {
  return new TPubgAttackRsp;
}

void TPubgAttackRsp::Clear() {
  iswin_ = false;
  arrbattledetail_.Clear();
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgAttackRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgAttackRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsWin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrBattleDetail;
        break;
      }

      // repeated .pb.TPubgBattleDetail ArrBattleDetail = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrBattleDetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrbattledetail()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrBattleDetail;
        if (input->ExpectTag(26)) goto parse_ArrReward;
        break;
      }

      // repeated .pb.TCommonReward ArrReward = 3;
      case 3: {
        if (tag == 26) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgAttackRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgAttackRsp)
  return false;
#undef DO_
}

void TPubgAttackRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgAttackRsp)
  // optional bool IsWin = 1;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->iswin(), output);
  }

  // repeated .pb.TPubgBattleDetail ArrBattleDetail = 2;
  for (int i = 0; i < this->arrbattledetail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrbattledetail(i), output);
  }

  // repeated .pb.TCommonReward ArrReward = 3;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgAttackRsp)
}

::google::protobuf::uint8* TPubgAttackRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgAttackRsp)
  // optional bool IsWin = 1;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->iswin(), target);
  }

  // repeated .pb.TPubgBattleDetail ArrBattleDetail = 2;
  for (int i = 0; i < this->arrbattledetail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrbattledetail(i), target);
  }

  // repeated .pb.TCommonReward ArrReward = 3;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgAttackRsp)
  return target;
}

int TPubgAttackRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsWin = 1;
    if (has_iswin()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pb.TPubgBattleDetail ArrBattleDetail = 2;
  total_size += 1 * this->arrbattledetail_size();
  for (int i = 0; i < this->arrbattledetail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrbattledetail(i));
  }

  // repeated .pb.TCommonReward ArrReward = 3;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgAttackRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgAttackRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgAttackRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgAttackRsp::MergeFrom(const TPubgAttackRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrbattledetail_.MergeFrom(from.arrbattledetail_);
  arrreward_.MergeFrom(from.arrreward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgAttackRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgAttackRsp::CopyFrom(const TPubgAttackRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgAttackRsp::IsInitialized() const {

  return true;
}

void TPubgAttackRsp::Swap(TPubgAttackRsp* other) {
  if (other != this) {
    std::swap(iswin_, other->iswin_);
    arrbattledetail_.Swap(&other->arrbattledetail_);
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgAttackRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgAttackRsp_descriptor_;
  metadata.reflection = TPubgAttackRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgGetEnemyInfoReq::kEnemyLocationFieldNumber;
const int TPubgGetEnemyInfoReq::kEnemyIdFieldNumber;
const int TPubgGetEnemyInfoReq::kFieldIdFieldNumber;
#endif  // !_MSC_VER

TPubgGetEnemyInfoReq::TPubgGetEnemyInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgGetEnemyInfoReq)
}

void TPubgGetEnemyInfoReq::InitAsDefaultInstance() {
  enemylocation_ = const_cast< ::pb::TPubgLocation*>(&::pb::TPubgLocation::default_instance());
}

TPubgGetEnemyInfoReq::TPubgGetEnemyInfoReq(const TPubgGetEnemyInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgGetEnemyInfoReq)
}

void TPubgGetEnemyInfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  enemylocation_ = NULL;
  enemyid_ = GOOGLE_ULONGLONG(0);
  fieldid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgGetEnemyInfoReq::~TPubgGetEnemyInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TPubgGetEnemyInfoReq)
  SharedDtor();
}

void TPubgGetEnemyInfoReq::SharedDtor() {
  if (fieldid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fieldid_;
  }
  if (this != default_instance_) {
    delete enemylocation_;
  }
}

void TPubgGetEnemyInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgGetEnemyInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgGetEnemyInfoReq_descriptor_;
}

const TPubgGetEnemyInfoReq& TPubgGetEnemyInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgGetEnemyInfoReq* TPubgGetEnemyInfoReq::default_instance_ = NULL;

TPubgGetEnemyInfoReq* TPubgGetEnemyInfoReq::New() const {
  return new TPubgGetEnemyInfoReq;
}

void TPubgGetEnemyInfoReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_enemylocation()) {
      if (enemylocation_ != NULL) enemylocation_->::pb::TPubgLocation::Clear();
    }
    enemyid_ = GOOGLE_ULONGLONG(0);
    if (has_fieldid()) {
      if (fieldid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fieldid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgGetEnemyInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgGetEnemyInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TPubgLocation EnemyLocation = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enemylocation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EnemyId;
        break;
      }

      // optional uint64 EnemyId = 2;
      case 2: {
        if (tag == 16) {
         parse_EnemyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enemyid_)));
          set_has_enemyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FieldId;
        break;
      }

      // optional string FieldId = 3;
      case 3: {
        if (tag == 26) {
         parse_FieldId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fieldid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fieldid().data(), this->fieldid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fieldid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgGetEnemyInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgGetEnemyInfoReq)
  return false;
#undef DO_
}

void TPubgGetEnemyInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgGetEnemyInfoReq)
  // optional .pb.TPubgLocation EnemyLocation = 1;
  if (has_enemylocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->enemylocation(), output);
  }

  // optional uint64 EnemyId = 2;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->enemyid(), output);
  }

  // optional string FieldId = 3;
  if (has_fieldid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fieldid().data(), this->fieldid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fieldid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fieldid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgGetEnemyInfoReq)
}

::google::protobuf::uint8* TPubgGetEnemyInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgGetEnemyInfoReq)
  // optional .pb.TPubgLocation EnemyLocation = 1;
  if (has_enemylocation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->enemylocation(), target);
  }

  // optional uint64 EnemyId = 2;
  if (has_enemyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->enemyid(), target);
  }

  // optional string FieldId = 3;
  if (has_fieldid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fieldid().data(), this->fieldid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fieldid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fieldid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgGetEnemyInfoReq)
  return target;
}

int TPubgGetEnemyInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TPubgLocation EnemyLocation = 1;
    if (has_enemylocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enemylocation());
    }

    // optional uint64 EnemyId = 2;
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enemyid());
    }

    // optional string FieldId = 3;
    if (has_fieldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fieldid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgGetEnemyInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgGetEnemyInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgGetEnemyInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgGetEnemyInfoReq::MergeFrom(const TPubgGetEnemyInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemylocation()) {
      mutable_enemylocation()->::pb::TPubgLocation::MergeFrom(from.enemylocation());
    }
    if (from.has_enemyid()) {
      set_enemyid(from.enemyid());
    }
    if (from.has_fieldid()) {
      set_fieldid(from.fieldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgGetEnemyInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgGetEnemyInfoReq::CopyFrom(const TPubgGetEnemyInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgGetEnemyInfoReq::IsInitialized() const {

  return true;
}

void TPubgGetEnemyInfoReq::Swap(TPubgGetEnemyInfoReq* other) {
  if (other != this) {
    std::swap(enemylocation_, other->enemylocation_);
    std::swap(enemyid_, other->enemyid_);
    std::swap(fieldid_, other->fieldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgGetEnemyInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgGetEnemyInfoReq_descriptor_;
  metadata.reflection = TPubgGetEnemyInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgGetEnemyInfoRsp::kArrFmtFieldNumber;
const int TPubgGetEnemyInfoRsp::kHtidFieldNumber;
const int TPubgGetEnemyInfoRsp::kFightForceFieldNumber;
const int TPubgGetEnemyInfoRsp::kPlayerImageFrameTidFieldNumber;
#endif  // !_MSC_VER

TPubgGetEnemyInfoRsp::TPubgGetEnemyInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgGetEnemyInfoRsp)
}

void TPubgGetEnemyInfoRsp::InitAsDefaultInstance() {
}

TPubgGetEnemyInfoRsp::TPubgGetEnemyInfoRsp(const TPubgGetEnemyInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgGetEnemyInfoRsp)
}

void TPubgGetEnemyInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  htid_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  playerimageframetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgGetEnemyInfoRsp::~TPubgGetEnemyInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TPubgGetEnemyInfoRsp)
  SharedDtor();
}

void TPubgGetEnemyInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPubgGetEnemyInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgGetEnemyInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgGetEnemyInfoRsp_descriptor_;
}

const TPubgGetEnemyInfoRsp& TPubgGetEnemyInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgGetEnemyInfoRsp* TPubgGetEnemyInfoRsp::default_instance_ = NULL;

TPubgGetEnemyInfoRsp* TPubgGetEnemyInfoRsp::New() const {
  return new TPubgGetEnemyInfoRsp;
}

void TPubgGetEnemyInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPubgGetEnemyInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fightforce_, playerimageframetid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrfmt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgGetEnemyInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgGetEnemyInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPubgFmtDetail ArrFmt = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrFmt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrfmt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrFmt;
        if (input->ExpectTag(16)) goto parse_Htid;
        break;
      }

      // optional uint32 Htid = 2;
      case 2: {
        if (tag == 16) {
         parse_Htid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 3;
      case 3: {
        if (tag == 24) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PlayerImageFrameTid;
        break;
      }

      // optional uint32 PlayerImageFrameTid = 4;
      case 4: {
        if (tag == 32) {
         parse_PlayerImageFrameTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerimageframetid_)));
          set_has_playerimageframetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgGetEnemyInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgGetEnemyInfoRsp)
  return false;
#undef DO_
}

void TPubgGetEnemyInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgGetEnemyInfoRsp)
  // repeated .pb.TPubgFmtDetail ArrFmt = 1;
  for (int i = 0; i < this->arrfmt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrfmt(i), output);
  }

  // optional uint32 Htid = 2;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->htid(), output);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fightforce(), output);
  }

  // optional uint32 PlayerImageFrameTid = 4;
  if (has_playerimageframetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->playerimageframetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgGetEnemyInfoRsp)
}

::google::protobuf::uint8* TPubgGetEnemyInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgGetEnemyInfoRsp)
  // repeated .pb.TPubgFmtDetail ArrFmt = 1;
  for (int i = 0; i < this->arrfmt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrfmt(i), target);
  }

  // optional uint32 Htid = 2;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->htid(), target);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fightforce(), target);
  }

  // optional uint32 PlayerImageFrameTid = 4;
  if (has_playerimageframetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->playerimageframetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgGetEnemyInfoRsp)
  return target;
}

int TPubgGetEnemyInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 Htid = 2;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

    // optional uint64 FightForce = 3;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

    // optional uint32 PlayerImageFrameTid = 4;
    if (has_playerimageframetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerimageframetid());
    }

  }
  // repeated .pb.TPubgFmtDetail ArrFmt = 1;
  total_size += 1 * this->arrfmt_size();
  for (int i = 0; i < this->arrfmt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrfmt(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgGetEnemyInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgGetEnemyInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgGetEnemyInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgGetEnemyInfoRsp::MergeFrom(const TPubgGetEnemyInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrfmt_.MergeFrom(from.arrfmt_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_htid()) {
      set_htid(from.htid());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
    if (from.has_playerimageframetid()) {
      set_playerimageframetid(from.playerimageframetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgGetEnemyInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgGetEnemyInfoRsp::CopyFrom(const TPubgGetEnemyInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgGetEnemyInfoRsp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->arrfmt())) return false;
  return true;
}

void TPubgGetEnemyInfoRsp::Swap(TPubgGetEnemyInfoRsp* other) {
  if (other != this) {
    arrfmt_.Swap(&other->arrfmt_);
    std::swap(htid_, other->htid_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(playerimageframetid_, other->playerimageframetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgGetEnemyInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgGetEnemyInfoRsp_descriptor_;
  metadata.reflection = TPubgGetEnemyInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgBuyTokenReq::kBuyNumFieldNumber;
#endif  // !_MSC_VER

TPubgBuyTokenReq::TPubgBuyTokenReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgBuyTokenReq)
}

void TPubgBuyTokenReq::InitAsDefaultInstance() {
}

TPubgBuyTokenReq::TPubgBuyTokenReq(const TPubgBuyTokenReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgBuyTokenReq)
}

void TPubgBuyTokenReq::SharedCtor() {
  _cached_size_ = 0;
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgBuyTokenReq::~TPubgBuyTokenReq() {
  // @@protoc_insertion_point(destructor:pb.TPubgBuyTokenReq)
  SharedDtor();
}

void TPubgBuyTokenReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPubgBuyTokenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgBuyTokenReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgBuyTokenReq_descriptor_;
}

const TPubgBuyTokenReq& TPubgBuyTokenReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgBuyTokenReq* TPubgBuyTokenReq::default_instance_ = NULL;

TPubgBuyTokenReq* TPubgBuyTokenReq::New() const {
  return new TPubgBuyTokenReq;
}

void TPubgBuyTokenReq::Clear() {
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgBuyTokenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgBuyTokenReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BuyNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgBuyTokenReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgBuyTokenReq)
  return false;
#undef DO_
}

void TPubgBuyTokenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgBuyTokenReq)
  // optional uint32 BuyNum = 1;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgBuyTokenReq)
}

::google::protobuf::uint8* TPubgBuyTokenReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgBuyTokenReq)
  // optional uint32 BuyNum = 1;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgBuyTokenReq)
  return target;
}

int TPubgBuyTokenReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BuyNum = 1;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgBuyTokenReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgBuyTokenReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgBuyTokenReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgBuyTokenReq::MergeFrom(const TPubgBuyTokenReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgBuyTokenReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgBuyTokenReq::CopyFrom(const TPubgBuyTokenReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgBuyTokenReq::IsInitialized() const {

  return true;
}

void TPubgBuyTokenReq::Swap(TPubgBuyTokenReq* other) {
  if (other != this) {
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgBuyTokenReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgBuyTokenReq_descriptor_;
  metadata.reflection = TPubgBuyTokenReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgBuyTokenRsp::kTokenNumFieldNumber;
#endif  // !_MSC_VER

TPubgBuyTokenRsp::TPubgBuyTokenRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgBuyTokenRsp)
}

void TPubgBuyTokenRsp::InitAsDefaultInstance() {
}

TPubgBuyTokenRsp::TPubgBuyTokenRsp(const TPubgBuyTokenRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgBuyTokenRsp)
}

void TPubgBuyTokenRsp::SharedCtor() {
  _cached_size_ = 0;
  tokennum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgBuyTokenRsp::~TPubgBuyTokenRsp() {
  // @@protoc_insertion_point(destructor:pb.TPubgBuyTokenRsp)
  SharedDtor();
}

void TPubgBuyTokenRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPubgBuyTokenRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgBuyTokenRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgBuyTokenRsp_descriptor_;
}

const TPubgBuyTokenRsp& TPubgBuyTokenRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgBuyTokenRsp* TPubgBuyTokenRsp::default_instance_ = NULL;

TPubgBuyTokenRsp* TPubgBuyTokenRsp::New() const {
  return new TPubgBuyTokenRsp;
}

void TPubgBuyTokenRsp::Clear() {
  tokennum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgBuyTokenRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgBuyTokenRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TokenNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tokennum_)));
          set_has_tokennum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgBuyTokenRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgBuyTokenRsp)
  return false;
#undef DO_
}

void TPubgBuyTokenRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgBuyTokenRsp)
  // optional uint32 TokenNum = 1;
  if (has_tokennum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tokennum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgBuyTokenRsp)
}

::google::protobuf::uint8* TPubgBuyTokenRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgBuyTokenRsp)
  // optional uint32 TokenNum = 1;
  if (has_tokennum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tokennum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgBuyTokenRsp)
  return target;
}

int TPubgBuyTokenRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TokenNum = 1;
    if (has_tokennum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tokennum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgBuyTokenRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgBuyTokenRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgBuyTokenRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgBuyTokenRsp::MergeFrom(const TPubgBuyTokenRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tokennum()) {
      set_tokennum(from.tokennum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgBuyTokenRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgBuyTokenRsp::CopyFrom(const TPubgBuyTokenRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgBuyTokenRsp::IsInitialized() const {

  return true;
}

void TPubgBuyTokenRsp::Swap(TPubgBuyTokenRsp* other) {
  if (other != this) {
    std::swap(tokennum_, other->tokennum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgBuyTokenRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgBuyTokenRsp_descriptor_;
  metadata.reflection = TPubgBuyTokenRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgGetBattleRecordReq::kOffsetFieldNumber;
const int TPubgGetBattleRecordReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TPubgGetBattleRecordReq::TPubgGetBattleRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgGetBattleRecordReq)
}

void TPubgGetBattleRecordReq::InitAsDefaultInstance() {
}

TPubgGetBattleRecordReq::TPubgGetBattleRecordReq(const TPubgGetBattleRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgGetBattleRecordReq)
}

void TPubgGetBattleRecordReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgGetBattleRecordReq::~TPubgGetBattleRecordReq() {
  // @@protoc_insertion_point(destructor:pb.TPubgGetBattleRecordReq)
  SharedDtor();
}

void TPubgGetBattleRecordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPubgGetBattleRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgGetBattleRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgGetBattleRecordReq_descriptor_;
}

const TPubgGetBattleRecordReq& TPubgGetBattleRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgGetBattleRecordReq* TPubgGetBattleRecordReq::default_instance_ = NULL;

TPubgGetBattleRecordReq* TPubgGetBattleRecordReq::New() const {
  return new TPubgGetBattleRecordReq;
}

void TPubgGetBattleRecordReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPubgGetBattleRecordReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgGetBattleRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgGetBattleRecordReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgGetBattleRecordReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgGetBattleRecordReq)
  return false;
#undef DO_
}

void TPubgGetBattleRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgGetBattleRecordReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgGetBattleRecordReq)
}

::google::protobuf::uint8* TPubgGetBattleRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgGetBattleRecordReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgGetBattleRecordReq)
  return target;
}

int TPubgGetBattleRecordReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgGetBattleRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgGetBattleRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgGetBattleRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgGetBattleRecordReq::MergeFrom(const TPubgGetBattleRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgGetBattleRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgGetBattleRecordReq::CopyFrom(const TPubgGetBattleRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgGetBattleRecordReq::IsInitialized() const {

  return true;
}

void TPubgGetBattleRecordReq::Swap(TPubgGetBattleRecordReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgGetBattleRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgGetBattleRecordReq_descriptor_;
  metadata.reflection = TPubgGetBattleRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgGetBattleRecordRsp::kBattleRecordArrFieldNumber;
#endif  // !_MSC_VER

TPubgGetBattleRecordRsp::TPubgGetBattleRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgGetBattleRecordRsp)
}

void TPubgGetBattleRecordRsp::InitAsDefaultInstance() {
}

TPubgGetBattleRecordRsp::TPubgGetBattleRecordRsp(const TPubgGetBattleRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgGetBattleRecordRsp)
}

void TPubgGetBattleRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgGetBattleRecordRsp::~TPubgGetBattleRecordRsp() {
  // @@protoc_insertion_point(destructor:pb.TPubgGetBattleRecordRsp)
  SharedDtor();
}

void TPubgGetBattleRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPubgGetBattleRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgGetBattleRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgGetBattleRecordRsp_descriptor_;
}

const TPubgGetBattleRecordRsp& TPubgGetBattleRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgGetBattleRecordRsp* TPubgGetBattleRecordRsp::default_instance_ = NULL;

TPubgGetBattleRecordRsp* TPubgGetBattleRecordRsp::New() const {
  return new TPubgGetBattleRecordRsp;
}

void TPubgGetBattleRecordRsp::Clear() {
  battlerecordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgGetBattleRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgGetBattleRecordRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPubgBattleRecord BattleRecordArr = 1;
      case 1: {
        if (tag == 10) {
         parse_BattleRecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battlerecordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_BattleRecordArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgGetBattleRecordRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgGetBattleRecordRsp)
  return false;
#undef DO_
}

void TPubgGetBattleRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgGetBattleRecordRsp)
  // repeated .pb.TPubgBattleRecord BattleRecordArr = 1;
  for (int i = 0; i < this->battlerecordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battlerecordarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgGetBattleRecordRsp)
}

::google::protobuf::uint8* TPubgGetBattleRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgGetBattleRecordRsp)
  // repeated .pb.TPubgBattleRecord BattleRecordArr = 1;
  for (int i = 0; i < this->battlerecordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battlerecordarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgGetBattleRecordRsp)
  return target;
}

int TPubgGetBattleRecordRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TPubgBattleRecord BattleRecordArr = 1;
  total_size += 1 * this->battlerecordarr_size();
  for (int i = 0; i < this->battlerecordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battlerecordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgGetBattleRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgGetBattleRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgGetBattleRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgGetBattleRecordRsp::MergeFrom(const TPubgGetBattleRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  battlerecordarr_.MergeFrom(from.battlerecordarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgGetBattleRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgGetBattleRecordRsp::CopyFrom(const TPubgGetBattleRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgGetBattleRecordRsp::IsInitialized() const {

  return true;
}

void TPubgGetBattleRecordRsp::Swap(TPubgGetBattleRecordRsp* other) {
  if (other != this) {
    battlerecordarr_.Swap(&other->battlerecordarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgGetBattleRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgGetBattleRecordRsp_descriptor_;
  metadata.reflection = TPubgGetBattleRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgGetServerTeamInfoRsp::kServerTeamIdFieldNumber;
#endif  // !_MSC_VER

TPubgGetServerTeamInfoRsp::TPubgGetServerTeamInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgGetServerTeamInfoRsp)
}

void TPubgGetServerTeamInfoRsp::InitAsDefaultInstance() {
}

TPubgGetServerTeamInfoRsp::TPubgGetServerTeamInfoRsp(const TPubgGetServerTeamInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgGetServerTeamInfoRsp)
}

void TPubgGetServerTeamInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  serverteamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgGetServerTeamInfoRsp::~TPubgGetServerTeamInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TPubgGetServerTeamInfoRsp)
  SharedDtor();
}

void TPubgGetServerTeamInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPubgGetServerTeamInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgGetServerTeamInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgGetServerTeamInfoRsp_descriptor_;
}

const TPubgGetServerTeamInfoRsp& TPubgGetServerTeamInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgGetServerTeamInfoRsp* TPubgGetServerTeamInfoRsp::default_instance_ = NULL;

TPubgGetServerTeamInfoRsp* TPubgGetServerTeamInfoRsp::New() const {
  return new TPubgGetServerTeamInfoRsp;
}

void TPubgGetServerTeamInfoRsp::Clear() {
  serverteamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgGetServerTeamInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgGetServerTeamInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ServerTeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverteamid_)));
          set_has_serverteamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgGetServerTeamInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgGetServerTeamInfoRsp)
  return false;
#undef DO_
}

void TPubgGetServerTeamInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgGetServerTeamInfoRsp)
  // optional uint32 ServerTeamId = 1;
  if (has_serverteamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serverteamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgGetServerTeamInfoRsp)
}

::google::protobuf::uint8* TPubgGetServerTeamInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgGetServerTeamInfoRsp)
  // optional uint32 ServerTeamId = 1;
  if (has_serverteamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serverteamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgGetServerTeamInfoRsp)
  return target;
}

int TPubgGetServerTeamInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ServerTeamId = 1;
    if (has_serverteamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverteamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgGetServerTeamInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgGetServerTeamInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgGetServerTeamInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgGetServerTeamInfoRsp::MergeFrom(const TPubgGetServerTeamInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverteamid()) {
      set_serverteamid(from.serverteamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgGetServerTeamInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgGetServerTeamInfoRsp::CopyFrom(const TPubgGetServerTeamInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgGetServerTeamInfoRsp::IsInitialized() const {

  return true;
}

void TPubgGetServerTeamInfoRsp::Swap(TPubgGetServerTeamInfoRsp* other) {
  if (other != this) {
    std::swap(serverteamid_, other->serverteamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgGetServerTeamInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgGetServerTeamInfoRsp_descriptor_;
  metadata.reflection = TPubgGetServerTeamInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgBattleNotify::kBattleFieldNumber;
const int TPubgBattleNotify::kFieldIdFieldNumber;
#endif  // !_MSC_VER

TPubgBattleNotify::TPubgBattleNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgBattleNotify)
}

void TPubgBattleNotify::InitAsDefaultInstance() {
  battle_ = const_cast< ::pb::TPubgBattleRecord*>(&::pb::TPubgBattleRecord::default_instance());
}

TPubgBattleNotify::TPubgBattleNotify(const TPubgBattleNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgBattleNotify)
}

void TPubgBattleNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  battle_ = NULL;
  fieldid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgBattleNotify::~TPubgBattleNotify() {
  // @@protoc_insertion_point(destructor:pb.TPubgBattleNotify)
  SharedDtor();
}

void TPubgBattleNotify::SharedDtor() {
  if (fieldid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fieldid_;
  }
  if (this != default_instance_) {
    delete battle_;
  }
}

void TPubgBattleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgBattleNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgBattleNotify_descriptor_;
}

const TPubgBattleNotify& TPubgBattleNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgBattleNotify* TPubgBattleNotify::default_instance_ = NULL;

TPubgBattleNotify* TPubgBattleNotify::New() const {
  return new TPubgBattleNotify;
}

void TPubgBattleNotify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_battle()) {
      if (battle_ != NULL) battle_->::pb::TPubgBattleRecord::Clear();
    }
    if (has_fieldid()) {
      if (fieldid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fieldid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgBattleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgBattleNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TPubgBattleRecord Battle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_FieldId;
        break;
      }

      // optional string FieldId = 2;
      case 2: {
        if (tag == 18) {
         parse_FieldId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fieldid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fieldid().data(), this->fieldid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fieldid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgBattleNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgBattleNotify)
  return false;
#undef DO_
}

void TPubgBattleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgBattleNotify)
  // optional .pb.TPubgBattleRecord Battle = 1;
  if (has_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battle(), output);
  }

  // optional string FieldId = 2;
  if (has_fieldid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fieldid().data(), this->fieldid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fieldid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fieldid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgBattleNotify)
}

::google::protobuf::uint8* TPubgBattleNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgBattleNotify)
  // optional .pb.TPubgBattleRecord Battle = 1;
  if (has_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battle(), target);
  }

  // optional string FieldId = 2;
  if (has_fieldid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fieldid().data(), this->fieldid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fieldid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fieldid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgBattleNotify)
  return target;
}

int TPubgBattleNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TPubgBattleRecord Battle = 1;
    if (has_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle());
    }

    // optional string FieldId = 2;
    if (has_fieldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fieldid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgBattleNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgBattleNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgBattleNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgBattleNotify::MergeFrom(const TPubgBattleNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle()) {
      mutable_battle()->::pb::TPubgBattleRecord::MergeFrom(from.battle());
    }
    if (from.has_fieldid()) {
      set_fieldid(from.fieldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgBattleNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgBattleNotify::CopyFrom(const TPubgBattleNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgBattleNotify::IsInitialized() const {

  return true;
}

void TPubgBattleNotify::Swap(TPubgBattleNotify* other) {
  if (other != this) {
    std::swap(battle_, other->battle_);
    std::swap(fieldid_, other->fieldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgBattleNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgBattleNotify_descriptor_;
  metadata.reflection = TPubgBattleNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgOutOwner::kLocationFieldNumber;
const int TPubgOutOwner::kOwnerIdFieldNumber;
#endif  // !_MSC_VER

TPubgOutOwner::TPubgOutOwner()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgOutOwner)
}

void TPubgOutOwner::InitAsDefaultInstance() {
  location_ = const_cast< ::pb::TPubgLocation*>(&::pb::TPubgLocation::default_instance());
}

TPubgOutOwner::TPubgOutOwner(const TPubgOutOwner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgOutOwner)
}

void TPubgOutOwner::SharedCtor() {
  _cached_size_ = 0;
  location_ = NULL;
  ownerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgOutOwner::~TPubgOutOwner() {
  // @@protoc_insertion_point(destructor:pb.TPubgOutOwner)
  SharedDtor();
}

void TPubgOutOwner::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
  }
}

void TPubgOutOwner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgOutOwner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgOutOwner_descriptor_;
}

const TPubgOutOwner& TPubgOutOwner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgOutOwner* TPubgOutOwner::default_instance_ = NULL;

TPubgOutOwner* TPubgOutOwner::New() const {
  return new TPubgOutOwner;
}

void TPubgOutOwner::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_location()) {
      if (location_ != NULL) location_->::pb::TPubgLocation::Clear();
    }
    ownerid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgOutOwner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgOutOwner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TPubgLocation Location = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OwnerId;
        break;
      }

      // optional uint64 OwnerId = 2;
      case 2: {
        if (tag == 16) {
         parse_OwnerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgOutOwner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgOutOwner)
  return false;
#undef DO_
}

void TPubgOutOwner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgOutOwner)
  // optional .pb.TPubgLocation Location = 1;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->location(), output);
  }

  // optional uint64 OwnerId = 2;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ownerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgOutOwner)
}

::google::protobuf::uint8* TPubgOutOwner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgOutOwner)
  // optional .pb.TPubgLocation Location = 1;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->location(), target);
  }

  // optional uint64 OwnerId = 2;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ownerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgOutOwner)
  return target;
}

int TPubgOutOwner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TPubgLocation Location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

    // optional uint64 OwnerId = 2;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ownerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgOutOwner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgOutOwner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgOutOwner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgOutOwner::MergeFrom(const TPubgOutOwner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location()) {
      mutable_location()->::pb::TPubgLocation::MergeFrom(from.location());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgOutOwner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgOutOwner::CopyFrom(const TPubgOutOwner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgOutOwner::IsInitialized() const {

  return true;
}

void TPubgOutOwner::Swap(TPubgOutOwner* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgOutOwner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgOutOwner_descriptor_;
  metadata.reflection = TPubgOutOwner_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgOutNotify::kArrOwnerFieldNumber;
#endif  // !_MSC_VER

TPubgOutNotify::TPubgOutNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgOutNotify)
}

void TPubgOutNotify::InitAsDefaultInstance() {
}

TPubgOutNotify::TPubgOutNotify(const TPubgOutNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgOutNotify)
}

void TPubgOutNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgOutNotify::~TPubgOutNotify() {
  // @@protoc_insertion_point(destructor:pb.TPubgOutNotify)
  SharedDtor();
}

void TPubgOutNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPubgOutNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgOutNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgOutNotify_descriptor_;
}

const TPubgOutNotify& TPubgOutNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgOutNotify* TPubgOutNotify::default_instance_ = NULL;

TPubgOutNotify* TPubgOutNotify::New() const {
  return new TPubgOutNotify;
}

void TPubgOutNotify::Clear() {
  arrowner_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgOutNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgOutNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPubgOutOwner ArrOwner = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrOwner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrowner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrOwner;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgOutNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgOutNotify)
  return false;
#undef DO_
}

void TPubgOutNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgOutNotify)
  // repeated .pb.TPubgOutOwner ArrOwner = 1;
  for (int i = 0; i < this->arrowner_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrowner(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgOutNotify)
}

::google::protobuf::uint8* TPubgOutNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgOutNotify)
  // repeated .pb.TPubgOutOwner ArrOwner = 1;
  for (int i = 0; i < this->arrowner_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrowner(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgOutNotify)
  return target;
}

int TPubgOutNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TPubgOutOwner ArrOwner = 1;
  total_size += 1 * this->arrowner_size();
  for (int i = 0; i < this->arrowner_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrowner(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgOutNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgOutNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgOutNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgOutNotify::MergeFrom(const TPubgOutNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrowner_.MergeFrom(from.arrowner_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgOutNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgOutNotify::CopyFrom(const TPubgOutNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgOutNotify::IsInitialized() const {

  return true;
}

void TPubgOutNotify::Swap(TPubgOutNotify* other) {
  if (other != this) {
    arrowner_.Swap(&other->arrowner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgOutNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgOutNotify_descriptor_;
  metadata.reflection = TPubgOutNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPubgWinnerNotify::kChickenEaterInfoFieldNumber;
#endif  // !_MSC_VER

TPubgWinnerNotify::TPubgWinnerNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPubgWinnerNotify)
}

void TPubgWinnerNotify::InitAsDefaultInstance() {
  chickeneaterinfo_ = const_cast< ::pb::TPubgChickenEaterInfo*>(&::pb::TPubgChickenEaterInfo::default_instance());
}

TPubgWinnerNotify::TPubgWinnerNotify(const TPubgWinnerNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPubgWinnerNotify)
}

void TPubgWinnerNotify::SharedCtor() {
  _cached_size_ = 0;
  chickeneaterinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPubgWinnerNotify::~TPubgWinnerNotify() {
  // @@protoc_insertion_point(destructor:pb.TPubgWinnerNotify)
  SharedDtor();
}

void TPubgWinnerNotify::SharedDtor() {
  if (this != default_instance_) {
    delete chickeneaterinfo_;
  }
}

void TPubgWinnerNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPubgWinnerNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPubgWinnerNotify_descriptor_;
}

const TPubgWinnerNotify& TPubgWinnerNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fPubg_2eproto();
  return *default_instance_;
}

TPubgWinnerNotify* TPubgWinnerNotify::default_instance_ = NULL;

TPubgWinnerNotify* TPubgWinnerNotify::New() const {
  return new TPubgWinnerNotify;
}

void TPubgWinnerNotify::Clear() {
  if (has_chickeneaterinfo()) {
    if (chickeneaterinfo_ != NULL) chickeneaterinfo_->::pb::TPubgChickenEaterInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPubgWinnerNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPubgWinnerNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TPubgChickenEaterInfo ChickenEaterInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chickeneaterinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPubgWinnerNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPubgWinnerNotify)
  return false;
#undef DO_
}

void TPubgWinnerNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPubgWinnerNotify)
  // optional .pb.TPubgChickenEaterInfo ChickenEaterInfo = 1;
  if (has_chickeneaterinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chickeneaterinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPubgWinnerNotify)
}

::google::protobuf::uint8* TPubgWinnerNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPubgWinnerNotify)
  // optional .pb.TPubgChickenEaterInfo ChickenEaterInfo = 1;
  if (has_chickeneaterinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chickeneaterinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPubgWinnerNotify)
  return target;
}

int TPubgWinnerNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TPubgChickenEaterInfo ChickenEaterInfo = 1;
    if (has_chickeneaterinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chickeneaterinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPubgWinnerNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPubgWinnerNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPubgWinnerNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPubgWinnerNotify::MergeFrom(const TPubgWinnerNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chickeneaterinfo()) {
      mutable_chickeneaterinfo()->::pb::TPubgChickenEaterInfo::MergeFrom(from.chickeneaterinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPubgWinnerNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPubgWinnerNotify::CopyFrom(const TPubgWinnerNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPubgWinnerNotify::IsInitialized() const {

  return true;
}

void TPubgWinnerNotify::Swap(TPubgWinnerNotify* other) {
  if (other != this) {
    std::swap(chickeneaterinfo_, other->chickeneaterinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPubgWinnerNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPubgWinnerNotify_descriptor_;
  metadata.reflection = TPubgWinnerNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
