// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CashCow.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/CashCow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TCashCowGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCashCowGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCashCowDivineRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCashCowDivineRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCashCowRollReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCashCowRollReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCashCowRollRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCashCowRollRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fCashCow_2eproto() {
  protobuf_AddDesc_net_2fCashCow_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/CashCow.proto");
  GOOGLE_CHECK(file != NULL);
  TCashCowGetInfoRsp_descriptor_ = file->message_type(0);
  static const int TCashCowGetInfoRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCashCowGetInfoRsp, sysdivination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCashCowGetInfoRsp, divination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCashCowGetInfoRsp, rollnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCashCowGetInfoRsp, freenum_),
  };
  TCashCowGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCashCowGetInfoRsp_descriptor_,
      TCashCowGetInfoRsp::default_instance_,
      TCashCowGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCashCowGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCashCowGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCashCowGetInfoRsp));
  TCashCowDivineRsp_descriptor_ = file->message_type(1);
  static const int TCashCowDivineRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCashCowDivineRsp, divination_),
  };
  TCashCowDivineRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCashCowDivineRsp_descriptor_,
      TCashCowDivineRsp::default_instance_,
      TCashCowDivineRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCashCowDivineRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCashCowDivineRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCashCowDivineRsp));
  TCashCowRollReq_descriptor_ = file->message_type(2);
  static const int TCashCowRollReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCashCowRollReq, rolltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCashCowRollReq, rollnum_),
  };
  TCashCowRollReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCashCowRollReq_descriptor_,
      TCashCowRollReq::default_instance_,
      TCashCowRollReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCashCowRollReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCashCowRollReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCashCowRollReq));
  TCashCowRollRsp_descriptor_ = file->message_type(3);
  static const int TCashCowRollRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCashCowRollRsp, critratioarr_),
  };
  TCashCowRollRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCashCowRollRsp_descriptor_,
      TCashCowRollRsp::default_instance_,
      TCashCowRollRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCashCowRollRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCashCowRollRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCashCowRollRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fCashCow_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCashCowGetInfoRsp_descriptor_, &TCashCowGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCashCowDivineRsp_descriptor_, &TCashCowDivineRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCashCowRollReq_descriptor_, &TCashCowRollReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCashCowRollRsp_descriptor_, &TCashCowRollRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fCashCow_2eproto() {
  delete TCashCowGetInfoRsp::default_instance_;
  delete TCashCowGetInfoRsp_reflection_;
  delete TCashCowDivineRsp::default_instance_;
  delete TCashCowDivineRsp_reflection_;
  delete TCashCowRollReq::default_instance_;
  delete TCashCowRollReq_reflection_;
  delete TCashCowRollRsp::default_instance_;
  delete TCashCowRollRsp_reflection_;
}

void protobuf_AddDesc_net_2fCashCow_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021net/CashCow.proto\022\002pb\"a\n\022TCashCowGetIn"
    "foRsp\022\025\n\rSysDivination\030\001 \001(\r\022\022\n\nDivinati"
    "on\030\002 \001(\r\022\017\n\007RollNum\030\003 \001(\r\022\017\n\007FreeNum\030\004 \001"
    "(\r\"\'\n\021TCashCowDivineRsp\022\022\n\nDivination\030\001 "
    "\001(\r\"4\n\017TCashCowRollReq\022\020\n\010RollType\030\001 \001(\r"
    "\022\017\n\007RollNum\030\002 \001(\r\"\'\n\017TCashCowRollRsp\022\024\n\014"
    "CritRatioArr\030\001 \003(\r", 258);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/CashCow.proto", &protobuf_RegisterTypes);
  TCashCowGetInfoRsp::default_instance_ = new TCashCowGetInfoRsp();
  TCashCowDivineRsp::default_instance_ = new TCashCowDivineRsp();
  TCashCowRollReq::default_instance_ = new TCashCowRollReq();
  TCashCowRollRsp::default_instance_ = new TCashCowRollRsp();
  TCashCowGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TCashCowDivineRsp::default_instance_->InitAsDefaultInstance();
  TCashCowRollReq::default_instance_->InitAsDefaultInstance();
  TCashCowRollRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fCashCow_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fCashCow_2eproto {
  StaticDescriptorInitializer_net_2fCashCow_2eproto() {
    protobuf_AddDesc_net_2fCashCow_2eproto();
  }
} static_descriptor_initializer_net_2fCashCow_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TCashCowGetInfoRsp::kSysDivinationFieldNumber;
const int TCashCowGetInfoRsp::kDivinationFieldNumber;
const int TCashCowGetInfoRsp::kRollNumFieldNumber;
const int TCashCowGetInfoRsp::kFreeNumFieldNumber;
#endif  // !_MSC_VER

TCashCowGetInfoRsp::TCashCowGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCashCowGetInfoRsp)
}

void TCashCowGetInfoRsp::InitAsDefaultInstance() {
}

TCashCowGetInfoRsp::TCashCowGetInfoRsp(const TCashCowGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCashCowGetInfoRsp)
}

void TCashCowGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  sysdivination_ = 0u;
  divination_ = 0u;
  rollnum_ = 0u;
  freenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCashCowGetInfoRsp::~TCashCowGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TCashCowGetInfoRsp)
  SharedDtor();
}

void TCashCowGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCashCowGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCashCowGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCashCowGetInfoRsp_descriptor_;
}

const TCashCowGetInfoRsp& TCashCowGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCashCow_2eproto();
  return *default_instance_;
}

TCashCowGetInfoRsp* TCashCowGetInfoRsp::default_instance_ = NULL;

TCashCowGetInfoRsp* TCashCowGetInfoRsp::New() const {
  return new TCashCowGetInfoRsp;
}

void TCashCowGetInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCashCowGetInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sysdivination_, freenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCashCowGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCashCowGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SysDivination = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sysdivination_)));
          set_has_sysdivination();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Divination;
        break;
      }

      // optional uint32 Divination = 2;
      case 2: {
        if (tag == 16) {
         parse_Divination:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &divination_)));
          set_has_divination();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RollNum;
        break;
      }

      // optional uint32 RollNum = 3;
      case 3: {
        if (tag == 24) {
         parse_RollNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rollnum_)));
          set_has_rollnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_FreeNum;
        break;
      }

      // optional uint32 FreeNum = 4;
      case 4: {
        if (tag == 32) {
         parse_FreeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freenum_)));
          set_has_freenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCashCowGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCashCowGetInfoRsp)
  return false;
#undef DO_
}

void TCashCowGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCashCowGetInfoRsp)
  // optional uint32 SysDivination = 1;
  if (has_sysdivination()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sysdivination(), output);
  }

  // optional uint32 Divination = 2;
  if (has_divination()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->divination(), output);
  }

  // optional uint32 RollNum = 3;
  if (has_rollnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rollnum(), output);
  }

  // optional uint32 FreeNum = 4;
  if (has_freenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->freenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCashCowGetInfoRsp)
}

::google::protobuf::uint8* TCashCowGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCashCowGetInfoRsp)
  // optional uint32 SysDivination = 1;
  if (has_sysdivination()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sysdivination(), target);
  }

  // optional uint32 Divination = 2;
  if (has_divination()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->divination(), target);
  }

  // optional uint32 RollNum = 3;
  if (has_rollnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rollnum(), target);
  }

  // optional uint32 FreeNum = 4;
  if (has_freenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->freenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCashCowGetInfoRsp)
  return target;
}

int TCashCowGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SysDivination = 1;
    if (has_sysdivination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sysdivination());
    }

    // optional uint32 Divination = 2;
    if (has_divination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->divination());
    }

    // optional uint32 RollNum = 3;
    if (has_rollnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rollnum());
    }

    // optional uint32 FreeNum = 4;
    if (has_freenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCashCowGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCashCowGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCashCowGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCashCowGetInfoRsp::MergeFrom(const TCashCowGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sysdivination()) {
      set_sysdivination(from.sysdivination());
    }
    if (from.has_divination()) {
      set_divination(from.divination());
    }
    if (from.has_rollnum()) {
      set_rollnum(from.rollnum());
    }
    if (from.has_freenum()) {
      set_freenum(from.freenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCashCowGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCashCowGetInfoRsp::CopyFrom(const TCashCowGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCashCowGetInfoRsp::IsInitialized() const {

  return true;
}

void TCashCowGetInfoRsp::Swap(TCashCowGetInfoRsp* other) {
  if (other != this) {
    std::swap(sysdivination_, other->sysdivination_);
    std::swap(divination_, other->divination_);
    std::swap(rollnum_, other->rollnum_);
    std::swap(freenum_, other->freenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCashCowGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCashCowGetInfoRsp_descriptor_;
  metadata.reflection = TCashCowGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCashCowDivineRsp::kDivinationFieldNumber;
#endif  // !_MSC_VER

TCashCowDivineRsp::TCashCowDivineRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCashCowDivineRsp)
}

void TCashCowDivineRsp::InitAsDefaultInstance() {
}

TCashCowDivineRsp::TCashCowDivineRsp(const TCashCowDivineRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCashCowDivineRsp)
}

void TCashCowDivineRsp::SharedCtor() {
  _cached_size_ = 0;
  divination_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCashCowDivineRsp::~TCashCowDivineRsp() {
  // @@protoc_insertion_point(destructor:pb.TCashCowDivineRsp)
  SharedDtor();
}

void TCashCowDivineRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCashCowDivineRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCashCowDivineRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCashCowDivineRsp_descriptor_;
}

const TCashCowDivineRsp& TCashCowDivineRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCashCow_2eproto();
  return *default_instance_;
}

TCashCowDivineRsp* TCashCowDivineRsp::default_instance_ = NULL;

TCashCowDivineRsp* TCashCowDivineRsp::New() const {
  return new TCashCowDivineRsp;
}

void TCashCowDivineRsp::Clear() {
  divination_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCashCowDivineRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCashCowDivineRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Divination = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &divination_)));
          set_has_divination();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCashCowDivineRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCashCowDivineRsp)
  return false;
#undef DO_
}

void TCashCowDivineRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCashCowDivineRsp)
  // optional uint32 Divination = 1;
  if (has_divination()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->divination(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCashCowDivineRsp)
}

::google::protobuf::uint8* TCashCowDivineRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCashCowDivineRsp)
  // optional uint32 Divination = 1;
  if (has_divination()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->divination(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCashCowDivineRsp)
  return target;
}

int TCashCowDivineRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Divination = 1;
    if (has_divination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->divination());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCashCowDivineRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCashCowDivineRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCashCowDivineRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCashCowDivineRsp::MergeFrom(const TCashCowDivineRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_divination()) {
      set_divination(from.divination());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCashCowDivineRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCashCowDivineRsp::CopyFrom(const TCashCowDivineRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCashCowDivineRsp::IsInitialized() const {

  return true;
}

void TCashCowDivineRsp::Swap(TCashCowDivineRsp* other) {
  if (other != this) {
    std::swap(divination_, other->divination_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCashCowDivineRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCashCowDivineRsp_descriptor_;
  metadata.reflection = TCashCowDivineRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCashCowRollReq::kRollTypeFieldNumber;
const int TCashCowRollReq::kRollNumFieldNumber;
#endif  // !_MSC_VER

TCashCowRollReq::TCashCowRollReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCashCowRollReq)
}

void TCashCowRollReq::InitAsDefaultInstance() {
}

TCashCowRollReq::TCashCowRollReq(const TCashCowRollReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCashCowRollReq)
}

void TCashCowRollReq::SharedCtor() {
  _cached_size_ = 0;
  rolltype_ = 0u;
  rollnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCashCowRollReq::~TCashCowRollReq() {
  // @@protoc_insertion_point(destructor:pb.TCashCowRollReq)
  SharedDtor();
}

void TCashCowRollReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCashCowRollReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCashCowRollReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCashCowRollReq_descriptor_;
}

const TCashCowRollReq& TCashCowRollReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCashCow_2eproto();
  return *default_instance_;
}

TCashCowRollReq* TCashCowRollReq::default_instance_ = NULL;

TCashCowRollReq* TCashCowRollReq::New() const {
  return new TCashCowRollReq;
}

void TCashCowRollReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCashCowRollReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rolltype_, rollnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCashCowRollReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCashCowRollReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RollType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rolltype_)));
          set_has_rolltype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RollNum;
        break;
      }

      // optional uint32 RollNum = 2;
      case 2: {
        if (tag == 16) {
         parse_RollNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rollnum_)));
          set_has_rollnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCashCowRollReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCashCowRollReq)
  return false;
#undef DO_
}

void TCashCowRollReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCashCowRollReq)
  // optional uint32 RollType = 1;
  if (has_rolltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rolltype(), output);
  }

  // optional uint32 RollNum = 2;
  if (has_rollnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rollnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCashCowRollReq)
}

::google::protobuf::uint8* TCashCowRollReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCashCowRollReq)
  // optional uint32 RollType = 1;
  if (has_rolltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rolltype(), target);
  }

  // optional uint32 RollNum = 2;
  if (has_rollnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rollnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCashCowRollReq)
  return target;
}

int TCashCowRollReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RollType = 1;
    if (has_rolltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rolltype());
    }

    // optional uint32 RollNum = 2;
    if (has_rollnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rollnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCashCowRollReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCashCowRollReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCashCowRollReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCashCowRollReq::MergeFrom(const TCashCowRollReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolltype()) {
      set_rolltype(from.rolltype());
    }
    if (from.has_rollnum()) {
      set_rollnum(from.rollnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCashCowRollReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCashCowRollReq::CopyFrom(const TCashCowRollReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCashCowRollReq::IsInitialized() const {

  return true;
}

void TCashCowRollReq::Swap(TCashCowRollReq* other) {
  if (other != this) {
    std::swap(rolltype_, other->rolltype_);
    std::swap(rollnum_, other->rollnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCashCowRollReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCashCowRollReq_descriptor_;
  metadata.reflection = TCashCowRollReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCashCowRollRsp::kCritRatioArrFieldNumber;
#endif  // !_MSC_VER

TCashCowRollRsp::TCashCowRollRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCashCowRollRsp)
}

void TCashCowRollRsp::InitAsDefaultInstance() {
}

TCashCowRollRsp::TCashCowRollRsp(const TCashCowRollRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCashCowRollRsp)
}

void TCashCowRollRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCashCowRollRsp::~TCashCowRollRsp() {
  // @@protoc_insertion_point(destructor:pb.TCashCowRollRsp)
  SharedDtor();
}

void TCashCowRollRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCashCowRollRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCashCowRollRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCashCowRollRsp_descriptor_;
}

const TCashCowRollRsp& TCashCowRollRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCashCow_2eproto();
  return *default_instance_;
}

TCashCowRollRsp* TCashCowRollRsp::default_instance_ = NULL;

TCashCowRollRsp* TCashCowRollRsp::New() const {
  return new TCashCowRollRsp;
}

void TCashCowRollRsp::Clear() {
  critratioarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCashCowRollRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCashCowRollRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 CritRatioArr = 1;
      case 1: {
        if (tag == 8) {
         parse_CritRatioArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_critratioarr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_critratioarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_CritRatioArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCashCowRollRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCashCowRollRsp)
  return false;
#undef DO_
}

void TCashCowRollRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCashCowRollRsp)
  // repeated uint32 CritRatioArr = 1;
  for (int i = 0; i < this->critratioarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->critratioarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCashCowRollRsp)
}

::google::protobuf::uint8* TCashCowRollRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCashCowRollRsp)
  // repeated uint32 CritRatioArr = 1;
  for (int i = 0; i < this->critratioarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->critratioarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCashCowRollRsp)
  return target;
}

int TCashCowRollRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 CritRatioArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->critratioarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->critratioarr(i));
    }
    total_size += 1 * this->critratioarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCashCowRollRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCashCowRollRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCashCowRollRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCashCowRollRsp::MergeFrom(const TCashCowRollRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  critratioarr_.MergeFrom(from.critratioarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCashCowRollRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCashCowRollRsp::CopyFrom(const TCashCowRollRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCashCowRollRsp::IsInitialized() const {

  return true;
}

void TCashCowRollRsp::Swap(TCashCowRollRsp* other) {
  if (other != this) {
    critratioarr_.Swap(&other->critratioarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCashCowRollRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCashCowRollRsp_descriptor_;
  metadata.reflection = TCashCowRollRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
