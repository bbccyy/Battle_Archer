// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Title.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Title.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TTitleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTitleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTitleGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTitleGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTitleActivateTitleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTitleActivateTitleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTitleSetTitleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTitleSetTitleReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fTitle_2eproto() {
  protobuf_AddDesc_net_2fTitle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Title.proto");
  GOOGLE_CHECK(file != NULL);
  TTitleInfo_descriptor_ = file->message_type(0);
  static const int TTitleInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitleInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitleInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitleInfo, endtime_),
  };
  TTitleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTitleInfo_descriptor_,
      TTitleInfo::default_instance_,
      TTitleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTitleInfo));
  TTitleGetInfoRsp_descriptor_ = file->message_type(1);
  static const int TTitleGetInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitleGetInfoRsp, arrtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitleGetInfoRsp, handbook_),
  };
  TTitleGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTitleGetInfoRsp_descriptor_,
      TTitleGetInfoRsp::default_instance_,
      TTitleGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitleGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitleGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTitleGetInfoRsp));
  TTitleActivateTitleReq_descriptor_ = file->message_type(2);
  static const int TTitleActivateTitleReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitleActivateTitleReq, id_),
  };
  TTitleActivateTitleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTitleActivateTitleReq_descriptor_,
      TTitleActivateTitleReq::default_instance_,
      TTitleActivateTitleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitleActivateTitleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitleActivateTitleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTitleActivateTitleReq));
  TTitleSetTitleReq_descriptor_ = file->message_type(3);
  static const int TTitleSetTitleReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitleSetTitleReq, id_),
  };
  TTitleSetTitleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTitleSetTitleReq_descriptor_,
      TTitleSetTitleReq::default_instance_,
      TTitleSetTitleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitleSetTitleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTitleSetTitleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTitleSetTitleReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fTitle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTitleInfo_descriptor_, &TTitleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTitleGetInfoRsp_descriptor_, &TTitleGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTitleActivateTitleReq_descriptor_, &TTitleActivateTitleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTitleSetTitleReq_descriptor_, &TTitleSetTitleReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fTitle_2eproto() {
  delete TTitleInfo::default_instance_;
  delete TTitleInfo_reflection_;
  delete TTitleGetInfoRsp::default_instance_;
  delete TTitleGetInfoRsp_reflection_;
  delete TTitleActivateTitleReq::default_instance_;
  delete TTitleActivateTitleReq_reflection_;
  delete TTitleSetTitleReq::default_instance_;
  delete TTitleSetTitleReq_reflection_;
}

void protobuf_AddDesc_net_2fTitle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017net/Title.proto\022\002pb\"9\n\nTTitleInfo\022\n\n\002I"
    "d\030\001 \001(\r\022\016\n\006Status\030\002 \001(\r\022\017\n\007EndTime\030\003 \001(\004"
    "\"F\n\020TTitleGetInfoRsp\022 \n\010ArrTitle\030\001 \003(\0132\016"
    ".pb.TTitleInfo\022\020\n\010HandBook\030\002 \003(\r\"$\n\026TTit"
    "leActivateTitleReq\022\n\n\002Id\030\001 \001(\r\"\037\n\021TTitle"
    "SetTitleReq\022\n\n\002Id\030\001 \001(\r", 223);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Title.proto", &protobuf_RegisterTypes);
  TTitleInfo::default_instance_ = new TTitleInfo();
  TTitleGetInfoRsp::default_instance_ = new TTitleGetInfoRsp();
  TTitleActivateTitleReq::default_instance_ = new TTitleActivateTitleReq();
  TTitleSetTitleReq::default_instance_ = new TTitleSetTitleReq();
  TTitleInfo::default_instance_->InitAsDefaultInstance();
  TTitleGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TTitleActivateTitleReq::default_instance_->InitAsDefaultInstance();
  TTitleSetTitleReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fTitle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fTitle_2eproto {
  StaticDescriptorInitializer_net_2fTitle_2eproto() {
    protobuf_AddDesc_net_2fTitle_2eproto();
  }
} static_descriptor_initializer_net_2fTitle_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TTitleInfo::kIdFieldNumber;
const int TTitleInfo::kStatusFieldNumber;
const int TTitleInfo::kEndTimeFieldNumber;
#endif  // !_MSC_VER

TTitleInfo::TTitleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTitleInfo)
}

void TTitleInfo::InitAsDefaultInstance() {
}

TTitleInfo::TTitleInfo(const TTitleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTitleInfo)
}

void TTitleInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  status_ = 0u;
  endtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTitleInfo::~TTitleInfo() {
  // @@protoc_insertion_point(destructor:pb.TTitleInfo)
  SharedDtor();
}

void TTitleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTitleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTitleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTitleInfo_descriptor_;
}

const TTitleInfo& TTitleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitle_2eproto();
  return *default_instance_;
}

TTitleInfo* TTitleInfo::default_instance_ = NULL;

TTitleInfo* TTitleInfo::New() const {
  return new TTitleInfo;
}

void TTitleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTitleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, endtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTitleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTitleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }

      // optional uint32 Status = 2;
      case 2: {
        if (tag == 16) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EndTime;
        break;
      }

      // optional uint64 EndTime = 3;
      case 3: {
        if (tag == 24) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTitleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTitleInfo)
  return false;
#undef DO_
}

void TTitleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTitleInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 Status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTitleInfo)
}

::google::protobuf::uint8* TTitleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTitleInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 Status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTitleInfo)
  return target;
}

int TTitleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint64 EndTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTitleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTitleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTitleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTitleInfo::MergeFrom(const TTitleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTitleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTitleInfo::CopyFrom(const TTitleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTitleInfo::IsInitialized() const {

  return true;
}

void TTitleInfo::Swap(TTitleInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTitleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTitleInfo_descriptor_;
  metadata.reflection = TTitleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTitleGetInfoRsp::kArrTitleFieldNumber;
const int TTitleGetInfoRsp::kHandBookFieldNumber;
#endif  // !_MSC_VER

TTitleGetInfoRsp::TTitleGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTitleGetInfoRsp)
}

void TTitleGetInfoRsp::InitAsDefaultInstance() {
}

TTitleGetInfoRsp::TTitleGetInfoRsp(const TTitleGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTitleGetInfoRsp)
}

void TTitleGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTitleGetInfoRsp::~TTitleGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TTitleGetInfoRsp)
  SharedDtor();
}

void TTitleGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTitleGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTitleGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTitleGetInfoRsp_descriptor_;
}

const TTitleGetInfoRsp& TTitleGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitle_2eproto();
  return *default_instance_;
}

TTitleGetInfoRsp* TTitleGetInfoRsp::default_instance_ = NULL;

TTitleGetInfoRsp* TTitleGetInfoRsp::New() const {
  return new TTitleGetInfoRsp;
}

void TTitleGetInfoRsp::Clear() {
  arrtitle_.Clear();
  handbook_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTitleGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTitleGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TTitleInfo ArrTitle = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtitle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrTitle;
        if (input->ExpectTag(16)) goto parse_HandBook;
        break;
      }

      // repeated uint32 HandBook = 2;
      case 2: {
        if (tag == 16) {
         parse_HandBook:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_handbook())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_handbook())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HandBook;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTitleGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTitleGetInfoRsp)
  return false;
#undef DO_
}

void TTitleGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTitleGetInfoRsp)
  // repeated .pb.TTitleInfo ArrTitle = 1;
  for (int i = 0; i < this->arrtitle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrtitle(i), output);
  }

  // repeated uint32 HandBook = 2;
  for (int i = 0; i < this->handbook_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->handbook(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTitleGetInfoRsp)
}

::google::protobuf::uint8* TTitleGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTitleGetInfoRsp)
  // repeated .pb.TTitleInfo ArrTitle = 1;
  for (int i = 0; i < this->arrtitle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrtitle(i), target);
  }

  // repeated uint32 HandBook = 2;
  for (int i = 0; i < this->handbook_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->handbook(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTitleGetInfoRsp)
  return target;
}

int TTitleGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TTitleInfo ArrTitle = 1;
  total_size += 1 * this->arrtitle_size();
  for (int i = 0; i < this->arrtitle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtitle(i));
  }

  // repeated uint32 HandBook = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->handbook_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->handbook(i));
    }
    total_size += 1 * this->handbook_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTitleGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTitleGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTitleGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTitleGetInfoRsp::MergeFrom(const TTitleGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrtitle_.MergeFrom(from.arrtitle_);
  handbook_.MergeFrom(from.handbook_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTitleGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTitleGetInfoRsp::CopyFrom(const TTitleGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTitleGetInfoRsp::IsInitialized() const {

  return true;
}

void TTitleGetInfoRsp::Swap(TTitleGetInfoRsp* other) {
  if (other != this) {
    arrtitle_.Swap(&other->arrtitle_);
    handbook_.Swap(&other->handbook_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTitleGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTitleGetInfoRsp_descriptor_;
  metadata.reflection = TTitleGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTitleActivateTitleReq::kIdFieldNumber;
#endif  // !_MSC_VER

TTitleActivateTitleReq::TTitleActivateTitleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTitleActivateTitleReq)
}

void TTitleActivateTitleReq::InitAsDefaultInstance() {
}

TTitleActivateTitleReq::TTitleActivateTitleReq(const TTitleActivateTitleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTitleActivateTitleReq)
}

void TTitleActivateTitleReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTitleActivateTitleReq::~TTitleActivateTitleReq() {
  // @@protoc_insertion_point(destructor:pb.TTitleActivateTitleReq)
  SharedDtor();
}

void TTitleActivateTitleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTitleActivateTitleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTitleActivateTitleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTitleActivateTitleReq_descriptor_;
}

const TTitleActivateTitleReq& TTitleActivateTitleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitle_2eproto();
  return *default_instance_;
}

TTitleActivateTitleReq* TTitleActivateTitleReq::default_instance_ = NULL;

TTitleActivateTitleReq* TTitleActivateTitleReq::New() const {
  return new TTitleActivateTitleReq;
}

void TTitleActivateTitleReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTitleActivateTitleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTitleActivateTitleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTitleActivateTitleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTitleActivateTitleReq)
  return false;
#undef DO_
}

void TTitleActivateTitleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTitleActivateTitleReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTitleActivateTitleReq)
}

::google::protobuf::uint8* TTitleActivateTitleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTitleActivateTitleReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTitleActivateTitleReq)
  return target;
}

int TTitleActivateTitleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTitleActivateTitleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTitleActivateTitleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTitleActivateTitleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTitleActivateTitleReq::MergeFrom(const TTitleActivateTitleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTitleActivateTitleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTitleActivateTitleReq::CopyFrom(const TTitleActivateTitleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTitleActivateTitleReq::IsInitialized() const {

  return true;
}

void TTitleActivateTitleReq::Swap(TTitleActivateTitleReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTitleActivateTitleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTitleActivateTitleReq_descriptor_;
  metadata.reflection = TTitleActivateTitleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTitleSetTitleReq::kIdFieldNumber;
#endif  // !_MSC_VER

TTitleSetTitleReq::TTitleSetTitleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTitleSetTitleReq)
}

void TTitleSetTitleReq::InitAsDefaultInstance() {
}

TTitleSetTitleReq::TTitleSetTitleReq(const TTitleSetTitleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTitleSetTitleReq)
}

void TTitleSetTitleReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTitleSetTitleReq::~TTitleSetTitleReq() {
  // @@protoc_insertion_point(destructor:pb.TTitleSetTitleReq)
  SharedDtor();
}

void TTitleSetTitleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTitleSetTitleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTitleSetTitleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTitleSetTitleReq_descriptor_;
}

const TTitleSetTitleReq& TTitleSetTitleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTitle_2eproto();
  return *default_instance_;
}

TTitleSetTitleReq* TTitleSetTitleReq::default_instance_ = NULL;

TTitleSetTitleReq* TTitleSetTitleReq::New() const {
  return new TTitleSetTitleReq;
}

void TTitleSetTitleReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTitleSetTitleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTitleSetTitleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTitleSetTitleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTitleSetTitleReq)
  return false;
#undef DO_
}

void TTitleSetTitleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTitleSetTitleReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTitleSetTitleReq)
}

::google::protobuf::uint8* TTitleSetTitleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTitleSetTitleReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTitleSetTitleReq)
  return target;
}

int TTitleSetTitleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTitleSetTitleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTitleSetTitleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTitleSetTitleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTitleSetTitleReq::MergeFrom(const TTitleSetTitleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTitleSetTitleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTitleSetTitleReq::CopyFrom(const TTitleSetTitleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTitleSetTitleReq::IsInitialized() const {

  return true;
}

void TTitleSetTitleReq::Swap(TTitleSetTitleReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTitleSetTitleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTitleSetTitleReq_descriptor_;
  metadata.reflection = TTitleSetTitleReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
