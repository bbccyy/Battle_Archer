// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/BuffDataBase2.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/BuffDataBase2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* BuffModAttackSpeedConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModAttackSpeedConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModNoMoveConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModNoMoveConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModNoNormalSkillConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModNoNormalSkillConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModNoSkillConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModNoSkillConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModDizzinessConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModDizzinessConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModFreezeConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModFreezeConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModCharmedConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModCharmedConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModChaosConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModChaosConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModRandomMoveConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModRandomMoveConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModTDMoniterDefenderStateConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModTDMoniterDefenderStateConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModTDNoBeanConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModTDNoBeanConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModChangeDirConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModChangeDirConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModFearConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModFearConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModTDRepeatSendBeanConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModTDRepeatSendBeanConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModTDRepeatCheckBeanConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModTDRepeatCheckBeanConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModIgnoreShieldConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModIgnoreShieldConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModNoSuckBloodConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModNoSuckBloodConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBuffOnStack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBuffOnStack_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModBuffOnStackConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModBuffOnStackConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModRevertStateOnEndConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModRevertStateOnEndConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModChangeCastRangeConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModChangeCastRangeConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModNoReviveConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModNoReviveConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModChangeSummonedAIConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModChangeSummonedAIConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModSetMaxLoseHPConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModSetMaxLoseHPConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModAdjustReflectedDamageConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModAdjustReflectedDamageConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModActiveUIEffectConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModActiveUIEffectConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModAdjustBuffHitRateConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModAdjustBuffHitRateConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModLimitByMaxHpRateConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModLimitByMaxHpRateConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffModBattleArcherModifyConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffModBattleArcherModifyConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto() {
  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/BuffDataBase2.proto");
  GOOGLE_CHECK(file != NULL);
  BuffModAttackSpeedConfig_descriptor_ = file->message_type(0);
  static const int BuffModAttackSpeedConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAttackSpeedConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAttackSpeedConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAttackSpeedConfig, percentparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAttackSpeedConfig, percentgrowth_),
  };
  BuffModAttackSpeedConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModAttackSpeedConfig_descriptor_,
      BuffModAttackSpeedConfig::default_instance_,
      BuffModAttackSpeedConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAttackSpeedConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAttackSpeedConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModAttackSpeedConfig));
  BuffModNoMoveConfig_descriptor_ = file->message_type(1);
  static const int BuffModNoMoveConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoMoveConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoMoveConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoMoveConfig, endwhendamaged_),
  };
  BuffModNoMoveConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModNoMoveConfig_descriptor_,
      BuffModNoMoveConfig::default_instance_,
      BuffModNoMoveConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoMoveConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoMoveConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModNoMoveConfig));
  BuffModNoNormalSkillConfig_descriptor_ = file->message_type(2);
  static const int BuffModNoNormalSkillConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoNormalSkillConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoNormalSkillConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoNormalSkillConfig, endwhendamaged_),
  };
  BuffModNoNormalSkillConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModNoNormalSkillConfig_descriptor_,
      BuffModNoNormalSkillConfig::default_instance_,
      BuffModNoNormalSkillConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoNormalSkillConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoNormalSkillConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModNoNormalSkillConfig));
  BuffModNoSkillConfig_descriptor_ = file->message_type(3);
  static const int BuffModNoSkillConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoSkillConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoSkillConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoSkillConfig, endwhendamaged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoSkillConfig, type_),
  };
  BuffModNoSkillConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModNoSkillConfig_descriptor_,
      BuffModNoSkillConfig::default_instance_,
      BuffModNoSkillConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoSkillConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoSkillConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModNoSkillConfig));
  BuffModDizzinessConfig_descriptor_ = file->message_type(4);
  static const int BuffModDizzinessConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDizzinessConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDizzinessConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDizzinessConfig, endwhendamaged_),
  };
  BuffModDizzinessConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModDizzinessConfig_descriptor_,
      BuffModDizzinessConfig::default_instance_,
      BuffModDizzinessConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDizzinessConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModDizzinessConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModDizzinessConfig));
  BuffModFreezeConfig_descriptor_ = file->message_type(5);
  static const int BuffModFreezeConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModFreezeConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModFreezeConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModFreezeConfig, endwhendamaged_),
  };
  BuffModFreezeConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModFreezeConfig_descriptor_,
      BuffModFreezeConfig::default_instance_,
      BuffModFreezeConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModFreezeConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModFreezeConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModFreezeConfig));
  BuffModCharmedConfig_descriptor_ = file->message_type(6);
  static const int BuffModCharmedConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModCharmedConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModCharmedConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModCharmedConfig, endwhendamaged_),
  };
  BuffModCharmedConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModCharmedConfig_descriptor_,
      BuffModCharmedConfig::default_instance_,
      BuffModCharmedConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModCharmedConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModCharmedConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModCharmedConfig));
  BuffModChaosConfig_descriptor_ = file->message_type(7);
  static const int BuffModChaosConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModChaosConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModChaosConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModChaosConfig, endwhendamaged_),
  };
  BuffModChaosConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModChaosConfig_descriptor_,
      BuffModChaosConfig::default_instance_,
      BuffModChaosConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModChaosConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModChaosConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModChaosConfig));
  BuffModRandomMoveConfig_descriptor_ = file->message_type(8);
  static const int BuffModRandomMoveConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRandomMoveConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRandomMoveConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRandomMoveConfig, movearearadius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRandomMoveConfig, endwhendamaged_),
  };
  BuffModRandomMoveConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModRandomMoveConfig_descriptor_,
      BuffModRandomMoveConfig::default_instance_,
      BuffModRandomMoveConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRandomMoveConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRandomMoveConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModRandomMoveConfig));
  BuffModTDMoniterDefenderStateConfig_descriptor_ = file->message_type(9);
  static const int BuffModTDMoniterDefenderStateConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModTDMoniterDefenderStateConfig, active_),
  };
  BuffModTDMoniterDefenderStateConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModTDMoniterDefenderStateConfig_descriptor_,
      BuffModTDMoniterDefenderStateConfig::default_instance_,
      BuffModTDMoniterDefenderStateConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModTDMoniterDefenderStateConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModTDMoniterDefenderStateConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModTDMoniterDefenderStateConfig));
  BuffModTDNoBeanConfig_descriptor_ = file->message_type(10);
  static const int BuffModTDNoBeanConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModTDNoBeanConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModTDNoBeanConfig, delaytime_),
  };
  BuffModTDNoBeanConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModTDNoBeanConfig_descriptor_,
      BuffModTDNoBeanConfig::default_instance_,
      BuffModTDNoBeanConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModTDNoBeanConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModTDNoBeanConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModTDNoBeanConfig));
  BuffModChangeDirConfig_descriptor_ = file->message_type(11);
  static const int BuffModChangeDirConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModChangeDirConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModChangeDirConfig, armyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModChangeDirConfig, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModChangeDirConfig, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModChangeDirConfig, delaytime_),
  };
  BuffModChangeDirConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModChangeDirConfig_descriptor_,
      BuffModChangeDirConfig::default_instance_,
      BuffModChangeDirConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModChangeDirConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModChangeDirConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModChangeDirConfig));
  BuffModFearConfig_descriptor_ = file->message_type(12);
  static const int BuffModFearConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModFearConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModFearConfig, type_),
  };
  BuffModFearConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModFearConfig_descriptor_,
      BuffModFearConfig::default_instance_,
      BuffModFearConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModFearConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModFearConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModFearConfig));
  BuffModTDRepeatSendBeanConfig_descriptor_ = file->message_type(13);
  static const int BuffModTDRepeatSendBeanConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModTDRepeatSendBeanConfig, active_),
  };
  BuffModTDRepeatSendBeanConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModTDRepeatSendBeanConfig_descriptor_,
      BuffModTDRepeatSendBeanConfig::default_instance_,
      BuffModTDRepeatSendBeanConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModTDRepeatSendBeanConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModTDRepeatSendBeanConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModTDRepeatSendBeanConfig));
  BuffModTDRepeatCheckBeanConfig_descriptor_ = file->message_type(14);
  static const int BuffModTDRepeatCheckBeanConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModTDRepeatCheckBeanConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModTDRepeatCheckBeanConfig, type_),
  };
  BuffModTDRepeatCheckBeanConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModTDRepeatCheckBeanConfig_descriptor_,
      BuffModTDRepeatCheckBeanConfig::default_instance_,
      BuffModTDRepeatCheckBeanConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModTDRepeatCheckBeanConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModTDRepeatCheckBeanConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModTDRepeatCheckBeanConfig));
  BuffModIgnoreShieldConfig_descriptor_ = file->message_type(15);
  static const int BuffModIgnoreShieldConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModIgnoreShieldConfig, active_),
  };
  BuffModIgnoreShieldConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModIgnoreShieldConfig_descriptor_,
      BuffModIgnoreShieldConfig::default_instance_,
      BuffModIgnoreShieldConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModIgnoreShieldConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModIgnoreShieldConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModIgnoreShieldConfig));
  BuffModNoSuckBloodConfig_descriptor_ = file->message_type(16);
  static const int BuffModNoSuckBloodConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoSuckBloodConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoSuckBloodConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoSuckBloodConfig, percent_),
  };
  BuffModNoSuckBloodConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModNoSuckBloodConfig_descriptor_,
      BuffModNoSuckBloodConfig::default_instance_,
      BuffModNoSuckBloodConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoSuckBloodConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoSuckBloodConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModNoSuckBloodConfig));
  TBuffOnStack_descriptor_ = file->message_type(17);
  static const int TBuffOnStack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBuffOnStack, stack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBuffOnStack, buffarr_),
  };
  TBuffOnStack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBuffOnStack_descriptor_,
      TBuffOnStack::default_instance_,
      TBuffOnStack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBuffOnStack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBuffOnStack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBuffOnStack));
  BuffModBuffOnStackConfig_descriptor_ = file->message_type(18);
  static const int BuffModBuffOnStackConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModBuffOnStackConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModBuffOnStackConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModBuffOnStackConfig, actionarr_),
  };
  BuffModBuffOnStackConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModBuffOnStackConfig_descriptor_,
      BuffModBuffOnStackConfig::default_instance_,
      BuffModBuffOnStackConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModBuffOnStackConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModBuffOnStackConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModBuffOnStackConfig));
  BuffModRevertStateOnEndConfig_descriptor_ = file->message_type(19);
  static const int BuffModRevertStateOnEndConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRevertStateOnEndConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRevertStateOnEndConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRevertStateOnEndConfig, hppercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRevertStateOnEndConfig, ragepercent_),
  };
  BuffModRevertStateOnEndConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModRevertStateOnEndConfig_descriptor_,
      BuffModRevertStateOnEndConfig::default_instance_,
      BuffModRevertStateOnEndConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRevertStateOnEndConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModRevertStateOnEndConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModRevertStateOnEndConfig));
  BuffModChangeCastRangeConfig_descriptor_ = file->message_type(20);
  static const int BuffModChangeCastRangeConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModChangeCastRangeConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModChangeCastRangeConfig, range_),
  };
  BuffModChangeCastRangeConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModChangeCastRangeConfig_descriptor_,
      BuffModChangeCastRangeConfig::default_instance_,
      BuffModChangeCastRangeConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModChangeCastRangeConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModChangeCastRangeConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModChangeCastRangeConfig));
  BuffModNoReviveConfig_descriptor_ = file->message_type(21);
  static const int BuffModNoReviveConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoReviveConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoReviveConfig, delaytime_),
  };
  BuffModNoReviveConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModNoReviveConfig_descriptor_,
      BuffModNoReviveConfig::default_instance_,
      BuffModNoReviveConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoReviveConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModNoReviveConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModNoReviveConfig));
  BuffModChangeSummonedAIConfig_descriptor_ = file->message_type(22);
  static const int BuffModChangeSummonedAIConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModChangeSummonedAIConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModChangeSummonedAIConfig, delaytime_),
  };
  BuffModChangeSummonedAIConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModChangeSummonedAIConfig_descriptor_,
      BuffModChangeSummonedAIConfig::default_instance_,
      BuffModChangeSummonedAIConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModChangeSummonedAIConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModChangeSummonedAIConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModChangeSummonedAIConfig));
  BuffModSetMaxLoseHPConfig_descriptor_ = file->message_type(23);
  static const int BuffModSetMaxLoseHPConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModSetMaxLoseHPConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModSetMaxLoseHPConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModSetMaxLoseHPConfig, percent_),
  };
  BuffModSetMaxLoseHPConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModSetMaxLoseHPConfig_descriptor_,
      BuffModSetMaxLoseHPConfig::default_instance_,
      BuffModSetMaxLoseHPConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModSetMaxLoseHPConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModSetMaxLoseHPConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModSetMaxLoseHPConfig));
  BuffModAdjustReflectedDamageConfig_descriptor_ = file->message_type(24);
  static const int BuffModAdjustReflectedDamageConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAdjustReflectedDamageConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAdjustReflectedDamageConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAdjustReflectedDamageConfig, percent_),
  };
  BuffModAdjustReflectedDamageConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModAdjustReflectedDamageConfig_descriptor_,
      BuffModAdjustReflectedDamageConfig::default_instance_,
      BuffModAdjustReflectedDamageConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAdjustReflectedDamageConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAdjustReflectedDamageConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModAdjustReflectedDamageConfig));
  BuffModActiveUIEffectConfig_descriptor_ = file->message_type(25);
  static const int BuffModActiveUIEffectConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModActiveUIEffectConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModActiveUIEffectConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModActiveUIEffectConfig, starteffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModActiveUIEffectConfig, lasteffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModActiveUIEffectConfig, endeffect_),
  };
  BuffModActiveUIEffectConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModActiveUIEffectConfig_descriptor_,
      BuffModActiveUIEffectConfig::default_instance_,
      BuffModActiveUIEffectConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModActiveUIEffectConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModActiveUIEffectConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModActiveUIEffectConfig));
  BuffModAdjustBuffHitRateConfig_descriptor_ = file->message_type(26);
  static const int BuffModAdjustBuffHitRateConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAdjustBuffHitRateConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAdjustBuffHitRateConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAdjustBuffHitRateConfig, adjustrate_),
  };
  BuffModAdjustBuffHitRateConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModAdjustBuffHitRateConfig_descriptor_,
      BuffModAdjustBuffHitRateConfig::default_instance_,
      BuffModAdjustBuffHitRateConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAdjustBuffHitRateConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModAdjustBuffHitRateConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModAdjustBuffHitRateConfig));
  BuffModLimitByMaxHpRateConfig_descriptor_ = file->message_type(27);
  static const int BuffModLimitByMaxHpRateConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModLimitByMaxHpRateConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModLimitByMaxHpRateConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModLimitByMaxHpRateConfig, percent_),
  };
  BuffModLimitByMaxHpRateConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModLimitByMaxHpRateConfig_descriptor_,
      BuffModLimitByMaxHpRateConfig::default_instance_,
      BuffModLimitByMaxHpRateConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModLimitByMaxHpRateConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModLimitByMaxHpRateConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModLimitByMaxHpRateConfig));
  BuffModBattleArcherModifyConfig_descriptor_ = file->message_type(28);
  static const int BuffModBattleArcherModifyConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModBattleArcherModifyConfig, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModBattleArcherModifyConfig, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModBattleArcherModifyConfig, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModBattleArcherModifyConfig, value_),
  };
  BuffModBattleArcherModifyConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffModBattleArcherModifyConfig_descriptor_,
      BuffModBattleArcherModifyConfig::default_instance_,
      BuffModBattleArcherModifyConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModBattleArcherModifyConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffModBattleArcherModifyConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffModBattleArcherModifyConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fBuffDataBase2_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModAttackSpeedConfig_descriptor_, &BuffModAttackSpeedConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModNoMoveConfig_descriptor_, &BuffModNoMoveConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModNoNormalSkillConfig_descriptor_, &BuffModNoNormalSkillConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModNoSkillConfig_descriptor_, &BuffModNoSkillConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModDizzinessConfig_descriptor_, &BuffModDizzinessConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModFreezeConfig_descriptor_, &BuffModFreezeConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModCharmedConfig_descriptor_, &BuffModCharmedConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModChaosConfig_descriptor_, &BuffModChaosConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModRandomMoveConfig_descriptor_, &BuffModRandomMoveConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModTDMoniterDefenderStateConfig_descriptor_, &BuffModTDMoniterDefenderStateConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModTDNoBeanConfig_descriptor_, &BuffModTDNoBeanConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModChangeDirConfig_descriptor_, &BuffModChangeDirConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModFearConfig_descriptor_, &BuffModFearConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModTDRepeatSendBeanConfig_descriptor_, &BuffModTDRepeatSendBeanConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModTDRepeatCheckBeanConfig_descriptor_, &BuffModTDRepeatCheckBeanConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModIgnoreShieldConfig_descriptor_, &BuffModIgnoreShieldConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModNoSuckBloodConfig_descriptor_, &BuffModNoSuckBloodConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBuffOnStack_descriptor_, &TBuffOnStack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModBuffOnStackConfig_descriptor_, &BuffModBuffOnStackConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModRevertStateOnEndConfig_descriptor_, &BuffModRevertStateOnEndConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModChangeCastRangeConfig_descriptor_, &BuffModChangeCastRangeConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModNoReviveConfig_descriptor_, &BuffModNoReviveConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModChangeSummonedAIConfig_descriptor_, &BuffModChangeSummonedAIConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModSetMaxLoseHPConfig_descriptor_, &BuffModSetMaxLoseHPConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModAdjustReflectedDamageConfig_descriptor_, &BuffModAdjustReflectedDamageConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModActiveUIEffectConfig_descriptor_, &BuffModActiveUIEffectConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModAdjustBuffHitRateConfig_descriptor_, &BuffModAdjustBuffHitRateConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModLimitByMaxHpRateConfig_descriptor_, &BuffModLimitByMaxHpRateConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffModBattleArcherModifyConfig_descriptor_, &BuffModBattleArcherModifyConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto() {
  delete BuffModAttackSpeedConfig::default_instance_;
  delete BuffModAttackSpeedConfig_reflection_;
  delete BuffModNoMoveConfig::default_instance_;
  delete BuffModNoMoveConfig_reflection_;
  delete BuffModNoNormalSkillConfig::default_instance_;
  delete BuffModNoNormalSkillConfig_reflection_;
  delete BuffModNoSkillConfig::default_instance_;
  delete BuffModNoSkillConfig_reflection_;
  delete BuffModDizzinessConfig::default_instance_;
  delete BuffModDizzinessConfig_reflection_;
  delete BuffModFreezeConfig::default_instance_;
  delete BuffModFreezeConfig_reflection_;
  delete BuffModCharmedConfig::default_instance_;
  delete BuffModCharmedConfig_reflection_;
  delete BuffModChaosConfig::default_instance_;
  delete BuffModChaosConfig_reflection_;
  delete BuffModRandomMoveConfig::default_instance_;
  delete BuffModRandomMoveConfig_reflection_;
  delete BuffModTDMoniterDefenderStateConfig::default_instance_;
  delete BuffModTDMoniterDefenderStateConfig_reflection_;
  delete BuffModTDNoBeanConfig::default_instance_;
  delete BuffModTDNoBeanConfig_reflection_;
  delete BuffModChangeDirConfig::default_instance_;
  delete BuffModChangeDirConfig_reflection_;
  delete BuffModFearConfig::default_instance_;
  delete BuffModFearConfig_reflection_;
  delete BuffModTDRepeatSendBeanConfig::default_instance_;
  delete BuffModTDRepeatSendBeanConfig_reflection_;
  delete BuffModTDRepeatCheckBeanConfig::default_instance_;
  delete BuffModTDRepeatCheckBeanConfig_reflection_;
  delete BuffModIgnoreShieldConfig::default_instance_;
  delete BuffModIgnoreShieldConfig_reflection_;
  delete BuffModNoSuckBloodConfig::default_instance_;
  delete BuffModNoSuckBloodConfig_reflection_;
  delete TBuffOnStack::default_instance_;
  delete TBuffOnStack_reflection_;
  delete BuffModBuffOnStackConfig::default_instance_;
  delete BuffModBuffOnStackConfig_reflection_;
  delete BuffModRevertStateOnEndConfig::default_instance_;
  delete BuffModRevertStateOnEndConfig_reflection_;
  delete BuffModChangeCastRangeConfig::default_instance_;
  delete BuffModChangeCastRangeConfig_reflection_;
  delete BuffModNoReviveConfig::default_instance_;
  delete BuffModNoReviveConfig_reflection_;
  delete BuffModChangeSummonedAIConfig::default_instance_;
  delete BuffModChangeSummonedAIConfig_reflection_;
  delete BuffModSetMaxLoseHPConfig::default_instance_;
  delete BuffModSetMaxLoseHPConfig_reflection_;
  delete BuffModAdjustReflectedDamageConfig::default_instance_;
  delete BuffModAdjustReflectedDamageConfig_reflection_;
  delete BuffModActiveUIEffectConfig::default_instance_;
  delete BuffModActiveUIEffectConfig_reflection_;
  delete BuffModAdjustBuffHitRateConfig::default_instance_;
  delete BuffModAdjustBuffHitRateConfig_reflection_;
  delete BuffModLimitByMaxHpRateConfig::default_instance_;
  delete BuffModLimitByMaxHpRateConfig_reflection_;
  delete BuffModBattleArcherModifyConfig::default_instance_;
  delete BuffModBattleArcherModifyConfig_reflection_;
}

void protobuf_AddDesc_module_2fBuffDataBase2_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032module/BuffDataBase2.proto\022\002pb\"j\n\030Buff"
    "ModAttackSpeedConfig\022\016\n\006Active\030\001 \001(\010\022\021\n\t"
    "DelayTime\030\002 \001(\005\022\024\n\014PercentParam\030\003 \001(\005\022\025\n"
    "\rPercentGrowth\030\004 \001(\005\"P\n\023BuffModNoMoveCon"
    "fig\022\016\n\006Active\030\001 \001(\010\022\021\n\tDelayTime\030\002 \001(\005\022\026"
    "\n\016EndWhenDamaged\030\003 \001(\010\"W\n\032BuffModNoNorma"
    "lSkillConfig\022\016\n\006Active\030\001 \001(\010\022\021\n\tDelayTim"
    "e\030\002 \001(\005\022\026\n\016EndWhenDamaged\030\003 \001(\010\"_\n\024BuffM"
    "odNoSkillConfig\022\016\n\006Active\030\001 \001(\010\022\021\n\tDelay"
    "Time\030\002 \001(\005\022\026\n\016EndWhenDamaged\030\003 \001(\010\022\014\n\004Ty"
    "pe\030\004 \001(\005\"S\n\026BuffModDizzinessConfig\022\016\n\006Ac"
    "tive\030\001 \001(\010\022\021\n\tDelayTime\030\002 \001(\005\022\026\n\016EndWhen"
    "Damaged\030\003 \001(\010\"P\n\023BuffModFreezeConfig\022\016\n\006"
    "Active\030\001 \001(\010\022\021\n\tDelayTime\030\002 \001(\005\022\026\n\016EndWh"
    "enDamaged\030\003 \001(\010\"Q\n\024BuffModCharmedConfig\022"
    "\016\n\006Active\030\001 \001(\010\022\021\n\tDelayTime\030\002 \001(\005\022\026\n\016En"
    "dWhenDamaged\030\003 \001(\010\"O\n\022BuffModChaosConfig"
    "\022\016\n\006Active\030\001 \001(\010\022\021\n\tDelayTime\030\002 \001(\005\022\026\n\016E"
    "ndWhenDamaged\030\003 \001(\010\"l\n\027BuffModRandomMove"
    "Config\022\016\n\006Active\030\001 \001(\010\022\021\n\tDelayTime\030\002 \001("
    "\005\022\026\n\016MoveAreaRadius\030\003 \001(\005\022\026\n\016EndWhenDama"
    "ged\030\004 \001(\010\"5\n#BuffModTDMoniterDefenderSta"
    "teConfig\022\016\n\006Active\030\001 \001(\010\":\n\025BuffModTDNoB"
    "eanConfig\022\016\n\006Active\030\001 \001(\010\022\021\n\tDelayTime\030\002"
    " \001(\005\"i\n\026BuffModChangeDirConfig\022\016\n\006Active"
    "\030\001 \001(\010\022\016\n\006ArmyId\030\002 \001(\005\022\016\n\006BuffId\030\003 \001(\005\022\014"
    "\n\004Type\030\004 \001(\005\022\021\n\tDelayTime\030\005 \001(\005\"1\n\021BuffM"
    "odFearConfig\022\016\n\006Active\030\001 \001(\010\022\014\n\004Type\030\002 \001"
    "(\005\"/\n\035BuffModTDRepeatSendBeanConfig\022\016\n\006A"
    "ctive\030\001 \001(\010\">\n\036BuffModTDRepeatCheckBeanC"
    "onfig\022\016\n\006Active\030\001 \001(\010\022\014\n\004Type\030\002 \001(\005\"+\n\031B"
    "uffModIgnoreShieldConfig\022\016\n\006Active\030\001 \001(\010"
    "\"N\n\030BuffModNoSuckBloodConfig\022\016\n\006Active\030\001"
    " \001(\010\022\021\n\tDelayTime\030\002 \001(\005\022\017\n\007Percent\030\003 \001(\005"
    "\".\n\014TBuffOnStack\022\r\n\005Stack\030\001 \001(\r\022\017\n\007BuffA"
    "rr\030\002 \003(\r\"b\n\030BuffModBuffOnStackConfig\022\016\n\006"
    "Active\030\001 \001(\010\022\021\n\tDelayTime\030\002 \001(\005\022#\n\tActio"
    "nArr\030\003 \003(\0132\020.pb.TBuffOnStack\"j\n\035BuffModR"
    "evertStateOnEndConfig\022\016\n\006Active\030\001 \001(\010\022\021\n"
    "\tDelayTime\030\002 \001(\005\022\021\n\tHpPercent\030\003 \001(\r\022\023\n\013R"
    "agePercent\030\004 \001(\r\"=\n\034BuffModChangeCastRan"
    "geConfig\022\016\n\006Active\030\001 \001(\010\022\r\n\005Range\030\002 \001(\r\""
    ":\n\025BuffModNoReviveConfig\022\016\n\006Active\030\001 \001(\010"
    "\022\021\n\tDelayTime\030\002 \001(\005\"B\n\035BuffModChangeSumm"
    "onedAIConfig\022\016\n\006Active\030\001 \001(\010\022\021\n\tDelayTim"
    "e\030\002 \001(\005\"O\n\031BuffModSetMaxLoseHPConfig\022\016\n\006"
    "Active\030\001 \001(\010\022\021\n\tDelayTime\030\002 \001(\005\022\017\n\007Perce"
    "nt\030\003 \001(\005\"X\n\"BuffModAdjustReflectedDamage"
    "Config\022\016\n\006Active\030\001 \001(\010\022\021\n\tDelayTime\030\002 \001("
    "\005\022\017\n\007Percent\030\003 \001(\005\"|\n\033BuffModActiveUIEff"
    "ectConfig\022\016\n\006Active\030\001 \001(\010\022\021\n\tDelayTime\030\002"
    " \001(\005\022\023\n\013StartEffect\030\003 \001(\t\022\022\n\nLastEffect\030"
    "\004 \001(\t\022\021\n\tEndEffect\030\005 \001(\t\"W\n\036BuffModAdjus"
    "tBuffHitRateConfig\022\016\n\006Active\030\001 \001(\010\022\021\n\tDe"
    "layTime\030\002 \001(\005\022\022\n\nAdjustRate\030\003 \001(\005\"S\n\035Buf"
    "fModLimitByMaxHpRateConfig\022\016\n\006Active\030\001 \001"
    "(\010\022\021\n\tDelayTime\030\002 \001(\005\022\017\n\007Percent\030\003 \001(\005\"`"
    "\n\037BuffModBattleArcherModifyConfig\022\016\n\006Act"
    "ive\030\001 \001(\010\022\021\n\tDelayTime\030\002 \001(\005\022\013\n\003Key\030\003 \003("
    "\005\022\r\n\005Value\030\004 \003(\005", 2376);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/BuffDataBase2.proto", &protobuf_RegisterTypes);
  BuffModAttackSpeedConfig::default_instance_ = new BuffModAttackSpeedConfig();
  BuffModNoMoveConfig::default_instance_ = new BuffModNoMoveConfig();
  BuffModNoNormalSkillConfig::default_instance_ = new BuffModNoNormalSkillConfig();
  BuffModNoSkillConfig::default_instance_ = new BuffModNoSkillConfig();
  BuffModDizzinessConfig::default_instance_ = new BuffModDizzinessConfig();
  BuffModFreezeConfig::default_instance_ = new BuffModFreezeConfig();
  BuffModCharmedConfig::default_instance_ = new BuffModCharmedConfig();
  BuffModChaosConfig::default_instance_ = new BuffModChaosConfig();
  BuffModRandomMoveConfig::default_instance_ = new BuffModRandomMoveConfig();
  BuffModTDMoniterDefenderStateConfig::default_instance_ = new BuffModTDMoniterDefenderStateConfig();
  BuffModTDNoBeanConfig::default_instance_ = new BuffModTDNoBeanConfig();
  BuffModChangeDirConfig::default_instance_ = new BuffModChangeDirConfig();
  BuffModFearConfig::default_instance_ = new BuffModFearConfig();
  BuffModTDRepeatSendBeanConfig::default_instance_ = new BuffModTDRepeatSendBeanConfig();
  BuffModTDRepeatCheckBeanConfig::default_instance_ = new BuffModTDRepeatCheckBeanConfig();
  BuffModIgnoreShieldConfig::default_instance_ = new BuffModIgnoreShieldConfig();
  BuffModNoSuckBloodConfig::default_instance_ = new BuffModNoSuckBloodConfig();
  TBuffOnStack::default_instance_ = new TBuffOnStack();
  BuffModBuffOnStackConfig::default_instance_ = new BuffModBuffOnStackConfig();
  BuffModRevertStateOnEndConfig::default_instance_ = new BuffModRevertStateOnEndConfig();
  BuffModChangeCastRangeConfig::default_instance_ = new BuffModChangeCastRangeConfig();
  BuffModNoReviveConfig::default_instance_ = new BuffModNoReviveConfig();
  BuffModChangeSummonedAIConfig::default_instance_ = new BuffModChangeSummonedAIConfig();
  BuffModSetMaxLoseHPConfig::default_instance_ = new BuffModSetMaxLoseHPConfig();
  BuffModAdjustReflectedDamageConfig::default_instance_ = new BuffModAdjustReflectedDamageConfig();
  BuffModActiveUIEffectConfig::default_instance_ = new BuffModActiveUIEffectConfig();
  BuffModAdjustBuffHitRateConfig::default_instance_ = new BuffModAdjustBuffHitRateConfig();
  BuffModLimitByMaxHpRateConfig::default_instance_ = new BuffModLimitByMaxHpRateConfig();
  BuffModBattleArcherModifyConfig::default_instance_ = new BuffModBattleArcherModifyConfig();
  BuffModAttackSpeedConfig::default_instance_->InitAsDefaultInstance();
  BuffModNoMoveConfig::default_instance_->InitAsDefaultInstance();
  BuffModNoNormalSkillConfig::default_instance_->InitAsDefaultInstance();
  BuffModNoSkillConfig::default_instance_->InitAsDefaultInstance();
  BuffModDizzinessConfig::default_instance_->InitAsDefaultInstance();
  BuffModFreezeConfig::default_instance_->InitAsDefaultInstance();
  BuffModCharmedConfig::default_instance_->InitAsDefaultInstance();
  BuffModChaosConfig::default_instance_->InitAsDefaultInstance();
  BuffModRandomMoveConfig::default_instance_->InitAsDefaultInstance();
  BuffModTDMoniterDefenderStateConfig::default_instance_->InitAsDefaultInstance();
  BuffModTDNoBeanConfig::default_instance_->InitAsDefaultInstance();
  BuffModChangeDirConfig::default_instance_->InitAsDefaultInstance();
  BuffModFearConfig::default_instance_->InitAsDefaultInstance();
  BuffModTDRepeatSendBeanConfig::default_instance_->InitAsDefaultInstance();
  BuffModTDRepeatCheckBeanConfig::default_instance_->InitAsDefaultInstance();
  BuffModIgnoreShieldConfig::default_instance_->InitAsDefaultInstance();
  BuffModNoSuckBloodConfig::default_instance_->InitAsDefaultInstance();
  TBuffOnStack::default_instance_->InitAsDefaultInstance();
  BuffModBuffOnStackConfig::default_instance_->InitAsDefaultInstance();
  BuffModRevertStateOnEndConfig::default_instance_->InitAsDefaultInstance();
  BuffModChangeCastRangeConfig::default_instance_->InitAsDefaultInstance();
  BuffModNoReviveConfig::default_instance_->InitAsDefaultInstance();
  BuffModChangeSummonedAIConfig::default_instance_->InitAsDefaultInstance();
  BuffModSetMaxLoseHPConfig::default_instance_->InitAsDefaultInstance();
  BuffModAdjustReflectedDamageConfig::default_instance_->InitAsDefaultInstance();
  BuffModActiveUIEffectConfig::default_instance_->InitAsDefaultInstance();
  BuffModAdjustBuffHitRateConfig::default_instance_->InitAsDefaultInstance();
  BuffModLimitByMaxHpRateConfig::default_instance_->InitAsDefaultInstance();
  BuffModBattleArcherModifyConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fBuffDataBase2_2eproto {
  StaticDescriptorInitializer_module_2fBuffDataBase2_2eproto() {
    protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  }
} static_descriptor_initializer_module_2fBuffDataBase2_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BuffModAttackSpeedConfig::kActiveFieldNumber;
const int BuffModAttackSpeedConfig::kDelayTimeFieldNumber;
const int BuffModAttackSpeedConfig::kPercentParamFieldNumber;
const int BuffModAttackSpeedConfig::kPercentGrowthFieldNumber;
#endif  // !_MSC_VER

BuffModAttackSpeedConfig::BuffModAttackSpeedConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModAttackSpeedConfig)
}

void BuffModAttackSpeedConfig::InitAsDefaultInstance() {
}

BuffModAttackSpeedConfig::BuffModAttackSpeedConfig(const BuffModAttackSpeedConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModAttackSpeedConfig)
}

void BuffModAttackSpeedConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  percentparam_ = 0;
  percentgrowth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModAttackSpeedConfig::~BuffModAttackSpeedConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModAttackSpeedConfig)
  SharedDtor();
}

void BuffModAttackSpeedConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModAttackSpeedConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModAttackSpeedConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModAttackSpeedConfig_descriptor_;
}

const BuffModAttackSpeedConfig& BuffModAttackSpeedConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModAttackSpeedConfig* BuffModAttackSpeedConfig::default_instance_ = NULL;

BuffModAttackSpeedConfig* BuffModAttackSpeedConfig::New() const {
  return new BuffModAttackSpeedConfig;
}

void BuffModAttackSpeedConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModAttackSpeedConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(active_, percentgrowth_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModAttackSpeedConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModAttackSpeedConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PercentParam;
        break;
      }

      // optional int32 PercentParam = 3;
      case 3: {
        if (tag == 24) {
         parse_PercentParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percentparam_)));
          set_has_percentparam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PercentGrowth;
        break;
      }

      // optional int32 PercentGrowth = 4;
      case 4: {
        if (tag == 32) {
         parse_PercentGrowth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percentgrowth_)));
          set_has_percentgrowth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModAttackSpeedConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModAttackSpeedConfig)
  return false;
#undef DO_
}

void BuffModAttackSpeedConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModAttackSpeedConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional int32 PercentParam = 3;
  if (has_percentparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->percentparam(), output);
  }

  // optional int32 PercentGrowth = 4;
  if (has_percentgrowth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->percentgrowth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModAttackSpeedConfig)
}

::google::protobuf::uint8* BuffModAttackSpeedConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModAttackSpeedConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional int32 PercentParam = 3;
  if (has_percentparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->percentparam(), target);
  }

  // optional int32 PercentGrowth = 4;
  if (has_percentgrowth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->percentgrowth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModAttackSpeedConfig)
  return target;
}

int BuffModAttackSpeedConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional int32 PercentParam = 3;
    if (has_percentparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percentparam());
    }

    // optional int32 PercentGrowth = 4;
    if (has_percentgrowth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percentgrowth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModAttackSpeedConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModAttackSpeedConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModAttackSpeedConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModAttackSpeedConfig::MergeFrom(const BuffModAttackSpeedConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_percentparam()) {
      set_percentparam(from.percentparam());
    }
    if (from.has_percentgrowth()) {
      set_percentgrowth(from.percentgrowth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModAttackSpeedConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModAttackSpeedConfig::CopyFrom(const BuffModAttackSpeedConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModAttackSpeedConfig::IsInitialized() const {

  return true;
}

void BuffModAttackSpeedConfig::Swap(BuffModAttackSpeedConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(percentparam_, other->percentparam_);
    std::swap(percentgrowth_, other->percentgrowth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModAttackSpeedConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModAttackSpeedConfig_descriptor_;
  metadata.reflection = BuffModAttackSpeedConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModNoMoveConfig::kActiveFieldNumber;
const int BuffModNoMoveConfig::kDelayTimeFieldNumber;
const int BuffModNoMoveConfig::kEndWhenDamagedFieldNumber;
#endif  // !_MSC_VER

BuffModNoMoveConfig::BuffModNoMoveConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModNoMoveConfig)
}

void BuffModNoMoveConfig::InitAsDefaultInstance() {
}

BuffModNoMoveConfig::BuffModNoMoveConfig(const BuffModNoMoveConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModNoMoveConfig)
}

void BuffModNoMoveConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  endwhendamaged_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModNoMoveConfig::~BuffModNoMoveConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModNoMoveConfig)
  SharedDtor();
}

void BuffModNoMoveConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModNoMoveConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModNoMoveConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModNoMoveConfig_descriptor_;
}

const BuffModNoMoveConfig& BuffModNoMoveConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModNoMoveConfig* BuffModNoMoveConfig::default_instance_ = NULL;

BuffModNoMoveConfig* BuffModNoMoveConfig::New() const {
  return new BuffModNoMoveConfig;
}

void BuffModNoMoveConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModNoMoveConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(delaytime_, endwhendamaged_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModNoMoveConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModNoMoveConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EndWhenDamaged;
        break;
      }

      // optional bool EndWhenDamaged = 3;
      case 3: {
        if (tag == 24) {
         parse_EndWhenDamaged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &endwhendamaged_)));
          set_has_endwhendamaged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModNoMoveConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModNoMoveConfig)
  return false;
#undef DO_
}

void BuffModNoMoveConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModNoMoveConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional bool EndWhenDamaged = 3;
  if (has_endwhendamaged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->endwhendamaged(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModNoMoveConfig)
}

::google::protobuf::uint8* BuffModNoMoveConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModNoMoveConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional bool EndWhenDamaged = 3;
  if (has_endwhendamaged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->endwhendamaged(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModNoMoveConfig)
  return target;
}

int BuffModNoMoveConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional bool EndWhenDamaged = 3;
    if (has_endwhendamaged()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModNoMoveConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModNoMoveConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModNoMoveConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModNoMoveConfig::MergeFrom(const BuffModNoMoveConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_endwhendamaged()) {
      set_endwhendamaged(from.endwhendamaged());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModNoMoveConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModNoMoveConfig::CopyFrom(const BuffModNoMoveConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModNoMoveConfig::IsInitialized() const {

  return true;
}

void BuffModNoMoveConfig::Swap(BuffModNoMoveConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(endwhendamaged_, other->endwhendamaged_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModNoMoveConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModNoMoveConfig_descriptor_;
  metadata.reflection = BuffModNoMoveConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModNoNormalSkillConfig::kActiveFieldNumber;
const int BuffModNoNormalSkillConfig::kDelayTimeFieldNumber;
const int BuffModNoNormalSkillConfig::kEndWhenDamagedFieldNumber;
#endif  // !_MSC_VER

BuffModNoNormalSkillConfig::BuffModNoNormalSkillConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModNoNormalSkillConfig)
}

void BuffModNoNormalSkillConfig::InitAsDefaultInstance() {
}

BuffModNoNormalSkillConfig::BuffModNoNormalSkillConfig(const BuffModNoNormalSkillConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModNoNormalSkillConfig)
}

void BuffModNoNormalSkillConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  endwhendamaged_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModNoNormalSkillConfig::~BuffModNoNormalSkillConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModNoNormalSkillConfig)
  SharedDtor();
}

void BuffModNoNormalSkillConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModNoNormalSkillConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModNoNormalSkillConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModNoNormalSkillConfig_descriptor_;
}

const BuffModNoNormalSkillConfig& BuffModNoNormalSkillConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModNoNormalSkillConfig* BuffModNoNormalSkillConfig::default_instance_ = NULL;

BuffModNoNormalSkillConfig* BuffModNoNormalSkillConfig::New() const {
  return new BuffModNoNormalSkillConfig;
}

void BuffModNoNormalSkillConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModNoNormalSkillConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(delaytime_, endwhendamaged_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModNoNormalSkillConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModNoNormalSkillConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EndWhenDamaged;
        break;
      }

      // optional bool EndWhenDamaged = 3;
      case 3: {
        if (tag == 24) {
         parse_EndWhenDamaged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &endwhendamaged_)));
          set_has_endwhendamaged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModNoNormalSkillConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModNoNormalSkillConfig)
  return false;
#undef DO_
}

void BuffModNoNormalSkillConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModNoNormalSkillConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional bool EndWhenDamaged = 3;
  if (has_endwhendamaged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->endwhendamaged(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModNoNormalSkillConfig)
}

::google::protobuf::uint8* BuffModNoNormalSkillConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModNoNormalSkillConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional bool EndWhenDamaged = 3;
  if (has_endwhendamaged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->endwhendamaged(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModNoNormalSkillConfig)
  return target;
}

int BuffModNoNormalSkillConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional bool EndWhenDamaged = 3;
    if (has_endwhendamaged()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModNoNormalSkillConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModNoNormalSkillConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModNoNormalSkillConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModNoNormalSkillConfig::MergeFrom(const BuffModNoNormalSkillConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_endwhendamaged()) {
      set_endwhendamaged(from.endwhendamaged());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModNoNormalSkillConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModNoNormalSkillConfig::CopyFrom(const BuffModNoNormalSkillConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModNoNormalSkillConfig::IsInitialized() const {

  return true;
}

void BuffModNoNormalSkillConfig::Swap(BuffModNoNormalSkillConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(endwhendamaged_, other->endwhendamaged_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModNoNormalSkillConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModNoNormalSkillConfig_descriptor_;
  metadata.reflection = BuffModNoNormalSkillConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModNoSkillConfig::kActiveFieldNumber;
const int BuffModNoSkillConfig::kDelayTimeFieldNumber;
const int BuffModNoSkillConfig::kEndWhenDamagedFieldNumber;
const int BuffModNoSkillConfig::kTypeFieldNumber;
#endif  // !_MSC_VER

BuffModNoSkillConfig::BuffModNoSkillConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModNoSkillConfig)
}

void BuffModNoSkillConfig::InitAsDefaultInstance() {
}

BuffModNoSkillConfig::BuffModNoSkillConfig(const BuffModNoSkillConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModNoSkillConfig)
}

void BuffModNoSkillConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  endwhendamaged_ = false;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModNoSkillConfig::~BuffModNoSkillConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModNoSkillConfig)
  SharedDtor();
}

void BuffModNoSkillConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModNoSkillConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModNoSkillConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModNoSkillConfig_descriptor_;
}

const BuffModNoSkillConfig& BuffModNoSkillConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModNoSkillConfig* BuffModNoSkillConfig::default_instance_ = NULL;

BuffModNoSkillConfig* BuffModNoSkillConfig::New() const {
  return new BuffModNoSkillConfig;
}

void BuffModNoSkillConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModNoSkillConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(delaytime_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModNoSkillConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModNoSkillConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EndWhenDamaged;
        break;
      }

      // optional bool EndWhenDamaged = 3;
      case 3: {
        if (tag == 24) {
         parse_EndWhenDamaged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &endwhendamaged_)));
          set_has_endwhendamaged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }

      // optional int32 Type = 4;
      case 4: {
        if (tag == 32) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModNoSkillConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModNoSkillConfig)
  return false;
#undef DO_
}

void BuffModNoSkillConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModNoSkillConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional bool EndWhenDamaged = 3;
  if (has_endwhendamaged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->endwhendamaged(), output);
  }

  // optional int32 Type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModNoSkillConfig)
}

::google::protobuf::uint8* BuffModNoSkillConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModNoSkillConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional bool EndWhenDamaged = 3;
  if (has_endwhendamaged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->endwhendamaged(), target);
  }

  // optional int32 Type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModNoSkillConfig)
  return target;
}

int BuffModNoSkillConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional bool EndWhenDamaged = 3;
    if (has_endwhendamaged()) {
      total_size += 1 + 1;
    }

    // optional int32 Type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModNoSkillConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModNoSkillConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModNoSkillConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModNoSkillConfig::MergeFrom(const BuffModNoSkillConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_endwhendamaged()) {
      set_endwhendamaged(from.endwhendamaged());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModNoSkillConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModNoSkillConfig::CopyFrom(const BuffModNoSkillConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModNoSkillConfig::IsInitialized() const {

  return true;
}

void BuffModNoSkillConfig::Swap(BuffModNoSkillConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(endwhendamaged_, other->endwhendamaged_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModNoSkillConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModNoSkillConfig_descriptor_;
  metadata.reflection = BuffModNoSkillConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModDizzinessConfig::kActiveFieldNumber;
const int BuffModDizzinessConfig::kDelayTimeFieldNumber;
const int BuffModDizzinessConfig::kEndWhenDamagedFieldNumber;
#endif  // !_MSC_VER

BuffModDizzinessConfig::BuffModDizzinessConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModDizzinessConfig)
}

void BuffModDizzinessConfig::InitAsDefaultInstance() {
}

BuffModDizzinessConfig::BuffModDizzinessConfig(const BuffModDizzinessConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModDizzinessConfig)
}

void BuffModDizzinessConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  endwhendamaged_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModDizzinessConfig::~BuffModDizzinessConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModDizzinessConfig)
  SharedDtor();
}

void BuffModDizzinessConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModDizzinessConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModDizzinessConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModDizzinessConfig_descriptor_;
}

const BuffModDizzinessConfig& BuffModDizzinessConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModDizzinessConfig* BuffModDizzinessConfig::default_instance_ = NULL;

BuffModDizzinessConfig* BuffModDizzinessConfig::New() const {
  return new BuffModDizzinessConfig;
}

void BuffModDizzinessConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModDizzinessConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(delaytime_, endwhendamaged_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModDizzinessConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModDizzinessConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EndWhenDamaged;
        break;
      }

      // optional bool EndWhenDamaged = 3;
      case 3: {
        if (tag == 24) {
         parse_EndWhenDamaged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &endwhendamaged_)));
          set_has_endwhendamaged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModDizzinessConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModDizzinessConfig)
  return false;
#undef DO_
}

void BuffModDizzinessConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModDizzinessConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional bool EndWhenDamaged = 3;
  if (has_endwhendamaged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->endwhendamaged(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModDizzinessConfig)
}

::google::protobuf::uint8* BuffModDizzinessConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModDizzinessConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional bool EndWhenDamaged = 3;
  if (has_endwhendamaged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->endwhendamaged(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModDizzinessConfig)
  return target;
}

int BuffModDizzinessConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional bool EndWhenDamaged = 3;
    if (has_endwhendamaged()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModDizzinessConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModDizzinessConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModDizzinessConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModDizzinessConfig::MergeFrom(const BuffModDizzinessConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_endwhendamaged()) {
      set_endwhendamaged(from.endwhendamaged());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModDizzinessConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModDizzinessConfig::CopyFrom(const BuffModDizzinessConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModDizzinessConfig::IsInitialized() const {

  return true;
}

void BuffModDizzinessConfig::Swap(BuffModDizzinessConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(endwhendamaged_, other->endwhendamaged_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModDizzinessConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModDizzinessConfig_descriptor_;
  metadata.reflection = BuffModDizzinessConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModFreezeConfig::kActiveFieldNumber;
const int BuffModFreezeConfig::kDelayTimeFieldNumber;
const int BuffModFreezeConfig::kEndWhenDamagedFieldNumber;
#endif  // !_MSC_VER

BuffModFreezeConfig::BuffModFreezeConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModFreezeConfig)
}

void BuffModFreezeConfig::InitAsDefaultInstance() {
}

BuffModFreezeConfig::BuffModFreezeConfig(const BuffModFreezeConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModFreezeConfig)
}

void BuffModFreezeConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  endwhendamaged_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModFreezeConfig::~BuffModFreezeConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModFreezeConfig)
  SharedDtor();
}

void BuffModFreezeConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModFreezeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModFreezeConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModFreezeConfig_descriptor_;
}

const BuffModFreezeConfig& BuffModFreezeConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModFreezeConfig* BuffModFreezeConfig::default_instance_ = NULL;

BuffModFreezeConfig* BuffModFreezeConfig::New() const {
  return new BuffModFreezeConfig;
}

void BuffModFreezeConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModFreezeConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(delaytime_, endwhendamaged_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModFreezeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModFreezeConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EndWhenDamaged;
        break;
      }

      // optional bool EndWhenDamaged = 3;
      case 3: {
        if (tag == 24) {
         parse_EndWhenDamaged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &endwhendamaged_)));
          set_has_endwhendamaged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModFreezeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModFreezeConfig)
  return false;
#undef DO_
}

void BuffModFreezeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModFreezeConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional bool EndWhenDamaged = 3;
  if (has_endwhendamaged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->endwhendamaged(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModFreezeConfig)
}

::google::protobuf::uint8* BuffModFreezeConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModFreezeConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional bool EndWhenDamaged = 3;
  if (has_endwhendamaged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->endwhendamaged(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModFreezeConfig)
  return target;
}

int BuffModFreezeConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional bool EndWhenDamaged = 3;
    if (has_endwhendamaged()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModFreezeConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModFreezeConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModFreezeConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModFreezeConfig::MergeFrom(const BuffModFreezeConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_endwhendamaged()) {
      set_endwhendamaged(from.endwhendamaged());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModFreezeConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModFreezeConfig::CopyFrom(const BuffModFreezeConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModFreezeConfig::IsInitialized() const {

  return true;
}

void BuffModFreezeConfig::Swap(BuffModFreezeConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(endwhendamaged_, other->endwhendamaged_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModFreezeConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModFreezeConfig_descriptor_;
  metadata.reflection = BuffModFreezeConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModCharmedConfig::kActiveFieldNumber;
const int BuffModCharmedConfig::kDelayTimeFieldNumber;
const int BuffModCharmedConfig::kEndWhenDamagedFieldNumber;
#endif  // !_MSC_VER

BuffModCharmedConfig::BuffModCharmedConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModCharmedConfig)
}

void BuffModCharmedConfig::InitAsDefaultInstance() {
}

BuffModCharmedConfig::BuffModCharmedConfig(const BuffModCharmedConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModCharmedConfig)
}

void BuffModCharmedConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  endwhendamaged_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModCharmedConfig::~BuffModCharmedConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModCharmedConfig)
  SharedDtor();
}

void BuffModCharmedConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModCharmedConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModCharmedConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModCharmedConfig_descriptor_;
}

const BuffModCharmedConfig& BuffModCharmedConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModCharmedConfig* BuffModCharmedConfig::default_instance_ = NULL;

BuffModCharmedConfig* BuffModCharmedConfig::New() const {
  return new BuffModCharmedConfig;
}

void BuffModCharmedConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModCharmedConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(delaytime_, endwhendamaged_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModCharmedConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModCharmedConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EndWhenDamaged;
        break;
      }

      // optional bool EndWhenDamaged = 3;
      case 3: {
        if (tag == 24) {
         parse_EndWhenDamaged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &endwhendamaged_)));
          set_has_endwhendamaged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModCharmedConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModCharmedConfig)
  return false;
#undef DO_
}

void BuffModCharmedConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModCharmedConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional bool EndWhenDamaged = 3;
  if (has_endwhendamaged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->endwhendamaged(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModCharmedConfig)
}

::google::protobuf::uint8* BuffModCharmedConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModCharmedConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional bool EndWhenDamaged = 3;
  if (has_endwhendamaged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->endwhendamaged(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModCharmedConfig)
  return target;
}

int BuffModCharmedConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional bool EndWhenDamaged = 3;
    if (has_endwhendamaged()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModCharmedConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModCharmedConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModCharmedConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModCharmedConfig::MergeFrom(const BuffModCharmedConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_endwhendamaged()) {
      set_endwhendamaged(from.endwhendamaged());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModCharmedConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModCharmedConfig::CopyFrom(const BuffModCharmedConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModCharmedConfig::IsInitialized() const {

  return true;
}

void BuffModCharmedConfig::Swap(BuffModCharmedConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(endwhendamaged_, other->endwhendamaged_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModCharmedConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModCharmedConfig_descriptor_;
  metadata.reflection = BuffModCharmedConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModChaosConfig::kActiveFieldNumber;
const int BuffModChaosConfig::kDelayTimeFieldNumber;
const int BuffModChaosConfig::kEndWhenDamagedFieldNumber;
#endif  // !_MSC_VER

BuffModChaosConfig::BuffModChaosConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModChaosConfig)
}

void BuffModChaosConfig::InitAsDefaultInstance() {
}

BuffModChaosConfig::BuffModChaosConfig(const BuffModChaosConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModChaosConfig)
}

void BuffModChaosConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  endwhendamaged_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModChaosConfig::~BuffModChaosConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModChaosConfig)
  SharedDtor();
}

void BuffModChaosConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModChaosConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModChaosConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModChaosConfig_descriptor_;
}

const BuffModChaosConfig& BuffModChaosConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModChaosConfig* BuffModChaosConfig::default_instance_ = NULL;

BuffModChaosConfig* BuffModChaosConfig::New() const {
  return new BuffModChaosConfig;
}

void BuffModChaosConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModChaosConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(delaytime_, endwhendamaged_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModChaosConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModChaosConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EndWhenDamaged;
        break;
      }

      // optional bool EndWhenDamaged = 3;
      case 3: {
        if (tag == 24) {
         parse_EndWhenDamaged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &endwhendamaged_)));
          set_has_endwhendamaged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModChaosConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModChaosConfig)
  return false;
#undef DO_
}

void BuffModChaosConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModChaosConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional bool EndWhenDamaged = 3;
  if (has_endwhendamaged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->endwhendamaged(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModChaosConfig)
}

::google::protobuf::uint8* BuffModChaosConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModChaosConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional bool EndWhenDamaged = 3;
  if (has_endwhendamaged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->endwhendamaged(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModChaosConfig)
  return target;
}

int BuffModChaosConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional bool EndWhenDamaged = 3;
    if (has_endwhendamaged()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModChaosConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModChaosConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModChaosConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModChaosConfig::MergeFrom(const BuffModChaosConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_endwhendamaged()) {
      set_endwhendamaged(from.endwhendamaged());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModChaosConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModChaosConfig::CopyFrom(const BuffModChaosConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModChaosConfig::IsInitialized() const {

  return true;
}

void BuffModChaosConfig::Swap(BuffModChaosConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(endwhendamaged_, other->endwhendamaged_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModChaosConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModChaosConfig_descriptor_;
  metadata.reflection = BuffModChaosConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModRandomMoveConfig::kActiveFieldNumber;
const int BuffModRandomMoveConfig::kDelayTimeFieldNumber;
const int BuffModRandomMoveConfig::kMoveAreaRadiusFieldNumber;
const int BuffModRandomMoveConfig::kEndWhenDamagedFieldNumber;
#endif  // !_MSC_VER

BuffModRandomMoveConfig::BuffModRandomMoveConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModRandomMoveConfig)
}

void BuffModRandomMoveConfig::InitAsDefaultInstance() {
}

BuffModRandomMoveConfig::BuffModRandomMoveConfig(const BuffModRandomMoveConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModRandomMoveConfig)
}

void BuffModRandomMoveConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  movearearadius_ = 0;
  endwhendamaged_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModRandomMoveConfig::~BuffModRandomMoveConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModRandomMoveConfig)
  SharedDtor();
}

void BuffModRandomMoveConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModRandomMoveConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModRandomMoveConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModRandomMoveConfig_descriptor_;
}

const BuffModRandomMoveConfig& BuffModRandomMoveConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModRandomMoveConfig* BuffModRandomMoveConfig::default_instance_ = NULL;

BuffModRandomMoveConfig* BuffModRandomMoveConfig::New() const {
  return new BuffModRandomMoveConfig;
}

void BuffModRandomMoveConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModRandomMoveConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(delaytime_, movearearadius_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModRandomMoveConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModRandomMoveConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MoveAreaRadius;
        break;
      }

      // optional int32 MoveAreaRadius = 3;
      case 3: {
        if (tag == 24) {
         parse_MoveAreaRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movearearadius_)));
          set_has_movearearadius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_EndWhenDamaged;
        break;
      }

      // optional bool EndWhenDamaged = 4;
      case 4: {
        if (tag == 32) {
         parse_EndWhenDamaged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &endwhendamaged_)));
          set_has_endwhendamaged();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModRandomMoveConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModRandomMoveConfig)
  return false;
#undef DO_
}

void BuffModRandomMoveConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModRandomMoveConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional int32 MoveAreaRadius = 3;
  if (has_movearearadius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->movearearadius(), output);
  }

  // optional bool EndWhenDamaged = 4;
  if (has_endwhendamaged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->endwhendamaged(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModRandomMoveConfig)
}

::google::protobuf::uint8* BuffModRandomMoveConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModRandomMoveConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional int32 MoveAreaRadius = 3;
  if (has_movearearadius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->movearearadius(), target);
  }

  // optional bool EndWhenDamaged = 4;
  if (has_endwhendamaged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->endwhendamaged(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModRandomMoveConfig)
  return target;
}

int BuffModRandomMoveConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional int32 MoveAreaRadius = 3;
    if (has_movearearadius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movearearadius());
    }

    // optional bool EndWhenDamaged = 4;
    if (has_endwhendamaged()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModRandomMoveConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModRandomMoveConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModRandomMoveConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModRandomMoveConfig::MergeFrom(const BuffModRandomMoveConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_movearearadius()) {
      set_movearearadius(from.movearearadius());
    }
    if (from.has_endwhendamaged()) {
      set_endwhendamaged(from.endwhendamaged());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModRandomMoveConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModRandomMoveConfig::CopyFrom(const BuffModRandomMoveConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModRandomMoveConfig::IsInitialized() const {

  return true;
}

void BuffModRandomMoveConfig::Swap(BuffModRandomMoveConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(movearearadius_, other->movearearadius_);
    std::swap(endwhendamaged_, other->endwhendamaged_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModRandomMoveConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModRandomMoveConfig_descriptor_;
  metadata.reflection = BuffModRandomMoveConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModTDMoniterDefenderStateConfig::kActiveFieldNumber;
#endif  // !_MSC_VER

BuffModTDMoniterDefenderStateConfig::BuffModTDMoniterDefenderStateConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModTDMoniterDefenderStateConfig)
}

void BuffModTDMoniterDefenderStateConfig::InitAsDefaultInstance() {
}

BuffModTDMoniterDefenderStateConfig::BuffModTDMoniterDefenderStateConfig(const BuffModTDMoniterDefenderStateConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModTDMoniterDefenderStateConfig)
}

void BuffModTDMoniterDefenderStateConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModTDMoniterDefenderStateConfig::~BuffModTDMoniterDefenderStateConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModTDMoniterDefenderStateConfig)
  SharedDtor();
}

void BuffModTDMoniterDefenderStateConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModTDMoniterDefenderStateConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModTDMoniterDefenderStateConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModTDMoniterDefenderStateConfig_descriptor_;
}

const BuffModTDMoniterDefenderStateConfig& BuffModTDMoniterDefenderStateConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModTDMoniterDefenderStateConfig* BuffModTDMoniterDefenderStateConfig::default_instance_ = NULL;

BuffModTDMoniterDefenderStateConfig* BuffModTDMoniterDefenderStateConfig::New() const {
  return new BuffModTDMoniterDefenderStateConfig;
}

void BuffModTDMoniterDefenderStateConfig::Clear() {
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModTDMoniterDefenderStateConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModTDMoniterDefenderStateConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModTDMoniterDefenderStateConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModTDMoniterDefenderStateConfig)
  return false;
#undef DO_
}

void BuffModTDMoniterDefenderStateConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModTDMoniterDefenderStateConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModTDMoniterDefenderStateConfig)
}

::google::protobuf::uint8* BuffModTDMoniterDefenderStateConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModTDMoniterDefenderStateConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModTDMoniterDefenderStateConfig)
  return target;
}

int BuffModTDMoniterDefenderStateConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModTDMoniterDefenderStateConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModTDMoniterDefenderStateConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModTDMoniterDefenderStateConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModTDMoniterDefenderStateConfig::MergeFrom(const BuffModTDMoniterDefenderStateConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModTDMoniterDefenderStateConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModTDMoniterDefenderStateConfig::CopyFrom(const BuffModTDMoniterDefenderStateConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModTDMoniterDefenderStateConfig::IsInitialized() const {

  return true;
}

void BuffModTDMoniterDefenderStateConfig::Swap(BuffModTDMoniterDefenderStateConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModTDMoniterDefenderStateConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModTDMoniterDefenderStateConfig_descriptor_;
  metadata.reflection = BuffModTDMoniterDefenderStateConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModTDNoBeanConfig::kActiveFieldNumber;
const int BuffModTDNoBeanConfig::kDelayTimeFieldNumber;
#endif  // !_MSC_VER

BuffModTDNoBeanConfig::BuffModTDNoBeanConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModTDNoBeanConfig)
}

void BuffModTDNoBeanConfig::InitAsDefaultInstance() {
}

BuffModTDNoBeanConfig::BuffModTDNoBeanConfig(const BuffModTDNoBeanConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModTDNoBeanConfig)
}

void BuffModTDNoBeanConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModTDNoBeanConfig::~BuffModTDNoBeanConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModTDNoBeanConfig)
  SharedDtor();
}

void BuffModTDNoBeanConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModTDNoBeanConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModTDNoBeanConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModTDNoBeanConfig_descriptor_;
}

const BuffModTDNoBeanConfig& BuffModTDNoBeanConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModTDNoBeanConfig* BuffModTDNoBeanConfig::default_instance_ = NULL;

BuffModTDNoBeanConfig* BuffModTDNoBeanConfig::New() const {
  return new BuffModTDNoBeanConfig;
}

void BuffModTDNoBeanConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModTDNoBeanConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(active_, delaytime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModTDNoBeanConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModTDNoBeanConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModTDNoBeanConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModTDNoBeanConfig)
  return false;
#undef DO_
}

void BuffModTDNoBeanConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModTDNoBeanConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModTDNoBeanConfig)
}

::google::protobuf::uint8* BuffModTDNoBeanConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModTDNoBeanConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModTDNoBeanConfig)
  return target;
}

int BuffModTDNoBeanConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModTDNoBeanConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModTDNoBeanConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModTDNoBeanConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModTDNoBeanConfig::MergeFrom(const BuffModTDNoBeanConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModTDNoBeanConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModTDNoBeanConfig::CopyFrom(const BuffModTDNoBeanConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModTDNoBeanConfig::IsInitialized() const {

  return true;
}

void BuffModTDNoBeanConfig::Swap(BuffModTDNoBeanConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModTDNoBeanConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModTDNoBeanConfig_descriptor_;
  metadata.reflection = BuffModTDNoBeanConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModChangeDirConfig::kActiveFieldNumber;
const int BuffModChangeDirConfig::kArmyIdFieldNumber;
const int BuffModChangeDirConfig::kBuffIdFieldNumber;
const int BuffModChangeDirConfig::kTypeFieldNumber;
const int BuffModChangeDirConfig::kDelayTimeFieldNumber;
#endif  // !_MSC_VER

BuffModChangeDirConfig::BuffModChangeDirConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModChangeDirConfig)
}

void BuffModChangeDirConfig::InitAsDefaultInstance() {
}

BuffModChangeDirConfig::BuffModChangeDirConfig(const BuffModChangeDirConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModChangeDirConfig)
}

void BuffModChangeDirConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  armyid_ = 0;
  buffid_ = 0;
  type_ = 0;
  delaytime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModChangeDirConfig::~BuffModChangeDirConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModChangeDirConfig)
  SharedDtor();
}

void BuffModChangeDirConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModChangeDirConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModChangeDirConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModChangeDirConfig_descriptor_;
}

const BuffModChangeDirConfig& BuffModChangeDirConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModChangeDirConfig* BuffModChangeDirConfig::default_instance_ = NULL;

BuffModChangeDirConfig* BuffModChangeDirConfig::New() const {
  return new BuffModChangeDirConfig;
}

void BuffModChangeDirConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModChangeDirConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(active_, delaytime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModChangeDirConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModChangeDirConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ArmyId;
        break;
      }

      // optional int32 ArmyId = 2;
      case 2: {
        if (tag == 16) {
         parse_ArmyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armyid_)));
          set_has_armyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BuffId;
        break;
      }

      // optional int32 BuffId = 3;
      case 3: {
        if (tag == 24) {
         parse_BuffId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }

      // optional int32 Type = 4;
      case 4: {
        if (tag == 32) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 5;
      case 5: {
        if (tag == 40) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModChangeDirConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModChangeDirConfig)
  return false;
#undef DO_
}

void BuffModChangeDirConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModChangeDirConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 ArmyId = 2;
  if (has_armyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->armyid(), output);
  }

  // optional int32 BuffId = 3;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buffid(), output);
  }

  // optional int32 Type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional int32 DelayTime = 5;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->delaytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModChangeDirConfig)
}

::google::protobuf::uint8* BuffModChangeDirConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModChangeDirConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 ArmyId = 2;
  if (has_armyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->armyid(), target);
  }

  // optional int32 BuffId = 3;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buffid(), target);
  }

  // optional int32 Type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // optional int32 DelayTime = 5;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->delaytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModChangeDirConfig)
  return target;
}

int BuffModChangeDirConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 ArmyId = 2;
    if (has_armyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armyid());
    }

    // optional int32 BuffId = 3;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffid());
    }

    // optional int32 Type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 DelayTime = 5;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModChangeDirConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModChangeDirConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModChangeDirConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModChangeDirConfig::MergeFrom(const BuffModChangeDirConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_armyid()) {
      set_armyid(from.armyid());
    }
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModChangeDirConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModChangeDirConfig::CopyFrom(const BuffModChangeDirConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModChangeDirConfig::IsInitialized() const {

  return true;
}

void BuffModChangeDirConfig::Swap(BuffModChangeDirConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(armyid_, other->armyid_);
    std::swap(buffid_, other->buffid_);
    std::swap(type_, other->type_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModChangeDirConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModChangeDirConfig_descriptor_;
  metadata.reflection = BuffModChangeDirConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModFearConfig::kActiveFieldNumber;
const int BuffModFearConfig::kTypeFieldNumber;
#endif  // !_MSC_VER

BuffModFearConfig::BuffModFearConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModFearConfig)
}

void BuffModFearConfig::InitAsDefaultInstance() {
}

BuffModFearConfig::BuffModFearConfig(const BuffModFearConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModFearConfig)
}

void BuffModFearConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModFearConfig::~BuffModFearConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModFearConfig)
  SharedDtor();
}

void BuffModFearConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModFearConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModFearConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModFearConfig_descriptor_;
}

const BuffModFearConfig& BuffModFearConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModFearConfig* BuffModFearConfig::default_instance_ = NULL;

BuffModFearConfig* BuffModFearConfig::New() const {
  return new BuffModFearConfig;
}

void BuffModFearConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModFearConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(active_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModFearConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModFearConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional int32 Type = 2;
      case 2: {
        if (tag == 16) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModFearConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModFearConfig)
  return false;
#undef DO_
}

void BuffModFearConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModFearConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModFearConfig)
}

::google::protobuf::uint8* BuffModFearConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModFearConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 Type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModFearConfig)
  return target;
}

int BuffModFearConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModFearConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModFearConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModFearConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModFearConfig::MergeFrom(const BuffModFearConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModFearConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModFearConfig::CopyFrom(const BuffModFearConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModFearConfig::IsInitialized() const {

  return true;
}

void BuffModFearConfig::Swap(BuffModFearConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModFearConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModFearConfig_descriptor_;
  metadata.reflection = BuffModFearConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModTDRepeatSendBeanConfig::kActiveFieldNumber;
#endif  // !_MSC_VER

BuffModTDRepeatSendBeanConfig::BuffModTDRepeatSendBeanConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModTDRepeatSendBeanConfig)
}

void BuffModTDRepeatSendBeanConfig::InitAsDefaultInstance() {
}

BuffModTDRepeatSendBeanConfig::BuffModTDRepeatSendBeanConfig(const BuffModTDRepeatSendBeanConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModTDRepeatSendBeanConfig)
}

void BuffModTDRepeatSendBeanConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModTDRepeatSendBeanConfig::~BuffModTDRepeatSendBeanConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModTDRepeatSendBeanConfig)
  SharedDtor();
}

void BuffModTDRepeatSendBeanConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModTDRepeatSendBeanConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModTDRepeatSendBeanConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModTDRepeatSendBeanConfig_descriptor_;
}

const BuffModTDRepeatSendBeanConfig& BuffModTDRepeatSendBeanConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModTDRepeatSendBeanConfig* BuffModTDRepeatSendBeanConfig::default_instance_ = NULL;

BuffModTDRepeatSendBeanConfig* BuffModTDRepeatSendBeanConfig::New() const {
  return new BuffModTDRepeatSendBeanConfig;
}

void BuffModTDRepeatSendBeanConfig::Clear() {
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModTDRepeatSendBeanConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModTDRepeatSendBeanConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModTDRepeatSendBeanConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModTDRepeatSendBeanConfig)
  return false;
#undef DO_
}

void BuffModTDRepeatSendBeanConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModTDRepeatSendBeanConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModTDRepeatSendBeanConfig)
}

::google::protobuf::uint8* BuffModTDRepeatSendBeanConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModTDRepeatSendBeanConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModTDRepeatSendBeanConfig)
  return target;
}

int BuffModTDRepeatSendBeanConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModTDRepeatSendBeanConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModTDRepeatSendBeanConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModTDRepeatSendBeanConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModTDRepeatSendBeanConfig::MergeFrom(const BuffModTDRepeatSendBeanConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModTDRepeatSendBeanConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModTDRepeatSendBeanConfig::CopyFrom(const BuffModTDRepeatSendBeanConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModTDRepeatSendBeanConfig::IsInitialized() const {

  return true;
}

void BuffModTDRepeatSendBeanConfig::Swap(BuffModTDRepeatSendBeanConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModTDRepeatSendBeanConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModTDRepeatSendBeanConfig_descriptor_;
  metadata.reflection = BuffModTDRepeatSendBeanConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModTDRepeatCheckBeanConfig::kActiveFieldNumber;
const int BuffModTDRepeatCheckBeanConfig::kTypeFieldNumber;
#endif  // !_MSC_VER

BuffModTDRepeatCheckBeanConfig::BuffModTDRepeatCheckBeanConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModTDRepeatCheckBeanConfig)
}

void BuffModTDRepeatCheckBeanConfig::InitAsDefaultInstance() {
}

BuffModTDRepeatCheckBeanConfig::BuffModTDRepeatCheckBeanConfig(const BuffModTDRepeatCheckBeanConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModTDRepeatCheckBeanConfig)
}

void BuffModTDRepeatCheckBeanConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModTDRepeatCheckBeanConfig::~BuffModTDRepeatCheckBeanConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModTDRepeatCheckBeanConfig)
  SharedDtor();
}

void BuffModTDRepeatCheckBeanConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModTDRepeatCheckBeanConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModTDRepeatCheckBeanConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModTDRepeatCheckBeanConfig_descriptor_;
}

const BuffModTDRepeatCheckBeanConfig& BuffModTDRepeatCheckBeanConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModTDRepeatCheckBeanConfig* BuffModTDRepeatCheckBeanConfig::default_instance_ = NULL;

BuffModTDRepeatCheckBeanConfig* BuffModTDRepeatCheckBeanConfig::New() const {
  return new BuffModTDRepeatCheckBeanConfig;
}

void BuffModTDRepeatCheckBeanConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModTDRepeatCheckBeanConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(active_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModTDRepeatCheckBeanConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModTDRepeatCheckBeanConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional int32 Type = 2;
      case 2: {
        if (tag == 16) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModTDRepeatCheckBeanConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModTDRepeatCheckBeanConfig)
  return false;
#undef DO_
}

void BuffModTDRepeatCheckBeanConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModTDRepeatCheckBeanConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModTDRepeatCheckBeanConfig)
}

::google::protobuf::uint8* BuffModTDRepeatCheckBeanConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModTDRepeatCheckBeanConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 Type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModTDRepeatCheckBeanConfig)
  return target;
}

int BuffModTDRepeatCheckBeanConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModTDRepeatCheckBeanConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModTDRepeatCheckBeanConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModTDRepeatCheckBeanConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModTDRepeatCheckBeanConfig::MergeFrom(const BuffModTDRepeatCheckBeanConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModTDRepeatCheckBeanConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModTDRepeatCheckBeanConfig::CopyFrom(const BuffModTDRepeatCheckBeanConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModTDRepeatCheckBeanConfig::IsInitialized() const {

  return true;
}

void BuffModTDRepeatCheckBeanConfig::Swap(BuffModTDRepeatCheckBeanConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModTDRepeatCheckBeanConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModTDRepeatCheckBeanConfig_descriptor_;
  metadata.reflection = BuffModTDRepeatCheckBeanConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModIgnoreShieldConfig::kActiveFieldNumber;
#endif  // !_MSC_VER

BuffModIgnoreShieldConfig::BuffModIgnoreShieldConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModIgnoreShieldConfig)
}

void BuffModIgnoreShieldConfig::InitAsDefaultInstance() {
}

BuffModIgnoreShieldConfig::BuffModIgnoreShieldConfig(const BuffModIgnoreShieldConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModIgnoreShieldConfig)
}

void BuffModIgnoreShieldConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModIgnoreShieldConfig::~BuffModIgnoreShieldConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModIgnoreShieldConfig)
  SharedDtor();
}

void BuffModIgnoreShieldConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModIgnoreShieldConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModIgnoreShieldConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModIgnoreShieldConfig_descriptor_;
}

const BuffModIgnoreShieldConfig& BuffModIgnoreShieldConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModIgnoreShieldConfig* BuffModIgnoreShieldConfig::default_instance_ = NULL;

BuffModIgnoreShieldConfig* BuffModIgnoreShieldConfig::New() const {
  return new BuffModIgnoreShieldConfig;
}

void BuffModIgnoreShieldConfig::Clear() {
  active_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModIgnoreShieldConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModIgnoreShieldConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModIgnoreShieldConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModIgnoreShieldConfig)
  return false;
#undef DO_
}

void BuffModIgnoreShieldConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModIgnoreShieldConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModIgnoreShieldConfig)
}

::google::protobuf::uint8* BuffModIgnoreShieldConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModIgnoreShieldConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModIgnoreShieldConfig)
  return target;
}

int BuffModIgnoreShieldConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModIgnoreShieldConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModIgnoreShieldConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModIgnoreShieldConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModIgnoreShieldConfig::MergeFrom(const BuffModIgnoreShieldConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModIgnoreShieldConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModIgnoreShieldConfig::CopyFrom(const BuffModIgnoreShieldConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModIgnoreShieldConfig::IsInitialized() const {

  return true;
}

void BuffModIgnoreShieldConfig::Swap(BuffModIgnoreShieldConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModIgnoreShieldConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModIgnoreShieldConfig_descriptor_;
  metadata.reflection = BuffModIgnoreShieldConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModNoSuckBloodConfig::kActiveFieldNumber;
const int BuffModNoSuckBloodConfig::kDelayTimeFieldNumber;
const int BuffModNoSuckBloodConfig::kPercentFieldNumber;
#endif  // !_MSC_VER

BuffModNoSuckBloodConfig::BuffModNoSuckBloodConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModNoSuckBloodConfig)
}

void BuffModNoSuckBloodConfig::InitAsDefaultInstance() {
}

BuffModNoSuckBloodConfig::BuffModNoSuckBloodConfig(const BuffModNoSuckBloodConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModNoSuckBloodConfig)
}

void BuffModNoSuckBloodConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  percent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModNoSuckBloodConfig::~BuffModNoSuckBloodConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModNoSuckBloodConfig)
  SharedDtor();
}

void BuffModNoSuckBloodConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModNoSuckBloodConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModNoSuckBloodConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModNoSuckBloodConfig_descriptor_;
}

const BuffModNoSuckBloodConfig& BuffModNoSuckBloodConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModNoSuckBloodConfig* BuffModNoSuckBloodConfig::default_instance_ = NULL;

BuffModNoSuckBloodConfig* BuffModNoSuckBloodConfig::New() const {
  return new BuffModNoSuckBloodConfig;
}

void BuffModNoSuckBloodConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModNoSuckBloodConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(active_, percent_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModNoSuckBloodConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModNoSuckBloodConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Percent;
        break;
      }

      // optional int32 Percent = 3;
      case 3: {
        if (tag == 24) {
         parse_Percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModNoSuckBloodConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModNoSuckBloodConfig)
  return false;
#undef DO_
}

void BuffModNoSuckBloodConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModNoSuckBloodConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional int32 Percent = 3;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->percent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModNoSuckBloodConfig)
}

::google::protobuf::uint8* BuffModNoSuckBloodConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModNoSuckBloodConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional int32 Percent = 3;
  if (has_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->percent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModNoSuckBloodConfig)
  return target;
}

int BuffModNoSuckBloodConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional int32 Percent = 3;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModNoSuckBloodConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModNoSuckBloodConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModNoSuckBloodConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModNoSuckBloodConfig::MergeFrom(const BuffModNoSuckBloodConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_percent()) {
      set_percent(from.percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModNoSuckBloodConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModNoSuckBloodConfig::CopyFrom(const BuffModNoSuckBloodConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModNoSuckBloodConfig::IsInitialized() const {

  return true;
}

void BuffModNoSuckBloodConfig::Swap(BuffModNoSuckBloodConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(percent_, other->percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModNoSuckBloodConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModNoSuckBloodConfig_descriptor_;
  metadata.reflection = BuffModNoSuckBloodConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBuffOnStack::kStackFieldNumber;
const int TBuffOnStack::kBuffArrFieldNumber;
#endif  // !_MSC_VER

TBuffOnStack::TBuffOnStack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBuffOnStack)
}

void TBuffOnStack::InitAsDefaultInstance() {
}

TBuffOnStack::TBuffOnStack(const TBuffOnStack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBuffOnStack)
}

void TBuffOnStack::SharedCtor() {
  _cached_size_ = 0;
  stack_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBuffOnStack::~TBuffOnStack() {
  // @@protoc_insertion_point(destructor:pb.TBuffOnStack)
  SharedDtor();
}

void TBuffOnStack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBuffOnStack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBuffOnStack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBuffOnStack_descriptor_;
}

const TBuffOnStack& TBuffOnStack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

TBuffOnStack* TBuffOnStack::default_instance_ = NULL;

TBuffOnStack* TBuffOnStack::New() const {
  return new TBuffOnStack;
}

void TBuffOnStack::Clear() {
  stack_ = 0u;
  buffarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBuffOnStack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBuffOnStack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Stack = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stack_)));
          set_has_stack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuffArr;
        break;
      }

      // repeated uint32 BuffArr = 2;
      case 2: {
        if (tag == 16) {
         parse_BuffArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_buffarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buffarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuffArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBuffOnStack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBuffOnStack)
  return false;
#undef DO_
}

void TBuffOnStack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBuffOnStack)
  // optional uint32 Stack = 1;
  if (has_stack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stack(), output);
  }

  // repeated uint32 BuffArr = 2;
  for (int i = 0; i < this->buffarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->buffarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBuffOnStack)
}

::google::protobuf::uint8* TBuffOnStack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBuffOnStack)
  // optional uint32 Stack = 1;
  if (has_stack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stack(), target);
  }

  // repeated uint32 BuffArr = 2;
  for (int i = 0; i < this->buffarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->buffarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBuffOnStack)
  return target;
}

int TBuffOnStack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Stack = 1;
    if (has_stack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stack());
    }

  }
  // repeated uint32 BuffArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->buffarr(i));
    }
    total_size += 1 * this->buffarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBuffOnStack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBuffOnStack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBuffOnStack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBuffOnStack::MergeFrom(const TBuffOnStack& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffarr_.MergeFrom(from.buffarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stack()) {
      set_stack(from.stack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBuffOnStack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBuffOnStack::CopyFrom(const TBuffOnStack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBuffOnStack::IsInitialized() const {

  return true;
}

void TBuffOnStack::Swap(TBuffOnStack* other) {
  if (other != this) {
    std::swap(stack_, other->stack_);
    buffarr_.Swap(&other->buffarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBuffOnStack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBuffOnStack_descriptor_;
  metadata.reflection = TBuffOnStack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModBuffOnStackConfig::kActiveFieldNumber;
const int BuffModBuffOnStackConfig::kDelayTimeFieldNumber;
const int BuffModBuffOnStackConfig::kActionArrFieldNumber;
#endif  // !_MSC_VER

BuffModBuffOnStackConfig::BuffModBuffOnStackConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModBuffOnStackConfig)
}

void BuffModBuffOnStackConfig::InitAsDefaultInstance() {
}

BuffModBuffOnStackConfig::BuffModBuffOnStackConfig(const BuffModBuffOnStackConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModBuffOnStackConfig)
}

void BuffModBuffOnStackConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModBuffOnStackConfig::~BuffModBuffOnStackConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModBuffOnStackConfig)
  SharedDtor();
}

void BuffModBuffOnStackConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModBuffOnStackConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModBuffOnStackConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModBuffOnStackConfig_descriptor_;
}

const BuffModBuffOnStackConfig& BuffModBuffOnStackConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModBuffOnStackConfig* BuffModBuffOnStackConfig::default_instance_ = NULL;

BuffModBuffOnStackConfig* BuffModBuffOnStackConfig::New() const {
  return new BuffModBuffOnStackConfig;
}

void BuffModBuffOnStackConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModBuffOnStackConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(active_, delaytime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  actionarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModBuffOnStackConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModBuffOnStackConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ActionArr;
        break;
      }

      // repeated .pb.TBuffOnStack ActionArr = 3;
      case 3: {
        if (tag == 26) {
         parse_ActionArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actionarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ActionArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModBuffOnStackConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModBuffOnStackConfig)
  return false;
#undef DO_
}

void BuffModBuffOnStackConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModBuffOnStackConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // repeated .pb.TBuffOnStack ActionArr = 3;
  for (int i = 0; i < this->actionarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->actionarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModBuffOnStackConfig)
}

::google::protobuf::uint8* BuffModBuffOnStackConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModBuffOnStackConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // repeated .pb.TBuffOnStack ActionArr = 3;
  for (int i = 0; i < this->actionarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->actionarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModBuffOnStackConfig)
  return target;
}

int BuffModBuffOnStackConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

  }
  // repeated .pb.TBuffOnStack ActionArr = 3;
  total_size += 1 * this->actionarr_size();
  for (int i = 0; i < this->actionarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actionarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModBuffOnStackConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModBuffOnStackConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModBuffOnStackConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModBuffOnStackConfig::MergeFrom(const BuffModBuffOnStackConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  actionarr_.MergeFrom(from.actionarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModBuffOnStackConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModBuffOnStackConfig::CopyFrom(const BuffModBuffOnStackConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModBuffOnStackConfig::IsInitialized() const {

  return true;
}

void BuffModBuffOnStackConfig::Swap(BuffModBuffOnStackConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    actionarr_.Swap(&other->actionarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModBuffOnStackConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModBuffOnStackConfig_descriptor_;
  metadata.reflection = BuffModBuffOnStackConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModRevertStateOnEndConfig::kActiveFieldNumber;
const int BuffModRevertStateOnEndConfig::kDelayTimeFieldNumber;
const int BuffModRevertStateOnEndConfig::kHpPercentFieldNumber;
const int BuffModRevertStateOnEndConfig::kRagePercentFieldNumber;
#endif  // !_MSC_VER

BuffModRevertStateOnEndConfig::BuffModRevertStateOnEndConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModRevertStateOnEndConfig)
}

void BuffModRevertStateOnEndConfig::InitAsDefaultInstance() {
}

BuffModRevertStateOnEndConfig::BuffModRevertStateOnEndConfig(const BuffModRevertStateOnEndConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModRevertStateOnEndConfig)
}

void BuffModRevertStateOnEndConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  hppercent_ = 0u;
  ragepercent_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModRevertStateOnEndConfig::~BuffModRevertStateOnEndConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModRevertStateOnEndConfig)
  SharedDtor();
}

void BuffModRevertStateOnEndConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModRevertStateOnEndConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModRevertStateOnEndConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModRevertStateOnEndConfig_descriptor_;
}

const BuffModRevertStateOnEndConfig& BuffModRevertStateOnEndConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModRevertStateOnEndConfig* BuffModRevertStateOnEndConfig::default_instance_ = NULL;

BuffModRevertStateOnEndConfig* BuffModRevertStateOnEndConfig::New() const {
  return new BuffModRevertStateOnEndConfig;
}

void BuffModRevertStateOnEndConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModRevertStateOnEndConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(active_, ragepercent_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModRevertStateOnEndConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModRevertStateOnEndConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_HpPercent;
        break;
      }

      // optional uint32 HpPercent = 3;
      case 3: {
        if (tag == 24) {
         parse_HpPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hppercent_)));
          set_has_hppercent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RagePercent;
        break;
      }

      // optional uint32 RagePercent = 4;
      case 4: {
        if (tag == 32) {
         parse_RagePercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ragepercent_)));
          set_has_ragepercent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModRevertStateOnEndConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModRevertStateOnEndConfig)
  return false;
#undef DO_
}

void BuffModRevertStateOnEndConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModRevertStateOnEndConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional uint32 HpPercent = 3;
  if (has_hppercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hppercent(), output);
  }

  // optional uint32 RagePercent = 4;
  if (has_ragepercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ragepercent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModRevertStateOnEndConfig)
}

::google::protobuf::uint8* BuffModRevertStateOnEndConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModRevertStateOnEndConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional uint32 HpPercent = 3;
  if (has_hppercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hppercent(), target);
  }

  // optional uint32 RagePercent = 4;
  if (has_ragepercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ragepercent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModRevertStateOnEndConfig)
  return target;
}

int BuffModRevertStateOnEndConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional uint32 HpPercent = 3;
    if (has_hppercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hppercent());
    }

    // optional uint32 RagePercent = 4;
    if (has_ragepercent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ragepercent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModRevertStateOnEndConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModRevertStateOnEndConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModRevertStateOnEndConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModRevertStateOnEndConfig::MergeFrom(const BuffModRevertStateOnEndConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_hppercent()) {
      set_hppercent(from.hppercent());
    }
    if (from.has_ragepercent()) {
      set_ragepercent(from.ragepercent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModRevertStateOnEndConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModRevertStateOnEndConfig::CopyFrom(const BuffModRevertStateOnEndConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModRevertStateOnEndConfig::IsInitialized() const {

  return true;
}

void BuffModRevertStateOnEndConfig::Swap(BuffModRevertStateOnEndConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(hppercent_, other->hppercent_);
    std::swap(ragepercent_, other->ragepercent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModRevertStateOnEndConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModRevertStateOnEndConfig_descriptor_;
  metadata.reflection = BuffModRevertStateOnEndConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModChangeCastRangeConfig::kActiveFieldNumber;
const int BuffModChangeCastRangeConfig::kRangeFieldNumber;
#endif  // !_MSC_VER

BuffModChangeCastRangeConfig::BuffModChangeCastRangeConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModChangeCastRangeConfig)
}

void BuffModChangeCastRangeConfig::InitAsDefaultInstance() {
}

BuffModChangeCastRangeConfig::BuffModChangeCastRangeConfig(const BuffModChangeCastRangeConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModChangeCastRangeConfig)
}

void BuffModChangeCastRangeConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  range_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModChangeCastRangeConfig::~BuffModChangeCastRangeConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModChangeCastRangeConfig)
  SharedDtor();
}

void BuffModChangeCastRangeConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModChangeCastRangeConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModChangeCastRangeConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModChangeCastRangeConfig_descriptor_;
}

const BuffModChangeCastRangeConfig& BuffModChangeCastRangeConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModChangeCastRangeConfig* BuffModChangeCastRangeConfig::default_instance_ = NULL;

BuffModChangeCastRangeConfig* BuffModChangeCastRangeConfig::New() const {
  return new BuffModChangeCastRangeConfig;
}

void BuffModChangeCastRangeConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModChangeCastRangeConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(active_, range_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModChangeCastRangeConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModChangeCastRangeConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Range;
        break;
      }

      // optional uint32 Range = 2;
      case 2: {
        if (tag == 16) {
         parse_Range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModChangeCastRangeConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModChangeCastRangeConfig)
  return false;
#undef DO_
}

void BuffModChangeCastRangeConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModChangeCastRangeConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional uint32 Range = 2;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->range(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModChangeCastRangeConfig)
}

::google::protobuf::uint8* BuffModChangeCastRangeConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModChangeCastRangeConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional uint32 Range = 2;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->range(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModChangeCastRangeConfig)
  return target;
}

int BuffModChangeCastRangeConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional uint32 Range = 2;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->range());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModChangeCastRangeConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModChangeCastRangeConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModChangeCastRangeConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModChangeCastRangeConfig::MergeFrom(const BuffModChangeCastRangeConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModChangeCastRangeConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModChangeCastRangeConfig::CopyFrom(const BuffModChangeCastRangeConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModChangeCastRangeConfig::IsInitialized() const {

  return true;
}

void BuffModChangeCastRangeConfig::Swap(BuffModChangeCastRangeConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(range_, other->range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModChangeCastRangeConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModChangeCastRangeConfig_descriptor_;
  metadata.reflection = BuffModChangeCastRangeConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModNoReviveConfig::kActiveFieldNumber;
const int BuffModNoReviveConfig::kDelayTimeFieldNumber;
#endif  // !_MSC_VER

BuffModNoReviveConfig::BuffModNoReviveConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModNoReviveConfig)
}

void BuffModNoReviveConfig::InitAsDefaultInstance() {
}

BuffModNoReviveConfig::BuffModNoReviveConfig(const BuffModNoReviveConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModNoReviveConfig)
}

void BuffModNoReviveConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModNoReviveConfig::~BuffModNoReviveConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModNoReviveConfig)
  SharedDtor();
}

void BuffModNoReviveConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModNoReviveConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModNoReviveConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModNoReviveConfig_descriptor_;
}

const BuffModNoReviveConfig& BuffModNoReviveConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModNoReviveConfig* BuffModNoReviveConfig::default_instance_ = NULL;

BuffModNoReviveConfig* BuffModNoReviveConfig::New() const {
  return new BuffModNoReviveConfig;
}

void BuffModNoReviveConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModNoReviveConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(active_, delaytime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModNoReviveConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModNoReviveConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModNoReviveConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModNoReviveConfig)
  return false;
#undef DO_
}

void BuffModNoReviveConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModNoReviveConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModNoReviveConfig)
}

::google::protobuf::uint8* BuffModNoReviveConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModNoReviveConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModNoReviveConfig)
  return target;
}

int BuffModNoReviveConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModNoReviveConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModNoReviveConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModNoReviveConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModNoReviveConfig::MergeFrom(const BuffModNoReviveConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModNoReviveConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModNoReviveConfig::CopyFrom(const BuffModNoReviveConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModNoReviveConfig::IsInitialized() const {

  return true;
}

void BuffModNoReviveConfig::Swap(BuffModNoReviveConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModNoReviveConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModNoReviveConfig_descriptor_;
  metadata.reflection = BuffModNoReviveConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModChangeSummonedAIConfig::kActiveFieldNumber;
const int BuffModChangeSummonedAIConfig::kDelayTimeFieldNumber;
#endif  // !_MSC_VER

BuffModChangeSummonedAIConfig::BuffModChangeSummonedAIConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModChangeSummonedAIConfig)
}

void BuffModChangeSummonedAIConfig::InitAsDefaultInstance() {
}

BuffModChangeSummonedAIConfig::BuffModChangeSummonedAIConfig(const BuffModChangeSummonedAIConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModChangeSummonedAIConfig)
}

void BuffModChangeSummonedAIConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModChangeSummonedAIConfig::~BuffModChangeSummonedAIConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModChangeSummonedAIConfig)
  SharedDtor();
}

void BuffModChangeSummonedAIConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModChangeSummonedAIConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModChangeSummonedAIConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModChangeSummonedAIConfig_descriptor_;
}

const BuffModChangeSummonedAIConfig& BuffModChangeSummonedAIConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModChangeSummonedAIConfig* BuffModChangeSummonedAIConfig::default_instance_ = NULL;

BuffModChangeSummonedAIConfig* BuffModChangeSummonedAIConfig::New() const {
  return new BuffModChangeSummonedAIConfig;
}

void BuffModChangeSummonedAIConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModChangeSummonedAIConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(active_, delaytime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModChangeSummonedAIConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModChangeSummonedAIConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModChangeSummonedAIConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModChangeSummonedAIConfig)
  return false;
#undef DO_
}

void BuffModChangeSummonedAIConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModChangeSummonedAIConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModChangeSummonedAIConfig)
}

::google::protobuf::uint8* BuffModChangeSummonedAIConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModChangeSummonedAIConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModChangeSummonedAIConfig)
  return target;
}

int BuffModChangeSummonedAIConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModChangeSummonedAIConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModChangeSummonedAIConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModChangeSummonedAIConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModChangeSummonedAIConfig::MergeFrom(const BuffModChangeSummonedAIConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModChangeSummonedAIConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModChangeSummonedAIConfig::CopyFrom(const BuffModChangeSummonedAIConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModChangeSummonedAIConfig::IsInitialized() const {

  return true;
}

void BuffModChangeSummonedAIConfig::Swap(BuffModChangeSummonedAIConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModChangeSummonedAIConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModChangeSummonedAIConfig_descriptor_;
  metadata.reflection = BuffModChangeSummonedAIConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModSetMaxLoseHPConfig::kActiveFieldNumber;
const int BuffModSetMaxLoseHPConfig::kDelayTimeFieldNumber;
const int BuffModSetMaxLoseHPConfig::kPercentFieldNumber;
#endif  // !_MSC_VER

BuffModSetMaxLoseHPConfig::BuffModSetMaxLoseHPConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModSetMaxLoseHPConfig)
}

void BuffModSetMaxLoseHPConfig::InitAsDefaultInstance() {
}

BuffModSetMaxLoseHPConfig::BuffModSetMaxLoseHPConfig(const BuffModSetMaxLoseHPConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModSetMaxLoseHPConfig)
}

void BuffModSetMaxLoseHPConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  percent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModSetMaxLoseHPConfig::~BuffModSetMaxLoseHPConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModSetMaxLoseHPConfig)
  SharedDtor();
}

void BuffModSetMaxLoseHPConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModSetMaxLoseHPConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModSetMaxLoseHPConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModSetMaxLoseHPConfig_descriptor_;
}

const BuffModSetMaxLoseHPConfig& BuffModSetMaxLoseHPConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModSetMaxLoseHPConfig* BuffModSetMaxLoseHPConfig::default_instance_ = NULL;

BuffModSetMaxLoseHPConfig* BuffModSetMaxLoseHPConfig::New() const {
  return new BuffModSetMaxLoseHPConfig;
}

void BuffModSetMaxLoseHPConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModSetMaxLoseHPConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(active_, percent_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModSetMaxLoseHPConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModSetMaxLoseHPConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Percent;
        break;
      }

      // optional int32 Percent = 3;
      case 3: {
        if (tag == 24) {
         parse_Percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModSetMaxLoseHPConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModSetMaxLoseHPConfig)
  return false;
#undef DO_
}

void BuffModSetMaxLoseHPConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModSetMaxLoseHPConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional int32 Percent = 3;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->percent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModSetMaxLoseHPConfig)
}

::google::protobuf::uint8* BuffModSetMaxLoseHPConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModSetMaxLoseHPConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional int32 Percent = 3;
  if (has_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->percent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModSetMaxLoseHPConfig)
  return target;
}

int BuffModSetMaxLoseHPConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional int32 Percent = 3;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModSetMaxLoseHPConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModSetMaxLoseHPConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModSetMaxLoseHPConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModSetMaxLoseHPConfig::MergeFrom(const BuffModSetMaxLoseHPConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_percent()) {
      set_percent(from.percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModSetMaxLoseHPConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModSetMaxLoseHPConfig::CopyFrom(const BuffModSetMaxLoseHPConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModSetMaxLoseHPConfig::IsInitialized() const {

  return true;
}

void BuffModSetMaxLoseHPConfig::Swap(BuffModSetMaxLoseHPConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(percent_, other->percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModSetMaxLoseHPConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModSetMaxLoseHPConfig_descriptor_;
  metadata.reflection = BuffModSetMaxLoseHPConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModAdjustReflectedDamageConfig::kActiveFieldNumber;
const int BuffModAdjustReflectedDamageConfig::kDelayTimeFieldNumber;
const int BuffModAdjustReflectedDamageConfig::kPercentFieldNumber;
#endif  // !_MSC_VER

BuffModAdjustReflectedDamageConfig::BuffModAdjustReflectedDamageConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModAdjustReflectedDamageConfig)
}

void BuffModAdjustReflectedDamageConfig::InitAsDefaultInstance() {
}

BuffModAdjustReflectedDamageConfig::BuffModAdjustReflectedDamageConfig(const BuffModAdjustReflectedDamageConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModAdjustReflectedDamageConfig)
}

void BuffModAdjustReflectedDamageConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  percent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModAdjustReflectedDamageConfig::~BuffModAdjustReflectedDamageConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModAdjustReflectedDamageConfig)
  SharedDtor();
}

void BuffModAdjustReflectedDamageConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModAdjustReflectedDamageConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModAdjustReflectedDamageConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModAdjustReflectedDamageConfig_descriptor_;
}

const BuffModAdjustReflectedDamageConfig& BuffModAdjustReflectedDamageConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModAdjustReflectedDamageConfig* BuffModAdjustReflectedDamageConfig::default_instance_ = NULL;

BuffModAdjustReflectedDamageConfig* BuffModAdjustReflectedDamageConfig::New() const {
  return new BuffModAdjustReflectedDamageConfig;
}

void BuffModAdjustReflectedDamageConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModAdjustReflectedDamageConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(active_, percent_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModAdjustReflectedDamageConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModAdjustReflectedDamageConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Percent;
        break;
      }

      // optional int32 Percent = 3;
      case 3: {
        if (tag == 24) {
         parse_Percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModAdjustReflectedDamageConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModAdjustReflectedDamageConfig)
  return false;
#undef DO_
}

void BuffModAdjustReflectedDamageConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModAdjustReflectedDamageConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional int32 Percent = 3;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->percent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModAdjustReflectedDamageConfig)
}

::google::protobuf::uint8* BuffModAdjustReflectedDamageConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModAdjustReflectedDamageConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional int32 Percent = 3;
  if (has_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->percent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModAdjustReflectedDamageConfig)
  return target;
}

int BuffModAdjustReflectedDamageConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional int32 Percent = 3;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModAdjustReflectedDamageConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModAdjustReflectedDamageConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModAdjustReflectedDamageConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModAdjustReflectedDamageConfig::MergeFrom(const BuffModAdjustReflectedDamageConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_percent()) {
      set_percent(from.percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModAdjustReflectedDamageConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModAdjustReflectedDamageConfig::CopyFrom(const BuffModAdjustReflectedDamageConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModAdjustReflectedDamageConfig::IsInitialized() const {

  return true;
}

void BuffModAdjustReflectedDamageConfig::Swap(BuffModAdjustReflectedDamageConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(percent_, other->percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModAdjustReflectedDamageConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModAdjustReflectedDamageConfig_descriptor_;
  metadata.reflection = BuffModAdjustReflectedDamageConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModActiveUIEffectConfig::kActiveFieldNumber;
const int BuffModActiveUIEffectConfig::kDelayTimeFieldNumber;
const int BuffModActiveUIEffectConfig::kStartEffectFieldNumber;
const int BuffModActiveUIEffectConfig::kLastEffectFieldNumber;
const int BuffModActiveUIEffectConfig::kEndEffectFieldNumber;
#endif  // !_MSC_VER

BuffModActiveUIEffectConfig::BuffModActiveUIEffectConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModActiveUIEffectConfig)
}

void BuffModActiveUIEffectConfig::InitAsDefaultInstance() {
}

BuffModActiveUIEffectConfig::BuffModActiveUIEffectConfig(const BuffModActiveUIEffectConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModActiveUIEffectConfig)
}

void BuffModActiveUIEffectConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  starteffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lasteffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endeffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModActiveUIEffectConfig::~BuffModActiveUIEffectConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModActiveUIEffectConfig)
  SharedDtor();
}

void BuffModActiveUIEffectConfig::SharedDtor() {
  if (starteffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete starteffect_;
  }
  if (lasteffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lasteffect_;
  }
  if (endeffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endeffect_;
  }
  if (this != default_instance_) {
  }
}

void BuffModActiveUIEffectConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModActiveUIEffectConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModActiveUIEffectConfig_descriptor_;
}

const BuffModActiveUIEffectConfig& BuffModActiveUIEffectConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModActiveUIEffectConfig* BuffModActiveUIEffectConfig::default_instance_ = NULL;

BuffModActiveUIEffectConfig* BuffModActiveUIEffectConfig::New() const {
  return new BuffModActiveUIEffectConfig;
}

void BuffModActiveUIEffectConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModActiveUIEffectConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(active_, delaytime_);
    if (has_starteffect()) {
      if (starteffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        starteffect_->clear();
      }
    }
    if (has_lasteffect()) {
      if (lasteffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lasteffect_->clear();
      }
    }
    if (has_endeffect()) {
      if (endeffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        endeffect_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModActiveUIEffectConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModActiveUIEffectConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_StartEffect;
        break;
      }

      // optional string StartEffect = 3;
      case 3: {
        if (tag == 26) {
         parse_StartEffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starteffect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->starteffect().data(), this->starteffect().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "starteffect");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_LastEffect;
        break;
      }

      // optional string LastEffect = 4;
      case 4: {
        if (tag == 34) {
         parse_LastEffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lasteffect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lasteffect().data(), this->lasteffect().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lasteffect");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_EndEffect;
        break;
      }

      // optional string EndEffect = 5;
      case 5: {
        if (tag == 42) {
         parse_EndEffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endeffect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endeffect().data(), this->endeffect().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "endeffect");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModActiveUIEffectConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModActiveUIEffectConfig)
  return false;
#undef DO_
}

void BuffModActiveUIEffectConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModActiveUIEffectConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional string StartEffect = 3;
  if (has_starteffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starteffect().data(), this->starteffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "starteffect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->starteffect(), output);
  }

  // optional string LastEffect = 4;
  if (has_lasteffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lasteffect().data(), this->lasteffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lasteffect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->lasteffect(), output);
  }

  // optional string EndEffect = 5;
  if (has_endeffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endeffect().data(), this->endeffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endeffect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->endeffect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModActiveUIEffectConfig)
}

::google::protobuf::uint8* BuffModActiveUIEffectConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModActiveUIEffectConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional string StartEffect = 3;
  if (has_starteffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->starteffect().data(), this->starteffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "starteffect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->starteffect(), target);
  }

  // optional string LastEffect = 4;
  if (has_lasteffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lasteffect().data(), this->lasteffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lasteffect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lasteffect(), target);
  }

  // optional string EndEffect = 5;
  if (has_endeffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endeffect().data(), this->endeffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "endeffect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->endeffect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModActiveUIEffectConfig)
  return target;
}

int BuffModActiveUIEffectConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional string StartEffect = 3;
    if (has_starteffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starteffect());
    }

    // optional string LastEffect = 4;
    if (has_lasteffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lasteffect());
    }

    // optional string EndEffect = 5;
    if (has_endeffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endeffect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModActiveUIEffectConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModActiveUIEffectConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModActiveUIEffectConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModActiveUIEffectConfig::MergeFrom(const BuffModActiveUIEffectConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_starteffect()) {
      set_starteffect(from.starteffect());
    }
    if (from.has_lasteffect()) {
      set_lasteffect(from.lasteffect());
    }
    if (from.has_endeffect()) {
      set_endeffect(from.endeffect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModActiveUIEffectConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModActiveUIEffectConfig::CopyFrom(const BuffModActiveUIEffectConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModActiveUIEffectConfig::IsInitialized() const {

  return true;
}

void BuffModActiveUIEffectConfig::Swap(BuffModActiveUIEffectConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(starteffect_, other->starteffect_);
    std::swap(lasteffect_, other->lasteffect_);
    std::swap(endeffect_, other->endeffect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModActiveUIEffectConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModActiveUIEffectConfig_descriptor_;
  metadata.reflection = BuffModActiveUIEffectConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModAdjustBuffHitRateConfig::kActiveFieldNumber;
const int BuffModAdjustBuffHitRateConfig::kDelayTimeFieldNumber;
const int BuffModAdjustBuffHitRateConfig::kAdjustRateFieldNumber;
#endif  // !_MSC_VER

BuffModAdjustBuffHitRateConfig::BuffModAdjustBuffHitRateConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModAdjustBuffHitRateConfig)
}

void BuffModAdjustBuffHitRateConfig::InitAsDefaultInstance() {
}

BuffModAdjustBuffHitRateConfig::BuffModAdjustBuffHitRateConfig(const BuffModAdjustBuffHitRateConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModAdjustBuffHitRateConfig)
}

void BuffModAdjustBuffHitRateConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  adjustrate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModAdjustBuffHitRateConfig::~BuffModAdjustBuffHitRateConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModAdjustBuffHitRateConfig)
  SharedDtor();
}

void BuffModAdjustBuffHitRateConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModAdjustBuffHitRateConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModAdjustBuffHitRateConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModAdjustBuffHitRateConfig_descriptor_;
}

const BuffModAdjustBuffHitRateConfig& BuffModAdjustBuffHitRateConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModAdjustBuffHitRateConfig* BuffModAdjustBuffHitRateConfig::default_instance_ = NULL;

BuffModAdjustBuffHitRateConfig* BuffModAdjustBuffHitRateConfig::New() const {
  return new BuffModAdjustBuffHitRateConfig;
}

void BuffModAdjustBuffHitRateConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModAdjustBuffHitRateConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(active_, adjustrate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModAdjustBuffHitRateConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModAdjustBuffHitRateConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AdjustRate;
        break;
      }

      // optional int32 AdjustRate = 3;
      case 3: {
        if (tag == 24) {
         parse_AdjustRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adjustrate_)));
          set_has_adjustrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModAdjustBuffHitRateConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModAdjustBuffHitRateConfig)
  return false;
#undef DO_
}

void BuffModAdjustBuffHitRateConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModAdjustBuffHitRateConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional int32 AdjustRate = 3;
  if (has_adjustrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->adjustrate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModAdjustBuffHitRateConfig)
}

::google::protobuf::uint8* BuffModAdjustBuffHitRateConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModAdjustBuffHitRateConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional int32 AdjustRate = 3;
  if (has_adjustrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->adjustrate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModAdjustBuffHitRateConfig)
  return target;
}

int BuffModAdjustBuffHitRateConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional int32 AdjustRate = 3;
    if (has_adjustrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adjustrate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModAdjustBuffHitRateConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModAdjustBuffHitRateConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModAdjustBuffHitRateConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModAdjustBuffHitRateConfig::MergeFrom(const BuffModAdjustBuffHitRateConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_adjustrate()) {
      set_adjustrate(from.adjustrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModAdjustBuffHitRateConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModAdjustBuffHitRateConfig::CopyFrom(const BuffModAdjustBuffHitRateConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModAdjustBuffHitRateConfig::IsInitialized() const {

  return true;
}

void BuffModAdjustBuffHitRateConfig::Swap(BuffModAdjustBuffHitRateConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(adjustrate_, other->adjustrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModAdjustBuffHitRateConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModAdjustBuffHitRateConfig_descriptor_;
  metadata.reflection = BuffModAdjustBuffHitRateConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModLimitByMaxHpRateConfig::kActiveFieldNumber;
const int BuffModLimitByMaxHpRateConfig::kDelayTimeFieldNumber;
const int BuffModLimitByMaxHpRateConfig::kPercentFieldNumber;
#endif  // !_MSC_VER

BuffModLimitByMaxHpRateConfig::BuffModLimitByMaxHpRateConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModLimitByMaxHpRateConfig)
}

void BuffModLimitByMaxHpRateConfig::InitAsDefaultInstance() {
}

BuffModLimitByMaxHpRateConfig::BuffModLimitByMaxHpRateConfig(const BuffModLimitByMaxHpRateConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModLimitByMaxHpRateConfig)
}

void BuffModLimitByMaxHpRateConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  percent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModLimitByMaxHpRateConfig::~BuffModLimitByMaxHpRateConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModLimitByMaxHpRateConfig)
  SharedDtor();
}

void BuffModLimitByMaxHpRateConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModLimitByMaxHpRateConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModLimitByMaxHpRateConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModLimitByMaxHpRateConfig_descriptor_;
}

const BuffModLimitByMaxHpRateConfig& BuffModLimitByMaxHpRateConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModLimitByMaxHpRateConfig* BuffModLimitByMaxHpRateConfig::default_instance_ = NULL;

BuffModLimitByMaxHpRateConfig* BuffModLimitByMaxHpRateConfig::New() const {
  return new BuffModLimitByMaxHpRateConfig;
}

void BuffModLimitByMaxHpRateConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModLimitByMaxHpRateConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(active_, percent_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModLimitByMaxHpRateConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModLimitByMaxHpRateConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Percent;
        break;
      }

      // optional int32 Percent = 3;
      case 3: {
        if (tag == 24) {
         parse_Percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModLimitByMaxHpRateConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModLimitByMaxHpRateConfig)
  return false;
#undef DO_
}

void BuffModLimitByMaxHpRateConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModLimitByMaxHpRateConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // optional int32 Percent = 3;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->percent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModLimitByMaxHpRateConfig)
}

::google::protobuf::uint8* BuffModLimitByMaxHpRateConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModLimitByMaxHpRateConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // optional int32 Percent = 3;
  if (has_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->percent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModLimitByMaxHpRateConfig)
  return target;
}

int BuffModLimitByMaxHpRateConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional int32 Percent = 3;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModLimitByMaxHpRateConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModLimitByMaxHpRateConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModLimitByMaxHpRateConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModLimitByMaxHpRateConfig::MergeFrom(const BuffModLimitByMaxHpRateConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_percent()) {
      set_percent(from.percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModLimitByMaxHpRateConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModLimitByMaxHpRateConfig::CopyFrom(const BuffModLimitByMaxHpRateConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModLimitByMaxHpRateConfig::IsInitialized() const {

  return true;
}

void BuffModLimitByMaxHpRateConfig::Swap(BuffModLimitByMaxHpRateConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(percent_, other->percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModLimitByMaxHpRateConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModLimitByMaxHpRateConfig_descriptor_;
  metadata.reflection = BuffModLimitByMaxHpRateConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffModBattleArcherModifyConfig::kActiveFieldNumber;
const int BuffModBattleArcherModifyConfig::kDelayTimeFieldNumber;
const int BuffModBattleArcherModifyConfig::kKeyFieldNumber;
const int BuffModBattleArcherModifyConfig::kValueFieldNumber;
#endif  // !_MSC_VER

BuffModBattleArcherModifyConfig::BuffModBattleArcherModifyConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BuffModBattleArcherModifyConfig)
}

void BuffModBattleArcherModifyConfig::InitAsDefaultInstance() {
}

BuffModBattleArcherModifyConfig::BuffModBattleArcherModifyConfig(const BuffModBattleArcherModifyConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BuffModBattleArcherModifyConfig)
}

void BuffModBattleArcherModifyConfig::SharedCtor() {
  _cached_size_ = 0;
  active_ = false;
  delaytime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffModBattleArcherModifyConfig::~BuffModBattleArcherModifyConfig() {
  // @@protoc_insertion_point(destructor:pb.BuffModBattleArcherModifyConfig)
  SharedDtor();
}

void BuffModBattleArcherModifyConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffModBattleArcherModifyConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffModBattleArcherModifyConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffModBattleArcherModifyConfig_descriptor_;
}

const BuffModBattleArcherModifyConfig& BuffModBattleArcherModifyConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  return *default_instance_;
}

BuffModBattleArcherModifyConfig* BuffModBattleArcherModifyConfig::default_instance_ = NULL;

BuffModBattleArcherModifyConfig* BuffModBattleArcherModifyConfig::New() const {
  return new BuffModBattleArcherModifyConfig;
}

void BuffModBattleArcherModifyConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffModBattleArcherModifyConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(active_, delaytime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  key_.Clear();
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffModBattleArcherModifyConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BuffModBattleArcherModifyConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Active = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Key;
        break;
      }

      // repeated int32 Key = 3;
      case 3: {
        if (tag == 24) {
         parse_Key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_key())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_key())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Key;
        if (input->ExpectTag(32)) goto parse_Value;
        break;
      }

      // repeated int32 Value = 4;
      case 4: {
        if (tag == 32) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_value())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BuffModBattleArcherModifyConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BuffModBattleArcherModifyConfig)
  return false;
#undef DO_
}

void BuffModBattleArcherModifyConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BuffModBattleArcherModifyConfig)
  // optional bool Active = 1;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delaytime(), output);
  }

  // repeated int32 Key = 3;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->key(i), output);
  }

  // repeated int32 Value = 4;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BuffModBattleArcherModifyConfig)
}

::google::protobuf::uint8* BuffModBattleArcherModifyConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BuffModBattleArcherModifyConfig)
  // optional bool Active = 1;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // optional int32 DelayTime = 2;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delaytime(), target);
  }

  // repeated int32 Key = 3;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->key(i), target);
  }

  // repeated int32 Value = 4;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BuffModBattleArcherModifyConfig)
  return target;
}

int BuffModBattleArcherModifyConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Active = 1;
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 2;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

  }
  // repeated int32 Key = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->key_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->key(i));
    }
    total_size += 1 * this->key_size() + data_size;
  }

  // repeated int32 Value = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffModBattleArcherModifyConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffModBattleArcherModifyConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffModBattleArcherModifyConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffModBattleArcherModifyConfig::MergeFrom(const BuffModBattleArcherModifyConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffModBattleArcherModifyConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffModBattleArcherModifyConfig::CopyFrom(const BuffModBattleArcherModifyConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffModBattleArcherModifyConfig::IsInitialized() const {

  return true;
}

void BuffModBattleArcherModifyConfig::Swap(BuffModBattleArcherModifyConfig* other) {
  if (other != this) {
    std::swap(active_, other->active_);
    std::swap(delaytime_, other->delaytime_);
    key_.Swap(&other->key_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffModBattleArcherModifyConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffModBattleArcherModifyConfig_descriptor_;
  metadata.reflection = BuffModBattleArcherModifyConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
