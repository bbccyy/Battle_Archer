// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/TowerDefense.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/TowerDefense.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TTowerDefenseAchievementInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerDefenseAchievementInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerDefenseWaveDropInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerDefenseWaveDropInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerDefenseGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerDefenseGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerDefenseSetFormationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerDefenseSetFormationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerDefenseDoBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerDefenseDoBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerDefenseDoBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerDefenseDoBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerDefenseReportBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerDefenseReportBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerDefenseReportBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerDefenseReportBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerDefenseEndBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerDefenseEndBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerDefenseReceiveAchievementRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerDefenseReceiveAchievementRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerDefenseReceiveAchievementRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerDefenseReceiveAchievementRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerDefenseReceiveAllAchievementRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerDefenseReceiveAllAchievementRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerDefenseWaveRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerDefenseWaveRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerDefenseGetWaveRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerDefenseGetWaveRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTowerDefenseGetWaveRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTowerDefenseGetWaveRankRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fTowerDefense_2eproto() {
  protobuf_AddDesc_net_2fTowerDefense_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/TowerDefense.proto");
  GOOGLE_CHECK(file != NULL);
  TTowerDefenseAchievementInfo_descriptor_ = file->message_type(0);
  static const int TTowerDefenseAchievementInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseAchievementInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseAchievementInfo, rewardtime_),
  };
  TTowerDefenseAchievementInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerDefenseAchievementInfo_descriptor_,
      TTowerDefenseAchievementInfo::default_instance_,
      TTowerDefenseAchievementInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseAchievementInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseAchievementInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerDefenseAchievementInfo));
  TTowerDefenseWaveDropInfo_descriptor_ = file->message_type(1);
  static const int TTowerDefenseWaveDropInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseWaveDropInfo, wavenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseWaveDropInfo, droparray_),
  };
  TTowerDefenseWaveDropInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerDefenseWaveDropInfo_descriptor_,
      TTowerDefenseWaveDropInfo::default_instance_,
      TTowerDefenseWaveDropInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseWaveDropInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseWaveDropInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerDefenseWaveDropInfo));
  TTowerDefenseGetInfoRsp_descriptor_ = file->message_type(2);
  static const int TTowerDefenseGetInfoRsp_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseGetInfoRsp, maxwavenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseGetInfoRsp, maxroundnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseGetInfoRsp, challengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseGetInfoRsp, incchallengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseGetInfoRsp, refreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseGetInfoRsp, plotendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseGetInfoRsp, arrformation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseGetInfoRsp, arrachievementinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseGetInfoRsp, achievementwavenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseGetInfoRsp, curroundnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseGetInfoRsp, curbattleargs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseGetInfoRsp, arrdeadhid_),
  };
  TTowerDefenseGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerDefenseGetInfoRsp_descriptor_,
      TTowerDefenseGetInfoRsp::default_instance_,
      TTowerDefenseGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerDefenseGetInfoRsp));
  TTowerDefenseSetFormationReq_descriptor_ = file->message_type(3);
  static const int TTowerDefenseSetFormationReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseSetFormationReq, arrformation_),
  };
  TTowerDefenseSetFormationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerDefenseSetFormationReq_descriptor_,
      TTowerDefenseSetFormationReq::default_instance_,
      TTowerDefenseSetFormationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseSetFormationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseSetFormationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerDefenseSetFormationReq));
  TTowerDefenseDoBattleReq_descriptor_ = file->message_type(4);
  static const int TTowerDefenseDoBattleReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseDoBattleReq, battlecheckparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseDoBattleReq, roundnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseDoBattleReq, ishalfwaystart_),
  };
  TTowerDefenseDoBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerDefenseDoBattleReq_descriptor_,
      TTowerDefenseDoBattleReq::default_instance_,
      TTowerDefenseDoBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseDoBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseDoBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerDefenseDoBattleReq));
  TTowerDefenseDoBattleRsp_descriptor_ = file->message_type(5);
  static const int TTowerDefenseDoBattleRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseDoBattleRsp, wavesdroparray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseDoBattleRsp, battleargs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseDoBattleRsp, roundnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseDoBattleRsp, battleid_),
  };
  TTowerDefenseDoBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerDefenseDoBattleRsp_descriptor_,
      TTowerDefenseDoBattleRsp::default_instance_,
      TTowerDefenseDoBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseDoBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseDoBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerDefenseDoBattleRsp));
  TTowerDefenseReportBattleReq_descriptor_ = file->message_type(6);
  static const int TTowerDefenseReportBattleReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseReportBattleReq, battleresultbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseReportBattleReq, roundnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseReportBattleReq, battleid_),
  };
  TTowerDefenseReportBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerDefenseReportBattleReq_descriptor_,
      TTowerDefenseReportBattleReq::default_instance_,
      TTowerDefenseReportBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseReportBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseReportBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerDefenseReportBattleReq));
  TTowerDefenseReportBattleRsp_descriptor_ = file->message_type(7);
  static const int TTowerDefenseReportBattleRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseReportBattleRsp, droparray_),
  };
  TTowerDefenseReportBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerDefenseReportBattleRsp_descriptor_,
      TTowerDefenseReportBattleRsp::default_instance_,
      TTowerDefenseReportBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseReportBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseReportBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerDefenseReportBattleRsp));
  TTowerDefenseEndBattleRsp_descriptor_ = file->message_type(8);
  static const int TTowerDefenseEndBattleRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseEndBattleRsp, droparray_),
  };
  TTowerDefenseEndBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerDefenseEndBattleRsp_descriptor_,
      TTowerDefenseEndBattleRsp::default_instance_,
      TTowerDefenseEndBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseEndBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseEndBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerDefenseEndBattleRsp));
  TTowerDefenseReceiveAchievementRewardReq_descriptor_ = file->message_type(9);
  static const int TTowerDefenseReceiveAchievementRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseReceiveAchievementRewardReq, id_),
  };
  TTowerDefenseReceiveAchievementRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerDefenseReceiveAchievementRewardReq_descriptor_,
      TTowerDefenseReceiveAchievementRewardReq::default_instance_,
      TTowerDefenseReceiveAchievementRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseReceiveAchievementRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseReceiveAchievementRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerDefenseReceiveAchievementRewardReq));
  TTowerDefenseReceiveAchievementRewardRsp_descriptor_ = file->message_type(10);
  static const int TTowerDefenseReceiveAchievementRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseReceiveAchievementRewardRsp, droparray_),
  };
  TTowerDefenseReceiveAchievementRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerDefenseReceiveAchievementRewardRsp_descriptor_,
      TTowerDefenseReceiveAchievementRewardRsp::default_instance_,
      TTowerDefenseReceiveAchievementRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseReceiveAchievementRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseReceiveAchievementRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerDefenseReceiveAchievementRewardRsp));
  TTowerDefenseReceiveAllAchievementRewardRsp_descriptor_ = file->message_type(11);
  static const int TTowerDefenseReceiveAllAchievementRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseReceiveAllAchievementRewardRsp, droparray_),
  };
  TTowerDefenseReceiveAllAchievementRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerDefenseReceiveAllAchievementRewardRsp_descriptor_,
      TTowerDefenseReceiveAllAchievementRewardRsp::default_instance_,
      TTowerDefenseReceiveAllAchievementRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseReceiveAllAchievementRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseReceiveAllAchievementRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerDefenseReceiveAllAchievementRewardRsp));
  TTowerDefenseWaveRankInfo_descriptor_ = file->message_type(12);
  static const int TTowerDefenseWaveRankInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseWaveRankInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseWaveRankInfo, wavenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseWaveRankInfo, updatetime_),
  };
  TTowerDefenseWaveRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerDefenseWaveRankInfo_descriptor_,
      TTowerDefenseWaveRankInfo::default_instance_,
      TTowerDefenseWaveRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseWaveRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseWaveRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerDefenseWaveRankInfo));
  TTowerDefenseGetWaveRankReq_descriptor_ = file->message_type(13);
  static const int TTowerDefenseGetWaveRankReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseGetWaveRankReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseGetWaveRankReq, limit_),
  };
  TTowerDefenseGetWaveRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerDefenseGetWaveRankReq_descriptor_,
      TTowerDefenseGetWaveRankReq::default_instance_,
      TTowerDefenseGetWaveRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseGetWaveRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseGetWaveRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerDefenseGetWaveRankReq));
  TTowerDefenseGetWaveRankRsp_descriptor_ = file->message_type(14);
  static const int TTowerDefenseGetWaveRankRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseGetWaveRankRsp, rankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseGetWaveRankRsp, myrank_),
  };
  TTowerDefenseGetWaveRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTowerDefenseGetWaveRankRsp_descriptor_,
      TTowerDefenseGetWaveRankRsp::default_instance_,
      TTowerDefenseGetWaveRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseGetWaveRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTowerDefenseGetWaveRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTowerDefenseGetWaveRankRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fTowerDefense_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerDefenseAchievementInfo_descriptor_, &TTowerDefenseAchievementInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerDefenseWaveDropInfo_descriptor_, &TTowerDefenseWaveDropInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerDefenseGetInfoRsp_descriptor_, &TTowerDefenseGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerDefenseSetFormationReq_descriptor_, &TTowerDefenseSetFormationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerDefenseDoBattleReq_descriptor_, &TTowerDefenseDoBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerDefenseDoBattleRsp_descriptor_, &TTowerDefenseDoBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerDefenseReportBattleReq_descriptor_, &TTowerDefenseReportBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerDefenseReportBattleRsp_descriptor_, &TTowerDefenseReportBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerDefenseEndBattleRsp_descriptor_, &TTowerDefenseEndBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerDefenseReceiveAchievementRewardReq_descriptor_, &TTowerDefenseReceiveAchievementRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerDefenseReceiveAchievementRewardRsp_descriptor_, &TTowerDefenseReceiveAchievementRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerDefenseReceiveAllAchievementRewardRsp_descriptor_, &TTowerDefenseReceiveAllAchievementRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerDefenseWaveRankInfo_descriptor_, &TTowerDefenseWaveRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerDefenseGetWaveRankReq_descriptor_, &TTowerDefenseGetWaveRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTowerDefenseGetWaveRankRsp_descriptor_, &TTowerDefenseGetWaveRankRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fTowerDefense_2eproto() {
  delete TTowerDefenseAchievementInfo::default_instance_;
  delete TTowerDefenseAchievementInfo_reflection_;
  delete TTowerDefenseWaveDropInfo::default_instance_;
  delete TTowerDefenseWaveDropInfo_reflection_;
  delete TTowerDefenseGetInfoRsp::default_instance_;
  delete TTowerDefenseGetInfoRsp_reflection_;
  delete TTowerDefenseSetFormationReq::default_instance_;
  delete TTowerDefenseSetFormationReq_reflection_;
  delete TTowerDefenseDoBattleReq::default_instance_;
  delete TTowerDefenseDoBattleReq_reflection_;
  delete TTowerDefenseDoBattleRsp::default_instance_;
  delete TTowerDefenseDoBattleRsp_reflection_;
  delete TTowerDefenseReportBattleReq::default_instance_;
  delete TTowerDefenseReportBattleReq_reflection_;
  delete TTowerDefenseReportBattleRsp::default_instance_;
  delete TTowerDefenseReportBattleRsp_reflection_;
  delete TTowerDefenseEndBattleRsp::default_instance_;
  delete TTowerDefenseEndBattleRsp_reflection_;
  delete TTowerDefenseReceiveAchievementRewardReq::default_instance_;
  delete TTowerDefenseReceiveAchievementRewardReq_reflection_;
  delete TTowerDefenseReceiveAchievementRewardRsp::default_instance_;
  delete TTowerDefenseReceiveAchievementRewardRsp_reflection_;
  delete TTowerDefenseReceiveAllAchievementRewardRsp::default_instance_;
  delete TTowerDefenseReceiveAllAchievementRewardRsp_reflection_;
  delete TTowerDefenseWaveRankInfo::default_instance_;
  delete TTowerDefenseWaveRankInfo_reflection_;
  delete TTowerDefenseGetWaveRankReq::default_instance_;
  delete TTowerDefenseGetWaveRankReq_reflection_;
  delete TTowerDefenseGetWaveRankRsp::default_instance_;
  delete TTowerDefenseGetWaveRankRsp_reflection_;
}

void protobuf_AddDesc_net_2fTowerDefense_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026net/TowerDefense.proto\022\002pb\032\020net/Battle"
    ".proto\032\026net/CommonReward.proto\032\016net/User"
    ".proto\">\n\034TTowerDefenseAchievementInfo\022\n"
    "\n\002Id\030\001 \001(\r\022\022\n\nRewardTime\030\002 \001(\004\"R\n\031TTower"
    "DefenseWaveDropInfo\022\017\n\007WaveNum\030\001 \001(\r\022$\n\t"
    "DropArray\030\002 \003(\0132\021.pb.TCommonReward\"\360\002\n\027T"
    "TowerDefenseGetInfoRsp\022\022\n\nMaxWaveNum\030\001 \001"
    "(\r\022\023\n\013MaxRoundNum\030\002 \001(\r\022\024\n\014ChallengeNum\030"
    "\003 \001(\r\022\027\n\017IncChallengeNum\030\014 \001(\r\022\023\n\013Refres"
    "hTime\030\004 \001(\004\022\023\n\013PlotEndTime\030\005 \001(\004\022(\n\014ArrF"
    "ormation\030\006 \003(\0132\022.pb.TUnitFormation\022<\n\022Ar"
    "rAchievementInfo\030\007 \003(\0132 .pb.TTowerDefens"
    "eAchievementInfo\022\032\n\022AchievementWaveNum\030\010"
    " \001(\r\022\023\n\013CurRoundNum\030\t \001(\r\022&\n\rCurBattleAr"
    "gs\030\n \001(\0132\017.pb.TBattleArgs\022\022\n\nArrDeadHid\030"
    "\013 \003(\r\"H\n\034TTowerDefenseSetFormationReq\022(\n"
    "\014ArrFormation\030\001 \003(\0132\022.pb.TUnitFormation\""
    "u\n\030TTowerDefenseDoBattleReq\022/\n\020BattleChe"
    "ckParam\030\004 \001(\0132\025.pb.TBattleCheckParam\022\020\n\010"
    "RoundNum\030\002 \001(\r\022\026\n\016IsHalfwayStart\030\003 \001(\010\"\232"
    "\001\n\030TTowerDefenseDoBattleRsp\0225\n\016WavesDrop"
    "Array\030\001 \003(\0132\035.pb.TTowerDefenseWaveDropIn"
    "fo\022#\n\nBattleArgs\030\002 \001(\0132\017.pb.TBattleArgs\022"
    "\020\n\010RoundNum\030\003 \001(\r\022\020\n\010BattleId\030\004 \001(\r\"]\n\034T"
    "TowerDefenseReportBattleReq\022\031\n\021BattleRes"
    "ultBytes\030\001 \001(\014\022\020\n\010RoundNum\030\002 \001(\r\022\020\n\010Batt"
    "leId\030\003 \001(\r\"D\n\034TTowerDefenseReportBattleR"
    "sp\022$\n\tDropArray\030\001 \003(\0132\021.pb.TCommonReward"
    "\"A\n\031TTowerDefenseEndBattleRsp\022$\n\tDropArr"
    "ay\030\001 \003(\0132\021.pb.TCommonReward\"6\n(TTowerDef"
    "enseReceiveAchievementRewardReq\022\n\n\002Id\030\001 "
    "\001(\r\"P\n(TTowerDefenseReceiveAchievementRe"
    "wardRsp\022$\n\tDropArray\030\001 \003(\0132\021.pb.TCommonR"
    "eward\"S\n+TTowerDefenseReceiveAllAchievem"
    "entRewardRsp\022$\n\tDropArray\030\001 \003(\0132\021.pb.TCo"
    "mmonReward\"g\n\031TTowerDefenseWaveRankInfo\022"
    "%\n\010UserInfo\030\001 \001(\0132\023.pb.TUserSimpleInfo\022\017"
    "\n\007WaveNum\030\002 \001(\r\022\022\n\nUpdateTime\030\003 \001(\004\"<\n\033T"
    "TowerDefenseGetWaveRankReq\022\016\n\006Offset\030\001 \001"
    "(\r\022\r\n\005Limit\030\002 \001(\r\"]\n\033TTowerDefenseGetWav"
    "eRankRsp\022.\n\007RankArr\030\001 \003(\0132\035.pb.TTowerDef"
    "enseWaveRankInfo\022\016\n\006MyRank\030\002 \001(\005", 1672);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/TowerDefense.proto", &protobuf_RegisterTypes);
  TTowerDefenseAchievementInfo::default_instance_ = new TTowerDefenseAchievementInfo();
  TTowerDefenseWaveDropInfo::default_instance_ = new TTowerDefenseWaveDropInfo();
  TTowerDefenseGetInfoRsp::default_instance_ = new TTowerDefenseGetInfoRsp();
  TTowerDefenseSetFormationReq::default_instance_ = new TTowerDefenseSetFormationReq();
  TTowerDefenseDoBattleReq::default_instance_ = new TTowerDefenseDoBattleReq();
  TTowerDefenseDoBattleRsp::default_instance_ = new TTowerDefenseDoBattleRsp();
  TTowerDefenseReportBattleReq::default_instance_ = new TTowerDefenseReportBattleReq();
  TTowerDefenseReportBattleRsp::default_instance_ = new TTowerDefenseReportBattleRsp();
  TTowerDefenseEndBattleRsp::default_instance_ = new TTowerDefenseEndBattleRsp();
  TTowerDefenseReceiveAchievementRewardReq::default_instance_ = new TTowerDefenseReceiveAchievementRewardReq();
  TTowerDefenseReceiveAchievementRewardRsp::default_instance_ = new TTowerDefenseReceiveAchievementRewardRsp();
  TTowerDefenseReceiveAllAchievementRewardRsp::default_instance_ = new TTowerDefenseReceiveAllAchievementRewardRsp();
  TTowerDefenseWaveRankInfo::default_instance_ = new TTowerDefenseWaveRankInfo();
  TTowerDefenseGetWaveRankReq::default_instance_ = new TTowerDefenseGetWaveRankReq();
  TTowerDefenseGetWaveRankRsp::default_instance_ = new TTowerDefenseGetWaveRankRsp();
  TTowerDefenseAchievementInfo::default_instance_->InitAsDefaultInstance();
  TTowerDefenseWaveDropInfo::default_instance_->InitAsDefaultInstance();
  TTowerDefenseGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TTowerDefenseSetFormationReq::default_instance_->InitAsDefaultInstance();
  TTowerDefenseDoBattleReq::default_instance_->InitAsDefaultInstance();
  TTowerDefenseDoBattleRsp::default_instance_->InitAsDefaultInstance();
  TTowerDefenseReportBattleReq::default_instance_->InitAsDefaultInstance();
  TTowerDefenseReportBattleRsp::default_instance_->InitAsDefaultInstance();
  TTowerDefenseEndBattleRsp::default_instance_->InitAsDefaultInstance();
  TTowerDefenseReceiveAchievementRewardReq::default_instance_->InitAsDefaultInstance();
  TTowerDefenseReceiveAchievementRewardRsp::default_instance_->InitAsDefaultInstance();
  TTowerDefenseReceiveAllAchievementRewardRsp::default_instance_->InitAsDefaultInstance();
  TTowerDefenseWaveRankInfo::default_instance_->InitAsDefaultInstance();
  TTowerDefenseGetWaveRankReq::default_instance_->InitAsDefaultInstance();
  TTowerDefenseGetWaveRankRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fTowerDefense_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fTowerDefense_2eproto {
  StaticDescriptorInitializer_net_2fTowerDefense_2eproto() {
    protobuf_AddDesc_net_2fTowerDefense_2eproto();
  }
} static_descriptor_initializer_net_2fTowerDefense_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TTowerDefenseAchievementInfo::kIdFieldNumber;
const int TTowerDefenseAchievementInfo::kRewardTimeFieldNumber;
#endif  // !_MSC_VER

TTowerDefenseAchievementInfo::TTowerDefenseAchievementInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerDefenseAchievementInfo)
}

void TTowerDefenseAchievementInfo::InitAsDefaultInstance() {
}

TTowerDefenseAchievementInfo::TTowerDefenseAchievementInfo(const TTowerDefenseAchievementInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerDefenseAchievementInfo)
}

void TTowerDefenseAchievementInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  rewardtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerDefenseAchievementInfo::~TTowerDefenseAchievementInfo() {
  // @@protoc_insertion_point(destructor:pb.TTowerDefenseAchievementInfo)
  SharedDtor();
}

void TTowerDefenseAchievementInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerDefenseAchievementInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerDefenseAchievementInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerDefenseAchievementInfo_descriptor_;
}

const TTowerDefenseAchievementInfo& TTowerDefenseAchievementInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerDefense_2eproto();
  return *default_instance_;
}

TTowerDefenseAchievementInfo* TTowerDefenseAchievementInfo::default_instance_ = NULL;

TTowerDefenseAchievementInfo* TTowerDefenseAchievementInfo::New() const {
  return new TTowerDefenseAchievementInfo;
}

void TTowerDefenseAchievementInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTowerDefenseAchievementInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rewardtime_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerDefenseAchievementInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerDefenseAchievementInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RewardTime;
        break;
      }

      // optional uint64 RewardTime = 2;
      case 2: {
        if (tag == 16) {
         parse_RewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rewardtime_)));
          set_has_rewardtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerDefenseAchievementInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerDefenseAchievementInfo)
  return false;
#undef DO_
}

void TTowerDefenseAchievementInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerDefenseAchievementInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint64 RewardTime = 2;
  if (has_rewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->rewardtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerDefenseAchievementInfo)
}

::google::protobuf::uint8* TTowerDefenseAchievementInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerDefenseAchievementInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint64 RewardTime = 2;
  if (has_rewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->rewardtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerDefenseAchievementInfo)
  return target;
}

int TTowerDefenseAchievementInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 RewardTime = 2;
    if (has_rewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rewardtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerDefenseAchievementInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerDefenseAchievementInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerDefenseAchievementInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerDefenseAchievementInfo::MergeFrom(const TTowerDefenseAchievementInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rewardtime()) {
      set_rewardtime(from.rewardtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerDefenseAchievementInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerDefenseAchievementInfo::CopyFrom(const TTowerDefenseAchievementInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerDefenseAchievementInfo::IsInitialized() const {

  return true;
}

void TTowerDefenseAchievementInfo::Swap(TTowerDefenseAchievementInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rewardtime_, other->rewardtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerDefenseAchievementInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerDefenseAchievementInfo_descriptor_;
  metadata.reflection = TTowerDefenseAchievementInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerDefenseWaveDropInfo::kWaveNumFieldNumber;
const int TTowerDefenseWaveDropInfo::kDropArrayFieldNumber;
#endif  // !_MSC_VER

TTowerDefenseWaveDropInfo::TTowerDefenseWaveDropInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerDefenseWaveDropInfo)
}

void TTowerDefenseWaveDropInfo::InitAsDefaultInstance() {
}

TTowerDefenseWaveDropInfo::TTowerDefenseWaveDropInfo(const TTowerDefenseWaveDropInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerDefenseWaveDropInfo)
}

void TTowerDefenseWaveDropInfo::SharedCtor() {
  _cached_size_ = 0;
  wavenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerDefenseWaveDropInfo::~TTowerDefenseWaveDropInfo() {
  // @@protoc_insertion_point(destructor:pb.TTowerDefenseWaveDropInfo)
  SharedDtor();
}

void TTowerDefenseWaveDropInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerDefenseWaveDropInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerDefenseWaveDropInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerDefenseWaveDropInfo_descriptor_;
}

const TTowerDefenseWaveDropInfo& TTowerDefenseWaveDropInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerDefense_2eproto();
  return *default_instance_;
}

TTowerDefenseWaveDropInfo* TTowerDefenseWaveDropInfo::default_instance_ = NULL;

TTowerDefenseWaveDropInfo* TTowerDefenseWaveDropInfo::New() const {
  return new TTowerDefenseWaveDropInfo;
}

void TTowerDefenseWaveDropInfo::Clear() {
  wavenum_ = 0u;
  droparray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerDefenseWaveDropInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerDefenseWaveDropInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 WaveNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wavenum_)));
          set_has_wavenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DropArray;
        break;
      }

      // repeated .pb.TCommonReward DropArray = 2;
      case 2: {
        if (tag == 18) {
         parse_DropArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_droparray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DropArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerDefenseWaveDropInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerDefenseWaveDropInfo)
  return false;
#undef DO_
}

void TTowerDefenseWaveDropInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerDefenseWaveDropInfo)
  // optional uint32 WaveNum = 1;
  if (has_wavenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wavenum(), output);
  }

  // repeated .pb.TCommonReward DropArray = 2;
  for (int i = 0; i < this->droparray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->droparray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerDefenseWaveDropInfo)
}

::google::protobuf::uint8* TTowerDefenseWaveDropInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerDefenseWaveDropInfo)
  // optional uint32 WaveNum = 1;
  if (has_wavenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wavenum(), target);
  }

  // repeated .pb.TCommonReward DropArray = 2;
  for (int i = 0; i < this->droparray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->droparray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerDefenseWaveDropInfo)
  return target;
}

int TTowerDefenseWaveDropInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 WaveNum = 1;
    if (has_wavenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wavenum());
    }

  }
  // repeated .pb.TCommonReward DropArray = 2;
  total_size += 1 * this->droparray_size();
  for (int i = 0; i < this->droparray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->droparray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerDefenseWaveDropInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerDefenseWaveDropInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerDefenseWaveDropInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerDefenseWaveDropInfo::MergeFrom(const TTowerDefenseWaveDropInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  droparray_.MergeFrom(from.droparray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wavenum()) {
      set_wavenum(from.wavenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerDefenseWaveDropInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerDefenseWaveDropInfo::CopyFrom(const TTowerDefenseWaveDropInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerDefenseWaveDropInfo::IsInitialized() const {

  return true;
}

void TTowerDefenseWaveDropInfo::Swap(TTowerDefenseWaveDropInfo* other) {
  if (other != this) {
    std::swap(wavenum_, other->wavenum_);
    droparray_.Swap(&other->droparray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerDefenseWaveDropInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerDefenseWaveDropInfo_descriptor_;
  metadata.reflection = TTowerDefenseWaveDropInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerDefenseGetInfoRsp::kMaxWaveNumFieldNumber;
const int TTowerDefenseGetInfoRsp::kMaxRoundNumFieldNumber;
const int TTowerDefenseGetInfoRsp::kChallengeNumFieldNumber;
const int TTowerDefenseGetInfoRsp::kIncChallengeNumFieldNumber;
const int TTowerDefenseGetInfoRsp::kRefreshTimeFieldNumber;
const int TTowerDefenseGetInfoRsp::kPlotEndTimeFieldNumber;
const int TTowerDefenseGetInfoRsp::kArrFormationFieldNumber;
const int TTowerDefenseGetInfoRsp::kArrAchievementInfoFieldNumber;
const int TTowerDefenseGetInfoRsp::kAchievementWaveNumFieldNumber;
const int TTowerDefenseGetInfoRsp::kCurRoundNumFieldNumber;
const int TTowerDefenseGetInfoRsp::kCurBattleArgsFieldNumber;
const int TTowerDefenseGetInfoRsp::kArrDeadHidFieldNumber;
#endif  // !_MSC_VER

TTowerDefenseGetInfoRsp::TTowerDefenseGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerDefenseGetInfoRsp)
}

void TTowerDefenseGetInfoRsp::InitAsDefaultInstance() {
  curbattleargs_ = const_cast< ::pb::TBattleArgs*>(&::pb::TBattleArgs::default_instance());
}

TTowerDefenseGetInfoRsp::TTowerDefenseGetInfoRsp(const TTowerDefenseGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerDefenseGetInfoRsp)
}

void TTowerDefenseGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  maxwavenum_ = 0u;
  maxroundnum_ = 0u;
  challengenum_ = 0u;
  incchallengenum_ = 0u;
  refreshtime_ = GOOGLE_ULONGLONG(0);
  plotendtime_ = GOOGLE_ULONGLONG(0);
  achievementwavenum_ = 0u;
  curroundnum_ = 0u;
  curbattleargs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerDefenseGetInfoRsp::~TTowerDefenseGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerDefenseGetInfoRsp)
  SharedDtor();
}

void TTowerDefenseGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete curbattleargs_;
  }
}

void TTowerDefenseGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerDefenseGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerDefenseGetInfoRsp_descriptor_;
}

const TTowerDefenseGetInfoRsp& TTowerDefenseGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerDefense_2eproto();
  return *default_instance_;
}

TTowerDefenseGetInfoRsp* TTowerDefenseGetInfoRsp::default_instance_ = NULL;

TTowerDefenseGetInfoRsp* TTowerDefenseGetInfoRsp::New() const {
  return new TTowerDefenseGetInfoRsp;
}

void TTowerDefenseGetInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTowerDefenseGetInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(maxwavenum_, plotendtime_);
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(achievementwavenum_, curroundnum_);
    if (has_curbattleargs()) {
      if (curbattleargs_ != NULL) curbattleargs_->::pb::TBattleArgs::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrformation_.Clear();
  arrachievementinfo_.Clear();
  arrdeadhid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerDefenseGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerDefenseGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MaxWaveNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxwavenum_)));
          set_has_maxwavenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MaxRoundNum;
        break;
      }

      // optional uint32 MaxRoundNum = 2;
      case 2: {
        if (tag == 16) {
         parse_MaxRoundNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxroundnum_)));
          set_has_maxroundnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ChallengeNum;
        break;
      }

      // optional uint32 ChallengeNum = 3;
      case 3: {
        if (tag == 24) {
         parse_ChallengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengenum_)));
          set_has_challengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RefreshTime;
        break;
      }

      // optional uint64 RefreshTime = 4;
      case 4: {
        if (tag == 32) {
         parse_RefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refreshtime_)));
          set_has_refreshtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_PlotEndTime;
        break;
      }

      // optional uint64 PlotEndTime = 5;
      case 5: {
        if (tag == 40) {
         parse_PlotEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &plotendtime_)));
          set_has_plotendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ArrFormation;
        break;
      }

      // repeated .pb.TUnitFormation ArrFormation = 6;
      case 6: {
        if (tag == 50) {
         parse_ArrFormation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrformation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ArrFormation;
        if (input->ExpectTag(58)) goto parse_ArrAchievementInfo;
        break;
      }

      // repeated .pb.TTowerDefenseAchievementInfo ArrAchievementInfo = 7;
      case 7: {
        if (tag == 58) {
         parse_ArrAchievementInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrachievementinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ArrAchievementInfo;
        if (input->ExpectTag(64)) goto parse_AchievementWaveNum;
        break;
      }

      // optional uint32 AchievementWaveNum = 8;
      case 8: {
        if (tag == 64) {
         parse_AchievementWaveNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievementwavenum_)));
          set_has_achievementwavenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_CurRoundNum;
        break;
      }

      // optional uint32 CurRoundNum = 9;
      case 9: {
        if (tag == 72) {
         parse_CurRoundNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curroundnum_)));
          set_has_curroundnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_CurBattleArgs;
        break;
      }

      // optional .pb.TBattleArgs CurBattleArgs = 10;
      case 10: {
        if (tag == 82) {
         parse_CurBattleArgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curbattleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ArrDeadHid;
        break;
      }

      // repeated uint32 ArrDeadHid = 11;
      case 11: {
        if (tag == 88) {
         parse_ArrDeadHid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_arrdeadhid())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_arrdeadhid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ArrDeadHid;
        if (input->ExpectTag(96)) goto parse_IncChallengeNum;
        break;
      }

      // optional uint32 IncChallengeNum = 12;
      case 12: {
        if (tag == 96) {
         parse_IncChallengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &incchallengenum_)));
          set_has_incchallengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerDefenseGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerDefenseGetInfoRsp)
  return false;
#undef DO_
}

void TTowerDefenseGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerDefenseGetInfoRsp)
  // optional uint32 MaxWaveNum = 1;
  if (has_maxwavenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maxwavenum(), output);
  }

  // optional uint32 MaxRoundNum = 2;
  if (has_maxroundnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxroundnum(), output);
  }

  // optional uint32 ChallengeNum = 3;
  if (has_challengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->challengenum(), output);
  }

  // optional uint64 RefreshTime = 4;
  if (has_refreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->refreshtime(), output);
  }

  // optional uint64 PlotEndTime = 5;
  if (has_plotendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->plotendtime(), output);
  }

  // repeated .pb.TUnitFormation ArrFormation = 6;
  for (int i = 0; i < this->arrformation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->arrformation(i), output);
  }

  // repeated .pb.TTowerDefenseAchievementInfo ArrAchievementInfo = 7;
  for (int i = 0; i < this->arrachievementinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->arrachievementinfo(i), output);
  }

  // optional uint32 AchievementWaveNum = 8;
  if (has_achievementwavenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->achievementwavenum(), output);
  }

  // optional uint32 CurRoundNum = 9;
  if (has_curroundnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->curroundnum(), output);
  }

  // optional .pb.TBattleArgs CurBattleArgs = 10;
  if (has_curbattleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->curbattleargs(), output);
  }

  // repeated uint32 ArrDeadHid = 11;
  for (int i = 0; i < this->arrdeadhid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->arrdeadhid(i), output);
  }

  // optional uint32 IncChallengeNum = 12;
  if (has_incchallengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->incchallengenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerDefenseGetInfoRsp)
}

::google::protobuf::uint8* TTowerDefenseGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerDefenseGetInfoRsp)
  // optional uint32 MaxWaveNum = 1;
  if (has_maxwavenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maxwavenum(), target);
  }

  // optional uint32 MaxRoundNum = 2;
  if (has_maxroundnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxroundnum(), target);
  }

  // optional uint32 ChallengeNum = 3;
  if (has_challengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->challengenum(), target);
  }

  // optional uint64 RefreshTime = 4;
  if (has_refreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->refreshtime(), target);
  }

  // optional uint64 PlotEndTime = 5;
  if (has_plotendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->plotendtime(), target);
  }

  // repeated .pb.TUnitFormation ArrFormation = 6;
  for (int i = 0; i < this->arrformation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->arrformation(i), target);
  }

  // repeated .pb.TTowerDefenseAchievementInfo ArrAchievementInfo = 7;
  for (int i = 0; i < this->arrachievementinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->arrachievementinfo(i), target);
  }

  // optional uint32 AchievementWaveNum = 8;
  if (has_achievementwavenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->achievementwavenum(), target);
  }

  // optional uint32 CurRoundNum = 9;
  if (has_curroundnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->curroundnum(), target);
  }

  // optional .pb.TBattleArgs CurBattleArgs = 10;
  if (has_curbattleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->curbattleargs(), target);
  }

  // repeated uint32 ArrDeadHid = 11;
  for (int i = 0; i < this->arrdeadhid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(11, this->arrdeadhid(i), target);
  }

  // optional uint32 IncChallengeNum = 12;
  if (has_incchallengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->incchallengenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerDefenseGetInfoRsp)
  return target;
}

int TTowerDefenseGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MaxWaveNum = 1;
    if (has_maxwavenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxwavenum());
    }

    // optional uint32 MaxRoundNum = 2;
    if (has_maxroundnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxroundnum());
    }

    // optional uint32 ChallengeNum = 3;
    if (has_challengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengenum());
    }

    // optional uint32 IncChallengeNum = 12;
    if (has_incchallengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->incchallengenum());
    }

    // optional uint64 RefreshTime = 4;
    if (has_refreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refreshtime());
    }

    // optional uint64 PlotEndTime = 5;
    if (has_plotendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->plotendtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 AchievementWaveNum = 8;
    if (has_achievementwavenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievementwavenum());
    }

    // optional uint32 CurRoundNum = 9;
    if (has_curroundnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curroundnum());
    }

    // optional .pb.TBattleArgs CurBattleArgs = 10;
    if (has_curbattleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->curbattleargs());
    }

  }
  // repeated .pb.TUnitFormation ArrFormation = 6;
  total_size += 1 * this->arrformation_size();
  for (int i = 0; i < this->arrformation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrformation(i));
  }

  // repeated .pb.TTowerDefenseAchievementInfo ArrAchievementInfo = 7;
  total_size += 1 * this->arrachievementinfo_size();
  for (int i = 0; i < this->arrachievementinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrachievementinfo(i));
  }

  // repeated uint32 ArrDeadHid = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->arrdeadhid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->arrdeadhid(i));
    }
    total_size += 1 * this->arrdeadhid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerDefenseGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerDefenseGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerDefenseGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerDefenseGetInfoRsp::MergeFrom(const TTowerDefenseGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrformation_.MergeFrom(from.arrformation_);
  arrachievementinfo_.MergeFrom(from.arrachievementinfo_);
  arrdeadhid_.MergeFrom(from.arrdeadhid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxwavenum()) {
      set_maxwavenum(from.maxwavenum());
    }
    if (from.has_maxroundnum()) {
      set_maxroundnum(from.maxroundnum());
    }
    if (from.has_challengenum()) {
      set_challengenum(from.challengenum());
    }
    if (from.has_incchallengenum()) {
      set_incchallengenum(from.incchallengenum());
    }
    if (from.has_refreshtime()) {
      set_refreshtime(from.refreshtime());
    }
    if (from.has_plotendtime()) {
      set_plotendtime(from.plotendtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_achievementwavenum()) {
      set_achievementwavenum(from.achievementwavenum());
    }
    if (from.has_curroundnum()) {
      set_curroundnum(from.curroundnum());
    }
    if (from.has_curbattleargs()) {
      mutable_curbattleargs()->::pb::TBattleArgs::MergeFrom(from.curbattleargs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerDefenseGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerDefenseGetInfoRsp::CopyFrom(const TTowerDefenseGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerDefenseGetInfoRsp::IsInitialized() const {

  if (has_curbattleargs()) {
    if (!this->curbattleargs().IsInitialized()) return false;
  }
  return true;
}

void TTowerDefenseGetInfoRsp::Swap(TTowerDefenseGetInfoRsp* other) {
  if (other != this) {
    std::swap(maxwavenum_, other->maxwavenum_);
    std::swap(maxroundnum_, other->maxroundnum_);
    std::swap(challengenum_, other->challengenum_);
    std::swap(incchallengenum_, other->incchallengenum_);
    std::swap(refreshtime_, other->refreshtime_);
    std::swap(plotendtime_, other->plotendtime_);
    arrformation_.Swap(&other->arrformation_);
    arrachievementinfo_.Swap(&other->arrachievementinfo_);
    std::swap(achievementwavenum_, other->achievementwavenum_);
    std::swap(curroundnum_, other->curroundnum_);
    std::swap(curbattleargs_, other->curbattleargs_);
    arrdeadhid_.Swap(&other->arrdeadhid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerDefenseGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerDefenseGetInfoRsp_descriptor_;
  metadata.reflection = TTowerDefenseGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerDefenseSetFormationReq::kArrFormationFieldNumber;
#endif  // !_MSC_VER

TTowerDefenseSetFormationReq::TTowerDefenseSetFormationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerDefenseSetFormationReq)
}

void TTowerDefenseSetFormationReq::InitAsDefaultInstance() {
}

TTowerDefenseSetFormationReq::TTowerDefenseSetFormationReq(const TTowerDefenseSetFormationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerDefenseSetFormationReq)
}

void TTowerDefenseSetFormationReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerDefenseSetFormationReq::~TTowerDefenseSetFormationReq() {
  // @@protoc_insertion_point(destructor:pb.TTowerDefenseSetFormationReq)
  SharedDtor();
}

void TTowerDefenseSetFormationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerDefenseSetFormationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerDefenseSetFormationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerDefenseSetFormationReq_descriptor_;
}

const TTowerDefenseSetFormationReq& TTowerDefenseSetFormationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerDefense_2eproto();
  return *default_instance_;
}

TTowerDefenseSetFormationReq* TTowerDefenseSetFormationReq::default_instance_ = NULL;

TTowerDefenseSetFormationReq* TTowerDefenseSetFormationReq::New() const {
  return new TTowerDefenseSetFormationReq;
}

void TTowerDefenseSetFormationReq::Clear() {
  arrformation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerDefenseSetFormationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerDefenseSetFormationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUnitFormation ArrFormation = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrFormation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrformation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrFormation;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerDefenseSetFormationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerDefenseSetFormationReq)
  return false;
#undef DO_
}

void TTowerDefenseSetFormationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerDefenseSetFormationReq)
  // repeated .pb.TUnitFormation ArrFormation = 1;
  for (int i = 0; i < this->arrformation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrformation(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerDefenseSetFormationReq)
}

::google::protobuf::uint8* TTowerDefenseSetFormationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerDefenseSetFormationReq)
  // repeated .pb.TUnitFormation ArrFormation = 1;
  for (int i = 0; i < this->arrformation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrformation(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerDefenseSetFormationReq)
  return target;
}

int TTowerDefenseSetFormationReq::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TUnitFormation ArrFormation = 1;
  total_size += 1 * this->arrformation_size();
  for (int i = 0; i < this->arrformation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrformation(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerDefenseSetFormationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerDefenseSetFormationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerDefenseSetFormationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerDefenseSetFormationReq::MergeFrom(const TTowerDefenseSetFormationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrformation_.MergeFrom(from.arrformation_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerDefenseSetFormationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerDefenseSetFormationReq::CopyFrom(const TTowerDefenseSetFormationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerDefenseSetFormationReq::IsInitialized() const {

  return true;
}

void TTowerDefenseSetFormationReq::Swap(TTowerDefenseSetFormationReq* other) {
  if (other != this) {
    arrformation_.Swap(&other->arrformation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerDefenseSetFormationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerDefenseSetFormationReq_descriptor_;
  metadata.reflection = TTowerDefenseSetFormationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerDefenseDoBattleReq::kBattleCheckParamFieldNumber;
const int TTowerDefenseDoBattleReq::kRoundNumFieldNumber;
const int TTowerDefenseDoBattleReq::kIsHalfwayStartFieldNumber;
#endif  // !_MSC_VER

TTowerDefenseDoBattleReq::TTowerDefenseDoBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerDefenseDoBattleReq)
}

void TTowerDefenseDoBattleReq::InitAsDefaultInstance() {
  battlecheckparam_ = const_cast< ::pb::TBattleCheckParam*>(&::pb::TBattleCheckParam::default_instance());
}

TTowerDefenseDoBattleReq::TTowerDefenseDoBattleReq(const TTowerDefenseDoBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerDefenseDoBattleReq)
}

void TTowerDefenseDoBattleReq::SharedCtor() {
  _cached_size_ = 0;
  battlecheckparam_ = NULL;
  roundnum_ = 0u;
  ishalfwaystart_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerDefenseDoBattleReq::~TTowerDefenseDoBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TTowerDefenseDoBattleReq)
  SharedDtor();
}

void TTowerDefenseDoBattleReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlecheckparam_;
  }
}

void TTowerDefenseDoBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerDefenseDoBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerDefenseDoBattleReq_descriptor_;
}

const TTowerDefenseDoBattleReq& TTowerDefenseDoBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerDefense_2eproto();
  return *default_instance_;
}

TTowerDefenseDoBattleReq* TTowerDefenseDoBattleReq::default_instance_ = NULL;

TTowerDefenseDoBattleReq* TTowerDefenseDoBattleReq::New() const {
  return new TTowerDefenseDoBattleReq;
}

void TTowerDefenseDoBattleReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTowerDefenseDoBattleReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(roundnum_, ishalfwaystart_);
    if (has_battlecheckparam()) {
      if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerDefenseDoBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerDefenseDoBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RoundNum = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roundnum_)));
          set_has_roundnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsHalfwayStart;
        break;
      }

      // optional bool IsHalfwayStart = 3;
      case 3: {
        if (tag == 24) {
         parse_IsHalfwayStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishalfwaystart_)));
          set_has_ishalfwaystart();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BattleCheckParam;
        break;
      }

      // optional .pb.TBattleCheckParam BattleCheckParam = 4;
      case 4: {
        if (tag == 34) {
         parse_BattleCheckParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecheckparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerDefenseDoBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerDefenseDoBattleReq)
  return false;
#undef DO_
}

void TTowerDefenseDoBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerDefenseDoBattleReq)
  // optional uint32 RoundNum = 2;
  if (has_roundnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roundnum(), output);
  }

  // optional bool IsHalfwayStart = 3;
  if (has_ishalfwaystart()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ishalfwaystart(), output);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 4;
  if (has_battlecheckparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->battlecheckparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerDefenseDoBattleReq)
}

::google::protobuf::uint8* TTowerDefenseDoBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerDefenseDoBattleReq)
  // optional uint32 RoundNum = 2;
  if (has_roundnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roundnum(), target);
  }

  // optional bool IsHalfwayStart = 3;
  if (has_ishalfwaystart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ishalfwaystart(), target);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 4;
  if (has_battlecheckparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->battlecheckparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerDefenseDoBattleReq)
  return target;
}

int TTowerDefenseDoBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBattleCheckParam BattleCheckParam = 4;
    if (has_battlecheckparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecheckparam());
    }

    // optional uint32 RoundNum = 2;
    if (has_roundnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roundnum());
    }

    // optional bool IsHalfwayStart = 3;
    if (has_ishalfwaystart()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerDefenseDoBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerDefenseDoBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerDefenseDoBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerDefenseDoBattleReq::MergeFrom(const TTowerDefenseDoBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battlecheckparam()) {
      mutable_battlecheckparam()->::pb::TBattleCheckParam::MergeFrom(from.battlecheckparam());
    }
    if (from.has_roundnum()) {
      set_roundnum(from.roundnum());
    }
    if (from.has_ishalfwaystart()) {
      set_ishalfwaystart(from.ishalfwaystart());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerDefenseDoBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerDefenseDoBattleReq::CopyFrom(const TTowerDefenseDoBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerDefenseDoBattleReq::IsInitialized() const {

  return true;
}

void TTowerDefenseDoBattleReq::Swap(TTowerDefenseDoBattleReq* other) {
  if (other != this) {
    std::swap(battlecheckparam_, other->battlecheckparam_);
    std::swap(roundnum_, other->roundnum_);
    std::swap(ishalfwaystart_, other->ishalfwaystart_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerDefenseDoBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerDefenseDoBattleReq_descriptor_;
  metadata.reflection = TTowerDefenseDoBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerDefenseDoBattleRsp::kWavesDropArrayFieldNumber;
const int TTowerDefenseDoBattleRsp::kBattleArgsFieldNumber;
const int TTowerDefenseDoBattleRsp::kRoundNumFieldNumber;
const int TTowerDefenseDoBattleRsp::kBattleIdFieldNumber;
#endif  // !_MSC_VER

TTowerDefenseDoBattleRsp::TTowerDefenseDoBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerDefenseDoBattleRsp)
}

void TTowerDefenseDoBattleRsp::InitAsDefaultInstance() {
  battleargs_ = const_cast< ::pb::TBattleArgs*>(&::pb::TBattleArgs::default_instance());
}

TTowerDefenseDoBattleRsp::TTowerDefenseDoBattleRsp(const TTowerDefenseDoBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerDefenseDoBattleRsp)
}

void TTowerDefenseDoBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  battleargs_ = NULL;
  roundnum_ = 0u;
  battleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerDefenseDoBattleRsp::~TTowerDefenseDoBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerDefenseDoBattleRsp)
  SharedDtor();
}

void TTowerDefenseDoBattleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battleargs_;
  }
}

void TTowerDefenseDoBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerDefenseDoBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerDefenseDoBattleRsp_descriptor_;
}

const TTowerDefenseDoBattleRsp& TTowerDefenseDoBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerDefense_2eproto();
  return *default_instance_;
}

TTowerDefenseDoBattleRsp* TTowerDefenseDoBattleRsp::default_instance_ = NULL;

TTowerDefenseDoBattleRsp* TTowerDefenseDoBattleRsp::New() const {
  return new TTowerDefenseDoBattleRsp;
}

void TTowerDefenseDoBattleRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTowerDefenseDoBattleRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 14) {
    ZR_(roundnum_, battleid_);
    if (has_battleargs()) {
      if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  wavesdroparray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerDefenseDoBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerDefenseDoBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TTowerDefenseWaveDropInfo WavesDropArray = 1;
      case 1: {
        if (tag == 10) {
         parse_WavesDropArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wavesdroparray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_WavesDropArray;
        if (input->ExpectTag(18)) goto parse_BattleArgs;
        break;
      }

      // optional .pb.TBattleArgs BattleArgs = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleArgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RoundNum;
        break;
      }

      // optional uint32 RoundNum = 3;
      case 3: {
        if (tag == 24) {
         parse_RoundNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roundnum_)));
          set_has_roundnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BattleId;
        break;
      }

      // optional uint32 BattleId = 4;
      case 4: {
        if (tag == 32) {
         parse_BattleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerDefenseDoBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerDefenseDoBattleRsp)
  return false;
#undef DO_
}

void TTowerDefenseDoBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerDefenseDoBattleRsp)
  // repeated .pb.TTowerDefenseWaveDropInfo WavesDropArray = 1;
  for (int i = 0; i < this->wavesdroparray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wavesdroparray(i), output);
  }

  // optional .pb.TBattleArgs BattleArgs = 2;
  if (has_battleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battleargs(), output);
  }

  // optional uint32 RoundNum = 3;
  if (has_roundnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->roundnum(), output);
  }

  // optional uint32 BattleId = 4;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->battleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerDefenseDoBattleRsp)
}

::google::protobuf::uint8* TTowerDefenseDoBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerDefenseDoBattleRsp)
  // repeated .pb.TTowerDefenseWaveDropInfo WavesDropArray = 1;
  for (int i = 0; i < this->wavesdroparray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wavesdroparray(i), target);
  }

  // optional .pb.TBattleArgs BattleArgs = 2;
  if (has_battleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battleargs(), target);
  }

  // optional uint32 RoundNum = 3;
  if (has_roundnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->roundnum(), target);
  }

  // optional uint32 BattleId = 4;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->battleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerDefenseDoBattleRsp)
  return target;
}

int TTowerDefenseDoBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .pb.TBattleArgs BattleArgs = 2;
    if (has_battleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleargs());
    }

    // optional uint32 RoundNum = 3;
    if (has_roundnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roundnum());
    }

    // optional uint32 BattleId = 4;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleid());
    }

  }
  // repeated .pb.TTowerDefenseWaveDropInfo WavesDropArray = 1;
  total_size += 1 * this->wavesdroparray_size();
  for (int i = 0; i < this->wavesdroparray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wavesdroparray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerDefenseDoBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerDefenseDoBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerDefenseDoBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerDefenseDoBattleRsp::MergeFrom(const TTowerDefenseDoBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  wavesdroparray_.MergeFrom(from.wavesdroparray_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_battleargs()) {
      mutable_battleargs()->::pb::TBattleArgs::MergeFrom(from.battleargs());
    }
    if (from.has_roundnum()) {
      set_roundnum(from.roundnum());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerDefenseDoBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerDefenseDoBattleRsp::CopyFrom(const TTowerDefenseDoBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerDefenseDoBattleRsp::IsInitialized() const {

  if (has_battleargs()) {
    if (!this->battleargs().IsInitialized()) return false;
  }
  return true;
}

void TTowerDefenseDoBattleRsp::Swap(TTowerDefenseDoBattleRsp* other) {
  if (other != this) {
    wavesdroparray_.Swap(&other->wavesdroparray_);
    std::swap(battleargs_, other->battleargs_);
    std::swap(roundnum_, other->roundnum_);
    std::swap(battleid_, other->battleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerDefenseDoBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerDefenseDoBattleRsp_descriptor_;
  metadata.reflection = TTowerDefenseDoBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerDefenseReportBattleReq::kBattleResultBytesFieldNumber;
const int TTowerDefenseReportBattleReq::kRoundNumFieldNumber;
const int TTowerDefenseReportBattleReq::kBattleIdFieldNumber;
#endif  // !_MSC_VER

TTowerDefenseReportBattleReq::TTowerDefenseReportBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerDefenseReportBattleReq)
}

void TTowerDefenseReportBattleReq::InitAsDefaultInstance() {
}

TTowerDefenseReportBattleReq::TTowerDefenseReportBattleReq(const TTowerDefenseReportBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerDefenseReportBattleReq)
}

void TTowerDefenseReportBattleReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  battleresultbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roundnum_ = 0u;
  battleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerDefenseReportBattleReq::~TTowerDefenseReportBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TTowerDefenseReportBattleReq)
  SharedDtor();
}

void TTowerDefenseReportBattleReq::SharedDtor() {
  if (battleresultbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleresultbytes_;
  }
  if (this != default_instance_) {
  }
}

void TTowerDefenseReportBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerDefenseReportBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerDefenseReportBattleReq_descriptor_;
}

const TTowerDefenseReportBattleReq& TTowerDefenseReportBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerDefense_2eproto();
  return *default_instance_;
}

TTowerDefenseReportBattleReq* TTowerDefenseReportBattleReq::default_instance_ = NULL;

TTowerDefenseReportBattleReq* TTowerDefenseReportBattleReq::New() const {
  return new TTowerDefenseReportBattleReq;
}

void TTowerDefenseReportBattleReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTowerDefenseReportBattleReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(roundnum_, battleid_);
    if (has_battleresultbytes()) {
      if (battleresultbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battleresultbytes_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerDefenseReportBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerDefenseReportBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes BattleResultBytes = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battleresultbytes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RoundNum;
        break;
      }

      // optional uint32 RoundNum = 2;
      case 2: {
        if (tag == 16) {
         parse_RoundNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roundnum_)));
          set_has_roundnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BattleId;
        break;
      }

      // optional uint32 BattleId = 3;
      case 3: {
        if (tag == 24) {
         parse_BattleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerDefenseReportBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerDefenseReportBattleReq)
  return false;
#undef DO_
}

void TTowerDefenseReportBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerDefenseReportBattleReq)
  // optional bytes BattleResultBytes = 1;
  if (has_battleresultbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->battleresultbytes(), output);
  }

  // optional uint32 RoundNum = 2;
  if (has_roundnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roundnum(), output);
  }

  // optional uint32 BattleId = 3;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->battleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerDefenseReportBattleReq)
}

::google::protobuf::uint8* TTowerDefenseReportBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerDefenseReportBattleReq)
  // optional bytes BattleResultBytes = 1;
  if (has_battleresultbytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->battleresultbytes(), target);
  }

  // optional uint32 RoundNum = 2;
  if (has_roundnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roundnum(), target);
  }

  // optional uint32 BattleId = 3;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->battleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerDefenseReportBattleReq)
  return target;
}

int TTowerDefenseReportBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes BattleResultBytes = 1;
    if (has_battleresultbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battleresultbytes());
    }

    // optional uint32 RoundNum = 2;
    if (has_roundnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roundnum());
    }

    // optional uint32 BattleId = 3;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerDefenseReportBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerDefenseReportBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerDefenseReportBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerDefenseReportBattleReq::MergeFrom(const TTowerDefenseReportBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleresultbytes()) {
      set_battleresultbytes(from.battleresultbytes());
    }
    if (from.has_roundnum()) {
      set_roundnum(from.roundnum());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerDefenseReportBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerDefenseReportBattleReq::CopyFrom(const TTowerDefenseReportBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerDefenseReportBattleReq::IsInitialized() const {

  return true;
}

void TTowerDefenseReportBattleReq::Swap(TTowerDefenseReportBattleReq* other) {
  if (other != this) {
    std::swap(battleresultbytes_, other->battleresultbytes_);
    std::swap(roundnum_, other->roundnum_);
    std::swap(battleid_, other->battleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerDefenseReportBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerDefenseReportBattleReq_descriptor_;
  metadata.reflection = TTowerDefenseReportBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerDefenseReportBattleRsp::kDropArrayFieldNumber;
#endif  // !_MSC_VER

TTowerDefenseReportBattleRsp::TTowerDefenseReportBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerDefenseReportBattleRsp)
}

void TTowerDefenseReportBattleRsp::InitAsDefaultInstance() {
}

TTowerDefenseReportBattleRsp::TTowerDefenseReportBattleRsp(const TTowerDefenseReportBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerDefenseReportBattleRsp)
}

void TTowerDefenseReportBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerDefenseReportBattleRsp::~TTowerDefenseReportBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerDefenseReportBattleRsp)
  SharedDtor();
}

void TTowerDefenseReportBattleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerDefenseReportBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerDefenseReportBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerDefenseReportBattleRsp_descriptor_;
}

const TTowerDefenseReportBattleRsp& TTowerDefenseReportBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerDefense_2eproto();
  return *default_instance_;
}

TTowerDefenseReportBattleRsp* TTowerDefenseReportBattleRsp::default_instance_ = NULL;

TTowerDefenseReportBattleRsp* TTowerDefenseReportBattleRsp::New() const {
  return new TTowerDefenseReportBattleRsp;
}

void TTowerDefenseReportBattleRsp::Clear() {
  droparray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerDefenseReportBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerDefenseReportBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward DropArray = 1;
      case 1: {
        if (tag == 10) {
         parse_DropArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_droparray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_DropArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerDefenseReportBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerDefenseReportBattleRsp)
  return false;
#undef DO_
}

void TTowerDefenseReportBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerDefenseReportBattleRsp)
  // repeated .pb.TCommonReward DropArray = 1;
  for (int i = 0; i < this->droparray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->droparray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerDefenseReportBattleRsp)
}

::google::protobuf::uint8* TTowerDefenseReportBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerDefenseReportBattleRsp)
  // repeated .pb.TCommonReward DropArray = 1;
  for (int i = 0; i < this->droparray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->droparray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerDefenseReportBattleRsp)
  return target;
}

int TTowerDefenseReportBattleRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward DropArray = 1;
  total_size += 1 * this->droparray_size();
  for (int i = 0; i < this->droparray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->droparray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerDefenseReportBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerDefenseReportBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerDefenseReportBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerDefenseReportBattleRsp::MergeFrom(const TTowerDefenseReportBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  droparray_.MergeFrom(from.droparray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerDefenseReportBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerDefenseReportBattleRsp::CopyFrom(const TTowerDefenseReportBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerDefenseReportBattleRsp::IsInitialized() const {

  return true;
}

void TTowerDefenseReportBattleRsp::Swap(TTowerDefenseReportBattleRsp* other) {
  if (other != this) {
    droparray_.Swap(&other->droparray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerDefenseReportBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerDefenseReportBattleRsp_descriptor_;
  metadata.reflection = TTowerDefenseReportBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerDefenseEndBattleRsp::kDropArrayFieldNumber;
#endif  // !_MSC_VER

TTowerDefenseEndBattleRsp::TTowerDefenseEndBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerDefenseEndBattleRsp)
}

void TTowerDefenseEndBattleRsp::InitAsDefaultInstance() {
}

TTowerDefenseEndBattleRsp::TTowerDefenseEndBattleRsp(const TTowerDefenseEndBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerDefenseEndBattleRsp)
}

void TTowerDefenseEndBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerDefenseEndBattleRsp::~TTowerDefenseEndBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerDefenseEndBattleRsp)
  SharedDtor();
}

void TTowerDefenseEndBattleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerDefenseEndBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerDefenseEndBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerDefenseEndBattleRsp_descriptor_;
}

const TTowerDefenseEndBattleRsp& TTowerDefenseEndBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerDefense_2eproto();
  return *default_instance_;
}

TTowerDefenseEndBattleRsp* TTowerDefenseEndBattleRsp::default_instance_ = NULL;

TTowerDefenseEndBattleRsp* TTowerDefenseEndBattleRsp::New() const {
  return new TTowerDefenseEndBattleRsp;
}

void TTowerDefenseEndBattleRsp::Clear() {
  droparray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerDefenseEndBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerDefenseEndBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward DropArray = 1;
      case 1: {
        if (tag == 10) {
         parse_DropArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_droparray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_DropArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerDefenseEndBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerDefenseEndBattleRsp)
  return false;
#undef DO_
}

void TTowerDefenseEndBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerDefenseEndBattleRsp)
  // repeated .pb.TCommonReward DropArray = 1;
  for (int i = 0; i < this->droparray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->droparray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerDefenseEndBattleRsp)
}

::google::protobuf::uint8* TTowerDefenseEndBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerDefenseEndBattleRsp)
  // repeated .pb.TCommonReward DropArray = 1;
  for (int i = 0; i < this->droparray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->droparray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerDefenseEndBattleRsp)
  return target;
}

int TTowerDefenseEndBattleRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward DropArray = 1;
  total_size += 1 * this->droparray_size();
  for (int i = 0; i < this->droparray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->droparray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerDefenseEndBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerDefenseEndBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerDefenseEndBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerDefenseEndBattleRsp::MergeFrom(const TTowerDefenseEndBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  droparray_.MergeFrom(from.droparray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerDefenseEndBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerDefenseEndBattleRsp::CopyFrom(const TTowerDefenseEndBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerDefenseEndBattleRsp::IsInitialized() const {

  return true;
}

void TTowerDefenseEndBattleRsp::Swap(TTowerDefenseEndBattleRsp* other) {
  if (other != this) {
    droparray_.Swap(&other->droparray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerDefenseEndBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerDefenseEndBattleRsp_descriptor_;
  metadata.reflection = TTowerDefenseEndBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerDefenseReceiveAchievementRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

TTowerDefenseReceiveAchievementRewardReq::TTowerDefenseReceiveAchievementRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerDefenseReceiveAchievementRewardReq)
}

void TTowerDefenseReceiveAchievementRewardReq::InitAsDefaultInstance() {
}

TTowerDefenseReceiveAchievementRewardReq::TTowerDefenseReceiveAchievementRewardReq(const TTowerDefenseReceiveAchievementRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerDefenseReceiveAchievementRewardReq)
}

void TTowerDefenseReceiveAchievementRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerDefenseReceiveAchievementRewardReq::~TTowerDefenseReceiveAchievementRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TTowerDefenseReceiveAchievementRewardReq)
  SharedDtor();
}

void TTowerDefenseReceiveAchievementRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerDefenseReceiveAchievementRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerDefenseReceiveAchievementRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerDefenseReceiveAchievementRewardReq_descriptor_;
}

const TTowerDefenseReceiveAchievementRewardReq& TTowerDefenseReceiveAchievementRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerDefense_2eproto();
  return *default_instance_;
}

TTowerDefenseReceiveAchievementRewardReq* TTowerDefenseReceiveAchievementRewardReq::default_instance_ = NULL;

TTowerDefenseReceiveAchievementRewardReq* TTowerDefenseReceiveAchievementRewardReq::New() const {
  return new TTowerDefenseReceiveAchievementRewardReq;
}

void TTowerDefenseReceiveAchievementRewardReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerDefenseReceiveAchievementRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerDefenseReceiveAchievementRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerDefenseReceiveAchievementRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerDefenseReceiveAchievementRewardReq)
  return false;
#undef DO_
}

void TTowerDefenseReceiveAchievementRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerDefenseReceiveAchievementRewardReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerDefenseReceiveAchievementRewardReq)
}

::google::protobuf::uint8* TTowerDefenseReceiveAchievementRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerDefenseReceiveAchievementRewardReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerDefenseReceiveAchievementRewardReq)
  return target;
}

int TTowerDefenseReceiveAchievementRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerDefenseReceiveAchievementRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerDefenseReceiveAchievementRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerDefenseReceiveAchievementRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerDefenseReceiveAchievementRewardReq::MergeFrom(const TTowerDefenseReceiveAchievementRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerDefenseReceiveAchievementRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerDefenseReceiveAchievementRewardReq::CopyFrom(const TTowerDefenseReceiveAchievementRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerDefenseReceiveAchievementRewardReq::IsInitialized() const {

  return true;
}

void TTowerDefenseReceiveAchievementRewardReq::Swap(TTowerDefenseReceiveAchievementRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerDefenseReceiveAchievementRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerDefenseReceiveAchievementRewardReq_descriptor_;
  metadata.reflection = TTowerDefenseReceiveAchievementRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerDefenseReceiveAchievementRewardRsp::kDropArrayFieldNumber;
#endif  // !_MSC_VER

TTowerDefenseReceiveAchievementRewardRsp::TTowerDefenseReceiveAchievementRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerDefenseReceiveAchievementRewardRsp)
}

void TTowerDefenseReceiveAchievementRewardRsp::InitAsDefaultInstance() {
}

TTowerDefenseReceiveAchievementRewardRsp::TTowerDefenseReceiveAchievementRewardRsp(const TTowerDefenseReceiveAchievementRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerDefenseReceiveAchievementRewardRsp)
}

void TTowerDefenseReceiveAchievementRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerDefenseReceiveAchievementRewardRsp::~TTowerDefenseReceiveAchievementRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerDefenseReceiveAchievementRewardRsp)
  SharedDtor();
}

void TTowerDefenseReceiveAchievementRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerDefenseReceiveAchievementRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerDefenseReceiveAchievementRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerDefenseReceiveAchievementRewardRsp_descriptor_;
}

const TTowerDefenseReceiveAchievementRewardRsp& TTowerDefenseReceiveAchievementRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerDefense_2eproto();
  return *default_instance_;
}

TTowerDefenseReceiveAchievementRewardRsp* TTowerDefenseReceiveAchievementRewardRsp::default_instance_ = NULL;

TTowerDefenseReceiveAchievementRewardRsp* TTowerDefenseReceiveAchievementRewardRsp::New() const {
  return new TTowerDefenseReceiveAchievementRewardRsp;
}

void TTowerDefenseReceiveAchievementRewardRsp::Clear() {
  droparray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerDefenseReceiveAchievementRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerDefenseReceiveAchievementRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward DropArray = 1;
      case 1: {
        if (tag == 10) {
         parse_DropArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_droparray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_DropArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerDefenseReceiveAchievementRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerDefenseReceiveAchievementRewardRsp)
  return false;
#undef DO_
}

void TTowerDefenseReceiveAchievementRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerDefenseReceiveAchievementRewardRsp)
  // repeated .pb.TCommonReward DropArray = 1;
  for (int i = 0; i < this->droparray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->droparray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerDefenseReceiveAchievementRewardRsp)
}

::google::protobuf::uint8* TTowerDefenseReceiveAchievementRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerDefenseReceiveAchievementRewardRsp)
  // repeated .pb.TCommonReward DropArray = 1;
  for (int i = 0; i < this->droparray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->droparray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerDefenseReceiveAchievementRewardRsp)
  return target;
}

int TTowerDefenseReceiveAchievementRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward DropArray = 1;
  total_size += 1 * this->droparray_size();
  for (int i = 0; i < this->droparray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->droparray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerDefenseReceiveAchievementRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerDefenseReceiveAchievementRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerDefenseReceiveAchievementRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerDefenseReceiveAchievementRewardRsp::MergeFrom(const TTowerDefenseReceiveAchievementRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  droparray_.MergeFrom(from.droparray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerDefenseReceiveAchievementRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerDefenseReceiveAchievementRewardRsp::CopyFrom(const TTowerDefenseReceiveAchievementRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerDefenseReceiveAchievementRewardRsp::IsInitialized() const {

  return true;
}

void TTowerDefenseReceiveAchievementRewardRsp::Swap(TTowerDefenseReceiveAchievementRewardRsp* other) {
  if (other != this) {
    droparray_.Swap(&other->droparray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerDefenseReceiveAchievementRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerDefenseReceiveAchievementRewardRsp_descriptor_;
  metadata.reflection = TTowerDefenseReceiveAchievementRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerDefenseReceiveAllAchievementRewardRsp::kDropArrayFieldNumber;
#endif  // !_MSC_VER

TTowerDefenseReceiveAllAchievementRewardRsp::TTowerDefenseReceiveAllAchievementRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerDefenseReceiveAllAchievementRewardRsp)
}

void TTowerDefenseReceiveAllAchievementRewardRsp::InitAsDefaultInstance() {
}

TTowerDefenseReceiveAllAchievementRewardRsp::TTowerDefenseReceiveAllAchievementRewardRsp(const TTowerDefenseReceiveAllAchievementRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerDefenseReceiveAllAchievementRewardRsp)
}

void TTowerDefenseReceiveAllAchievementRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerDefenseReceiveAllAchievementRewardRsp::~TTowerDefenseReceiveAllAchievementRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerDefenseReceiveAllAchievementRewardRsp)
  SharedDtor();
}

void TTowerDefenseReceiveAllAchievementRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerDefenseReceiveAllAchievementRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerDefenseReceiveAllAchievementRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerDefenseReceiveAllAchievementRewardRsp_descriptor_;
}

const TTowerDefenseReceiveAllAchievementRewardRsp& TTowerDefenseReceiveAllAchievementRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerDefense_2eproto();
  return *default_instance_;
}

TTowerDefenseReceiveAllAchievementRewardRsp* TTowerDefenseReceiveAllAchievementRewardRsp::default_instance_ = NULL;

TTowerDefenseReceiveAllAchievementRewardRsp* TTowerDefenseReceiveAllAchievementRewardRsp::New() const {
  return new TTowerDefenseReceiveAllAchievementRewardRsp;
}

void TTowerDefenseReceiveAllAchievementRewardRsp::Clear() {
  droparray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerDefenseReceiveAllAchievementRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerDefenseReceiveAllAchievementRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward DropArray = 1;
      case 1: {
        if (tag == 10) {
         parse_DropArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_droparray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_DropArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerDefenseReceiveAllAchievementRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerDefenseReceiveAllAchievementRewardRsp)
  return false;
#undef DO_
}

void TTowerDefenseReceiveAllAchievementRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerDefenseReceiveAllAchievementRewardRsp)
  // repeated .pb.TCommonReward DropArray = 1;
  for (int i = 0; i < this->droparray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->droparray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerDefenseReceiveAllAchievementRewardRsp)
}

::google::protobuf::uint8* TTowerDefenseReceiveAllAchievementRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerDefenseReceiveAllAchievementRewardRsp)
  // repeated .pb.TCommonReward DropArray = 1;
  for (int i = 0; i < this->droparray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->droparray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerDefenseReceiveAllAchievementRewardRsp)
  return target;
}

int TTowerDefenseReceiveAllAchievementRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward DropArray = 1;
  total_size += 1 * this->droparray_size();
  for (int i = 0; i < this->droparray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->droparray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerDefenseReceiveAllAchievementRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerDefenseReceiveAllAchievementRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerDefenseReceiveAllAchievementRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerDefenseReceiveAllAchievementRewardRsp::MergeFrom(const TTowerDefenseReceiveAllAchievementRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  droparray_.MergeFrom(from.droparray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerDefenseReceiveAllAchievementRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerDefenseReceiveAllAchievementRewardRsp::CopyFrom(const TTowerDefenseReceiveAllAchievementRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerDefenseReceiveAllAchievementRewardRsp::IsInitialized() const {

  return true;
}

void TTowerDefenseReceiveAllAchievementRewardRsp::Swap(TTowerDefenseReceiveAllAchievementRewardRsp* other) {
  if (other != this) {
    droparray_.Swap(&other->droparray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerDefenseReceiveAllAchievementRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerDefenseReceiveAllAchievementRewardRsp_descriptor_;
  metadata.reflection = TTowerDefenseReceiveAllAchievementRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerDefenseWaveRankInfo::kUserInfoFieldNumber;
const int TTowerDefenseWaveRankInfo::kWaveNumFieldNumber;
const int TTowerDefenseWaveRankInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

TTowerDefenseWaveRankInfo::TTowerDefenseWaveRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerDefenseWaveRankInfo)
}

void TTowerDefenseWaveRankInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TTowerDefenseWaveRankInfo::TTowerDefenseWaveRankInfo(const TTowerDefenseWaveRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerDefenseWaveRankInfo)
}

void TTowerDefenseWaveRankInfo::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  wavenum_ = 0u;
  updatetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerDefenseWaveRankInfo::~TTowerDefenseWaveRankInfo() {
  // @@protoc_insertion_point(destructor:pb.TTowerDefenseWaveRankInfo)
  SharedDtor();
}

void TTowerDefenseWaveRankInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TTowerDefenseWaveRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerDefenseWaveRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerDefenseWaveRankInfo_descriptor_;
}

const TTowerDefenseWaveRankInfo& TTowerDefenseWaveRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerDefense_2eproto();
  return *default_instance_;
}

TTowerDefenseWaveRankInfo* TTowerDefenseWaveRankInfo::default_instance_ = NULL;

TTowerDefenseWaveRankInfo* TTowerDefenseWaveRankInfo::New() const {
  return new TTowerDefenseWaveRankInfo;
}

void TTowerDefenseWaveRankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTowerDefenseWaveRankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(updatetime_, wavenum_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerDefenseWaveRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerDefenseWaveRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_WaveNum;
        break;
      }

      // optional uint32 WaveNum = 2;
      case 2: {
        if (tag == 16) {
         parse_WaveNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wavenum_)));
          set_has_wavenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_UpdateTime;
        break;
      }

      // optional uint64 UpdateTime = 3;
      case 3: {
        if (tag == 24) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerDefenseWaveRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerDefenseWaveRankInfo)
  return false;
#undef DO_
}

void TTowerDefenseWaveRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerDefenseWaveRankInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint32 WaveNum = 2;
  if (has_wavenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wavenum(), output);
  }

  // optional uint64 UpdateTime = 3;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerDefenseWaveRankInfo)
}

::google::protobuf::uint8* TTowerDefenseWaveRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerDefenseWaveRankInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint32 WaveNum = 2;
  if (has_wavenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wavenum(), target);
  }

  // optional uint64 UpdateTime = 3;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerDefenseWaveRankInfo)
  return target;
}

int TTowerDefenseWaveRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 WaveNum = 2;
    if (has_wavenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wavenum());
    }

    // optional uint64 UpdateTime = 3;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerDefenseWaveRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerDefenseWaveRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerDefenseWaveRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerDefenseWaveRankInfo::MergeFrom(const TTowerDefenseWaveRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_wavenum()) {
      set_wavenum(from.wavenum());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerDefenseWaveRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerDefenseWaveRankInfo::CopyFrom(const TTowerDefenseWaveRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerDefenseWaveRankInfo::IsInitialized() const {

  return true;
}

void TTowerDefenseWaveRankInfo::Swap(TTowerDefenseWaveRankInfo* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(wavenum_, other->wavenum_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerDefenseWaveRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerDefenseWaveRankInfo_descriptor_;
  metadata.reflection = TTowerDefenseWaveRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerDefenseGetWaveRankReq::kOffsetFieldNumber;
const int TTowerDefenseGetWaveRankReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TTowerDefenseGetWaveRankReq::TTowerDefenseGetWaveRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerDefenseGetWaveRankReq)
}

void TTowerDefenseGetWaveRankReq::InitAsDefaultInstance() {
}

TTowerDefenseGetWaveRankReq::TTowerDefenseGetWaveRankReq(const TTowerDefenseGetWaveRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerDefenseGetWaveRankReq)
}

void TTowerDefenseGetWaveRankReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerDefenseGetWaveRankReq::~TTowerDefenseGetWaveRankReq() {
  // @@protoc_insertion_point(destructor:pb.TTowerDefenseGetWaveRankReq)
  SharedDtor();
}

void TTowerDefenseGetWaveRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerDefenseGetWaveRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerDefenseGetWaveRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerDefenseGetWaveRankReq_descriptor_;
}

const TTowerDefenseGetWaveRankReq& TTowerDefenseGetWaveRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerDefense_2eproto();
  return *default_instance_;
}

TTowerDefenseGetWaveRankReq* TTowerDefenseGetWaveRankReq::default_instance_ = NULL;

TTowerDefenseGetWaveRankReq* TTowerDefenseGetWaveRankReq::New() const {
  return new TTowerDefenseGetWaveRankReq;
}

void TTowerDefenseGetWaveRankReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTowerDefenseGetWaveRankReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerDefenseGetWaveRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerDefenseGetWaveRankReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerDefenseGetWaveRankReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerDefenseGetWaveRankReq)
  return false;
#undef DO_
}

void TTowerDefenseGetWaveRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerDefenseGetWaveRankReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerDefenseGetWaveRankReq)
}

::google::protobuf::uint8* TTowerDefenseGetWaveRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerDefenseGetWaveRankReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerDefenseGetWaveRankReq)
  return target;
}

int TTowerDefenseGetWaveRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerDefenseGetWaveRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerDefenseGetWaveRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerDefenseGetWaveRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerDefenseGetWaveRankReq::MergeFrom(const TTowerDefenseGetWaveRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerDefenseGetWaveRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerDefenseGetWaveRankReq::CopyFrom(const TTowerDefenseGetWaveRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerDefenseGetWaveRankReq::IsInitialized() const {

  return true;
}

void TTowerDefenseGetWaveRankReq::Swap(TTowerDefenseGetWaveRankReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerDefenseGetWaveRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerDefenseGetWaveRankReq_descriptor_;
  metadata.reflection = TTowerDefenseGetWaveRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTowerDefenseGetWaveRankRsp::kRankArrFieldNumber;
const int TTowerDefenseGetWaveRankRsp::kMyRankFieldNumber;
#endif  // !_MSC_VER

TTowerDefenseGetWaveRankRsp::TTowerDefenseGetWaveRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTowerDefenseGetWaveRankRsp)
}

void TTowerDefenseGetWaveRankRsp::InitAsDefaultInstance() {
}

TTowerDefenseGetWaveRankRsp::TTowerDefenseGetWaveRankRsp(const TTowerDefenseGetWaveRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTowerDefenseGetWaveRankRsp)
}

void TTowerDefenseGetWaveRankRsp::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTowerDefenseGetWaveRankRsp::~TTowerDefenseGetWaveRankRsp() {
  // @@protoc_insertion_point(destructor:pb.TTowerDefenseGetWaveRankRsp)
  SharedDtor();
}

void TTowerDefenseGetWaveRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTowerDefenseGetWaveRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTowerDefenseGetWaveRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTowerDefenseGetWaveRankRsp_descriptor_;
}

const TTowerDefenseGetWaveRankRsp& TTowerDefenseGetWaveRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTowerDefense_2eproto();
  return *default_instance_;
}

TTowerDefenseGetWaveRankRsp* TTowerDefenseGetWaveRankRsp::default_instance_ = NULL;

TTowerDefenseGetWaveRankRsp* TTowerDefenseGetWaveRankRsp::New() const {
  return new TTowerDefenseGetWaveRankRsp;
}

void TTowerDefenseGetWaveRankRsp::Clear() {
  myrank_ = 0;
  rankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTowerDefenseGetWaveRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTowerDefenseGetWaveRankRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TTowerDefenseWaveRankInfo RankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RankArr;
        if (input->ExpectTag(16)) goto parse_MyRank;
        break;
      }

      // optional int32 MyRank = 2;
      case 2: {
        if (tag == 16) {
         parse_MyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTowerDefenseGetWaveRankRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTowerDefenseGetWaveRankRsp)
  return false;
#undef DO_
}

void TTowerDefenseGetWaveRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTowerDefenseGetWaveRankRsp)
  // repeated .pb.TTowerDefenseWaveRankInfo RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankarr(i), output);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->myrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTowerDefenseGetWaveRankRsp)
}

::google::protobuf::uint8* TTowerDefenseGetWaveRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTowerDefenseGetWaveRankRsp)
  // repeated .pb.TTowerDefenseWaveRankInfo RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankarr(i), target);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->myrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTowerDefenseGetWaveRankRsp)
  return target;
}

int TTowerDefenseGetWaveRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 MyRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }

  }
  // repeated .pb.TTowerDefenseWaveRankInfo RankArr = 1;
  total_size += 1 * this->rankarr_size();
  for (int i = 0; i < this->rankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTowerDefenseGetWaveRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTowerDefenseGetWaveRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTowerDefenseGetWaveRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTowerDefenseGetWaveRankRsp::MergeFrom(const TTowerDefenseGetWaveRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankarr_.MergeFrom(from.rankarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTowerDefenseGetWaveRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTowerDefenseGetWaveRankRsp::CopyFrom(const TTowerDefenseGetWaveRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTowerDefenseGetWaveRankRsp::IsInitialized() const {

  return true;
}

void TTowerDefenseGetWaveRankRsp::Swap(TTowerDefenseGetWaveRankRsp* other) {
  if (other != this) {
    rankarr_.Swap(&other->rankarr_);
    std::swap(myrank_, other->myrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTowerDefenseGetWaveRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTowerDefenseGetWaveRankRsp_descriptor_;
  metadata.reflection = TTowerDefenseGetWaveRankRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
