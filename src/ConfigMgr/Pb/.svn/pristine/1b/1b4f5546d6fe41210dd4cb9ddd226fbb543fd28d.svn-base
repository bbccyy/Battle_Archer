// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/HeroIllustration.proto

#ifndef PROTOBUF_net_2fHeroIllustration_2eproto__INCLUDED
#define PROTOBUF_net_2fHeroIllustration_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fHeroIllustration_2eproto();
void protobuf_AssignDesc_net_2fHeroIllustration_2eproto();
void protobuf_ShutdownFile_net_2fHeroIllustration_2eproto();

class THeroIllustrationInfo;
class THeroIllustrationGetInfoRsp;
class THeroIllustrationActiveReq;
class THeroIllustrationActiveRsp;
class THeroIllustrationUpgradeReq;
class THeroIllustrationUpgradeRsp;
class THeroIllustrationGoldBreakReq;
class THeroIllustrationGoldBreakRsp;
class THeroIllustrationWhiteGoldBreakReq;
class THeroIllustrationWhiteGoldBreakRsp;
class THeroIllustrationPurpleGoldBreakReq;
class THeroIllustrationPurpleGoldBreakRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>THeroIllustrationInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/HeroIllustration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THeroIllustrationInfo : public ::google::protobuf::Message {
 public:
  THeroIllustrationInfo();
  virtual ~THeroIllustrationInfo();

  THeroIllustrationInfo(const THeroIllustrationInfo& from);

  inline THeroIllustrationInfo& operator=(const THeroIllustrationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THeroIllustrationInfo& default_instance();

  void Swap(THeroIllustrationInfo* other);

  // implements Message ----------------------------------------------

  THeroIllustrationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THeroIllustrationInfo& from);
  void MergeFrom(const THeroIllustrationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 IllustrationId = 1;
  inline bool has_illustrationid() const;
  inline void clear_illustrationid();
  static const int kIllustrationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THeroIllustrationInfo</name>
  	<Function>
  		<name>illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 illustrationid() const;
  inline void set_illustrationid(::google::protobuf::uint32 value);

  // optional uint32 IllustrationLv = 2;
  inline bool has_illustrationlv() const;
  inline void clear_illustrationlv();
  static const int kIllustrationLvFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>THeroIllustrationInfo</name>
  	<Function>
  		<name>illustrationlv</name>
  		<replaceName>IllustrationLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_illustrationlv</name>
  		<replaceName>IllustrationLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_illustrationlv</name>
  		<replaceName>IllustrationLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 illustrationlv() const;
  inline void set_illustrationlv(::google::protobuf::uint32 value);

  // optional uint64 GoldBreakTime = 3;
  inline bool has_goldbreaktime() const;
  inline void clear_goldbreaktime();
  static const int kGoldBreakTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>THeroIllustrationInfo</name>
  	<Function>
  		<name>goldbreaktime</name>
  		<replaceName>GoldBreakTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goldbreaktime</name>
  		<replaceName>GoldBreakTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goldbreaktime</name>
  		<replaceName>GoldBreakTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 goldbreaktime() const;
  inline void set_goldbreaktime(::google::protobuf::uint64 value);

  // optional uint64 WhiteGoldBreakTime = 4;
  inline bool has_whitegoldbreaktime() const;
  inline void clear_whitegoldbreaktime();
  static const int kWhiteGoldBreakTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>THeroIllustrationInfo</name>
  	<Function>
  		<name>whitegoldbreaktime</name>
  		<replaceName>WhiteGoldBreakTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_whitegoldbreaktime</name>
  		<replaceName>WhiteGoldBreakTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_whitegoldbreaktime</name>
  		<replaceName>WhiteGoldBreakTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 whitegoldbreaktime() const;
  inline void set_whitegoldbreaktime(::google::protobuf::uint64 value);

  // optional uint64 PurpleGoldBreakTime = 5;
  inline bool has_purplegoldbreaktime() const;
  inline void clear_purplegoldbreaktime();
  static const int kPurpleGoldBreakTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>THeroIllustrationInfo</name>
  	<Function>
  		<name>purplegoldbreaktime</name>
  		<replaceName>PurpleGoldBreakTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_purplegoldbreaktime</name>
  		<replaceName>PurpleGoldBreakTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_purplegoldbreaktime</name>
  		<replaceName>PurpleGoldBreakTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 purplegoldbreaktime() const;
  inline void set_purplegoldbreaktime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.THeroIllustrationInfo)
 private:
  inline void set_has_illustrationid();
  inline void clear_has_illustrationid();
  inline void set_has_illustrationlv();
  inline void clear_has_illustrationlv();
  inline void set_has_goldbreaktime();
  inline void clear_has_goldbreaktime();
  inline void set_has_whitegoldbreaktime();
  inline void clear_has_whitegoldbreaktime();
  inline void set_has_purplegoldbreaktime();
  inline void clear_has_purplegoldbreaktime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 illustrationid_;
  ::google::protobuf::uint32 illustrationlv_;
  ::google::protobuf::uint64 goldbreaktime_;
  ::google::protobuf::uint64 whitegoldbreaktime_;
  ::google::protobuf::uint64 purplegoldbreaktime_;
  friend void  protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  friend void protobuf_AssignDesc_net_2fHeroIllustration_2eproto();
  friend void protobuf_ShutdownFile_net_2fHeroIllustration_2eproto();

  void InitAsDefaultInstance();
  static THeroIllustrationInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>THeroIllustrationGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/HeroIllustration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THeroIllustrationGetInfoRsp : public ::google::protobuf::Message {
 public:
  THeroIllustrationGetInfoRsp();
  virtual ~THeroIllustrationGetInfoRsp();

  THeroIllustrationGetInfoRsp(const THeroIllustrationGetInfoRsp& from);

  inline THeroIllustrationGetInfoRsp& operator=(const THeroIllustrationGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THeroIllustrationGetInfoRsp& default_instance();

  void Swap(THeroIllustrationGetInfoRsp* other);

  // implements Message ----------------------------------------------

  THeroIllustrationGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THeroIllustrationGetInfoRsp& from);
  void MergeFrom(const THeroIllustrationGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.THeroIllustrationInfo IllustrationArr = 1;
  inline int illustrationarr_size() const;
  inline void clear_illustrationarr();
  static const int kIllustrationArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THeroIllustrationGetInfoRsp</name>
  	<Function>
  		<name>illustrationarr</name>
  		<replaceName>IllustrationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_illustrationarr</name>
  		<replaceName>IllustrationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_illustrationarr</name>
  		<replaceName>IllustrationArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_illustrationarr</name>
  		<replaceName>IllustrationArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>illustrationarr_size</name>
  		<replaceName>IllustrationArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::THeroIllustrationInfo& illustrationarr(int index) const;
  inline ::pb::THeroIllustrationInfo* mutable_illustrationarr(int index);
  inline ::pb::THeroIllustrationInfo* add_illustrationarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::THeroIllustrationInfo >&
      illustrationarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::THeroIllustrationInfo >*
      mutable_illustrationarr();

  // @@protoc_insertion_point(class_scope:pb.THeroIllustrationGetInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::THeroIllustrationInfo > illustrationarr_;
  friend void  protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  friend void protobuf_AssignDesc_net_2fHeroIllustration_2eproto();
  friend void protobuf_ShutdownFile_net_2fHeroIllustration_2eproto();

  void InitAsDefaultInstance();
  static THeroIllustrationGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>THeroIllustrationActiveReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/HeroIllustration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THeroIllustrationActiveReq : public ::google::protobuf::Message {
 public:
  THeroIllustrationActiveReq();
  virtual ~THeroIllustrationActiveReq();

  THeroIllustrationActiveReq(const THeroIllustrationActiveReq& from);

  inline THeroIllustrationActiveReq& operator=(const THeroIllustrationActiveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THeroIllustrationActiveReq& default_instance();

  void Swap(THeroIllustrationActiveReq* other);

  // implements Message ----------------------------------------------

  THeroIllustrationActiveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THeroIllustrationActiveReq& from);
  void MergeFrom(const THeroIllustrationActiveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 IllustrationId = 1;
  inline bool has_illustrationid() const;
  inline void clear_illustrationid();
  static const int kIllustrationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THeroIllustrationActiveReq</name>
  	<Function>
  		<name>illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 illustrationid() const;
  inline void set_illustrationid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.THeroIllustrationActiveReq)
 private:
  inline void set_has_illustrationid();
  inline void clear_has_illustrationid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 illustrationid_;
  friend void  protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  friend void protobuf_AssignDesc_net_2fHeroIllustration_2eproto();
  friend void protobuf_ShutdownFile_net_2fHeroIllustration_2eproto();

  void InitAsDefaultInstance();
  static THeroIllustrationActiveReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>THeroIllustrationActiveRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/HeroIllustration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THeroIllustrationActiveRsp : public ::google::protobuf::Message {
 public:
  THeroIllustrationActiveRsp();
  virtual ~THeroIllustrationActiveRsp();

  THeroIllustrationActiveRsp(const THeroIllustrationActiveRsp& from);

  inline THeroIllustrationActiveRsp& operator=(const THeroIllustrationActiveRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THeroIllustrationActiveRsp& default_instance();

  void Swap(THeroIllustrationActiveRsp* other);

  // implements Message ----------------------------------------------

  THeroIllustrationActiveRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THeroIllustrationActiveRsp& from);
  void MergeFrom(const THeroIllustrationActiveRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
  inline bool has_illustrationinfo() const;
  inline void clear_illustrationinfo();
  static const int kIllustrationInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THeroIllustrationActiveRsp</name>
  	<Function>
  		<name>illustrationinfo</name>
  		<replaceName>IllustrationInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_illustrationinfo</name>
  		<replaceName>IllustrationInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_illustrationinfo</name>
  		<replaceName>IllustrationInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_illustrationinfo</name>
  		<replaceName>IllustrationInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::THeroIllustrationInfo& illustrationinfo() const;
  inline ::pb::THeroIllustrationInfo* mutable_illustrationinfo();
  inline ::pb::THeroIllustrationInfo* release_illustrationinfo();
  inline void set_allocated_illustrationinfo(::pb::THeroIllustrationInfo* illustrationinfo);

  // @@protoc_insertion_point(class_scope:pb.THeroIllustrationActiveRsp)
 private:
  inline void set_has_illustrationinfo();
  inline void clear_has_illustrationinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::THeroIllustrationInfo* illustrationinfo_;
  friend void  protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  friend void protobuf_AssignDesc_net_2fHeroIllustration_2eproto();
  friend void protobuf_ShutdownFile_net_2fHeroIllustration_2eproto();

  void InitAsDefaultInstance();
  static THeroIllustrationActiveRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>THeroIllustrationUpgradeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/HeroIllustration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THeroIllustrationUpgradeReq : public ::google::protobuf::Message {
 public:
  THeroIllustrationUpgradeReq();
  virtual ~THeroIllustrationUpgradeReq();

  THeroIllustrationUpgradeReq(const THeroIllustrationUpgradeReq& from);

  inline THeroIllustrationUpgradeReq& operator=(const THeroIllustrationUpgradeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THeroIllustrationUpgradeReq& default_instance();

  void Swap(THeroIllustrationUpgradeReq* other);

  // implements Message ----------------------------------------------

  THeroIllustrationUpgradeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THeroIllustrationUpgradeReq& from);
  void MergeFrom(const THeroIllustrationUpgradeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 IllustrationId = 1;
  inline bool has_illustrationid() const;
  inline void clear_illustrationid();
  static const int kIllustrationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THeroIllustrationUpgradeReq</name>
  	<Function>
  		<name>illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 illustrationid() const;
  inline void set_illustrationid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.THeroIllustrationUpgradeReq)
 private:
  inline void set_has_illustrationid();
  inline void clear_has_illustrationid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 illustrationid_;
  friend void  protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  friend void protobuf_AssignDesc_net_2fHeroIllustration_2eproto();
  friend void protobuf_ShutdownFile_net_2fHeroIllustration_2eproto();

  void InitAsDefaultInstance();
  static THeroIllustrationUpgradeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>THeroIllustrationUpgradeRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/HeroIllustration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THeroIllustrationUpgradeRsp : public ::google::protobuf::Message {
 public:
  THeroIllustrationUpgradeRsp();
  virtual ~THeroIllustrationUpgradeRsp();

  THeroIllustrationUpgradeRsp(const THeroIllustrationUpgradeRsp& from);

  inline THeroIllustrationUpgradeRsp& operator=(const THeroIllustrationUpgradeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THeroIllustrationUpgradeRsp& default_instance();

  void Swap(THeroIllustrationUpgradeRsp* other);

  // implements Message ----------------------------------------------

  THeroIllustrationUpgradeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THeroIllustrationUpgradeRsp& from);
  void MergeFrom(const THeroIllustrationUpgradeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
  inline bool has_illustrationinfo() const;
  inline void clear_illustrationinfo();
  static const int kIllustrationInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THeroIllustrationUpgradeRsp</name>
  	<Function>
  		<name>illustrationinfo</name>
  		<replaceName>IllustrationInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_illustrationinfo</name>
  		<replaceName>IllustrationInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_illustrationinfo</name>
  		<replaceName>IllustrationInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_illustrationinfo</name>
  		<replaceName>IllustrationInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::THeroIllustrationInfo& illustrationinfo() const;
  inline ::pb::THeroIllustrationInfo* mutable_illustrationinfo();
  inline ::pb::THeroIllustrationInfo* release_illustrationinfo();
  inline void set_allocated_illustrationinfo(::pb::THeroIllustrationInfo* illustrationinfo);

  // @@protoc_insertion_point(class_scope:pb.THeroIllustrationUpgradeRsp)
 private:
  inline void set_has_illustrationinfo();
  inline void clear_has_illustrationinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::THeroIllustrationInfo* illustrationinfo_;
  friend void  protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  friend void protobuf_AssignDesc_net_2fHeroIllustration_2eproto();
  friend void protobuf_ShutdownFile_net_2fHeroIllustration_2eproto();

  void InitAsDefaultInstance();
  static THeroIllustrationUpgradeRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>THeroIllustrationGoldBreakReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/HeroIllustration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THeroIllustrationGoldBreakReq : public ::google::protobuf::Message {
 public:
  THeroIllustrationGoldBreakReq();
  virtual ~THeroIllustrationGoldBreakReq();

  THeroIllustrationGoldBreakReq(const THeroIllustrationGoldBreakReq& from);

  inline THeroIllustrationGoldBreakReq& operator=(const THeroIllustrationGoldBreakReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THeroIllustrationGoldBreakReq& default_instance();

  void Swap(THeroIllustrationGoldBreakReq* other);

  // implements Message ----------------------------------------------

  THeroIllustrationGoldBreakReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THeroIllustrationGoldBreakReq& from);
  void MergeFrom(const THeroIllustrationGoldBreakReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 IllustrationId = 1;
  inline bool has_illustrationid() const;
  inline void clear_illustrationid();
  static const int kIllustrationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THeroIllustrationGoldBreakReq</name>
  	<Function>
  		<name>illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 illustrationid() const;
  inline void set_illustrationid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.THeroIllustrationGoldBreakReq)
 private:
  inline void set_has_illustrationid();
  inline void clear_has_illustrationid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 illustrationid_;
  friend void  protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  friend void protobuf_AssignDesc_net_2fHeroIllustration_2eproto();
  friend void protobuf_ShutdownFile_net_2fHeroIllustration_2eproto();

  void InitAsDefaultInstance();
  static THeroIllustrationGoldBreakReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>THeroIllustrationGoldBreakRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/HeroIllustration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THeroIllustrationGoldBreakRsp : public ::google::protobuf::Message {
 public:
  THeroIllustrationGoldBreakRsp();
  virtual ~THeroIllustrationGoldBreakRsp();

  THeroIllustrationGoldBreakRsp(const THeroIllustrationGoldBreakRsp& from);

  inline THeroIllustrationGoldBreakRsp& operator=(const THeroIllustrationGoldBreakRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THeroIllustrationGoldBreakRsp& default_instance();

  void Swap(THeroIllustrationGoldBreakRsp* other);

  // implements Message ----------------------------------------------

  THeroIllustrationGoldBreakRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THeroIllustrationGoldBreakRsp& from);
  void MergeFrom(const THeroIllustrationGoldBreakRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
  inline bool has_illustrationinfo() const;
  inline void clear_illustrationinfo();
  static const int kIllustrationInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THeroIllustrationGoldBreakRsp</name>
  	<Function>
  		<name>illustrationinfo</name>
  		<replaceName>IllustrationInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_illustrationinfo</name>
  		<replaceName>IllustrationInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_illustrationinfo</name>
  		<replaceName>IllustrationInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_illustrationinfo</name>
  		<replaceName>IllustrationInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::THeroIllustrationInfo& illustrationinfo() const;
  inline ::pb::THeroIllustrationInfo* mutable_illustrationinfo();
  inline ::pb::THeroIllustrationInfo* release_illustrationinfo();
  inline void set_allocated_illustrationinfo(::pb::THeroIllustrationInfo* illustrationinfo);

  // @@protoc_insertion_point(class_scope:pb.THeroIllustrationGoldBreakRsp)
 private:
  inline void set_has_illustrationinfo();
  inline void clear_has_illustrationinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::THeroIllustrationInfo* illustrationinfo_;
  friend void  protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  friend void protobuf_AssignDesc_net_2fHeroIllustration_2eproto();
  friend void protobuf_ShutdownFile_net_2fHeroIllustration_2eproto();

  void InitAsDefaultInstance();
  static THeroIllustrationGoldBreakRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>THeroIllustrationWhiteGoldBreakReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/HeroIllustration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THeroIllustrationWhiteGoldBreakReq : public ::google::protobuf::Message {
 public:
  THeroIllustrationWhiteGoldBreakReq();
  virtual ~THeroIllustrationWhiteGoldBreakReq();

  THeroIllustrationWhiteGoldBreakReq(const THeroIllustrationWhiteGoldBreakReq& from);

  inline THeroIllustrationWhiteGoldBreakReq& operator=(const THeroIllustrationWhiteGoldBreakReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THeroIllustrationWhiteGoldBreakReq& default_instance();

  void Swap(THeroIllustrationWhiteGoldBreakReq* other);

  // implements Message ----------------------------------------------

  THeroIllustrationWhiteGoldBreakReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THeroIllustrationWhiteGoldBreakReq& from);
  void MergeFrom(const THeroIllustrationWhiteGoldBreakReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 IllustrationId = 1;
  inline bool has_illustrationid() const;
  inline void clear_illustrationid();
  static const int kIllustrationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THeroIllustrationWhiteGoldBreakReq</name>
  	<Function>
  		<name>illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 illustrationid() const;
  inline void set_illustrationid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.THeroIllustrationWhiteGoldBreakReq)
 private:
  inline void set_has_illustrationid();
  inline void clear_has_illustrationid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 illustrationid_;
  friend void  protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  friend void protobuf_AssignDesc_net_2fHeroIllustration_2eproto();
  friend void protobuf_ShutdownFile_net_2fHeroIllustration_2eproto();

  void InitAsDefaultInstance();
  static THeroIllustrationWhiteGoldBreakReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>THeroIllustrationWhiteGoldBreakRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/HeroIllustration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THeroIllustrationWhiteGoldBreakRsp : public ::google::protobuf::Message {
 public:
  THeroIllustrationWhiteGoldBreakRsp();
  virtual ~THeroIllustrationWhiteGoldBreakRsp();

  THeroIllustrationWhiteGoldBreakRsp(const THeroIllustrationWhiteGoldBreakRsp& from);

  inline THeroIllustrationWhiteGoldBreakRsp& operator=(const THeroIllustrationWhiteGoldBreakRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THeroIllustrationWhiteGoldBreakRsp& default_instance();

  void Swap(THeroIllustrationWhiteGoldBreakRsp* other);

  // implements Message ----------------------------------------------

  THeroIllustrationWhiteGoldBreakRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THeroIllustrationWhiteGoldBreakRsp& from);
  void MergeFrom(const THeroIllustrationWhiteGoldBreakRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
  inline bool has_illustrationinfo() const;
  inline void clear_illustrationinfo();
  static const int kIllustrationInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THeroIllustrationWhiteGoldBreakRsp</name>
  	<Function>
  		<name>illustrationinfo</name>
  		<replaceName>IllustrationInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_illustrationinfo</name>
  		<replaceName>IllustrationInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_illustrationinfo</name>
  		<replaceName>IllustrationInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_illustrationinfo</name>
  		<replaceName>IllustrationInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::THeroIllustrationInfo& illustrationinfo() const;
  inline ::pb::THeroIllustrationInfo* mutable_illustrationinfo();
  inline ::pb::THeroIllustrationInfo* release_illustrationinfo();
  inline void set_allocated_illustrationinfo(::pb::THeroIllustrationInfo* illustrationinfo);

  // @@protoc_insertion_point(class_scope:pb.THeroIllustrationWhiteGoldBreakRsp)
 private:
  inline void set_has_illustrationinfo();
  inline void clear_has_illustrationinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::THeroIllustrationInfo* illustrationinfo_;
  friend void  protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  friend void protobuf_AssignDesc_net_2fHeroIllustration_2eproto();
  friend void protobuf_ShutdownFile_net_2fHeroIllustration_2eproto();

  void InitAsDefaultInstance();
  static THeroIllustrationWhiteGoldBreakRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>THeroIllustrationPurpleGoldBreakReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/HeroIllustration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THeroIllustrationPurpleGoldBreakReq : public ::google::protobuf::Message {
 public:
  THeroIllustrationPurpleGoldBreakReq();
  virtual ~THeroIllustrationPurpleGoldBreakReq();

  THeroIllustrationPurpleGoldBreakReq(const THeroIllustrationPurpleGoldBreakReq& from);

  inline THeroIllustrationPurpleGoldBreakReq& operator=(const THeroIllustrationPurpleGoldBreakReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THeroIllustrationPurpleGoldBreakReq& default_instance();

  void Swap(THeroIllustrationPurpleGoldBreakReq* other);

  // implements Message ----------------------------------------------

  THeroIllustrationPurpleGoldBreakReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THeroIllustrationPurpleGoldBreakReq& from);
  void MergeFrom(const THeroIllustrationPurpleGoldBreakReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 IllustrationId = 1;
  inline bool has_illustrationid() const;
  inline void clear_illustrationid();
  static const int kIllustrationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THeroIllustrationPurpleGoldBreakReq</name>
  	<Function>
  		<name>illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_illustrationid</name>
  		<replaceName>IllustrationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 illustrationid() const;
  inline void set_illustrationid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.THeroIllustrationPurpleGoldBreakReq)
 private:
  inline void set_has_illustrationid();
  inline void clear_has_illustrationid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 illustrationid_;
  friend void  protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  friend void protobuf_AssignDesc_net_2fHeroIllustration_2eproto();
  friend void protobuf_ShutdownFile_net_2fHeroIllustration_2eproto();

  void InitAsDefaultInstance();
  static THeroIllustrationPurpleGoldBreakReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>THeroIllustrationPurpleGoldBreakRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/HeroIllustration.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THeroIllustrationPurpleGoldBreakRsp : public ::google::protobuf::Message {
 public:
  THeroIllustrationPurpleGoldBreakRsp();
  virtual ~THeroIllustrationPurpleGoldBreakRsp();

  THeroIllustrationPurpleGoldBreakRsp(const THeroIllustrationPurpleGoldBreakRsp& from);

  inline THeroIllustrationPurpleGoldBreakRsp& operator=(const THeroIllustrationPurpleGoldBreakRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THeroIllustrationPurpleGoldBreakRsp& default_instance();

  void Swap(THeroIllustrationPurpleGoldBreakRsp* other);

  // implements Message ----------------------------------------------

  THeroIllustrationPurpleGoldBreakRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THeroIllustrationPurpleGoldBreakRsp& from);
  void MergeFrom(const THeroIllustrationPurpleGoldBreakRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
  inline bool has_illustrationinfo() const;
  inline void clear_illustrationinfo();
  static const int kIllustrationInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THeroIllustrationPurpleGoldBreakRsp</name>
  	<Function>
  		<name>illustrationinfo</name>
  		<replaceName>IllustrationInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_illustrationinfo</name>
  		<replaceName>IllustrationInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_illustrationinfo</name>
  		<replaceName>IllustrationInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_illustrationinfo</name>
  		<replaceName>IllustrationInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::THeroIllustrationInfo& illustrationinfo() const;
  inline ::pb::THeroIllustrationInfo* mutable_illustrationinfo();
  inline ::pb::THeroIllustrationInfo* release_illustrationinfo();
  inline void set_allocated_illustrationinfo(::pb::THeroIllustrationInfo* illustrationinfo);

  // @@protoc_insertion_point(class_scope:pb.THeroIllustrationPurpleGoldBreakRsp)
 private:
  inline void set_has_illustrationinfo();
  inline void clear_has_illustrationinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::THeroIllustrationInfo* illustrationinfo_;
  friend void  protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  friend void protobuf_AssignDesc_net_2fHeroIllustration_2eproto();
  friend void protobuf_ShutdownFile_net_2fHeroIllustration_2eproto();

  void InitAsDefaultInstance();
  static THeroIllustrationPurpleGoldBreakRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// THeroIllustrationInfo

// optional uint32 IllustrationId = 1;
inline bool THeroIllustrationInfo::has_illustrationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void THeroIllustrationInfo::set_has_illustrationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void THeroIllustrationInfo::clear_has_illustrationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void THeroIllustrationInfo::clear_illustrationid() {
  illustrationid_ = 0u;
  clear_has_illustrationid();
}
inline ::google::protobuf::uint32 THeroIllustrationInfo::illustrationid() const {
  // @@protoc_insertion_point(field_get:pb.THeroIllustrationInfo.IllustrationId)
  return illustrationid_;
}
inline void THeroIllustrationInfo::set_illustrationid(::google::protobuf::uint32 value) {
  set_has_illustrationid();
  illustrationid_ = value;
  // @@protoc_insertion_point(field_set:pb.THeroIllustrationInfo.IllustrationId)
}

// optional uint32 IllustrationLv = 2;
inline bool THeroIllustrationInfo::has_illustrationlv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void THeroIllustrationInfo::set_has_illustrationlv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void THeroIllustrationInfo::clear_has_illustrationlv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void THeroIllustrationInfo::clear_illustrationlv() {
  illustrationlv_ = 0u;
  clear_has_illustrationlv();
}
inline ::google::protobuf::uint32 THeroIllustrationInfo::illustrationlv() const {
  // @@protoc_insertion_point(field_get:pb.THeroIllustrationInfo.IllustrationLv)
  return illustrationlv_;
}
inline void THeroIllustrationInfo::set_illustrationlv(::google::protobuf::uint32 value) {
  set_has_illustrationlv();
  illustrationlv_ = value;
  // @@protoc_insertion_point(field_set:pb.THeroIllustrationInfo.IllustrationLv)
}

// optional uint64 GoldBreakTime = 3;
inline bool THeroIllustrationInfo::has_goldbreaktime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void THeroIllustrationInfo::set_has_goldbreaktime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void THeroIllustrationInfo::clear_has_goldbreaktime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void THeroIllustrationInfo::clear_goldbreaktime() {
  goldbreaktime_ = GOOGLE_ULONGLONG(0);
  clear_has_goldbreaktime();
}
inline ::google::protobuf::uint64 THeroIllustrationInfo::goldbreaktime() const {
  // @@protoc_insertion_point(field_get:pb.THeroIllustrationInfo.GoldBreakTime)
  return goldbreaktime_;
}
inline void THeroIllustrationInfo::set_goldbreaktime(::google::protobuf::uint64 value) {
  set_has_goldbreaktime();
  goldbreaktime_ = value;
  // @@protoc_insertion_point(field_set:pb.THeroIllustrationInfo.GoldBreakTime)
}

// optional uint64 WhiteGoldBreakTime = 4;
inline bool THeroIllustrationInfo::has_whitegoldbreaktime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void THeroIllustrationInfo::set_has_whitegoldbreaktime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void THeroIllustrationInfo::clear_has_whitegoldbreaktime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void THeroIllustrationInfo::clear_whitegoldbreaktime() {
  whitegoldbreaktime_ = GOOGLE_ULONGLONG(0);
  clear_has_whitegoldbreaktime();
}
inline ::google::protobuf::uint64 THeroIllustrationInfo::whitegoldbreaktime() const {
  // @@protoc_insertion_point(field_get:pb.THeroIllustrationInfo.WhiteGoldBreakTime)
  return whitegoldbreaktime_;
}
inline void THeroIllustrationInfo::set_whitegoldbreaktime(::google::protobuf::uint64 value) {
  set_has_whitegoldbreaktime();
  whitegoldbreaktime_ = value;
  // @@protoc_insertion_point(field_set:pb.THeroIllustrationInfo.WhiteGoldBreakTime)
}

// optional uint64 PurpleGoldBreakTime = 5;
inline bool THeroIllustrationInfo::has_purplegoldbreaktime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void THeroIllustrationInfo::set_has_purplegoldbreaktime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void THeroIllustrationInfo::clear_has_purplegoldbreaktime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void THeroIllustrationInfo::clear_purplegoldbreaktime() {
  purplegoldbreaktime_ = GOOGLE_ULONGLONG(0);
  clear_has_purplegoldbreaktime();
}
inline ::google::protobuf::uint64 THeroIllustrationInfo::purplegoldbreaktime() const {
  // @@protoc_insertion_point(field_get:pb.THeroIllustrationInfo.PurpleGoldBreakTime)
  return purplegoldbreaktime_;
}
inline void THeroIllustrationInfo::set_purplegoldbreaktime(::google::protobuf::uint64 value) {
  set_has_purplegoldbreaktime();
  purplegoldbreaktime_ = value;
  // @@protoc_insertion_point(field_set:pb.THeroIllustrationInfo.PurpleGoldBreakTime)
}

// -------------------------------------------------------------------

// THeroIllustrationGetInfoRsp

// repeated .pb.THeroIllustrationInfo IllustrationArr = 1;
inline int THeroIllustrationGetInfoRsp::illustrationarr_size() const {
  return illustrationarr_.size();
}
inline void THeroIllustrationGetInfoRsp::clear_illustrationarr() {
  illustrationarr_.Clear();
}
inline const ::pb::THeroIllustrationInfo& THeroIllustrationGetInfoRsp::illustrationarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.THeroIllustrationGetInfoRsp.IllustrationArr)
  return illustrationarr_.Get(index);
}
inline ::pb::THeroIllustrationInfo* THeroIllustrationGetInfoRsp::mutable_illustrationarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.THeroIllustrationGetInfoRsp.IllustrationArr)
  return illustrationarr_.Mutable(index);
}
inline ::pb::THeroIllustrationInfo* THeroIllustrationGetInfoRsp::add_illustrationarr() {
  // @@protoc_insertion_point(field_add:pb.THeroIllustrationGetInfoRsp.IllustrationArr)
  return illustrationarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::THeroIllustrationInfo >&
THeroIllustrationGetInfoRsp::illustrationarr() const {
  // @@protoc_insertion_point(field_list:pb.THeroIllustrationGetInfoRsp.IllustrationArr)
  return illustrationarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::THeroIllustrationInfo >*
THeroIllustrationGetInfoRsp::mutable_illustrationarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.THeroIllustrationGetInfoRsp.IllustrationArr)
  return &illustrationarr_;
}

// -------------------------------------------------------------------

// THeroIllustrationActiveReq

// optional uint32 IllustrationId = 1;
inline bool THeroIllustrationActiveReq::has_illustrationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void THeroIllustrationActiveReq::set_has_illustrationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void THeroIllustrationActiveReq::clear_has_illustrationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void THeroIllustrationActiveReq::clear_illustrationid() {
  illustrationid_ = 0u;
  clear_has_illustrationid();
}
inline ::google::protobuf::uint32 THeroIllustrationActiveReq::illustrationid() const {
  // @@protoc_insertion_point(field_get:pb.THeroIllustrationActiveReq.IllustrationId)
  return illustrationid_;
}
inline void THeroIllustrationActiveReq::set_illustrationid(::google::protobuf::uint32 value) {
  set_has_illustrationid();
  illustrationid_ = value;
  // @@protoc_insertion_point(field_set:pb.THeroIllustrationActiveReq.IllustrationId)
}

// -------------------------------------------------------------------

// THeroIllustrationActiveRsp

// optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
inline bool THeroIllustrationActiveRsp::has_illustrationinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void THeroIllustrationActiveRsp::set_has_illustrationinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void THeroIllustrationActiveRsp::clear_has_illustrationinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void THeroIllustrationActiveRsp::clear_illustrationinfo() {
  if (illustrationinfo_ != NULL) illustrationinfo_->::pb::THeroIllustrationInfo::Clear();
  clear_has_illustrationinfo();
}
inline const ::pb::THeroIllustrationInfo& THeroIllustrationActiveRsp::illustrationinfo() const {
  // @@protoc_insertion_point(field_get:pb.THeroIllustrationActiveRsp.IllustrationInfo)
  return illustrationinfo_ != NULL ? *illustrationinfo_ : *default_instance_->illustrationinfo_;
}
inline ::pb::THeroIllustrationInfo* THeroIllustrationActiveRsp::mutable_illustrationinfo() {
  set_has_illustrationinfo();
  if (illustrationinfo_ == NULL) illustrationinfo_ = new ::pb::THeroIllustrationInfo;
  // @@protoc_insertion_point(field_mutable:pb.THeroIllustrationActiveRsp.IllustrationInfo)
  return illustrationinfo_;
}
inline ::pb::THeroIllustrationInfo* THeroIllustrationActiveRsp::release_illustrationinfo() {
  clear_has_illustrationinfo();
  ::pb::THeroIllustrationInfo* temp = illustrationinfo_;
  illustrationinfo_ = NULL;
  return temp;
}
inline void THeroIllustrationActiveRsp::set_allocated_illustrationinfo(::pb::THeroIllustrationInfo* illustrationinfo) {
  delete illustrationinfo_;
  illustrationinfo_ = illustrationinfo;
  if (illustrationinfo) {
    set_has_illustrationinfo();
  } else {
    clear_has_illustrationinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.THeroIllustrationActiveRsp.IllustrationInfo)
}

// -------------------------------------------------------------------

// THeroIllustrationUpgradeReq

// optional uint32 IllustrationId = 1;
inline bool THeroIllustrationUpgradeReq::has_illustrationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void THeroIllustrationUpgradeReq::set_has_illustrationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void THeroIllustrationUpgradeReq::clear_has_illustrationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void THeroIllustrationUpgradeReq::clear_illustrationid() {
  illustrationid_ = 0u;
  clear_has_illustrationid();
}
inline ::google::protobuf::uint32 THeroIllustrationUpgradeReq::illustrationid() const {
  // @@protoc_insertion_point(field_get:pb.THeroIllustrationUpgradeReq.IllustrationId)
  return illustrationid_;
}
inline void THeroIllustrationUpgradeReq::set_illustrationid(::google::protobuf::uint32 value) {
  set_has_illustrationid();
  illustrationid_ = value;
  // @@protoc_insertion_point(field_set:pb.THeroIllustrationUpgradeReq.IllustrationId)
}

// -------------------------------------------------------------------

// THeroIllustrationUpgradeRsp

// optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
inline bool THeroIllustrationUpgradeRsp::has_illustrationinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void THeroIllustrationUpgradeRsp::set_has_illustrationinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void THeroIllustrationUpgradeRsp::clear_has_illustrationinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void THeroIllustrationUpgradeRsp::clear_illustrationinfo() {
  if (illustrationinfo_ != NULL) illustrationinfo_->::pb::THeroIllustrationInfo::Clear();
  clear_has_illustrationinfo();
}
inline const ::pb::THeroIllustrationInfo& THeroIllustrationUpgradeRsp::illustrationinfo() const {
  // @@protoc_insertion_point(field_get:pb.THeroIllustrationUpgradeRsp.IllustrationInfo)
  return illustrationinfo_ != NULL ? *illustrationinfo_ : *default_instance_->illustrationinfo_;
}
inline ::pb::THeroIllustrationInfo* THeroIllustrationUpgradeRsp::mutable_illustrationinfo() {
  set_has_illustrationinfo();
  if (illustrationinfo_ == NULL) illustrationinfo_ = new ::pb::THeroIllustrationInfo;
  // @@protoc_insertion_point(field_mutable:pb.THeroIllustrationUpgradeRsp.IllustrationInfo)
  return illustrationinfo_;
}
inline ::pb::THeroIllustrationInfo* THeroIllustrationUpgradeRsp::release_illustrationinfo() {
  clear_has_illustrationinfo();
  ::pb::THeroIllustrationInfo* temp = illustrationinfo_;
  illustrationinfo_ = NULL;
  return temp;
}
inline void THeroIllustrationUpgradeRsp::set_allocated_illustrationinfo(::pb::THeroIllustrationInfo* illustrationinfo) {
  delete illustrationinfo_;
  illustrationinfo_ = illustrationinfo;
  if (illustrationinfo) {
    set_has_illustrationinfo();
  } else {
    clear_has_illustrationinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.THeroIllustrationUpgradeRsp.IllustrationInfo)
}

// -------------------------------------------------------------------

// THeroIllustrationGoldBreakReq

// optional uint32 IllustrationId = 1;
inline bool THeroIllustrationGoldBreakReq::has_illustrationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void THeroIllustrationGoldBreakReq::set_has_illustrationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void THeroIllustrationGoldBreakReq::clear_has_illustrationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void THeroIllustrationGoldBreakReq::clear_illustrationid() {
  illustrationid_ = 0u;
  clear_has_illustrationid();
}
inline ::google::protobuf::uint32 THeroIllustrationGoldBreakReq::illustrationid() const {
  // @@protoc_insertion_point(field_get:pb.THeroIllustrationGoldBreakReq.IllustrationId)
  return illustrationid_;
}
inline void THeroIllustrationGoldBreakReq::set_illustrationid(::google::protobuf::uint32 value) {
  set_has_illustrationid();
  illustrationid_ = value;
  // @@protoc_insertion_point(field_set:pb.THeroIllustrationGoldBreakReq.IllustrationId)
}

// -------------------------------------------------------------------

// THeroIllustrationGoldBreakRsp

// optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
inline bool THeroIllustrationGoldBreakRsp::has_illustrationinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void THeroIllustrationGoldBreakRsp::set_has_illustrationinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void THeroIllustrationGoldBreakRsp::clear_has_illustrationinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void THeroIllustrationGoldBreakRsp::clear_illustrationinfo() {
  if (illustrationinfo_ != NULL) illustrationinfo_->::pb::THeroIllustrationInfo::Clear();
  clear_has_illustrationinfo();
}
inline const ::pb::THeroIllustrationInfo& THeroIllustrationGoldBreakRsp::illustrationinfo() const {
  // @@protoc_insertion_point(field_get:pb.THeroIllustrationGoldBreakRsp.IllustrationInfo)
  return illustrationinfo_ != NULL ? *illustrationinfo_ : *default_instance_->illustrationinfo_;
}
inline ::pb::THeroIllustrationInfo* THeroIllustrationGoldBreakRsp::mutable_illustrationinfo() {
  set_has_illustrationinfo();
  if (illustrationinfo_ == NULL) illustrationinfo_ = new ::pb::THeroIllustrationInfo;
  // @@protoc_insertion_point(field_mutable:pb.THeroIllustrationGoldBreakRsp.IllustrationInfo)
  return illustrationinfo_;
}
inline ::pb::THeroIllustrationInfo* THeroIllustrationGoldBreakRsp::release_illustrationinfo() {
  clear_has_illustrationinfo();
  ::pb::THeroIllustrationInfo* temp = illustrationinfo_;
  illustrationinfo_ = NULL;
  return temp;
}
inline void THeroIllustrationGoldBreakRsp::set_allocated_illustrationinfo(::pb::THeroIllustrationInfo* illustrationinfo) {
  delete illustrationinfo_;
  illustrationinfo_ = illustrationinfo;
  if (illustrationinfo) {
    set_has_illustrationinfo();
  } else {
    clear_has_illustrationinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.THeroIllustrationGoldBreakRsp.IllustrationInfo)
}

// -------------------------------------------------------------------

// THeroIllustrationWhiteGoldBreakReq

// optional uint32 IllustrationId = 1;
inline bool THeroIllustrationWhiteGoldBreakReq::has_illustrationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void THeroIllustrationWhiteGoldBreakReq::set_has_illustrationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void THeroIllustrationWhiteGoldBreakReq::clear_has_illustrationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void THeroIllustrationWhiteGoldBreakReq::clear_illustrationid() {
  illustrationid_ = 0u;
  clear_has_illustrationid();
}
inline ::google::protobuf::uint32 THeroIllustrationWhiteGoldBreakReq::illustrationid() const {
  // @@protoc_insertion_point(field_get:pb.THeroIllustrationWhiteGoldBreakReq.IllustrationId)
  return illustrationid_;
}
inline void THeroIllustrationWhiteGoldBreakReq::set_illustrationid(::google::protobuf::uint32 value) {
  set_has_illustrationid();
  illustrationid_ = value;
  // @@protoc_insertion_point(field_set:pb.THeroIllustrationWhiteGoldBreakReq.IllustrationId)
}

// -------------------------------------------------------------------

// THeroIllustrationWhiteGoldBreakRsp

// optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
inline bool THeroIllustrationWhiteGoldBreakRsp::has_illustrationinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void THeroIllustrationWhiteGoldBreakRsp::set_has_illustrationinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void THeroIllustrationWhiteGoldBreakRsp::clear_has_illustrationinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void THeroIllustrationWhiteGoldBreakRsp::clear_illustrationinfo() {
  if (illustrationinfo_ != NULL) illustrationinfo_->::pb::THeroIllustrationInfo::Clear();
  clear_has_illustrationinfo();
}
inline const ::pb::THeroIllustrationInfo& THeroIllustrationWhiteGoldBreakRsp::illustrationinfo() const {
  // @@protoc_insertion_point(field_get:pb.THeroIllustrationWhiteGoldBreakRsp.IllustrationInfo)
  return illustrationinfo_ != NULL ? *illustrationinfo_ : *default_instance_->illustrationinfo_;
}
inline ::pb::THeroIllustrationInfo* THeroIllustrationWhiteGoldBreakRsp::mutable_illustrationinfo() {
  set_has_illustrationinfo();
  if (illustrationinfo_ == NULL) illustrationinfo_ = new ::pb::THeroIllustrationInfo;
  // @@protoc_insertion_point(field_mutable:pb.THeroIllustrationWhiteGoldBreakRsp.IllustrationInfo)
  return illustrationinfo_;
}
inline ::pb::THeroIllustrationInfo* THeroIllustrationWhiteGoldBreakRsp::release_illustrationinfo() {
  clear_has_illustrationinfo();
  ::pb::THeroIllustrationInfo* temp = illustrationinfo_;
  illustrationinfo_ = NULL;
  return temp;
}
inline void THeroIllustrationWhiteGoldBreakRsp::set_allocated_illustrationinfo(::pb::THeroIllustrationInfo* illustrationinfo) {
  delete illustrationinfo_;
  illustrationinfo_ = illustrationinfo;
  if (illustrationinfo) {
    set_has_illustrationinfo();
  } else {
    clear_has_illustrationinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.THeroIllustrationWhiteGoldBreakRsp.IllustrationInfo)
}

// -------------------------------------------------------------------

// THeroIllustrationPurpleGoldBreakReq

// optional uint32 IllustrationId = 1;
inline bool THeroIllustrationPurpleGoldBreakReq::has_illustrationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void THeroIllustrationPurpleGoldBreakReq::set_has_illustrationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void THeroIllustrationPurpleGoldBreakReq::clear_has_illustrationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void THeroIllustrationPurpleGoldBreakReq::clear_illustrationid() {
  illustrationid_ = 0u;
  clear_has_illustrationid();
}
inline ::google::protobuf::uint32 THeroIllustrationPurpleGoldBreakReq::illustrationid() const {
  // @@protoc_insertion_point(field_get:pb.THeroIllustrationPurpleGoldBreakReq.IllustrationId)
  return illustrationid_;
}
inline void THeroIllustrationPurpleGoldBreakReq::set_illustrationid(::google::protobuf::uint32 value) {
  set_has_illustrationid();
  illustrationid_ = value;
  // @@protoc_insertion_point(field_set:pb.THeroIllustrationPurpleGoldBreakReq.IllustrationId)
}

// -------------------------------------------------------------------

// THeroIllustrationPurpleGoldBreakRsp

// optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
inline bool THeroIllustrationPurpleGoldBreakRsp::has_illustrationinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void THeroIllustrationPurpleGoldBreakRsp::set_has_illustrationinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void THeroIllustrationPurpleGoldBreakRsp::clear_has_illustrationinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void THeroIllustrationPurpleGoldBreakRsp::clear_illustrationinfo() {
  if (illustrationinfo_ != NULL) illustrationinfo_->::pb::THeroIllustrationInfo::Clear();
  clear_has_illustrationinfo();
}
inline const ::pb::THeroIllustrationInfo& THeroIllustrationPurpleGoldBreakRsp::illustrationinfo() const {
  // @@protoc_insertion_point(field_get:pb.THeroIllustrationPurpleGoldBreakRsp.IllustrationInfo)
  return illustrationinfo_ != NULL ? *illustrationinfo_ : *default_instance_->illustrationinfo_;
}
inline ::pb::THeroIllustrationInfo* THeroIllustrationPurpleGoldBreakRsp::mutable_illustrationinfo() {
  set_has_illustrationinfo();
  if (illustrationinfo_ == NULL) illustrationinfo_ = new ::pb::THeroIllustrationInfo;
  // @@protoc_insertion_point(field_mutable:pb.THeroIllustrationPurpleGoldBreakRsp.IllustrationInfo)
  return illustrationinfo_;
}
inline ::pb::THeroIllustrationInfo* THeroIllustrationPurpleGoldBreakRsp::release_illustrationinfo() {
  clear_has_illustrationinfo();
  ::pb::THeroIllustrationInfo* temp = illustrationinfo_;
  illustrationinfo_ = NULL;
  return temp;
}
inline void THeroIllustrationPurpleGoldBreakRsp::set_allocated_illustrationinfo(::pb::THeroIllustrationInfo* illustrationinfo) {
  delete illustrationinfo_;
  illustrationinfo_ = illustrationinfo;
  if (illustrationinfo) {
    set_has_illustrationinfo();
  } else {
    clear_has_illustrationinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.THeroIllustrationPurpleGoldBreakRsp.IllustrationInfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fHeroIllustration_2eproto__INCLUDED
