// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/SceneHeightData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/SceneHeightData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* CellData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneHeightData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneHeightData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fSceneHeightData_2eproto() {
  protobuf_AddDesc_module_2fSceneHeightData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/SceneHeightData.proto");
  GOOGLE_CHECK(file != NULL);
  CellData_descriptor_ = file->message_type(0);
  static const int CellData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellData, cellindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellData, height_),
  };
  CellData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellData_descriptor_,
      CellData::default_instance_,
      CellData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellData));
  SceneHeightData_descriptor_ = file->message_type(1);
  static const int SceneHeightData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneHeightData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneHeightData, artscenename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneHeightData, coordinateorigin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneHeightData, cellsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneHeightData, areasize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneHeightData, celldataarr_),
  };
  SceneHeightData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneHeightData_descriptor_,
      SceneHeightData::default_instance_,
      SceneHeightData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneHeightData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneHeightData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneHeightData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fSceneHeightData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellData_descriptor_, &CellData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneHeightData_descriptor_, &SceneHeightData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fSceneHeightData_2eproto() {
  delete CellData::default_instance_;
  delete CellData_reflection_;
  delete SceneHeightData::default_instance_;
  delete SceneHeightData_reflection_;
}

void protobuf_AddDesc_module_2fSceneHeightData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fUtil_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034module/SceneHeightData.proto\022\002pb\032\021modu"
    "le/Util.proto\"-\n\010CellData\022\021\n\tCellIndex\030\001"
    " \001(\005\022\016\n\006Height\030\002 \001(\005\"\315\001\n\017SceneHeightData"
    "\022\n\n\002Id\030\001 \001(\005\022\024\n\014ArtSceneName\030\002 \001(\t\022+\n\020Co"
    "ordinateOrigin\030\003 \001(\0132\021.pb.PbVector2_Int\022"
    "#\n\010CellSize\030\004 \001(\0132\021.pb.PbVector2_Int\022#\n\010"
    "AreaSize\030\005 \001(\0132\021.pb.PbVector2_Int\022!\n\013Cel"
    "lDataArr\030\006 \003(\0132\014.pb.CellData", 308);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/SceneHeightData.proto", &protobuf_RegisterTypes);
  CellData::default_instance_ = new CellData();
  SceneHeightData::default_instance_ = new SceneHeightData();
  CellData::default_instance_->InitAsDefaultInstance();
  SceneHeightData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fSceneHeightData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fSceneHeightData_2eproto {
  StaticDescriptorInitializer_module_2fSceneHeightData_2eproto() {
    protobuf_AddDesc_module_2fSceneHeightData_2eproto();
  }
} static_descriptor_initializer_module_2fSceneHeightData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CellData::kCellIndexFieldNumber;
const int CellData::kHeightFieldNumber;
#endif  // !_MSC_VER

CellData::CellData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.CellData)
}

void CellData::InitAsDefaultInstance() {
}

CellData::CellData(const CellData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.CellData)
}

void CellData::SharedCtor() {
  _cached_size_ = 0;
  cellindex_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellData::~CellData() {
  // @@protoc_insertion_point(destructor:pb.CellData)
  SharedDtor();
}

void CellData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CellData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellData_descriptor_;
}

const CellData& CellData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneHeightData_2eproto();
  return *default_instance_;
}

CellData* CellData::default_instance_ = NULL;

CellData* CellData::New() const {
  return new CellData;
}

void CellData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CellData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(cellindex_, height_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.CellData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CellIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellindex_)));
          set_has_cellindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Height;
        break;
      }

      // optional int32 Height = 2;
      case 2: {
        if (tag == 16) {
         parse_Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.CellData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.CellData)
  return false;
#undef DO_
}

void CellData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.CellData)
  // optional int32 CellIndex = 1;
  if (has_cellindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cellindex(), output);
  }

  // optional int32 Height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.CellData)
}

::google::protobuf::uint8* CellData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.CellData)
  // optional int32 CellIndex = 1;
  if (has_cellindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cellindex(), target);
  }

  // optional int32 Height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.CellData)
  return target;
}

int CellData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CellIndex = 1;
    if (has_cellindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cellindex());
    }

    // optional int32 Height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellData::MergeFrom(const CellData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellindex()) {
      set_cellindex(from.cellindex());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellData::CopyFrom(const CellData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellData::IsInitialized() const {

  return true;
}

void CellData::Swap(CellData* other) {
  if (other != this) {
    std::swap(cellindex_, other->cellindex_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellData_descriptor_;
  metadata.reflection = CellData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneHeightData::kIdFieldNumber;
const int SceneHeightData::kArtSceneNameFieldNumber;
const int SceneHeightData::kCoordinateOriginFieldNumber;
const int SceneHeightData::kCellSizeFieldNumber;
const int SceneHeightData::kAreaSizeFieldNumber;
const int SceneHeightData::kCellDataArrFieldNumber;
#endif  // !_MSC_VER

SceneHeightData::SceneHeightData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SceneHeightData)
}

void SceneHeightData::InitAsDefaultInstance() {
  coordinateorigin_ = const_cast< ::pb::PbVector2_Int*>(&::pb::PbVector2_Int::default_instance());
  cellsize_ = const_cast< ::pb::PbVector2_Int*>(&::pb::PbVector2_Int::default_instance());
  areasize_ = const_cast< ::pb::PbVector2_Int*>(&::pb::PbVector2_Int::default_instance());
}

SceneHeightData::SceneHeightData(const SceneHeightData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SceneHeightData)
}

void SceneHeightData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  artscenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coordinateorigin_ = NULL;
  cellsize_ = NULL;
  areasize_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneHeightData::~SceneHeightData() {
  // @@protoc_insertion_point(destructor:pb.SceneHeightData)
  SharedDtor();
}

void SceneHeightData::SharedDtor() {
  if (artscenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete artscenename_;
  }
  if (this != default_instance_) {
    delete coordinateorigin_;
    delete cellsize_;
    delete areasize_;
  }
}

void SceneHeightData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneHeightData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneHeightData_descriptor_;
}

const SceneHeightData& SceneHeightData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneHeightData_2eproto();
  return *default_instance_;
}

SceneHeightData* SceneHeightData::default_instance_ = NULL;

SceneHeightData* SceneHeightData::New() const {
  return new SceneHeightData;
}

void SceneHeightData::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    id_ = 0;
    if (has_artscenename()) {
      if (artscenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        artscenename_->clear();
      }
    }
    if (has_coordinateorigin()) {
      if (coordinateorigin_ != NULL) coordinateorigin_->::pb::PbVector2_Int::Clear();
    }
    if (has_cellsize()) {
      if (cellsize_ != NULL) cellsize_->::pb::PbVector2_Int::Clear();
    }
    if (has_areasize()) {
      if (areasize_ != NULL) areasize_->::pb::PbVector2_Int::Clear();
    }
  }
  celldataarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneHeightData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SceneHeightData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArtSceneName;
        break;
      }

      // optional string ArtSceneName = 2;
      case 2: {
        if (tag == 18) {
         parse_ArtSceneName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_artscenename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->artscenename().data(), this->artscenename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "artscenename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_CoordinateOrigin;
        break;
      }

      // optional .pb.PbVector2_Int CoordinateOrigin = 3;
      case 3: {
        if (tag == 26) {
         parse_CoordinateOrigin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coordinateorigin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_CellSize;
        break;
      }

      // optional .pb.PbVector2_Int CellSize = 4;
      case 4: {
        if (tag == 34) {
         parse_CellSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cellsize()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_AreaSize;
        break;
      }

      // optional .pb.PbVector2_Int AreaSize = 5;
      case 5: {
        if (tag == 42) {
         parse_AreaSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_areasize()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_CellDataArr;
        break;
      }

      // repeated .pb.CellData CellDataArr = 6;
      case 6: {
        if (tag == 50) {
         parse_CellDataArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_celldataarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_CellDataArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SceneHeightData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SceneHeightData)
  return false;
#undef DO_
}

void SceneHeightData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SceneHeightData)
  // optional int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string ArtSceneName = 2;
  if (has_artscenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artscenename().data(), this->artscenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artscenename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->artscenename(), output);
  }

  // optional .pb.PbVector2_Int CoordinateOrigin = 3;
  if (has_coordinateorigin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->coordinateorigin(), output);
  }

  // optional .pb.PbVector2_Int CellSize = 4;
  if (has_cellsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cellsize(), output);
  }

  // optional .pb.PbVector2_Int AreaSize = 5;
  if (has_areasize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->areasize(), output);
  }

  // repeated .pb.CellData CellDataArr = 6;
  for (int i = 0; i < this->celldataarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->celldataarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SceneHeightData)
}

::google::protobuf::uint8* SceneHeightData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SceneHeightData)
  // optional int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string ArtSceneName = 2;
  if (has_artscenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->artscenename().data(), this->artscenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "artscenename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->artscenename(), target);
  }

  // optional .pb.PbVector2_Int CoordinateOrigin = 3;
  if (has_coordinateorigin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->coordinateorigin(), target);
  }

  // optional .pb.PbVector2_Int CellSize = 4;
  if (has_cellsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cellsize(), target);
  }

  // optional .pb.PbVector2_Int AreaSize = 5;
  if (has_areasize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->areasize(), target);
  }

  // repeated .pb.CellData CellDataArr = 6;
  for (int i = 0; i < this->celldataarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->celldataarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SceneHeightData)
  return target;
}

int SceneHeightData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string ArtSceneName = 2;
    if (has_artscenename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->artscenename());
    }

    // optional .pb.PbVector2_Int CoordinateOrigin = 3;
    if (has_coordinateorigin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coordinateorigin());
    }

    // optional .pb.PbVector2_Int CellSize = 4;
    if (has_cellsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cellsize());
    }

    // optional .pb.PbVector2_Int AreaSize = 5;
    if (has_areasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->areasize());
    }

  }
  // repeated .pb.CellData CellDataArr = 6;
  total_size += 1 * this->celldataarr_size();
  for (int i = 0; i < this->celldataarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->celldataarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneHeightData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneHeightData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneHeightData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneHeightData::MergeFrom(const SceneHeightData& from) {
  GOOGLE_CHECK_NE(&from, this);
  celldataarr_.MergeFrom(from.celldataarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_artscenename()) {
      set_artscenename(from.artscenename());
    }
    if (from.has_coordinateorigin()) {
      mutable_coordinateorigin()->::pb::PbVector2_Int::MergeFrom(from.coordinateorigin());
    }
    if (from.has_cellsize()) {
      mutable_cellsize()->::pb::PbVector2_Int::MergeFrom(from.cellsize());
    }
    if (from.has_areasize()) {
      mutable_areasize()->::pb::PbVector2_Int::MergeFrom(from.areasize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneHeightData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneHeightData::CopyFrom(const SceneHeightData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneHeightData::IsInitialized() const {

  return true;
}

void SceneHeightData::Swap(SceneHeightData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(artscenename_, other->artscenename_);
    std::swap(coordinateorigin_, other->coordinateorigin_);
    std::swap(cellsize_, other->cellsize_);
    std::swap(areasize_, other->areasize_);
    celldataarr_.Swap(&other->celldataarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneHeightData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneHeightData_descriptor_;
  metadata.reflection = SceneHeightData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
