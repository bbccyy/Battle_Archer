// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/SlgBag.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/SlgBag.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TSlgBagDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgBagDataRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgBagNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgBagNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgBagRepileReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgBagRepileReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgBagUseItemReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgBagUseItemReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgBagUseItemRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgBagUseItemRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fSlgBag_2eproto() {
  protobuf_AddDesc_net_2fSlgBag_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/SlgBag.proto");
  GOOGLE_CHECK(file != NULL);
  TSlgBagDataRsp_descriptor_ = file->message_type(0);
  static const int TSlgBagDataRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgBagDataRsp, slgproparr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgBagDataRsp, slgarmarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgBagDataRsp, slgarmstuffarr_),
  };
  TSlgBagDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgBagDataRsp_descriptor_,
      TSlgBagDataRsp::default_instance_,
      TSlgBagDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgBagDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgBagDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgBagDataRsp));
  TSlgBagNotify_descriptor_ = file->message_type(1);
  static const int TSlgBagNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgBagNotify, slgproparr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgBagNotify, slgarmarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgBagNotify, slgarmstuffarr_),
  };
  TSlgBagNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgBagNotify_descriptor_,
      TSlgBagNotify::default_instance_,
      TSlgBagNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgBagNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgBagNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgBagNotify));
  TSlgBagRepileReq_descriptor_ = file->message_type(2);
  static const int TSlgBagRepileReq_offsets_[1] = {
  };
  TSlgBagRepileReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgBagRepileReq_descriptor_,
      TSlgBagRepileReq::default_instance_,
      TSlgBagRepileReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgBagRepileReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgBagRepileReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgBagRepileReq));
  TSlgBagUseItemReq_descriptor_ = file->message_type(3);
  static const int TSlgBagUseItemReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgBagUseItemReq, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgBagUseItemReq, num_),
  };
  TSlgBagUseItemReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgBagUseItemReq_descriptor_,
      TSlgBagUseItemReq::default_instance_,
      TSlgBagUseItemReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgBagUseItemReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgBagUseItemReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgBagUseItemReq));
  TSlgBagUseItemRsp_descriptor_ = file->message_type(4);
  static const int TSlgBagUseItemRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgBagUseItemRsp, gridindex_),
  };
  TSlgBagUseItemRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgBagUseItemRsp_descriptor_,
      TSlgBagUseItemRsp::default_instance_,
      TSlgBagUseItemRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgBagUseItemRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgBagUseItemRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgBagUseItemRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fSlgBag_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgBagDataRsp_descriptor_, &TSlgBagDataRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgBagNotify_descriptor_, &TSlgBagNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgBagRepileReq_descriptor_, &TSlgBagRepileReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgBagUseItemReq_descriptor_, &TSlgBagUseItemReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgBagUseItemRsp_descriptor_, &TSlgBagUseItemRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fSlgBag_2eproto() {
  delete TSlgBagDataRsp::default_instance_;
  delete TSlgBagDataRsp_reflection_;
  delete TSlgBagNotify::default_instance_;
  delete TSlgBagNotify_reflection_;
  delete TSlgBagRepileReq::default_instance_;
  delete TSlgBagRepileReq_reflection_;
  delete TSlgBagUseItemReq::default_instance_;
  delete TSlgBagUseItemReq_reflection_;
  delete TSlgBagUseItemRsp::default_instance_;
  delete TSlgBagUseItemRsp_reflection_;
}

void protobuf_AddDesc_net_2fSlgBag_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020net/SlgBag.proto\022\002pb\032\020net/Common.proto"
    "\"\202\001\n\016TSlgBagDataRsp\022#\n\nSlgPropArr\030\001 \003(\0132"
    "\017.pb.TSimpleItem\022\"\n\tSlgArmArr\030\002 \003(\0132\017.pb"
    ".TSimpleItem\022\'\n\016SlgArmStuffArr\030\003 \003(\0132\017.p"
    "b.TSimpleItem\"\201\001\n\rTSlgBagNotify\022#\n\nSlgPr"
    "opArr\030\001 \003(\0132\017.pb.TSimpleItem\022\"\n\tSlgArmAr"
    "r\030\002 \003(\0132\017.pb.TSimpleItem\022\'\n\016SlgArmStuffA"
    "rr\030\003 \003(\0132\017.pb.TSimpleItem\"\022\n\020TSlgBagRepi"
    "leReq\"-\n\021TSlgBagUseItemReq\022\013\n\003Tid\030\001 \001(\r\022"
    "\013\n\003Num\030\002 \001(\r\"&\n\021TSlgBagUseItemRsp\022\021\n\tGri"
    "dIndex\030\001 \001(\r", 412);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/SlgBag.proto", &protobuf_RegisterTypes);
  TSlgBagDataRsp::default_instance_ = new TSlgBagDataRsp();
  TSlgBagNotify::default_instance_ = new TSlgBagNotify();
  TSlgBagRepileReq::default_instance_ = new TSlgBagRepileReq();
  TSlgBagUseItemReq::default_instance_ = new TSlgBagUseItemReq();
  TSlgBagUseItemRsp::default_instance_ = new TSlgBagUseItemRsp();
  TSlgBagDataRsp::default_instance_->InitAsDefaultInstance();
  TSlgBagNotify::default_instance_->InitAsDefaultInstance();
  TSlgBagRepileReq::default_instance_->InitAsDefaultInstance();
  TSlgBagUseItemReq::default_instance_->InitAsDefaultInstance();
  TSlgBagUseItemRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fSlgBag_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fSlgBag_2eproto {
  StaticDescriptorInitializer_net_2fSlgBag_2eproto() {
    protobuf_AddDesc_net_2fSlgBag_2eproto();
  }
} static_descriptor_initializer_net_2fSlgBag_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TSlgBagDataRsp::kSlgPropArrFieldNumber;
const int TSlgBagDataRsp::kSlgArmArrFieldNumber;
const int TSlgBagDataRsp::kSlgArmStuffArrFieldNumber;
#endif  // !_MSC_VER

TSlgBagDataRsp::TSlgBagDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgBagDataRsp)
}

void TSlgBagDataRsp::InitAsDefaultInstance() {
}

TSlgBagDataRsp::TSlgBagDataRsp(const TSlgBagDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgBagDataRsp)
}

void TSlgBagDataRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgBagDataRsp::~TSlgBagDataRsp() {
  // @@protoc_insertion_point(destructor:pb.TSlgBagDataRsp)
  SharedDtor();
}

void TSlgBagDataRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgBagDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgBagDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgBagDataRsp_descriptor_;
}

const TSlgBagDataRsp& TSlgBagDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgBag_2eproto();
  return *default_instance_;
}

TSlgBagDataRsp* TSlgBagDataRsp::default_instance_ = NULL;

TSlgBagDataRsp* TSlgBagDataRsp::New() const {
  return new TSlgBagDataRsp;
}

void TSlgBagDataRsp::Clear() {
  slgproparr_.Clear();
  slgarmarr_.Clear();
  slgarmstuffarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgBagDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgBagDataRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TSimpleItem SlgPropArr = 1;
      case 1: {
        if (tag == 10) {
         parse_SlgPropArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slgproparr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_SlgPropArr;
        if (input->ExpectTag(18)) goto parse_SlgArmArr;
        break;
      }

      // repeated .pb.TSimpleItem SlgArmArr = 2;
      case 2: {
        if (tag == 18) {
         parse_SlgArmArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slgarmarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SlgArmArr;
        if (input->ExpectTag(26)) goto parse_SlgArmStuffArr;
        break;
      }

      // repeated .pb.TSimpleItem SlgArmStuffArr = 3;
      case 3: {
        if (tag == 26) {
         parse_SlgArmStuffArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slgarmstuffarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SlgArmStuffArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgBagDataRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgBagDataRsp)
  return false;
#undef DO_
}

void TSlgBagDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgBagDataRsp)
  // repeated .pb.TSimpleItem SlgPropArr = 1;
  for (int i = 0; i < this->slgproparr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slgproparr(i), output);
  }

  // repeated .pb.TSimpleItem SlgArmArr = 2;
  for (int i = 0; i < this->slgarmarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slgarmarr(i), output);
  }

  // repeated .pb.TSimpleItem SlgArmStuffArr = 3;
  for (int i = 0; i < this->slgarmstuffarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slgarmstuffarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgBagDataRsp)
}

::google::protobuf::uint8* TSlgBagDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgBagDataRsp)
  // repeated .pb.TSimpleItem SlgPropArr = 1;
  for (int i = 0; i < this->slgproparr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->slgproparr(i), target);
  }

  // repeated .pb.TSimpleItem SlgArmArr = 2;
  for (int i = 0; i < this->slgarmarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slgarmarr(i), target);
  }

  // repeated .pb.TSimpleItem SlgArmStuffArr = 3;
  for (int i = 0; i < this->slgarmstuffarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->slgarmstuffarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgBagDataRsp)
  return target;
}

int TSlgBagDataRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TSimpleItem SlgPropArr = 1;
  total_size += 1 * this->slgproparr_size();
  for (int i = 0; i < this->slgproparr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slgproparr(i));
  }

  // repeated .pb.TSimpleItem SlgArmArr = 2;
  total_size += 1 * this->slgarmarr_size();
  for (int i = 0; i < this->slgarmarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slgarmarr(i));
  }

  // repeated .pb.TSimpleItem SlgArmStuffArr = 3;
  total_size += 1 * this->slgarmstuffarr_size();
  for (int i = 0; i < this->slgarmstuffarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slgarmstuffarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgBagDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgBagDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgBagDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgBagDataRsp::MergeFrom(const TSlgBagDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  slgproparr_.MergeFrom(from.slgproparr_);
  slgarmarr_.MergeFrom(from.slgarmarr_);
  slgarmstuffarr_.MergeFrom(from.slgarmstuffarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgBagDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgBagDataRsp::CopyFrom(const TSlgBagDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgBagDataRsp::IsInitialized() const {

  return true;
}

void TSlgBagDataRsp::Swap(TSlgBagDataRsp* other) {
  if (other != this) {
    slgproparr_.Swap(&other->slgproparr_);
    slgarmarr_.Swap(&other->slgarmarr_);
    slgarmstuffarr_.Swap(&other->slgarmstuffarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgBagDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgBagDataRsp_descriptor_;
  metadata.reflection = TSlgBagDataRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgBagNotify::kSlgPropArrFieldNumber;
const int TSlgBagNotify::kSlgArmArrFieldNumber;
const int TSlgBagNotify::kSlgArmStuffArrFieldNumber;
#endif  // !_MSC_VER

TSlgBagNotify::TSlgBagNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgBagNotify)
}

void TSlgBagNotify::InitAsDefaultInstance() {
}

TSlgBagNotify::TSlgBagNotify(const TSlgBagNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgBagNotify)
}

void TSlgBagNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgBagNotify::~TSlgBagNotify() {
  // @@protoc_insertion_point(destructor:pb.TSlgBagNotify)
  SharedDtor();
}

void TSlgBagNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgBagNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgBagNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgBagNotify_descriptor_;
}

const TSlgBagNotify& TSlgBagNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgBag_2eproto();
  return *default_instance_;
}

TSlgBagNotify* TSlgBagNotify::default_instance_ = NULL;

TSlgBagNotify* TSlgBagNotify::New() const {
  return new TSlgBagNotify;
}

void TSlgBagNotify::Clear() {
  slgproparr_.Clear();
  slgarmarr_.Clear();
  slgarmstuffarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgBagNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgBagNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TSimpleItem SlgPropArr = 1;
      case 1: {
        if (tag == 10) {
         parse_SlgPropArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slgproparr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_SlgPropArr;
        if (input->ExpectTag(18)) goto parse_SlgArmArr;
        break;
      }

      // repeated .pb.TSimpleItem SlgArmArr = 2;
      case 2: {
        if (tag == 18) {
         parse_SlgArmArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slgarmarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SlgArmArr;
        if (input->ExpectTag(26)) goto parse_SlgArmStuffArr;
        break;
      }

      // repeated .pb.TSimpleItem SlgArmStuffArr = 3;
      case 3: {
        if (tag == 26) {
         parse_SlgArmStuffArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slgarmstuffarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SlgArmStuffArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgBagNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgBagNotify)
  return false;
#undef DO_
}

void TSlgBagNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgBagNotify)
  // repeated .pb.TSimpleItem SlgPropArr = 1;
  for (int i = 0; i < this->slgproparr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slgproparr(i), output);
  }

  // repeated .pb.TSimpleItem SlgArmArr = 2;
  for (int i = 0; i < this->slgarmarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->slgarmarr(i), output);
  }

  // repeated .pb.TSimpleItem SlgArmStuffArr = 3;
  for (int i = 0; i < this->slgarmstuffarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slgarmstuffarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgBagNotify)
}

::google::protobuf::uint8* TSlgBagNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgBagNotify)
  // repeated .pb.TSimpleItem SlgPropArr = 1;
  for (int i = 0; i < this->slgproparr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->slgproparr(i), target);
  }

  // repeated .pb.TSimpleItem SlgArmArr = 2;
  for (int i = 0; i < this->slgarmarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->slgarmarr(i), target);
  }

  // repeated .pb.TSimpleItem SlgArmStuffArr = 3;
  for (int i = 0; i < this->slgarmstuffarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->slgarmstuffarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgBagNotify)
  return target;
}

int TSlgBagNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TSimpleItem SlgPropArr = 1;
  total_size += 1 * this->slgproparr_size();
  for (int i = 0; i < this->slgproparr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slgproparr(i));
  }

  // repeated .pb.TSimpleItem SlgArmArr = 2;
  total_size += 1 * this->slgarmarr_size();
  for (int i = 0; i < this->slgarmarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slgarmarr(i));
  }

  // repeated .pb.TSimpleItem SlgArmStuffArr = 3;
  total_size += 1 * this->slgarmstuffarr_size();
  for (int i = 0; i < this->slgarmstuffarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slgarmstuffarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgBagNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgBagNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgBagNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgBagNotify::MergeFrom(const TSlgBagNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  slgproparr_.MergeFrom(from.slgproparr_);
  slgarmarr_.MergeFrom(from.slgarmarr_);
  slgarmstuffarr_.MergeFrom(from.slgarmstuffarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgBagNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgBagNotify::CopyFrom(const TSlgBagNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgBagNotify::IsInitialized() const {

  return true;
}

void TSlgBagNotify::Swap(TSlgBagNotify* other) {
  if (other != this) {
    slgproparr_.Swap(&other->slgproparr_);
    slgarmarr_.Swap(&other->slgarmarr_);
    slgarmstuffarr_.Swap(&other->slgarmstuffarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgBagNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgBagNotify_descriptor_;
  metadata.reflection = TSlgBagNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TSlgBagRepileReq::TSlgBagRepileReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgBagRepileReq)
}

void TSlgBagRepileReq::InitAsDefaultInstance() {
}

TSlgBagRepileReq::TSlgBagRepileReq(const TSlgBagRepileReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgBagRepileReq)
}

void TSlgBagRepileReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgBagRepileReq::~TSlgBagRepileReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgBagRepileReq)
  SharedDtor();
}

void TSlgBagRepileReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgBagRepileReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgBagRepileReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgBagRepileReq_descriptor_;
}

const TSlgBagRepileReq& TSlgBagRepileReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgBag_2eproto();
  return *default_instance_;
}

TSlgBagRepileReq* TSlgBagRepileReq::default_instance_ = NULL;

TSlgBagRepileReq* TSlgBagRepileReq::New() const {
  return new TSlgBagRepileReq;
}

void TSlgBagRepileReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgBagRepileReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgBagRepileReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgBagRepileReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgBagRepileReq)
  return false;
#undef DO_
}

void TSlgBagRepileReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgBagRepileReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgBagRepileReq)
}

::google::protobuf::uint8* TSlgBagRepileReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgBagRepileReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgBagRepileReq)
  return target;
}

int TSlgBagRepileReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgBagRepileReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgBagRepileReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgBagRepileReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgBagRepileReq::MergeFrom(const TSlgBagRepileReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgBagRepileReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgBagRepileReq::CopyFrom(const TSlgBagRepileReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgBagRepileReq::IsInitialized() const {

  return true;
}

void TSlgBagRepileReq::Swap(TSlgBagRepileReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgBagRepileReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgBagRepileReq_descriptor_;
  metadata.reflection = TSlgBagRepileReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgBagUseItemReq::kTidFieldNumber;
const int TSlgBagUseItemReq::kNumFieldNumber;
#endif  // !_MSC_VER

TSlgBagUseItemReq::TSlgBagUseItemReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgBagUseItemReq)
}

void TSlgBagUseItemReq::InitAsDefaultInstance() {
}

TSlgBagUseItemReq::TSlgBagUseItemReq(const TSlgBagUseItemReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgBagUseItemReq)
}

void TSlgBagUseItemReq::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgBagUseItemReq::~TSlgBagUseItemReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgBagUseItemReq)
  SharedDtor();
}

void TSlgBagUseItemReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgBagUseItemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgBagUseItemReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgBagUseItemReq_descriptor_;
}

const TSlgBagUseItemReq& TSlgBagUseItemReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgBag_2eproto();
  return *default_instance_;
}

TSlgBagUseItemReq* TSlgBagUseItemReq::default_instance_ = NULL;

TSlgBagUseItemReq* TSlgBagUseItemReq::New() const {
  return new TSlgBagUseItemReq;
}

void TSlgBagUseItemReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSlgBagUseItemReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgBagUseItemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgBagUseItemReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgBagUseItemReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgBagUseItemReq)
  return false;
#undef DO_
}

void TSlgBagUseItemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgBagUseItemReq)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tid(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgBagUseItemReq)
}

::google::protobuf::uint8* TSlgBagUseItemReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgBagUseItemReq)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tid(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgBagUseItemReq)
  return target;
}

int TSlgBagUseItemReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgBagUseItemReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgBagUseItemReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgBagUseItemReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgBagUseItemReq::MergeFrom(const TSlgBagUseItemReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgBagUseItemReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgBagUseItemReq::CopyFrom(const TSlgBagUseItemReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgBagUseItemReq::IsInitialized() const {

  return true;
}

void TSlgBagUseItemReq::Swap(TSlgBagUseItemReq* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgBagUseItemReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgBagUseItemReq_descriptor_;
  metadata.reflection = TSlgBagUseItemReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgBagUseItemRsp::kGridIndexFieldNumber;
#endif  // !_MSC_VER

TSlgBagUseItemRsp::TSlgBagUseItemRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgBagUseItemRsp)
}

void TSlgBagUseItemRsp::InitAsDefaultInstance() {
}

TSlgBagUseItemRsp::TSlgBagUseItemRsp(const TSlgBagUseItemRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgBagUseItemRsp)
}

void TSlgBagUseItemRsp::SharedCtor() {
  _cached_size_ = 0;
  gridindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgBagUseItemRsp::~TSlgBagUseItemRsp() {
  // @@protoc_insertion_point(destructor:pb.TSlgBagUseItemRsp)
  SharedDtor();
}

void TSlgBagUseItemRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgBagUseItemRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgBagUseItemRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgBagUseItemRsp_descriptor_;
}

const TSlgBagUseItemRsp& TSlgBagUseItemRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgBag_2eproto();
  return *default_instance_;
}

TSlgBagUseItemRsp* TSlgBagUseItemRsp::default_instance_ = NULL;

TSlgBagUseItemRsp* TSlgBagUseItemRsp::New() const {
  return new TSlgBagUseItemRsp;
}

void TSlgBagUseItemRsp::Clear() {
  gridindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgBagUseItemRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgBagUseItemRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GridIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gridindex_)));
          set_has_gridindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgBagUseItemRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgBagUseItemRsp)
  return false;
#undef DO_
}

void TSlgBagUseItemRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgBagUseItemRsp)
  // optional uint32 GridIndex = 1;
  if (has_gridindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gridindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgBagUseItemRsp)
}

::google::protobuf::uint8* TSlgBagUseItemRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgBagUseItemRsp)
  // optional uint32 GridIndex = 1;
  if (has_gridindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gridindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgBagUseItemRsp)
  return target;
}

int TSlgBagUseItemRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GridIndex = 1;
    if (has_gridindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gridindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgBagUseItemRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgBagUseItemRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgBagUseItemRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgBagUseItemRsp::MergeFrom(const TSlgBagUseItemRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gridindex()) {
      set_gridindex(from.gridindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgBagUseItemRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgBagUseItemRsp::CopyFrom(const TSlgBagUseItemRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgBagUseItemRsp::IsInitialized() const {

  return true;
}

void TSlgBagUseItemRsp::Swap(TSlgBagUseItemRsp* other) {
  if (other != this) {
    std::swap(gridindex_, other->gridindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgBagUseItemRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgBagUseItemRsp_descriptor_;
  metadata.reflection = TSlgBagUseItemRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
