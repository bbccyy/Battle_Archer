// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/MessageBoard.proto

#ifndef PROTOBUF_net_2fMessageBoard_2eproto__INCLUDED
#define PROTOBUF_net_2fMessageBoard_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/User.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fMessageBoard_2eproto();
void protobuf_AssignDesc_net_2fMessageBoard_2eproto();
void protobuf_ShutdownFile_net_2fMessageBoard_2eproto();

class TMessageBoardSingle;
class TMessageBoardGetHotInfoReq;
class TMessageBoardGetHotInfoRsp;
class TMessageBoardGetCurrentInfoReq;
class TMessageBoardGetCurrentInfoRsp;
class TMessageBoardGetMyUncheckReq;
class TMessageBoardGetMyUncheckRsp;
class TMessageBoardSendMessageReq;
class TMessageBoardSendMessageRsp;
class TMessageBoardDeleteReq;
class TMessageBoardLikeReq;

enum EAudit {
  Uncheck = 0,
  Pass = 1,
  Illegal = 2
};
bool EAudit_IsValid(int value);
const EAudit EAudit_MIN = Uncheck;
const EAudit EAudit_MAX = Illegal;
const int EAudit_ARRAYSIZE = EAudit_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAudit_descriptor();
inline const ::std::string& EAudit_Name(EAudit value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAudit_descriptor(), value);
}
inline bool EAudit_Parse(
    const ::std::string& name, EAudit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAudit>(
    EAudit_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TMessageBoardSingle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/MessageBoard.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TMessageBoardSingle : public ::google::protobuf::Message {
 public:
  TMessageBoardSingle();
  virtual ~TMessageBoardSingle();

  TMessageBoardSingle(const TMessageBoardSingle& from);

  inline TMessageBoardSingle& operator=(const TMessageBoardSingle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMessageBoardSingle& default_instance();

  void Swap(TMessageBoardSingle* other);

  // implements Message ----------------------------------------------

  TMessageBoardSingle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMessageBoardSingle& from);
  void MergeFrom(const TMessageBoardSingle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Mid = 1;
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardSingle</name>
  	<Function>
  		<name>mid</name>
  		<replaceName>Mid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mid</name>
  		<replaceName>Mid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mid</name>
  		<replaceName>Mid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 mid() const;
  inline void set_mid(::google::protobuf::uint64 value);

  // optional uint64 Uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardSingle</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string Content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardSingle</name>
  	<Function>
  		<name>content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional .pb.TUserSimpleInfo UserInfo = 4;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardSingle</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional string ServerId = 5;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardSingle</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // optional uint32 AllLikeNum = 6;
  inline bool has_alllikenum() const;
  inline void clear_alllikenum();
  static const int kAllLikeNumFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardSingle</name>
  	<Function>
  		<name>alllikenum</name>
  		<replaceName>AllLikeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_alllikenum</name>
  		<replaceName>AllLikeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_alllikenum</name>
  		<replaceName>AllLikeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 alllikenum() const;
  inline void set_alllikenum(::google::protobuf::uint32 value);

  // optional uint32 HasLike = 7;
  inline bool has_haslike() const;
  inline void clear_haslike();
  static const int kHasLikeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardSingle</name>
  	<Function>
  		<name>haslike</name>
  		<replaceName>HasLike</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_haslike</name>
  		<replaceName>HasLike</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_haslike</name>
  		<replaceName>HasLike</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 haslike() const;
  inline void set_haslike(::google::protobuf::uint32 value);

  // optional uint64 CreateTime = 8;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardSingle</name>
  	<Function>
  		<name>createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 createtime() const;
  inline void set_createtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TMessageBoardSingle)
 private:
  inline void set_has_mid();
  inline void clear_has_mid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_alllikenum();
  inline void clear_has_alllikenum();
  inline void set_has_haslike();
  inline void clear_has_haslike();
  inline void set_has_createtime();
  inline void clear_has_createtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 mid_;
  ::google::protobuf::uint64 uid_;
  ::std::string* content_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::std::string* serverid_;
  ::google::protobuf::uint32 alllikenum_;
  ::google::protobuf::uint32 haslike_;
  ::google::protobuf::uint64 createtime_;
  friend void  protobuf_AddDesc_net_2fMessageBoard_2eproto();
  friend void protobuf_AssignDesc_net_2fMessageBoard_2eproto();
  friend void protobuf_ShutdownFile_net_2fMessageBoard_2eproto();

  void InitAsDefaultInstance();
  static TMessageBoardSingle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TMessageBoardGetHotInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/MessageBoard.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TMessageBoardGetHotInfoReq : public ::google::protobuf::Message {
 public:
  TMessageBoardGetHotInfoReq();
  virtual ~TMessageBoardGetHotInfoReq();

  TMessageBoardGetHotInfoReq(const TMessageBoardGetHotInfoReq& from);

  inline TMessageBoardGetHotInfoReq& operator=(const TMessageBoardGetHotInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMessageBoardGetHotInfoReq& default_instance();

  void Swap(TMessageBoardGetHotInfoReq* other);

  // implements Message ----------------------------------------------

  TMessageBoardGetHotInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMessageBoardGetHotInfoReq& from);
  void MergeFrom(const TMessageBoardGetHotInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SceneTid = 1;
  inline bool has_scenetid() const;
  inline void clear_scenetid();
  static const int kSceneTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardGetHotInfoReq</name>
  	<Function>
  		<name>scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scenetid() const;
  inline void set_scenetid(::google::protobuf::uint32 value);

  // optional uint32 Version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardGetHotInfoReq</name>
  	<Function>
  		<name>version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional uint32 PageIdx = 3;
  inline bool has_pageidx() const;
  inline void clear_pageidx();
  static const int kPageIdxFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardGetHotInfoReq</name>
  	<Function>
  		<name>pageidx</name>
  		<replaceName>PageIdx</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pageidx</name>
  		<replaceName>PageIdx</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pageidx</name>
  		<replaceName>PageIdx</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pageidx() const;
  inline void set_pageidx(::google::protobuf::uint32 value);

  // optional uint32 PageSize = 4;
  inline bool has_pagesize() const;
  inline void clear_pagesize();
  static const int kPageSizeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardGetHotInfoReq</name>
  	<Function>
  		<name>pagesize</name>
  		<replaceName>PageSize</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pagesize</name>
  		<replaceName>PageSize</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pagesize</name>
  		<replaceName>PageSize</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pagesize() const;
  inline void set_pagesize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TMessageBoardGetHotInfoReq)
 private:
  inline void set_has_scenetid();
  inline void clear_has_scenetid();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_pageidx();
  inline void clear_has_pageidx();
  inline void set_has_pagesize();
  inline void clear_has_pagesize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 scenetid_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 pageidx_;
  ::google::protobuf::uint32 pagesize_;
  friend void  protobuf_AddDesc_net_2fMessageBoard_2eproto();
  friend void protobuf_AssignDesc_net_2fMessageBoard_2eproto();
  friend void protobuf_ShutdownFile_net_2fMessageBoard_2eproto();

  void InitAsDefaultInstance();
  static TMessageBoardGetHotInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TMessageBoardGetHotInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/MessageBoard.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TMessageBoardGetHotInfoRsp : public ::google::protobuf::Message {
 public:
  TMessageBoardGetHotInfoRsp();
  virtual ~TMessageBoardGetHotInfoRsp();

  TMessageBoardGetHotInfoRsp(const TMessageBoardGetHotInfoRsp& from);

  inline TMessageBoardGetHotInfoRsp& operator=(const TMessageBoardGetHotInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMessageBoardGetHotInfoRsp& default_instance();

  void Swap(TMessageBoardGetHotInfoRsp* other);

  // implements Message ----------------------------------------------

  TMessageBoardGetHotInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMessageBoardGetHotInfoRsp& from);
  void MergeFrom(const TMessageBoardGetHotInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TMessageBoardSingle HotArr = 1;
  inline int hotarr_size() const;
  inline void clear_hotarr();
  static const int kHotArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardGetHotInfoRsp</name>
  	<Function>
  		<name>hotarr</name>
  		<replaceName>HotArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_hotarr</name>
  		<replaceName>HotArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_hotarr</name>
  		<replaceName>HotArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hotarr</name>
  		<replaceName>HotArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>hotarr_size</name>
  		<replaceName>HotArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TMessageBoardSingle& hotarr(int index) const;
  inline ::pb::TMessageBoardSingle* mutable_hotarr(int index);
  inline ::pb::TMessageBoardSingle* add_hotarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TMessageBoardSingle >&
      hotarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TMessageBoardSingle >*
      mutable_hotarr();

  // optional uint32 Version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardGetHotInfoRsp</name>
  	<Function>
  		<name>version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TMessageBoardGetHotInfoRsp)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TMessageBoardSingle > hotarr_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_net_2fMessageBoard_2eproto();
  friend void protobuf_AssignDesc_net_2fMessageBoard_2eproto();
  friend void protobuf_ShutdownFile_net_2fMessageBoard_2eproto();

  void InitAsDefaultInstance();
  static TMessageBoardGetHotInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TMessageBoardGetCurrentInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/MessageBoard.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TMessageBoardGetCurrentInfoReq : public ::google::protobuf::Message {
 public:
  TMessageBoardGetCurrentInfoReq();
  virtual ~TMessageBoardGetCurrentInfoReq();

  TMessageBoardGetCurrentInfoReq(const TMessageBoardGetCurrentInfoReq& from);

  inline TMessageBoardGetCurrentInfoReq& operator=(const TMessageBoardGetCurrentInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMessageBoardGetCurrentInfoReq& default_instance();

  void Swap(TMessageBoardGetCurrentInfoReq* other);

  // implements Message ----------------------------------------------

  TMessageBoardGetCurrentInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMessageBoardGetCurrentInfoReq& from);
  void MergeFrom(const TMessageBoardGetCurrentInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SceneTid = 1;
  inline bool has_scenetid() const;
  inline void clear_scenetid();
  static const int kSceneTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardGetCurrentInfoReq</name>
  	<Function>
  		<name>scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scenetid() const;
  inline void set_scenetid(::google::protobuf::uint32 value);

  // optional uint32 Version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardGetCurrentInfoReq</name>
  	<Function>
  		<name>version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional uint32 PageIdx = 3;
  inline bool has_pageidx() const;
  inline void clear_pageidx();
  static const int kPageIdxFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardGetCurrentInfoReq</name>
  	<Function>
  		<name>pageidx</name>
  		<replaceName>PageIdx</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pageidx</name>
  		<replaceName>PageIdx</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pageidx</name>
  		<replaceName>PageIdx</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pageidx() const;
  inline void set_pageidx(::google::protobuf::uint32 value);

  // optional uint32 PageSize = 4;
  inline bool has_pagesize() const;
  inline void clear_pagesize();
  static const int kPageSizeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardGetCurrentInfoReq</name>
  	<Function>
  		<name>pagesize</name>
  		<replaceName>PageSize</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pagesize</name>
  		<replaceName>PageSize</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pagesize</name>
  		<replaceName>PageSize</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pagesize() const;
  inline void set_pagesize(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TMessageBoardGetCurrentInfoReq)
 private:
  inline void set_has_scenetid();
  inline void clear_has_scenetid();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_pageidx();
  inline void clear_has_pageidx();
  inline void set_has_pagesize();
  inline void clear_has_pagesize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 scenetid_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 pageidx_;
  ::google::protobuf::uint32 pagesize_;
  friend void  protobuf_AddDesc_net_2fMessageBoard_2eproto();
  friend void protobuf_AssignDesc_net_2fMessageBoard_2eproto();
  friend void protobuf_ShutdownFile_net_2fMessageBoard_2eproto();

  void InitAsDefaultInstance();
  static TMessageBoardGetCurrentInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TMessageBoardGetCurrentInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/MessageBoard.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TMessageBoardGetCurrentInfoRsp : public ::google::protobuf::Message {
 public:
  TMessageBoardGetCurrentInfoRsp();
  virtual ~TMessageBoardGetCurrentInfoRsp();

  TMessageBoardGetCurrentInfoRsp(const TMessageBoardGetCurrentInfoRsp& from);

  inline TMessageBoardGetCurrentInfoRsp& operator=(const TMessageBoardGetCurrentInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMessageBoardGetCurrentInfoRsp& default_instance();

  void Swap(TMessageBoardGetCurrentInfoRsp* other);

  // implements Message ----------------------------------------------

  TMessageBoardGetCurrentInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMessageBoardGetCurrentInfoRsp& from);
  void MergeFrom(const TMessageBoardGetCurrentInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TMessageBoardSingle CurrentArr = 1;
  inline int currentarr_size() const;
  inline void clear_currentarr();
  static const int kCurrentArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardGetCurrentInfoRsp</name>
  	<Function>
  		<name>currentarr</name>
  		<replaceName>CurrentArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_currentarr</name>
  		<replaceName>CurrentArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_currentarr</name>
  		<replaceName>CurrentArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_currentarr</name>
  		<replaceName>CurrentArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>currentarr_size</name>
  		<replaceName>CurrentArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TMessageBoardSingle& currentarr(int index) const;
  inline ::pb::TMessageBoardSingle* mutable_currentarr(int index);
  inline ::pb::TMessageBoardSingle* add_currentarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TMessageBoardSingle >&
      currentarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TMessageBoardSingle >*
      mutable_currentarr();

  // optional uint32 Version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardGetCurrentInfoRsp</name>
  	<Function>
  		<name>version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TMessageBoardGetCurrentInfoRsp)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TMessageBoardSingle > currentarr_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_net_2fMessageBoard_2eproto();
  friend void protobuf_AssignDesc_net_2fMessageBoard_2eproto();
  friend void protobuf_ShutdownFile_net_2fMessageBoard_2eproto();

  void InitAsDefaultInstance();
  static TMessageBoardGetCurrentInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TMessageBoardGetMyUncheckReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/MessageBoard.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TMessageBoardGetMyUncheckReq : public ::google::protobuf::Message {
 public:
  TMessageBoardGetMyUncheckReq();
  virtual ~TMessageBoardGetMyUncheckReq();

  TMessageBoardGetMyUncheckReq(const TMessageBoardGetMyUncheckReq& from);

  inline TMessageBoardGetMyUncheckReq& operator=(const TMessageBoardGetMyUncheckReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMessageBoardGetMyUncheckReq& default_instance();

  void Swap(TMessageBoardGetMyUncheckReq* other);

  // implements Message ----------------------------------------------

  TMessageBoardGetMyUncheckReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMessageBoardGetMyUncheckReq& from);
  void MergeFrom(const TMessageBoardGetMyUncheckReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SceneTid = 1;
  inline bool has_scenetid() const;
  inline void clear_scenetid();
  static const int kSceneTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardGetMyUncheckReq</name>
  	<Function>
  		<name>scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scenetid() const;
  inline void set_scenetid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TMessageBoardGetMyUncheckReq)
 private:
  inline void set_has_scenetid();
  inline void clear_has_scenetid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 scenetid_;
  friend void  protobuf_AddDesc_net_2fMessageBoard_2eproto();
  friend void protobuf_AssignDesc_net_2fMessageBoard_2eproto();
  friend void protobuf_ShutdownFile_net_2fMessageBoard_2eproto();

  void InitAsDefaultInstance();
  static TMessageBoardGetMyUncheckReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TMessageBoardGetMyUncheckRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/MessageBoard.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TMessageBoardGetMyUncheckRsp : public ::google::protobuf::Message {
 public:
  TMessageBoardGetMyUncheckRsp();
  virtual ~TMessageBoardGetMyUncheckRsp();

  TMessageBoardGetMyUncheckRsp(const TMessageBoardGetMyUncheckRsp& from);

  inline TMessageBoardGetMyUncheckRsp& operator=(const TMessageBoardGetMyUncheckRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMessageBoardGetMyUncheckRsp& default_instance();

  void Swap(TMessageBoardGetMyUncheckRsp* other);

  // implements Message ----------------------------------------------

  TMessageBoardGetMyUncheckRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMessageBoardGetMyUncheckRsp& from);
  void MergeFrom(const TMessageBoardGetMyUncheckRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TMessageBoardSingle UncheckArr = 1;
  inline int uncheckarr_size() const;
  inline void clear_uncheckarr();
  static const int kUncheckArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardGetMyUncheckRsp</name>
  	<Function>
  		<name>uncheckarr</name>
  		<replaceName>UncheckArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_uncheckarr</name>
  		<replaceName>UncheckArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_uncheckarr</name>
  		<replaceName>UncheckArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uncheckarr</name>
  		<replaceName>UncheckArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>uncheckarr_size</name>
  		<replaceName>UncheckArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TMessageBoardSingle& uncheckarr(int index) const;
  inline ::pb::TMessageBoardSingle* mutable_uncheckarr(int index);
  inline ::pb::TMessageBoardSingle* add_uncheckarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TMessageBoardSingle >&
      uncheckarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TMessageBoardSingle >*
      mutable_uncheckarr();

  // @@protoc_insertion_point(class_scope:pb.TMessageBoardGetMyUncheckRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TMessageBoardSingle > uncheckarr_;
  friend void  protobuf_AddDesc_net_2fMessageBoard_2eproto();
  friend void protobuf_AssignDesc_net_2fMessageBoard_2eproto();
  friend void protobuf_ShutdownFile_net_2fMessageBoard_2eproto();

  void InitAsDefaultInstance();
  static TMessageBoardGetMyUncheckRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TMessageBoardSendMessageReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/MessageBoard.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TMessageBoardSendMessageReq : public ::google::protobuf::Message {
 public:
  TMessageBoardSendMessageReq();
  virtual ~TMessageBoardSendMessageReq();

  TMessageBoardSendMessageReq(const TMessageBoardSendMessageReq& from);

  inline TMessageBoardSendMessageReq& operator=(const TMessageBoardSendMessageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMessageBoardSendMessageReq& default_instance();

  void Swap(TMessageBoardSendMessageReq* other);

  // implements Message ----------------------------------------------

  TMessageBoardSendMessageReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMessageBoardSendMessageReq& from);
  void MergeFrom(const TMessageBoardSendMessageReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SceneTid = 1;
  inline bool has_scenetid() const;
  inline void clear_scenetid();
  static const int kSceneTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardSendMessageReq</name>
  	<Function>
  		<name>scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scenetid() const;
  inline void set_scenetid(::google::protobuf::uint32 value);

  // optional uint64 Uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardSendMessageReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string Content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardSendMessageReq</name>
  	<Function>
  		<name>content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string Xpid = 4;
  inline bool has_xpid() const;
  inline void clear_xpid();
  static const int kXpidFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardSendMessageReq</name>
  	<Function>
  		<name>xpid</name>
  		<replaceName>Xpid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_xpid</name>
  		<replaceName>Xpid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_xpid</name>
  		<replaceName>Xpid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& xpid() const;
  inline void set_xpid(const ::std::string& value);
  inline void set_xpid(const char* value);
  inline void set_xpid(const char* value, size_t size);
  inline ::std::string* mutable_xpid();
  inline ::std::string* release_xpid();
  inline void set_allocated_xpid(::std::string* xpid);

  // @@protoc_insertion_point(class_scope:pb.TMessageBoardSendMessageReq)
 private:
  inline void set_has_scenetid();
  inline void clear_has_scenetid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_xpid();
  inline void clear_has_xpid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* content_;
  ::std::string* xpid_;
  ::google::protobuf::uint32 scenetid_;
  friend void  protobuf_AddDesc_net_2fMessageBoard_2eproto();
  friend void protobuf_AssignDesc_net_2fMessageBoard_2eproto();
  friend void protobuf_ShutdownFile_net_2fMessageBoard_2eproto();

  void InitAsDefaultInstance();
  static TMessageBoardSendMessageReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TMessageBoardSendMessageRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/MessageBoard.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TMessageBoardSendMessageRsp : public ::google::protobuf::Message {
 public:
  TMessageBoardSendMessageRsp();
  virtual ~TMessageBoardSendMessageRsp();

  TMessageBoardSendMessageRsp(const TMessageBoardSendMessageRsp& from);

  inline TMessageBoardSendMessageRsp& operator=(const TMessageBoardSendMessageRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMessageBoardSendMessageRsp& default_instance();

  void Swap(TMessageBoardSendMessageRsp* other);

  // implements Message ----------------------------------------------

  TMessageBoardSendMessageRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMessageBoardSendMessageRsp& from);
  void MergeFrom(const TMessageBoardSendMessageRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TMessageBoardSingle MsgInfo = 1;
  inline bool has_msginfo() const;
  inline void clear_msginfo();
  static const int kMsgInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardSendMessageRsp</name>
  	<Function>
  		<name>msginfo</name>
  		<replaceName>MsgInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_msginfo</name>
  		<replaceName>MsgInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_msginfo</name>
  		<replaceName>MsgInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_msginfo</name>
  		<replaceName>MsgInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TMessageBoardSingle& msginfo() const;
  inline ::pb::TMessageBoardSingle* mutable_msginfo();
  inline ::pb::TMessageBoardSingle* release_msginfo();
  inline void set_allocated_msginfo(::pb::TMessageBoardSingle* msginfo);

  // @@protoc_insertion_point(class_scope:pb.TMessageBoardSendMessageRsp)
 private:
  inline void set_has_msginfo();
  inline void clear_has_msginfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TMessageBoardSingle* msginfo_;
  friend void  protobuf_AddDesc_net_2fMessageBoard_2eproto();
  friend void protobuf_AssignDesc_net_2fMessageBoard_2eproto();
  friend void protobuf_ShutdownFile_net_2fMessageBoard_2eproto();

  void InitAsDefaultInstance();
  static TMessageBoardSendMessageRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TMessageBoardDeleteReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/MessageBoard.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TMessageBoardDeleteReq : public ::google::protobuf::Message {
 public:
  TMessageBoardDeleteReq();
  virtual ~TMessageBoardDeleteReq();

  TMessageBoardDeleteReq(const TMessageBoardDeleteReq& from);

  inline TMessageBoardDeleteReq& operator=(const TMessageBoardDeleteReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMessageBoardDeleteReq& default_instance();

  void Swap(TMessageBoardDeleteReq* other);

  // implements Message ----------------------------------------------

  TMessageBoardDeleteReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMessageBoardDeleteReq& from);
  void MergeFrom(const TMessageBoardDeleteReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SceneTid = 1;
  inline bool has_scenetid() const;
  inline void clear_scenetid();
  static const int kSceneTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardDeleteReq</name>
  	<Function>
  		<name>scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scenetid() const;
  inline void set_scenetid(::google::protobuf::uint32 value);

  // optional uint64 Mid = 2;
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardDeleteReq</name>
  	<Function>
  		<name>mid</name>
  		<replaceName>Mid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mid</name>
  		<replaceName>Mid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mid</name>
  		<replaceName>Mid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 mid() const;
  inline void set_mid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TMessageBoardDeleteReq)
 private:
  inline void set_has_scenetid();
  inline void clear_has_scenetid();
  inline void set_has_mid();
  inline void clear_has_mid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 mid_;
  ::google::protobuf::uint32 scenetid_;
  friend void  protobuf_AddDesc_net_2fMessageBoard_2eproto();
  friend void protobuf_AssignDesc_net_2fMessageBoard_2eproto();
  friend void protobuf_ShutdownFile_net_2fMessageBoard_2eproto();

  void InitAsDefaultInstance();
  static TMessageBoardDeleteReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TMessageBoardLikeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/MessageBoard.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TMessageBoardLikeReq : public ::google::protobuf::Message {
 public:
  TMessageBoardLikeReq();
  virtual ~TMessageBoardLikeReq();

  TMessageBoardLikeReq(const TMessageBoardLikeReq& from);

  inline TMessageBoardLikeReq& operator=(const TMessageBoardLikeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMessageBoardLikeReq& default_instance();

  void Swap(TMessageBoardLikeReq* other);

  // implements Message ----------------------------------------------

  TMessageBoardLikeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMessageBoardLikeReq& from);
  void MergeFrom(const TMessageBoardLikeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SceneTid = 1;
  inline bool has_scenetid() const;
  inline void clear_scenetid();
  static const int kSceneTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardLikeReq</name>
  	<Function>
  		<name>scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scenetid() const;
  inline void set_scenetid(::google::protobuf::uint32 value);

  // optional uint64 Mid = 2;
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TMessageBoardLikeReq</name>
  	<Function>
  		<name>mid</name>
  		<replaceName>Mid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mid</name>
  		<replaceName>Mid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mid</name>
  		<replaceName>Mid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 mid() const;
  inline void set_mid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TMessageBoardLikeReq)
 private:
  inline void set_has_scenetid();
  inline void clear_has_scenetid();
  inline void set_has_mid();
  inline void clear_has_mid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 mid_;
  ::google::protobuf::uint32 scenetid_;
  friend void  protobuf_AddDesc_net_2fMessageBoard_2eproto();
  friend void protobuf_AssignDesc_net_2fMessageBoard_2eproto();
  friend void protobuf_ShutdownFile_net_2fMessageBoard_2eproto();

  void InitAsDefaultInstance();
  static TMessageBoardLikeReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TMessageBoardSingle

// optional uint64 Mid = 1;
inline bool TMessageBoardSingle::has_mid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMessageBoardSingle::set_has_mid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TMessageBoardSingle::clear_has_mid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TMessageBoardSingle::clear_mid() {
  mid_ = GOOGLE_ULONGLONG(0);
  clear_has_mid();
}
inline ::google::protobuf::uint64 TMessageBoardSingle::mid() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardSingle.Mid)
  return mid_;
}
inline void TMessageBoardSingle::set_mid(::google::protobuf::uint64 value) {
  set_has_mid();
  mid_ = value;
  // @@protoc_insertion_point(field_set:pb.TMessageBoardSingle.Mid)
}

// optional uint64 Uid = 2;
inline bool TMessageBoardSingle::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMessageBoardSingle::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TMessageBoardSingle::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TMessageBoardSingle::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TMessageBoardSingle::uid() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardSingle.Uid)
  return uid_;
}
inline void TMessageBoardSingle::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TMessageBoardSingle.Uid)
}

// optional string Content = 3;
inline bool TMessageBoardSingle::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMessageBoardSingle::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TMessageBoardSingle::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TMessageBoardSingle::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& TMessageBoardSingle::content() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardSingle.Content)
  return *content_;
}
inline void TMessageBoardSingle::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TMessageBoardSingle.Content)
}
inline void TMessageBoardSingle::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TMessageBoardSingle.Content)
}
inline void TMessageBoardSingle::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TMessageBoardSingle.Content)
}
inline ::std::string* TMessageBoardSingle::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TMessageBoardSingle.Content)
  return content_;
}
inline ::std::string* TMessageBoardSingle::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TMessageBoardSingle::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TMessageBoardSingle.Content)
}

// optional .pb.TUserSimpleInfo UserInfo = 4;
inline bool TMessageBoardSingle::has_userinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TMessageBoardSingle::set_has_userinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TMessageBoardSingle::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TMessageBoardSingle::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TMessageBoardSingle::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardSingle.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TMessageBoardSingle::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TMessageBoardSingle.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TMessageBoardSingle::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TMessageBoardSingle::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TMessageBoardSingle.UserInfo)
}

// optional string ServerId = 5;
inline bool TMessageBoardSingle::has_serverid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TMessageBoardSingle::set_has_serverid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TMessageBoardSingle::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TMessageBoardSingle::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TMessageBoardSingle::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardSingle.ServerId)
  return *serverid_;
}
inline void TMessageBoardSingle::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TMessageBoardSingle.ServerId)
}
inline void TMessageBoardSingle::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TMessageBoardSingle.ServerId)
}
inline void TMessageBoardSingle::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TMessageBoardSingle.ServerId)
}
inline ::std::string* TMessageBoardSingle::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TMessageBoardSingle.ServerId)
  return serverid_;
}
inline ::std::string* TMessageBoardSingle::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TMessageBoardSingle::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TMessageBoardSingle.ServerId)
}

// optional uint32 AllLikeNum = 6;
inline bool TMessageBoardSingle::has_alllikenum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TMessageBoardSingle::set_has_alllikenum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TMessageBoardSingle::clear_has_alllikenum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TMessageBoardSingle::clear_alllikenum() {
  alllikenum_ = 0u;
  clear_has_alllikenum();
}
inline ::google::protobuf::uint32 TMessageBoardSingle::alllikenum() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardSingle.AllLikeNum)
  return alllikenum_;
}
inline void TMessageBoardSingle::set_alllikenum(::google::protobuf::uint32 value) {
  set_has_alllikenum();
  alllikenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TMessageBoardSingle.AllLikeNum)
}

// optional uint32 HasLike = 7;
inline bool TMessageBoardSingle::has_haslike() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TMessageBoardSingle::set_has_haslike() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TMessageBoardSingle::clear_has_haslike() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TMessageBoardSingle::clear_haslike() {
  haslike_ = 0u;
  clear_has_haslike();
}
inline ::google::protobuf::uint32 TMessageBoardSingle::haslike() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardSingle.HasLike)
  return haslike_;
}
inline void TMessageBoardSingle::set_haslike(::google::protobuf::uint32 value) {
  set_has_haslike();
  haslike_ = value;
  // @@protoc_insertion_point(field_set:pb.TMessageBoardSingle.HasLike)
}

// optional uint64 CreateTime = 8;
inline bool TMessageBoardSingle::has_createtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TMessageBoardSingle::set_has_createtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TMessageBoardSingle::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TMessageBoardSingle::clear_createtime() {
  createtime_ = GOOGLE_ULONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::uint64 TMessageBoardSingle::createtime() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardSingle.CreateTime)
  return createtime_;
}
inline void TMessageBoardSingle::set_createtime(::google::protobuf::uint64 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TMessageBoardSingle.CreateTime)
}

// -------------------------------------------------------------------

// TMessageBoardGetHotInfoReq

// optional uint32 SceneTid = 1;
inline bool TMessageBoardGetHotInfoReq::has_scenetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMessageBoardGetHotInfoReq::set_has_scenetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TMessageBoardGetHotInfoReq::clear_has_scenetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TMessageBoardGetHotInfoReq::clear_scenetid() {
  scenetid_ = 0u;
  clear_has_scenetid();
}
inline ::google::protobuf::uint32 TMessageBoardGetHotInfoReq::scenetid() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardGetHotInfoReq.SceneTid)
  return scenetid_;
}
inline void TMessageBoardGetHotInfoReq::set_scenetid(::google::protobuf::uint32 value) {
  set_has_scenetid();
  scenetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TMessageBoardGetHotInfoReq.SceneTid)
}

// optional uint32 Version = 2;
inline bool TMessageBoardGetHotInfoReq::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMessageBoardGetHotInfoReq::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TMessageBoardGetHotInfoReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TMessageBoardGetHotInfoReq::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 TMessageBoardGetHotInfoReq::version() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardGetHotInfoReq.Version)
  return version_;
}
inline void TMessageBoardGetHotInfoReq::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:pb.TMessageBoardGetHotInfoReq.Version)
}

// optional uint32 PageIdx = 3;
inline bool TMessageBoardGetHotInfoReq::has_pageidx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMessageBoardGetHotInfoReq::set_has_pageidx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TMessageBoardGetHotInfoReq::clear_has_pageidx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TMessageBoardGetHotInfoReq::clear_pageidx() {
  pageidx_ = 0u;
  clear_has_pageidx();
}
inline ::google::protobuf::uint32 TMessageBoardGetHotInfoReq::pageidx() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardGetHotInfoReq.PageIdx)
  return pageidx_;
}
inline void TMessageBoardGetHotInfoReq::set_pageidx(::google::protobuf::uint32 value) {
  set_has_pageidx();
  pageidx_ = value;
  // @@protoc_insertion_point(field_set:pb.TMessageBoardGetHotInfoReq.PageIdx)
}

// optional uint32 PageSize = 4;
inline bool TMessageBoardGetHotInfoReq::has_pagesize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TMessageBoardGetHotInfoReq::set_has_pagesize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TMessageBoardGetHotInfoReq::clear_has_pagesize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TMessageBoardGetHotInfoReq::clear_pagesize() {
  pagesize_ = 0u;
  clear_has_pagesize();
}
inline ::google::protobuf::uint32 TMessageBoardGetHotInfoReq::pagesize() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardGetHotInfoReq.PageSize)
  return pagesize_;
}
inline void TMessageBoardGetHotInfoReq::set_pagesize(::google::protobuf::uint32 value) {
  set_has_pagesize();
  pagesize_ = value;
  // @@protoc_insertion_point(field_set:pb.TMessageBoardGetHotInfoReq.PageSize)
}

// -------------------------------------------------------------------

// TMessageBoardGetHotInfoRsp

// repeated .pb.TMessageBoardSingle HotArr = 1;
inline int TMessageBoardGetHotInfoRsp::hotarr_size() const {
  return hotarr_.size();
}
inline void TMessageBoardGetHotInfoRsp::clear_hotarr() {
  hotarr_.Clear();
}
inline const ::pb::TMessageBoardSingle& TMessageBoardGetHotInfoRsp::hotarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardGetHotInfoRsp.HotArr)
  return hotarr_.Get(index);
}
inline ::pb::TMessageBoardSingle* TMessageBoardGetHotInfoRsp::mutable_hotarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TMessageBoardGetHotInfoRsp.HotArr)
  return hotarr_.Mutable(index);
}
inline ::pb::TMessageBoardSingle* TMessageBoardGetHotInfoRsp::add_hotarr() {
  // @@protoc_insertion_point(field_add:pb.TMessageBoardGetHotInfoRsp.HotArr)
  return hotarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TMessageBoardSingle >&
TMessageBoardGetHotInfoRsp::hotarr() const {
  // @@protoc_insertion_point(field_list:pb.TMessageBoardGetHotInfoRsp.HotArr)
  return hotarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TMessageBoardSingle >*
TMessageBoardGetHotInfoRsp::mutable_hotarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TMessageBoardGetHotInfoRsp.HotArr)
  return &hotarr_;
}

// optional uint32 Version = 2;
inline bool TMessageBoardGetHotInfoRsp::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMessageBoardGetHotInfoRsp::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TMessageBoardGetHotInfoRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TMessageBoardGetHotInfoRsp::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 TMessageBoardGetHotInfoRsp::version() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardGetHotInfoRsp.Version)
  return version_;
}
inline void TMessageBoardGetHotInfoRsp::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:pb.TMessageBoardGetHotInfoRsp.Version)
}

// -------------------------------------------------------------------

// TMessageBoardGetCurrentInfoReq

// optional uint32 SceneTid = 1;
inline bool TMessageBoardGetCurrentInfoReq::has_scenetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMessageBoardGetCurrentInfoReq::set_has_scenetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TMessageBoardGetCurrentInfoReq::clear_has_scenetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TMessageBoardGetCurrentInfoReq::clear_scenetid() {
  scenetid_ = 0u;
  clear_has_scenetid();
}
inline ::google::protobuf::uint32 TMessageBoardGetCurrentInfoReq::scenetid() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardGetCurrentInfoReq.SceneTid)
  return scenetid_;
}
inline void TMessageBoardGetCurrentInfoReq::set_scenetid(::google::protobuf::uint32 value) {
  set_has_scenetid();
  scenetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TMessageBoardGetCurrentInfoReq.SceneTid)
}

// optional uint32 Version = 2;
inline bool TMessageBoardGetCurrentInfoReq::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMessageBoardGetCurrentInfoReq::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TMessageBoardGetCurrentInfoReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TMessageBoardGetCurrentInfoReq::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 TMessageBoardGetCurrentInfoReq::version() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardGetCurrentInfoReq.Version)
  return version_;
}
inline void TMessageBoardGetCurrentInfoReq::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:pb.TMessageBoardGetCurrentInfoReq.Version)
}

// optional uint32 PageIdx = 3;
inline bool TMessageBoardGetCurrentInfoReq::has_pageidx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMessageBoardGetCurrentInfoReq::set_has_pageidx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TMessageBoardGetCurrentInfoReq::clear_has_pageidx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TMessageBoardGetCurrentInfoReq::clear_pageidx() {
  pageidx_ = 0u;
  clear_has_pageidx();
}
inline ::google::protobuf::uint32 TMessageBoardGetCurrentInfoReq::pageidx() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardGetCurrentInfoReq.PageIdx)
  return pageidx_;
}
inline void TMessageBoardGetCurrentInfoReq::set_pageidx(::google::protobuf::uint32 value) {
  set_has_pageidx();
  pageidx_ = value;
  // @@protoc_insertion_point(field_set:pb.TMessageBoardGetCurrentInfoReq.PageIdx)
}

// optional uint32 PageSize = 4;
inline bool TMessageBoardGetCurrentInfoReq::has_pagesize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TMessageBoardGetCurrentInfoReq::set_has_pagesize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TMessageBoardGetCurrentInfoReq::clear_has_pagesize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TMessageBoardGetCurrentInfoReq::clear_pagesize() {
  pagesize_ = 0u;
  clear_has_pagesize();
}
inline ::google::protobuf::uint32 TMessageBoardGetCurrentInfoReq::pagesize() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardGetCurrentInfoReq.PageSize)
  return pagesize_;
}
inline void TMessageBoardGetCurrentInfoReq::set_pagesize(::google::protobuf::uint32 value) {
  set_has_pagesize();
  pagesize_ = value;
  // @@protoc_insertion_point(field_set:pb.TMessageBoardGetCurrentInfoReq.PageSize)
}

// -------------------------------------------------------------------

// TMessageBoardGetCurrentInfoRsp

// repeated .pb.TMessageBoardSingle CurrentArr = 1;
inline int TMessageBoardGetCurrentInfoRsp::currentarr_size() const {
  return currentarr_.size();
}
inline void TMessageBoardGetCurrentInfoRsp::clear_currentarr() {
  currentarr_.Clear();
}
inline const ::pb::TMessageBoardSingle& TMessageBoardGetCurrentInfoRsp::currentarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardGetCurrentInfoRsp.CurrentArr)
  return currentarr_.Get(index);
}
inline ::pb::TMessageBoardSingle* TMessageBoardGetCurrentInfoRsp::mutable_currentarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TMessageBoardGetCurrentInfoRsp.CurrentArr)
  return currentarr_.Mutable(index);
}
inline ::pb::TMessageBoardSingle* TMessageBoardGetCurrentInfoRsp::add_currentarr() {
  // @@protoc_insertion_point(field_add:pb.TMessageBoardGetCurrentInfoRsp.CurrentArr)
  return currentarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TMessageBoardSingle >&
TMessageBoardGetCurrentInfoRsp::currentarr() const {
  // @@protoc_insertion_point(field_list:pb.TMessageBoardGetCurrentInfoRsp.CurrentArr)
  return currentarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TMessageBoardSingle >*
TMessageBoardGetCurrentInfoRsp::mutable_currentarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TMessageBoardGetCurrentInfoRsp.CurrentArr)
  return &currentarr_;
}

// optional uint32 Version = 2;
inline bool TMessageBoardGetCurrentInfoRsp::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMessageBoardGetCurrentInfoRsp::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TMessageBoardGetCurrentInfoRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TMessageBoardGetCurrentInfoRsp::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 TMessageBoardGetCurrentInfoRsp::version() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardGetCurrentInfoRsp.Version)
  return version_;
}
inline void TMessageBoardGetCurrentInfoRsp::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:pb.TMessageBoardGetCurrentInfoRsp.Version)
}

// -------------------------------------------------------------------

// TMessageBoardGetMyUncheckReq

// optional uint32 SceneTid = 1;
inline bool TMessageBoardGetMyUncheckReq::has_scenetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMessageBoardGetMyUncheckReq::set_has_scenetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TMessageBoardGetMyUncheckReq::clear_has_scenetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TMessageBoardGetMyUncheckReq::clear_scenetid() {
  scenetid_ = 0u;
  clear_has_scenetid();
}
inline ::google::protobuf::uint32 TMessageBoardGetMyUncheckReq::scenetid() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardGetMyUncheckReq.SceneTid)
  return scenetid_;
}
inline void TMessageBoardGetMyUncheckReq::set_scenetid(::google::protobuf::uint32 value) {
  set_has_scenetid();
  scenetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TMessageBoardGetMyUncheckReq.SceneTid)
}

// -------------------------------------------------------------------

// TMessageBoardGetMyUncheckRsp

// repeated .pb.TMessageBoardSingle UncheckArr = 1;
inline int TMessageBoardGetMyUncheckRsp::uncheckarr_size() const {
  return uncheckarr_.size();
}
inline void TMessageBoardGetMyUncheckRsp::clear_uncheckarr() {
  uncheckarr_.Clear();
}
inline const ::pb::TMessageBoardSingle& TMessageBoardGetMyUncheckRsp::uncheckarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardGetMyUncheckRsp.UncheckArr)
  return uncheckarr_.Get(index);
}
inline ::pb::TMessageBoardSingle* TMessageBoardGetMyUncheckRsp::mutable_uncheckarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TMessageBoardGetMyUncheckRsp.UncheckArr)
  return uncheckarr_.Mutable(index);
}
inline ::pb::TMessageBoardSingle* TMessageBoardGetMyUncheckRsp::add_uncheckarr() {
  // @@protoc_insertion_point(field_add:pb.TMessageBoardGetMyUncheckRsp.UncheckArr)
  return uncheckarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TMessageBoardSingle >&
TMessageBoardGetMyUncheckRsp::uncheckarr() const {
  // @@protoc_insertion_point(field_list:pb.TMessageBoardGetMyUncheckRsp.UncheckArr)
  return uncheckarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TMessageBoardSingle >*
TMessageBoardGetMyUncheckRsp::mutable_uncheckarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TMessageBoardGetMyUncheckRsp.UncheckArr)
  return &uncheckarr_;
}

// -------------------------------------------------------------------

// TMessageBoardSendMessageReq

// optional uint32 SceneTid = 1;
inline bool TMessageBoardSendMessageReq::has_scenetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMessageBoardSendMessageReq::set_has_scenetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TMessageBoardSendMessageReq::clear_has_scenetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TMessageBoardSendMessageReq::clear_scenetid() {
  scenetid_ = 0u;
  clear_has_scenetid();
}
inline ::google::protobuf::uint32 TMessageBoardSendMessageReq::scenetid() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardSendMessageReq.SceneTid)
  return scenetid_;
}
inline void TMessageBoardSendMessageReq::set_scenetid(::google::protobuf::uint32 value) {
  set_has_scenetid();
  scenetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TMessageBoardSendMessageReq.SceneTid)
}

// optional uint64 Uid = 2;
inline bool TMessageBoardSendMessageReq::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMessageBoardSendMessageReq::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TMessageBoardSendMessageReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TMessageBoardSendMessageReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TMessageBoardSendMessageReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardSendMessageReq.Uid)
  return uid_;
}
inline void TMessageBoardSendMessageReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TMessageBoardSendMessageReq.Uid)
}

// optional string Content = 3;
inline bool TMessageBoardSendMessageReq::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMessageBoardSendMessageReq::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TMessageBoardSendMessageReq::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TMessageBoardSendMessageReq::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& TMessageBoardSendMessageReq::content() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardSendMessageReq.Content)
  return *content_;
}
inline void TMessageBoardSendMessageReq::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TMessageBoardSendMessageReq.Content)
}
inline void TMessageBoardSendMessageReq::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TMessageBoardSendMessageReq.Content)
}
inline void TMessageBoardSendMessageReq::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TMessageBoardSendMessageReq.Content)
}
inline ::std::string* TMessageBoardSendMessageReq::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TMessageBoardSendMessageReq.Content)
  return content_;
}
inline ::std::string* TMessageBoardSendMessageReq::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TMessageBoardSendMessageReq::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TMessageBoardSendMessageReq.Content)
}

// optional string Xpid = 4;
inline bool TMessageBoardSendMessageReq::has_xpid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TMessageBoardSendMessageReq::set_has_xpid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TMessageBoardSendMessageReq::clear_has_xpid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TMessageBoardSendMessageReq::clear_xpid() {
  if (xpid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xpid_->clear();
  }
  clear_has_xpid();
}
inline const ::std::string& TMessageBoardSendMessageReq::xpid() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardSendMessageReq.Xpid)
  return *xpid_;
}
inline void TMessageBoardSendMessageReq::set_xpid(const ::std::string& value) {
  set_has_xpid();
  if (xpid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xpid_ = new ::std::string;
  }
  xpid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TMessageBoardSendMessageReq.Xpid)
}
inline void TMessageBoardSendMessageReq::set_xpid(const char* value) {
  set_has_xpid();
  if (xpid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xpid_ = new ::std::string;
  }
  xpid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TMessageBoardSendMessageReq.Xpid)
}
inline void TMessageBoardSendMessageReq::set_xpid(const char* value, size_t size) {
  set_has_xpid();
  if (xpid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xpid_ = new ::std::string;
  }
  xpid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TMessageBoardSendMessageReq.Xpid)
}
inline ::std::string* TMessageBoardSendMessageReq::mutable_xpid() {
  set_has_xpid();
  if (xpid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xpid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TMessageBoardSendMessageReq.Xpid)
  return xpid_;
}
inline ::std::string* TMessageBoardSendMessageReq::release_xpid() {
  clear_has_xpid();
  if (xpid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = xpid_;
    xpid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TMessageBoardSendMessageReq::set_allocated_xpid(::std::string* xpid) {
  if (xpid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete xpid_;
  }
  if (xpid) {
    set_has_xpid();
    xpid_ = xpid;
  } else {
    clear_has_xpid();
    xpid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TMessageBoardSendMessageReq.Xpid)
}

// -------------------------------------------------------------------

// TMessageBoardSendMessageRsp

// optional .pb.TMessageBoardSingle MsgInfo = 1;
inline bool TMessageBoardSendMessageRsp::has_msginfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMessageBoardSendMessageRsp::set_has_msginfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TMessageBoardSendMessageRsp::clear_has_msginfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TMessageBoardSendMessageRsp::clear_msginfo() {
  if (msginfo_ != NULL) msginfo_->::pb::TMessageBoardSingle::Clear();
  clear_has_msginfo();
}
inline const ::pb::TMessageBoardSingle& TMessageBoardSendMessageRsp::msginfo() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardSendMessageRsp.MsgInfo)
  return msginfo_ != NULL ? *msginfo_ : *default_instance_->msginfo_;
}
inline ::pb::TMessageBoardSingle* TMessageBoardSendMessageRsp::mutable_msginfo() {
  set_has_msginfo();
  if (msginfo_ == NULL) msginfo_ = new ::pb::TMessageBoardSingle;
  // @@protoc_insertion_point(field_mutable:pb.TMessageBoardSendMessageRsp.MsgInfo)
  return msginfo_;
}
inline ::pb::TMessageBoardSingle* TMessageBoardSendMessageRsp::release_msginfo() {
  clear_has_msginfo();
  ::pb::TMessageBoardSingle* temp = msginfo_;
  msginfo_ = NULL;
  return temp;
}
inline void TMessageBoardSendMessageRsp::set_allocated_msginfo(::pb::TMessageBoardSingle* msginfo) {
  delete msginfo_;
  msginfo_ = msginfo;
  if (msginfo) {
    set_has_msginfo();
  } else {
    clear_has_msginfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TMessageBoardSendMessageRsp.MsgInfo)
}

// -------------------------------------------------------------------

// TMessageBoardDeleteReq

// optional uint32 SceneTid = 1;
inline bool TMessageBoardDeleteReq::has_scenetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMessageBoardDeleteReq::set_has_scenetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TMessageBoardDeleteReq::clear_has_scenetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TMessageBoardDeleteReq::clear_scenetid() {
  scenetid_ = 0u;
  clear_has_scenetid();
}
inline ::google::protobuf::uint32 TMessageBoardDeleteReq::scenetid() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardDeleteReq.SceneTid)
  return scenetid_;
}
inline void TMessageBoardDeleteReq::set_scenetid(::google::protobuf::uint32 value) {
  set_has_scenetid();
  scenetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TMessageBoardDeleteReq.SceneTid)
}

// optional uint64 Mid = 2;
inline bool TMessageBoardDeleteReq::has_mid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMessageBoardDeleteReq::set_has_mid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TMessageBoardDeleteReq::clear_has_mid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TMessageBoardDeleteReq::clear_mid() {
  mid_ = GOOGLE_ULONGLONG(0);
  clear_has_mid();
}
inline ::google::protobuf::uint64 TMessageBoardDeleteReq::mid() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardDeleteReq.Mid)
  return mid_;
}
inline void TMessageBoardDeleteReq::set_mid(::google::protobuf::uint64 value) {
  set_has_mid();
  mid_ = value;
  // @@protoc_insertion_point(field_set:pb.TMessageBoardDeleteReq.Mid)
}

// -------------------------------------------------------------------

// TMessageBoardLikeReq

// optional uint32 SceneTid = 1;
inline bool TMessageBoardLikeReq::has_scenetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMessageBoardLikeReq::set_has_scenetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TMessageBoardLikeReq::clear_has_scenetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TMessageBoardLikeReq::clear_scenetid() {
  scenetid_ = 0u;
  clear_has_scenetid();
}
inline ::google::protobuf::uint32 TMessageBoardLikeReq::scenetid() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardLikeReq.SceneTid)
  return scenetid_;
}
inline void TMessageBoardLikeReq::set_scenetid(::google::protobuf::uint32 value) {
  set_has_scenetid();
  scenetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TMessageBoardLikeReq.SceneTid)
}

// optional uint64 Mid = 2;
inline bool TMessageBoardLikeReq::has_mid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMessageBoardLikeReq::set_has_mid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TMessageBoardLikeReq::clear_has_mid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TMessageBoardLikeReq::clear_mid() {
  mid_ = GOOGLE_ULONGLONG(0);
  clear_has_mid();
}
inline ::google::protobuf::uint64 TMessageBoardLikeReq::mid() const {
  // @@protoc_insertion_point(field_get:pb.TMessageBoardLikeReq.Mid)
  return mid_;
}
inline void TMessageBoardLikeReq::set_mid(::google::protobuf::uint64 value) {
  set_has_mid();
  mid_ = value;
  // @@protoc_insertion_point(field_set:pb.TMessageBoardLikeReq.Mid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EAudit> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EAudit>() {
  return ::pb::EAudit_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fMessageBoard_2eproto__INCLUDED
