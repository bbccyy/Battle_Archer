// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActUnionRank.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActUnionRank.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActUnionRankTaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActUnionRankTaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActUnionRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActUnionRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActUnionRankUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActUnionRankUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActUnionRankAllianceSimpleInfoWithUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActUnionRankAllianceSimpleInfoWithUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActUnionRankGetAllRankInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActUnionRankGetAllRankInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActUnionRankGetAllRankInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActUnionRankGetAllRankInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActUnionRankGetAllianceMembersInfoRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActUnionRankGetAllianceMembersInfoRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActUnionRankGetAllianceMembersInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActUnionRankGetAllianceMembersInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActUnionRankReceiveRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActUnionRankReceiveRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActUnionRankGetUserTaskInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActUnionRankGetUserTaskInfoRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EActUnionRankRewardType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActUnionRank_2eproto() {
  protobuf_AddDesc_net_2fActUnionRank_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActUnionRank.proto");
  GOOGLE_CHECK(file != NULL);
  TActUnionRankTaskInfo_descriptor_ = file->message_type(0);
  static const int TActUnionRankTaskInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankTaskInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankTaskInfo, num_),
  };
  TActUnionRankTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActUnionRankTaskInfo_descriptor_,
      TActUnionRankTaskInfo::default_instance_,
      TActUnionRankTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActUnionRankTaskInfo));
  TActUnionRankInfo_descriptor_ = file->message_type(1);
  static const int TActUnionRankInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankInfo, bannername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankInfo, bannerbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankInfo, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankInfo, allyscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankInfo, rank_),
  };
  TActUnionRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActUnionRankInfo_descriptor_,
      TActUnionRankInfo::default_instance_,
      TActUnionRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActUnionRankInfo));
  TActUnionRankUserInfo_descriptor_ = file->message_type(2);
  static const int TActUnionRankUserInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankUserInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankUserInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankUserInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankUserInfo, post_),
  };
  TActUnionRankUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActUnionRankUserInfo_descriptor_,
      TActUnionRankUserInfo::default_instance_,
      TActUnionRankUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActUnionRankUserInfo));
  TActUnionRankAllianceSimpleInfoWithUser_descriptor_ = file->message_type(3);
  static const int TActUnionRankAllianceSimpleInfoWithUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankAllianceSimpleInfoWithUser, alliancesimpleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankAllianceSimpleInfoWithUser, arruserbaseinfo_),
  };
  TActUnionRankAllianceSimpleInfoWithUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActUnionRankAllianceSimpleInfoWithUser_descriptor_,
      TActUnionRankAllianceSimpleInfoWithUser::default_instance_,
      TActUnionRankAllianceSimpleInfoWithUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankAllianceSimpleInfoWithUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankAllianceSimpleInfoWithUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActUnionRankAllianceSimpleInfoWithUser));
  TActUnionRankGetAllRankInfoReq_descriptor_ = file->message_type(4);
  static const int TActUnionRankGetAllRankInfoReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankGetAllRankInfoReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankGetAllRankInfoReq, limit_),
  };
  TActUnionRankGetAllRankInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActUnionRankGetAllRankInfoReq_descriptor_,
      TActUnionRankGetAllRankInfoReq::default_instance_,
      TActUnionRankGetAllRankInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankGetAllRankInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankGetAllRankInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActUnionRankGetAllRankInfoReq));
  TActUnionRankGetAllRankInfoRsp_descriptor_ = file->message_type(5);
  static const int TActUnionRankGetAllRankInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankGetAllRankInfoRsp, myallyrankinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankGetAllRankInfoRsp, allrankinfo_),
  };
  TActUnionRankGetAllRankInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActUnionRankGetAllRankInfoRsp_descriptor_,
      TActUnionRankGetAllRankInfoRsp::default_instance_,
      TActUnionRankGetAllRankInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankGetAllRankInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankGetAllRankInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActUnionRankGetAllRankInfoRsp));
  TActUnionRankGetAllianceMembersInfoRep_descriptor_ = file->message_type(6);
  static const int TActUnionRankGetAllianceMembersInfoRep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankGetAllianceMembersInfoRep, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankGetAllianceMembersInfoRep, limit_),
  };
  TActUnionRankGetAllianceMembersInfoRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActUnionRankGetAllianceMembersInfoRep_descriptor_,
      TActUnionRankGetAllianceMembersInfoRep::default_instance_,
      TActUnionRankGetAllianceMembersInfoRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankGetAllianceMembersInfoRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankGetAllianceMembersInfoRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActUnionRankGetAllianceMembersInfoRep));
  TActUnionRankGetAllianceMembersInfoRsp_descriptor_ = file->message_type(7);
  static const int TActUnionRankGetAllianceMembersInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankGetAllianceMembersInfoRsp, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankGetAllianceMembersInfoRsp, rewardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankGetAllianceMembersInfoRsp, allmembersrank_),
  };
  TActUnionRankGetAllianceMembersInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActUnionRankGetAllianceMembersInfoRsp_descriptor_,
      TActUnionRankGetAllianceMembersInfoRsp::default_instance_,
      TActUnionRankGetAllianceMembersInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankGetAllianceMembersInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankGetAllianceMembersInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActUnionRankGetAllianceMembersInfoRsp));
  TActUnionRankReceiveRewardRsp_descriptor_ = file->message_type(8);
  static const int TActUnionRankReceiveRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankReceiveRewardRsp, rewardarr_),
  };
  TActUnionRankReceiveRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActUnionRankReceiveRewardRsp_descriptor_,
      TActUnionRankReceiveRewardRsp::default_instance_,
      TActUnionRankReceiveRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankReceiveRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankReceiveRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActUnionRankReceiveRewardRsp));
  TActUnionRankGetUserTaskInfoRsp_descriptor_ = file->message_type(9);
  static const int TActUnionRankGetUserTaskInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankGetUserTaskInfoRsp, taskinfo_),
  };
  TActUnionRankGetUserTaskInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActUnionRankGetUserTaskInfoRsp_descriptor_,
      TActUnionRankGetUserTaskInfoRsp::default_instance_,
      TActUnionRankGetUserTaskInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankGetUserTaskInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActUnionRankGetUserTaskInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActUnionRankGetUserTaskInfoRsp));
  EActUnionRankRewardType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActUnionRank_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActUnionRankTaskInfo_descriptor_, &TActUnionRankTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActUnionRankInfo_descriptor_, &TActUnionRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActUnionRankUserInfo_descriptor_, &TActUnionRankUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActUnionRankAllianceSimpleInfoWithUser_descriptor_, &TActUnionRankAllianceSimpleInfoWithUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActUnionRankGetAllRankInfoReq_descriptor_, &TActUnionRankGetAllRankInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActUnionRankGetAllRankInfoRsp_descriptor_, &TActUnionRankGetAllRankInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActUnionRankGetAllianceMembersInfoRep_descriptor_, &TActUnionRankGetAllianceMembersInfoRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActUnionRankGetAllianceMembersInfoRsp_descriptor_, &TActUnionRankGetAllianceMembersInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActUnionRankReceiveRewardRsp_descriptor_, &TActUnionRankReceiveRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActUnionRankGetUserTaskInfoRsp_descriptor_, &TActUnionRankGetUserTaskInfoRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActUnionRank_2eproto() {
  delete TActUnionRankTaskInfo::default_instance_;
  delete TActUnionRankTaskInfo_reflection_;
  delete TActUnionRankInfo::default_instance_;
  delete TActUnionRankInfo_reflection_;
  delete TActUnionRankUserInfo::default_instance_;
  delete TActUnionRankUserInfo_reflection_;
  delete TActUnionRankAllianceSimpleInfoWithUser::default_instance_;
  delete TActUnionRankAllianceSimpleInfoWithUser_reflection_;
  delete TActUnionRankGetAllRankInfoReq::default_instance_;
  delete TActUnionRankGetAllRankInfoReq_reflection_;
  delete TActUnionRankGetAllRankInfoRsp::default_instance_;
  delete TActUnionRankGetAllRankInfoRsp_reflection_;
  delete TActUnionRankGetAllianceMembersInfoRep::default_instance_;
  delete TActUnionRankGetAllianceMembersInfoRep_reflection_;
  delete TActUnionRankGetAllianceMembersInfoRsp::default_instance_;
  delete TActUnionRankGetAllianceMembersInfoRsp_reflection_;
  delete TActUnionRankReceiveRewardRsp::default_instance_;
  delete TActUnionRankReceiveRewardRsp_reflection_;
  delete TActUnionRankGetUserTaskInfoRsp::default_instance_;
  delete TActUnionRankGetUserTaskInfoRsp_reflection_;
}

void protobuf_AddDesc_net_2fActUnionRank_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fAlliance_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fOpenActivity_2eproto();
  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026net/ActUnionRank.proto\022\002pb\032\022net/Allian"
    "ce.proto\032\026net/CommonReward.proto\032\026net/Op"
    "enActivity.proto\032\016net/User.proto\"0\n\025TAct"
    "UnionRankTaskInfo\022\n\n\002Id\030\001 \001(\r\022\013\n\003Num\030\002 \001"
    "(\004\"z\n\021TActUnionRankInfo\022\014\n\004Name\030\001 \001(\t\022\022\n"
    "\nBannerName\030\002 \001(\t\022\022\n\nBannerBase\030\003 \001(\r\022\016\n"
    "\006Domain\030\004 \001(\r\022\021\n\tAllyScore\030\005 \001(\004\022\014\n\004Rank"
    "\030\006 \001(\r\"|\n\025TActUnionRankUserInfo\022%\n\010UserI"
    "nfo\030\001 \001(\0132\023.pb.TUserSimpleInfo\022\r\n\005Score\030"
    "\002 \001(\004\022\014\n\004Rank\030\003 \001(\r\022\037\n\004Post\030\005 \001(\0162\021.pb.E"
    "AlliancePost\"\222\001\n\'TActUnionRankAllianceSi"
    "mpleInfoWithUser\0223\n\022AllianceSimpleInfo\030\001"
    " \001(\0132\027.pb.TAllianceSimpleInfo\0222\n\017ArrUser"
    "BaseInfo\030\002 \003(\0132\031.pb.TActUnionRankUserInf"
    "o\"\?\n\036TActUnionRankGetAllRankInfoReq\022\016\n\006O"
    "ffset\030\001 \001(\r\022\r\n\005Limit\030\002 \001(\r\"{\n\036TActUnionR"
    "ankGetAllRankInfoRsp\022-\n\016MyAllyRankInfo\030\001"
    " \001(\0132\025.pb.TActUnionRankInfo\022*\n\013AllRankIn"
    "fo\030\002 \003(\0132\025.pb.TActUnionRankInfo\"G\n&TActU"
    "nionRankGetAllianceMembersInfoRep\022\016\n\006Off"
    "set\030\001 \001(\r\022\r\n\005Limit\030\002 \001(\r\"\234\001\n&TActUnionRa"
    "nkGetAllianceMembersInfoRsp\022\016\n\006MyRank\030\001 "
    "\001(\r\022/\n\nRewardType\030\002 \001(\0162\033.pb.EActUnionRa"
    "nkRewardType\0221\n\016AllMembersRank\030\003 \003(\0132\031.p"
    "b.TActUnionRankUserInfo\"E\n\035TActUnionRank"
    "ReceiveRewardRsp\022$\n\tRewardArr\030\001 \003(\0132\021.pb"
    ".TCommonReward\"N\n\037TActUnionRankGetUserTa"
    "skInfoRsp\022+\n\010TaskInfo\030\001 \003(\0132\031.pb.TActUni"
    "onRankTaskInfo*X\n\027EActUnionRankRewardTyp"
    "e\022\007\n\003MVP\020\001\022\t\n\005ELITE\020\002\022\r\n\tEXCELLENT\020\003\022\n\n\006"
    "MEMBER\020c\022\016\n\nUNASSIGNED\020\000", 1224);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActUnionRank.proto", &protobuf_RegisterTypes);
  TActUnionRankTaskInfo::default_instance_ = new TActUnionRankTaskInfo();
  TActUnionRankInfo::default_instance_ = new TActUnionRankInfo();
  TActUnionRankUserInfo::default_instance_ = new TActUnionRankUserInfo();
  TActUnionRankAllianceSimpleInfoWithUser::default_instance_ = new TActUnionRankAllianceSimpleInfoWithUser();
  TActUnionRankGetAllRankInfoReq::default_instance_ = new TActUnionRankGetAllRankInfoReq();
  TActUnionRankGetAllRankInfoRsp::default_instance_ = new TActUnionRankGetAllRankInfoRsp();
  TActUnionRankGetAllianceMembersInfoRep::default_instance_ = new TActUnionRankGetAllianceMembersInfoRep();
  TActUnionRankGetAllianceMembersInfoRsp::default_instance_ = new TActUnionRankGetAllianceMembersInfoRsp();
  TActUnionRankReceiveRewardRsp::default_instance_ = new TActUnionRankReceiveRewardRsp();
  TActUnionRankGetUserTaskInfoRsp::default_instance_ = new TActUnionRankGetUserTaskInfoRsp();
  TActUnionRankTaskInfo::default_instance_->InitAsDefaultInstance();
  TActUnionRankInfo::default_instance_->InitAsDefaultInstance();
  TActUnionRankUserInfo::default_instance_->InitAsDefaultInstance();
  TActUnionRankAllianceSimpleInfoWithUser::default_instance_->InitAsDefaultInstance();
  TActUnionRankGetAllRankInfoReq::default_instance_->InitAsDefaultInstance();
  TActUnionRankGetAllRankInfoRsp::default_instance_->InitAsDefaultInstance();
  TActUnionRankGetAllianceMembersInfoRep::default_instance_->InitAsDefaultInstance();
  TActUnionRankGetAllianceMembersInfoRsp::default_instance_->InitAsDefaultInstance();
  TActUnionRankReceiveRewardRsp::default_instance_->InitAsDefaultInstance();
  TActUnionRankGetUserTaskInfoRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActUnionRank_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActUnionRank_2eproto {
  StaticDescriptorInitializer_net_2fActUnionRank_2eproto() {
    protobuf_AddDesc_net_2fActUnionRank_2eproto();
  }
} static_descriptor_initializer_net_2fActUnionRank_2eproto_;
const ::google::protobuf::EnumDescriptor* EActUnionRankRewardType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EActUnionRankRewardType_descriptor_;
}
bool EActUnionRankRewardType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 99:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TActUnionRankTaskInfo::kIdFieldNumber;
const int TActUnionRankTaskInfo::kNumFieldNumber;
#endif  // !_MSC_VER

TActUnionRankTaskInfo::TActUnionRankTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActUnionRankTaskInfo)
}

void TActUnionRankTaskInfo::InitAsDefaultInstance() {
}

TActUnionRankTaskInfo::TActUnionRankTaskInfo(const TActUnionRankTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActUnionRankTaskInfo)
}

void TActUnionRankTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActUnionRankTaskInfo::~TActUnionRankTaskInfo() {
  // @@protoc_insertion_point(destructor:pb.TActUnionRankTaskInfo)
  SharedDtor();
}

void TActUnionRankTaskInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActUnionRankTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActUnionRankTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActUnionRankTaskInfo_descriptor_;
}

const TActUnionRankTaskInfo& TActUnionRankTaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActUnionRank_2eproto();
  return *default_instance_;
}

TActUnionRankTaskInfo* TActUnionRankTaskInfo::default_instance_ = NULL;

TActUnionRankTaskInfo* TActUnionRankTaskInfo::New() const {
  return new TActUnionRankTaskInfo;
}

void TActUnionRankTaskInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActUnionRankTaskInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(num_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActUnionRankTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActUnionRankTaskInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint64 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActUnionRankTaskInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActUnionRankTaskInfo)
  return false;
#undef DO_
}

void TActUnionRankTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActUnionRankTaskInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint64 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActUnionRankTaskInfo)
}

::google::protobuf::uint8* TActUnionRankTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActUnionRankTaskInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint64 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActUnionRankTaskInfo)
  return target;
}

int TActUnionRankTaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActUnionRankTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActUnionRankTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActUnionRankTaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActUnionRankTaskInfo::MergeFrom(const TActUnionRankTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActUnionRankTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActUnionRankTaskInfo::CopyFrom(const TActUnionRankTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActUnionRankTaskInfo::IsInitialized() const {

  return true;
}

void TActUnionRankTaskInfo::Swap(TActUnionRankTaskInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActUnionRankTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActUnionRankTaskInfo_descriptor_;
  metadata.reflection = TActUnionRankTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActUnionRankInfo::kNameFieldNumber;
const int TActUnionRankInfo::kBannerNameFieldNumber;
const int TActUnionRankInfo::kBannerBaseFieldNumber;
const int TActUnionRankInfo::kDomainFieldNumber;
const int TActUnionRankInfo::kAllyScoreFieldNumber;
const int TActUnionRankInfo::kRankFieldNumber;
#endif  // !_MSC_VER

TActUnionRankInfo::TActUnionRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActUnionRankInfo)
}

void TActUnionRankInfo::InitAsDefaultInstance() {
}

TActUnionRankInfo::TActUnionRankInfo(const TActUnionRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActUnionRankInfo)
}

void TActUnionRankInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bannerbase_ = 0u;
  domain_ = 0u;
  allyscore_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActUnionRankInfo::~TActUnionRankInfo() {
  // @@protoc_insertion_point(destructor:pb.TActUnionRankInfo)
  SharedDtor();
}

void TActUnionRankInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (this != default_instance_) {
  }
}

void TActUnionRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActUnionRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActUnionRankInfo_descriptor_;
}

const TActUnionRankInfo& TActUnionRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActUnionRank_2eproto();
  return *default_instance_;
}

TActUnionRankInfo* TActUnionRankInfo::default_instance_ = NULL;

TActUnionRankInfo* TActUnionRankInfo::New() const {
  return new TActUnionRankInfo;
}

void TActUnionRankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActUnionRankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(bannerbase_, rank_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_bannername()) {
      if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bannername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActUnionRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActUnionRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BannerName;
        break;
      }

      // optional string BannerName = 2;
      case 2: {
        if (tag == 18) {
         parse_BannerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bannername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bannername().data(), this->bannername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bannername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BannerBase;
        break;
      }

      // optional uint32 BannerBase = 3;
      case 3: {
        if (tag == 24) {
         parse_BannerBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bannerbase_)));
          set_has_bannerbase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Domain;
        break;
      }

      // optional uint32 Domain = 4;
      case 4: {
        if (tag == 32) {
         parse_Domain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &domain_)));
          set_has_domain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_AllyScore;
        break;
      }

      // optional uint64 AllyScore = 5;
      case 5: {
        if (tag == 40) {
         parse_AllyScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &allyscore_)));
          set_has_allyscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 6;
      case 6: {
        if (tag == 48) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActUnionRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActUnionRankInfo)
  return false;
#undef DO_
}

void TActUnionRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActUnionRankInfo)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string BannerName = 2;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bannername(), output);
  }

  // optional uint32 BannerBase = 3;
  if (has_bannerbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bannerbase(), output);
  }

  // optional uint32 Domain = 4;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->domain(), output);
  }

  // optional uint64 AllyScore = 5;
  if (has_allyscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->allyscore(), output);
  }

  // optional uint32 Rank = 6;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActUnionRankInfo)
}

::google::protobuf::uint8* TActUnionRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActUnionRankInfo)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string BannerName = 2;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bannername(), target);
  }

  // optional uint32 BannerBase = 3;
  if (has_bannerbase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bannerbase(), target);
  }

  // optional uint32 Domain = 4;
  if (has_domain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->domain(), target);
  }

  // optional uint64 AllyScore = 5;
  if (has_allyscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->allyscore(), target);
  }

  // optional uint32 Rank = 6;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActUnionRankInfo)
  return target;
}

int TActUnionRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string BannerName = 2;
    if (has_bannername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bannername());
    }

    // optional uint32 BannerBase = 3;
    if (has_bannerbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bannerbase());
    }

    // optional uint32 Domain = 4;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->domain());
    }

    // optional uint64 AllyScore = 5;
    if (has_allyscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->allyscore());
    }

    // optional uint32 Rank = 6;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActUnionRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActUnionRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActUnionRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActUnionRankInfo::MergeFrom(const TActUnionRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_bannername()) {
      set_bannername(from.bannername());
    }
    if (from.has_bannerbase()) {
      set_bannerbase(from.bannerbase());
    }
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_allyscore()) {
      set_allyscore(from.allyscore());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActUnionRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActUnionRankInfo::CopyFrom(const TActUnionRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActUnionRankInfo::IsInitialized() const {

  return true;
}

void TActUnionRankInfo::Swap(TActUnionRankInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(bannername_, other->bannername_);
    std::swap(bannerbase_, other->bannerbase_);
    std::swap(domain_, other->domain_);
    std::swap(allyscore_, other->allyscore_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActUnionRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActUnionRankInfo_descriptor_;
  metadata.reflection = TActUnionRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActUnionRankUserInfo::kUserInfoFieldNumber;
const int TActUnionRankUserInfo::kScoreFieldNumber;
const int TActUnionRankUserInfo::kRankFieldNumber;
const int TActUnionRankUserInfo::kPostFieldNumber;
#endif  // !_MSC_VER

TActUnionRankUserInfo::TActUnionRankUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActUnionRankUserInfo)
}

void TActUnionRankUserInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TActUnionRankUserInfo::TActUnionRankUserInfo(const TActUnionRankUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActUnionRankUserInfo)
}

void TActUnionRankUserInfo::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  score_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  post_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActUnionRankUserInfo::~TActUnionRankUserInfo() {
  // @@protoc_insertion_point(destructor:pb.TActUnionRankUserInfo)
  SharedDtor();
}

void TActUnionRankUserInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TActUnionRankUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActUnionRankUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActUnionRankUserInfo_descriptor_;
}

const TActUnionRankUserInfo& TActUnionRankUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActUnionRank_2eproto();
  return *default_instance_;
}

TActUnionRankUserInfo* TActUnionRankUserInfo::default_instance_ = NULL;

TActUnionRankUserInfo* TActUnionRankUserInfo::New() const {
  return new TActUnionRankUserInfo;
}

void TActUnionRankUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActUnionRankUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(score_, post_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActUnionRankUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActUnionRankUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Score;
        break;
      }

      // optional uint64 Score = 2;
      case 2: {
        if (tag == 16) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 3;
      case 3: {
        if (tag == 24) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Post;
        break;
      }

      // optional .pb.EAlliancePost Post = 5;
      case 5: {
        if (tag == 40) {
         parse_Post:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAlliancePost_IsValid(value)) {
            set_post(static_cast< ::pb::EAlliancePost >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActUnionRankUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActUnionRankUserInfo)
  return false;
#undef DO_
}

void TActUnionRankUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActUnionRankUserInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint64 Score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->score(), output);
  }

  // optional uint32 Rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  // optional .pb.EAlliancePost Post = 5;
  if (has_post()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->post(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActUnionRankUserInfo)
}

::google::protobuf::uint8* TActUnionRankUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActUnionRankUserInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint64 Score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->score(), target);
  }

  // optional uint32 Rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  // optional .pb.EAlliancePost Post = 5;
  if (has_post()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->post(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActUnionRankUserInfo)
  return target;
}

int TActUnionRankUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint64 Score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->score());
    }

    // optional uint32 Rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional .pb.EAlliancePost Post = 5;
    if (has_post()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->post());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActUnionRankUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActUnionRankUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActUnionRankUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActUnionRankUserInfo::MergeFrom(const TActUnionRankUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_post()) {
      set_post(from.post());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActUnionRankUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActUnionRankUserInfo::CopyFrom(const TActUnionRankUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActUnionRankUserInfo::IsInitialized() const {

  return true;
}

void TActUnionRankUserInfo::Swap(TActUnionRankUserInfo* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(score_, other->score_);
    std::swap(rank_, other->rank_);
    std::swap(post_, other->post_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActUnionRankUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActUnionRankUserInfo_descriptor_;
  metadata.reflection = TActUnionRankUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActUnionRankAllianceSimpleInfoWithUser::kAllianceSimpleInfoFieldNumber;
const int TActUnionRankAllianceSimpleInfoWithUser::kArrUserBaseInfoFieldNumber;
#endif  // !_MSC_VER

TActUnionRankAllianceSimpleInfoWithUser::TActUnionRankAllianceSimpleInfoWithUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActUnionRankAllianceSimpleInfoWithUser)
}

void TActUnionRankAllianceSimpleInfoWithUser::InitAsDefaultInstance() {
  alliancesimpleinfo_ = const_cast< ::pb::TAllianceSimpleInfo*>(&::pb::TAllianceSimpleInfo::default_instance());
}

TActUnionRankAllianceSimpleInfoWithUser::TActUnionRankAllianceSimpleInfoWithUser(const TActUnionRankAllianceSimpleInfoWithUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActUnionRankAllianceSimpleInfoWithUser)
}

void TActUnionRankAllianceSimpleInfoWithUser::SharedCtor() {
  _cached_size_ = 0;
  alliancesimpleinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActUnionRankAllianceSimpleInfoWithUser::~TActUnionRankAllianceSimpleInfoWithUser() {
  // @@protoc_insertion_point(destructor:pb.TActUnionRankAllianceSimpleInfoWithUser)
  SharedDtor();
}

void TActUnionRankAllianceSimpleInfoWithUser::SharedDtor() {
  if (this != default_instance_) {
    delete alliancesimpleinfo_;
  }
}

void TActUnionRankAllianceSimpleInfoWithUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActUnionRankAllianceSimpleInfoWithUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActUnionRankAllianceSimpleInfoWithUser_descriptor_;
}

const TActUnionRankAllianceSimpleInfoWithUser& TActUnionRankAllianceSimpleInfoWithUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActUnionRank_2eproto();
  return *default_instance_;
}

TActUnionRankAllianceSimpleInfoWithUser* TActUnionRankAllianceSimpleInfoWithUser::default_instance_ = NULL;

TActUnionRankAllianceSimpleInfoWithUser* TActUnionRankAllianceSimpleInfoWithUser::New() const {
  return new TActUnionRankAllianceSimpleInfoWithUser;
}

void TActUnionRankAllianceSimpleInfoWithUser::Clear() {
  if (has_alliancesimpleinfo()) {
    if (alliancesimpleinfo_ != NULL) alliancesimpleinfo_->::pb::TAllianceSimpleInfo::Clear();
  }
  arruserbaseinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActUnionRankAllianceSimpleInfoWithUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActUnionRankAllianceSimpleInfoWithUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAllianceSimpleInfo AllianceSimpleInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alliancesimpleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrUserBaseInfo;
        break;
      }

      // repeated .pb.TActUnionRankUserInfo ArrUserBaseInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrUserBaseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arruserbaseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrUserBaseInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActUnionRankAllianceSimpleInfoWithUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActUnionRankAllianceSimpleInfoWithUser)
  return false;
#undef DO_
}

void TActUnionRankAllianceSimpleInfoWithUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActUnionRankAllianceSimpleInfoWithUser)
  // optional .pb.TAllianceSimpleInfo AllianceSimpleInfo = 1;
  if (has_alliancesimpleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alliancesimpleinfo(), output);
  }

  // repeated .pb.TActUnionRankUserInfo ArrUserBaseInfo = 2;
  for (int i = 0; i < this->arruserbaseinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arruserbaseinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActUnionRankAllianceSimpleInfoWithUser)
}

::google::protobuf::uint8* TActUnionRankAllianceSimpleInfoWithUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActUnionRankAllianceSimpleInfoWithUser)
  // optional .pb.TAllianceSimpleInfo AllianceSimpleInfo = 1;
  if (has_alliancesimpleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alliancesimpleinfo(), target);
  }

  // repeated .pb.TActUnionRankUserInfo ArrUserBaseInfo = 2;
  for (int i = 0; i < this->arruserbaseinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arruserbaseinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActUnionRankAllianceSimpleInfoWithUser)
  return target;
}

int TActUnionRankAllianceSimpleInfoWithUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAllianceSimpleInfo AllianceSimpleInfo = 1;
    if (has_alliancesimpleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alliancesimpleinfo());
    }

  }
  // repeated .pb.TActUnionRankUserInfo ArrUserBaseInfo = 2;
  total_size += 1 * this->arruserbaseinfo_size();
  for (int i = 0; i < this->arruserbaseinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arruserbaseinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActUnionRankAllianceSimpleInfoWithUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActUnionRankAllianceSimpleInfoWithUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActUnionRankAllianceSimpleInfoWithUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActUnionRankAllianceSimpleInfoWithUser::MergeFrom(const TActUnionRankAllianceSimpleInfoWithUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  arruserbaseinfo_.MergeFrom(from.arruserbaseinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alliancesimpleinfo()) {
      mutable_alliancesimpleinfo()->::pb::TAllianceSimpleInfo::MergeFrom(from.alliancesimpleinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActUnionRankAllianceSimpleInfoWithUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActUnionRankAllianceSimpleInfoWithUser::CopyFrom(const TActUnionRankAllianceSimpleInfoWithUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActUnionRankAllianceSimpleInfoWithUser::IsInitialized() const {

  return true;
}

void TActUnionRankAllianceSimpleInfoWithUser::Swap(TActUnionRankAllianceSimpleInfoWithUser* other) {
  if (other != this) {
    std::swap(alliancesimpleinfo_, other->alliancesimpleinfo_);
    arruserbaseinfo_.Swap(&other->arruserbaseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActUnionRankAllianceSimpleInfoWithUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActUnionRankAllianceSimpleInfoWithUser_descriptor_;
  metadata.reflection = TActUnionRankAllianceSimpleInfoWithUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActUnionRankGetAllRankInfoReq::kOffsetFieldNumber;
const int TActUnionRankGetAllRankInfoReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TActUnionRankGetAllRankInfoReq::TActUnionRankGetAllRankInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActUnionRankGetAllRankInfoReq)
}

void TActUnionRankGetAllRankInfoReq::InitAsDefaultInstance() {
}

TActUnionRankGetAllRankInfoReq::TActUnionRankGetAllRankInfoReq(const TActUnionRankGetAllRankInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActUnionRankGetAllRankInfoReq)
}

void TActUnionRankGetAllRankInfoReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActUnionRankGetAllRankInfoReq::~TActUnionRankGetAllRankInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TActUnionRankGetAllRankInfoReq)
  SharedDtor();
}

void TActUnionRankGetAllRankInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActUnionRankGetAllRankInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActUnionRankGetAllRankInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActUnionRankGetAllRankInfoReq_descriptor_;
}

const TActUnionRankGetAllRankInfoReq& TActUnionRankGetAllRankInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActUnionRank_2eproto();
  return *default_instance_;
}

TActUnionRankGetAllRankInfoReq* TActUnionRankGetAllRankInfoReq::default_instance_ = NULL;

TActUnionRankGetAllRankInfoReq* TActUnionRankGetAllRankInfoReq::New() const {
  return new TActUnionRankGetAllRankInfoReq;
}

void TActUnionRankGetAllRankInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActUnionRankGetAllRankInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActUnionRankGetAllRankInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActUnionRankGetAllRankInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActUnionRankGetAllRankInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActUnionRankGetAllRankInfoReq)
  return false;
#undef DO_
}

void TActUnionRankGetAllRankInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActUnionRankGetAllRankInfoReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActUnionRankGetAllRankInfoReq)
}

::google::protobuf::uint8* TActUnionRankGetAllRankInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActUnionRankGetAllRankInfoReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActUnionRankGetAllRankInfoReq)
  return target;
}

int TActUnionRankGetAllRankInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActUnionRankGetAllRankInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActUnionRankGetAllRankInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActUnionRankGetAllRankInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActUnionRankGetAllRankInfoReq::MergeFrom(const TActUnionRankGetAllRankInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActUnionRankGetAllRankInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActUnionRankGetAllRankInfoReq::CopyFrom(const TActUnionRankGetAllRankInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActUnionRankGetAllRankInfoReq::IsInitialized() const {

  return true;
}

void TActUnionRankGetAllRankInfoReq::Swap(TActUnionRankGetAllRankInfoReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActUnionRankGetAllRankInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActUnionRankGetAllRankInfoReq_descriptor_;
  metadata.reflection = TActUnionRankGetAllRankInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActUnionRankGetAllRankInfoRsp::kMyAllyRankInfoFieldNumber;
const int TActUnionRankGetAllRankInfoRsp::kAllRankInfoFieldNumber;
#endif  // !_MSC_VER

TActUnionRankGetAllRankInfoRsp::TActUnionRankGetAllRankInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActUnionRankGetAllRankInfoRsp)
}

void TActUnionRankGetAllRankInfoRsp::InitAsDefaultInstance() {
  myallyrankinfo_ = const_cast< ::pb::TActUnionRankInfo*>(&::pb::TActUnionRankInfo::default_instance());
}

TActUnionRankGetAllRankInfoRsp::TActUnionRankGetAllRankInfoRsp(const TActUnionRankGetAllRankInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActUnionRankGetAllRankInfoRsp)
}

void TActUnionRankGetAllRankInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  myallyrankinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActUnionRankGetAllRankInfoRsp::~TActUnionRankGetAllRankInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActUnionRankGetAllRankInfoRsp)
  SharedDtor();
}

void TActUnionRankGetAllRankInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete myallyrankinfo_;
  }
}

void TActUnionRankGetAllRankInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActUnionRankGetAllRankInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActUnionRankGetAllRankInfoRsp_descriptor_;
}

const TActUnionRankGetAllRankInfoRsp& TActUnionRankGetAllRankInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActUnionRank_2eproto();
  return *default_instance_;
}

TActUnionRankGetAllRankInfoRsp* TActUnionRankGetAllRankInfoRsp::default_instance_ = NULL;

TActUnionRankGetAllRankInfoRsp* TActUnionRankGetAllRankInfoRsp::New() const {
  return new TActUnionRankGetAllRankInfoRsp;
}

void TActUnionRankGetAllRankInfoRsp::Clear() {
  if (has_myallyrankinfo()) {
    if (myallyrankinfo_ != NULL) myallyrankinfo_->::pb::TActUnionRankInfo::Clear();
  }
  allrankinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActUnionRankGetAllRankInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActUnionRankGetAllRankInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TActUnionRankInfo MyAllyRankInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myallyrankinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AllRankInfo;
        break;
      }

      // repeated .pb.TActUnionRankInfo AllRankInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_AllRankInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allrankinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AllRankInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActUnionRankGetAllRankInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActUnionRankGetAllRankInfoRsp)
  return false;
#undef DO_
}

void TActUnionRankGetAllRankInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActUnionRankGetAllRankInfoRsp)
  // optional .pb.TActUnionRankInfo MyAllyRankInfo = 1;
  if (has_myallyrankinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->myallyrankinfo(), output);
  }

  // repeated .pb.TActUnionRankInfo AllRankInfo = 2;
  for (int i = 0; i < this->allrankinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->allrankinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActUnionRankGetAllRankInfoRsp)
}

::google::protobuf::uint8* TActUnionRankGetAllRankInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActUnionRankGetAllRankInfoRsp)
  // optional .pb.TActUnionRankInfo MyAllyRankInfo = 1;
  if (has_myallyrankinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->myallyrankinfo(), target);
  }

  // repeated .pb.TActUnionRankInfo AllRankInfo = 2;
  for (int i = 0; i < this->allrankinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->allrankinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActUnionRankGetAllRankInfoRsp)
  return target;
}

int TActUnionRankGetAllRankInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TActUnionRankInfo MyAllyRankInfo = 1;
    if (has_myallyrankinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myallyrankinfo());
    }

  }
  // repeated .pb.TActUnionRankInfo AllRankInfo = 2;
  total_size += 1 * this->allrankinfo_size();
  for (int i = 0; i < this->allrankinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allrankinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActUnionRankGetAllRankInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActUnionRankGetAllRankInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActUnionRankGetAllRankInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActUnionRankGetAllRankInfoRsp::MergeFrom(const TActUnionRankGetAllRankInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  allrankinfo_.MergeFrom(from.allrankinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myallyrankinfo()) {
      mutable_myallyrankinfo()->::pb::TActUnionRankInfo::MergeFrom(from.myallyrankinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActUnionRankGetAllRankInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActUnionRankGetAllRankInfoRsp::CopyFrom(const TActUnionRankGetAllRankInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActUnionRankGetAllRankInfoRsp::IsInitialized() const {

  return true;
}

void TActUnionRankGetAllRankInfoRsp::Swap(TActUnionRankGetAllRankInfoRsp* other) {
  if (other != this) {
    std::swap(myallyrankinfo_, other->myallyrankinfo_);
    allrankinfo_.Swap(&other->allrankinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActUnionRankGetAllRankInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActUnionRankGetAllRankInfoRsp_descriptor_;
  metadata.reflection = TActUnionRankGetAllRankInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActUnionRankGetAllianceMembersInfoRep::kOffsetFieldNumber;
const int TActUnionRankGetAllianceMembersInfoRep::kLimitFieldNumber;
#endif  // !_MSC_VER

TActUnionRankGetAllianceMembersInfoRep::TActUnionRankGetAllianceMembersInfoRep()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActUnionRankGetAllianceMembersInfoRep)
}

void TActUnionRankGetAllianceMembersInfoRep::InitAsDefaultInstance() {
}

TActUnionRankGetAllianceMembersInfoRep::TActUnionRankGetAllianceMembersInfoRep(const TActUnionRankGetAllianceMembersInfoRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActUnionRankGetAllianceMembersInfoRep)
}

void TActUnionRankGetAllianceMembersInfoRep::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActUnionRankGetAllianceMembersInfoRep::~TActUnionRankGetAllianceMembersInfoRep() {
  // @@protoc_insertion_point(destructor:pb.TActUnionRankGetAllianceMembersInfoRep)
  SharedDtor();
}

void TActUnionRankGetAllianceMembersInfoRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActUnionRankGetAllianceMembersInfoRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActUnionRankGetAllianceMembersInfoRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActUnionRankGetAllianceMembersInfoRep_descriptor_;
}

const TActUnionRankGetAllianceMembersInfoRep& TActUnionRankGetAllianceMembersInfoRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActUnionRank_2eproto();
  return *default_instance_;
}

TActUnionRankGetAllianceMembersInfoRep* TActUnionRankGetAllianceMembersInfoRep::default_instance_ = NULL;

TActUnionRankGetAllianceMembersInfoRep* TActUnionRankGetAllianceMembersInfoRep::New() const {
  return new TActUnionRankGetAllianceMembersInfoRep;
}

void TActUnionRankGetAllianceMembersInfoRep::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActUnionRankGetAllianceMembersInfoRep*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActUnionRankGetAllianceMembersInfoRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActUnionRankGetAllianceMembersInfoRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActUnionRankGetAllianceMembersInfoRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActUnionRankGetAllianceMembersInfoRep)
  return false;
#undef DO_
}

void TActUnionRankGetAllianceMembersInfoRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActUnionRankGetAllianceMembersInfoRep)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActUnionRankGetAllianceMembersInfoRep)
}

::google::protobuf::uint8* TActUnionRankGetAllianceMembersInfoRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActUnionRankGetAllianceMembersInfoRep)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActUnionRankGetAllianceMembersInfoRep)
  return target;
}

int TActUnionRankGetAllianceMembersInfoRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActUnionRankGetAllianceMembersInfoRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActUnionRankGetAllianceMembersInfoRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActUnionRankGetAllianceMembersInfoRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActUnionRankGetAllianceMembersInfoRep::MergeFrom(const TActUnionRankGetAllianceMembersInfoRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActUnionRankGetAllianceMembersInfoRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActUnionRankGetAllianceMembersInfoRep::CopyFrom(const TActUnionRankGetAllianceMembersInfoRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActUnionRankGetAllianceMembersInfoRep::IsInitialized() const {

  return true;
}

void TActUnionRankGetAllianceMembersInfoRep::Swap(TActUnionRankGetAllianceMembersInfoRep* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActUnionRankGetAllianceMembersInfoRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActUnionRankGetAllianceMembersInfoRep_descriptor_;
  metadata.reflection = TActUnionRankGetAllianceMembersInfoRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActUnionRankGetAllianceMembersInfoRsp::kMyRankFieldNumber;
const int TActUnionRankGetAllianceMembersInfoRsp::kRewardTypeFieldNumber;
const int TActUnionRankGetAllianceMembersInfoRsp::kAllMembersRankFieldNumber;
#endif  // !_MSC_VER

TActUnionRankGetAllianceMembersInfoRsp::TActUnionRankGetAllianceMembersInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActUnionRankGetAllianceMembersInfoRsp)
}

void TActUnionRankGetAllianceMembersInfoRsp::InitAsDefaultInstance() {
}

TActUnionRankGetAllianceMembersInfoRsp::TActUnionRankGetAllianceMembersInfoRsp(const TActUnionRankGetAllianceMembersInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActUnionRankGetAllianceMembersInfoRsp)
}

void TActUnionRankGetAllianceMembersInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0u;
  rewardtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActUnionRankGetAllianceMembersInfoRsp::~TActUnionRankGetAllianceMembersInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActUnionRankGetAllianceMembersInfoRsp)
  SharedDtor();
}

void TActUnionRankGetAllianceMembersInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActUnionRankGetAllianceMembersInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActUnionRankGetAllianceMembersInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActUnionRankGetAllianceMembersInfoRsp_descriptor_;
}

const TActUnionRankGetAllianceMembersInfoRsp& TActUnionRankGetAllianceMembersInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActUnionRank_2eproto();
  return *default_instance_;
}

TActUnionRankGetAllianceMembersInfoRsp* TActUnionRankGetAllianceMembersInfoRsp::default_instance_ = NULL;

TActUnionRankGetAllianceMembersInfoRsp* TActUnionRankGetAllianceMembersInfoRsp::New() const {
  return new TActUnionRankGetAllianceMembersInfoRsp;
}

void TActUnionRankGetAllianceMembersInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    myrank_ = 0u;
    rewardtype_ = 1;
  }
  allmembersrank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActUnionRankGetAllianceMembersInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActUnionRankGetAllianceMembersInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MyRank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RewardType;
        break;
      }

      // optional .pb.EActUnionRankRewardType RewardType = 2;
      case 2: {
        if (tag == 16) {
         parse_RewardType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EActUnionRankRewardType_IsValid(value)) {
            set_rewardtype(static_cast< ::pb::EActUnionRankRewardType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AllMembersRank;
        break;
      }

      // repeated .pb.TActUnionRankUserInfo AllMembersRank = 3;
      case 3: {
        if (tag == 26) {
         parse_AllMembersRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allmembersrank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AllMembersRank;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActUnionRankGetAllianceMembersInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActUnionRankGetAllianceMembersInfoRsp)
  return false;
#undef DO_
}

void TActUnionRankGetAllianceMembersInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActUnionRankGetAllianceMembersInfoRsp)
  // optional uint32 MyRank = 1;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->myrank(), output);
  }

  // optional .pb.EActUnionRankRewardType RewardType = 2;
  if (has_rewardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->rewardtype(), output);
  }

  // repeated .pb.TActUnionRankUserInfo AllMembersRank = 3;
  for (int i = 0; i < this->allmembersrank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->allmembersrank(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActUnionRankGetAllianceMembersInfoRsp)
}

::google::protobuf::uint8* TActUnionRankGetAllianceMembersInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActUnionRankGetAllianceMembersInfoRsp)
  // optional uint32 MyRank = 1;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->myrank(), target);
  }

  // optional .pb.EActUnionRankRewardType RewardType = 2;
  if (has_rewardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->rewardtype(), target);
  }

  // repeated .pb.TActUnionRankUserInfo AllMembersRank = 3;
  for (int i = 0; i < this->allmembersrank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->allmembersrank(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActUnionRankGetAllianceMembersInfoRsp)
  return target;
}

int TActUnionRankGetAllianceMembersInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MyRank = 1;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrank());
    }

    // optional .pb.EActUnionRankRewardType RewardType = 2;
    if (has_rewardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rewardtype());
    }

  }
  // repeated .pb.TActUnionRankUserInfo AllMembersRank = 3;
  total_size += 1 * this->allmembersrank_size();
  for (int i = 0; i < this->allmembersrank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allmembersrank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActUnionRankGetAllianceMembersInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActUnionRankGetAllianceMembersInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActUnionRankGetAllianceMembersInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActUnionRankGetAllianceMembersInfoRsp::MergeFrom(const TActUnionRankGetAllianceMembersInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  allmembersrank_.MergeFrom(from.allmembersrank_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
    if (from.has_rewardtype()) {
      set_rewardtype(from.rewardtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActUnionRankGetAllianceMembersInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActUnionRankGetAllianceMembersInfoRsp::CopyFrom(const TActUnionRankGetAllianceMembersInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActUnionRankGetAllianceMembersInfoRsp::IsInitialized() const {

  return true;
}

void TActUnionRankGetAllianceMembersInfoRsp::Swap(TActUnionRankGetAllianceMembersInfoRsp* other) {
  if (other != this) {
    std::swap(myrank_, other->myrank_);
    std::swap(rewardtype_, other->rewardtype_);
    allmembersrank_.Swap(&other->allmembersrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActUnionRankGetAllianceMembersInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActUnionRankGetAllianceMembersInfoRsp_descriptor_;
  metadata.reflection = TActUnionRankGetAllianceMembersInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActUnionRankReceiveRewardRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TActUnionRankReceiveRewardRsp::TActUnionRankReceiveRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActUnionRankReceiveRewardRsp)
}

void TActUnionRankReceiveRewardRsp::InitAsDefaultInstance() {
}

TActUnionRankReceiveRewardRsp::TActUnionRankReceiveRewardRsp(const TActUnionRankReceiveRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActUnionRankReceiveRewardRsp)
}

void TActUnionRankReceiveRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActUnionRankReceiveRewardRsp::~TActUnionRankReceiveRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TActUnionRankReceiveRewardRsp)
  SharedDtor();
}

void TActUnionRankReceiveRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActUnionRankReceiveRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActUnionRankReceiveRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActUnionRankReceiveRewardRsp_descriptor_;
}

const TActUnionRankReceiveRewardRsp& TActUnionRankReceiveRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActUnionRank_2eproto();
  return *default_instance_;
}

TActUnionRankReceiveRewardRsp* TActUnionRankReceiveRewardRsp::default_instance_ = NULL;

TActUnionRankReceiveRewardRsp* TActUnionRankReceiveRewardRsp::New() const {
  return new TActUnionRankReceiveRewardRsp;
}

void TActUnionRankReceiveRewardRsp::Clear() {
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActUnionRankReceiveRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActUnionRankReceiveRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActUnionRankReceiveRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActUnionRankReceiveRewardRsp)
  return false;
#undef DO_
}

void TActUnionRankReceiveRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActUnionRankReceiveRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActUnionRankReceiveRewardRsp)
}

::google::protobuf::uint8* TActUnionRankReceiveRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActUnionRankReceiveRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActUnionRankReceiveRewardRsp)
  return target;
}

int TActUnionRankReceiveRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActUnionRankReceiveRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActUnionRankReceiveRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActUnionRankReceiveRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActUnionRankReceiveRewardRsp::MergeFrom(const TActUnionRankReceiveRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActUnionRankReceiveRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActUnionRankReceiveRewardRsp::CopyFrom(const TActUnionRankReceiveRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActUnionRankReceiveRewardRsp::IsInitialized() const {

  return true;
}

void TActUnionRankReceiveRewardRsp::Swap(TActUnionRankReceiveRewardRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActUnionRankReceiveRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActUnionRankReceiveRewardRsp_descriptor_;
  metadata.reflection = TActUnionRankReceiveRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActUnionRankGetUserTaskInfoRsp::kTaskInfoFieldNumber;
#endif  // !_MSC_VER

TActUnionRankGetUserTaskInfoRsp::TActUnionRankGetUserTaskInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActUnionRankGetUserTaskInfoRsp)
}

void TActUnionRankGetUserTaskInfoRsp::InitAsDefaultInstance() {
}

TActUnionRankGetUserTaskInfoRsp::TActUnionRankGetUserTaskInfoRsp(const TActUnionRankGetUserTaskInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActUnionRankGetUserTaskInfoRsp)
}

void TActUnionRankGetUserTaskInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActUnionRankGetUserTaskInfoRsp::~TActUnionRankGetUserTaskInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActUnionRankGetUserTaskInfoRsp)
  SharedDtor();
}

void TActUnionRankGetUserTaskInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActUnionRankGetUserTaskInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActUnionRankGetUserTaskInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActUnionRankGetUserTaskInfoRsp_descriptor_;
}

const TActUnionRankGetUserTaskInfoRsp& TActUnionRankGetUserTaskInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActUnionRank_2eproto();
  return *default_instance_;
}

TActUnionRankGetUserTaskInfoRsp* TActUnionRankGetUserTaskInfoRsp::default_instance_ = NULL;

TActUnionRankGetUserTaskInfoRsp* TActUnionRankGetUserTaskInfoRsp::New() const {
  return new TActUnionRankGetUserTaskInfoRsp;
}

void TActUnionRankGetUserTaskInfoRsp::Clear() {
  taskinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActUnionRankGetUserTaskInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActUnionRankGetUserTaskInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActUnionRankTaskInfo TaskInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_TaskInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taskinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_TaskInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActUnionRankGetUserTaskInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActUnionRankGetUserTaskInfoRsp)
  return false;
#undef DO_
}

void TActUnionRankGetUserTaskInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActUnionRankGetUserTaskInfoRsp)
  // repeated .pb.TActUnionRankTaskInfo TaskInfo = 1;
  for (int i = 0; i < this->taskinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->taskinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActUnionRankGetUserTaskInfoRsp)
}

::google::protobuf::uint8* TActUnionRankGetUserTaskInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActUnionRankGetUserTaskInfoRsp)
  // repeated .pb.TActUnionRankTaskInfo TaskInfo = 1;
  for (int i = 0; i < this->taskinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->taskinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActUnionRankGetUserTaskInfoRsp)
  return target;
}

int TActUnionRankGetUserTaskInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActUnionRankTaskInfo TaskInfo = 1;
  total_size += 1 * this->taskinfo_size();
  for (int i = 0; i < this->taskinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taskinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActUnionRankGetUserTaskInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActUnionRankGetUserTaskInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActUnionRankGetUserTaskInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActUnionRankGetUserTaskInfoRsp::MergeFrom(const TActUnionRankGetUserTaskInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskinfo_.MergeFrom(from.taskinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActUnionRankGetUserTaskInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActUnionRankGetUserTaskInfoRsp::CopyFrom(const TActUnionRankGetUserTaskInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActUnionRankGetUserTaskInfoRsp::IsInitialized() const {

  return true;
}

void TActUnionRankGetUserTaskInfoRsp::Swap(TActUnionRankGetUserTaskInfoRsp* other) {
  if (other != this) {
    taskinfo_.Swap(&other->taskinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActUnionRankGetUserTaskInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActUnionRankGetUserTaskInfoRsp_descriptor_;
  metadata.reflection = TActUnionRankGetUserTaskInfoRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
