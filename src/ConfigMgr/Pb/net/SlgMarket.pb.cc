// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/SlgMarket.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/SlgMarket.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TSlgMarketResourceExchangeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgMarketResourceExchangeReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fSlgMarket_2eproto() {
  protobuf_AddDesc_net_2fSlgMarket_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/SlgMarket.proto");
  GOOGLE_CHECK(file != NULL);
  TSlgMarketResourceExchangeReq_descriptor_ = file->message_type(0);
  static const int TSlgMarketResourceExchangeReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgMarketResourceExchangeReq, useresourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgMarketResourceExchangeReq, useresourcenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgMarketResourceExchangeReq, targetresourcetype_),
  };
  TSlgMarketResourceExchangeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgMarketResourceExchangeReq_descriptor_,
      TSlgMarketResourceExchangeReq::default_instance_,
      TSlgMarketResourceExchangeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgMarketResourceExchangeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgMarketResourceExchangeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgMarketResourceExchangeReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fSlgMarket_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgMarketResourceExchangeReq_descriptor_, &TSlgMarketResourceExchangeReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fSlgMarket_2eproto() {
  delete TSlgMarketResourceExchangeReq::default_instance_;
  delete TSlgMarketResourceExchangeReq_reflection_;
}

void protobuf_AddDesc_net_2fSlgMarket_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023net/SlgMarket.proto\022\002pb\"l\n\035TSlgMarketR"
    "esourceExchangeReq\022\027\n\017UseResourceType\030\001 "
    "\001(\r\022\026\n\016UseResourceNum\030\002 \001(\r\022\032\n\022TargetRes"
    "ourceType\030\003 \001(\r", 135);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/SlgMarket.proto", &protobuf_RegisterTypes);
  TSlgMarketResourceExchangeReq::default_instance_ = new TSlgMarketResourceExchangeReq();
  TSlgMarketResourceExchangeReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fSlgMarket_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fSlgMarket_2eproto {
  StaticDescriptorInitializer_net_2fSlgMarket_2eproto() {
    protobuf_AddDesc_net_2fSlgMarket_2eproto();
  }
} static_descriptor_initializer_net_2fSlgMarket_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TSlgMarketResourceExchangeReq::kUseResourceTypeFieldNumber;
const int TSlgMarketResourceExchangeReq::kUseResourceNumFieldNumber;
const int TSlgMarketResourceExchangeReq::kTargetResourceTypeFieldNumber;
#endif  // !_MSC_VER

TSlgMarketResourceExchangeReq::TSlgMarketResourceExchangeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgMarketResourceExchangeReq)
}

void TSlgMarketResourceExchangeReq::InitAsDefaultInstance() {
}

TSlgMarketResourceExchangeReq::TSlgMarketResourceExchangeReq(const TSlgMarketResourceExchangeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgMarketResourceExchangeReq)
}

void TSlgMarketResourceExchangeReq::SharedCtor() {
  _cached_size_ = 0;
  useresourcetype_ = 0u;
  useresourcenum_ = 0u;
  targetresourcetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgMarketResourceExchangeReq::~TSlgMarketResourceExchangeReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgMarketResourceExchangeReq)
  SharedDtor();
}

void TSlgMarketResourceExchangeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgMarketResourceExchangeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgMarketResourceExchangeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgMarketResourceExchangeReq_descriptor_;
}

const TSlgMarketResourceExchangeReq& TSlgMarketResourceExchangeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgMarket_2eproto();
  return *default_instance_;
}

TSlgMarketResourceExchangeReq* TSlgMarketResourceExchangeReq::default_instance_ = NULL;

TSlgMarketResourceExchangeReq* TSlgMarketResourceExchangeReq::New() const {
  return new TSlgMarketResourceExchangeReq;
}

void TSlgMarketResourceExchangeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSlgMarketResourceExchangeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(useresourcetype_, targetresourcetype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgMarketResourceExchangeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgMarketResourceExchangeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 UseResourceType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &useresourcetype_)));
          set_has_useresourcetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UseResourceNum;
        break;
      }

      // optional uint32 UseResourceNum = 2;
      case 2: {
        if (tag == 16) {
         parse_UseResourceNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &useresourcenum_)));
          set_has_useresourcenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TargetResourceType;
        break;
      }

      // optional uint32 TargetResourceType = 3;
      case 3: {
        if (tag == 24) {
         parse_TargetResourceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetresourcetype_)));
          set_has_targetresourcetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgMarketResourceExchangeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgMarketResourceExchangeReq)
  return false;
#undef DO_
}

void TSlgMarketResourceExchangeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgMarketResourceExchangeReq)
  // optional uint32 UseResourceType = 1;
  if (has_useresourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->useresourcetype(), output);
  }

  // optional uint32 UseResourceNum = 2;
  if (has_useresourcenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->useresourcenum(), output);
  }

  // optional uint32 TargetResourceType = 3;
  if (has_targetresourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->targetresourcetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgMarketResourceExchangeReq)
}

::google::protobuf::uint8* TSlgMarketResourceExchangeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgMarketResourceExchangeReq)
  // optional uint32 UseResourceType = 1;
  if (has_useresourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->useresourcetype(), target);
  }

  // optional uint32 UseResourceNum = 2;
  if (has_useresourcenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->useresourcenum(), target);
  }

  // optional uint32 TargetResourceType = 3;
  if (has_targetresourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->targetresourcetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgMarketResourceExchangeReq)
  return target;
}

int TSlgMarketResourceExchangeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 UseResourceType = 1;
    if (has_useresourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->useresourcetype());
    }

    // optional uint32 UseResourceNum = 2;
    if (has_useresourcenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->useresourcenum());
    }

    // optional uint32 TargetResourceType = 3;
    if (has_targetresourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetresourcetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgMarketResourceExchangeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgMarketResourceExchangeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgMarketResourceExchangeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgMarketResourceExchangeReq::MergeFrom(const TSlgMarketResourceExchangeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_useresourcetype()) {
      set_useresourcetype(from.useresourcetype());
    }
    if (from.has_useresourcenum()) {
      set_useresourcenum(from.useresourcenum());
    }
    if (from.has_targetresourcetype()) {
      set_targetresourcetype(from.targetresourcetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgMarketResourceExchangeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgMarketResourceExchangeReq::CopyFrom(const TSlgMarketResourceExchangeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgMarketResourceExchangeReq::IsInitialized() const {

  return true;
}

void TSlgMarketResourceExchangeReq::Swap(TSlgMarketResourceExchangeReq* other) {
  if (other != this) {
    std::swap(useresourcetype_, other->useresourcetype_);
    std::swap(useresourcenum_, other->useresourcenum_);
    std::swap(targetresourcetype_, other->targetresourcetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgMarketResourceExchangeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgMarketResourceExchangeReq_descriptor_;
  metadata.reflection = TSlgMarketResourceExchangeReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
