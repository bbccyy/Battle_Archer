// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/Util.proto

#ifndef PROTOBUF_module_2fUtil_2eproto__INCLUDED
#define PROTOBUF_module_2fUtil_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_module_2fUtil_2eproto();
void protobuf_AssignDesc_module_2fUtil_2eproto();
void protobuf_ShutdownFile_module_2fUtil_2eproto();

class PbVector3;
class PbVector3_Int;
class PbQuaternion;
class PbVector2;
class PbVector2_Int;
class PbRect;
class PbRect_Int;

// ===================================================================

/*FOR2LUA
<Record>
	<name>PbVector3</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/Util.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class PbVector3 : public ::google::protobuf::Message {
 public:
  PbVector3();
  virtual ~PbVector3();

  PbVector3(const PbVector3& from);

  inline PbVector3& operator=(const PbVector3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbVector3& default_instance();

  void Swap(PbVector3* other);

  // implements Message ----------------------------------------------

  PbVector3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbVector3& from);
  void MergeFrom(const PbVector3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>PbVector3</name>
  	<Function>
  		<name>x</name>
  		<replaceName>x</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_x</name>
  		<replaceName>x</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_x</name>
  		<replaceName>x</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>PbVector3</name>
  	<Function>
  		<name>y</name>
  		<replaceName>y</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_y</name>
  		<replaceName>y</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_y</name>
  		<replaceName>y</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline float y() const;
  inline void set_y(float value);

  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>PbVector3</name>
  	<Function>
  		<name>z</name>
  		<replaceName>z</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_z</name>
  		<replaceName>z</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_z</name>
  		<replaceName>z</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:pb.PbVector3)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  friend void  protobuf_AddDesc_module_2fUtil_2eproto();
  friend void protobuf_AssignDesc_module_2fUtil_2eproto();
  friend void protobuf_ShutdownFile_module_2fUtil_2eproto();

  void InitAsDefaultInstance();
  static PbVector3* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>PbVector3_Int</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/Util.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class PbVector3_Int : public ::google::protobuf::Message {
 public:
  PbVector3_Int();
  virtual ~PbVector3_Int();

  PbVector3_Int(const PbVector3_Int& from);

  inline PbVector3_Int& operator=(const PbVector3_Int& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbVector3_Int& default_instance();

  void Swap(PbVector3_Int* other);

  // implements Message ----------------------------------------------

  PbVector3_Int* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbVector3_Int& from);
  void MergeFrom(const PbVector3_Int& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>PbVector3_Int</name>
  	<Function>
  		<name>x</name>
  		<replaceName>x</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_x</name>
  		<replaceName>x</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_x</name>
  		<replaceName>x</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>PbVector3_Int</name>
  	<Function>
  		<name>y</name>
  		<replaceName>y</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_y</name>
  		<replaceName>y</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_y</name>
  		<replaceName>y</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // optional int32 z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>PbVector3_Int</name>
  	<Function>
  		<name>z</name>
  		<replaceName>z</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_z</name>
  		<replaceName>z</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_z</name>
  		<replaceName>z</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 z() const;
  inline void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.PbVector3_Int)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  friend void  protobuf_AddDesc_module_2fUtil_2eproto();
  friend void protobuf_AssignDesc_module_2fUtil_2eproto();
  friend void protobuf_ShutdownFile_module_2fUtil_2eproto();

  void InitAsDefaultInstance();
  static PbVector3_Int* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>PbQuaternion</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/Util.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class PbQuaternion : public ::google::protobuf::Message {
 public:
  PbQuaternion();
  virtual ~PbQuaternion();

  PbQuaternion(const PbQuaternion& from);

  inline PbQuaternion& operator=(const PbQuaternion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbQuaternion& default_instance();

  void Swap(PbQuaternion* other);

  // implements Message ----------------------------------------------

  PbQuaternion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbQuaternion& from);
  void MergeFrom(const PbQuaternion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float w = 1;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>PbQuaternion</name>
  	<Function>
  		<name>w</name>
  		<replaceName>w</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_w</name>
  		<replaceName>w</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_w</name>
  		<replaceName>w</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline float w() const;
  inline void set_w(float value);

  // required float x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>PbQuaternion</name>
  	<Function>
  		<name>x</name>
  		<replaceName>x</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_x</name>
  		<replaceName>x</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_x</name>
  		<replaceName>x</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline float x() const;
  inline void set_x(float value);

  // required float y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>PbQuaternion</name>
  	<Function>
  		<name>y</name>
  		<replaceName>y</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_y</name>
  		<replaceName>y</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_y</name>
  		<replaceName>y</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline float y() const;
  inline void set_y(float value);

  // required float z = 4;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>PbQuaternion</name>
  	<Function>
  		<name>z</name>
  		<replaceName>z</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_z</name>
  		<replaceName>z</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_z</name>
  		<replaceName>z</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:pb.PbQuaternion)
 private:
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float w_;
  float x_;
  float y_;
  float z_;
  friend void  protobuf_AddDesc_module_2fUtil_2eproto();
  friend void protobuf_AssignDesc_module_2fUtil_2eproto();
  friend void protobuf_ShutdownFile_module_2fUtil_2eproto();

  void InitAsDefaultInstance();
  static PbQuaternion* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>PbVector2</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/Util.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class PbVector2 : public ::google::protobuf::Message {
 public:
  PbVector2();
  virtual ~PbVector2();

  PbVector2(const PbVector2& from);

  inline PbVector2& operator=(const PbVector2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbVector2& default_instance();

  void Swap(PbVector2* other);

  // implements Message ----------------------------------------------

  PbVector2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbVector2& from);
  void MergeFrom(const PbVector2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>PbVector2</name>
  	<Function>
  		<name>x</name>
  		<replaceName>x</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_x</name>
  		<replaceName>x</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_x</name>
  		<replaceName>x</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>PbVector2</name>
  	<Function>
  		<name>y</name>
  		<replaceName>y</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_y</name>
  		<replaceName>y</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_y</name>
  		<replaceName>y</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:pb.PbVector2)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  friend void  protobuf_AddDesc_module_2fUtil_2eproto();
  friend void protobuf_AssignDesc_module_2fUtil_2eproto();
  friend void protobuf_ShutdownFile_module_2fUtil_2eproto();

  void InitAsDefaultInstance();
  static PbVector2* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>PbVector2_Int</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/Util.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class PbVector2_Int : public ::google::protobuf::Message {
 public:
  PbVector2_Int();
  virtual ~PbVector2_Int();

  PbVector2_Int(const PbVector2_Int& from);

  inline PbVector2_Int& operator=(const PbVector2_Int& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbVector2_Int& default_instance();

  void Swap(PbVector2_Int* other);

  // implements Message ----------------------------------------------

  PbVector2_Int* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbVector2_Int& from);
  void MergeFrom(const PbVector2_Int& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>PbVector2_Int</name>
  	<Function>
  		<name>x</name>
  		<replaceName>x</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_x</name>
  		<replaceName>x</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_x</name>
  		<replaceName>x</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>PbVector2_Int</name>
  	<Function>
  		<name>y</name>
  		<replaceName>y</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_y</name>
  		<replaceName>y</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_y</name>
  		<replaceName>y</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.PbVector2_Int)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  friend void  protobuf_AddDesc_module_2fUtil_2eproto();
  friend void protobuf_AssignDesc_module_2fUtil_2eproto();
  friend void protobuf_ShutdownFile_module_2fUtil_2eproto();

  void InitAsDefaultInstance();
  static PbVector2_Int* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>PbRect</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/Util.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class PbRect : public ::google::protobuf::Message {
 public:
  PbRect();
  virtual ~PbRect();

  PbRect(const PbRect& from);

  inline PbRect& operator=(const PbRect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRect& default_instance();

  void Swap(PbRect* other);

  // implements Message ----------------------------------------------

  PbRect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRect& from);
  void MergeFrom(const PbRect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.PbVector2 MinPoint = 1;
  inline bool has_minpoint() const;
  inline void clear_minpoint();
  static const int kMinPointFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>PbRect</name>
  	<Function>
  		<name>minpoint</name>
  		<replaceName>MinPoint</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_minpoint</name>
  		<replaceName>MinPoint</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_minpoint</name>
  		<replaceName>MinPoint</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_minpoint</name>
  		<replaceName>MinPoint</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2& minpoint() const;
  inline ::pb::PbVector2* mutable_minpoint();
  inline ::pb::PbVector2* release_minpoint();
  inline void set_allocated_minpoint(::pb::PbVector2* minpoint);

  // required .pb.PbVector2 MaxPoint = 2;
  inline bool has_maxpoint() const;
  inline void clear_maxpoint();
  static const int kMaxPointFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>PbRect</name>
  	<Function>
  		<name>maxpoint</name>
  		<replaceName>MaxPoint</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxpoint</name>
  		<replaceName>MaxPoint</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_maxpoint</name>
  		<replaceName>MaxPoint</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxpoint</name>
  		<replaceName>MaxPoint</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2& maxpoint() const;
  inline ::pb::PbVector2* mutable_maxpoint();
  inline ::pb::PbVector2* release_maxpoint();
  inline void set_allocated_maxpoint(::pb::PbVector2* maxpoint);

  // @@protoc_insertion_point(class_scope:pb.PbRect)
 private:
  inline void set_has_minpoint();
  inline void clear_has_minpoint();
  inline void set_has_maxpoint();
  inline void clear_has_maxpoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::PbVector2* minpoint_;
  ::pb::PbVector2* maxpoint_;
  friend void  protobuf_AddDesc_module_2fUtil_2eproto();
  friend void protobuf_AssignDesc_module_2fUtil_2eproto();
  friend void protobuf_ShutdownFile_module_2fUtil_2eproto();

  void InitAsDefaultInstance();
  static PbRect* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>PbRect_Int</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/Util.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class PbRect_Int : public ::google::protobuf::Message {
 public:
  PbRect_Int();
  virtual ~PbRect_Int();

  PbRect_Int(const PbRect_Int& from);

  inline PbRect_Int& operator=(const PbRect_Int& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRect_Int& default_instance();

  void Swap(PbRect_Int* other);

  // implements Message ----------------------------------------------

  PbRect_Int* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbRect_Int& from);
  void MergeFrom(const PbRect_Int& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.PbVector2_Int MinPoint = 1;
  inline bool has_minpoint() const;
  inline void clear_minpoint();
  static const int kMinPointFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>PbRect_Int</name>
  	<Function>
  		<name>minpoint</name>
  		<replaceName>MinPoint</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_minpoint</name>
  		<replaceName>MinPoint</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_minpoint</name>
  		<replaceName>MinPoint</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_minpoint</name>
  		<replaceName>MinPoint</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2_Int& minpoint() const;
  inline ::pb::PbVector2_Int* mutable_minpoint();
  inline ::pb::PbVector2_Int* release_minpoint();
  inline void set_allocated_minpoint(::pb::PbVector2_Int* minpoint);

  // optional .pb.PbVector2_Int MaxPoint = 2;
  inline bool has_maxpoint() const;
  inline void clear_maxpoint();
  static const int kMaxPointFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>PbRect_Int</name>
  	<Function>
  		<name>maxpoint</name>
  		<replaceName>MaxPoint</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxpoint</name>
  		<replaceName>MaxPoint</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_maxpoint</name>
  		<replaceName>MaxPoint</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxpoint</name>
  		<replaceName>MaxPoint</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2_Int& maxpoint() const;
  inline ::pb::PbVector2_Int* mutable_maxpoint();
  inline ::pb::PbVector2_Int* release_maxpoint();
  inline void set_allocated_maxpoint(::pb::PbVector2_Int* maxpoint);

  // @@protoc_insertion_point(class_scope:pb.PbRect_Int)
 private:
  inline void set_has_minpoint();
  inline void clear_has_minpoint();
  inline void set_has_maxpoint();
  inline void clear_has_maxpoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::PbVector2_Int* minpoint_;
  ::pb::PbVector2_Int* maxpoint_;
  friend void  protobuf_AddDesc_module_2fUtil_2eproto();
  friend void protobuf_AssignDesc_module_2fUtil_2eproto();
  friend void protobuf_ShutdownFile_module_2fUtil_2eproto();

  void InitAsDefaultInstance();
  static PbRect_Int* default_instance_;
};
// ===================================================================


// ===================================================================

// PbVector3

// required float x = 1;
inline bool PbVector3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbVector3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbVector3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbVector3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float PbVector3::x() const {
  // @@protoc_insertion_point(field_get:pb.PbVector3.x)
  return x_;
}
inline void PbVector3::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:pb.PbVector3.x)
}

// required float y = 2;
inline bool PbVector3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbVector3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbVector3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbVector3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float PbVector3::y() const {
  // @@protoc_insertion_point(field_get:pb.PbVector3.y)
  return y_;
}
inline void PbVector3::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:pb.PbVector3.y)
}

// required float z = 3;
inline bool PbVector3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbVector3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbVector3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbVector3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float PbVector3::z() const {
  // @@protoc_insertion_point(field_get:pb.PbVector3.z)
  return z_;
}
inline void PbVector3::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:pb.PbVector3.z)
}

// -------------------------------------------------------------------

// PbVector3_Int

// optional int32 x = 1;
inline bool PbVector3_Int::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbVector3_Int::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbVector3_Int::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbVector3_Int::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 PbVector3_Int::x() const {
  // @@protoc_insertion_point(field_get:pb.PbVector3_Int.x)
  return x_;
}
inline void PbVector3_Int::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:pb.PbVector3_Int.x)
}

// optional int32 y = 2;
inline bool PbVector3_Int::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbVector3_Int::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbVector3_Int::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbVector3_Int::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 PbVector3_Int::y() const {
  // @@protoc_insertion_point(field_get:pb.PbVector3_Int.y)
  return y_;
}
inline void PbVector3_Int::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:pb.PbVector3_Int.y)
}

// optional int32 z = 3;
inline bool PbVector3_Int::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbVector3_Int::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbVector3_Int::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbVector3_Int::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline ::google::protobuf::int32 PbVector3_Int::z() const {
  // @@protoc_insertion_point(field_get:pb.PbVector3_Int.z)
  return z_;
}
inline void PbVector3_Int::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:pb.PbVector3_Int.z)
}

// -------------------------------------------------------------------

// PbQuaternion

// required float w = 1;
inline bool PbQuaternion::has_w() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbQuaternion::set_has_w() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbQuaternion::clear_has_w() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbQuaternion::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline float PbQuaternion::w() const {
  // @@protoc_insertion_point(field_get:pb.PbQuaternion.w)
  return w_;
}
inline void PbQuaternion::set_w(float value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:pb.PbQuaternion.w)
}

// required float x = 2;
inline bool PbQuaternion::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbQuaternion::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbQuaternion::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbQuaternion::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float PbQuaternion::x() const {
  // @@protoc_insertion_point(field_get:pb.PbQuaternion.x)
  return x_;
}
inline void PbQuaternion::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:pb.PbQuaternion.x)
}

// required float y = 3;
inline bool PbQuaternion::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbQuaternion::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbQuaternion::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbQuaternion::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float PbQuaternion::y() const {
  // @@protoc_insertion_point(field_get:pb.PbQuaternion.y)
  return y_;
}
inline void PbQuaternion::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:pb.PbQuaternion.y)
}

// required float z = 4;
inline bool PbQuaternion::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbQuaternion::set_has_z() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbQuaternion::clear_has_z() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbQuaternion::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float PbQuaternion::z() const {
  // @@protoc_insertion_point(field_get:pb.PbQuaternion.z)
  return z_;
}
inline void PbQuaternion::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:pb.PbQuaternion.z)
}

// -------------------------------------------------------------------

// PbVector2

// required float x = 1;
inline bool PbVector2::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbVector2::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbVector2::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbVector2::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float PbVector2::x() const {
  // @@protoc_insertion_point(field_get:pb.PbVector2.x)
  return x_;
}
inline void PbVector2::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:pb.PbVector2.x)
}

// required float y = 2;
inline bool PbVector2::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbVector2::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbVector2::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbVector2::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float PbVector2::y() const {
  // @@protoc_insertion_point(field_get:pb.PbVector2.y)
  return y_;
}
inline void PbVector2::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:pb.PbVector2.y)
}

// -------------------------------------------------------------------

// PbVector2_Int

// optional int32 x = 1;
inline bool PbVector2_Int::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbVector2_Int::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbVector2_Int::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbVector2_Int::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 PbVector2_Int::x() const {
  // @@protoc_insertion_point(field_get:pb.PbVector2_Int.x)
  return x_;
}
inline void PbVector2_Int::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:pb.PbVector2_Int.x)
}

// optional int32 y = 2;
inline bool PbVector2_Int::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbVector2_Int::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbVector2_Int::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbVector2_Int::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 PbVector2_Int::y() const {
  // @@protoc_insertion_point(field_get:pb.PbVector2_Int.y)
  return y_;
}
inline void PbVector2_Int::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:pb.PbVector2_Int.y)
}

// -------------------------------------------------------------------

// PbRect

// required .pb.PbVector2 MinPoint = 1;
inline bool PbRect::has_minpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRect::set_has_minpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRect::clear_has_minpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRect::clear_minpoint() {
  if (minpoint_ != NULL) minpoint_->::pb::PbVector2::Clear();
  clear_has_minpoint();
}
inline const ::pb::PbVector2& PbRect::minpoint() const {
  // @@protoc_insertion_point(field_get:pb.PbRect.MinPoint)
  return minpoint_ != NULL ? *minpoint_ : *default_instance_->minpoint_;
}
inline ::pb::PbVector2* PbRect::mutable_minpoint() {
  set_has_minpoint();
  if (minpoint_ == NULL) minpoint_ = new ::pb::PbVector2;
  // @@protoc_insertion_point(field_mutable:pb.PbRect.MinPoint)
  return minpoint_;
}
inline ::pb::PbVector2* PbRect::release_minpoint() {
  clear_has_minpoint();
  ::pb::PbVector2* temp = minpoint_;
  minpoint_ = NULL;
  return temp;
}
inline void PbRect::set_allocated_minpoint(::pb::PbVector2* minpoint) {
  delete minpoint_;
  minpoint_ = minpoint;
  if (minpoint) {
    set_has_minpoint();
  } else {
    clear_has_minpoint();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.PbRect.MinPoint)
}

// required .pb.PbVector2 MaxPoint = 2;
inline bool PbRect::has_maxpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRect::set_has_maxpoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRect::clear_has_maxpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRect::clear_maxpoint() {
  if (maxpoint_ != NULL) maxpoint_->::pb::PbVector2::Clear();
  clear_has_maxpoint();
}
inline const ::pb::PbVector2& PbRect::maxpoint() const {
  // @@protoc_insertion_point(field_get:pb.PbRect.MaxPoint)
  return maxpoint_ != NULL ? *maxpoint_ : *default_instance_->maxpoint_;
}
inline ::pb::PbVector2* PbRect::mutable_maxpoint() {
  set_has_maxpoint();
  if (maxpoint_ == NULL) maxpoint_ = new ::pb::PbVector2;
  // @@protoc_insertion_point(field_mutable:pb.PbRect.MaxPoint)
  return maxpoint_;
}
inline ::pb::PbVector2* PbRect::release_maxpoint() {
  clear_has_maxpoint();
  ::pb::PbVector2* temp = maxpoint_;
  maxpoint_ = NULL;
  return temp;
}
inline void PbRect::set_allocated_maxpoint(::pb::PbVector2* maxpoint) {
  delete maxpoint_;
  maxpoint_ = maxpoint;
  if (maxpoint) {
    set_has_maxpoint();
  } else {
    clear_has_maxpoint();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.PbRect.MaxPoint)
}

// -------------------------------------------------------------------

// PbRect_Int

// optional .pb.PbVector2_Int MinPoint = 1;
inline bool PbRect_Int::has_minpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbRect_Int::set_has_minpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbRect_Int::clear_has_minpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbRect_Int::clear_minpoint() {
  if (minpoint_ != NULL) minpoint_->::pb::PbVector2_Int::Clear();
  clear_has_minpoint();
}
inline const ::pb::PbVector2_Int& PbRect_Int::minpoint() const {
  // @@protoc_insertion_point(field_get:pb.PbRect_Int.MinPoint)
  return minpoint_ != NULL ? *minpoint_ : *default_instance_->minpoint_;
}
inline ::pb::PbVector2_Int* PbRect_Int::mutable_minpoint() {
  set_has_minpoint();
  if (minpoint_ == NULL) minpoint_ = new ::pb::PbVector2_Int;
  // @@protoc_insertion_point(field_mutable:pb.PbRect_Int.MinPoint)
  return minpoint_;
}
inline ::pb::PbVector2_Int* PbRect_Int::release_minpoint() {
  clear_has_minpoint();
  ::pb::PbVector2_Int* temp = minpoint_;
  minpoint_ = NULL;
  return temp;
}
inline void PbRect_Int::set_allocated_minpoint(::pb::PbVector2_Int* minpoint) {
  delete minpoint_;
  minpoint_ = minpoint;
  if (minpoint) {
    set_has_minpoint();
  } else {
    clear_has_minpoint();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.PbRect_Int.MinPoint)
}

// optional .pb.PbVector2_Int MaxPoint = 2;
inline bool PbRect_Int::has_maxpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbRect_Int::set_has_maxpoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbRect_Int::clear_has_maxpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbRect_Int::clear_maxpoint() {
  if (maxpoint_ != NULL) maxpoint_->::pb::PbVector2_Int::Clear();
  clear_has_maxpoint();
}
inline const ::pb::PbVector2_Int& PbRect_Int::maxpoint() const {
  // @@protoc_insertion_point(field_get:pb.PbRect_Int.MaxPoint)
  return maxpoint_ != NULL ? *maxpoint_ : *default_instance_->maxpoint_;
}
inline ::pb::PbVector2_Int* PbRect_Int::mutable_maxpoint() {
  set_has_maxpoint();
  if (maxpoint_ == NULL) maxpoint_ = new ::pb::PbVector2_Int;
  // @@protoc_insertion_point(field_mutable:pb.PbRect_Int.MaxPoint)
  return maxpoint_;
}
inline ::pb::PbVector2_Int* PbRect_Int::release_maxpoint() {
  clear_has_maxpoint();
  ::pb::PbVector2_Int* temp = maxpoint_;
  maxpoint_ = NULL;
  return temp;
}
inline void PbRect_Int::set_allocated_maxpoint(::pb::PbVector2_Int* maxpoint) {
  delete maxpoint_;
  maxpoint_ = maxpoint;
  if (maxpoint) {
    set_has_maxpoint();
  } else {
    clear_has_maxpoint();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.PbRect_Int.MaxPoint)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_module_2fUtil_2eproto__INCLUDED
