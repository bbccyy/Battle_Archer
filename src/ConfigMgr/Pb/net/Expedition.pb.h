// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Expedition.proto

#ifndef PROTOBUF_net_2fExpedition_2eproto__INCLUDED
#define PROTOBUF_net_2fExpedition_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
#include "net/Mirror.pb.h"
#include "net/Battle.pb.h"
#include "module/Attributer.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fExpedition_2eproto();
void protobuf_AssignDesc_net_2fExpedition_2eproto();
void protobuf_ShutdownFile_net_2fExpedition_2eproto();

class TExpeditionTeamInfo;
class TExpeditionHeroStatus;
class TExpeditionStrongholdInfo;
class TExpeditionRewardInfo;
class TExpeditionBuffInfo;
class TExpeditionShopInfo;
class TExpeditionRebornBuildInfo;
class TExpeditionInfo;
class TExpeditionGetInfoRsp;
class TExpeditionGetInfoNotify;
class TExpeditionDoBattleReq;
class TExpeditionDoBattleRsp;
class TExpeditionDoBattleReportReq;
class TExpeditionGetRewardReq;
class TExpeditionGetRewardRsp;
class TExpeditionGetBuffReq;
class TExpeditionGetBuffRsp;
class TExpeditionSelectBuffReq;
class TExpeditionSelectTreasureBuffReq;
class TExpeditionShoppingReq;
class TExpeditionShoppingRsp;
class TExpeditionResetRsp;
class TExpeditionBuyResetNumReq;
class TExpeditionRebornReq;
class TExpeditionSetSquadReq;
class TExpeditionUseRebornBuildReq;
class TExpeditionUseRebornBuildRsp;
class TExpeditionQuickPassReq;
class TExpeditionQuickPassRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TExpeditionTeamInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionTeamInfo : public ::google::protobuf::Message {
 public:
  TExpeditionTeamInfo();
  virtual ~TExpeditionTeamInfo();

  TExpeditionTeamInfo(const TExpeditionTeamInfo& from);

  inline TExpeditionTeamInfo& operator=(const TExpeditionTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionTeamInfo& default_instance();

  void Swap(TExpeditionTeamInfo* other);

  // implements Message ----------------------------------------------

  TExpeditionTeamInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionTeamInfo& from);
  void MergeFrom(const TExpeditionTeamInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 Squad = 1;
  inline int squad_size() const;
  inline void clear_squad();
  static const int kSquadFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionTeamInfo</name>
  	<Function>
  		<name>squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>squad_size</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 squad(int index) const;
  inline void set_squad(int index, ::google::protobuf::uint32 value);
  inline void add_squad(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      squad() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_squad();

  // repeated .pb.TExpeditionHeroStatus HeroStatus = 2;
  inline int herostatus_size() const;
  inline void clear_herostatus();
  static const int kHeroStatusFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionTeamInfo</name>
  	<Function>
  		<name>herostatus</name>
  		<replaceName>HeroStatus</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_herostatus</name>
  		<replaceName>HeroStatus</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_herostatus</name>
  		<replaceName>HeroStatus</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_herostatus</name>
  		<replaceName>HeroStatus</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>herostatus_size</name>
  		<replaceName>HeroStatus</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TExpeditionHeroStatus& herostatus(int index) const;
  inline ::pb::TExpeditionHeroStatus* mutable_herostatus(int index);
  inline ::pb::TExpeditionHeroStatus* add_herostatus();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionHeroStatus >&
      herostatus() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionHeroStatus >*
      mutable_herostatus();

  // repeated .pb.TSkillAttribute AddSkill = 3;
  inline int addskill_size() const;
  inline void clear_addskill();
  static const int kAddSkillFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionTeamInfo</name>
  	<Function>
  		<name>addskill</name>
  		<replaceName>AddSkill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_addskill</name>
  		<replaceName>AddSkill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_addskill</name>
  		<replaceName>AddSkill</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_addskill</name>
  		<replaceName>AddSkill</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>addskill_size</name>
  		<replaceName>AddSkill</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSkillAttribute& addskill(int index) const;
  inline ::pb::TSkillAttribute* mutable_addskill(int index);
  inline ::pb::TSkillAttribute* add_addskill();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute >&
      addskill() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute >*
      mutable_addskill();

  // @@protoc_insertion_point(class_scope:pb.TExpeditionTeamInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > squad_;
  ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionHeroStatus > herostatus_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute > addskill_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionTeamInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionHeroStatus</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionHeroStatus : public ::google::protobuf::Message {
 public:
  TExpeditionHeroStatus();
  virtual ~TExpeditionHeroStatus();

  TExpeditionHeroStatus(const TExpeditionHeroStatus& from);

  inline TExpeditionHeroStatus& operator=(const TExpeditionHeroStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionHeroStatus& default_instance();

  void Swap(TExpeditionHeroStatus* other);

  // implements Message ----------------------------------------------

  TExpeditionHeroStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionHeroStatus& from);
  void MergeFrom(const TExpeditionHeroStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionHeroStatus</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint32 CurHpPercent = 2;
  inline bool has_curhppercent() const;
  inline void clear_curhppercent();
  static const int kCurHpPercentFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionHeroStatus</name>
  	<Function>
  		<name>curhppercent</name>
  		<replaceName>CurHpPercent</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curhppercent</name>
  		<replaceName>CurHpPercent</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curhppercent</name>
  		<replaceName>CurHpPercent</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curhppercent() const;
  inline void set_curhppercent(::google::protobuf::uint32 value);

  // optional uint32 CurRage = 3;
  inline bool has_currage() const;
  inline void clear_currage();
  static const int kCurRageFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionHeroStatus</name>
  	<Function>
  		<name>currage</name>
  		<replaceName>CurRage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_currage</name>
  		<replaceName>CurRage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_currage</name>
  		<replaceName>CurRage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 currage() const;
  inline void set_currage(::google::protobuf::uint32 value);

  // repeated .pb.TAttribute BuffAttrArr = 4;
  inline int buffattrarr_size() const;
  inline void clear_buffattrarr();
  static const int kBuffAttrArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionHeroStatus</name>
  	<Function>
  		<name>buffattrarr</name>
  		<replaceName>BuffAttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buffattrarr</name>
  		<replaceName>BuffAttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buffattrarr</name>
  		<replaceName>BuffAttrArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffattrarr</name>
  		<replaceName>BuffAttrArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buffattrarr_size</name>
  		<replaceName>BuffAttrArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAttribute& buffattrarr(int index) const;
  inline ::pb::TAttribute* mutable_buffattrarr(int index);
  inline ::pb::TAttribute* add_buffattrarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAttribute >&
      buffattrarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAttribute >*
      mutable_buffattrarr();

  // @@protoc_insertion_point(class_scope:pb.TExpeditionHeroStatus)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_curhppercent();
  inline void clear_has_curhppercent();
  inline void set_has_currage();
  inline void clear_has_currage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 curhppercent_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAttribute > buffattrarr_;
  ::google::protobuf::uint32 currage_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionHeroStatus* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionStrongholdInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionStrongholdInfo : public ::google::protobuf::Message {
 public:
  TExpeditionStrongholdInfo();
  virtual ~TExpeditionStrongholdInfo();

  TExpeditionStrongholdInfo(const TExpeditionStrongholdInfo& from);

  inline TExpeditionStrongholdInfo& operator=(const TExpeditionStrongholdInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionStrongholdInfo& default_instance();

  void Swap(TExpeditionStrongholdInfo* other);

  // implements Message ----------------------------------------------

  TExpeditionStrongholdInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionStrongholdInfo& from);
  void MergeFrom(const TExpeditionStrongholdInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionStrongholdInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .pb.TMirrorInfo Mirror = 2;
  inline bool has_mirror() const;
  inline void clear_mirror();
  static const int kMirrorFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionStrongholdInfo</name>
  	<Function>
  		<name>mirror</name>
  		<replaceName>Mirror</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mirror</name>
  		<replaceName>Mirror</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_mirror</name>
  		<replaceName>Mirror</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mirror</name>
  		<replaceName>Mirror</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TMirrorInfo& mirror() const;
  inline ::pb::TMirrorInfo* mutable_mirror();
  inline ::pb::TMirrorInfo* release_mirror();
  inline void set_allocated_mirror(::pb::TMirrorInfo* mirror);

  // @@protoc_insertion_point(class_scope:pb.TExpeditionStrongholdInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_mirror();
  inline void clear_has_mirror();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TMirrorInfo* mirror_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionStrongholdInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionRewardInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionRewardInfo : public ::google::protobuf::Message {
 public:
  TExpeditionRewardInfo();
  virtual ~TExpeditionRewardInfo();

  TExpeditionRewardInfo(const TExpeditionRewardInfo& from);

  inline TExpeditionRewardInfo& operator=(const TExpeditionRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionRewardInfo& default_instance();

  void Swap(TExpeditionRewardInfo* other);

  // implements Message ----------------------------------------------

  TExpeditionRewardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionRewardInfo& from);
  void MergeFrom(const TExpeditionRewardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionRewardInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 Received = 2;
  inline bool has_received() const;
  inline void clear_received();
  static const int kReceivedFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionRewardInfo</name>
  	<Function>
  		<name>received</name>
  		<replaceName>Received</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_received</name>
  		<replaceName>Received</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_received</name>
  		<replaceName>Received</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 received() const;
  inline void set_received(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward RewardArr = 3;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionRewardInfo</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TExpeditionRewardInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_received();
  inline void clear_has_received();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 received_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionRewardInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionBuffInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionBuffInfo : public ::google::protobuf::Message {
 public:
  TExpeditionBuffInfo();
  virtual ~TExpeditionBuffInfo();

  TExpeditionBuffInfo(const TExpeditionBuffInfo& from);

  inline TExpeditionBuffInfo& operator=(const TExpeditionBuffInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionBuffInfo& default_instance();

  void Swap(TExpeditionBuffInfo* other);

  // implements Message ----------------------------------------------

  TExpeditionBuffInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionBuffInfo& from);
  void MergeFrom(const TExpeditionBuffInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionBuffInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated uint32 BuffArr = 2;
  inline int buffarr_size() const;
  inline void clear_buffarr();
  static const int kBuffArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionBuffInfo</name>
  	<Function>
  		<name>buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buffarr_size</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buffarr(int index) const;
  inline void set_buffarr(int index, ::google::protobuf::uint32 value);
  inline void add_buffarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      buffarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_buffarr();

  // optional uint32 SelectedIndex = 3;
  inline bool has_selectedindex() const;
  inline void clear_selectedindex();
  static const int kSelectedIndexFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionBuffInfo</name>
  	<Function>
  		<name>selectedindex</name>
  		<replaceName>SelectedIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_selectedindex</name>
  		<replaceName>SelectedIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_selectedindex</name>
  		<replaceName>SelectedIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 selectedindex() const;
  inline void set_selectedindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TExpeditionBuffInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_selectedindex();
  inline void clear_has_selectedindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > buffarr_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 selectedindex_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionBuffInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionShopInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionShopInfo : public ::google::protobuf::Message {
 public:
  TExpeditionShopInfo();
  virtual ~TExpeditionShopInfo();

  TExpeditionShopInfo(const TExpeditionShopInfo& from);

  inline TExpeditionShopInfo& operator=(const TExpeditionShopInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionShopInfo& default_instance();

  void Swap(TExpeditionShopInfo* other);

  // implements Message ----------------------------------------------

  TExpeditionShopInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionShopInfo& from);
  void MergeFrom(const TExpeditionShopInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionShopInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionShopInfo</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TExpeditionShopInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionShopInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionRebornBuildInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionRebornBuildInfo : public ::google::protobuf::Message {
 public:
  TExpeditionRebornBuildInfo();
  virtual ~TExpeditionRebornBuildInfo();

  TExpeditionRebornBuildInfo(const TExpeditionRebornBuildInfo& from);

  inline TExpeditionRebornBuildInfo& operator=(const TExpeditionRebornBuildInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionRebornBuildInfo& default_instance();

  void Swap(TExpeditionRebornBuildInfo* other);

  // implements Message ----------------------------------------------

  TExpeditionRebornBuildInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionRebornBuildInfo& from);
  void MergeFrom(const TExpeditionRebornBuildInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionRebornBuildInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 Hid = 2;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionRebornBuildInfo</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TExpeditionRebornBuildInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_hid();
  inline void clear_has_hid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 hid_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionRebornBuildInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionInfo : public ::google::protobuf::Message {
 public:
  TExpeditionInfo();
  virtual ~TExpeditionInfo();

  TExpeditionInfo(const TExpeditionInfo& from);

  inline TExpeditionInfo& operator=(const TExpeditionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionInfo& default_instance();

  void Swap(TExpeditionInfo* other);

  // implements Message ----------------------------------------------

  TExpeditionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionInfo& from);
  void MergeFrom(const TExpeditionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TExpeditionTeamInfo MyTeam = 1;
  inline bool has_myteam() const;
  inline void clear_myteam();
  static const int kMyTeamFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionInfo</name>
  	<Function>
  		<name>myteam</name>
  		<replaceName>MyTeam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myteam</name>
  		<replaceName>MyTeam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_myteam</name>
  		<replaceName>MyTeam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myteam</name>
  		<replaceName>MyTeam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TExpeditionTeamInfo& myteam() const;
  inline ::pb::TExpeditionTeamInfo* mutable_myteam();
  inline ::pb::TExpeditionTeamInfo* release_myteam();
  inline void set_allocated_myteam(::pb::TExpeditionTeamInfo* myteam);

  // repeated .pb.TExpeditionStrongholdInfo StrongholdArr = 2;
  inline int strongholdarr_size() const;
  inline void clear_strongholdarr();
  static const int kStrongholdArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionInfo</name>
  	<Function>
  		<name>strongholdarr</name>
  		<replaceName>StrongholdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_strongholdarr</name>
  		<replaceName>StrongholdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_strongholdarr</name>
  		<replaceName>StrongholdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdarr</name>
  		<replaceName>StrongholdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>strongholdarr_size</name>
  		<replaceName>StrongholdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TExpeditionStrongholdInfo& strongholdarr(int index) const;
  inline ::pb::TExpeditionStrongholdInfo* mutable_strongholdarr(int index);
  inline ::pb::TExpeditionStrongholdInfo* add_strongholdarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionStrongholdInfo >&
      strongholdarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionStrongholdInfo >*
      mutable_strongholdarr();

  // repeated .pb.TExpeditionRewardInfo RewardArr = 3;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionInfo</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TExpeditionRewardInfo& rewardarr(int index) const;
  inline ::pb::TExpeditionRewardInfo* mutable_rewardarr(int index);
  inline ::pb::TExpeditionRewardInfo* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionRewardInfo >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionRewardInfo >*
      mutable_rewardarr();

  // repeated .pb.TExpeditionBuffInfo BuffArr = 4;
  inline int buffarr_size() const;
  inline void clear_buffarr();
  static const int kBuffArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionInfo</name>
  	<Function>
  		<name>buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buffarr_size</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TExpeditionBuffInfo& buffarr(int index) const;
  inline ::pb::TExpeditionBuffInfo* mutable_buffarr(int index);
  inline ::pb::TExpeditionBuffInfo* add_buffarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionBuffInfo >&
      buffarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionBuffInfo >*
      mutable_buffarr();

  // repeated .pb.TExpeditionShopInfo BuyArr = 5;
  inline int buyarr_size() const;
  inline void clear_buyarr();
  static const int kBuyArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionInfo</name>
  	<Function>
  		<name>buyarr</name>
  		<replaceName>BuyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buyarr</name>
  		<replaceName>BuyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buyarr</name>
  		<replaceName>BuyArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buyarr</name>
  		<replaceName>BuyArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buyarr_size</name>
  		<replaceName>BuyArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TExpeditionShopInfo& buyarr(int index) const;
  inline ::pb::TExpeditionShopInfo* mutable_buyarr(int index);
  inline ::pb::TExpeditionShopInfo* add_buyarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionShopInfo >&
      buyarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionShopInfo >*
      mutable_buyarr();

  // optional uint64 ResetTime = 6;
  inline bool has_resettime() const;
  inline void clear_resettime();
  static const int kResetTimeFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionInfo</name>
  	<Function>
  		<name>resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 resettime() const;
  inline void set_resettime(::google::protobuf::uint64 value);

  // optional uint32 BuyRebornNum = 7;
  inline bool has_buyrebornnum() const;
  inline void clear_buyrebornnum();
  static const int kBuyRebornNumFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionInfo</name>
  	<Function>
  		<name>buyrebornnum</name>
  		<replaceName>BuyRebornNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buyrebornnum</name>
  		<replaceName>BuyRebornNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buyrebornnum</name>
  		<replaceName>BuyRebornNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buyrebornnum() const;
  inline void set_buyrebornnum(::google::protobuf::uint32 value);

  // repeated .pb.TExpeditionRebornBuildInfo RebornBuildArr = 8;
  inline int rebornbuildarr_size() const;
  inline void clear_rebornbuildarr();
  static const int kRebornBuildArrFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionInfo</name>
  	<Function>
  		<name>rebornbuildarr</name>
  		<replaceName>RebornBuildArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rebornbuildarr</name>
  		<replaceName>RebornBuildArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rebornbuildarr</name>
  		<replaceName>RebornBuildArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rebornbuildarr</name>
  		<replaceName>RebornBuildArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rebornbuildarr_size</name>
  		<replaceName>RebornBuildArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TExpeditionRebornBuildInfo& rebornbuildarr(int index) const;
  inline ::pb::TExpeditionRebornBuildInfo* mutable_rebornbuildarr(int index);
  inline ::pb::TExpeditionRebornBuildInfo* add_rebornbuildarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionRebornBuildInfo >&
      rebornbuildarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionRebornBuildInfo >*
      mutable_rebornbuildarr();

  // optional .pb.TExpeditionBuffInfo TreasureBuff = 9;
  inline bool has_treasurebuff() const;
  inline void clear_treasurebuff();
  static const int kTreasureBuffFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionInfo</name>
  	<Function>
  		<name>treasurebuff</name>
  		<replaceName>TreasureBuff</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_treasurebuff</name>
  		<replaceName>TreasureBuff</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_treasurebuff</name>
  		<replaceName>TreasureBuff</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_treasurebuff</name>
  		<replaceName>TreasureBuff</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TExpeditionBuffInfo& treasurebuff() const;
  inline ::pb::TExpeditionBuffInfo* mutable_treasurebuff();
  inline ::pb::TExpeditionBuffInfo* release_treasurebuff();
  inline void set_allocated_treasurebuff(::pb::TExpeditionBuffInfo* treasurebuff);

  // optional bool IsQuickPassChoose = 10;
  inline bool has_isquickpasschoose() const;
  inline void clear_isquickpasschoose();
  static const int kIsQuickPassChooseFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionInfo</name>
  	<Function>
  		<name>isquickpasschoose</name>
  		<replaceName>IsQuickPassChoose</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isquickpasschoose</name>
  		<replaceName>IsQuickPassChoose</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isquickpasschoose</name>
  		<replaceName>IsQuickPassChoose</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isquickpasschoose() const;
  inline void set_isquickpasschoose(bool value);

  // optional uint32 LastPassMainNum = 11;
  inline bool has_lastpassmainnum() const;
  inline void clear_lastpassmainnum();
  static const int kLastPassMainNumFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionInfo</name>
  	<Function>
  		<name>lastpassmainnum</name>
  		<replaceName>LastPassMainNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lastpassmainnum</name>
  		<replaceName>LastPassMainNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lastpassmainnum</name>
  		<replaceName>LastPassMainNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 lastpassmainnum() const;
  inline void set_lastpassmainnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TExpeditionInfo)
 private:
  inline void set_has_myteam();
  inline void clear_has_myteam();
  inline void set_has_resettime();
  inline void clear_has_resettime();
  inline void set_has_buyrebornnum();
  inline void clear_has_buyrebornnum();
  inline void set_has_treasurebuff();
  inline void clear_has_treasurebuff();
  inline void set_has_isquickpasschoose();
  inline void clear_has_isquickpasschoose();
  inline void set_has_lastpassmainnum();
  inline void clear_has_lastpassmainnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TExpeditionTeamInfo* myteam_;
  ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionStrongholdInfo > strongholdarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionRewardInfo > rewardarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionBuffInfo > buffarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionShopInfo > buyarr_;
  ::google::protobuf::uint64 resettime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionRebornBuildInfo > rebornbuildarr_;
  ::google::protobuf::uint32 buyrebornnum_;
  bool isquickpasschoose_;
  ::pb::TExpeditionBuffInfo* treasurebuff_;
  ::google::protobuf::uint32 lastpassmainnum_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionGetInfoRsp : public ::google::protobuf::Message {
 public:
  TExpeditionGetInfoRsp();
  virtual ~TExpeditionGetInfoRsp();

  TExpeditionGetInfoRsp(const TExpeditionGetInfoRsp& from);

  inline TExpeditionGetInfoRsp& operator=(const TExpeditionGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionGetInfoRsp& default_instance();

  void Swap(TExpeditionGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TExpeditionGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionGetInfoRsp& from);
  void MergeFrom(const TExpeditionGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TExpeditionInfo Info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionGetInfoRsp</name>
  	<Function>
  		<name>info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TExpeditionInfo& info() const;
  inline ::pb::TExpeditionInfo* mutable_info();
  inline ::pb::TExpeditionInfo* release_info();
  inline void set_allocated_info(::pb::TExpeditionInfo* info);

  // @@protoc_insertion_point(class_scope:pb.TExpeditionGetInfoRsp)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TExpeditionInfo* info_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionGetInfoNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionGetInfoNotify : public ::google::protobuf::Message {
 public:
  TExpeditionGetInfoNotify();
  virtual ~TExpeditionGetInfoNotify();

  TExpeditionGetInfoNotify(const TExpeditionGetInfoNotify& from);

  inline TExpeditionGetInfoNotify& operator=(const TExpeditionGetInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionGetInfoNotify& default_instance();

  void Swap(TExpeditionGetInfoNotify* other);

  // implements Message ----------------------------------------------

  TExpeditionGetInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionGetInfoNotify& from);
  void MergeFrom(const TExpeditionGetInfoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TExpeditionInfo Info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionGetInfoNotify</name>
  	<Function>
  		<name>info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TExpeditionInfo& info() const;
  inline ::pb::TExpeditionInfo* mutable_info();
  inline ::pb::TExpeditionInfo* release_info();
  inline void set_allocated_info(::pb::TExpeditionInfo* info);

  // optional .pb.TExpeditionRewardInfo RewardInfo = 2;
  inline bool has_rewardinfo() const;
  inline void clear_rewardinfo();
  static const int kRewardInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionGetInfoNotify</name>
  	<Function>
  		<name>rewardinfo</name>
  		<replaceName>RewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardinfo</name>
  		<replaceName>RewardInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_rewardinfo</name>
  		<replaceName>RewardInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardinfo</name>
  		<replaceName>RewardInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TExpeditionRewardInfo& rewardinfo() const;
  inline ::pb::TExpeditionRewardInfo* mutable_rewardinfo();
  inline ::pb::TExpeditionRewardInfo* release_rewardinfo();
  inline void set_allocated_rewardinfo(::pb::TExpeditionRewardInfo* rewardinfo);

  // @@protoc_insertion_point(class_scope:pb.TExpeditionGetInfoNotify)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_rewardinfo();
  inline void clear_has_rewardinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TExpeditionInfo* info_;
  ::pb::TExpeditionRewardInfo* rewardinfo_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionGetInfoNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionDoBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionDoBattleReq : public ::google::protobuf::Message {
 public:
  TExpeditionDoBattleReq();
  virtual ~TExpeditionDoBattleReq();

  TExpeditionDoBattleReq(const TExpeditionDoBattleReq& from);

  inline TExpeditionDoBattleReq& operator=(const TExpeditionDoBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionDoBattleReq& default_instance();

  void Swap(TExpeditionDoBattleReq* other);

  // implements Message ----------------------------------------------

  TExpeditionDoBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionDoBattleReq& from);
  void MergeFrom(const TExpeditionDoBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionDoBattleReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionDoBattleReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // repeated uint32 HidArr = 3;
  inline int hidarr_size() const;
  inline void clear_hidarr();
  static const int kHidArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionDoBattleReq</name>
  	<Function>
  		<name>hidarr</name>
  		<replaceName>HidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_hidarr</name>
  		<replaceName>HidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_hidarr</name>
  		<replaceName>HidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hidarr</name>
  		<replaceName>HidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>hidarr_size</name>
  		<replaceName>HidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hidarr(int index) const;
  inline void set_hidarr(int index, ::google::protobuf::uint32 value);
  inline void add_hidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      hidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_hidarr();

  // repeated uint32 Squad = 4;
  inline int squad_size() const;
  inline void clear_squad();
  static const int kSquadFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionDoBattleReq</name>
  	<Function>
  		<name>squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>squad_size</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 squad(int index) const;
  inline void set_squad(int index, ::google::protobuf::uint32 value);
  inline void add_squad(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      squad() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_squad();

  // @@protoc_insertion_point(class_scope:pb.TExpeditionDoBattleReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > hidarr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > squad_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionDoBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionDoBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionDoBattleRsp : public ::google::protobuf::Message {
 public:
  TExpeditionDoBattleRsp();
  virtual ~TExpeditionDoBattleRsp();

  TExpeditionDoBattleRsp(const TExpeditionDoBattleRsp& from);

  inline TExpeditionDoBattleRsp& operator=(const TExpeditionDoBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionDoBattleRsp& default_instance();

  void Swap(TExpeditionDoBattleRsp* other);

  // implements Message ----------------------------------------------

  TExpeditionDoBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionDoBattleRsp& from);
  void MergeFrom(const TExpeditionDoBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBattleArgs BattleArgs = 1;
  inline bool has_battleargs() const;
  inline void clear_battleargs();
  static const int kBattleArgsFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionDoBattleRsp</name>
  	<Function>
  		<name>battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& battleargs() const;
  inline ::pb::TBattleArgs* mutable_battleargs();
  inline ::pb::TBattleArgs* release_battleargs();
  inline void set_allocated_battleargs(::pb::TBattleArgs* battleargs);

  // @@protoc_insertion_point(class_scope:pb.TExpeditionDoBattleRsp)
 private:
  inline void set_has_battleargs();
  inline void clear_has_battleargs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleArgs* battleargs_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionDoBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionDoBattleReportReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionDoBattleReportReq : public ::google::protobuf::Message {
 public:
  TExpeditionDoBattleReportReq();
  virtual ~TExpeditionDoBattleReportReq();

  TExpeditionDoBattleReportReq(const TExpeditionDoBattleReportReq& from);

  inline TExpeditionDoBattleReportReq& operator=(const TExpeditionDoBattleReportReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionDoBattleReportReq& default_instance();

  void Swap(TExpeditionDoBattleReportReq* other);

  // implements Message ----------------------------------------------

  TExpeditionDoBattleReportReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionDoBattleReportReq& from);
  void MergeFrom(const TExpeditionDoBattleReportReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionDoBattleReportReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .pb.TBattleResult BattleResult = 2;
  inline bool has_battleresult() const;
  inline void clear_battleresult();
  static const int kBattleResultFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionDoBattleReportReq</name>
  	<Function>
  		<name>battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleResult& battleresult() const;
  inline ::pb::TBattleResult* mutable_battleresult();
  inline ::pb::TBattleResult* release_battleresult();
  inline void set_allocated_battleresult(::pb::TBattleResult* battleresult);

  // optional uint32 IsWinDirect = 3;
  inline bool has_iswindirect() const;
  inline void clear_iswindirect();
  static const int kIsWinDirectFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionDoBattleReportReq</name>
  	<Function>
  		<name>iswindirect</name>
  		<replaceName>IsWinDirect</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iswindirect</name>
  		<replaceName>IsWinDirect</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iswindirect</name>
  		<replaceName>IsWinDirect</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 iswindirect() const;
  inline void set_iswindirect(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TExpeditionDoBattleReportReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_battleresult();
  inline void clear_has_battleresult();
  inline void set_has_iswindirect();
  inline void clear_has_iswindirect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleResult* battleresult_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 iswindirect_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionDoBattleReportReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionGetRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionGetRewardReq : public ::google::protobuf::Message {
 public:
  TExpeditionGetRewardReq();
  virtual ~TExpeditionGetRewardReq();

  TExpeditionGetRewardReq(const TExpeditionGetRewardReq& from);

  inline TExpeditionGetRewardReq& operator=(const TExpeditionGetRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionGetRewardReq& default_instance();

  void Swap(TExpeditionGetRewardReq* other);

  // implements Message ----------------------------------------------

  TExpeditionGetRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionGetRewardReq& from);
  void MergeFrom(const TExpeditionGetRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionGetRewardReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TExpeditionGetRewardReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionGetRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionGetRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionGetRewardRsp : public ::google::protobuf::Message {
 public:
  TExpeditionGetRewardRsp();
  virtual ~TExpeditionGetRewardRsp();

  TExpeditionGetRewardRsp(const TExpeditionGetRewardRsp& from);

  inline TExpeditionGetRewardRsp& operator=(const TExpeditionGetRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionGetRewardRsp& default_instance();

  void Swap(TExpeditionGetRewardRsp* other);

  // implements Message ----------------------------------------------

  TExpeditionGetRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionGetRewardRsp& from);
  void MergeFrom(const TExpeditionGetRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TExpeditionRewardInfo Reward = 1;
  inline bool has_reward() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionGetRewardRsp</name>
  	<Function>
  		<name>reward</name>
  		<replaceName>Reward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_reward</name>
  		<replaceName>Reward</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_reward</name>
  		<replaceName>Reward</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reward</name>
  		<replaceName>Reward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TExpeditionRewardInfo& reward() const;
  inline ::pb::TExpeditionRewardInfo* mutable_reward();
  inline ::pb::TExpeditionRewardInfo* release_reward();
  inline void set_allocated_reward(::pb::TExpeditionRewardInfo* reward);

  // @@protoc_insertion_point(class_scope:pb.TExpeditionGetRewardRsp)
 private:
  inline void set_has_reward();
  inline void clear_has_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TExpeditionRewardInfo* reward_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionGetRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionGetBuffReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionGetBuffReq : public ::google::protobuf::Message {
 public:
  TExpeditionGetBuffReq();
  virtual ~TExpeditionGetBuffReq();

  TExpeditionGetBuffReq(const TExpeditionGetBuffReq& from);

  inline TExpeditionGetBuffReq& operator=(const TExpeditionGetBuffReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionGetBuffReq& default_instance();

  void Swap(TExpeditionGetBuffReq* other);

  // implements Message ----------------------------------------------

  TExpeditionGetBuffReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionGetBuffReq& from);
  void MergeFrom(const TExpeditionGetBuffReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionGetBuffReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TExpeditionGetBuffReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionGetBuffReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionGetBuffRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionGetBuffRsp : public ::google::protobuf::Message {
 public:
  TExpeditionGetBuffRsp();
  virtual ~TExpeditionGetBuffRsp();

  TExpeditionGetBuffRsp(const TExpeditionGetBuffRsp& from);

  inline TExpeditionGetBuffRsp& operator=(const TExpeditionGetBuffRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionGetBuffRsp& default_instance();

  void Swap(TExpeditionGetBuffRsp* other);

  // implements Message ----------------------------------------------

  TExpeditionGetBuffRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionGetBuffRsp& from);
  void MergeFrom(const TExpeditionGetBuffRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionGetBuffRsp</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated uint32 BuffArr = 2;
  inline int buffarr_size() const;
  inline void clear_buffarr();
  static const int kBuffArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionGetBuffRsp</name>
  	<Function>
  		<name>buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buffarr_size</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buffarr(int index) const;
  inline void set_buffarr(int index, ::google::protobuf::uint32 value);
  inline void add_buffarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      buffarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_buffarr();

  // @@protoc_insertion_point(class_scope:pb.TExpeditionGetBuffRsp)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > buffarr_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionGetBuffRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionSelectBuffReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionSelectBuffReq : public ::google::protobuf::Message {
 public:
  TExpeditionSelectBuffReq();
  virtual ~TExpeditionSelectBuffReq();

  TExpeditionSelectBuffReq(const TExpeditionSelectBuffReq& from);

  inline TExpeditionSelectBuffReq& operator=(const TExpeditionSelectBuffReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionSelectBuffReq& default_instance();

  void Swap(TExpeditionSelectBuffReq* other);

  // implements Message ----------------------------------------------

  TExpeditionSelectBuffReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionSelectBuffReq& from);
  void MergeFrom(const TExpeditionSelectBuffReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionSelectBuffReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 BuffIndex = 2;
  inline bool has_buffindex() const;
  inline void clear_buffindex();
  static const int kBuffIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionSelectBuffReq</name>
  	<Function>
  		<name>buffindex</name>
  		<replaceName>BuffIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buffindex</name>
  		<replaceName>BuffIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffindex</name>
  		<replaceName>BuffIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buffindex() const;
  inline void set_buffindex(::google::protobuf::uint32 value);

  // repeated uint32 Heros = 3;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionSelectBuffReq</name>
  	<Function>
  		<name>heros</name>
  		<replaceName>Heros</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_heros</name>
  		<replaceName>Heros</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_heros</name>
  		<replaceName>Heros</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_heros</name>
  		<replaceName>Heros</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>heros_size</name>
  		<replaceName>Heros</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 heros(int index) const;
  inline void set_heros(int index, ::google::protobuf::uint32 value);
  inline void add_heros(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      heros() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_heros();

  // @@protoc_insertion_point(class_scope:pb.TExpeditionSelectBuffReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_buffindex();
  inline void clear_has_buffindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 buffindex_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > heros_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionSelectBuffReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionSelectTreasureBuffReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionSelectTreasureBuffReq : public ::google::protobuf::Message {
 public:
  TExpeditionSelectTreasureBuffReq();
  virtual ~TExpeditionSelectTreasureBuffReq();

  TExpeditionSelectTreasureBuffReq(const TExpeditionSelectTreasureBuffReq& from);

  inline TExpeditionSelectTreasureBuffReq& operator=(const TExpeditionSelectTreasureBuffReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionSelectTreasureBuffReq& default_instance();

  void Swap(TExpeditionSelectTreasureBuffReq* other);

  // implements Message ----------------------------------------------

  TExpeditionSelectTreasureBuffReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionSelectTreasureBuffReq& from);
  void MergeFrom(const TExpeditionSelectTreasureBuffReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionSelectTreasureBuffReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 BuffIndex = 2;
  inline bool has_buffindex() const;
  inline void clear_buffindex();
  static const int kBuffIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionSelectTreasureBuffReq</name>
  	<Function>
  		<name>buffindex</name>
  		<replaceName>BuffIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buffindex</name>
  		<replaceName>BuffIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffindex</name>
  		<replaceName>BuffIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buffindex() const;
  inline void set_buffindex(::google::protobuf::uint32 value);

  // repeated uint32 Heros = 3;
  inline int heros_size() const;
  inline void clear_heros();
  static const int kHerosFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionSelectTreasureBuffReq</name>
  	<Function>
  		<name>heros</name>
  		<replaceName>Heros</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_heros</name>
  		<replaceName>Heros</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_heros</name>
  		<replaceName>Heros</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_heros</name>
  		<replaceName>Heros</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>heros_size</name>
  		<replaceName>Heros</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 heros(int index) const;
  inline void set_heros(int index, ::google::protobuf::uint32 value);
  inline void add_heros(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      heros() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_heros();

  // @@protoc_insertion_point(class_scope:pb.TExpeditionSelectTreasureBuffReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_buffindex();
  inline void clear_has_buffindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 buffindex_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > heros_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionSelectTreasureBuffReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionShoppingReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionShoppingReq : public ::google::protobuf::Message {
 public:
  TExpeditionShoppingReq();
  virtual ~TExpeditionShoppingReq();

  TExpeditionShoppingReq(const TExpeditionShoppingReq& from);

  inline TExpeditionShoppingReq& operator=(const TExpeditionShoppingReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionShoppingReq& default_instance();

  void Swap(TExpeditionShoppingReq* other);

  // implements Message ----------------------------------------------

  TExpeditionShoppingReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionShoppingReq& from);
  void MergeFrom(const TExpeditionShoppingReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionShoppingReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionShoppingReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TExpeditionShoppingReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionShoppingReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionShoppingRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionShoppingRsp : public ::google::protobuf::Message {
 public:
  TExpeditionShoppingRsp();
  virtual ~TExpeditionShoppingRsp();

  TExpeditionShoppingRsp(const TExpeditionShoppingRsp& from);

  inline TExpeditionShoppingRsp& operator=(const TExpeditionShoppingRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionShoppingRsp& default_instance();

  void Swap(TExpeditionShoppingRsp* other);

  // implements Message ----------------------------------------------

  TExpeditionShoppingRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionShoppingRsp& from);
  void MergeFrom(const TExpeditionShoppingRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionShoppingRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TExpeditionShoppingRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionShoppingRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionResetRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionResetRsp : public ::google::protobuf::Message {
 public:
  TExpeditionResetRsp();
  virtual ~TExpeditionResetRsp();

  TExpeditionResetRsp(const TExpeditionResetRsp& from);

  inline TExpeditionResetRsp& operator=(const TExpeditionResetRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionResetRsp& default_instance();

  void Swap(TExpeditionResetRsp* other);

  // implements Message ----------------------------------------------

  TExpeditionResetRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionResetRsp& from);
  void MergeFrom(const TExpeditionResetRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TExpeditionInfo Info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionResetRsp</name>
  	<Function>
  		<name>info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TExpeditionInfo& info() const;
  inline ::pb::TExpeditionInfo* mutable_info();
  inline ::pb::TExpeditionInfo* release_info();
  inline void set_allocated_info(::pb::TExpeditionInfo* info);

  // @@protoc_insertion_point(class_scope:pb.TExpeditionResetRsp)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TExpeditionInfo* info_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionResetRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionBuyResetNumReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionBuyResetNumReq : public ::google::protobuf::Message {
 public:
  TExpeditionBuyResetNumReq();
  virtual ~TExpeditionBuyResetNumReq();

  TExpeditionBuyResetNumReq(const TExpeditionBuyResetNumReq& from);

  inline TExpeditionBuyResetNumReq& operator=(const TExpeditionBuyResetNumReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionBuyResetNumReq& default_instance();

  void Swap(TExpeditionBuyResetNumReq* other);

  // implements Message ----------------------------------------------

  TExpeditionBuyResetNumReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionBuyResetNumReq& from);
  void MergeFrom(const TExpeditionBuyResetNumReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionBuyResetNumReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TExpeditionBuyResetNumReq)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionBuyResetNumReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionRebornReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionRebornReq : public ::google::protobuf::Message {
 public:
  TExpeditionRebornReq();
  virtual ~TExpeditionRebornReq();

  TExpeditionRebornReq(const TExpeditionRebornReq& from);

  inline TExpeditionRebornReq& operator=(const TExpeditionRebornReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionRebornReq& default_instance();

  void Swap(TExpeditionRebornReq* other);

  // implements Message ----------------------------------------------

  TExpeditionRebornReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionRebornReq& from);
  void MergeFrom(const TExpeditionRebornReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.TExpeditionRebornReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionRebornReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionSetSquadReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionSetSquadReq : public ::google::protobuf::Message {
 public:
  TExpeditionSetSquadReq();
  virtual ~TExpeditionSetSquadReq();

  TExpeditionSetSquadReq(const TExpeditionSetSquadReq& from);

  inline TExpeditionSetSquadReq& operator=(const TExpeditionSetSquadReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionSetSquadReq& default_instance();

  void Swap(TExpeditionSetSquadReq* other);

  // implements Message ----------------------------------------------

  TExpeditionSetSquadReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionSetSquadReq& from);
  void MergeFrom(const TExpeditionSetSquadReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 Squad = 1;
  inline int squad_size() const;
  inline void clear_squad();
  static const int kSquadFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionSetSquadReq</name>
  	<Function>
  		<name>squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>squad_size</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 squad(int index) const;
  inline void set_squad(int index, ::google::protobuf::uint32 value);
  inline void add_squad(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      squad() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_squad();

  // @@protoc_insertion_point(class_scope:pb.TExpeditionSetSquadReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > squad_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionSetSquadReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionUseRebornBuildReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionUseRebornBuildReq : public ::google::protobuf::Message {
 public:
  TExpeditionUseRebornBuildReq();
  virtual ~TExpeditionUseRebornBuildReq();

  TExpeditionUseRebornBuildReq(const TExpeditionUseRebornBuildReq& from);

  inline TExpeditionUseRebornBuildReq& operator=(const TExpeditionUseRebornBuildReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionUseRebornBuildReq& default_instance();

  void Swap(TExpeditionUseRebornBuildReq* other);

  // implements Message ----------------------------------------------

  TExpeditionUseRebornBuildReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionUseRebornBuildReq& from);
  void MergeFrom(const TExpeditionUseRebornBuildReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionUseRebornBuildReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>ID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 Hid = 2;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionUseRebornBuildReq</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TExpeditionUseRebornBuildReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_hid();
  inline void clear_has_hid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 hid_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionUseRebornBuildReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionUseRebornBuildRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionUseRebornBuildRsp : public ::google::protobuf::Message {
 public:
  TExpeditionUseRebornBuildRsp();
  virtual ~TExpeditionUseRebornBuildRsp();

  TExpeditionUseRebornBuildRsp(const TExpeditionUseRebornBuildRsp& from);

  inline TExpeditionUseRebornBuildRsp& operator=(const TExpeditionUseRebornBuildRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionUseRebornBuildRsp& default_instance();

  void Swap(TExpeditionUseRebornBuildRsp* other);

  // implements Message ----------------------------------------------

  TExpeditionUseRebornBuildRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionUseRebornBuildRsp& from);
  void MergeFrom(const TExpeditionUseRebornBuildRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TExpeditionHeroStatus HeroInfo = 1;
  inline bool has_heroinfo() const;
  inline void clear_heroinfo();
  static const int kHeroInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionUseRebornBuildRsp</name>
  	<Function>
  		<name>heroinfo</name>
  		<replaceName>HeroInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_heroinfo</name>
  		<replaceName>HeroInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_heroinfo</name>
  		<replaceName>HeroInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_heroinfo</name>
  		<replaceName>HeroInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TExpeditionHeroStatus& heroinfo() const;
  inline ::pb::TExpeditionHeroStatus* mutable_heroinfo();
  inline ::pb::TExpeditionHeroStatus* release_heroinfo();
  inline void set_allocated_heroinfo(::pb::TExpeditionHeroStatus* heroinfo);

  // @@protoc_insertion_point(class_scope:pb.TExpeditionUseRebornBuildRsp)
 private:
  inline void set_has_heroinfo();
  inline void clear_has_heroinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TExpeditionHeroStatus* heroinfo_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionUseRebornBuildRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionQuickPassReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionQuickPassReq : public ::google::protobuf::Message {
 public:
  TExpeditionQuickPassReq();
  virtual ~TExpeditionQuickPassReq();

  TExpeditionQuickPassReq(const TExpeditionQuickPassReq& from);

  inline TExpeditionQuickPassReq& operator=(const TExpeditionQuickPassReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionQuickPassReq& default_instance();

  void Swap(TExpeditionQuickPassReq* other);

  // implements Message ----------------------------------------------

  TExpeditionQuickPassReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionQuickPassReq& from);
  void MergeFrom(const TExpeditionQuickPassReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsChoosePass = 1;
  inline bool has_ischoosepass() const;
  inline void clear_ischoosepass();
  static const int kIsChoosePassFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionQuickPassReq</name>
  	<Function>
  		<name>ischoosepass</name>
  		<replaceName>IsChoosePass</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ischoosepass</name>
  		<replaceName>IsChoosePass</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ischoosepass</name>
  		<replaceName>IsChoosePass</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool ischoosepass() const;
  inline void set_ischoosepass(bool value);

  // @@protoc_insertion_point(class_scope:pb.TExpeditionQuickPassReq)
 private:
  inline void set_has_ischoosepass();
  inline void clear_has_ischoosepass();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool ischoosepass_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionQuickPassReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExpeditionQuickPassRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Expedition.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExpeditionQuickPassRsp : public ::google::protobuf::Message {
 public:
  TExpeditionQuickPassRsp();
  virtual ~TExpeditionQuickPassRsp();

  TExpeditionQuickPassRsp(const TExpeditionQuickPassRsp& from);

  inline TExpeditionQuickPassRsp& operator=(const TExpeditionQuickPassRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExpeditionQuickPassRsp& default_instance();

  void Swap(TExpeditionQuickPassRsp* other);

  // implements Message ----------------------------------------------

  TExpeditionQuickPassRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExpeditionQuickPassRsp& from);
  void MergeFrom(const TExpeditionQuickPassRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TExpeditionInfo Info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionQuickPassRsp</name>
  	<Function>
  		<name>info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_info</name>
  		<replaceName>Info</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TExpeditionInfo& info() const;
  inline ::pb::TExpeditionInfo* mutable_info();
  inline ::pb::TExpeditionInfo* release_info();
  inline void set_allocated_info(::pb::TExpeditionInfo* info);

  // repeated .pb.TCommonReward ShopRewardArr = 2;
  inline int shoprewardarr_size() const;
  inline void clear_shoprewardarr();
  static const int kShopRewardArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TExpeditionQuickPassRsp</name>
  	<Function>
  		<name>shoprewardarr</name>
  		<replaceName>ShopRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_shoprewardarr</name>
  		<replaceName>ShopRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_shoprewardarr</name>
  		<replaceName>ShopRewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_shoprewardarr</name>
  		<replaceName>ShopRewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>shoprewardarr_size</name>
  		<replaceName>ShopRewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& shoprewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_shoprewardarr(int index);
  inline ::pb::TCommonReward* add_shoprewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      shoprewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_shoprewardarr();

  // @@protoc_insertion_point(class_scope:pb.TExpeditionQuickPassRsp)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TExpeditionInfo* info_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > shoprewardarr_;
  friend void  protobuf_AddDesc_net_2fExpedition_2eproto();
  friend void protobuf_AssignDesc_net_2fExpedition_2eproto();
  friend void protobuf_ShutdownFile_net_2fExpedition_2eproto();

  void InitAsDefaultInstance();
  static TExpeditionQuickPassRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TExpeditionTeamInfo

// repeated uint32 Squad = 1;
inline int TExpeditionTeamInfo::squad_size() const {
  return squad_.size();
}
inline void TExpeditionTeamInfo::clear_squad() {
  squad_.Clear();
}
inline ::google::protobuf::uint32 TExpeditionTeamInfo::squad(int index) const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionTeamInfo.Squad)
  return squad_.Get(index);
}
inline void TExpeditionTeamInfo::set_squad(int index, ::google::protobuf::uint32 value) {
  squad_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TExpeditionTeamInfo.Squad)
}
inline void TExpeditionTeamInfo::add_squad(::google::protobuf::uint32 value) {
  squad_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TExpeditionTeamInfo.Squad)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TExpeditionTeamInfo::squad() const {
  // @@protoc_insertion_point(field_list:pb.TExpeditionTeamInfo.Squad)
  return squad_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TExpeditionTeamInfo::mutable_squad() {
  // @@protoc_insertion_point(field_mutable_list:pb.TExpeditionTeamInfo.Squad)
  return &squad_;
}

// repeated .pb.TExpeditionHeroStatus HeroStatus = 2;
inline int TExpeditionTeamInfo::herostatus_size() const {
  return herostatus_.size();
}
inline void TExpeditionTeamInfo::clear_herostatus() {
  herostatus_.Clear();
}
inline const ::pb::TExpeditionHeroStatus& TExpeditionTeamInfo::herostatus(int index) const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionTeamInfo.HeroStatus)
  return herostatus_.Get(index);
}
inline ::pb::TExpeditionHeroStatus* TExpeditionTeamInfo::mutable_herostatus(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TExpeditionTeamInfo.HeroStatus)
  return herostatus_.Mutable(index);
}
inline ::pb::TExpeditionHeroStatus* TExpeditionTeamInfo::add_herostatus() {
  // @@protoc_insertion_point(field_add:pb.TExpeditionTeamInfo.HeroStatus)
  return herostatus_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionHeroStatus >&
TExpeditionTeamInfo::herostatus() const {
  // @@protoc_insertion_point(field_list:pb.TExpeditionTeamInfo.HeroStatus)
  return herostatus_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionHeroStatus >*
TExpeditionTeamInfo::mutable_herostatus() {
  // @@protoc_insertion_point(field_mutable_list:pb.TExpeditionTeamInfo.HeroStatus)
  return &herostatus_;
}

// repeated .pb.TSkillAttribute AddSkill = 3;
inline int TExpeditionTeamInfo::addskill_size() const {
  return addskill_.size();
}
inline void TExpeditionTeamInfo::clear_addskill() {
  addskill_.Clear();
}
inline const ::pb::TSkillAttribute& TExpeditionTeamInfo::addskill(int index) const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionTeamInfo.AddSkill)
  return addskill_.Get(index);
}
inline ::pb::TSkillAttribute* TExpeditionTeamInfo::mutable_addskill(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TExpeditionTeamInfo.AddSkill)
  return addskill_.Mutable(index);
}
inline ::pb::TSkillAttribute* TExpeditionTeamInfo::add_addskill() {
  // @@protoc_insertion_point(field_add:pb.TExpeditionTeamInfo.AddSkill)
  return addskill_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute >&
TExpeditionTeamInfo::addskill() const {
  // @@protoc_insertion_point(field_list:pb.TExpeditionTeamInfo.AddSkill)
  return addskill_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute >*
TExpeditionTeamInfo::mutable_addskill() {
  // @@protoc_insertion_point(field_mutable_list:pb.TExpeditionTeamInfo.AddSkill)
  return &addskill_;
}

// -------------------------------------------------------------------

// TExpeditionHeroStatus

// optional uint32 Hid = 1;
inline bool TExpeditionHeroStatus::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionHeroStatus::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionHeroStatus::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionHeroStatus::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TExpeditionHeroStatus::hid() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionHeroStatus.Hid)
  return hid_;
}
inline void TExpeditionHeroStatus::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionHeroStatus.Hid)
}

// optional uint32 CurHpPercent = 2;
inline bool TExpeditionHeroStatus::has_curhppercent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TExpeditionHeroStatus::set_has_curhppercent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TExpeditionHeroStatus::clear_has_curhppercent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TExpeditionHeroStatus::clear_curhppercent() {
  curhppercent_ = 0u;
  clear_has_curhppercent();
}
inline ::google::protobuf::uint32 TExpeditionHeroStatus::curhppercent() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionHeroStatus.CurHpPercent)
  return curhppercent_;
}
inline void TExpeditionHeroStatus::set_curhppercent(::google::protobuf::uint32 value) {
  set_has_curhppercent();
  curhppercent_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionHeroStatus.CurHpPercent)
}

// optional uint32 CurRage = 3;
inline bool TExpeditionHeroStatus::has_currage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TExpeditionHeroStatus::set_has_currage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TExpeditionHeroStatus::clear_has_currage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TExpeditionHeroStatus::clear_currage() {
  currage_ = 0u;
  clear_has_currage();
}
inline ::google::protobuf::uint32 TExpeditionHeroStatus::currage() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionHeroStatus.CurRage)
  return currage_;
}
inline void TExpeditionHeroStatus::set_currage(::google::protobuf::uint32 value) {
  set_has_currage();
  currage_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionHeroStatus.CurRage)
}

// repeated .pb.TAttribute BuffAttrArr = 4;
inline int TExpeditionHeroStatus::buffattrarr_size() const {
  return buffattrarr_.size();
}
inline void TExpeditionHeroStatus::clear_buffattrarr() {
  buffattrarr_.Clear();
}
inline const ::pb::TAttribute& TExpeditionHeroStatus::buffattrarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionHeroStatus.BuffAttrArr)
  return buffattrarr_.Get(index);
}
inline ::pb::TAttribute* TExpeditionHeroStatus::mutable_buffattrarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TExpeditionHeroStatus.BuffAttrArr)
  return buffattrarr_.Mutable(index);
}
inline ::pb::TAttribute* TExpeditionHeroStatus::add_buffattrarr() {
  // @@protoc_insertion_point(field_add:pb.TExpeditionHeroStatus.BuffAttrArr)
  return buffattrarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAttribute >&
TExpeditionHeroStatus::buffattrarr() const {
  // @@protoc_insertion_point(field_list:pb.TExpeditionHeroStatus.BuffAttrArr)
  return buffattrarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAttribute >*
TExpeditionHeroStatus::mutable_buffattrarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TExpeditionHeroStatus.BuffAttrArr)
  return &buffattrarr_;
}

// -------------------------------------------------------------------

// TExpeditionStrongholdInfo

// optional uint32 ID = 1;
inline bool TExpeditionStrongholdInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionStrongholdInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionStrongholdInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionStrongholdInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TExpeditionStrongholdInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionStrongholdInfo.ID)
  return id_;
}
inline void TExpeditionStrongholdInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionStrongholdInfo.ID)
}

// optional .pb.TMirrorInfo Mirror = 2;
inline bool TExpeditionStrongholdInfo::has_mirror() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TExpeditionStrongholdInfo::set_has_mirror() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TExpeditionStrongholdInfo::clear_has_mirror() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TExpeditionStrongholdInfo::clear_mirror() {
  if (mirror_ != NULL) mirror_->::pb::TMirrorInfo::Clear();
  clear_has_mirror();
}
inline const ::pb::TMirrorInfo& TExpeditionStrongholdInfo::mirror() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionStrongholdInfo.Mirror)
  return mirror_ != NULL ? *mirror_ : *default_instance_->mirror_;
}
inline ::pb::TMirrorInfo* TExpeditionStrongholdInfo::mutable_mirror() {
  set_has_mirror();
  if (mirror_ == NULL) mirror_ = new ::pb::TMirrorInfo;
  // @@protoc_insertion_point(field_mutable:pb.TExpeditionStrongholdInfo.Mirror)
  return mirror_;
}
inline ::pb::TMirrorInfo* TExpeditionStrongholdInfo::release_mirror() {
  clear_has_mirror();
  ::pb::TMirrorInfo* temp = mirror_;
  mirror_ = NULL;
  return temp;
}
inline void TExpeditionStrongholdInfo::set_allocated_mirror(::pb::TMirrorInfo* mirror) {
  delete mirror_;
  mirror_ = mirror;
  if (mirror) {
    set_has_mirror();
  } else {
    clear_has_mirror();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TExpeditionStrongholdInfo.Mirror)
}

// -------------------------------------------------------------------

// TExpeditionRewardInfo

// optional uint32 ID = 1;
inline bool TExpeditionRewardInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionRewardInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionRewardInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionRewardInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TExpeditionRewardInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionRewardInfo.ID)
  return id_;
}
inline void TExpeditionRewardInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionRewardInfo.ID)
}

// optional uint32 Received = 2;
inline bool TExpeditionRewardInfo::has_received() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TExpeditionRewardInfo::set_has_received() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TExpeditionRewardInfo::clear_has_received() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TExpeditionRewardInfo::clear_received() {
  received_ = 0u;
  clear_has_received();
}
inline ::google::protobuf::uint32 TExpeditionRewardInfo::received() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionRewardInfo.Received)
  return received_;
}
inline void TExpeditionRewardInfo::set_received(::google::protobuf::uint32 value) {
  set_has_received();
  received_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionRewardInfo.Received)
}

// repeated .pb.TCommonReward RewardArr = 3;
inline int TExpeditionRewardInfo::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TExpeditionRewardInfo::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TExpeditionRewardInfo::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionRewardInfo.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TExpeditionRewardInfo::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TExpeditionRewardInfo.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TExpeditionRewardInfo::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TExpeditionRewardInfo.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TExpeditionRewardInfo::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TExpeditionRewardInfo.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TExpeditionRewardInfo::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TExpeditionRewardInfo.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TExpeditionBuffInfo

// optional uint32 ID = 1;
inline bool TExpeditionBuffInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionBuffInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionBuffInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionBuffInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TExpeditionBuffInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionBuffInfo.ID)
  return id_;
}
inline void TExpeditionBuffInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionBuffInfo.ID)
}

// repeated uint32 BuffArr = 2;
inline int TExpeditionBuffInfo::buffarr_size() const {
  return buffarr_.size();
}
inline void TExpeditionBuffInfo::clear_buffarr() {
  buffarr_.Clear();
}
inline ::google::protobuf::uint32 TExpeditionBuffInfo::buffarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionBuffInfo.BuffArr)
  return buffarr_.Get(index);
}
inline void TExpeditionBuffInfo::set_buffarr(int index, ::google::protobuf::uint32 value) {
  buffarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TExpeditionBuffInfo.BuffArr)
}
inline void TExpeditionBuffInfo::add_buffarr(::google::protobuf::uint32 value) {
  buffarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TExpeditionBuffInfo.BuffArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TExpeditionBuffInfo::buffarr() const {
  // @@protoc_insertion_point(field_list:pb.TExpeditionBuffInfo.BuffArr)
  return buffarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TExpeditionBuffInfo::mutable_buffarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TExpeditionBuffInfo.BuffArr)
  return &buffarr_;
}

// optional uint32 SelectedIndex = 3;
inline bool TExpeditionBuffInfo::has_selectedindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TExpeditionBuffInfo::set_has_selectedindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TExpeditionBuffInfo::clear_has_selectedindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TExpeditionBuffInfo::clear_selectedindex() {
  selectedindex_ = 0u;
  clear_has_selectedindex();
}
inline ::google::protobuf::uint32 TExpeditionBuffInfo::selectedindex() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionBuffInfo.SelectedIndex)
  return selectedindex_;
}
inline void TExpeditionBuffInfo::set_selectedindex(::google::protobuf::uint32 value) {
  set_has_selectedindex();
  selectedindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionBuffInfo.SelectedIndex)
}

// -------------------------------------------------------------------

// TExpeditionShopInfo

// optional uint32 ID = 1;
inline bool TExpeditionShopInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionShopInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionShopInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionShopInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TExpeditionShopInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionShopInfo.ID)
  return id_;
}
inline void TExpeditionShopInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionShopInfo.ID)
}

// optional uint32 Num = 2;
inline bool TExpeditionShopInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TExpeditionShopInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TExpeditionShopInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TExpeditionShopInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TExpeditionShopInfo::num() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionShopInfo.Num)
  return num_;
}
inline void TExpeditionShopInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionShopInfo.Num)
}

// -------------------------------------------------------------------

// TExpeditionRebornBuildInfo

// optional uint32 ID = 1;
inline bool TExpeditionRebornBuildInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionRebornBuildInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionRebornBuildInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionRebornBuildInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TExpeditionRebornBuildInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionRebornBuildInfo.ID)
  return id_;
}
inline void TExpeditionRebornBuildInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionRebornBuildInfo.ID)
}

// optional uint32 Hid = 2;
inline bool TExpeditionRebornBuildInfo::has_hid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TExpeditionRebornBuildInfo::set_has_hid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TExpeditionRebornBuildInfo::clear_has_hid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TExpeditionRebornBuildInfo::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TExpeditionRebornBuildInfo::hid() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionRebornBuildInfo.Hid)
  return hid_;
}
inline void TExpeditionRebornBuildInfo::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionRebornBuildInfo.Hid)
}

// -------------------------------------------------------------------

// TExpeditionInfo

// optional .pb.TExpeditionTeamInfo MyTeam = 1;
inline bool TExpeditionInfo::has_myteam() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionInfo::set_has_myteam() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionInfo::clear_has_myteam() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionInfo::clear_myteam() {
  if (myteam_ != NULL) myteam_->::pb::TExpeditionTeamInfo::Clear();
  clear_has_myteam();
}
inline const ::pb::TExpeditionTeamInfo& TExpeditionInfo::myteam() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionInfo.MyTeam)
  return myteam_ != NULL ? *myteam_ : *default_instance_->myteam_;
}
inline ::pb::TExpeditionTeamInfo* TExpeditionInfo::mutable_myteam() {
  set_has_myteam();
  if (myteam_ == NULL) myteam_ = new ::pb::TExpeditionTeamInfo;
  // @@protoc_insertion_point(field_mutable:pb.TExpeditionInfo.MyTeam)
  return myteam_;
}
inline ::pb::TExpeditionTeamInfo* TExpeditionInfo::release_myteam() {
  clear_has_myteam();
  ::pb::TExpeditionTeamInfo* temp = myteam_;
  myteam_ = NULL;
  return temp;
}
inline void TExpeditionInfo::set_allocated_myteam(::pb::TExpeditionTeamInfo* myteam) {
  delete myteam_;
  myteam_ = myteam;
  if (myteam) {
    set_has_myteam();
  } else {
    clear_has_myteam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TExpeditionInfo.MyTeam)
}

// repeated .pb.TExpeditionStrongholdInfo StrongholdArr = 2;
inline int TExpeditionInfo::strongholdarr_size() const {
  return strongholdarr_.size();
}
inline void TExpeditionInfo::clear_strongholdarr() {
  strongholdarr_.Clear();
}
inline const ::pb::TExpeditionStrongholdInfo& TExpeditionInfo::strongholdarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionInfo.StrongholdArr)
  return strongholdarr_.Get(index);
}
inline ::pb::TExpeditionStrongholdInfo* TExpeditionInfo::mutable_strongholdarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TExpeditionInfo.StrongholdArr)
  return strongholdarr_.Mutable(index);
}
inline ::pb::TExpeditionStrongholdInfo* TExpeditionInfo::add_strongholdarr() {
  // @@protoc_insertion_point(field_add:pb.TExpeditionInfo.StrongholdArr)
  return strongholdarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionStrongholdInfo >&
TExpeditionInfo::strongholdarr() const {
  // @@protoc_insertion_point(field_list:pb.TExpeditionInfo.StrongholdArr)
  return strongholdarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionStrongholdInfo >*
TExpeditionInfo::mutable_strongholdarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TExpeditionInfo.StrongholdArr)
  return &strongholdarr_;
}

// repeated .pb.TExpeditionRewardInfo RewardArr = 3;
inline int TExpeditionInfo::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TExpeditionInfo::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TExpeditionRewardInfo& TExpeditionInfo::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionInfo.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TExpeditionRewardInfo* TExpeditionInfo::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TExpeditionInfo.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TExpeditionRewardInfo* TExpeditionInfo::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TExpeditionInfo.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionRewardInfo >&
TExpeditionInfo::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TExpeditionInfo.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionRewardInfo >*
TExpeditionInfo::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TExpeditionInfo.RewardArr)
  return &rewardarr_;
}

// repeated .pb.TExpeditionBuffInfo BuffArr = 4;
inline int TExpeditionInfo::buffarr_size() const {
  return buffarr_.size();
}
inline void TExpeditionInfo::clear_buffarr() {
  buffarr_.Clear();
}
inline const ::pb::TExpeditionBuffInfo& TExpeditionInfo::buffarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionInfo.BuffArr)
  return buffarr_.Get(index);
}
inline ::pb::TExpeditionBuffInfo* TExpeditionInfo::mutable_buffarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TExpeditionInfo.BuffArr)
  return buffarr_.Mutable(index);
}
inline ::pb::TExpeditionBuffInfo* TExpeditionInfo::add_buffarr() {
  // @@protoc_insertion_point(field_add:pb.TExpeditionInfo.BuffArr)
  return buffarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionBuffInfo >&
TExpeditionInfo::buffarr() const {
  // @@protoc_insertion_point(field_list:pb.TExpeditionInfo.BuffArr)
  return buffarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionBuffInfo >*
TExpeditionInfo::mutable_buffarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TExpeditionInfo.BuffArr)
  return &buffarr_;
}

// repeated .pb.TExpeditionShopInfo BuyArr = 5;
inline int TExpeditionInfo::buyarr_size() const {
  return buyarr_.size();
}
inline void TExpeditionInfo::clear_buyarr() {
  buyarr_.Clear();
}
inline const ::pb::TExpeditionShopInfo& TExpeditionInfo::buyarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionInfo.BuyArr)
  return buyarr_.Get(index);
}
inline ::pb::TExpeditionShopInfo* TExpeditionInfo::mutable_buyarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TExpeditionInfo.BuyArr)
  return buyarr_.Mutable(index);
}
inline ::pb::TExpeditionShopInfo* TExpeditionInfo::add_buyarr() {
  // @@protoc_insertion_point(field_add:pb.TExpeditionInfo.BuyArr)
  return buyarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionShopInfo >&
TExpeditionInfo::buyarr() const {
  // @@protoc_insertion_point(field_list:pb.TExpeditionInfo.BuyArr)
  return buyarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionShopInfo >*
TExpeditionInfo::mutable_buyarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TExpeditionInfo.BuyArr)
  return &buyarr_;
}

// optional uint64 ResetTime = 6;
inline bool TExpeditionInfo::has_resettime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TExpeditionInfo::set_has_resettime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TExpeditionInfo::clear_has_resettime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TExpeditionInfo::clear_resettime() {
  resettime_ = GOOGLE_ULONGLONG(0);
  clear_has_resettime();
}
inline ::google::protobuf::uint64 TExpeditionInfo::resettime() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionInfo.ResetTime)
  return resettime_;
}
inline void TExpeditionInfo::set_resettime(::google::protobuf::uint64 value) {
  set_has_resettime();
  resettime_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionInfo.ResetTime)
}

// optional uint32 BuyRebornNum = 7;
inline bool TExpeditionInfo::has_buyrebornnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TExpeditionInfo::set_has_buyrebornnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TExpeditionInfo::clear_has_buyrebornnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TExpeditionInfo::clear_buyrebornnum() {
  buyrebornnum_ = 0u;
  clear_has_buyrebornnum();
}
inline ::google::protobuf::uint32 TExpeditionInfo::buyrebornnum() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionInfo.BuyRebornNum)
  return buyrebornnum_;
}
inline void TExpeditionInfo::set_buyrebornnum(::google::protobuf::uint32 value) {
  set_has_buyrebornnum();
  buyrebornnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionInfo.BuyRebornNum)
}

// repeated .pb.TExpeditionRebornBuildInfo RebornBuildArr = 8;
inline int TExpeditionInfo::rebornbuildarr_size() const {
  return rebornbuildarr_.size();
}
inline void TExpeditionInfo::clear_rebornbuildarr() {
  rebornbuildarr_.Clear();
}
inline const ::pb::TExpeditionRebornBuildInfo& TExpeditionInfo::rebornbuildarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionInfo.RebornBuildArr)
  return rebornbuildarr_.Get(index);
}
inline ::pb::TExpeditionRebornBuildInfo* TExpeditionInfo::mutable_rebornbuildarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TExpeditionInfo.RebornBuildArr)
  return rebornbuildarr_.Mutable(index);
}
inline ::pb::TExpeditionRebornBuildInfo* TExpeditionInfo::add_rebornbuildarr() {
  // @@protoc_insertion_point(field_add:pb.TExpeditionInfo.RebornBuildArr)
  return rebornbuildarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionRebornBuildInfo >&
TExpeditionInfo::rebornbuildarr() const {
  // @@protoc_insertion_point(field_list:pb.TExpeditionInfo.RebornBuildArr)
  return rebornbuildarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TExpeditionRebornBuildInfo >*
TExpeditionInfo::mutable_rebornbuildarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TExpeditionInfo.RebornBuildArr)
  return &rebornbuildarr_;
}

// optional .pb.TExpeditionBuffInfo TreasureBuff = 9;
inline bool TExpeditionInfo::has_treasurebuff() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TExpeditionInfo::set_has_treasurebuff() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TExpeditionInfo::clear_has_treasurebuff() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TExpeditionInfo::clear_treasurebuff() {
  if (treasurebuff_ != NULL) treasurebuff_->::pb::TExpeditionBuffInfo::Clear();
  clear_has_treasurebuff();
}
inline const ::pb::TExpeditionBuffInfo& TExpeditionInfo::treasurebuff() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionInfo.TreasureBuff)
  return treasurebuff_ != NULL ? *treasurebuff_ : *default_instance_->treasurebuff_;
}
inline ::pb::TExpeditionBuffInfo* TExpeditionInfo::mutable_treasurebuff() {
  set_has_treasurebuff();
  if (treasurebuff_ == NULL) treasurebuff_ = new ::pb::TExpeditionBuffInfo;
  // @@protoc_insertion_point(field_mutable:pb.TExpeditionInfo.TreasureBuff)
  return treasurebuff_;
}
inline ::pb::TExpeditionBuffInfo* TExpeditionInfo::release_treasurebuff() {
  clear_has_treasurebuff();
  ::pb::TExpeditionBuffInfo* temp = treasurebuff_;
  treasurebuff_ = NULL;
  return temp;
}
inline void TExpeditionInfo::set_allocated_treasurebuff(::pb::TExpeditionBuffInfo* treasurebuff) {
  delete treasurebuff_;
  treasurebuff_ = treasurebuff;
  if (treasurebuff) {
    set_has_treasurebuff();
  } else {
    clear_has_treasurebuff();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TExpeditionInfo.TreasureBuff)
}

// optional bool IsQuickPassChoose = 10;
inline bool TExpeditionInfo::has_isquickpasschoose() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TExpeditionInfo::set_has_isquickpasschoose() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TExpeditionInfo::clear_has_isquickpasschoose() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TExpeditionInfo::clear_isquickpasschoose() {
  isquickpasschoose_ = false;
  clear_has_isquickpasschoose();
}
inline bool TExpeditionInfo::isquickpasschoose() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionInfo.IsQuickPassChoose)
  return isquickpasschoose_;
}
inline void TExpeditionInfo::set_isquickpasschoose(bool value) {
  set_has_isquickpasschoose();
  isquickpasschoose_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionInfo.IsQuickPassChoose)
}

// optional uint32 LastPassMainNum = 11;
inline bool TExpeditionInfo::has_lastpassmainnum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TExpeditionInfo::set_has_lastpassmainnum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TExpeditionInfo::clear_has_lastpassmainnum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TExpeditionInfo::clear_lastpassmainnum() {
  lastpassmainnum_ = 0u;
  clear_has_lastpassmainnum();
}
inline ::google::protobuf::uint32 TExpeditionInfo::lastpassmainnum() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionInfo.LastPassMainNum)
  return lastpassmainnum_;
}
inline void TExpeditionInfo::set_lastpassmainnum(::google::protobuf::uint32 value) {
  set_has_lastpassmainnum();
  lastpassmainnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionInfo.LastPassMainNum)
}

// -------------------------------------------------------------------

// TExpeditionGetInfoRsp

// optional .pb.TExpeditionInfo Info = 1;
inline bool TExpeditionGetInfoRsp::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionGetInfoRsp::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionGetInfoRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionGetInfoRsp::clear_info() {
  if (info_ != NULL) info_->::pb::TExpeditionInfo::Clear();
  clear_has_info();
}
inline const ::pb::TExpeditionInfo& TExpeditionGetInfoRsp::info() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionGetInfoRsp.Info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::pb::TExpeditionInfo* TExpeditionGetInfoRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::pb::TExpeditionInfo;
  // @@protoc_insertion_point(field_mutable:pb.TExpeditionGetInfoRsp.Info)
  return info_;
}
inline ::pb::TExpeditionInfo* TExpeditionGetInfoRsp::release_info() {
  clear_has_info();
  ::pb::TExpeditionInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void TExpeditionGetInfoRsp::set_allocated_info(::pb::TExpeditionInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TExpeditionGetInfoRsp.Info)
}

// -------------------------------------------------------------------

// TExpeditionGetInfoNotify

// optional .pb.TExpeditionInfo Info = 1;
inline bool TExpeditionGetInfoNotify::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionGetInfoNotify::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionGetInfoNotify::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionGetInfoNotify::clear_info() {
  if (info_ != NULL) info_->::pb::TExpeditionInfo::Clear();
  clear_has_info();
}
inline const ::pb::TExpeditionInfo& TExpeditionGetInfoNotify::info() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionGetInfoNotify.Info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::pb::TExpeditionInfo* TExpeditionGetInfoNotify::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::pb::TExpeditionInfo;
  // @@protoc_insertion_point(field_mutable:pb.TExpeditionGetInfoNotify.Info)
  return info_;
}
inline ::pb::TExpeditionInfo* TExpeditionGetInfoNotify::release_info() {
  clear_has_info();
  ::pb::TExpeditionInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void TExpeditionGetInfoNotify::set_allocated_info(::pb::TExpeditionInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TExpeditionGetInfoNotify.Info)
}

// optional .pb.TExpeditionRewardInfo RewardInfo = 2;
inline bool TExpeditionGetInfoNotify::has_rewardinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TExpeditionGetInfoNotify::set_has_rewardinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TExpeditionGetInfoNotify::clear_has_rewardinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TExpeditionGetInfoNotify::clear_rewardinfo() {
  if (rewardinfo_ != NULL) rewardinfo_->::pb::TExpeditionRewardInfo::Clear();
  clear_has_rewardinfo();
}
inline const ::pb::TExpeditionRewardInfo& TExpeditionGetInfoNotify::rewardinfo() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionGetInfoNotify.RewardInfo)
  return rewardinfo_ != NULL ? *rewardinfo_ : *default_instance_->rewardinfo_;
}
inline ::pb::TExpeditionRewardInfo* TExpeditionGetInfoNotify::mutable_rewardinfo() {
  set_has_rewardinfo();
  if (rewardinfo_ == NULL) rewardinfo_ = new ::pb::TExpeditionRewardInfo;
  // @@protoc_insertion_point(field_mutable:pb.TExpeditionGetInfoNotify.RewardInfo)
  return rewardinfo_;
}
inline ::pb::TExpeditionRewardInfo* TExpeditionGetInfoNotify::release_rewardinfo() {
  clear_has_rewardinfo();
  ::pb::TExpeditionRewardInfo* temp = rewardinfo_;
  rewardinfo_ = NULL;
  return temp;
}
inline void TExpeditionGetInfoNotify::set_allocated_rewardinfo(::pb::TExpeditionRewardInfo* rewardinfo) {
  delete rewardinfo_;
  rewardinfo_ = rewardinfo;
  if (rewardinfo) {
    set_has_rewardinfo();
  } else {
    clear_has_rewardinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TExpeditionGetInfoNotify.RewardInfo)
}

// -------------------------------------------------------------------

// TExpeditionDoBattleReq

// optional uint32 ID = 1;
inline bool TExpeditionDoBattleReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionDoBattleReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionDoBattleReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionDoBattleReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TExpeditionDoBattleReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionDoBattleReq.ID)
  return id_;
}
inline void TExpeditionDoBattleReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionDoBattleReq.ID)
}

// optional .pb.TBattleCheckParam BattleCheckParam = 2;
inline bool TExpeditionDoBattleReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TExpeditionDoBattleReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TExpeditionDoBattleReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TExpeditionDoBattleReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TExpeditionDoBattleReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionDoBattleReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TExpeditionDoBattleReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TExpeditionDoBattleReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TExpeditionDoBattleReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TExpeditionDoBattleReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TExpeditionDoBattleReq.BattleCheckParam)
}

// repeated uint32 HidArr = 3;
inline int TExpeditionDoBattleReq::hidarr_size() const {
  return hidarr_.size();
}
inline void TExpeditionDoBattleReq::clear_hidarr() {
  hidarr_.Clear();
}
inline ::google::protobuf::uint32 TExpeditionDoBattleReq::hidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionDoBattleReq.HidArr)
  return hidarr_.Get(index);
}
inline void TExpeditionDoBattleReq::set_hidarr(int index, ::google::protobuf::uint32 value) {
  hidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TExpeditionDoBattleReq.HidArr)
}
inline void TExpeditionDoBattleReq::add_hidarr(::google::protobuf::uint32 value) {
  hidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TExpeditionDoBattleReq.HidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TExpeditionDoBattleReq::hidarr() const {
  // @@protoc_insertion_point(field_list:pb.TExpeditionDoBattleReq.HidArr)
  return hidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TExpeditionDoBattleReq::mutable_hidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TExpeditionDoBattleReq.HidArr)
  return &hidarr_;
}

// repeated uint32 Squad = 4;
inline int TExpeditionDoBattleReq::squad_size() const {
  return squad_.size();
}
inline void TExpeditionDoBattleReq::clear_squad() {
  squad_.Clear();
}
inline ::google::protobuf::uint32 TExpeditionDoBattleReq::squad(int index) const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionDoBattleReq.Squad)
  return squad_.Get(index);
}
inline void TExpeditionDoBattleReq::set_squad(int index, ::google::protobuf::uint32 value) {
  squad_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TExpeditionDoBattleReq.Squad)
}
inline void TExpeditionDoBattleReq::add_squad(::google::protobuf::uint32 value) {
  squad_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TExpeditionDoBattleReq.Squad)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TExpeditionDoBattleReq::squad() const {
  // @@protoc_insertion_point(field_list:pb.TExpeditionDoBattleReq.Squad)
  return squad_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TExpeditionDoBattleReq::mutable_squad() {
  // @@protoc_insertion_point(field_mutable_list:pb.TExpeditionDoBattleReq.Squad)
  return &squad_;
}

// -------------------------------------------------------------------

// TExpeditionDoBattleRsp

// optional .pb.TBattleArgs BattleArgs = 1;
inline bool TExpeditionDoBattleRsp::has_battleargs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionDoBattleRsp::set_has_battleargs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionDoBattleRsp::clear_has_battleargs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionDoBattleRsp::clear_battleargs() {
  if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  clear_has_battleargs();
}
inline const ::pb::TBattleArgs& TExpeditionDoBattleRsp::battleargs() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionDoBattleRsp.BattleArgs)
  return battleargs_ != NULL ? *battleargs_ : *default_instance_->battleargs_;
}
inline ::pb::TBattleArgs* TExpeditionDoBattleRsp::mutable_battleargs() {
  set_has_battleargs();
  if (battleargs_ == NULL) battleargs_ = new ::pb::TBattleArgs;
  // @@protoc_insertion_point(field_mutable:pb.TExpeditionDoBattleRsp.BattleArgs)
  return battleargs_;
}
inline ::pb::TBattleArgs* TExpeditionDoBattleRsp::release_battleargs() {
  clear_has_battleargs();
  ::pb::TBattleArgs* temp = battleargs_;
  battleargs_ = NULL;
  return temp;
}
inline void TExpeditionDoBattleRsp::set_allocated_battleargs(::pb::TBattleArgs* battleargs) {
  delete battleargs_;
  battleargs_ = battleargs;
  if (battleargs) {
    set_has_battleargs();
  } else {
    clear_has_battleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TExpeditionDoBattleRsp.BattleArgs)
}

// -------------------------------------------------------------------

// TExpeditionDoBattleReportReq

// optional uint32 ID = 1;
inline bool TExpeditionDoBattleReportReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionDoBattleReportReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionDoBattleReportReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionDoBattleReportReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TExpeditionDoBattleReportReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionDoBattleReportReq.ID)
  return id_;
}
inline void TExpeditionDoBattleReportReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionDoBattleReportReq.ID)
}

// optional .pb.TBattleResult BattleResult = 2;
inline bool TExpeditionDoBattleReportReq::has_battleresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TExpeditionDoBattleReportReq::set_has_battleresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TExpeditionDoBattleReportReq::clear_has_battleresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TExpeditionDoBattleReportReq::clear_battleresult() {
  if (battleresult_ != NULL) battleresult_->::pb::TBattleResult::Clear();
  clear_has_battleresult();
}
inline const ::pb::TBattleResult& TExpeditionDoBattleReportReq::battleresult() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionDoBattleReportReq.BattleResult)
  return battleresult_ != NULL ? *battleresult_ : *default_instance_->battleresult_;
}
inline ::pb::TBattleResult* TExpeditionDoBattleReportReq::mutable_battleresult() {
  set_has_battleresult();
  if (battleresult_ == NULL) battleresult_ = new ::pb::TBattleResult;
  // @@protoc_insertion_point(field_mutable:pb.TExpeditionDoBattleReportReq.BattleResult)
  return battleresult_;
}
inline ::pb::TBattleResult* TExpeditionDoBattleReportReq::release_battleresult() {
  clear_has_battleresult();
  ::pb::TBattleResult* temp = battleresult_;
  battleresult_ = NULL;
  return temp;
}
inline void TExpeditionDoBattleReportReq::set_allocated_battleresult(::pb::TBattleResult* battleresult) {
  delete battleresult_;
  battleresult_ = battleresult;
  if (battleresult) {
    set_has_battleresult();
  } else {
    clear_has_battleresult();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TExpeditionDoBattleReportReq.BattleResult)
}

// optional uint32 IsWinDirect = 3;
inline bool TExpeditionDoBattleReportReq::has_iswindirect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TExpeditionDoBattleReportReq::set_has_iswindirect() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TExpeditionDoBattleReportReq::clear_has_iswindirect() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TExpeditionDoBattleReportReq::clear_iswindirect() {
  iswindirect_ = 0u;
  clear_has_iswindirect();
}
inline ::google::protobuf::uint32 TExpeditionDoBattleReportReq::iswindirect() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionDoBattleReportReq.IsWinDirect)
  return iswindirect_;
}
inline void TExpeditionDoBattleReportReq::set_iswindirect(::google::protobuf::uint32 value) {
  set_has_iswindirect();
  iswindirect_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionDoBattleReportReq.IsWinDirect)
}

// -------------------------------------------------------------------

// TExpeditionGetRewardReq

// optional uint32 ID = 1;
inline bool TExpeditionGetRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionGetRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionGetRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionGetRewardReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TExpeditionGetRewardReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionGetRewardReq.ID)
  return id_;
}
inline void TExpeditionGetRewardReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionGetRewardReq.ID)
}

// -------------------------------------------------------------------

// TExpeditionGetRewardRsp

// optional .pb.TExpeditionRewardInfo Reward = 1;
inline bool TExpeditionGetRewardRsp::has_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionGetRewardRsp::set_has_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionGetRewardRsp::clear_has_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionGetRewardRsp::clear_reward() {
  if (reward_ != NULL) reward_->::pb::TExpeditionRewardInfo::Clear();
  clear_has_reward();
}
inline const ::pb::TExpeditionRewardInfo& TExpeditionGetRewardRsp::reward() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionGetRewardRsp.Reward)
  return reward_ != NULL ? *reward_ : *default_instance_->reward_;
}
inline ::pb::TExpeditionRewardInfo* TExpeditionGetRewardRsp::mutable_reward() {
  set_has_reward();
  if (reward_ == NULL) reward_ = new ::pb::TExpeditionRewardInfo;
  // @@protoc_insertion_point(field_mutable:pb.TExpeditionGetRewardRsp.Reward)
  return reward_;
}
inline ::pb::TExpeditionRewardInfo* TExpeditionGetRewardRsp::release_reward() {
  clear_has_reward();
  ::pb::TExpeditionRewardInfo* temp = reward_;
  reward_ = NULL;
  return temp;
}
inline void TExpeditionGetRewardRsp::set_allocated_reward(::pb::TExpeditionRewardInfo* reward) {
  delete reward_;
  reward_ = reward;
  if (reward) {
    set_has_reward();
  } else {
    clear_has_reward();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TExpeditionGetRewardRsp.Reward)
}

// -------------------------------------------------------------------

// TExpeditionGetBuffReq

// optional uint32 ID = 1;
inline bool TExpeditionGetBuffReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionGetBuffReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionGetBuffReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionGetBuffReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TExpeditionGetBuffReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionGetBuffReq.ID)
  return id_;
}
inline void TExpeditionGetBuffReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionGetBuffReq.ID)
}

// -------------------------------------------------------------------

// TExpeditionGetBuffRsp

// optional uint32 ID = 1;
inline bool TExpeditionGetBuffRsp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionGetBuffRsp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionGetBuffRsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionGetBuffRsp::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TExpeditionGetBuffRsp::id() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionGetBuffRsp.ID)
  return id_;
}
inline void TExpeditionGetBuffRsp::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionGetBuffRsp.ID)
}

// repeated uint32 BuffArr = 2;
inline int TExpeditionGetBuffRsp::buffarr_size() const {
  return buffarr_.size();
}
inline void TExpeditionGetBuffRsp::clear_buffarr() {
  buffarr_.Clear();
}
inline ::google::protobuf::uint32 TExpeditionGetBuffRsp::buffarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionGetBuffRsp.BuffArr)
  return buffarr_.Get(index);
}
inline void TExpeditionGetBuffRsp::set_buffarr(int index, ::google::protobuf::uint32 value) {
  buffarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TExpeditionGetBuffRsp.BuffArr)
}
inline void TExpeditionGetBuffRsp::add_buffarr(::google::protobuf::uint32 value) {
  buffarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TExpeditionGetBuffRsp.BuffArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TExpeditionGetBuffRsp::buffarr() const {
  // @@protoc_insertion_point(field_list:pb.TExpeditionGetBuffRsp.BuffArr)
  return buffarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TExpeditionGetBuffRsp::mutable_buffarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TExpeditionGetBuffRsp.BuffArr)
  return &buffarr_;
}

// -------------------------------------------------------------------

// TExpeditionSelectBuffReq

// optional uint32 ID = 1;
inline bool TExpeditionSelectBuffReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionSelectBuffReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionSelectBuffReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionSelectBuffReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TExpeditionSelectBuffReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionSelectBuffReq.ID)
  return id_;
}
inline void TExpeditionSelectBuffReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionSelectBuffReq.ID)
}

// optional uint32 BuffIndex = 2;
inline bool TExpeditionSelectBuffReq::has_buffindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TExpeditionSelectBuffReq::set_has_buffindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TExpeditionSelectBuffReq::clear_has_buffindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TExpeditionSelectBuffReq::clear_buffindex() {
  buffindex_ = 0u;
  clear_has_buffindex();
}
inline ::google::protobuf::uint32 TExpeditionSelectBuffReq::buffindex() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionSelectBuffReq.BuffIndex)
  return buffindex_;
}
inline void TExpeditionSelectBuffReq::set_buffindex(::google::protobuf::uint32 value) {
  set_has_buffindex();
  buffindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionSelectBuffReq.BuffIndex)
}

// repeated uint32 Heros = 3;
inline int TExpeditionSelectBuffReq::heros_size() const {
  return heros_.size();
}
inline void TExpeditionSelectBuffReq::clear_heros() {
  heros_.Clear();
}
inline ::google::protobuf::uint32 TExpeditionSelectBuffReq::heros(int index) const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionSelectBuffReq.Heros)
  return heros_.Get(index);
}
inline void TExpeditionSelectBuffReq::set_heros(int index, ::google::protobuf::uint32 value) {
  heros_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TExpeditionSelectBuffReq.Heros)
}
inline void TExpeditionSelectBuffReq::add_heros(::google::protobuf::uint32 value) {
  heros_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TExpeditionSelectBuffReq.Heros)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TExpeditionSelectBuffReq::heros() const {
  // @@protoc_insertion_point(field_list:pb.TExpeditionSelectBuffReq.Heros)
  return heros_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TExpeditionSelectBuffReq::mutable_heros() {
  // @@protoc_insertion_point(field_mutable_list:pb.TExpeditionSelectBuffReq.Heros)
  return &heros_;
}

// -------------------------------------------------------------------

// TExpeditionSelectTreasureBuffReq

// optional uint32 ID = 1;
inline bool TExpeditionSelectTreasureBuffReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionSelectTreasureBuffReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionSelectTreasureBuffReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionSelectTreasureBuffReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TExpeditionSelectTreasureBuffReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionSelectTreasureBuffReq.ID)
  return id_;
}
inline void TExpeditionSelectTreasureBuffReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionSelectTreasureBuffReq.ID)
}

// optional uint32 BuffIndex = 2;
inline bool TExpeditionSelectTreasureBuffReq::has_buffindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TExpeditionSelectTreasureBuffReq::set_has_buffindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TExpeditionSelectTreasureBuffReq::clear_has_buffindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TExpeditionSelectTreasureBuffReq::clear_buffindex() {
  buffindex_ = 0u;
  clear_has_buffindex();
}
inline ::google::protobuf::uint32 TExpeditionSelectTreasureBuffReq::buffindex() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionSelectTreasureBuffReq.BuffIndex)
  return buffindex_;
}
inline void TExpeditionSelectTreasureBuffReq::set_buffindex(::google::protobuf::uint32 value) {
  set_has_buffindex();
  buffindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionSelectTreasureBuffReq.BuffIndex)
}

// repeated uint32 Heros = 3;
inline int TExpeditionSelectTreasureBuffReq::heros_size() const {
  return heros_.size();
}
inline void TExpeditionSelectTreasureBuffReq::clear_heros() {
  heros_.Clear();
}
inline ::google::protobuf::uint32 TExpeditionSelectTreasureBuffReq::heros(int index) const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionSelectTreasureBuffReq.Heros)
  return heros_.Get(index);
}
inline void TExpeditionSelectTreasureBuffReq::set_heros(int index, ::google::protobuf::uint32 value) {
  heros_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TExpeditionSelectTreasureBuffReq.Heros)
}
inline void TExpeditionSelectTreasureBuffReq::add_heros(::google::protobuf::uint32 value) {
  heros_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TExpeditionSelectTreasureBuffReq.Heros)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TExpeditionSelectTreasureBuffReq::heros() const {
  // @@protoc_insertion_point(field_list:pb.TExpeditionSelectTreasureBuffReq.Heros)
  return heros_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TExpeditionSelectTreasureBuffReq::mutable_heros() {
  // @@protoc_insertion_point(field_mutable_list:pb.TExpeditionSelectTreasureBuffReq.Heros)
  return &heros_;
}

// -------------------------------------------------------------------

// TExpeditionShoppingReq

// optional uint32 ID = 1;
inline bool TExpeditionShoppingReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionShoppingReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionShoppingReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionShoppingReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TExpeditionShoppingReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionShoppingReq.ID)
  return id_;
}
inline void TExpeditionShoppingReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionShoppingReq.ID)
}

// optional uint32 Num = 2;
inline bool TExpeditionShoppingReq::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TExpeditionShoppingReq::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TExpeditionShoppingReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TExpeditionShoppingReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TExpeditionShoppingReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionShoppingReq.Num)
  return num_;
}
inline void TExpeditionShoppingReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionShoppingReq.Num)
}

// -------------------------------------------------------------------

// TExpeditionShoppingRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TExpeditionShoppingRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TExpeditionShoppingRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TExpeditionShoppingRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionShoppingRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TExpeditionShoppingRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TExpeditionShoppingRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TExpeditionShoppingRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TExpeditionShoppingRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TExpeditionShoppingRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TExpeditionShoppingRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TExpeditionShoppingRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TExpeditionShoppingRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TExpeditionResetRsp

// optional .pb.TExpeditionInfo Info = 1;
inline bool TExpeditionResetRsp::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionResetRsp::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionResetRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionResetRsp::clear_info() {
  if (info_ != NULL) info_->::pb::TExpeditionInfo::Clear();
  clear_has_info();
}
inline const ::pb::TExpeditionInfo& TExpeditionResetRsp::info() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionResetRsp.Info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::pb::TExpeditionInfo* TExpeditionResetRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::pb::TExpeditionInfo;
  // @@protoc_insertion_point(field_mutable:pb.TExpeditionResetRsp.Info)
  return info_;
}
inline ::pb::TExpeditionInfo* TExpeditionResetRsp::release_info() {
  clear_has_info();
  ::pb::TExpeditionInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void TExpeditionResetRsp::set_allocated_info(::pb::TExpeditionInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TExpeditionResetRsp.Info)
}

// -------------------------------------------------------------------

// TExpeditionBuyResetNumReq

// optional uint32 Num = 1;
inline bool TExpeditionBuyResetNumReq::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionBuyResetNumReq::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionBuyResetNumReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionBuyResetNumReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TExpeditionBuyResetNumReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionBuyResetNumReq.Num)
  return num_;
}
inline void TExpeditionBuyResetNumReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionBuyResetNumReq.Num)
}

// -------------------------------------------------------------------

// TExpeditionRebornReq

// -------------------------------------------------------------------

// TExpeditionSetSquadReq

// repeated uint32 Squad = 1;
inline int TExpeditionSetSquadReq::squad_size() const {
  return squad_.size();
}
inline void TExpeditionSetSquadReq::clear_squad() {
  squad_.Clear();
}
inline ::google::protobuf::uint32 TExpeditionSetSquadReq::squad(int index) const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionSetSquadReq.Squad)
  return squad_.Get(index);
}
inline void TExpeditionSetSquadReq::set_squad(int index, ::google::protobuf::uint32 value) {
  squad_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TExpeditionSetSquadReq.Squad)
}
inline void TExpeditionSetSquadReq::add_squad(::google::protobuf::uint32 value) {
  squad_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TExpeditionSetSquadReq.Squad)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TExpeditionSetSquadReq::squad() const {
  // @@protoc_insertion_point(field_list:pb.TExpeditionSetSquadReq.Squad)
  return squad_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TExpeditionSetSquadReq::mutable_squad() {
  // @@protoc_insertion_point(field_mutable_list:pb.TExpeditionSetSquadReq.Squad)
  return &squad_;
}

// -------------------------------------------------------------------

// TExpeditionUseRebornBuildReq

// optional uint32 ID = 1;
inline bool TExpeditionUseRebornBuildReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionUseRebornBuildReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionUseRebornBuildReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionUseRebornBuildReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TExpeditionUseRebornBuildReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionUseRebornBuildReq.ID)
  return id_;
}
inline void TExpeditionUseRebornBuildReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionUseRebornBuildReq.ID)
}

// optional uint32 Hid = 2;
inline bool TExpeditionUseRebornBuildReq::has_hid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TExpeditionUseRebornBuildReq::set_has_hid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TExpeditionUseRebornBuildReq::clear_has_hid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TExpeditionUseRebornBuildReq::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TExpeditionUseRebornBuildReq::hid() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionUseRebornBuildReq.Hid)
  return hid_;
}
inline void TExpeditionUseRebornBuildReq::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionUseRebornBuildReq.Hid)
}

// -------------------------------------------------------------------

// TExpeditionUseRebornBuildRsp

// optional .pb.TExpeditionHeroStatus HeroInfo = 1;
inline bool TExpeditionUseRebornBuildRsp::has_heroinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionUseRebornBuildRsp::set_has_heroinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionUseRebornBuildRsp::clear_has_heroinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionUseRebornBuildRsp::clear_heroinfo() {
  if (heroinfo_ != NULL) heroinfo_->::pb::TExpeditionHeroStatus::Clear();
  clear_has_heroinfo();
}
inline const ::pb::TExpeditionHeroStatus& TExpeditionUseRebornBuildRsp::heroinfo() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionUseRebornBuildRsp.HeroInfo)
  return heroinfo_ != NULL ? *heroinfo_ : *default_instance_->heroinfo_;
}
inline ::pb::TExpeditionHeroStatus* TExpeditionUseRebornBuildRsp::mutable_heroinfo() {
  set_has_heroinfo();
  if (heroinfo_ == NULL) heroinfo_ = new ::pb::TExpeditionHeroStatus;
  // @@protoc_insertion_point(field_mutable:pb.TExpeditionUseRebornBuildRsp.HeroInfo)
  return heroinfo_;
}
inline ::pb::TExpeditionHeroStatus* TExpeditionUseRebornBuildRsp::release_heroinfo() {
  clear_has_heroinfo();
  ::pb::TExpeditionHeroStatus* temp = heroinfo_;
  heroinfo_ = NULL;
  return temp;
}
inline void TExpeditionUseRebornBuildRsp::set_allocated_heroinfo(::pb::TExpeditionHeroStatus* heroinfo) {
  delete heroinfo_;
  heroinfo_ = heroinfo;
  if (heroinfo) {
    set_has_heroinfo();
  } else {
    clear_has_heroinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TExpeditionUseRebornBuildRsp.HeroInfo)
}

// -------------------------------------------------------------------

// TExpeditionQuickPassReq

// optional bool IsChoosePass = 1;
inline bool TExpeditionQuickPassReq::has_ischoosepass() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionQuickPassReq::set_has_ischoosepass() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionQuickPassReq::clear_has_ischoosepass() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionQuickPassReq::clear_ischoosepass() {
  ischoosepass_ = false;
  clear_has_ischoosepass();
}
inline bool TExpeditionQuickPassReq::ischoosepass() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionQuickPassReq.IsChoosePass)
  return ischoosepass_;
}
inline void TExpeditionQuickPassReq::set_ischoosepass(bool value) {
  set_has_ischoosepass();
  ischoosepass_ = value;
  // @@protoc_insertion_point(field_set:pb.TExpeditionQuickPassReq.IsChoosePass)
}

// -------------------------------------------------------------------

// TExpeditionQuickPassRsp

// optional .pb.TExpeditionInfo Info = 1;
inline bool TExpeditionQuickPassRsp::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExpeditionQuickPassRsp::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExpeditionQuickPassRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExpeditionQuickPassRsp::clear_info() {
  if (info_ != NULL) info_->::pb::TExpeditionInfo::Clear();
  clear_has_info();
}
inline const ::pb::TExpeditionInfo& TExpeditionQuickPassRsp::info() const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionQuickPassRsp.Info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::pb::TExpeditionInfo* TExpeditionQuickPassRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::pb::TExpeditionInfo;
  // @@protoc_insertion_point(field_mutable:pb.TExpeditionQuickPassRsp.Info)
  return info_;
}
inline ::pb::TExpeditionInfo* TExpeditionQuickPassRsp::release_info() {
  clear_has_info();
  ::pb::TExpeditionInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void TExpeditionQuickPassRsp::set_allocated_info(::pb::TExpeditionInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TExpeditionQuickPassRsp.Info)
}

// repeated .pb.TCommonReward ShopRewardArr = 2;
inline int TExpeditionQuickPassRsp::shoprewardarr_size() const {
  return shoprewardarr_.size();
}
inline void TExpeditionQuickPassRsp::clear_shoprewardarr() {
  shoprewardarr_.Clear();
}
inline const ::pb::TCommonReward& TExpeditionQuickPassRsp::shoprewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TExpeditionQuickPassRsp.ShopRewardArr)
  return shoprewardarr_.Get(index);
}
inline ::pb::TCommonReward* TExpeditionQuickPassRsp::mutable_shoprewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TExpeditionQuickPassRsp.ShopRewardArr)
  return shoprewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TExpeditionQuickPassRsp::add_shoprewardarr() {
  // @@protoc_insertion_point(field_add:pb.TExpeditionQuickPassRsp.ShopRewardArr)
  return shoprewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TExpeditionQuickPassRsp::shoprewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TExpeditionQuickPassRsp.ShopRewardArr)
  return shoprewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TExpeditionQuickPassRsp::mutable_shoprewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TExpeditionQuickPassRsp.ShopRewardArr)
  return &shoprewardarr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fExpedition_2eproto__INCLUDED
