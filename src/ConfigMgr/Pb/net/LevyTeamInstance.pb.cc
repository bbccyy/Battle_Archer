// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/LevyTeamInstance.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/LevyTeamInstance.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TSimpleLevyInstanceTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSimpleLevyInstanceTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyInstanceTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyInstanceTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceGetTeamArrReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceGetTeamArrReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceGetTeamArrRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceGetTeamArrRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceCreateTeamReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceCreateTeamReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceCreateTeamRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceCreateTeamRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceJoinTeamReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceJoinTeamReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceJoinTeamRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceJoinTeamRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceKickReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceKickReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceQuitTeamReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceQuitTeamReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceKickOrQuitTeamRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceKickOrQuitTeamRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceChangeTeamModeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceChangeTeamModeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceChangeTeamModeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceChangeTeamModeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceSetTeamMemberStatusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceSetTeamMemberStatusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceSetTeamMemberStatusRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceSetTeamMemberStatusRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceSetTeamStatusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceSetTeamStatusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceSetTeamStatusRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceSetTeamStatusRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceTeamStartReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceTeamStartReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceBattleRecordNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceBattleRecordNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceBattleEndNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceBattleEndNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceAbortNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceAbortNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceGetInviteListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceGetInviteListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceGetInviteListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceGetInviteListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceTeamInviteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceTeamInviteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceInviteNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceInviteNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceAtkInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceAtkInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceGetAtkListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceGetAtkListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceGetAtkListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceGetAtkListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceGetBattleRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceGetBattleRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceGetBattleRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceGetBattleRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceHallMemberInfoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceHallMemberInfoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceTeamSpecificInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceTeamSpecificInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceQuickMatchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceQuickMatchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevyTeamInstanceQuickMatchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevyTeamInstanceQuickMatchRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EJoinLevyInstanceTeamErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ELevyTeamInstanceGetListType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ELevyTeamKickOrQuitTeamRetCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ELevyTeamInstanceBattleResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ELevyTeamInstanceAbortReason_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fLevyTeamInstance_2eproto() {
  protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/LevyTeamInstance.proto");
  GOOGLE_CHECK(file != NULL);
  TSimpleLevyInstanceTeamInfo_descriptor_ = file->message_type(0);
  static const int TSimpleLevyInstanceTeamInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSimpleLevyInstanceTeamInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSimpleLevyInstanceTeamInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSimpleLevyInstanceTeamInfo, leaderuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSimpleLevyInstanceTeamInfo, teamusernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSimpleLevyInstanceTeamInfo, instanceid_),
  };
  TSimpleLevyInstanceTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSimpleLevyInstanceTeamInfo_descriptor_,
      TSimpleLevyInstanceTeamInfo::default_instance_,
      TSimpleLevyInstanceTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSimpleLevyInstanceTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSimpleLevyInstanceTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSimpleLevyInstanceTeamInfo));
  TLevyTeamInstanceMemberInfo_descriptor_ = file->message_type(1);
  static const int TLevyTeamInstanceMemberInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceMemberInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceMemberInfo, squadnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceMemberInfo, totalfightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceMemberInfo, teammode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceMemberInfo, memberstatus_),
  };
  TLevyTeamInstanceMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceMemberInfo_descriptor_,
      TLevyTeamInstanceMemberInfo::default_instance_,
      TLevyTeamInstanceMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceMemberInfo));
  TLevyInstanceTeamInfo_descriptor_ = file->message_type(2);
  static const int TLevyInstanceTeamInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyInstanceTeamInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyInstanceTeamInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyInstanceTeamInfo, leaderuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyInstanceTeamInfo, teamuserarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyInstanceTeamInfo, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyInstanceTeamInfo, teamprivatetype_),
  };
  TLevyInstanceTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyInstanceTeamInfo_descriptor_,
      TLevyInstanceTeamInfo::default_instance_,
      TLevyInstanceTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyInstanceTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyInstanceTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyInstanceTeamInfo));
  TLevyTeamInstanceGetInfoRsp_descriptor_ = file->message_type(3);
  static const int TLevyTeamInstanceGetInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetInfoRsp, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetInfoRsp, atkinstancenum_),
  };
  TLevyTeamInstanceGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceGetInfoRsp_descriptor_,
      TLevyTeamInstanceGetInfoRsp::default_instance_,
      TLevyTeamInstanceGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceGetInfoRsp));
  TLevyTeamInstanceGetTeamArrReq_descriptor_ = file->message_type(4);
  static const int TLevyTeamInstanceGetTeamArrReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetTeamArrReq, selecttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetTeamArrReq, num_),
  };
  TLevyTeamInstanceGetTeamArrReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceGetTeamArrReq_descriptor_,
      TLevyTeamInstanceGetTeamArrReq::default_instance_,
      TLevyTeamInstanceGetTeamArrReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetTeamArrReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetTeamArrReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceGetTeamArrReq));
  TLevyTeamInstanceGetTeamArrRsp_descriptor_ = file->message_type(5);
  static const int TLevyTeamInstanceGetTeamArrRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetTeamArrRsp, teamarr_),
  };
  TLevyTeamInstanceGetTeamArrRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceGetTeamArrRsp_descriptor_,
      TLevyTeamInstanceGetTeamArrRsp::default_instance_,
      TLevyTeamInstanceGetTeamArrRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetTeamArrRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetTeamArrRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceGetTeamArrRsp));
  TLevyTeamInstanceCreateTeamReq_descriptor_ = file->message_type(6);
  static const int TLevyTeamInstanceCreateTeamReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceCreateTeamReq, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceCreateTeamReq, teamprivatetype_),
  };
  TLevyTeamInstanceCreateTeamReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceCreateTeamReq_descriptor_,
      TLevyTeamInstanceCreateTeamReq::default_instance_,
      TLevyTeamInstanceCreateTeamReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceCreateTeamReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceCreateTeamReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceCreateTeamReq));
  TLevyTeamInstanceCreateTeamRsp_descriptor_ = file->message_type(7);
  static const int TLevyTeamInstanceCreateTeamRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceCreateTeamRsp, teaminfo_),
  };
  TLevyTeamInstanceCreateTeamRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceCreateTeamRsp_descriptor_,
      TLevyTeamInstanceCreateTeamRsp::default_instance_,
      TLevyTeamInstanceCreateTeamRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceCreateTeamRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceCreateTeamRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceCreateTeamRsp));
  TLevyTeamInstanceJoinTeamReq_descriptor_ = file->message_type(8);
  static const int TLevyTeamInstanceJoinTeamReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceJoinTeamReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceJoinTeamReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceJoinTeamReq, joinmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceJoinTeamReq, checkprivate_),
  };
  TLevyTeamInstanceJoinTeamReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceJoinTeamReq_descriptor_,
      TLevyTeamInstanceJoinTeamReq::default_instance_,
      TLevyTeamInstanceJoinTeamReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceJoinTeamReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceJoinTeamReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceJoinTeamReq));
  TLevyTeamInstanceJoinTeamRsp_descriptor_ = file->message_type(9);
  static const int TLevyTeamInstanceJoinTeamRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceJoinTeamRsp, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceJoinTeamRsp, teaminfo_),
  };
  TLevyTeamInstanceJoinTeamRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceJoinTeamRsp_descriptor_,
      TLevyTeamInstanceJoinTeamRsp::default_instance_,
      TLevyTeamInstanceJoinTeamRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceJoinTeamRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceJoinTeamRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceJoinTeamRsp));
  TLevyTeamInstanceKickReq_descriptor_ = file->message_type(10);
  static const int TLevyTeamInstanceKickReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceKickReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceKickReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceKickReq, kickuid_),
  };
  TLevyTeamInstanceKickReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceKickReq_descriptor_,
      TLevyTeamInstanceKickReq::default_instance_,
      TLevyTeamInstanceKickReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceKickReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceKickReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceKickReq));
  TLevyTeamInstanceQuitTeamReq_descriptor_ = file->message_type(11);
  static const int TLevyTeamInstanceQuitTeamReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceQuitTeamReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceQuitTeamReq, teamid_),
  };
  TLevyTeamInstanceQuitTeamReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceQuitTeamReq_descriptor_,
      TLevyTeamInstanceQuitTeamReq::default_instance_,
      TLevyTeamInstanceQuitTeamReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceQuitTeamReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceQuitTeamReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceQuitTeamReq));
  TLevyTeamInstanceKickOrQuitTeamRsp_descriptor_ = file->message_type(12);
  static const int TLevyTeamInstanceKickOrQuitTeamRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceKickOrQuitTeamRsp, retcode_),
  };
  TLevyTeamInstanceKickOrQuitTeamRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceKickOrQuitTeamRsp_descriptor_,
      TLevyTeamInstanceKickOrQuitTeamRsp::default_instance_,
      TLevyTeamInstanceKickOrQuitTeamRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceKickOrQuitTeamRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceKickOrQuitTeamRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceKickOrQuitTeamRsp));
  TLevyTeamInstanceChangeTeamModeReq_descriptor_ = file->message_type(13);
  static const int TLevyTeamInstanceChangeTeamModeReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceChangeTeamModeReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceChangeTeamModeReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceChangeTeamModeReq, teammode_),
  };
  TLevyTeamInstanceChangeTeamModeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceChangeTeamModeReq_descriptor_,
      TLevyTeamInstanceChangeTeamModeReq::default_instance_,
      TLevyTeamInstanceChangeTeamModeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceChangeTeamModeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceChangeTeamModeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceChangeTeamModeReq));
  TLevyTeamInstanceChangeTeamModeRsp_descriptor_ = file->message_type(14);
  static const int TLevyTeamInstanceChangeTeamModeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceChangeTeamModeRsp, retcode_),
  };
  TLevyTeamInstanceChangeTeamModeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceChangeTeamModeRsp_descriptor_,
      TLevyTeamInstanceChangeTeamModeRsp::default_instance_,
      TLevyTeamInstanceChangeTeamModeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceChangeTeamModeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceChangeTeamModeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceChangeTeamModeRsp));
  TLevyTeamInstanceSetTeamMemberStatusReq_descriptor_ = file->message_type(15);
  static const int TLevyTeamInstanceSetTeamMemberStatusReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceSetTeamMemberStatusReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceSetTeamMemberStatusReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceSetTeamMemberStatusReq, memberstatus_),
  };
  TLevyTeamInstanceSetTeamMemberStatusReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceSetTeamMemberStatusReq_descriptor_,
      TLevyTeamInstanceSetTeamMemberStatusReq::default_instance_,
      TLevyTeamInstanceSetTeamMemberStatusReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceSetTeamMemberStatusReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceSetTeamMemberStatusReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceSetTeamMemberStatusReq));
  TLevyTeamInstanceSetTeamMemberStatusRsp_descriptor_ = file->message_type(16);
  static const int TLevyTeamInstanceSetTeamMemberStatusRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceSetTeamMemberStatusRsp, retcode_),
  };
  TLevyTeamInstanceSetTeamMemberStatusRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceSetTeamMemberStatusRsp_descriptor_,
      TLevyTeamInstanceSetTeamMemberStatusRsp::default_instance_,
      TLevyTeamInstanceSetTeamMemberStatusRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceSetTeamMemberStatusRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceSetTeamMemberStatusRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceSetTeamMemberStatusRsp));
  TLevyTeamInstanceSetTeamStatusReq_descriptor_ = file->message_type(17);
  static const int TLevyTeamInstanceSetTeamStatusReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceSetTeamStatusReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceSetTeamStatusReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceSetTeamStatusReq, teamstatus_),
  };
  TLevyTeamInstanceSetTeamStatusReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceSetTeamStatusReq_descriptor_,
      TLevyTeamInstanceSetTeamStatusReq::default_instance_,
      TLevyTeamInstanceSetTeamStatusReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceSetTeamStatusReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceSetTeamStatusReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceSetTeamStatusReq));
  TLevyTeamInstanceSetTeamStatusRsp_descriptor_ = file->message_type(18);
  static const int TLevyTeamInstanceSetTeamStatusRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceSetTeamStatusRsp, retcode_),
  };
  TLevyTeamInstanceSetTeamStatusRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceSetTeamStatusRsp_descriptor_,
      TLevyTeamInstanceSetTeamStatusRsp::default_instance_,
      TLevyTeamInstanceSetTeamStatusRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceSetTeamStatusRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceSetTeamStatusRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceSetTeamStatusRsp));
  TLevyTeamInstanceTeamStartReq_descriptor_ = file->message_type(19);
  static const int TLevyTeamInstanceTeamStartReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceTeamStartReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceTeamStartReq, teamid_),
  };
  TLevyTeamInstanceTeamStartReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceTeamStartReq_descriptor_,
      TLevyTeamInstanceTeamStartReq::default_instance_,
      TLevyTeamInstanceTeamStartReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceTeamStartReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceTeamStartReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceTeamStartReq));
  TLevyTeamInstanceBattleRecordNotify_descriptor_ = file->message_type(20);
  static const int TLevyTeamInstanceBattleRecordNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceBattleRecordNotify, battleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceBattleRecordNotify, battleresult_),
  };
  TLevyTeamInstanceBattleRecordNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceBattleRecordNotify_descriptor_,
      TLevyTeamInstanceBattleRecordNotify::default_instance_,
      TLevyTeamInstanceBattleRecordNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceBattleRecordNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceBattleRecordNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceBattleRecordNotify));
  TLevyTeamInstanceBattleEndNotify_descriptor_ = file->message_type(21);
  static const int TLevyTeamInstanceBattleEndNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceBattleEndNotify, battleres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceBattleEndNotify, battlenum_),
  };
  TLevyTeamInstanceBattleEndNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceBattleEndNotify_descriptor_,
      TLevyTeamInstanceBattleEndNotify::default_instance_,
      TLevyTeamInstanceBattleEndNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceBattleEndNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceBattleEndNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceBattleEndNotify));
  TLevyTeamInstanceAbortNotify_descriptor_ = file->message_type(22);
  static const int TLevyTeamInstanceAbortNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceAbortNotify, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceAbortNotify, abortreason_),
  };
  TLevyTeamInstanceAbortNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceAbortNotify_descriptor_,
      TLevyTeamInstanceAbortNotify::default_instance_,
      TLevyTeamInstanceAbortNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceAbortNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceAbortNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceAbortNotify));
  TLevyTeamInstanceGetInviteListReq_descriptor_ = file->message_type(23);
  static const int TLevyTeamInstanceGetInviteListReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetInviteListReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetInviteListReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetInviteListReq, invitetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetInviteListReq, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetInviteListReq, offset_),
  };
  TLevyTeamInstanceGetInviteListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceGetInviteListReq_descriptor_,
      TLevyTeamInstanceGetInviteListReq::default_instance_,
      TLevyTeamInstanceGetInviteListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetInviteListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetInviteListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceGetInviteListReq));
  TLevyTeamInstanceGetInviteListRsp_descriptor_ = file->message_type(24);
  static const int TLevyTeamInstanceGetInviteListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetInviteListRsp, userarr_),
  };
  TLevyTeamInstanceGetInviteListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceGetInviteListRsp_descriptor_,
      TLevyTeamInstanceGetInviteListRsp::default_instance_,
      TLevyTeamInstanceGetInviteListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetInviteListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetInviteListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceGetInviteListRsp));
  TLevyTeamInstanceTeamInviteReq_descriptor_ = file->message_type(25);
  static const int TLevyTeamInstanceTeamInviteReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceTeamInviteReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceTeamInviteReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceTeamInviteReq, uidarr_),
  };
  TLevyTeamInstanceTeamInviteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceTeamInviteReq_descriptor_,
      TLevyTeamInstanceTeamInviteReq::default_instance_,
      TLevyTeamInstanceTeamInviteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceTeamInviteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceTeamInviteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceTeamInviteReq));
  TLevyTeamInstanceInviteNotify_descriptor_ = file->message_type(26);
  static const int TLevyTeamInstanceInviteNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceInviteNotify, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceInviteNotify, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceInviteNotify, teaminfo_),
  };
  TLevyTeamInstanceInviteNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceInviteNotify_descriptor_,
      TLevyTeamInstanceInviteNotify::default_instance_,
      TLevyTeamInstanceInviteNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceInviteNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceInviteNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceInviteNotify));
  TLevyTeamInstanceAtkInfo_descriptor_ = file->message_type(27);
  static const int TLevyTeamInstanceAtkInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceAtkInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceAtkInfo, battleres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceAtkInfo, atktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceAtkInfo, memarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceAtkInfo, battlenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceAtkInfo, teammode_),
  };
  TLevyTeamInstanceAtkInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceAtkInfo_descriptor_,
      TLevyTeamInstanceAtkInfo::default_instance_,
      TLevyTeamInstanceAtkInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceAtkInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceAtkInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceAtkInfo));
  TLevyTeamInstanceGetAtkListReq_descriptor_ = file->message_type(28);
  static const int TLevyTeamInstanceGetAtkListReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetAtkListReq, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetAtkListReq, offset_),
  };
  TLevyTeamInstanceGetAtkListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceGetAtkListReq_descriptor_,
      TLevyTeamInstanceGetAtkListReq::default_instance_,
      TLevyTeamInstanceGetAtkListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetAtkListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetAtkListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceGetAtkListReq));
  TLevyTeamInstanceGetAtkListRsp_descriptor_ = file->message_type(29);
  static const int TLevyTeamInstanceGetAtkListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetAtkListRsp, atklist_),
  };
  TLevyTeamInstanceGetAtkListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceGetAtkListRsp_descriptor_,
      TLevyTeamInstanceGetAtkListRsp::default_instance_,
      TLevyTeamInstanceGetAtkListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetAtkListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetAtkListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceGetAtkListRsp));
  TLevyTeamInstanceGetBattleRecordReq_descriptor_ = file->message_type(30);
  static const int TLevyTeamInstanceGetBattleRecordReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetBattleRecordReq, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetBattleRecordReq, recordnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetBattleRecordReq, recordoffset_),
  };
  TLevyTeamInstanceGetBattleRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceGetBattleRecordReq_descriptor_,
      TLevyTeamInstanceGetBattleRecordReq::default_instance_,
      TLevyTeamInstanceGetBattleRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetBattleRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetBattleRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceGetBattleRecordReq));
  TLevyTeamInstanceRewardInfo_descriptor_ = file->message_type(31);
  static const int TLevyTeamInstanceRewardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceRewardInfo, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceRewardInfo, crosslevyscore_),
  };
  TLevyTeamInstanceRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceRewardInfo_descriptor_,
      TLevyTeamInstanceRewardInfo::default_instance_,
      TLevyTeamInstanceRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceRewardInfo));
  TLevyTeamInstanceGetBattleRecordRsp_descriptor_ = file->message_type(32);
  static const int TLevyTeamInstanceGetBattleRecordRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetBattleRecordRsp, battleres_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetBattleRecordRsp, rewardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetBattleRecordRsp, resultarr_),
  };
  TLevyTeamInstanceGetBattleRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceGetBattleRecordRsp_descriptor_,
      TLevyTeamInstanceGetBattleRecordRsp::default_instance_,
      TLevyTeamInstanceGetBattleRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetBattleRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceGetBattleRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceGetBattleRecordRsp));
  TLevyTeamInstanceHallMemberInfoData_descriptor_ = file->message_type(33);
  static const int TLevyTeamInstanceHallMemberInfoData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceHallMemberInfoData, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceHallMemberInfoData, memmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceHallMemberInfoData, squadnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceHallMemberInfoData, totalfightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceHallMemberInfoData, teamorder_),
  };
  TLevyTeamInstanceHallMemberInfoData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceHallMemberInfoData_descriptor_,
      TLevyTeamInstanceHallMemberInfoData::default_instance_,
      TLevyTeamInstanceHallMemberInfoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceHallMemberInfoData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceHallMemberInfoData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceHallMemberInfoData));
  TLevyTeamInstanceTeamSpecificInfo_descriptor_ = file->message_type(34);
  static const int TLevyTeamInstanceTeamSpecificInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceTeamSpecificInfo, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceTeamSpecificInfo, monsteridarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceTeamSpecificInfo, dayindex_),
  };
  TLevyTeamInstanceTeamSpecificInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceTeamSpecificInfo_descriptor_,
      TLevyTeamInstanceTeamSpecificInfo::default_instance_,
      TLevyTeamInstanceTeamSpecificInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceTeamSpecificInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceTeamSpecificInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceTeamSpecificInfo));
  TLevyTeamInstanceQuickMatchReq_descriptor_ = file->message_type(35);
  static const int TLevyTeamInstanceQuickMatchReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceQuickMatchReq, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceQuickMatchReq, teamid_),
  };
  TLevyTeamInstanceQuickMatchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceQuickMatchReq_descriptor_,
      TLevyTeamInstanceQuickMatchReq::default_instance_,
      TLevyTeamInstanceQuickMatchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceQuickMatchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceQuickMatchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceQuickMatchReq));
  TLevyTeamInstanceQuickMatchRsp_descriptor_ = file->message_type(36);
  static const int TLevyTeamInstanceQuickMatchRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceQuickMatchRsp, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceQuickMatchRsp, teaminfo_),
  };
  TLevyTeamInstanceQuickMatchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevyTeamInstanceQuickMatchRsp_descriptor_,
      TLevyTeamInstanceQuickMatchRsp::default_instance_,
      TLevyTeamInstanceQuickMatchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceQuickMatchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevyTeamInstanceQuickMatchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevyTeamInstanceQuickMatchRsp));
  EJoinLevyInstanceTeamErrorCode_descriptor_ = file->enum_type(0);
  ELevyTeamInstanceGetListType_descriptor_ = file->enum_type(1);
  ELevyTeamKickOrQuitTeamRetCode_descriptor_ = file->enum_type(2);
  ELevyTeamInstanceBattleResult_descriptor_ = file->enum_type(3);
  ELevyTeamInstanceAbortReason_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fLevyTeamInstance_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSimpleLevyInstanceTeamInfo_descriptor_, &TSimpleLevyInstanceTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceMemberInfo_descriptor_, &TLevyTeamInstanceMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyInstanceTeamInfo_descriptor_, &TLevyInstanceTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceGetInfoRsp_descriptor_, &TLevyTeamInstanceGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceGetTeamArrReq_descriptor_, &TLevyTeamInstanceGetTeamArrReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceGetTeamArrRsp_descriptor_, &TLevyTeamInstanceGetTeamArrRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceCreateTeamReq_descriptor_, &TLevyTeamInstanceCreateTeamReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceCreateTeamRsp_descriptor_, &TLevyTeamInstanceCreateTeamRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceJoinTeamReq_descriptor_, &TLevyTeamInstanceJoinTeamReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceJoinTeamRsp_descriptor_, &TLevyTeamInstanceJoinTeamRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceKickReq_descriptor_, &TLevyTeamInstanceKickReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceQuitTeamReq_descriptor_, &TLevyTeamInstanceQuitTeamReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceKickOrQuitTeamRsp_descriptor_, &TLevyTeamInstanceKickOrQuitTeamRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceChangeTeamModeReq_descriptor_, &TLevyTeamInstanceChangeTeamModeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceChangeTeamModeRsp_descriptor_, &TLevyTeamInstanceChangeTeamModeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceSetTeamMemberStatusReq_descriptor_, &TLevyTeamInstanceSetTeamMemberStatusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceSetTeamMemberStatusRsp_descriptor_, &TLevyTeamInstanceSetTeamMemberStatusRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceSetTeamStatusReq_descriptor_, &TLevyTeamInstanceSetTeamStatusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceSetTeamStatusRsp_descriptor_, &TLevyTeamInstanceSetTeamStatusRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceTeamStartReq_descriptor_, &TLevyTeamInstanceTeamStartReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceBattleRecordNotify_descriptor_, &TLevyTeamInstanceBattleRecordNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceBattleEndNotify_descriptor_, &TLevyTeamInstanceBattleEndNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceAbortNotify_descriptor_, &TLevyTeamInstanceAbortNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceGetInviteListReq_descriptor_, &TLevyTeamInstanceGetInviteListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceGetInviteListRsp_descriptor_, &TLevyTeamInstanceGetInviteListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceTeamInviteReq_descriptor_, &TLevyTeamInstanceTeamInviteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceInviteNotify_descriptor_, &TLevyTeamInstanceInviteNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceAtkInfo_descriptor_, &TLevyTeamInstanceAtkInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceGetAtkListReq_descriptor_, &TLevyTeamInstanceGetAtkListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceGetAtkListRsp_descriptor_, &TLevyTeamInstanceGetAtkListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceGetBattleRecordReq_descriptor_, &TLevyTeamInstanceGetBattleRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceRewardInfo_descriptor_, &TLevyTeamInstanceRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceGetBattleRecordRsp_descriptor_, &TLevyTeamInstanceGetBattleRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceHallMemberInfoData_descriptor_, &TLevyTeamInstanceHallMemberInfoData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceTeamSpecificInfo_descriptor_, &TLevyTeamInstanceTeamSpecificInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceQuickMatchReq_descriptor_, &TLevyTeamInstanceQuickMatchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevyTeamInstanceQuickMatchRsp_descriptor_, &TLevyTeamInstanceQuickMatchRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fLevyTeamInstance_2eproto() {
  delete TSimpleLevyInstanceTeamInfo::default_instance_;
  delete TSimpleLevyInstanceTeamInfo_reflection_;
  delete TLevyTeamInstanceMemberInfo::default_instance_;
  delete TLevyTeamInstanceMemberInfo_reflection_;
  delete TLevyInstanceTeamInfo::default_instance_;
  delete TLevyInstanceTeamInfo_reflection_;
  delete TLevyTeamInstanceGetInfoRsp::default_instance_;
  delete TLevyTeamInstanceGetInfoRsp_reflection_;
  delete TLevyTeamInstanceGetTeamArrReq::default_instance_;
  delete TLevyTeamInstanceGetTeamArrReq_reflection_;
  delete TLevyTeamInstanceGetTeamArrRsp::default_instance_;
  delete TLevyTeamInstanceGetTeamArrRsp_reflection_;
  delete TLevyTeamInstanceCreateTeamReq::default_instance_;
  delete TLevyTeamInstanceCreateTeamReq_reflection_;
  delete TLevyTeamInstanceCreateTeamRsp::default_instance_;
  delete TLevyTeamInstanceCreateTeamRsp_reflection_;
  delete TLevyTeamInstanceJoinTeamReq::default_instance_;
  delete TLevyTeamInstanceJoinTeamReq_reflection_;
  delete TLevyTeamInstanceJoinTeamRsp::default_instance_;
  delete TLevyTeamInstanceJoinTeamRsp_reflection_;
  delete TLevyTeamInstanceKickReq::default_instance_;
  delete TLevyTeamInstanceKickReq_reflection_;
  delete TLevyTeamInstanceQuitTeamReq::default_instance_;
  delete TLevyTeamInstanceQuitTeamReq_reflection_;
  delete TLevyTeamInstanceKickOrQuitTeamRsp::default_instance_;
  delete TLevyTeamInstanceKickOrQuitTeamRsp_reflection_;
  delete TLevyTeamInstanceChangeTeamModeReq::default_instance_;
  delete TLevyTeamInstanceChangeTeamModeReq_reflection_;
  delete TLevyTeamInstanceChangeTeamModeRsp::default_instance_;
  delete TLevyTeamInstanceChangeTeamModeRsp_reflection_;
  delete TLevyTeamInstanceSetTeamMemberStatusReq::default_instance_;
  delete TLevyTeamInstanceSetTeamMemberStatusReq_reflection_;
  delete TLevyTeamInstanceSetTeamMemberStatusRsp::default_instance_;
  delete TLevyTeamInstanceSetTeamMemberStatusRsp_reflection_;
  delete TLevyTeamInstanceSetTeamStatusReq::default_instance_;
  delete TLevyTeamInstanceSetTeamStatusReq_reflection_;
  delete TLevyTeamInstanceSetTeamStatusRsp::default_instance_;
  delete TLevyTeamInstanceSetTeamStatusRsp_reflection_;
  delete TLevyTeamInstanceTeamStartReq::default_instance_;
  delete TLevyTeamInstanceTeamStartReq_reflection_;
  delete TLevyTeamInstanceBattleRecordNotify::default_instance_;
  delete TLevyTeamInstanceBattleRecordNotify_reflection_;
  delete TLevyTeamInstanceBattleEndNotify::default_instance_;
  delete TLevyTeamInstanceBattleEndNotify_reflection_;
  delete TLevyTeamInstanceAbortNotify::default_instance_;
  delete TLevyTeamInstanceAbortNotify_reflection_;
  delete TLevyTeamInstanceGetInviteListReq::default_instance_;
  delete TLevyTeamInstanceGetInviteListReq_reflection_;
  delete TLevyTeamInstanceGetInviteListRsp::default_instance_;
  delete TLevyTeamInstanceGetInviteListRsp_reflection_;
  delete TLevyTeamInstanceTeamInviteReq::default_instance_;
  delete TLevyTeamInstanceTeamInviteReq_reflection_;
  delete TLevyTeamInstanceInviteNotify::default_instance_;
  delete TLevyTeamInstanceInviteNotify_reflection_;
  delete TLevyTeamInstanceAtkInfo::default_instance_;
  delete TLevyTeamInstanceAtkInfo_reflection_;
  delete TLevyTeamInstanceGetAtkListReq::default_instance_;
  delete TLevyTeamInstanceGetAtkListReq_reflection_;
  delete TLevyTeamInstanceGetAtkListRsp::default_instance_;
  delete TLevyTeamInstanceGetAtkListRsp_reflection_;
  delete TLevyTeamInstanceGetBattleRecordReq::default_instance_;
  delete TLevyTeamInstanceGetBattleRecordReq_reflection_;
  delete TLevyTeamInstanceRewardInfo::default_instance_;
  delete TLevyTeamInstanceRewardInfo_reflection_;
  delete TLevyTeamInstanceGetBattleRecordRsp::default_instance_;
  delete TLevyTeamInstanceGetBattleRecordRsp_reflection_;
  delete TLevyTeamInstanceHallMemberInfoData::default_instance_;
  delete TLevyTeamInstanceHallMemberInfoData_reflection_;
  delete TLevyTeamInstanceTeamSpecificInfo::default_instance_;
  delete TLevyTeamInstanceTeamSpecificInfo_reflection_;
  delete TLevyTeamInstanceQuickMatchReq::default_instance_;
  delete TLevyTeamInstanceQuickMatchReq_reflection_;
  delete TLevyTeamInstanceQuickMatchRsp::default_instance_;
  delete TLevyTeamInstanceQuickMatchRsp_reflection_;
}

void protobuf_AddDesc_net_2fLevyTeamInstance_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonTeam_2eproto();
  ::pb::protobuf_AddDesc_net_2fTeam_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032net/LevyTeamInstance.proto\022\002pb\032\016net/Us"
    "er.proto\032\026net/CommonReward.proto\032\020net/Ba"
    "ttle.proto\032\024net/CommonTeam.proto\032\016net/Te"
    "am.proto\"\223\001\n\033TSimpleLevyInstanceTeamInfo"
    "\022\016\n\006RoomId\030\001 \001(\004\022\016\n\006TeamId\030\002 \001(\004\022+\n\016Lead"
    "erUserInfo\030\003 \001(\0132\023.pb.TUserSimpleInfo\022\023\n"
    "\013TeamUserNum\030\004 \001(\r\022\022\n\nInstanceId\030\005 \001(\r\"\310"
    "\001\n\033TLevyTeamInstanceMemberInfo\022%\n\010UserIn"
    "fo\030\001 \001(\0132\023.pb.TUserSimpleInfo\022\020\n\010SquadNu"
    "m\030\002 \001(\r\022\027\n\017TotalFightForce\030\003 \001(\004\022%\n\010Team"
    "Mode\030\004 \001(\0162\023.pb.ECommonTeamMode\0220\n\014Membe"
    "rStatus\030\005 \001(\0162\032.pb.EHallMemberReadyStatu"
    "s\"\300\001\n\025TLevyInstanceTeamInfo\022\016\n\006RoomId\030\001 "
    "\001(\004\022\016\n\006TeamId\030\002 \001(\004\022\021\n\tLeaderUid\030\003 \001(\004\0224"
    "\n\013TeamUserArr\030\004 \003(\0132\037.pb.TLevyTeamInstan"
    "ceMemberInfo\022\022\n\nInstanceId\030\005 \001(\r\022*\n\017Team"
    "PrivateType\030\006 \001(\0162\021.pb.EHallTeamType\"H\n\033"
    "TLevyTeamInstanceGetInfoRsp\022\021\n\tMonsterId"
    "\030\001 \003(\r\022\026\n\016AtkInstanceNum\030\002 \001(\r\"c\n\036TLevyT"
    "eamInstanceGetTeamArrReq\0224\n\nSelectType\030\001"
    " \001(\0162 .pb.ELevyTeamInstanceGetListType\022\013"
    "\n\003Num\030\002 \001(\r\"R\n\036TLevyTeamInstanceGetTeamA"
    "rrRsp\0220\n\007TeamArr\030\001 \003(\0132\037.pb.TSimpleLevyI"
    "nstanceTeamInfo\"`\n\036TLevyTeamInstanceCrea"
    "teTeamReq\022\022\n\nInstanceId\030\001 \001(\r\022*\n\017TeamPri"
    "vateType\030\002 \001(\0162\021.pb.EHallTeamType\"M\n\036TLe"
    "vyTeamInstanceCreateTeamRsp\022+\n\010TeamInfo\030"
    "\001 \001(\0132\031.pb.TLevyInstanceTeamInfo\"{\n\034TLev"
    "yTeamInstanceJoinTeamReq\022\016\n\006RoomId\030\001 \001(\004"
    "\022\016\n\006TeamId\030\002 \001(\004\022%\n\010JoinMode\030\003 \001(\0162\023.pb."
    "ECommonTeamMode\022\024\n\014CheckPrivate\030\004 \001(\010\"\202\001"
    "\n\034TLevyTeamInstanceJoinTeamRsp\0225\n\tErrorC"
    "ode\030\001 \001(\0162\".pb.EJoinLevyInstanceTeamErro"
    "rCode\022+\n\010TeamInfo\030\002 \001(\0132\031.pb.TLevyInstan"
    "ceTeamInfo\"K\n\030TLevyTeamInstanceKickReq\022\016"
    "\n\006RoomId\030\001 \001(\004\022\016\n\006TeamId\030\002 \001(\004\022\017\n\007KickUi"
    "d\030\003 \001(\004\">\n\034TLevyTeamInstanceQuitTeamReq\022"
    "\016\n\006RoomId\030\001 \001(\004\022\016\n\006TeamId\030\002 \001(\004\"Y\n\"TLevy"
    "TeamInstanceKickOrQuitTeamRsp\0223\n\007RetCode"
    "\030\001 \001(\0162\".pb.ELevyTeamKickOrQuitTeamRetCo"
    "de\"k\n\"TLevyTeamInstanceChangeTeamModeReq"
    "\022\016\n\006RoomId\030\001 \001(\004\022\016\n\006TeamId\030\002 \001(\004\022%\n\010Team"
    "Mode\030\003 \001(\0162\023.pb.ECommonTeamMode\"S\n\"TLevy"
    "TeamInstanceChangeTeamModeRsp\022-\n\007RetCode"
    "\030\001 \001(\0162\034.pb.ECommonChangeTeamRetCode\"{\n\'"
    "TLevyTeamInstanceSetTeamMemberStatusReq\022"
    "\016\n\006RoomId\030\001 \001(\004\022\016\n\006TeamId\030\002 \001(\004\0220\n\014Membe"
    "rStatus\030\003 \001(\0162\032.pb.EHallMemberReadyStatu"
    "s\"X\n\'TLevyTeamInstanceSetTeamMemberStatu"
    "sRsp\022-\n\007RetCode\030\001 \001(\0162\034.pb.ECommonChange"
    "TeamRetCode\"j\n!TLevyTeamInstanceSetTeamS"
    "tatusReq\022\016\n\006RoomId\030\001 \001(\004\022\016\n\006TeamId\030\002 \001(\004"
    "\022%\n\nTeamStatus\030\003 \001(\0162\021.pb.EHallTeamType\""
    "R\n!TLevyTeamInstanceSetTeamStatusRsp\022-\n\007"
    "RetCode\030\001 \001(\0162\034.pb.ECommonChangeTeamRetC"
    "ode\"\?\n\035TLevyTeamInstanceTeamStartReq\022\016\n\006"
    "RoomId\030\001 \001(\004\022\016\n\006TeamId\030\002 \001(\004\"c\n#TLevyTea"
    "mInstanceBattleRecordNotify\022\023\n\013BattleInd"
    "ex\030\001 \001(\r\022\'\n\014BattleResult\030\002 \001(\0132\021.pb.TBat"
    "tleResult\"k\n TLevyTeamInstanceBattleEndN"
    "otify\0224\n\tBattleRes\030\001 \001(\0162!.pb.ELevyTeamI"
    "nstanceBattleResult\022\021\n\tBattleNum\030\002 \001(\r\"e"
    "\n\034TLevyTeamInstanceAbortNotify\022\016\n\006TeamId"
    "\030\001 \001(\004\0225\n\013AbortReason\030\002 \001(\0162 .pb.ELevyTe"
    "amInstanceAbortReason\"\226\001\n!TLevyTeamInsta"
    "nceGetInviteListReq\022\016\n\006RoomId\030\001 \001(\004\022\016\n\006T"
    "eamId\030\002 \001(\004\0224\n\nInviteType\030\003 \001(\0162 .pb.ELe"
    "vyTeamInstanceGetListType\022\013\n\003Num\030\004 \001(\r\022\016"
    "\n\006Offset\030\005 \001(\r\"I\n!TLevyTeamInstanceGetIn"
    "viteListRsp\022$\n\007UserArr\030\001 \003(\0132\023.pb.TUserS"
    "impleInfo\"P\n\036TLevyTeamInstanceTeamInvite"
    "Req\022\016\n\006RoomId\030\001 \001(\004\022\016\n\006TeamId\030\002 \001(\004\022\016\n\006U"
    "idArr\030\003 \003(\004\"r\n\035TLevyTeamInstanceInviteNo"
    "tify\022\016\n\006RoomId\030\001 \001(\004\022\016\n\006TeamId\030\002 \001(\004\0221\n\010"
    "TeamInfo\030\003 \001(\0132\037.pb.TSimpleLevyInstanceT"
    "eamInfo\"\320\001\n\030TLevyTeamInstanceAtkInfo\022\016\n\006"
    "TeamId\030\001 \001(\004\0224\n\tBattleRes\030\002 \001(\0162!.pb.ELe"
    "vyTeamInstanceBattleResult\022\017\n\007AtkTime\030\003 "
    "\001(\004\022#\n\006MemArr\030\004 \003(\0132\023.pb.TUserSimpleInfo"
    "\022\021\n\tBattleNum\030\005 \001(\r\022%\n\010TeamMode\030\006 \001(\0162\023."
    "pb.ECommonTeamMode\"=\n\036TLevyTeamInstanceG"
    "etAtkListReq\022\013\n\003Num\030\001 \001(\r\022\016\n\006Offset\030\002 \001("
    "\r\"O\n\036TLevyTeamInstanceGetAtkListRsp\022-\n\007A"
    "tkList\030\001 \003(\0132\034.pb.TLevyTeamInstanceAtkIn"
    "fo\"^\n#TLevyTeamInstanceGetBattleRecordRe"
    "q\022\016\n\006TeamId\030\001 \001(\004\022\021\n\tRecordNum\030\002 \001(\r\022\024\n\014"
    "RecordOffset\030\003 \001(\r\"[\n\033TLevyTeamInstanceR"
    "ewardInfo\022$\n\tRewardArr\030\001 \003(\0132\021.pb.TCommo"
    "nReward\022\026\n\016CrossLevyScore\030\002 \001(\r\"\266\001\n#TLev"
    "yTeamInstanceGetBattleRecordRsp\0224\n\tBattl"
    "eRes\030\001 \001(\0162!.pb.ELevyTeamInstanceBattleR"
    "esult\0223\n\nRewardInfo\030\002 \001(\0132\037.pb.TLevyTeam"
    "InstanceRewardInfo\022$\n\tResultArr\030\003 \003(\0132\021."
    "pb.TBattleResult\"\260\001\n#TLevyTeamInstanceHa"
    "llMemberInfoData\022%\n\010UserInfo\030\001 \001(\0132\023.pb."
    "TUserSimpleInfo\022$\n\007MemMode\030\002 \001(\0162\023.pb.EC"
    "ommonTeamMode\022\020\n\010SquadNum\030\003 \001(\r\022\027\n\017Total"
    "FightForce\030\004 \001(\004\022\021\n\tTeamOrder\030\005 \001(\004\"_\n!T"
    "LevyTeamInstanceTeamSpecificInfo\022\022\n\nInst"
    "anceId\030\001 \001(\r\022\024\n\014MonsterIdArr\030\002 \003(\r\022\020\n\010Da"
    "yIndex\030\003 \001(\r\"@\n\036TLevyTeamInstanceQuickMa"
    "tchReq\022\016\n\006RoomId\030\001 \001(\004\022\016\n\006TeamId\030\002 \001(\004\"\204"
    "\001\n\036TLevyTeamInstanceQuickMatchRsp\0225\n\tErr"
    "orCode\030\001 \001(\0162\".pb.EJoinLevyInstanceTeamE"
    "rrorCode\022+\n\010TeamInfo\030\002 \001(\0132\031.pb.TLevyIns"
    "tanceTeamInfo*\215\002\n\036EJoinLevyInstanceTeamE"
    "rrorCode\022\033\n\027LEVY_TEAM_ERROR_CODE_OK\020\000\022\035\n"
    "\031LEVY_TEAM_ERROR_CODE_FULL\020\001\022!\n\035LEVY_TEA"
    "M_ERROR_CODE_NOTEXIST\020\002\022\037\n\033LEVY_TEAM_ERR"
    "OR_CODE_INTEAM\020\003\022 \n\034LEVY_TEAM_ERROR_CODE"
    "_NOTOPEN\020\004\022#\n\037LEVY_TEAM_ERROR_CODE_LVNOT"
    "MATCH\020\005\022$\n LEVY_TEAM_ERROR_CODE_PRIVATET"
    "EAM\020\006*\203\001\n\034ELevyTeamInstanceGetListType\022\036"
    "\n\032LEVY_TEAM_GETLIST_TYPE_ALL\020\001\022 \n\034LEVY_T"
    "EAM_GETLIST_TYPE_GUILD\020\002\022!\n\035LEVY_TEAM_GE"
    "TLIST_TYPE_FRIEND\020\003*\202\001\n\036ELevyTeamKickOrQ"
    "uitTeamRetCode\022\031\n\025LevyTeamKQRET_CODE_OK\020"
    "\000\022#\n\037LevyTeamKQRET_CODE_TEAMNOTEXIST\020\001\022 "
    "\n\034LevyTeamKQRET_CODE_NOTINTEAM\020\002*l\n\035ELev"
    "yTeamInstanceBattleResult\022%\n!LevyTeamIns"
    "tanceBattleResult_FAIL\020\000\022$\n LevyTeamInst"
    "anceBattleResult_WIN\020\001*q\n\034ELevyTeamInsta"
    "nceAbortReason\022\031\n\025LTI_ABORT_BATTLE_FAIL\020"
    "\001\022\033\n\027LTI_ABORT_INITTEAM_FAIL\020\002\022\031\n\025LTI_AB"
    "ORT_MEMEND_FAIL\020\003", 4977);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/LevyTeamInstance.proto", &protobuf_RegisterTypes);
  TSimpleLevyInstanceTeamInfo::default_instance_ = new TSimpleLevyInstanceTeamInfo();
  TLevyTeamInstanceMemberInfo::default_instance_ = new TLevyTeamInstanceMemberInfo();
  TLevyInstanceTeamInfo::default_instance_ = new TLevyInstanceTeamInfo();
  TLevyTeamInstanceGetInfoRsp::default_instance_ = new TLevyTeamInstanceGetInfoRsp();
  TLevyTeamInstanceGetTeamArrReq::default_instance_ = new TLevyTeamInstanceGetTeamArrReq();
  TLevyTeamInstanceGetTeamArrRsp::default_instance_ = new TLevyTeamInstanceGetTeamArrRsp();
  TLevyTeamInstanceCreateTeamReq::default_instance_ = new TLevyTeamInstanceCreateTeamReq();
  TLevyTeamInstanceCreateTeamRsp::default_instance_ = new TLevyTeamInstanceCreateTeamRsp();
  TLevyTeamInstanceJoinTeamReq::default_instance_ = new TLevyTeamInstanceJoinTeamReq();
  TLevyTeamInstanceJoinTeamRsp::default_instance_ = new TLevyTeamInstanceJoinTeamRsp();
  TLevyTeamInstanceKickReq::default_instance_ = new TLevyTeamInstanceKickReq();
  TLevyTeamInstanceQuitTeamReq::default_instance_ = new TLevyTeamInstanceQuitTeamReq();
  TLevyTeamInstanceKickOrQuitTeamRsp::default_instance_ = new TLevyTeamInstanceKickOrQuitTeamRsp();
  TLevyTeamInstanceChangeTeamModeReq::default_instance_ = new TLevyTeamInstanceChangeTeamModeReq();
  TLevyTeamInstanceChangeTeamModeRsp::default_instance_ = new TLevyTeamInstanceChangeTeamModeRsp();
  TLevyTeamInstanceSetTeamMemberStatusReq::default_instance_ = new TLevyTeamInstanceSetTeamMemberStatusReq();
  TLevyTeamInstanceSetTeamMemberStatusRsp::default_instance_ = new TLevyTeamInstanceSetTeamMemberStatusRsp();
  TLevyTeamInstanceSetTeamStatusReq::default_instance_ = new TLevyTeamInstanceSetTeamStatusReq();
  TLevyTeamInstanceSetTeamStatusRsp::default_instance_ = new TLevyTeamInstanceSetTeamStatusRsp();
  TLevyTeamInstanceTeamStartReq::default_instance_ = new TLevyTeamInstanceTeamStartReq();
  TLevyTeamInstanceBattleRecordNotify::default_instance_ = new TLevyTeamInstanceBattleRecordNotify();
  TLevyTeamInstanceBattleEndNotify::default_instance_ = new TLevyTeamInstanceBattleEndNotify();
  TLevyTeamInstanceAbortNotify::default_instance_ = new TLevyTeamInstanceAbortNotify();
  TLevyTeamInstanceGetInviteListReq::default_instance_ = new TLevyTeamInstanceGetInviteListReq();
  TLevyTeamInstanceGetInviteListRsp::default_instance_ = new TLevyTeamInstanceGetInviteListRsp();
  TLevyTeamInstanceTeamInviteReq::default_instance_ = new TLevyTeamInstanceTeamInviteReq();
  TLevyTeamInstanceInviteNotify::default_instance_ = new TLevyTeamInstanceInviteNotify();
  TLevyTeamInstanceAtkInfo::default_instance_ = new TLevyTeamInstanceAtkInfo();
  TLevyTeamInstanceGetAtkListReq::default_instance_ = new TLevyTeamInstanceGetAtkListReq();
  TLevyTeamInstanceGetAtkListRsp::default_instance_ = new TLevyTeamInstanceGetAtkListRsp();
  TLevyTeamInstanceGetBattleRecordReq::default_instance_ = new TLevyTeamInstanceGetBattleRecordReq();
  TLevyTeamInstanceRewardInfo::default_instance_ = new TLevyTeamInstanceRewardInfo();
  TLevyTeamInstanceGetBattleRecordRsp::default_instance_ = new TLevyTeamInstanceGetBattleRecordRsp();
  TLevyTeamInstanceHallMemberInfoData::default_instance_ = new TLevyTeamInstanceHallMemberInfoData();
  TLevyTeamInstanceTeamSpecificInfo::default_instance_ = new TLevyTeamInstanceTeamSpecificInfo();
  TLevyTeamInstanceQuickMatchReq::default_instance_ = new TLevyTeamInstanceQuickMatchReq();
  TLevyTeamInstanceQuickMatchRsp::default_instance_ = new TLevyTeamInstanceQuickMatchRsp();
  TSimpleLevyInstanceTeamInfo::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceMemberInfo::default_instance_->InitAsDefaultInstance();
  TLevyInstanceTeamInfo::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceGetTeamArrReq::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceGetTeamArrRsp::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceCreateTeamReq::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceCreateTeamRsp::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceJoinTeamReq::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceJoinTeamRsp::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceKickReq::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceQuitTeamReq::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceKickOrQuitTeamRsp::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceChangeTeamModeReq::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceChangeTeamModeRsp::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceSetTeamMemberStatusReq::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceSetTeamMemberStatusRsp::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceSetTeamStatusReq::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceSetTeamStatusRsp::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceTeamStartReq::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceBattleRecordNotify::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceBattleEndNotify::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceAbortNotify::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceGetInviteListReq::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceGetInviteListRsp::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceTeamInviteReq::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceInviteNotify::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceAtkInfo::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceGetAtkListReq::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceGetAtkListRsp::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceGetBattleRecordReq::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceRewardInfo::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceGetBattleRecordRsp::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceHallMemberInfoData::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceTeamSpecificInfo::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceQuickMatchReq::default_instance_->InitAsDefaultInstance();
  TLevyTeamInstanceQuickMatchRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fLevyTeamInstance_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fLevyTeamInstance_2eproto {
  StaticDescriptorInitializer_net_2fLevyTeamInstance_2eproto() {
    protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  }
} static_descriptor_initializer_net_2fLevyTeamInstance_2eproto_;
const ::google::protobuf::EnumDescriptor* EJoinLevyInstanceTeamErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EJoinLevyInstanceTeamErrorCode_descriptor_;
}
bool EJoinLevyInstanceTeamErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELevyTeamInstanceGetListType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ELevyTeamInstanceGetListType_descriptor_;
}
bool ELevyTeamInstanceGetListType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELevyTeamKickOrQuitTeamRetCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ELevyTeamKickOrQuitTeamRetCode_descriptor_;
}
bool ELevyTeamKickOrQuitTeamRetCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELevyTeamInstanceBattleResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ELevyTeamInstanceBattleResult_descriptor_;
}
bool ELevyTeamInstanceBattleResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELevyTeamInstanceAbortReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ELevyTeamInstanceAbortReason_descriptor_;
}
bool ELevyTeamInstanceAbortReason_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TSimpleLevyInstanceTeamInfo::kRoomIdFieldNumber;
const int TSimpleLevyInstanceTeamInfo::kTeamIdFieldNumber;
const int TSimpleLevyInstanceTeamInfo::kLeaderUserInfoFieldNumber;
const int TSimpleLevyInstanceTeamInfo::kTeamUserNumFieldNumber;
const int TSimpleLevyInstanceTeamInfo::kInstanceIdFieldNumber;
#endif  // !_MSC_VER

TSimpleLevyInstanceTeamInfo::TSimpleLevyInstanceTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSimpleLevyInstanceTeamInfo)
}

void TSimpleLevyInstanceTeamInfo::InitAsDefaultInstance() {
  leaderuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TSimpleLevyInstanceTeamInfo::TSimpleLevyInstanceTeamInfo(const TSimpleLevyInstanceTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSimpleLevyInstanceTeamInfo)
}

void TSimpleLevyInstanceTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  leaderuserinfo_ = NULL;
  teamusernum_ = 0u;
  instanceid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSimpleLevyInstanceTeamInfo::~TSimpleLevyInstanceTeamInfo() {
  // @@protoc_insertion_point(destructor:pb.TSimpleLevyInstanceTeamInfo)
  SharedDtor();
}

void TSimpleLevyInstanceTeamInfo::SharedDtor() {
  if (this != default_instance_) {
    delete leaderuserinfo_;
  }
}

void TSimpleLevyInstanceTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSimpleLevyInstanceTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSimpleLevyInstanceTeamInfo_descriptor_;
}

const TSimpleLevyInstanceTeamInfo& TSimpleLevyInstanceTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TSimpleLevyInstanceTeamInfo* TSimpleLevyInstanceTeamInfo::default_instance_ = NULL;

TSimpleLevyInstanceTeamInfo* TSimpleLevyInstanceTeamInfo::New() const {
  return new TSimpleLevyInstanceTeamInfo;
}

void TSimpleLevyInstanceTeamInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSimpleLevyInstanceTeamInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(roomid_, teamid_);
    ZR_(teamusernum_, instanceid_);
    if (has_leaderuserinfo()) {
      if (leaderuserinfo_ != NULL) leaderuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSimpleLevyInstanceTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSimpleLevyInstanceTeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_LeaderUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo LeaderUserInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_LeaderUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaderuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TeamUserNum;
        break;
      }

      // optional uint32 TeamUserNum = 4;
      case 4: {
        if (tag == 32) {
         parse_TeamUserNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamusernum_)));
          set_has_teamusernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_InstanceId;
        break;
      }

      // optional uint32 InstanceId = 5;
      case 5: {
        if (tag == 40) {
         parse_InstanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSimpleLevyInstanceTeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSimpleLevyInstanceTeamInfo)
  return false;
#undef DO_
}

void TSimpleLevyInstanceTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSimpleLevyInstanceTeamInfo)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  // optional .pb.TUserSimpleInfo LeaderUserInfo = 3;
  if (has_leaderuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->leaderuserinfo(), output);
  }

  // optional uint32 TeamUserNum = 4;
  if (has_teamusernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->teamusernum(), output);
  }

  // optional uint32 InstanceId = 5;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSimpleLevyInstanceTeamInfo)
}

::google::protobuf::uint8* TSimpleLevyInstanceTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSimpleLevyInstanceTeamInfo)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  // optional .pb.TUserSimpleInfo LeaderUserInfo = 3;
  if (has_leaderuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->leaderuserinfo(), target);
  }

  // optional uint32 TeamUserNum = 4;
  if (has_teamusernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->teamusernum(), target);
  }

  // optional uint32 InstanceId = 5;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSimpleLevyInstanceTeamInfo)
  return target;
}

int TSimpleLevyInstanceTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .pb.TUserSimpleInfo LeaderUserInfo = 3;
    if (has_leaderuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaderuserinfo());
    }

    // optional uint32 TeamUserNum = 4;
    if (has_teamusernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamusernum());
    }

    // optional uint32 InstanceId = 5;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSimpleLevyInstanceTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSimpleLevyInstanceTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSimpleLevyInstanceTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSimpleLevyInstanceTeamInfo::MergeFrom(const TSimpleLevyInstanceTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_leaderuserinfo()) {
      mutable_leaderuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.leaderuserinfo());
    }
    if (from.has_teamusernum()) {
      set_teamusernum(from.teamusernum());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSimpleLevyInstanceTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSimpleLevyInstanceTeamInfo::CopyFrom(const TSimpleLevyInstanceTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSimpleLevyInstanceTeamInfo::IsInitialized() const {

  return true;
}

void TSimpleLevyInstanceTeamInfo::Swap(TSimpleLevyInstanceTeamInfo* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(leaderuserinfo_, other->leaderuserinfo_);
    std::swap(teamusernum_, other->teamusernum_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSimpleLevyInstanceTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSimpleLevyInstanceTeamInfo_descriptor_;
  metadata.reflection = TSimpleLevyInstanceTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceMemberInfo::kUserInfoFieldNumber;
const int TLevyTeamInstanceMemberInfo::kSquadNumFieldNumber;
const int TLevyTeamInstanceMemberInfo::kTotalFightForceFieldNumber;
const int TLevyTeamInstanceMemberInfo::kTeamModeFieldNumber;
const int TLevyTeamInstanceMemberInfo::kMemberStatusFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceMemberInfo::TLevyTeamInstanceMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceMemberInfo)
}

void TLevyTeamInstanceMemberInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TLevyTeamInstanceMemberInfo::TLevyTeamInstanceMemberInfo(const TLevyTeamInstanceMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceMemberInfo)
}

void TLevyTeamInstanceMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  squadnum_ = 0u;
  totalfightforce_ = GOOGLE_ULONGLONG(0);
  teammode_ = 0;
  memberstatus_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceMemberInfo::~TLevyTeamInstanceMemberInfo() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceMemberInfo)
  SharedDtor();
}

void TLevyTeamInstanceMemberInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TLevyTeamInstanceMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceMemberInfo_descriptor_;
}

const TLevyTeamInstanceMemberInfo& TLevyTeamInstanceMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceMemberInfo* TLevyTeamInstanceMemberInfo::default_instance_ = NULL;

TLevyTeamInstanceMemberInfo* TLevyTeamInstanceMemberInfo::New() const {
  return new TLevyTeamInstanceMemberInfo;
}

void TLevyTeamInstanceMemberInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLevyTeamInstanceMemberInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(totalfightforce_, teammode_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
    memberstatus_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceMemberInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SquadNum;
        break;
      }

      // optional uint32 SquadNum = 2;
      case 2: {
        if (tag == 16) {
         parse_SquadNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &squadnum_)));
          set_has_squadnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TotalFightForce;
        break;
      }

      // optional uint64 TotalFightForce = 3;
      case 3: {
        if (tag == 24) {
         parse_TotalFightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalfightforce_)));
          set_has_totalfightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TeamMode;
        break;
      }

      // optional .pb.ECommonTeamMode TeamMode = 4;
      case 4: {
        if (tag == 32) {
         parse_TeamMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ECommonTeamMode_IsValid(value)) {
            set_teammode(static_cast< ::pb::ECommonTeamMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_MemberStatus;
        break;
      }

      // optional .pb.EHallMemberReadyStatus MemberStatus = 5;
      case 5: {
        if (tag == 40) {
         parse_MemberStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EHallMemberReadyStatus_IsValid(value)) {
            set_memberstatus(static_cast< ::pb::EHallMemberReadyStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceMemberInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceMemberInfo)
  return false;
#undef DO_
}

void TLevyTeamInstanceMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceMemberInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint32 SquadNum = 2;
  if (has_squadnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->squadnum(), output);
  }

  // optional uint64 TotalFightForce = 3;
  if (has_totalfightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->totalfightforce(), output);
  }

  // optional .pb.ECommonTeamMode TeamMode = 4;
  if (has_teammode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->teammode(), output);
  }

  // optional .pb.EHallMemberReadyStatus MemberStatus = 5;
  if (has_memberstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->memberstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceMemberInfo)
}

::google::protobuf::uint8* TLevyTeamInstanceMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceMemberInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint32 SquadNum = 2;
  if (has_squadnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->squadnum(), target);
  }

  // optional uint64 TotalFightForce = 3;
  if (has_totalfightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->totalfightforce(), target);
  }

  // optional .pb.ECommonTeamMode TeamMode = 4;
  if (has_teammode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->teammode(), target);
  }

  // optional .pb.EHallMemberReadyStatus MemberStatus = 5;
  if (has_memberstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->memberstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceMemberInfo)
  return target;
}

int TLevyTeamInstanceMemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 SquadNum = 2;
    if (has_squadnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->squadnum());
    }

    // optional uint64 TotalFightForce = 3;
    if (has_totalfightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalfightforce());
    }

    // optional .pb.ECommonTeamMode TeamMode = 4;
    if (has_teammode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->teammode());
    }

    // optional .pb.EHallMemberReadyStatus MemberStatus = 5;
    if (has_memberstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->memberstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceMemberInfo::MergeFrom(const TLevyTeamInstanceMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_squadnum()) {
      set_squadnum(from.squadnum());
    }
    if (from.has_totalfightforce()) {
      set_totalfightforce(from.totalfightforce());
    }
    if (from.has_teammode()) {
      set_teammode(from.teammode());
    }
    if (from.has_memberstatus()) {
      set_memberstatus(from.memberstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceMemberInfo::CopyFrom(const TLevyTeamInstanceMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceMemberInfo::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceMemberInfo::Swap(TLevyTeamInstanceMemberInfo* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(squadnum_, other->squadnum_);
    std::swap(totalfightforce_, other->totalfightforce_);
    std::swap(teammode_, other->teammode_);
    std::swap(memberstatus_, other->memberstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceMemberInfo_descriptor_;
  metadata.reflection = TLevyTeamInstanceMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyInstanceTeamInfo::kRoomIdFieldNumber;
const int TLevyInstanceTeamInfo::kTeamIdFieldNumber;
const int TLevyInstanceTeamInfo::kLeaderUidFieldNumber;
const int TLevyInstanceTeamInfo::kTeamUserArrFieldNumber;
const int TLevyInstanceTeamInfo::kInstanceIdFieldNumber;
const int TLevyInstanceTeamInfo::kTeamPrivateTypeFieldNumber;
#endif  // !_MSC_VER

TLevyInstanceTeamInfo::TLevyInstanceTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyInstanceTeamInfo)
}

void TLevyInstanceTeamInfo::InitAsDefaultInstance() {
}

TLevyInstanceTeamInfo::TLevyInstanceTeamInfo(const TLevyInstanceTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyInstanceTeamInfo)
}

void TLevyInstanceTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  leaderuid_ = GOOGLE_ULONGLONG(0);
  instanceid_ = 0u;
  teamprivatetype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyInstanceTeamInfo::~TLevyInstanceTeamInfo() {
  // @@protoc_insertion_point(destructor:pb.TLevyInstanceTeamInfo)
  SharedDtor();
}

void TLevyInstanceTeamInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyInstanceTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyInstanceTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyInstanceTeamInfo_descriptor_;
}

const TLevyInstanceTeamInfo& TLevyInstanceTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyInstanceTeamInfo* TLevyInstanceTeamInfo::default_instance_ = NULL;

TLevyInstanceTeamInfo* TLevyInstanceTeamInfo::New() const {
  return new TLevyInstanceTeamInfo;
}

void TLevyInstanceTeamInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLevyInstanceTeamInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(roomid_, leaderuid_);
    instanceid_ = 0u;
    teamprivatetype_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  teamuserarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyInstanceTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyInstanceTeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_LeaderUid;
        break;
      }

      // optional uint64 LeaderUid = 3;
      case 3: {
        if (tag == 24) {
         parse_LeaderUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leaderuid_)));
          set_has_leaderuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_TeamUserArr;
        break;
      }

      // repeated .pb.TLevyTeamInstanceMemberInfo TeamUserArr = 4;
      case 4: {
        if (tag == 34) {
         parse_TeamUserArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teamuserarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_TeamUserArr;
        if (input->ExpectTag(40)) goto parse_InstanceId;
        break;
      }

      // optional uint32 InstanceId = 5;
      case 5: {
        if (tag == 40) {
         parse_InstanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_TeamPrivateType;
        break;
      }

      // optional .pb.EHallTeamType TeamPrivateType = 6;
      case 6: {
        if (tag == 48) {
         parse_TeamPrivateType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EHallTeamType_IsValid(value)) {
            set_teamprivatetype(static_cast< ::pb::EHallTeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyInstanceTeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyInstanceTeamInfo)
  return false;
#undef DO_
}

void TLevyInstanceTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyInstanceTeamInfo)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  // optional uint64 LeaderUid = 3;
  if (has_leaderuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->leaderuid(), output);
  }

  // repeated .pb.TLevyTeamInstanceMemberInfo TeamUserArr = 4;
  for (int i = 0; i < this->teamuserarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->teamuserarr(i), output);
  }

  // optional uint32 InstanceId = 5;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->instanceid(), output);
  }

  // optional .pb.EHallTeamType TeamPrivateType = 6;
  if (has_teamprivatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->teamprivatetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyInstanceTeamInfo)
}

::google::protobuf::uint8* TLevyInstanceTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyInstanceTeamInfo)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  // optional uint64 LeaderUid = 3;
  if (has_leaderuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->leaderuid(), target);
  }

  // repeated .pb.TLevyTeamInstanceMemberInfo TeamUserArr = 4;
  for (int i = 0; i < this->teamuserarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->teamuserarr(i), target);
  }

  // optional uint32 InstanceId = 5;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->instanceid(), target);
  }

  // optional .pb.EHallTeamType TeamPrivateType = 6;
  if (has_teamprivatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->teamprivatetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyInstanceTeamInfo)
  return target;
}

int TLevyInstanceTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 LeaderUid = 3;
    if (has_leaderuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leaderuid());
    }

    // optional uint32 InstanceId = 5;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instanceid());
    }

    // optional .pb.EHallTeamType TeamPrivateType = 6;
    if (has_teamprivatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->teamprivatetype());
    }

  }
  // repeated .pb.TLevyTeamInstanceMemberInfo TeamUserArr = 4;
  total_size += 1 * this->teamuserarr_size();
  for (int i = 0; i < this->teamuserarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teamuserarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyInstanceTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyInstanceTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyInstanceTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyInstanceTeamInfo::MergeFrom(const TLevyInstanceTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamuserarr_.MergeFrom(from.teamuserarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_leaderuid()) {
      set_leaderuid(from.leaderuid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_teamprivatetype()) {
      set_teamprivatetype(from.teamprivatetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyInstanceTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyInstanceTeamInfo::CopyFrom(const TLevyInstanceTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyInstanceTeamInfo::IsInitialized() const {

  return true;
}

void TLevyInstanceTeamInfo::Swap(TLevyInstanceTeamInfo* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(leaderuid_, other->leaderuid_);
    teamuserarr_.Swap(&other->teamuserarr_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(teamprivatetype_, other->teamprivatetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyInstanceTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyInstanceTeamInfo_descriptor_;
  metadata.reflection = TLevyInstanceTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceGetInfoRsp::kMonsterIdFieldNumber;
const int TLevyTeamInstanceGetInfoRsp::kAtkInstanceNumFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceGetInfoRsp::TLevyTeamInstanceGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceGetInfoRsp)
}

void TLevyTeamInstanceGetInfoRsp::InitAsDefaultInstance() {
}

TLevyTeamInstanceGetInfoRsp::TLevyTeamInstanceGetInfoRsp(const TLevyTeamInstanceGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceGetInfoRsp)
}

void TLevyTeamInstanceGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  atkinstancenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceGetInfoRsp::~TLevyTeamInstanceGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceGetInfoRsp)
  SharedDtor();
}

void TLevyTeamInstanceGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceGetInfoRsp_descriptor_;
}

const TLevyTeamInstanceGetInfoRsp& TLevyTeamInstanceGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceGetInfoRsp* TLevyTeamInstanceGetInfoRsp::default_instance_ = NULL;

TLevyTeamInstanceGetInfoRsp* TLevyTeamInstanceGetInfoRsp::New() const {
  return new TLevyTeamInstanceGetInfoRsp;
}

void TLevyTeamInstanceGetInfoRsp::Clear() {
  atkinstancenum_ = 0u;
  monsterid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 MonsterId = 1;
      case 1: {
        if (tag == 8) {
         parse_MonsterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_monsterid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_monsterid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_MonsterId;
        if (input->ExpectTag(16)) goto parse_AtkInstanceNum;
        break;
      }

      // optional uint32 AtkInstanceNum = 2;
      case 2: {
        if (tag == 16) {
         parse_AtkInstanceNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atkinstancenum_)));
          set_has_atkinstancenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceGetInfoRsp)
  return false;
#undef DO_
}

void TLevyTeamInstanceGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceGetInfoRsp)
  // repeated uint32 MonsterId = 1;
  for (int i = 0; i < this->monsterid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->monsterid(i), output);
  }

  // optional uint32 AtkInstanceNum = 2;
  if (has_atkinstancenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->atkinstancenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceGetInfoRsp)
}

::google::protobuf::uint8* TLevyTeamInstanceGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceGetInfoRsp)
  // repeated uint32 MonsterId = 1;
  for (int i = 0; i < this->monsterid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->monsterid(i), target);
  }

  // optional uint32 AtkInstanceNum = 2;
  if (has_atkinstancenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->atkinstancenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceGetInfoRsp)
  return target;
}

int TLevyTeamInstanceGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 AtkInstanceNum = 2;
    if (has_atkinstancenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atkinstancenum());
    }

  }
  // repeated uint32 MonsterId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->monsterid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->monsterid(i));
    }
    total_size += 1 * this->monsterid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceGetInfoRsp::MergeFrom(const TLevyTeamInstanceGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterid_.MergeFrom(from.monsterid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_atkinstancenum()) {
      set_atkinstancenum(from.atkinstancenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceGetInfoRsp::CopyFrom(const TLevyTeamInstanceGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceGetInfoRsp::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceGetInfoRsp::Swap(TLevyTeamInstanceGetInfoRsp* other) {
  if (other != this) {
    monsterid_.Swap(&other->monsterid_);
    std::swap(atkinstancenum_, other->atkinstancenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceGetInfoRsp_descriptor_;
  metadata.reflection = TLevyTeamInstanceGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceGetTeamArrReq::kSelectTypeFieldNumber;
const int TLevyTeamInstanceGetTeamArrReq::kNumFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceGetTeamArrReq::TLevyTeamInstanceGetTeamArrReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceGetTeamArrReq)
}

void TLevyTeamInstanceGetTeamArrReq::InitAsDefaultInstance() {
}

TLevyTeamInstanceGetTeamArrReq::TLevyTeamInstanceGetTeamArrReq(const TLevyTeamInstanceGetTeamArrReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceGetTeamArrReq)
}

void TLevyTeamInstanceGetTeamArrReq::SharedCtor() {
  _cached_size_ = 0;
  selecttype_ = 1;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceGetTeamArrReq::~TLevyTeamInstanceGetTeamArrReq() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceGetTeamArrReq)
  SharedDtor();
}

void TLevyTeamInstanceGetTeamArrReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceGetTeamArrReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceGetTeamArrReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceGetTeamArrReq_descriptor_;
}

const TLevyTeamInstanceGetTeamArrReq& TLevyTeamInstanceGetTeamArrReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceGetTeamArrReq* TLevyTeamInstanceGetTeamArrReq::default_instance_ = NULL;

TLevyTeamInstanceGetTeamArrReq* TLevyTeamInstanceGetTeamArrReq::New() const {
  return new TLevyTeamInstanceGetTeamArrReq;
}

void TLevyTeamInstanceGetTeamArrReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    selecttype_ = 1;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceGetTeamArrReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceGetTeamArrReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ELevyTeamInstanceGetListType SelectType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ELevyTeamInstanceGetListType_IsValid(value)) {
            set_selecttype(static_cast< ::pb::ELevyTeamInstanceGetListType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceGetTeamArrReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceGetTeamArrReq)
  return false;
#undef DO_
}

void TLevyTeamInstanceGetTeamArrReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceGetTeamArrReq)
  // optional .pb.ELevyTeamInstanceGetListType SelectType = 1;
  if (has_selecttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->selecttype(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceGetTeamArrReq)
}

::google::protobuf::uint8* TLevyTeamInstanceGetTeamArrReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceGetTeamArrReq)
  // optional .pb.ELevyTeamInstanceGetListType SelectType = 1;
  if (has_selecttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->selecttype(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceGetTeamArrReq)
  return target;
}

int TLevyTeamInstanceGetTeamArrReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ELevyTeamInstanceGetListType SelectType = 1;
    if (has_selecttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->selecttype());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceGetTeamArrReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceGetTeamArrReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceGetTeamArrReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceGetTeamArrReq::MergeFrom(const TLevyTeamInstanceGetTeamArrReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selecttype()) {
      set_selecttype(from.selecttype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceGetTeamArrReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceGetTeamArrReq::CopyFrom(const TLevyTeamInstanceGetTeamArrReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceGetTeamArrReq::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceGetTeamArrReq::Swap(TLevyTeamInstanceGetTeamArrReq* other) {
  if (other != this) {
    std::swap(selecttype_, other->selecttype_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceGetTeamArrReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceGetTeamArrReq_descriptor_;
  metadata.reflection = TLevyTeamInstanceGetTeamArrReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceGetTeamArrRsp::kTeamArrFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceGetTeamArrRsp::TLevyTeamInstanceGetTeamArrRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceGetTeamArrRsp)
}

void TLevyTeamInstanceGetTeamArrRsp::InitAsDefaultInstance() {
}

TLevyTeamInstanceGetTeamArrRsp::TLevyTeamInstanceGetTeamArrRsp(const TLevyTeamInstanceGetTeamArrRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceGetTeamArrRsp)
}

void TLevyTeamInstanceGetTeamArrRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceGetTeamArrRsp::~TLevyTeamInstanceGetTeamArrRsp() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceGetTeamArrRsp)
  SharedDtor();
}

void TLevyTeamInstanceGetTeamArrRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceGetTeamArrRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceGetTeamArrRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceGetTeamArrRsp_descriptor_;
}

const TLevyTeamInstanceGetTeamArrRsp& TLevyTeamInstanceGetTeamArrRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceGetTeamArrRsp* TLevyTeamInstanceGetTeamArrRsp::default_instance_ = NULL;

TLevyTeamInstanceGetTeamArrRsp* TLevyTeamInstanceGetTeamArrRsp::New() const {
  return new TLevyTeamInstanceGetTeamArrRsp;
}

void TLevyTeamInstanceGetTeamArrRsp::Clear() {
  teamarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceGetTeamArrRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceGetTeamArrRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TSimpleLevyInstanceTeamInfo TeamArr = 1;
      case 1: {
        if (tag == 10) {
         parse_TeamArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teamarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_TeamArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceGetTeamArrRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceGetTeamArrRsp)
  return false;
#undef DO_
}

void TLevyTeamInstanceGetTeamArrRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceGetTeamArrRsp)
  // repeated .pb.TSimpleLevyInstanceTeamInfo TeamArr = 1;
  for (int i = 0; i < this->teamarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teamarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceGetTeamArrRsp)
}

::google::protobuf::uint8* TLevyTeamInstanceGetTeamArrRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceGetTeamArrRsp)
  // repeated .pb.TSimpleLevyInstanceTeamInfo TeamArr = 1;
  for (int i = 0; i < this->teamarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teamarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceGetTeamArrRsp)
  return target;
}

int TLevyTeamInstanceGetTeamArrRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TSimpleLevyInstanceTeamInfo TeamArr = 1;
  total_size += 1 * this->teamarr_size();
  for (int i = 0; i < this->teamarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teamarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceGetTeamArrRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceGetTeamArrRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceGetTeamArrRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceGetTeamArrRsp::MergeFrom(const TLevyTeamInstanceGetTeamArrRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamarr_.MergeFrom(from.teamarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceGetTeamArrRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceGetTeamArrRsp::CopyFrom(const TLevyTeamInstanceGetTeamArrRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceGetTeamArrRsp::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceGetTeamArrRsp::Swap(TLevyTeamInstanceGetTeamArrRsp* other) {
  if (other != this) {
    teamarr_.Swap(&other->teamarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceGetTeamArrRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceGetTeamArrRsp_descriptor_;
  metadata.reflection = TLevyTeamInstanceGetTeamArrRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceCreateTeamReq::kInstanceIdFieldNumber;
const int TLevyTeamInstanceCreateTeamReq::kTeamPrivateTypeFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceCreateTeamReq::TLevyTeamInstanceCreateTeamReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceCreateTeamReq)
}

void TLevyTeamInstanceCreateTeamReq::InitAsDefaultInstance() {
}

TLevyTeamInstanceCreateTeamReq::TLevyTeamInstanceCreateTeamReq(const TLevyTeamInstanceCreateTeamReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceCreateTeamReq)
}

void TLevyTeamInstanceCreateTeamReq::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = 0u;
  teamprivatetype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceCreateTeamReq::~TLevyTeamInstanceCreateTeamReq() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceCreateTeamReq)
  SharedDtor();
}

void TLevyTeamInstanceCreateTeamReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceCreateTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceCreateTeamReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceCreateTeamReq_descriptor_;
}

const TLevyTeamInstanceCreateTeamReq& TLevyTeamInstanceCreateTeamReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceCreateTeamReq* TLevyTeamInstanceCreateTeamReq::default_instance_ = NULL;

TLevyTeamInstanceCreateTeamReq* TLevyTeamInstanceCreateTeamReq::New() const {
  return new TLevyTeamInstanceCreateTeamReq;
}

void TLevyTeamInstanceCreateTeamReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    instanceid_ = 0u;
    teamprivatetype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceCreateTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceCreateTeamReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 InstanceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamPrivateType;
        break;
      }

      // optional .pb.EHallTeamType TeamPrivateType = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamPrivateType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EHallTeamType_IsValid(value)) {
            set_teamprivatetype(static_cast< ::pb::EHallTeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceCreateTeamReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceCreateTeamReq)
  return false;
#undef DO_
}

void TLevyTeamInstanceCreateTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceCreateTeamReq)
  // optional uint32 InstanceId = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->instanceid(), output);
  }

  // optional .pb.EHallTeamType TeamPrivateType = 2;
  if (has_teamprivatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->teamprivatetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceCreateTeamReq)
}

::google::protobuf::uint8* TLevyTeamInstanceCreateTeamReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceCreateTeamReq)
  // optional uint32 InstanceId = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->instanceid(), target);
  }

  // optional .pb.EHallTeamType TeamPrivateType = 2;
  if (has_teamprivatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->teamprivatetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceCreateTeamReq)
  return target;
}

int TLevyTeamInstanceCreateTeamReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 InstanceId = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instanceid());
    }

    // optional .pb.EHallTeamType TeamPrivateType = 2;
    if (has_teamprivatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->teamprivatetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceCreateTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceCreateTeamReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceCreateTeamReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceCreateTeamReq::MergeFrom(const TLevyTeamInstanceCreateTeamReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_teamprivatetype()) {
      set_teamprivatetype(from.teamprivatetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceCreateTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceCreateTeamReq::CopyFrom(const TLevyTeamInstanceCreateTeamReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceCreateTeamReq::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceCreateTeamReq::Swap(TLevyTeamInstanceCreateTeamReq* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(teamprivatetype_, other->teamprivatetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceCreateTeamReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceCreateTeamReq_descriptor_;
  metadata.reflection = TLevyTeamInstanceCreateTeamReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceCreateTeamRsp::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceCreateTeamRsp::TLevyTeamInstanceCreateTeamRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceCreateTeamRsp)
}

void TLevyTeamInstanceCreateTeamRsp::InitAsDefaultInstance() {
  teaminfo_ = const_cast< ::pb::TLevyInstanceTeamInfo*>(&::pb::TLevyInstanceTeamInfo::default_instance());
}

TLevyTeamInstanceCreateTeamRsp::TLevyTeamInstanceCreateTeamRsp(const TLevyTeamInstanceCreateTeamRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceCreateTeamRsp)
}

void TLevyTeamInstanceCreateTeamRsp::SharedCtor() {
  _cached_size_ = 0;
  teaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceCreateTeamRsp::~TLevyTeamInstanceCreateTeamRsp() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceCreateTeamRsp)
  SharedDtor();
}

void TLevyTeamInstanceCreateTeamRsp::SharedDtor() {
  if (this != default_instance_) {
    delete teaminfo_;
  }
}

void TLevyTeamInstanceCreateTeamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceCreateTeamRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceCreateTeamRsp_descriptor_;
}

const TLevyTeamInstanceCreateTeamRsp& TLevyTeamInstanceCreateTeamRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceCreateTeamRsp* TLevyTeamInstanceCreateTeamRsp::default_instance_ = NULL;

TLevyTeamInstanceCreateTeamRsp* TLevyTeamInstanceCreateTeamRsp::New() const {
  return new TLevyTeamInstanceCreateTeamRsp;
}

void TLevyTeamInstanceCreateTeamRsp::Clear() {
  if (has_teaminfo()) {
    if (teaminfo_ != NULL) teaminfo_->::pb::TLevyInstanceTeamInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceCreateTeamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceCreateTeamRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TLevyInstanceTeamInfo TeamInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceCreateTeamRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceCreateTeamRsp)
  return false;
#undef DO_
}

void TLevyTeamInstanceCreateTeamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceCreateTeamRsp)
  // optional .pb.TLevyInstanceTeamInfo TeamInfo = 1;
  if (has_teaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teaminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceCreateTeamRsp)
}

::google::protobuf::uint8* TLevyTeamInstanceCreateTeamRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceCreateTeamRsp)
  // optional .pb.TLevyInstanceTeamInfo TeamInfo = 1;
  if (has_teaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teaminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceCreateTeamRsp)
  return target;
}

int TLevyTeamInstanceCreateTeamRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TLevyInstanceTeamInfo TeamInfo = 1;
    if (has_teaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teaminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceCreateTeamRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceCreateTeamRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceCreateTeamRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceCreateTeamRsp::MergeFrom(const TLevyTeamInstanceCreateTeamRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teaminfo()) {
      mutable_teaminfo()->::pb::TLevyInstanceTeamInfo::MergeFrom(from.teaminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceCreateTeamRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceCreateTeamRsp::CopyFrom(const TLevyTeamInstanceCreateTeamRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceCreateTeamRsp::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceCreateTeamRsp::Swap(TLevyTeamInstanceCreateTeamRsp* other) {
  if (other != this) {
    std::swap(teaminfo_, other->teaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceCreateTeamRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceCreateTeamRsp_descriptor_;
  metadata.reflection = TLevyTeamInstanceCreateTeamRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceJoinTeamReq::kRoomIdFieldNumber;
const int TLevyTeamInstanceJoinTeamReq::kTeamIdFieldNumber;
const int TLevyTeamInstanceJoinTeamReq::kJoinModeFieldNumber;
const int TLevyTeamInstanceJoinTeamReq::kCheckPrivateFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceJoinTeamReq::TLevyTeamInstanceJoinTeamReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceJoinTeamReq)
}

void TLevyTeamInstanceJoinTeamReq::InitAsDefaultInstance() {
}

TLevyTeamInstanceJoinTeamReq::TLevyTeamInstanceJoinTeamReq(const TLevyTeamInstanceJoinTeamReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceJoinTeamReq)
}

void TLevyTeamInstanceJoinTeamReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  joinmode_ = 0;
  checkprivate_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceJoinTeamReq::~TLevyTeamInstanceJoinTeamReq() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceJoinTeamReq)
  SharedDtor();
}

void TLevyTeamInstanceJoinTeamReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceJoinTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceJoinTeamReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceJoinTeamReq_descriptor_;
}

const TLevyTeamInstanceJoinTeamReq& TLevyTeamInstanceJoinTeamReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceJoinTeamReq* TLevyTeamInstanceJoinTeamReq::default_instance_ = NULL;

TLevyTeamInstanceJoinTeamReq* TLevyTeamInstanceJoinTeamReq::New() const {
  return new TLevyTeamInstanceJoinTeamReq;
}

void TLevyTeamInstanceJoinTeamReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLevyTeamInstanceJoinTeamReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, checkprivate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceJoinTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceJoinTeamReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_JoinMode;
        break;
      }

      // optional .pb.ECommonTeamMode JoinMode = 3;
      case 3: {
        if (tag == 24) {
         parse_JoinMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ECommonTeamMode_IsValid(value)) {
            set_joinmode(static_cast< ::pb::ECommonTeamMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_CheckPrivate;
        break;
      }

      // optional bool CheckPrivate = 4;
      case 4: {
        if (tag == 32) {
         parse_CheckPrivate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &checkprivate_)));
          set_has_checkprivate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceJoinTeamReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceJoinTeamReq)
  return false;
#undef DO_
}

void TLevyTeamInstanceJoinTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceJoinTeamReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  // optional .pb.ECommonTeamMode JoinMode = 3;
  if (has_joinmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->joinmode(), output);
  }

  // optional bool CheckPrivate = 4;
  if (has_checkprivate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->checkprivate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceJoinTeamReq)
}

::google::protobuf::uint8* TLevyTeamInstanceJoinTeamReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceJoinTeamReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  // optional .pb.ECommonTeamMode JoinMode = 3;
  if (has_joinmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->joinmode(), target);
  }

  // optional bool CheckPrivate = 4;
  if (has_checkprivate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->checkprivate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceJoinTeamReq)
  return target;
}

int TLevyTeamInstanceJoinTeamReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .pb.ECommonTeamMode JoinMode = 3;
    if (has_joinmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->joinmode());
    }

    // optional bool CheckPrivate = 4;
    if (has_checkprivate()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceJoinTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceJoinTeamReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceJoinTeamReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceJoinTeamReq::MergeFrom(const TLevyTeamInstanceJoinTeamReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_joinmode()) {
      set_joinmode(from.joinmode());
    }
    if (from.has_checkprivate()) {
      set_checkprivate(from.checkprivate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceJoinTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceJoinTeamReq::CopyFrom(const TLevyTeamInstanceJoinTeamReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceJoinTeamReq::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceJoinTeamReq::Swap(TLevyTeamInstanceJoinTeamReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(joinmode_, other->joinmode_);
    std::swap(checkprivate_, other->checkprivate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceJoinTeamReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceJoinTeamReq_descriptor_;
  metadata.reflection = TLevyTeamInstanceJoinTeamReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceJoinTeamRsp::kErrorCodeFieldNumber;
const int TLevyTeamInstanceJoinTeamRsp::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceJoinTeamRsp::TLevyTeamInstanceJoinTeamRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceJoinTeamRsp)
}

void TLevyTeamInstanceJoinTeamRsp::InitAsDefaultInstance() {
  teaminfo_ = const_cast< ::pb::TLevyInstanceTeamInfo*>(&::pb::TLevyInstanceTeamInfo::default_instance());
}

TLevyTeamInstanceJoinTeamRsp::TLevyTeamInstanceJoinTeamRsp(const TLevyTeamInstanceJoinTeamRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceJoinTeamRsp)
}

void TLevyTeamInstanceJoinTeamRsp::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  teaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceJoinTeamRsp::~TLevyTeamInstanceJoinTeamRsp() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceJoinTeamRsp)
  SharedDtor();
}

void TLevyTeamInstanceJoinTeamRsp::SharedDtor() {
  if (this != default_instance_) {
    delete teaminfo_;
  }
}

void TLevyTeamInstanceJoinTeamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceJoinTeamRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceJoinTeamRsp_descriptor_;
}

const TLevyTeamInstanceJoinTeamRsp& TLevyTeamInstanceJoinTeamRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceJoinTeamRsp* TLevyTeamInstanceJoinTeamRsp::default_instance_ = NULL;

TLevyTeamInstanceJoinTeamRsp* TLevyTeamInstanceJoinTeamRsp::New() const {
  return new TLevyTeamInstanceJoinTeamRsp;
}

void TLevyTeamInstanceJoinTeamRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errorcode_ = 0;
    if (has_teaminfo()) {
      if (teaminfo_ != NULL) teaminfo_->::pb::TLevyInstanceTeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceJoinTeamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceJoinTeamRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EJoinLevyInstanceTeamErrorCode ErrorCode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EJoinLevyInstanceTeamErrorCode_IsValid(value)) {
            set_errorcode(static_cast< ::pb::EJoinLevyInstanceTeamErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TeamInfo;
        break;
      }

      // optional .pb.TLevyInstanceTeamInfo TeamInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_TeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceJoinTeamRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceJoinTeamRsp)
  return false;
#undef DO_
}

void TLevyTeamInstanceJoinTeamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceJoinTeamRsp)
  // optional .pb.EJoinLevyInstanceTeamErrorCode ErrorCode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errorcode(), output);
  }

  // optional .pb.TLevyInstanceTeamInfo TeamInfo = 2;
  if (has_teaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teaminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceJoinTeamRsp)
}

::google::protobuf::uint8* TLevyTeamInstanceJoinTeamRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceJoinTeamRsp)
  // optional .pb.EJoinLevyInstanceTeamErrorCode ErrorCode = 1;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->errorcode(), target);
  }

  // optional .pb.TLevyInstanceTeamInfo TeamInfo = 2;
  if (has_teaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teaminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceJoinTeamRsp)
  return target;
}

int TLevyTeamInstanceJoinTeamRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EJoinLevyInstanceTeamErrorCode ErrorCode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->errorcode());
    }

    // optional .pb.TLevyInstanceTeamInfo TeamInfo = 2;
    if (has_teaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teaminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceJoinTeamRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceJoinTeamRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceJoinTeamRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceJoinTeamRsp::MergeFrom(const TLevyTeamInstanceJoinTeamRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_teaminfo()) {
      mutable_teaminfo()->::pb::TLevyInstanceTeamInfo::MergeFrom(from.teaminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceJoinTeamRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceJoinTeamRsp::CopyFrom(const TLevyTeamInstanceJoinTeamRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceJoinTeamRsp::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceJoinTeamRsp::Swap(TLevyTeamInstanceJoinTeamRsp* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(teaminfo_, other->teaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceJoinTeamRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceJoinTeamRsp_descriptor_;
  metadata.reflection = TLevyTeamInstanceJoinTeamRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceKickReq::kRoomIdFieldNumber;
const int TLevyTeamInstanceKickReq::kTeamIdFieldNumber;
const int TLevyTeamInstanceKickReq::kKickUidFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceKickReq::TLevyTeamInstanceKickReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceKickReq)
}

void TLevyTeamInstanceKickReq::InitAsDefaultInstance() {
}

TLevyTeamInstanceKickReq::TLevyTeamInstanceKickReq(const TLevyTeamInstanceKickReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceKickReq)
}

void TLevyTeamInstanceKickReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  kickuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceKickReq::~TLevyTeamInstanceKickReq() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceKickReq)
  SharedDtor();
}

void TLevyTeamInstanceKickReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceKickReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceKickReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceKickReq_descriptor_;
}

const TLevyTeamInstanceKickReq& TLevyTeamInstanceKickReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceKickReq* TLevyTeamInstanceKickReq::default_instance_ = NULL;

TLevyTeamInstanceKickReq* TLevyTeamInstanceKickReq::New() const {
  return new TLevyTeamInstanceKickReq;
}

void TLevyTeamInstanceKickReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLevyTeamInstanceKickReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, kickuid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceKickReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceKickReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_KickUid;
        break;
      }

      // optional uint64 KickUid = 3;
      case 3: {
        if (tag == 24) {
         parse_KickUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kickuid_)));
          set_has_kickuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceKickReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceKickReq)
  return false;
#undef DO_
}

void TLevyTeamInstanceKickReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceKickReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  // optional uint64 KickUid = 3;
  if (has_kickuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->kickuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceKickReq)
}

::google::protobuf::uint8* TLevyTeamInstanceKickReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceKickReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  // optional uint64 KickUid = 3;
  if (has_kickuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->kickuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceKickReq)
  return target;
}

int TLevyTeamInstanceKickReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 KickUid = 3;
    if (has_kickuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kickuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceKickReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceKickReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceKickReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceKickReq::MergeFrom(const TLevyTeamInstanceKickReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_kickuid()) {
      set_kickuid(from.kickuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceKickReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceKickReq::CopyFrom(const TLevyTeamInstanceKickReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceKickReq::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceKickReq::Swap(TLevyTeamInstanceKickReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(kickuid_, other->kickuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceKickReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceKickReq_descriptor_;
  metadata.reflection = TLevyTeamInstanceKickReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceQuitTeamReq::kRoomIdFieldNumber;
const int TLevyTeamInstanceQuitTeamReq::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceQuitTeamReq::TLevyTeamInstanceQuitTeamReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceQuitTeamReq)
}

void TLevyTeamInstanceQuitTeamReq::InitAsDefaultInstance() {
}

TLevyTeamInstanceQuitTeamReq::TLevyTeamInstanceQuitTeamReq(const TLevyTeamInstanceQuitTeamReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceQuitTeamReq)
}

void TLevyTeamInstanceQuitTeamReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceQuitTeamReq::~TLevyTeamInstanceQuitTeamReq() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceQuitTeamReq)
  SharedDtor();
}

void TLevyTeamInstanceQuitTeamReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceQuitTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceQuitTeamReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceQuitTeamReq_descriptor_;
}

const TLevyTeamInstanceQuitTeamReq& TLevyTeamInstanceQuitTeamReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceQuitTeamReq* TLevyTeamInstanceQuitTeamReq::default_instance_ = NULL;

TLevyTeamInstanceQuitTeamReq* TLevyTeamInstanceQuitTeamReq::New() const {
  return new TLevyTeamInstanceQuitTeamReq;
}

void TLevyTeamInstanceQuitTeamReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLevyTeamInstanceQuitTeamReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceQuitTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceQuitTeamReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceQuitTeamReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceQuitTeamReq)
  return false;
#undef DO_
}

void TLevyTeamInstanceQuitTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceQuitTeamReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceQuitTeamReq)
}

::google::protobuf::uint8* TLevyTeamInstanceQuitTeamReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceQuitTeamReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceQuitTeamReq)
  return target;
}

int TLevyTeamInstanceQuitTeamReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceQuitTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceQuitTeamReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceQuitTeamReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceQuitTeamReq::MergeFrom(const TLevyTeamInstanceQuitTeamReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceQuitTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceQuitTeamReq::CopyFrom(const TLevyTeamInstanceQuitTeamReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceQuitTeamReq::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceQuitTeamReq::Swap(TLevyTeamInstanceQuitTeamReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceQuitTeamReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceQuitTeamReq_descriptor_;
  metadata.reflection = TLevyTeamInstanceQuitTeamReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceKickOrQuitTeamRsp::kRetCodeFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceKickOrQuitTeamRsp::TLevyTeamInstanceKickOrQuitTeamRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceKickOrQuitTeamRsp)
}

void TLevyTeamInstanceKickOrQuitTeamRsp::InitAsDefaultInstance() {
}

TLevyTeamInstanceKickOrQuitTeamRsp::TLevyTeamInstanceKickOrQuitTeamRsp(const TLevyTeamInstanceKickOrQuitTeamRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceKickOrQuitTeamRsp)
}

void TLevyTeamInstanceKickOrQuitTeamRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceKickOrQuitTeamRsp::~TLevyTeamInstanceKickOrQuitTeamRsp() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceKickOrQuitTeamRsp)
  SharedDtor();
}

void TLevyTeamInstanceKickOrQuitTeamRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceKickOrQuitTeamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceKickOrQuitTeamRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceKickOrQuitTeamRsp_descriptor_;
}

const TLevyTeamInstanceKickOrQuitTeamRsp& TLevyTeamInstanceKickOrQuitTeamRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceKickOrQuitTeamRsp* TLevyTeamInstanceKickOrQuitTeamRsp::default_instance_ = NULL;

TLevyTeamInstanceKickOrQuitTeamRsp* TLevyTeamInstanceKickOrQuitTeamRsp::New() const {
  return new TLevyTeamInstanceKickOrQuitTeamRsp;
}

void TLevyTeamInstanceKickOrQuitTeamRsp::Clear() {
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceKickOrQuitTeamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceKickOrQuitTeamRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ELevyTeamKickOrQuitTeamRetCode RetCode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ELevyTeamKickOrQuitTeamRetCode_IsValid(value)) {
            set_retcode(static_cast< ::pb::ELevyTeamKickOrQuitTeamRetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceKickOrQuitTeamRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceKickOrQuitTeamRsp)
  return false;
#undef DO_
}

void TLevyTeamInstanceKickOrQuitTeamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceKickOrQuitTeamRsp)
  // optional .pb.ELevyTeamKickOrQuitTeamRetCode RetCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceKickOrQuitTeamRsp)
}

::google::protobuf::uint8* TLevyTeamInstanceKickOrQuitTeamRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceKickOrQuitTeamRsp)
  // optional .pb.ELevyTeamKickOrQuitTeamRetCode RetCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceKickOrQuitTeamRsp)
  return target;
}

int TLevyTeamInstanceKickOrQuitTeamRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ELevyTeamKickOrQuitTeamRetCode RetCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceKickOrQuitTeamRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceKickOrQuitTeamRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceKickOrQuitTeamRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceKickOrQuitTeamRsp::MergeFrom(const TLevyTeamInstanceKickOrQuitTeamRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceKickOrQuitTeamRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceKickOrQuitTeamRsp::CopyFrom(const TLevyTeamInstanceKickOrQuitTeamRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceKickOrQuitTeamRsp::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceKickOrQuitTeamRsp::Swap(TLevyTeamInstanceKickOrQuitTeamRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceKickOrQuitTeamRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceKickOrQuitTeamRsp_descriptor_;
  metadata.reflection = TLevyTeamInstanceKickOrQuitTeamRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceChangeTeamModeReq::kRoomIdFieldNumber;
const int TLevyTeamInstanceChangeTeamModeReq::kTeamIdFieldNumber;
const int TLevyTeamInstanceChangeTeamModeReq::kTeamModeFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceChangeTeamModeReq::TLevyTeamInstanceChangeTeamModeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceChangeTeamModeReq)
}

void TLevyTeamInstanceChangeTeamModeReq::InitAsDefaultInstance() {
}

TLevyTeamInstanceChangeTeamModeReq::TLevyTeamInstanceChangeTeamModeReq(const TLevyTeamInstanceChangeTeamModeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceChangeTeamModeReq)
}

void TLevyTeamInstanceChangeTeamModeReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  teammode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceChangeTeamModeReq::~TLevyTeamInstanceChangeTeamModeReq() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceChangeTeamModeReq)
  SharedDtor();
}

void TLevyTeamInstanceChangeTeamModeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceChangeTeamModeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceChangeTeamModeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceChangeTeamModeReq_descriptor_;
}

const TLevyTeamInstanceChangeTeamModeReq& TLevyTeamInstanceChangeTeamModeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceChangeTeamModeReq* TLevyTeamInstanceChangeTeamModeReq::default_instance_ = NULL;

TLevyTeamInstanceChangeTeamModeReq* TLevyTeamInstanceChangeTeamModeReq::New() const {
  return new TLevyTeamInstanceChangeTeamModeReq;
}

void TLevyTeamInstanceChangeTeamModeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLevyTeamInstanceChangeTeamModeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, teammode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceChangeTeamModeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceChangeTeamModeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TeamMode;
        break;
      }

      // optional .pb.ECommonTeamMode TeamMode = 3;
      case 3: {
        if (tag == 24) {
         parse_TeamMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ECommonTeamMode_IsValid(value)) {
            set_teammode(static_cast< ::pb::ECommonTeamMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceChangeTeamModeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceChangeTeamModeReq)
  return false;
#undef DO_
}

void TLevyTeamInstanceChangeTeamModeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceChangeTeamModeReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  // optional .pb.ECommonTeamMode TeamMode = 3;
  if (has_teammode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->teammode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceChangeTeamModeReq)
}

::google::protobuf::uint8* TLevyTeamInstanceChangeTeamModeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceChangeTeamModeReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  // optional .pb.ECommonTeamMode TeamMode = 3;
  if (has_teammode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->teammode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceChangeTeamModeReq)
  return target;
}

int TLevyTeamInstanceChangeTeamModeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .pb.ECommonTeamMode TeamMode = 3;
    if (has_teammode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->teammode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceChangeTeamModeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceChangeTeamModeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceChangeTeamModeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceChangeTeamModeReq::MergeFrom(const TLevyTeamInstanceChangeTeamModeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_teammode()) {
      set_teammode(from.teammode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceChangeTeamModeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceChangeTeamModeReq::CopyFrom(const TLevyTeamInstanceChangeTeamModeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceChangeTeamModeReq::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceChangeTeamModeReq::Swap(TLevyTeamInstanceChangeTeamModeReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(teammode_, other->teammode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceChangeTeamModeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceChangeTeamModeReq_descriptor_;
  metadata.reflection = TLevyTeamInstanceChangeTeamModeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceChangeTeamModeRsp::kRetCodeFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceChangeTeamModeRsp::TLevyTeamInstanceChangeTeamModeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceChangeTeamModeRsp)
}

void TLevyTeamInstanceChangeTeamModeRsp::InitAsDefaultInstance() {
}

TLevyTeamInstanceChangeTeamModeRsp::TLevyTeamInstanceChangeTeamModeRsp(const TLevyTeamInstanceChangeTeamModeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceChangeTeamModeRsp)
}

void TLevyTeamInstanceChangeTeamModeRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceChangeTeamModeRsp::~TLevyTeamInstanceChangeTeamModeRsp() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceChangeTeamModeRsp)
  SharedDtor();
}

void TLevyTeamInstanceChangeTeamModeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceChangeTeamModeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceChangeTeamModeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceChangeTeamModeRsp_descriptor_;
}

const TLevyTeamInstanceChangeTeamModeRsp& TLevyTeamInstanceChangeTeamModeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceChangeTeamModeRsp* TLevyTeamInstanceChangeTeamModeRsp::default_instance_ = NULL;

TLevyTeamInstanceChangeTeamModeRsp* TLevyTeamInstanceChangeTeamModeRsp::New() const {
  return new TLevyTeamInstanceChangeTeamModeRsp;
}

void TLevyTeamInstanceChangeTeamModeRsp::Clear() {
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceChangeTeamModeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceChangeTeamModeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ECommonChangeTeamRetCode RetCode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ECommonChangeTeamRetCode_IsValid(value)) {
            set_retcode(static_cast< ::pb::ECommonChangeTeamRetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceChangeTeamModeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceChangeTeamModeRsp)
  return false;
#undef DO_
}

void TLevyTeamInstanceChangeTeamModeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceChangeTeamModeRsp)
  // optional .pb.ECommonChangeTeamRetCode RetCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceChangeTeamModeRsp)
}

::google::protobuf::uint8* TLevyTeamInstanceChangeTeamModeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceChangeTeamModeRsp)
  // optional .pb.ECommonChangeTeamRetCode RetCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceChangeTeamModeRsp)
  return target;
}

int TLevyTeamInstanceChangeTeamModeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ECommonChangeTeamRetCode RetCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceChangeTeamModeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceChangeTeamModeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceChangeTeamModeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceChangeTeamModeRsp::MergeFrom(const TLevyTeamInstanceChangeTeamModeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceChangeTeamModeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceChangeTeamModeRsp::CopyFrom(const TLevyTeamInstanceChangeTeamModeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceChangeTeamModeRsp::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceChangeTeamModeRsp::Swap(TLevyTeamInstanceChangeTeamModeRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceChangeTeamModeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceChangeTeamModeRsp_descriptor_;
  metadata.reflection = TLevyTeamInstanceChangeTeamModeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceSetTeamMemberStatusReq::kRoomIdFieldNumber;
const int TLevyTeamInstanceSetTeamMemberStatusReq::kTeamIdFieldNumber;
const int TLevyTeamInstanceSetTeamMemberStatusReq::kMemberStatusFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceSetTeamMemberStatusReq::TLevyTeamInstanceSetTeamMemberStatusReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceSetTeamMemberStatusReq)
}

void TLevyTeamInstanceSetTeamMemberStatusReq::InitAsDefaultInstance() {
}

TLevyTeamInstanceSetTeamMemberStatusReq::TLevyTeamInstanceSetTeamMemberStatusReq(const TLevyTeamInstanceSetTeamMemberStatusReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceSetTeamMemberStatusReq)
}

void TLevyTeamInstanceSetTeamMemberStatusReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  memberstatus_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceSetTeamMemberStatusReq::~TLevyTeamInstanceSetTeamMemberStatusReq() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceSetTeamMemberStatusReq)
  SharedDtor();
}

void TLevyTeamInstanceSetTeamMemberStatusReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceSetTeamMemberStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceSetTeamMemberStatusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceSetTeamMemberStatusReq_descriptor_;
}

const TLevyTeamInstanceSetTeamMemberStatusReq& TLevyTeamInstanceSetTeamMemberStatusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceSetTeamMemberStatusReq* TLevyTeamInstanceSetTeamMemberStatusReq::default_instance_ = NULL;

TLevyTeamInstanceSetTeamMemberStatusReq* TLevyTeamInstanceSetTeamMemberStatusReq::New() const {
  return new TLevyTeamInstanceSetTeamMemberStatusReq;
}

void TLevyTeamInstanceSetTeamMemberStatusReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLevyTeamInstanceSetTeamMemberStatusReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(roomid_, teamid_);
    memberstatus_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceSetTeamMemberStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceSetTeamMemberStatusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MemberStatus;
        break;
      }

      // optional .pb.EHallMemberReadyStatus MemberStatus = 3;
      case 3: {
        if (tag == 24) {
         parse_MemberStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EHallMemberReadyStatus_IsValid(value)) {
            set_memberstatus(static_cast< ::pb::EHallMemberReadyStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceSetTeamMemberStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceSetTeamMemberStatusReq)
  return false;
#undef DO_
}

void TLevyTeamInstanceSetTeamMemberStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceSetTeamMemberStatusReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  // optional .pb.EHallMemberReadyStatus MemberStatus = 3;
  if (has_memberstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->memberstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceSetTeamMemberStatusReq)
}

::google::protobuf::uint8* TLevyTeamInstanceSetTeamMemberStatusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceSetTeamMemberStatusReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  // optional .pb.EHallMemberReadyStatus MemberStatus = 3;
  if (has_memberstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->memberstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceSetTeamMemberStatusReq)
  return target;
}

int TLevyTeamInstanceSetTeamMemberStatusReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .pb.EHallMemberReadyStatus MemberStatus = 3;
    if (has_memberstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->memberstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceSetTeamMemberStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceSetTeamMemberStatusReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceSetTeamMemberStatusReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceSetTeamMemberStatusReq::MergeFrom(const TLevyTeamInstanceSetTeamMemberStatusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_memberstatus()) {
      set_memberstatus(from.memberstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceSetTeamMemberStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceSetTeamMemberStatusReq::CopyFrom(const TLevyTeamInstanceSetTeamMemberStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceSetTeamMemberStatusReq::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceSetTeamMemberStatusReq::Swap(TLevyTeamInstanceSetTeamMemberStatusReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(memberstatus_, other->memberstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceSetTeamMemberStatusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceSetTeamMemberStatusReq_descriptor_;
  metadata.reflection = TLevyTeamInstanceSetTeamMemberStatusReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceSetTeamMemberStatusRsp::kRetCodeFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceSetTeamMemberStatusRsp::TLevyTeamInstanceSetTeamMemberStatusRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceSetTeamMemberStatusRsp)
}

void TLevyTeamInstanceSetTeamMemberStatusRsp::InitAsDefaultInstance() {
}

TLevyTeamInstanceSetTeamMemberStatusRsp::TLevyTeamInstanceSetTeamMemberStatusRsp(const TLevyTeamInstanceSetTeamMemberStatusRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceSetTeamMemberStatusRsp)
}

void TLevyTeamInstanceSetTeamMemberStatusRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceSetTeamMemberStatusRsp::~TLevyTeamInstanceSetTeamMemberStatusRsp() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceSetTeamMemberStatusRsp)
  SharedDtor();
}

void TLevyTeamInstanceSetTeamMemberStatusRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceSetTeamMemberStatusRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceSetTeamMemberStatusRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceSetTeamMemberStatusRsp_descriptor_;
}

const TLevyTeamInstanceSetTeamMemberStatusRsp& TLevyTeamInstanceSetTeamMemberStatusRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceSetTeamMemberStatusRsp* TLevyTeamInstanceSetTeamMemberStatusRsp::default_instance_ = NULL;

TLevyTeamInstanceSetTeamMemberStatusRsp* TLevyTeamInstanceSetTeamMemberStatusRsp::New() const {
  return new TLevyTeamInstanceSetTeamMemberStatusRsp;
}

void TLevyTeamInstanceSetTeamMemberStatusRsp::Clear() {
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceSetTeamMemberStatusRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceSetTeamMemberStatusRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ECommonChangeTeamRetCode RetCode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ECommonChangeTeamRetCode_IsValid(value)) {
            set_retcode(static_cast< ::pb::ECommonChangeTeamRetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceSetTeamMemberStatusRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceSetTeamMemberStatusRsp)
  return false;
#undef DO_
}

void TLevyTeamInstanceSetTeamMemberStatusRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceSetTeamMemberStatusRsp)
  // optional .pb.ECommonChangeTeamRetCode RetCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceSetTeamMemberStatusRsp)
}

::google::protobuf::uint8* TLevyTeamInstanceSetTeamMemberStatusRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceSetTeamMemberStatusRsp)
  // optional .pb.ECommonChangeTeamRetCode RetCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceSetTeamMemberStatusRsp)
  return target;
}

int TLevyTeamInstanceSetTeamMemberStatusRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ECommonChangeTeamRetCode RetCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceSetTeamMemberStatusRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceSetTeamMemberStatusRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceSetTeamMemberStatusRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceSetTeamMemberStatusRsp::MergeFrom(const TLevyTeamInstanceSetTeamMemberStatusRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceSetTeamMemberStatusRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceSetTeamMemberStatusRsp::CopyFrom(const TLevyTeamInstanceSetTeamMemberStatusRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceSetTeamMemberStatusRsp::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceSetTeamMemberStatusRsp::Swap(TLevyTeamInstanceSetTeamMemberStatusRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceSetTeamMemberStatusRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceSetTeamMemberStatusRsp_descriptor_;
  metadata.reflection = TLevyTeamInstanceSetTeamMemberStatusRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceSetTeamStatusReq::kRoomIdFieldNumber;
const int TLevyTeamInstanceSetTeamStatusReq::kTeamIdFieldNumber;
const int TLevyTeamInstanceSetTeamStatusReq::kTeamStatusFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceSetTeamStatusReq::TLevyTeamInstanceSetTeamStatusReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceSetTeamStatusReq)
}

void TLevyTeamInstanceSetTeamStatusReq::InitAsDefaultInstance() {
}

TLevyTeamInstanceSetTeamStatusReq::TLevyTeamInstanceSetTeamStatusReq(const TLevyTeamInstanceSetTeamStatusReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceSetTeamStatusReq)
}

void TLevyTeamInstanceSetTeamStatusReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  teamstatus_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceSetTeamStatusReq::~TLevyTeamInstanceSetTeamStatusReq() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceSetTeamStatusReq)
  SharedDtor();
}

void TLevyTeamInstanceSetTeamStatusReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceSetTeamStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceSetTeamStatusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceSetTeamStatusReq_descriptor_;
}

const TLevyTeamInstanceSetTeamStatusReq& TLevyTeamInstanceSetTeamStatusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceSetTeamStatusReq* TLevyTeamInstanceSetTeamStatusReq::default_instance_ = NULL;

TLevyTeamInstanceSetTeamStatusReq* TLevyTeamInstanceSetTeamStatusReq::New() const {
  return new TLevyTeamInstanceSetTeamStatusReq;
}

void TLevyTeamInstanceSetTeamStatusReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLevyTeamInstanceSetTeamStatusReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(roomid_, teamid_);
    teamstatus_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceSetTeamStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceSetTeamStatusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TeamStatus;
        break;
      }

      // optional .pb.EHallTeamType TeamStatus = 3;
      case 3: {
        if (tag == 24) {
         parse_TeamStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EHallTeamType_IsValid(value)) {
            set_teamstatus(static_cast< ::pb::EHallTeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceSetTeamStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceSetTeamStatusReq)
  return false;
#undef DO_
}

void TLevyTeamInstanceSetTeamStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceSetTeamStatusReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  // optional .pb.EHallTeamType TeamStatus = 3;
  if (has_teamstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->teamstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceSetTeamStatusReq)
}

::google::protobuf::uint8* TLevyTeamInstanceSetTeamStatusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceSetTeamStatusReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  // optional .pb.EHallTeamType TeamStatus = 3;
  if (has_teamstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->teamstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceSetTeamStatusReq)
  return target;
}

int TLevyTeamInstanceSetTeamStatusReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .pb.EHallTeamType TeamStatus = 3;
    if (has_teamstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->teamstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceSetTeamStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceSetTeamStatusReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceSetTeamStatusReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceSetTeamStatusReq::MergeFrom(const TLevyTeamInstanceSetTeamStatusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_teamstatus()) {
      set_teamstatus(from.teamstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceSetTeamStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceSetTeamStatusReq::CopyFrom(const TLevyTeamInstanceSetTeamStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceSetTeamStatusReq::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceSetTeamStatusReq::Swap(TLevyTeamInstanceSetTeamStatusReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(teamstatus_, other->teamstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceSetTeamStatusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceSetTeamStatusReq_descriptor_;
  metadata.reflection = TLevyTeamInstanceSetTeamStatusReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceSetTeamStatusRsp::kRetCodeFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceSetTeamStatusRsp::TLevyTeamInstanceSetTeamStatusRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceSetTeamStatusRsp)
}

void TLevyTeamInstanceSetTeamStatusRsp::InitAsDefaultInstance() {
}

TLevyTeamInstanceSetTeamStatusRsp::TLevyTeamInstanceSetTeamStatusRsp(const TLevyTeamInstanceSetTeamStatusRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceSetTeamStatusRsp)
}

void TLevyTeamInstanceSetTeamStatusRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceSetTeamStatusRsp::~TLevyTeamInstanceSetTeamStatusRsp() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceSetTeamStatusRsp)
  SharedDtor();
}

void TLevyTeamInstanceSetTeamStatusRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceSetTeamStatusRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceSetTeamStatusRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceSetTeamStatusRsp_descriptor_;
}

const TLevyTeamInstanceSetTeamStatusRsp& TLevyTeamInstanceSetTeamStatusRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceSetTeamStatusRsp* TLevyTeamInstanceSetTeamStatusRsp::default_instance_ = NULL;

TLevyTeamInstanceSetTeamStatusRsp* TLevyTeamInstanceSetTeamStatusRsp::New() const {
  return new TLevyTeamInstanceSetTeamStatusRsp;
}

void TLevyTeamInstanceSetTeamStatusRsp::Clear() {
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceSetTeamStatusRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceSetTeamStatusRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ECommonChangeTeamRetCode RetCode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ECommonChangeTeamRetCode_IsValid(value)) {
            set_retcode(static_cast< ::pb::ECommonChangeTeamRetCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceSetTeamStatusRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceSetTeamStatusRsp)
  return false;
#undef DO_
}

void TLevyTeamInstanceSetTeamStatusRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceSetTeamStatusRsp)
  // optional .pb.ECommonChangeTeamRetCode RetCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceSetTeamStatusRsp)
}

::google::protobuf::uint8* TLevyTeamInstanceSetTeamStatusRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceSetTeamStatusRsp)
  // optional .pb.ECommonChangeTeamRetCode RetCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceSetTeamStatusRsp)
  return target;
}

int TLevyTeamInstanceSetTeamStatusRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ECommonChangeTeamRetCode RetCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceSetTeamStatusRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceSetTeamStatusRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceSetTeamStatusRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceSetTeamStatusRsp::MergeFrom(const TLevyTeamInstanceSetTeamStatusRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceSetTeamStatusRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceSetTeamStatusRsp::CopyFrom(const TLevyTeamInstanceSetTeamStatusRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceSetTeamStatusRsp::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceSetTeamStatusRsp::Swap(TLevyTeamInstanceSetTeamStatusRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceSetTeamStatusRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceSetTeamStatusRsp_descriptor_;
  metadata.reflection = TLevyTeamInstanceSetTeamStatusRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceTeamStartReq::kRoomIdFieldNumber;
const int TLevyTeamInstanceTeamStartReq::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceTeamStartReq::TLevyTeamInstanceTeamStartReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceTeamStartReq)
}

void TLevyTeamInstanceTeamStartReq::InitAsDefaultInstance() {
}

TLevyTeamInstanceTeamStartReq::TLevyTeamInstanceTeamStartReq(const TLevyTeamInstanceTeamStartReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceTeamStartReq)
}

void TLevyTeamInstanceTeamStartReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceTeamStartReq::~TLevyTeamInstanceTeamStartReq() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceTeamStartReq)
  SharedDtor();
}

void TLevyTeamInstanceTeamStartReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceTeamStartReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceTeamStartReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceTeamStartReq_descriptor_;
}

const TLevyTeamInstanceTeamStartReq& TLevyTeamInstanceTeamStartReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceTeamStartReq* TLevyTeamInstanceTeamStartReq::default_instance_ = NULL;

TLevyTeamInstanceTeamStartReq* TLevyTeamInstanceTeamStartReq::New() const {
  return new TLevyTeamInstanceTeamStartReq;
}

void TLevyTeamInstanceTeamStartReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLevyTeamInstanceTeamStartReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceTeamStartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceTeamStartReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceTeamStartReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceTeamStartReq)
  return false;
#undef DO_
}

void TLevyTeamInstanceTeamStartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceTeamStartReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceTeamStartReq)
}

::google::protobuf::uint8* TLevyTeamInstanceTeamStartReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceTeamStartReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceTeamStartReq)
  return target;
}

int TLevyTeamInstanceTeamStartReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceTeamStartReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceTeamStartReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceTeamStartReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceTeamStartReq::MergeFrom(const TLevyTeamInstanceTeamStartReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceTeamStartReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceTeamStartReq::CopyFrom(const TLevyTeamInstanceTeamStartReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceTeamStartReq::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceTeamStartReq::Swap(TLevyTeamInstanceTeamStartReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceTeamStartReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceTeamStartReq_descriptor_;
  metadata.reflection = TLevyTeamInstanceTeamStartReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceBattleRecordNotify::kBattleIndexFieldNumber;
const int TLevyTeamInstanceBattleRecordNotify::kBattleResultFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceBattleRecordNotify::TLevyTeamInstanceBattleRecordNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceBattleRecordNotify)
}

void TLevyTeamInstanceBattleRecordNotify::InitAsDefaultInstance() {
  battleresult_ = const_cast< ::pb::TBattleResult*>(&::pb::TBattleResult::default_instance());
}

TLevyTeamInstanceBattleRecordNotify::TLevyTeamInstanceBattleRecordNotify(const TLevyTeamInstanceBattleRecordNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceBattleRecordNotify)
}

void TLevyTeamInstanceBattleRecordNotify::SharedCtor() {
  _cached_size_ = 0;
  battleindex_ = 0u;
  battleresult_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceBattleRecordNotify::~TLevyTeamInstanceBattleRecordNotify() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceBattleRecordNotify)
  SharedDtor();
}

void TLevyTeamInstanceBattleRecordNotify::SharedDtor() {
  if (this != default_instance_) {
    delete battleresult_;
  }
}

void TLevyTeamInstanceBattleRecordNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceBattleRecordNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceBattleRecordNotify_descriptor_;
}

const TLevyTeamInstanceBattleRecordNotify& TLevyTeamInstanceBattleRecordNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceBattleRecordNotify* TLevyTeamInstanceBattleRecordNotify::default_instance_ = NULL;

TLevyTeamInstanceBattleRecordNotify* TLevyTeamInstanceBattleRecordNotify::New() const {
  return new TLevyTeamInstanceBattleRecordNotify;
}

void TLevyTeamInstanceBattleRecordNotify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    battleindex_ = 0u;
    if (has_battleresult()) {
      if (battleresult_ != NULL) battleresult_->::pb::TBattleResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceBattleRecordNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceBattleRecordNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BattleIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleindex_)));
          set_has_battleindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleResult;
        break;
      }

      // optional .pb.TBattleResult BattleResult = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceBattleRecordNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceBattleRecordNotify)
  return false;
#undef DO_
}

void TLevyTeamInstanceBattleRecordNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceBattleRecordNotify)
  // optional uint32 BattleIndex = 1;
  if (has_battleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->battleindex(), output);
  }

  // optional .pb.TBattleResult BattleResult = 2;
  if (has_battleresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battleresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceBattleRecordNotify)
}

::google::protobuf::uint8* TLevyTeamInstanceBattleRecordNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceBattleRecordNotify)
  // optional uint32 BattleIndex = 1;
  if (has_battleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->battleindex(), target);
  }

  // optional .pb.TBattleResult BattleResult = 2;
  if (has_battleresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battleresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceBattleRecordNotify)
  return target;
}

int TLevyTeamInstanceBattleRecordNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleIndex = 1;
    if (has_battleindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleindex());
    }

    // optional .pb.TBattleResult BattleResult = 2;
    if (has_battleresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceBattleRecordNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceBattleRecordNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceBattleRecordNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceBattleRecordNotify::MergeFrom(const TLevyTeamInstanceBattleRecordNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleindex()) {
      set_battleindex(from.battleindex());
    }
    if (from.has_battleresult()) {
      mutable_battleresult()->::pb::TBattleResult::MergeFrom(from.battleresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceBattleRecordNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceBattleRecordNotify::CopyFrom(const TLevyTeamInstanceBattleRecordNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceBattleRecordNotify::IsInitialized() const {

  if (has_battleresult()) {
    if (!this->battleresult().IsInitialized()) return false;
  }
  return true;
}

void TLevyTeamInstanceBattleRecordNotify::Swap(TLevyTeamInstanceBattleRecordNotify* other) {
  if (other != this) {
    std::swap(battleindex_, other->battleindex_);
    std::swap(battleresult_, other->battleresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceBattleRecordNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceBattleRecordNotify_descriptor_;
  metadata.reflection = TLevyTeamInstanceBattleRecordNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceBattleEndNotify::kBattleResFieldNumber;
const int TLevyTeamInstanceBattleEndNotify::kBattleNumFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceBattleEndNotify::TLevyTeamInstanceBattleEndNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceBattleEndNotify)
}

void TLevyTeamInstanceBattleEndNotify::InitAsDefaultInstance() {
}

TLevyTeamInstanceBattleEndNotify::TLevyTeamInstanceBattleEndNotify(const TLevyTeamInstanceBattleEndNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceBattleEndNotify)
}

void TLevyTeamInstanceBattleEndNotify::SharedCtor() {
  _cached_size_ = 0;
  battleres_ = 0;
  battlenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceBattleEndNotify::~TLevyTeamInstanceBattleEndNotify() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceBattleEndNotify)
  SharedDtor();
}

void TLevyTeamInstanceBattleEndNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceBattleEndNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceBattleEndNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceBattleEndNotify_descriptor_;
}

const TLevyTeamInstanceBattleEndNotify& TLevyTeamInstanceBattleEndNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceBattleEndNotify* TLevyTeamInstanceBattleEndNotify::default_instance_ = NULL;

TLevyTeamInstanceBattleEndNotify* TLevyTeamInstanceBattleEndNotify::New() const {
  return new TLevyTeamInstanceBattleEndNotify;
}

void TLevyTeamInstanceBattleEndNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLevyTeamInstanceBattleEndNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(battleres_, battlenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceBattleEndNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceBattleEndNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ELevyTeamInstanceBattleResult BattleRes = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ELevyTeamInstanceBattleResult_IsValid(value)) {
            set_battleres(static_cast< ::pb::ELevyTeamInstanceBattleResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BattleNum;
        break;
      }

      // optional uint32 BattleNum = 2;
      case 2: {
        if (tag == 16) {
         parse_BattleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlenum_)));
          set_has_battlenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceBattleEndNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceBattleEndNotify)
  return false;
#undef DO_
}

void TLevyTeamInstanceBattleEndNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceBattleEndNotify)
  // optional .pb.ELevyTeamInstanceBattleResult BattleRes = 1;
  if (has_battleres()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->battleres(), output);
  }

  // optional uint32 BattleNum = 2;
  if (has_battlenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->battlenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceBattleEndNotify)
}

::google::protobuf::uint8* TLevyTeamInstanceBattleEndNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceBattleEndNotify)
  // optional .pb.ELevyTeamInstanceBattleResult BattleRes = 1;
  if (has_battleres()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->battleres(), target);
  }

  // optional uint32 BattleNum = 2;
  if (has_battlenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->battlenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceBattleEndNotify)
  return target;
}

int TLevyTeamInstanceBattleEndNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ELevyTeamInstanceBattleResult BattleRes = 1;
    if (has_battleres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->battleres());
    }

    // optional uint32 BattleNum = 2;
    if (has_battlenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceBattleEndNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceBattleEndNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceBattleEndNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceBattleEndNotify::MergeFrom(const TLevyTeamInstanceBattleEndNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleres()) {
      set_battleres(from.battleres());
    }
    if (from.has_battlenum()) {
      set_battlenum(from.battlenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceBattleEndNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceBattleEndNotify::CopyFrom(const TLevyTeamInstanceBattleEndNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceBattleEndNotify::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceBattleEndNotify::Swap(TLevyTeamInstanceBattleEndNotify* other) {
  if (other != this) {
    std::swap(battleres_, other->battleres_);
    std::swap(battlenum_, other->battlenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceBattleEndNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceBattleEndNotify_descriptor_;
  metadata.reflection = TLevyTeamInstanceBattleEndNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceAbortNotify::kTeamIdFieldNumber;
const int TLevyTeamInstanceAbortNotify::kAbortReasonFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceAbortNotify::TLevyTeamInstanceAbortNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceAbortNotify)
}

void TLevyTeamInstanceAbortNotify::InitAsDefaultInstance() {
}

TLevyTeamInstanceAbortNotify::TLevyTeamInstanceAbortNotify(const TLevyTeamInstanceAbortNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceAbortNotify)
}

void TLevyTeamInstanceAbortNotify::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  abortreason_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceAbortNotify::~TLevyTeamInstanceAbortNotify() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceAbortNotify)
  SharedDtor();
}

void TLevyTeamInstanceAbortNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceAbortNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceAbortNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceAbortNotify_descriptor_;
}

const TLevyTeamInstanceAbortNotify& TLevyTeamInstanceAbortNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceAbortNotify* TLevyTeamInstanceAbortNotify::default_instance_ = NULL;

TLevyTeamInstanceAbortNotify* TLevyTeamInstanceAbortNotify::New() const {
  return new TLevyTeamInstanceAbortNotify;
}

void TLevyTeamInstanceAbortNotify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    teamid_ = GOOGLE_ULONGLONG(0);
    abortreason_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceAbortNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceAbortNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AbortReason;
        break;
      }

      // optional .pb.ELevyTeamInstanceAbortReason AbortReason = 2;
      case 2: {
        if (tag == 16) {
         parse_AbortReason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ELevyTeamInstanceAbortReason_IsValid(value)) {
            set_abortreason(static_cast< ::pb::ELevyTeamInstanceAbortReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceAbortNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceAbortNotify)
  return false;
#undef DO_
}

void TLevyTeamInstanceAbortNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceAbortNotify)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional .pb.ELevyTeamInstanceAbortReason AbortReason = 2;
  if (has_abortreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->abortreason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceAbortNotify)
}

::google::protobuf::uint8* TLevyTeamInstanceAbortNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceAbortNotify)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional .pb.ELevyTeamInstanceAbortReason AbortReason = 2;
  if (has_abortreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->abortreason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceAbortNotify)
  return target;
}

int TLevyTeamInstanceAbortNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .pb.ELevyTeamInstanceAbortReason AbortReason = 2;
    if (has_abortreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->abortreason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceAbortNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceAbortNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceAbortNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceAbortNotify::MergeFrom(const TLevyTeamInstanceAbortNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_abortreason()) {
      set_abortreason(from.abortreason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceAbortNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceAbortNotify::CopyFrom(const TLevyTeamInstanceAbortNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceAbortNotify::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceAbortNotify::Swap(TLevyTeamInstanceAbortNotify* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(abortreason_, other->abortreason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceAbortNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceAbortNotify_descriptor_;
  metadata.reflection = TLevyTeamInstanceAbortNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceGetInviteListReq::kRoomIdFieldNumber;
const int TLevyTeamInstanceGetInviteListReq::kTeamIdFieldNumber;
const int TLevyTeamInstanceGetInviteListReq::kInviteTypeFieldNumber;
const int TLevyTeamInstanceGetInviteListReq::kNumFieldNumber;
const int TLevyTeamInstanceGetInviteListReq::kOffsetFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceGetInviteListReq::TLevyTeamInstanceGetInviteListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceGetInviteListReq)
}

void TLevyTeamInstanceGetInviteListReq::InitAsDefaultInstance() {
}

TLevyTeamInstanceGetInviteListReq::TLevyTeamInstanceGetInviteListReq(const TLevyTeamInstanceGetInviteListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceGetInviteListReq)
}

void TLevyTeamInstanceGetInviteListReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  invitetype_ = 1;
  num_ = 0u;
  offset_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceGetInviteListReq::~TLevyTeamInstanceGetInviteListReq() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceGetInviteListReq)
  SharedDtor();
}

void TLevyTeamInstanceGetInviteListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceGetInviteListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceGetInviteListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceGetInviteListReq_descriptor_;
}

const TLevyTeamInstanceGetInviteListReq& TLevyTeamInstanceGetInviteListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceGetInviteListReq* TLevyTeamInstanceGetInviteListReq::default_instance_ = NULL;

TLevyTeamInstanceGetInviteListReq* TLevyTeamInstanceGetInviteListReq::New() const {
  return new TLevyTeamInstanceGetInviteListReq;
}

void TLevyTeamInstanceGetInviteListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLevyTeamInstanceGetInviteListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(roomid_, teamid_);
    ZR_(num_, offset_);
    invitetype_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceGetInviteListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceGetInviteListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_InviteType;
        break;
      }

      // optional .pb.ELevyTeamInstanceGetListType InviteType = 3;
      case 3: {
        if (tag == 24) {
         parse_InviteType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ELevyTeamInstanceGetListType_IsValid(value)) {
            set_invitetype(static_cast< ::pb::ELevyTeamInstanceGetListType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 4;
      case 4: {
        if (tag == 32) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Offset;
        break;
      }

      // optional uint32 Offset = 5;
      case 5: {
        if (tag == 40) {
         parse_Offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceGetInviteListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceGetInviteListReq)
  return false;
#undef DO_
}

void TLevyTeamInstanceGetInviteListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceGetInviteListReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  // optional .pb.ELevyTeamInstanceGetListType InviteType = 3;
  if (has_invitetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->invitetype(), output);
  }

  // optional uint32 Num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->num(), output);
  }

  // optional uint32 Offset = 5;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceGetInviteListReq)
}

::google::protobuf::uint8* TLevyTeamInstanceGetInviteListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceGetInviteListReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  // optional .pb.ELevyTeamInstanceGetListType InviteType = 3;
  if (has_invitetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->invitetype(), target);
  }

  // optional uint32 Num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->num(), target);
  }

  // optional uint32 Offset = 5;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceGetInviteListReq)
  return target;
}

int TLevyTeamInstanceGetInviteListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .pb.ELevyTeamInstanceGetListType InviteType = 3;
    if (has_invitetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->invitetype());
    }

    // optional uint32 Num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 Offset = 5;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceGetInviteListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceGetInviteListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceGetInviteListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceGetInviteListReq::MergeFrom(const TLevyTeamInstanceGetInviteListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_invitetype()) {
      set_invitetype(from.invitetype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceGetInviteListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceGetInviteListReq::CopyFrom(const TLevyTeamInstanceGetInviteListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceGetInviteListReq::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceGetInviteListReq::Swap(TLevyTeamInstanceGetInviteListReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(invitetype_, other->invitetype_);
    std::swap(num_, other->num_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceGetInviteListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceGetInviteListReq_descriptor_;
  metadata.reflection = TLevyTeamInstanceGetInviteListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceGetInviteListRsp::kUserArrFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceGetInviteListRsp::TLevyTeamInstanceGetInviteListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceGetInviteListRsp)
}

void TLevyTeamInstanceGetInviteListRsp::InitAsDefaultInstance() {
}

TLevyTeamInstanceGetInviteListRsp::TLevyTeamInstanceGetInviteListRsp(const TLevyTeamInstanceGetInviteListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceGetInviteListRsp)
}

void TLevyTeamInstanceGetInviteListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceGetInviteListRsp::~TLevyTeamInstanceGetInviteListRsp() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceGetInviteListRsp)
  SharedDtor();
}

void TLevyTeamInstanceGetInviteListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceGetInviteListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceGetInviteListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceGetInviteListRsp_descriptor_;
}

const TLevyTeamInstanceGetInviteListRsp& TLevyTeamInstanceGetInviteListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceGetInviteListRsp* TLevyTeamInstanceGetInviteListRsp::default_instance_ = NULL;

TLevyTeamInstanceGetInviteListRsp* TLevyTeamInstanceGetInviteListRsp::New() const {
  return new TLevyTeamInstanceGetInviteListRsp;
}

void TLevyTeamInstanceGetInviteListRsp::Clear() {
  userarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceGetInviteListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceGetInviteListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TUserSimpleInfo UserArr = 1;
      case 1: {
        if (tag == 10) {
         parse_UserArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UserArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceGetInviteListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceGetInviteListRsp)
  return false;
#undef DO_
}

void TLevyTeamInstanceGetInviteListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceGetInviteListRsp)
  // repeated .pb.TUserSimpleInfo UserArr = 1;
  for (int i = 0; i < this->userarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceGetInviteListRsp)
}

::google::protobuf::uint8* TLevyTeamInstanceGetInviteListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceGetInviteListRsp)
  // repeated .pb.TUserSimpleInfo UserArr = 1;
  for (int i = 0; i < this->userarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceGetInviteListRsp)
  return target;
}

int TLevyTeamInstanceGetInviteListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TUserSimpleInfo UserArr = 1;
  total_size += 1 * this->userarr_size();
  for (int i = 0; i < this->userarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceGetInviteListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceGetInviteListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceGetInviteListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceGetInviteListRsp::MergeFrom(const TLevyTeamInstanceGetInviteListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  userarr_.MergeFrom(from.userarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceGetInviteListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceGetInviteListRsp::CopyFrom(const TLevyTeamInstanceGetInviteListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceGetInviteListRsp::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceGetInviteListRsp::Swap(TLevyTeamInstanceGetInviteListRsp* other) {
  if (other != this) {
    userarr_.Swap(&other->userarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceGetInviteListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceGetInviteListRsp_descriptor_;
  metadata.reflection = TLevyTeamInstanceGetInviteListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceTeamInviteReq::kRoomIdFieldNumber;
const int TLevyTeamInstanceTeamInviteReq::kTeamIdFieldNumber;
const int TLevyTeamInstanceTeamInviteReq::kUidArrFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceTeamInviteReq::TLevyTeamInstanceTeamInviteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceTeamInviteReq)
}

void TLevyTeamInstanceTeamInviteReq::InitAsDefaultInstance() {
}

TLevyTeamInstanceTeamInviteReq::TLevyTeamInstanceTeamInviteReq(const TLevyTeamInstanceTeamInviteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceTeamInviteReq)
}

void TLevyTeamInstanceTeamInviteReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceTeamInviteReq::~TLevyTeamInstanceTeamInviteReq() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceTeamInviteReq)
  SharedDtor();
}

void TLevyTeamInstanceTeamInviteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceTeamInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceTeamInviteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceTeamInviteReq_descriptor_;
}

const TLevyTeamInstanceTeamInviteReq& TLevyTeamInstanceTeamInviteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceTeamInviteReq* TLevyTeamInstanceTeamInviteReq::default_instance_ = NULL;

TLevyTeamInstanceTeamInviteReq* TLevyTeamInstanceTeamInviteReq::New() const {
  return new TLevyTeamInstanceTeamInviteReq;
}

void TLevyTeamInstanceTeamInviteReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLevyTeamInstanceTeamInviteReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  uidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceTeamInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceTeamInviteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_UidArr;
        break;
      }

      // repeated uint64 UidArr = 3;
      case 3: {
        if (tag == 24) {
         parse_UidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_uidarr())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_UidArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceTeamInviteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceTeamInviteReq)
  return false;
#undef DO_
}

void TLevyTeamInstanceTeamInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceTeamInviteReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  // repeated uint64 UidArr = 3;
  for (int i = 0; i < this->uidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->uidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceTeamInviteReq)
}

::google::protobuf::uint8* TLevyTeamInstanceTeamInviteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceTeamInviteReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  // repeated uint64 UidArr = 3;
  for (int i = 0; i < this->uidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->uidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceTeamInviteReq)
  return target;
}

int TLevyTeamInstanceTeamInviteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  // repeated uint64 UidArr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->uidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uidarr(i));
    }
    total_size += 1 * this->uidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceTeamInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceTeamInviteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceTeamInviteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceTeamInviteReq::MergeFrom(const TLevyTeamInstanceTeamInviteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  uidarr_.MergeFrom(from.uidarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceTeamInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceTeamInviteReq::CopyFrom(const TLevyTeamInstanceTeamInviteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceTeamInviteReq::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceTeamInviteReq::Swap(TLevyTeamInstanceTeamInviteReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    uidarr_.Swap(&other->uidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceTeamInviteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceTeamInviteReq_descriptor_;
  metadata.reflection = TLevyTeamInstanceTeamInviteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceInviteNotify::kRoomIdFieldNumber;
const int TLevyTeamInstanceInviteNotify::kTeamIdFieldNumber;
const int TLevyTeamInstanceInviteNotify::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceInviteNotify::TLevyTeamInstanceInviteNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceInviteNotify)
}

void TLevyTeamInstanceInviteNotify::InitAsDefaultInstance() {
  teaminfo_ = const_cast< ::pb::TSimpleLevyInstanceTeamInfo*>(&::pb::TSimpleLevyInstanceTeamInfo::default_instance());
}

TLevyTeamInstanceInviteNotify::TLevyTeamInstanceInviteNotify(const TLevyTeamInstanceInviteNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceInviteNotify)
}

void TLevyTeamInstanceInviteNotify::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  teaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceInviteNotify::~TLevyTeamInstanceInviteNotify() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceInviteNotify)
  SharedDtor();
}

void TLevyTeamInstanceInviteNotify::SharedDtor() {
  if (this != default_instance_) {
    delete teaminfo_;
  }
}

void TLevyTeamInstanceInviteNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceInviteNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceInviteNotify_descriptor_;
}

const TLevyTeamInstanceInviteNotify& TLevyTeamInstanceInviteNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceInviteNotify* TLevyTeamInstanceInviteNotify::default_instance_ = NULL;

TLevyTeamInstanceInviteNotify* TLevyTeamInstanceInviteNotify::New() const {
  return new TLevyTeamInstanceInviteNotify;
}

void TLevyTeamInstanceInviteNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLevyTeamInstanceInviteNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(roomid_, teamid_);
    if (has_teaminfo()) {
      if (teaminfo_ != NULL) teaminfo_->::pb::TSimpleLevyInstanceTeamInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceInviteNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceInviteNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TeamInfo;
        break;
      }

      // optional .pb.TSimpleLevyInstanceTeamInfo TeamInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_TeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceInviteNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceInviteNotify)
  return false;
#undef DO_
}

void TLevyTeamInstanceInviteNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceInviteNotify)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  // optional .pb.TSimpleLevyInstanceTeamInfo TeamInfo = 3;
  if (has_teaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->teaminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceInviteNotify)
}

::google::protobuf::uint8* TLevyTeamInstanceInviteNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceInviteNotify)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  // optional .pb.TSimpleLevyInstanceTeamInfo TeamInfo = 3;
  if (has_teaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->teaminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceInviteNotify)
  return target;
}

int TLevyTeamInstanceInviteNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .pb.TSimpleLevyInstanceTeamInfo TeamInfo = 3;
    if (has_teaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teaminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceInviteNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceInviteNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceInviteNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceInviteNotify::MergeFrom(const TLevyTeamInstanceInviteNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_teaminfo()) {
      mutable_teaminfo()->::pb::TSimpleLevyInstanceTeamInfo::MergeFrom(from.teaminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceInviteNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceInviteNotify::CopyFrom(const TLevyTeamInstanceInviteNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceInviteNotify::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceInviteNotify::Swap(TLevyTeamInstanceInviteNotify* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(teaminfo_, other->teaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceInviteNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceInviteNotify_descriptor_;
  metadata.reflection = TLevyTeamInstanceInviteNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceAtkInfo::kTeamIdFieldNumber;
const int TLevyTeamInstanceAtkInfo::kBattleResFieldNumber;
const int TLevyTeamInstanceAtkInfo::kAtkTimeFieldNumber;
const int TLevyTeamInstanceAtkInfo::kMemArrFieldNumber;
const int TLevyTeamInstanceAtkInfo::kBattleNumFieldNumber;
const int TLevyTeamInstanceAtkInfo::kTeamModeFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceAtkInfo::TLevyTeamInstanceAtkInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceAtkInfo)
}

void TLevyTeamInstanceAtkInfo::InitAsDefaultInstance() {
}

TLevyTeamInstanceAtkInfo::TLevyTeamInstanceAtkInfo(const TLevyTeamInstanceAtkInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceAtkInfo)
}

void TLevyTeamInstanceAtkInfo::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  battleres_ = 0;
  atktime_ = GOOGLE_ULONGLONG(0);
  battlenum_ = 0u;
  teammode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceAtkInfo::~TLevyTeamInstanceAtkInfo() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceAtkInfo)
  SharedDtor();
}

void TLevyTeamInstanceAtkInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceAtkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceAtkInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceAtkInfo_descriptor_;
}

const TLevyTeamInstanceAtkInfo& TLevyTeamInstanceAtkInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceAtkInfo* TLevyTeamInstanceAtkInfo::default_instance_ = NULL;

TLevyTeamInstanceAtkInfo* TLevyTeamInstanceAtkInfo::New() const {
  return new TLevyTeamInstanceAtkInfo;
}

void TLevyTeamInstanceAtkInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLevyTeamInstanceAtkInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(teamid_, battlenum_);
    teammode_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  memarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceAtkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceAtkInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BattleRes;
        break;
      }

      // optional .pb.ELevyTeamInstanceBattleResult BattleRes = 2;
      case 2: {
        if (tag == 16) {
         parse_BattleRes:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ELevyTeamInstanceBattleResult_IsValid(value)) {
            set_battleres(static_cast< ::pb::ELevyTeamInstanceBattleResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AtkTime;
        break;
      }

      // optional uint64 AtkTime = 3;
      case 3: {
        if (tag == 24) {
         parse_AtkTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &atktime_)));
          set_has_atktime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_MemArr;
        break;
      }

      // repeated .pb.TUserSimpleInfo MemArr = 4;
      case 4: {
        if (tag == 34) {
         parse_MemArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_MemArr;
        if (input->ExpectTag(40)) goto parse_BattleNum;
        break;
      }

      // optional uint32 BattleNum = 5;
      case 5: {
        if (tag == 40) {
         parse_BattleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlenum_)));
          set_has_battlenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_TeamMode;
        break;
      }

      // optional .pb.ECommonTeamMode TeamMode = 6;
      case 6: {
        if (tag == 48) {
         parse_TeamMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ECommonTeamMode_IsValid(value)) {
            set_teammode(static_cast< ::pb::ECommonTeamMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceAtkInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceAtkInfo)
  return false;
#undef DO_
}

void TLevyTeamInstanceAtkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceAtkInfo)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional .pb.ELevyTeamInstanceBattleResult BattleRes = 2;
  if (has_battleres()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->battleres(), output);
  }

  // optional uint64 AtkTime = 3;
  if (has_atktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->atktime(), output);
  }

  // repeated .pb.TUserSimpleInfo MemArr = 4;
  for (int i = 0; i < this->memarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->memarr(i), output);
  }

  // optional uint32 BattleNum = 5;
  if (has_battlenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->battlenum(), output);
  }

  // optional .pb.ECommonTeamMode TeamMode = 6;
  if (has_teammode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->teammode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceAtkInfo)
}

::google::protobuf::uint8* TLevyTeamInstanceAtkInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceAtkInfo)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional .pb.ELevyTeamInstanceBattleResult BattleRes = 2;
  if (has_battleres()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->battleres(), target);
  }

  // optional uint64 AtkTime = 3;
  if (has_atktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->atktime(), target);
  }

  // repeated .pb.TUserSimpleInfo MemArr = 4;
  for (int i = 0; i < this->memarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->memarr(i), target);
  }

  // optional uint32 BattleNum = 5;
  if (has_battlenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->battlenum(), target);
  }

  // optional .pb.ECommonTeamMode TeamMode = 6;
  if (has_teammode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->teammode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceAtkInfo)
  return target;
}

int TLevyTeamInstanceAtkInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .pb.ELevyTeamInstanceBattleResult BattleRes = 2;
    if (has_battleres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->battleres());
    }

    // optional uint64 AtkTime = 3;
    if (has_atktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->atktime());
    }

    // optional uint32 BattleNum = 5;
    if (has_battlenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlenum());
    }

    // optional .pb.ECommonTeamMode TeamMode = 6;
    if (has_teammode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->teammode());
    }

  }
  // repeated .pb.TUserSimpleInfo MemArr = 4;
  total_size += 1 * this->memarr_size();
  for (int i = 0; i < this->memarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceAtkInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceAtkInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceAtkInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceAtkInfo::MergeFrom(const TLevyTeamInstanceAtkInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  memarr_.MergeFrom(from.memarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_battleres()) {
      set_battleres(from.battleres());
    }
    if (from.has_atktime()) {
      set_atktime(from.atktime());
    }
    if (from.has_battlenum()) {
      set_battlenum(from.battlenum());
    }
    if (from.has_teammode()) {
      set_teammode(from.teammode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceAtkInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceAtkInfo::CopyFrom(const TLevyTeamInstanceAtkInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceAtkInfo::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceAtkInfo::Swap(TLevyTeamInstanceAtkInfo* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(battleres_, other->battleres_);
    std::swap(atktime_, other->atktime_);
    memarr_.Swap(&other->memarr_);
    std::swap(battlenum_, other->battlenum_);
    std::swap(teammode_, other->teammode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceAtkInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceAtkInfo_descriptor_;
  metadata.reflection = TLevyTeamInstanceAtkInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceGetAtkListReq::kNumFieldNumber;
const int TLevyTeamInstanceGetAtkListReq::kOffsetFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceGetAtkListReq::TLevyTeamInstanceGetAtkListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceGetAtkListReq)
}

void TLevyTeamInstanceGetAtkListReq::InitAsDefaultInstance() {
}

TLevyTeamInstanceGetAtkListReq::TLevyTeamInstanceGetAtkListReq(const TLevyTeamInstanceGetAtkListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceGetAtkListReq)
}

void TLevyTeamInstanceGetAtkListReq::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  offset_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceGetAtkListReq::~TLevyTeamInstanceGetAtkListReq() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceGetAtkListReq)
  SharedDtor();
}

void TLevyTeamInstanceGetAtkListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceGetAtkListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceGetAtkListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceGetAtkListReq_descriptor_;
}

const TLevyTeamInstanceGetAtkListReq& TLevyTeamInstanceGetAtkListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceGetAtkListReq* TLevyTeamInstanceGetAtkListReq::default_instance_ = NULL;

TLevyTeamInstanceGetAtkListReq* TLevyTeamInstanceGetAtkListReq::New() const {
  return new TLevyTeamInstanceGetAtkListReq;
}

void TLevyTeamInstanceGetAtkListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLevyTeamInstanceGetAtkListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(num_, offset_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceGetAtkListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceGetAtkListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Offset;
        break;
      }

      // optional uint32 Offset = 2;
      case 2: {
        if (tag == 16) {
         parse_Offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceGetAtkListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceGetAtkListReq)
  return false;
#undef DO_
}

void TLevyTeamInstanceGetAtkListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceGetAtkListReq)
  // optional uint32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // optional uint32 Offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceGetAtkListReq)
}

::google::protobuf::uint8* TLevyTeamInstanceGetAtkListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceGetAtkListReq)
  // optional uint32 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  // optional uint32 Offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceGetAtkListReq)
  return target;
}

int TLevyTeamInstanceGetAtkListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 Offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceGetAtkListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceGetAtkListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceGetAtkListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceGetAtkListReq::MergeFrom(const TLevyTeamInstanceGetAtkListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceGetAtkListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceGetAtkListReq::CopyFrom(const TLevyTeamInstanceGetAtkListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceGetAtkListReq::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceGetAtkListReq::Swap(TLevyTeamInstanceGetAtkListReq* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceGetAtkListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceGetAtkListReq_descriptor_;
  metadata.reflection = TLevyTeamInstanceGetAtkListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceGetAtkListRsp::kAtkListFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceGetAtkListRsp::TLevyTeamInstanceGetAtkListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceGetAtkListRsp)
}

void TLevyTeamInstanceGetAtkListRsp::InitAsDefaultInstance() {
}

TLevyTeamInstanceGetAtkListRsp::TLevyTeamInstanceGetAtkListRsp(const TLevyTeamInstanceGetAtkListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceGetAtkListRsp)
}

void TLevyTeamInstanceGetAtkListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceGetAtkListRsp::~TLevyTeamInstanceGetAtkListRsp() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceGetAtkListRsp)
  SharedDtor();
}

void TLevyTeamInstanceGetAtkListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceGetAtkListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceGetAtkListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceGetAtkListRsp_descriptor_;
}

const TLevyTeamInstanceGetAtkListRsp& TLevyTeamInstanceGetAtkListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceGetAtkListRsp* TLevyTeamInstanceGetAtkListRsp::default_instance_ = NULL;

TLevyTeamInstanceGetAtkListRsp* TLevyTeamInstanceGetAtkListRsp::New() const {
  return new TLevyTeamInstanceGetAtkListRsp;
}

void TLevyTeamInstanceGetAtkListRsp::Clear() {
  atklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceGetAtkListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceGetAtkListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TLevyTeamInstanceAtkInfo AtkList = 1;
      case 1: {
        if (tag == 10) {
         parse_AtkList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atklist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_AtkList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceGetAtkListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceGetAtkListRsp)
  return false;
#undef DO_
}

void TLevyTeamInstanceGetAtkListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceGetAtkListRsp)
  // repeated .pb.TLevyTeamInstanceAtkInfo AtkList = 1;
  for (int i = 0; i < this->atklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->atklist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceGetAtkListRsp)
}

::google::protobuf::uint8* TLevyTeamInstanceGetAtkListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceGetAtkListRsp)
  // repeated .pb.TLevyTeamInstanceAtkInfo AtkList = 1;
  for (int i = 0; i < this->atklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->atklist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceGetAtkListRsp)
  return target;
}

int TLevyTeamInstanceGetAtkListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TLevyTeamInstanceAtkInfo AtkList = 1;
  total_size += 1 * this->atklist_size();
  for (int i = 0; i < this->atklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceGetAtkListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceGetAtkListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceGetAtkListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceGetAtkListRsp::MergeFrom(const TLevyTeamInstanceGetAtkListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  atklist_.MergeFrom(from.atklist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceGetAtkListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceGetAtkListRsp::CopyFrom(const TLevyTeamInstanceGetAtkListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceGetAtkListRsp::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceGetAtkListRsp::Swap(TLevyTeamInstanceGetAtkListRsp* other) {
  if (other != this) {
    atklist_.Swap(&other->atklist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceGetAtkListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceGetAtkListRsp_descriptor_;
  metadata.reflection = TLevyTeamInstanceGetAtkListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceGetBattleRecordReq::kTeamIdFieldNumber;
const int TLevyTeamInstanceGetBattleRecordReq::kRecordNumFieldNumber;
const int TLevyTeamInstanceGetBattleRecordReq::kRecordOffsetFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceGetBattleRecordReq::TLevyTeamInstanceGetBattleRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceGetBattleRecordReq)
}

void TLevyTeamInstanceGetBattleRecordReq::InitAsDefaultInstance() {
}

TLevyTeamInstanceGetBattleRecordReq::TLevyTeamInstanceGetBattleRecordReq(const TLevyTeamInstanceGetBattleRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceGetBattleRecordReq)
}

void TLevyTeamInstanceGetBattleRecordReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  recordnum_ = 0u;
  recordoffset_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceGetBattleRecordReq::~TLevyTeamInstanceGetBattleRecordReq() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceGetBattleRecordReq)
  SharedDtor();
}

void TLevyTeamInstanceGetBattleRecordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceGetBattleRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceGetBattleRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceGetBattleRecordReq_descriptor_;
}

const TLevyTeamInstanceGetBattleRecordReq& TLevyTeamInstanceGetBattleRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceGetBattleRecordReq* TLevyTeamInstanceGetBattleRecordReq::default_instance_ = NULL;

TLevyTeamInstanceGetBattleRecordReq* TLevyTeamInstanceGetBattleRecordReq::New() const {
  return new TLevyTeamInstanceGetBattleRecordReq;
}

void TLevyTeamInstanceGetBattleRecordReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLevyTeamInstanceGetBattleRecordReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(teamid_, recordoffset_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceGetBattleRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceGetBattleRecordReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RecordNum;
        break;
      }

      // optional uint32 RecordNum = 2;
      case 2: {
        if (tag == 16) {
         parse_RecordNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordnum_)));
          set_has_recordnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RecordOffset;
        break;
      }

      // optional uint32 RecordOffset = 3;
      case 3: {
        if (tag == 24) {
         parse_RecordOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordoffset_)));
          set_has_recordoffset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceGetBattleRecordReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceGetBattleRecordReq)
  return false;
#undef DO_
}

void TLevyTeamInstanceGetBattleRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceGetBattleRecordReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional uint32 RecordNum = 2;
  if (has_recordnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->recordnum(), output);
  }

  // optional uint32 RecordOffset = 3;
  if (has_recordoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->recordoffset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceGetBattleRecordReq)
}

::google::protobuf::uint8* TLevyTeamInstanceGetBattleRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceGetBattleRecordReq)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional uint32 RecordNum = 2;
  if (has_recordnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->recordnum(), target);
  }

  // optional uint32 RecordOffset = 3;
  if (has_recordoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->recordoffset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceGetBattleRecordReq)
  return target;
}

int TLevyTeamInstanceGetBattleRecordReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 RecordNum = 2;
    if (has_recordnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recordnum());
    }

    // optional uint32 RecordOffset = 3;
    if (has_recordoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recordoffset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceGetBattleRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceGetBattleRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceGetBattleRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceGetBattleRecordReq::MergeFrom(const TLevyTeamInstanceGetBattleRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_recordnum()) {
      set_recordnum(from.recordnum());
    }
    if (from.has_recordoffset()) {
      set_recordoffset(from.recordoffset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceGetBattleRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceGetBattleRecordReq::CopyFrom(const TLevyTeamInstanceGetBattleRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceGetBattleRecordReq::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceGetBattleRecordReq::Swap(TLevyTeamInstanceGetBattleRecordReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(recordnum_, other->recordnum_);
    std::swap(recordoffset_, other->recordoffset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceGetBattleRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceGetBattleRecordReq_descriptor_;
  metadata.reflection = TLevyTeamInstanceGetBattleRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceRewardInfo::kRewardArrFieldNumber;
const int TLevyTeamInstanceRewardInfo::kCrossLevyScoreFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceRewardInfo::TLevyTeamInstanceRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceRewardInfo)
}

void TLevyTeamInstanceRewardInfo::InitAsDefaultInstance() {
}

TLevyTeamInstanceRewardInfo::TLevyTeamInstanceRewardInfo(const TLevyTeamInstanceRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceRewardInfo)
}

void TLevyTeamInstanceRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  crosslevyscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceRewardInfo::~TLevyTeamInstanceRewardInfo() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceRewardInfo)
  SharedDtor();
}

void TLevyTeamInstanceRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceRewardInfo_descriptor_;
}

const TLevyTeamInstanceRewardInfo& TLevyTeamInstanceRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceRewardInfo* TLevyTeamInstanceRewardInfo::default_instance_ = NULL;

TLevyTeamInstanceRewardInfo* TLevyTeamInstanceRewardInfo::New() const {
  return new TLevyTeamInstanceRewardInfo;
}

void TLevyTeamInstanceRewardInfo::Clear() {
  crosslevyscore_ = 0u;
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectTag(16)) goto parse_CrossLevyScore;
        break;
      }

      // optional uint32 CrossLevyScore = 2;
      case 2: {
        if (tag == 16) {
         parse_CrossLevyScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crosslevyscore_)));
          set_has_crosslevyscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceRewardInfo)
  return false;
#undef DO_
}

void TLevyTeamInstanceRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceRewardInfo)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  // optional uint32 CrossLevyScore = 2;
  if (has_crosslevyscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->crosslevyscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceRewardInfo)
}

::google::protobuf::uint8* TLevyTeamInstanceRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceRewardInfo)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  // optional uint32 CrossLevyScore = 2;
  if (has_crosslevyscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->crosslevyscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceRewardInfo)
  return target;
}

int TLevyTeamInstanceRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 CrossLevyScore = 2;
    if (has_crosslevyscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crosslevyscore());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceRewardInfo::MergeFrom(const TLevyTeamInstanceRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_crosslevyscore()) {
      set_crosslevyscore(from.crosslevyscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceRewardInfo::CopyFrom(const TLevyTeamInstanceRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceRewardInfo::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceRewardInfo::Swap(TLevyTeamInstanceRewardInfo* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(crosslevyscore_, other->crosslevyscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceRewardInfo_descriptor_;
  metadata.reflection = TLevyTeamInstanceRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceGetBattleRecordRsp::kBattleResFieldNumber;
const int TLevyTeamInstanceGetBattleRecordRsp::kRewardInfoFieldNumber;
const int TLevyTeamInstanceGetBattleRecordRsp::kResultArrFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceGetBattleRecordRsp::TLevyTeamInstanceGetBattleRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceGetBattleRecordRsp)
}

void TLevyTeamInstanceGetBattleRecordRsp::InitAsDefaultInstance() {
  rewardinfo_ = const_cast< ::pb::TLevyTeamInstanceRewardInfo*>(&::pb::TLevyTeamInstanceRewardInfo::default_instance());
}

TLevyTeamInstanceGetBattleRecordRsp::TLevyTeamInstanceGetBattleRecordRsp(const TLevyTeamInstanceGetBattleRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceGetBattleRecordRsp)
}

void TLevyTeamInstanceGetBattleRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  battleres_ = 0;
  rewardinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceGetBattleRecordRsp::~TLevyTeamInstanceGetBattleRecordRsp() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceGetBattleRecordRsp)
  SharedDtor();
}

void TLevyTeamInstanceGetBattleRecordRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rewardinfo_;
  }
}

void TLevyTeamInstanceGetBattleRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceGetBattleRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceGetBattleRecordRsp_descriptor_;
}

const TLevyTeamInstanceGetBattleRecordRsp& TLevyTeamInstanceGetBattleRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceGetBattleRecordRsp* TLevyTeamInstanceGetBattleRecordRsp::default_instance_ = NULL;

TLevyTeamInstanceGetBattleRecordRsp* TLevyTeamInstanceGetBattleRecordRsp::New() const {
  return new TLevyTeamInstanceGetBattleRecordRsp;
}

void TLevyTeamInstanceGetBattleRecordRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    battleres_ = 0;
    if (has_rewardinfo()) {
      if (rewardinfo_ != NULL) rewardinfo_->::pb::TLevyTeamInstanceRewardInfo::Clear();
    }
  }
  resultarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceGetBattleRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceGetBattleRecordRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ELevyTeamInstanceBattleResult BattleRes = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ELevyTeamInstanceBattleResult_IsValid(value)) {
            set_battleres(static_cast< ::pb::ELevyTeamInstanceBattleResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardInfo;
        break;
      }

      // optional .pb.TLevyTeamInstanceRewardInfo RewardInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_RewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ResultArr;
        break;
      }

      // repeated .pb.TBattleResult ResultArr = 3;
      case 3: {
        if (tag == 26) {
         parse_ResultArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resultarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ResultArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceGetBattleRecordRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceGetBattleRecordRsp)
  return false;
#undef DO_
}

void TLevyTeamInstanceGetBattleRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceGetBattleRecordRsp)
  // optional .pb.ELevyTeamInstanceBattleResult BattleRes = 1;
  if (has_battleres()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->battleres(), output);
  }

  // optional .pb.TLevyTeamInstanceRewardInfo RewardInfo = 2;
  if (has_rewardinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardinfo(), output);
  }

  // repeated .pb.TBattleResult ResultArr = 3;
  for (int i = 0; i < this->resultarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->resultarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceGetBattleRecordRsp)
}

::google::protobuf::uint8* TLevyTeamInstanceGetBattleRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceGetBattleRecordRsp)
  // optional .pb.ELevyTeamInstanceBattleResult BattleRes = 1;
  if (has_battleres()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->battleres(), target);
  }

  // optional .pb.TLevyTeamInstanceRewardInfo RewardInfo = 2;
  if (has_rewardinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardinfo(), target);
  }

  // repeated .pb.TBattleResult ResultArr = 3;
  for (int i = 0; i < this->resultarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->resultarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceGetBattleRecordRsp)
  return target;
}

int TLevyTeamInstanceGetBattleRecordRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ELevyTeamInstanceBattleResult BattleRes = 1;
    if (has_battleres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->battleres());
    }

    // optional .pb.TLevyTeamInstanceRewardInfo RewardInfo = 2;
    if (has_rewardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewardinfo());
    }

  }
  // repeated .pb.TBattleResult ResultArr = 3;
  total_size += 1 * this->resultarr_size();
  for (int i = 0; i < this->resultarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resultarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceGetBattleRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceGetBattleRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceGetBattleRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceGetBattleRecordRsp::MergeFrom(const TLevyTeamInstanceGetBattleRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  resultarr_.MergeFrom(from.resultarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleres()) {
      set_battleres(from.battleres());
    }
    if (from.has_rewardinfo()) {
      mutable_rewardinfo()->::pb::TLevyTeamInstanceRewardInfo::MergeFrom(from.rewardinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceGetBattleRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceGetBattleRecordRsp::CopyFrom(const TLevyTeamInstanceGetBattleRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceGetBattleRecordRsp::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->resultarr())) return false;
  return true;
}

void TLevyTeamInstanceGetBattleRecordRsp::Swap(TLevyTeamInstanceGetBattleRecordRsp* other) {
  if (other != this) {
    std::swap(battleres_, other->battleres_);
    std::swap(rewardinfo_, other->rewardinfo_);
    resultarr_.Swap(&other->resultarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceGetBattleRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceGetBattleRecordRsp_descriptor_;
  metadata.reflection = TLevyTeamInstanceGetBattleRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceHallMemberInfoData::kUserInfoFieldNumber;
const int TLevyTeamInstanceHallMemberInfoData::kMemModeFieldNumber;
const int TLevyTeamInstanceHallMemberInfoData::kSquadNumFieldNumber;
const int TLevyTeamInstanceHallMemberInfoData::kTotalFightForceFieldNumber;
const int TLevyTeamInstanceHallMemberInfoData::kTeamOrderFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceHallMemberInfoData::TLevyTeamInstanceHallMemberInfoData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceHallMemberInfoData)
}

void TLevyTeamInstanceHallMemberInfoData::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TLevyTeamInstanceHallMemberInfoData::TLevyTeamInstanceHallMemberInfoData(const TLevyTeamInstanceHallMemberInfoData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceHallMemberInfoData)
}

void TLevyTeamInstanceHallMemberInfoData::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  memmode_ = 0;
  squadnum_ = 0u;
  totalfightforce_ = GOOGLE_ULONGLONG(0);
  teamorder_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceHallMemberInfoData::~TLevyTeamInstanceHallMemberInfoData() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceHallMemberInfoData)
  SharedDtor();
}

void TLevyTeamInstanceHallMemberInfoData::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TLevyTeamInstanceHallMemberInfoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceHallMemberInfoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceHallMemberInfoData_descriptor_;
}

const TLevyTeamInstanceHallMemberInfoData& TLevyTeamInstanceHallMemberInfoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceHallMemberInfoData* TLevyTeamInstanceHallMemberInfoData::default_instance_ = NULL;

TLevyTeamInstanceHallMemberInfoData* TLevyTeamInstanceHallMemberInfoData::New() const {
  return new TLevyTeamInstanceHallMemberInfoData;
}

void TLevyTeamInstanceHallMemberInfoData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLevyTeamInstanceHallMemberInfoData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(memmode_, teamorder_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceHallMemberInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceHallMemberInfoData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MemMode;
        break;
      }

      // optional .pb.ECommonTeamMode MemMode = 2;
      case 2: {
        if (tag == 16) {
         parse_MemMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ECommonTeamMode_IsValid(value)) {
            set_memmode(static_cast< ::pb::ECommonTeamMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SquadNum;
        break;
      }

      // optional uint32 SquadNum = 3;
      case 3: {
        if (tag == 24) {
         parse_SquadNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &squadnum_)));
          set_has_squadnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TotalFightForce;
        break;
      }

      // optional uint64 TotalFightForce = 4;
      case 4: {
        if (tag == 32) {
         parse_TotalFightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalfightforce_)));
          set_has_totalfightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_TeamOrder;
        break;
      }

      // optional uint64 TeamOrder = 5;
      case 5: {
        if (tag == 40) {
         parse_TeamOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamorder_)));
          set_has_teamorder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceHallMemberInfoData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceHallMemberInfoData)
  return false;
#undef DO_
}

void TLevyTeamInstanceHallMemberInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceHallMemberInfoData)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional .pb.ECommonTeamMode MemMode = 2;
  if (has_memmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->memmode(), output);
  }

  // optional uint32 SquadNum = 3;
  if (has_squadnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->squadnum(), output);
  }

  // optional uint64 TotalFightForce = 4;
  if (has_totalfightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->totalfightforce(), output);
  }

  // optional uint64 TeamOrder = 5;
  if (has_teamorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->teamorder(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceHallMemberInfoData)
}

::google::protobuf::uint8* TLevyTeamInstanceHallMemberInfoData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceHallMemberInfoData)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional .pb.ECommonTeamMode MemMode = 2;
  if (has_memmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->memmode(), target);
  }

  // optional uint32 SquadNum = 3;
  if (has_squadnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->squadnum(), target);
  }

  // optional uint64 TotalFightForce = 4;
  if (has_totalfightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->totalfightforce(), target);
  }

  // optional uint64 TeamOrder = 5;
  if (has_teamorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->teamorder(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceHallMemberInfoData)
  return target;
}

int TLevyTeamInstanceHallMemberInfoData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional .pb.ECommonTeamMode MemMode = 2;
    if (has_memmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->memmode());
    }

    // optional uint32 SquadNum = 3;
    if (has_squadnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->squadnum());
    }

    // optional uint64 TotalFightForce = 4;
    if (has_totalfightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalfightforce());
    }

    // optional uint64 TeamOrder = 5;
    if (has_teamorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamorder());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceHallMemberInfoData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceHallMemberInfoData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceHallMemberInfoData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceHallMemberInfoData::MergeFrom(const TLevyTeamInstanceHallMemberInfoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_memmode()) {
      set_memmode(from.memmode());
    }
    if (from.has_squadnum()) {
      set_squadnum(from.squadnum());
    }
    if (from.has_totalfightforce()) {
      set_totalfightforce(from.totalfightforce());
    }
    if (from.has_teamorder()) {
      set_teamorder(from.teamorder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceHallMemberInfoData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceHallMemberInfoData::CopyFrom(const TLevyTeamInstanceHallMemberInfoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceHallMemberInfoData::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceHallMemberInfoData::Swap(TLevyTeamInstanceHallMemberInfoData* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(memmode_, other->memmode_);
    std::swap(squadnum_, other->squadnum_);
    std::swap(totalfightforce_, other->totalfightforce_);
    std::swap(teamorder_, other->teamorder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceHallMemberInfoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceHallMemberInfoData_descriptor_;
  metadata.reflection = TLevyTeamInstanceHallMemberInfoData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceTeamSpecificInfo::kInstanceIdFieldNumber;
const int TLevyTeamInstanceTeamSpecificInfo::kMonsterIdArrFieldNumber;
const int TLevyTeamInstanceTeamSpecificInfo::kDayIndexFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceTeamSpecificInfo::TLevyTeamInstanceTeamSpecificInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceTeamSpecificInfo)
}

void TLevyTeamInstanceTeamSpecificInfo::InitAsDefaultInstance() {
}

TLevyTeamInstanceTeamSpecificInfo::TLevyTeamInstanceTeamSpecificInfo(const TLevyTeamInstanceTeamSpecificInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceTeamSpecificInfo)
}

void TLevyTeamInstanceTeamSpecificInfo::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = 0u;
  dayindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceTeamSpecificInfo::~TLevyTeamInstanceTeamSpecificInfo() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceTeamSpecificInfo)
  SharedDtor();
}

void TLevyTeamInstanceTeamSpecificInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceTeamSpecificInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceTeamSpecificInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceTeamSpecificInfo_descriptor_;
}

const TLevyTeamInstanceTeamSpecificInfo& TLevyTeamInstanceTeamSpecificInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceTeamSpecificInfo* TLevyTeamInstanceTeamSpecificInfo::default_instance_ = NULL;

TLevyTeamInstanceTeamSpecificInfo* TLevyTeamInstanceTeamSpecificInfo::New() const {
  return new TLevyTeamInstanceTeamSpecificInfo;
}

void TLevyTeamInstanceTeamSpecificInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLevyTeamInstanceTeamSpecificInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(instanceid_, dayindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  monsteridarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceTeamSpecificInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceTeamSpecificInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 InstanceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MonsterIdArr;
        break;
      }

      // repeated uint32 MonsterIdArr = 2;
      case 2: {
        if (tag == 16) {
         parse_MonsterIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_monsteridarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_monsteridarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MonsterIdArr;
        if (input->ExpectTag(24)) goto parse_DayIndex;
        break;
      }

      // optional uint32 DayIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_DayIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dayindex_)));
          set_has_dayindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceTeamSpecificInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceTeamSpecificInfo)
  return false;
#undef DO_
}

void TLevyTeamInstanceTeamSpecificInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceTeamSpecificInfo)
  // optional uint32 InstanceId = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->instanceid(), output);
  }

  // repeated uint32 MonsterIdArr = 2;
  for (int i = 0; i < this->monsteridarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->monsteridarr(i), output);
  }

  // optional uint32 DayIndex = 3;
  if (has_dayindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dayindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceTeamSpecificInfo)
}

::google::protobuf::uint8* TLevyTeamInstanceTeamSpecificInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceTeamSpecificInfo)
  // optional uint32 InstanceId = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->instanceid(), target);
  }

  // repeated uint32 MonsterIdArr = 2;
  for (int i = 0; i < this->monsteridarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->monsteridarr(i), target);
  }

  // optional uint32 DayIndex = 3;
  if (has_dayindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dayindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceTeamSpecificInfo)
  return target;
}

int TLevyTeamInstanceTeamSpecificInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 InstanceId = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instanceid());
    }

    // optional uint32 DayIndex = 3;
    if (has_dayindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dayindex());
    }

  }
  // repeated uint32 MonsterIdArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->monsteridarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->monsteridarr(i));
    }
    total_size += 1 * this->monsteridarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceTeamSpecificInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceTeamSpecificInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceTeamSpecificInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceTeamSpecificInfo::MergeFrom(const TLevyTeamInstanceTeamSpecificInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsteridarr_.MergeFrom(from.monsteridarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_dayindex()) {
      set_dayindex(from.dayindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceTeamSpecificInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceTeamSpecificInfo::CopyFrom(const TLevyTeamInstanceTeamSpecificInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceTeamSpecificInfo::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceTeamSpecificInfo::Swap(TLevyTeamInstanceTeamSpecificInfo* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    monsteridarr_.Swap(&other->monsteridarr_);
    std::swap(dayindex_, other->dayindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceTeamSpecificInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceTeamSpecificInfo_descriptor_;
  metadata.reflection = TLevyTeamInstanceTeamSpecificInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceQuickMatchReq::kRoomIdFieldNumber;
const int TLevyTeamInstanceQuickMatchReq::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceQuickMatchReq::TLevyTeamInstanceQuickMatchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceQuickMatchReq)
}

void TLevyTeamInstanceQuickMatchReq::InitAsDefaultInstance() {
}

TLevyTeamInstanceQuickMatchReq::TLevyTeamInstanceQuickMatchReq(const TLevyTeamInstanceQuickMatchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceQuickMatchReq)
}

void TLevyTeamInstanceQuickMatchReq::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceQuickMatchReq::~TLevyTeamInstanceQuickMatchReq() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceQuickMatchReq)
  SharedDtor();
}

void TLevyTeamInstanceQuickMatchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLevyTeamInstanceQuickMatchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceQuickMatchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceQuickMatchReq_descriptor_;
}

const TLevyTeamInstanceQuickMatchReq& TLevyTeamInstanceQuickMatchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceQuickMatchReq* TLevyTeamInstanceQuickMatchReq::default_instance_ = NULL;

TLevyTeamInstanceQuickMatchReq* TLevyTeamInstanceQuickMatchReq::New() const {
  return new TLevyTeamInstanceQuickMatchReq;
}

void TLevyTeamInstanceQuickMatchReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLevyTeamInstanceQuickMatchReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(roomid_, teamid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceQuickMatchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceQuickMatchReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RoomId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamId;
        break;
      }

      // optional uint64 TeamId = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceQuickMatchReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceQuickMatchReq)
  return false;
#undef DO_
}

void TLevyTeamInstanceQuickMatchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceQuickMatchReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roomid(), output);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceQuickMatchReq)
}

::google::protobuf::uint8* TLevyTeamInstanceQuickMatchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceQuickMatchReq)
  // optional uint64 RoomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roomid(), target);
  }

  // optional uint64 TeamId = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceQuickMatchReq)
  return target;
}

int TLevyTeamInstanceQuickMatchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 TeamId = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceQuickMatchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceQuickMatchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceQuickMatchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceQuickMatchReq::MergeFrom(const TLevyTeamInstanceQuickMatchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceQuickMatchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceQuickMatchReq::CopyFrom(const TLevyTeamInstanceQuickMatchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceQuickMatchReq::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceQuickMatchReq::Swap(TLevyTeamInstanceQuickMatchReq* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceQuickMatchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceQuickMatchReq_descriptor_;
  metadata.reflection = TLevyTeamInstanceQuickMatchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevyTeamInstanceQuickMatchRsp::kErrorCodeFieldNumber;
const int TLevyTeamInstanceQuickMatchRsp::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

TLevyTeamInstanceQuickMatchRsp::TLevyTeamInstanceQuickMatchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevyTeamInstanceQuickMatchRsp)
}

void TLevyTeamInstanceQuickMatchRsp::InitAsDefaultInstance() {
  teaminfo_ = const_cast< ::pb::TLevyInstanceTeamInfo*>(&::pb::TLevyInstanceTeamInfo::default_instance());
}

TLevyTeamInstanceQuickMatchRsp::TLevyTeamInstanceQuickMatchRsp(const TLevyTeamInstanceQuickMatchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevyTeamInstanceQuickMatchRsp)
}

void TLevyTeamInstanceQuickMatchRsp::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  teaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevyTeamInstanceQuickMatchRsp::~TLevyTeamInstanceQuickMatchRsp() {
  // @@protoc_insertion_point(destructor:pb.TLevyTeamInstanceQuickMatchRsp)
  SharedDtor();
}

void TLevyTeamInstanceQuickMatchRsp::SharedDtor() {
  if (this != default_instance_) {
    delete teaminfo_;
  }
}

void TLevyTeamInstanceQuickMatchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevyTeamInstanceQuickMatchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevyTeamInstanceQuickMatchRsp_descriptor_;
}

const TLevyTeamInstanceQuickMatchRsp& TLevyTeamInstanceQuickMatchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLevyTeamInstance_2eproto();
  return *default_instance_;
}

TLevyTeamInstanceQuickMatchRsp* TLevyTeamInstanceQuickMatchRsp::default_instance_ = NULL;

TLevyTeamInstanceQuickMatchRsp* TLevyTeamInstanceQuickMatchRsp::New() const {
  return new TLevyTeamInstanceQuickMatchRsp;
}

void TLevyTeamInstanceQuickMatchRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    errorcode_ = 0;
    if (has_teaminfo()) {
      if (teaminfo_ != NULL) teaminfo_->::pb::TLevyInstanceTeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevyTeamInstanceQuickMatchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevyTeamInstanceQuickMatchRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EJoinLevyInstanceTeamErrorCode ErrorCode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EJoinLevyInstanceTeamErrorCode_IsValid(value)) {
            set_errorcode(static_cast< ::pb::EJoinLevyInstanceTeamErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TeamInfo;
        break;
      }

      // optional .pb.TLevyInstanceTeamInfo TeamInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_TeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevyTeamInstanceQuickMatchRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevyTeamInstanceQuickMatchRsp)
  return false;
#undef DO_
}

void TLevyTeamInstanceQuickMatchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevyTeamInstanceQuickMatchRsp)
  // optional .pb.EJoinLevyInstanceTeamErrorCode ErrorCode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->errorcode(), output);
  }

  // optional .pb.TLevyInstanceTeamInfo TeamInfo = 2;
  if (has_teaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teaminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevyTeamInstanceQuickMatchRsp)
}

::google::protobuf::uint8* TLevyTeamInstanceQuickMatchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevyTeamInstanceQuickMatchRsp)
  // optional .pb.EJoinLevyInstanceTeamErrorCode ErrorCode = 1;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->errorcode(), target);
  }

  // optional .pb.TLevyInstanceTeamInfo TeamInfo = 2;
  if (has_teaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teaminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevyTeamInstanceQuickMatchRsp)
  return target;
}

int TLevyTeamInstanceQuickMatchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EJoinLevyInstanceTeamErrorCode ErrorCode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->errorcode());
    }

    // optional .pb.TLevyInstanceTeamInfo TeamInfo = 2;
    if (has_teaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teaminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevyTeamInstanceQuickMatchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevyTeamInstanceQuickMatchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevyTeamInstanceQuickMatchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevyTeamInstanceQuickMatchRsp::MergeFrom(const TLevyTeamInstanceQuickMatchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_teaminfo()) {
      mutable_teaminfo()->::pb::TLevyInstanceTeamInfo::MergeFrom(from.teaminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevyTeamInstanceQuickMatchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevyTeamInstanceQuickMatchRsp::CopyFrom(const TLevyTeamInstanceQuickMatchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevyTeamInstanceQuickMatchRsp::IsInitialized() const {

  return true;
}

void TLevyTeamInstanceQuickMatchRsp::Swap(TLevyTeamInstanceQuickMatchRsp* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(teaminfo_, other->teaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevyTeamInstanceQuickMatchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevyTeamInstanceQuickMatchRsp_descriptor_;
  metadata.reflection = TLevyTeamInstanceQuickMatchRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
