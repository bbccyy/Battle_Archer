// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActFestivalPackage.proto

#ifndef PROTOBUF_net_2fActFestivalPackage_2eproto__INCLUDED
#define PROTOBUF_net_2fActFestivalPackage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActFestivalPackage_2eproto();
void protobuf_AssignDesc_net_2fActFestivalPackage_2eproto();
void protobuf_ShutdownFile_net_2fActFestivalPackage_2eproto();

class TActFestivalPackageInfo;
class TActFestivalPackageGetInfoRsp;
class TActFestivalPackageNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TActFestivalPackageInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActFestivalPackage.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActFestivalPackageInfo : public ::google::protobuf::Message {
 public:
  TActFestivalPackageInfo();
  virtual ~TActFestivalPackageInfo();

  TActFestivalPackageInfo(const TActFestivalPackageInfo& from);

  inline TActFestivalPackageInfo& operator=(const TActFestivalPackageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActFestivalPackageInfo& default_instance();

  void Swap(TActFestivalPackageInfo* other);

  // implements Message ----------------------------------------------

  TActFestivalPackageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActFestivalPackageInfo& from);
  void MergeFrom(const TActFestivalPackageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActFestivalPackageInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 BuyNum = 2;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActFestivalPackageInfo</name>
  	<Function>
  		<name>buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActFestivalPackageInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_buynum();
  inline void clear_has_buynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 buynum_;
  friend void  protobuf_AddDesc_net_2fActFestivalPackage_2eproto();
  friend void protobuf_AssignDesc_net_2fActFestivalPackage_2eproto();
  friend void protobuf_ShutdownFile_net_2fActFestivalPackage_2eproto();

  void InitAsDefaultInstance();
  static TActFestivalPackageInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActFestivalPackageGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActFestivalPackage.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActFestivalPackageGetInfoRsp : public ::google::protobuf::Message {
 public:
  TActFestivalPackageGetInfoRsp();
  virtual ~TActFestivalPackageGetInfoRsp();

  TActFestivalPackageGetInfoRsp(const TActFestivalPackageGetInfoRsp& from);

  inline TActFestivalPackageGetInfoRsp& operator=(const TActFestivalPackageGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActFestivalPackageGetInfoRsp& default_instance();

  void Swap(TActFestivalPackageGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TActFestivalPackageGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActFestivalPackageGetInfoRsp& from);
  void MergeFrom(const TActFestivalPackageGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActFestivalPackageInfo ArrPackageInfo = 1;
  inline int arrpackageinfo_size() const;
  inline void clear_arrpackageinfo();
  static const int kArrPackageInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActFestivalPackageGetInfoRsp</name>
  	<Function>
  		<name>arrpackageinfo</name>
  		<replaceName>ArrPackageInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrpackageinfo</name>
  		<replaceName>ArrPackageInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrpackageinfo</name>
  		<replaceName>ArrPackageInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrpackageinfo</name>
  		<replaceName>ArrPackageInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrpackageinfo_size</name>
  		<replaceName>ArrPackageInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActFestivalPackageInfo& arrpackageinfo(int index) const;
  inline ::pb::TActFestivalPackageInfo* mutable_arrpackageinfo(int index);
  inline ::pb::TActFestivalPackageInfo* add_arrpackageinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActFestivalPackageInfo >&
      arrpackageinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActFestivalPackageInfo >*
      mutable_arrpackageinfo();

  // @@protoc_insertion_point(class_scope:pb.TActFestivalPackageGetInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActFestivalPackageInfo > arrpackageinfo_;
  friend void  protobuf_AddDesc_net_2fActFestivalPackage_2eproto();
  friend void protobuf_AssignDesc_net_2fActFestivalPackage_2eproto();
  friend void protobuf_ShutdownFile_net_2fActFestivalPackage_2eproto();

  void InitAsDefaultInstance();
  static TActFestivalPackageGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActFestivalPackageNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActFestivalPackage.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActFestivalPackageNotify : public ::google::protobuf::Message {
 public:
  TActFestivalPackageNotify();
  virtual ~TActFestivalPackageNotify();

  TActFestivalPackageNotify(const TActFestivalPackageNotify& from);

  inline TActFestivalPackageNotify& operator=(const TActFestivalPackageNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActFestivalPackageNotify& default_instance();

  void Swap(TActFestivalPackageNotify* other);

  // implements Message ----------------------------------------------

  TActFestivalPackageNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActFestivalPackageNotify& from);
  void MergeFrom(const TActFestivalPackageNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActFestivalPackageInfo ArrPackageInfo = 1;
  inline int arrpackageinfo_size() const;
  inline void clear_arrpackageinfo();
  static const int kArrPackageInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActFestivalPackageNotify</name>
  	<Function>
  		<name>arrpackageinfo</name>
  		<replaceName>ArrPackageInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrpackageinfo</name>
  		<replaceName>ArrPackageInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrpackageinfo</name>
  		<replaceName>ArrPackageInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrpackageinfo</name>
  		<replaceName>ArrPackageInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrpackageinfo_size</name>
  		<replaceName>ArrPackageInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActFestivalPackageInfo& arrpackageinfo(int index) const;
  inline ::pb::TActFestivalPackageInfo* mutable_arrpackageinfo(int index);
  inline ::pb::TActFestivalPackageInfo* add_arrpackageinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActFestivalPackageInfo >&
      arrpackageinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActFestivalPackageInfo >*
      mutable_arrpackageinfo();

  // @@protoc_insertion_point(class_scope:pb.TActFestivalPackageNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActFestivalPackageInfo > arrpackageinfo_;
  friend void  protobuf_AddDesc_net_2fActFestivalPackage_2eproto();
  friend void protobuf_AssignDesc_net_2fActFestivalPackage_2eproto();
  friend void protobuf_ShutdownFile_net_2fActFestivalPackage_2eproto();

  void InitAsDefaultInstance();
  static TActFestivalPackageNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TActFestivalPackageInfo

// optional uint32 Id = 1;
inline bool TActFestivalPackageInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActFestivalPackageInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActFestivalPackageInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActFestivalPackageInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActFestivalPackageInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TActFestivalPackageInfo.Id)
  return id_;
}
inline void TActFestivalPackageInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActFestivalPackageInfo.Id)
}

// optional uint32 BuyNum = 2;
inline bool TActFestivalPackageInfo::has_buynum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActFestivalPackageInfo::set_has_buynum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActFestivalPackageInfo::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActFestivalPackageInfo::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 TActFestivalPackageInfo::buynum() const {
  // @@protoc_insertion_point(field_get:pb.TActFestivalPackageInfo.BuyNum)
  return buynum_;
}
inline void TActFestivalPackageInfo::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActFestivalPackageInfo.BuyNum)
}

// -------------------------------------------------------------------

// TActFestivalPackageGetInfoRsp

// repeated .pb.TActFestivalPackageInfo ArrPackageInfo = 1;
inline int TActFestivalPackageGetInfoRsp::arrpackageinfo_size() const {
  return arrpackageinfo_.size();
}
inline void TActFestivalPackageGetInfoRsp::clear_arrpackageinfo() {
  arrpackageinfo_.Clear();
}
inline const ::pb::TActFestivalPackageInfo& TActFestivalPackageGetInfoRsp::arrpackageinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActFestivalPackageGetInfoRsp.ArrPackageInfo)
  return arrpackageinfo_.Get(index);
}
inline ::pb::TActFestivalPackageInfo* TActFestivalPackageGetInfoRsp::mutable_arrpackageinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActFestivalPackageGetInfoRsp.ArrPackageInfo)
  return arrpackageinfo_.Mutable(index);
}
inline ::pb::TActFestivalPackageInfo* TActFestivalPackageGetInfoRsp::add_arrpackageinfo() {
  // @@protoc_insertion_point(field_add:pb.TActFestivalPackageGetInfoRsp.ArrPackageInfo)
  return arrpackageinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActFestivalPackageInfo >&
TActFestivalPackageGetInfoRsp::arrpackageinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActFestivalPackageGetInfoRsp.ArrPackageInfo)
  return arrpackageinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActFestivalPackageInfo >*
TActFestivalPackageGetInfoRsp::mutable_arrpackageinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActFestivalPackageGetInfoRsp.ArrPackageInfo)
  return &arrpackageinfo_;
}

// -------------------------------------------------------------------

// TActFestivalPackageNotify

// repeated .pb.TActFestivalPackageInfo ArrPackageInfo = 1;
inline int TActFestivalPackageNotify::arrpackageinfo_size() const {
  return arrpackageinfo_.size();
}
inline void TActFestivalPackageNotify::clear_arrpackageinfo() {
  arrpackageinfo_.Clear();
}
inline const ::pb::TActFestivalPackageInfo& TActFestivalPackageNotify::arrpackageinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActFestivalPackageNotify.ArrPackageInfo)
  return arrpackageinfo_.Get(index);
}
inline ::pb::TActFestivalPackageInfo* TActFestivalPackageNotify::mutable_arrpackageinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActFestivalPackageNotify.ArrPackageInfo)
  return arrpackageinfo_.Mutable(index);
}
inline ::pb::TActFestivalPackageInfo* TActFestivalPackageNotify::add_arrpackageinfo() {
  // @@protoc_insertion_point(field_add:pb.TActFestivalPackageNotify.ArrPackageInfo)
  return arrpackageinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActFestivalPackageInfo >&
TActFestivalPackageNotify::arrpackageinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActFestivalPackageNotify.ArrPackageInfo)
  return arrpackageinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActFestivalPackageInfo >*
TActFestivalPackageNotify::mutable_arrpackageinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActFestivalPackageNotify.ArrPackageInfo)
  return &arrpackageinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActFestivalPackage_2eproto__INCLUDED
