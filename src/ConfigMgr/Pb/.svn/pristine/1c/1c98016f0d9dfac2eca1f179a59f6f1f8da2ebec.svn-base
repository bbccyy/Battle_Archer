// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Team.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Team.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* THallMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THallMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* THallTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THallTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* THallTeamNotifyAddMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THallTeamNotifyAddMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* THallTeamNotifyUpdateMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THallTeamNotifyUpdateMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* THallTeamNotifyUpdateTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THallTeamNotifyUpdateTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* THallTeamNotifyDelMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THallTeamNotifyDelMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* THallTeamNotifyMemberReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THallTeamNotifyMemberReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* THallTeamNotifyTeamDissolved_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THallTeamNotifyTeamDissolved_reflection_ = NULL;
const ::google::protobuf::Descriptor* THallTeamNotifyStartPlay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THallTeamNotifyStartPlay_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EHallMemberReadyStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EHallTeamType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETeamDissolveCause_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fTeam_2eproto() {
  protobuf_AddDesc_net_2fTeam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Team.proto");
  GOOGLE_CHECK(file != NULL);
  THallMemberInfo_descriptor_ = file->message_type(0);
  static const int THallMemberInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallMemberInfo, memberid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallMemberInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallMemberInfo, readystatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallMemberInfo, infodata_),
  };
  THallMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THallMemberInfo_descriptor_,
      THallMemberInfo::default_instance_,
      THallMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THallMemberInfo));
  THallTeamInfo_descriptor_ = file->message_type(1);
  static const int THallTeamInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamInfo, leaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamInfo, teamtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamInfo, maxsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamInfo, infodata_),
  };
  THallTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THallTeamInfo_descriptor_,
      THallTeamInfo::default_instance_,
      THallTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THallTeamInfo));
  THallTeamNotifyAddMember_descriptor_ = file->message_type(2);
  static const int THallTeamNotifyAddMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyAddMember, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyAddMember, memberinfo_),
  };
  THallTeamNotifyAddMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THallTeamNotifyAddMember_descriptor_,
      THallTeamNotifyAddMember::default_instance_,
      THallTeamNotifyAddMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyAddMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyAddMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THallTeamNotifyAddMember));
  THallTeamNotifyUpdateMemberInfo_descriptor_ = file->message_type(3);
  static const int THallTeamNotifyUpdateMemberInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyUpdateMemberInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyUpdateMemberInfo, memberinfo_),
  };
  THallTeamNotifyUpdateMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THallTeamNotifyUpdateMemberInfo_descriptor_,
      THallTeamNotifyUpdateMemberInfo::default_instance_,
      THallTeamNotifyUpdateMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyUpdateMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyUpdateMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THallTeamNotifyUpdateMemberInfo));
  THallTeamNotifyUpdateTeamInfo_descriptor_ = file->message_type(4);
  static const int THallTeamNotifyUpdateTeamInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyUpdateTeamInfo, teaminfo_),
  };
  THallTeamNotifyUpdateTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THallTeamNotifyUpdateTeamInfo_descriptor_,
      THallTeamNotifyUpdateTeamInfo::default_instance_,
      THallTeamNotifyUpdateTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyUpdateTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyUpdateTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THallTeamNotifyUpdateTeamInfo));
  THallTeamNotifyDelMember_descriptor_ = file->message_type(5);
  static const int THallTeamNotifyDelMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyDelMember, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyDelMember, memberid_),
  };
  THallTeamNotifyDelMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THallTeamNotifyDelMember_descriptor_,
      THallTeamNotifyDelMember::default_instance_,
      THallTeamNotifyDelMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyDelMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyDelMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THallTeamNotifyDelMember));
  THallTeamNotifyMemberReady_descriptor_ = file->message_type(6);
  static const int THallTeamNotifyMemberReady_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyMemberReady, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyMemberReady, memberid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyMemberReady, readystatus_),
  };
  THallTeamNotifyMemberReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THallTeamNotifyMemberReady_descriptor_,
      THallTeamNotifyMemberReady::default_instance_,
      THallTeamNotifyMemberReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyMemberReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyMemberReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THallTeamNotifyMemberReady));
  THallTeamNotifyTeamDissolved_descriptor_ = file->message_type(7);
  static const int THallTeamNotifyTeamDissolved_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyTeamDissolved, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyTeamDissolved, cause_),
  };
  THallTeamNotifyTeamDissolved_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THallTeamNotifyTeamDissolved_descriptor_,
      THallTeamNotifyTeamDissolved::default_instance_,
      THallTeamNotifyTeamDissolved_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyTeamDissolved, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyTeamDissolved, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THallTeamNotifyTeamDissolved));
  THallTeamNotifyStartPlay_descriptor_ = file->message_type(8);
  static const int THallTeamNotifyStartPlay_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyStartPlay, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyStartPlay, err_),
  };
  THallTeamNotifyStartPlay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THallTeamNotifyStartPlay_descriptor_,
      THallTeamNotifyStartPlay::default_instance_,
      THallTeamNotifyStartPlay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyStartPlay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THallTeamNotifyStartPlay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THallTeamNotifyStartPlay));
  EHallMemberReadyStatus_descriptor_ = file->enum_type(0);
  EHallTeamType_descriptor_ = file->enum_type(1);
  ETeamDissolveCause_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fTeam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THallMemberInfo_descriptor_, &THallMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THallTeamInfo_descriptor_, &THallTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THallTeamNotifyAddMember_descriptor_, &THallTeamNotifyAddMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THallTeamNotifyUpdateMemberInfo_descriptor_, &THallTeamNotifyUpdateMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THallTeamNotifyUpdateTeamInfo_descriptor_, &THallTeamNotifyUpdateTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THallTeamNotifyDelMember_descriptor_, &THallTeamNotifyDelMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THallTeamNotifyMemberReady_descriptor_, &THallTeamNotifyMemberReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THallTeamNotifyTeamDissolved_descriptor_, &THallTeamNotifyTeamDissolved::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THallTeamNotifyStartPlay_descriptor_, &THallTeamNotifyStartPlay::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fTeam_2eproto() {
  delete THallMemberInfo::default_instance_;
  delete THallMemberInfo_reflection_;
  delete THallTeamInfo::default_instance_;
  delete THallTeamInfo_reflection_;
  delete THallTeamNotifyAddMember::default_instance_;
  delete THallTeamNotifyAddMember_reflection_;
  delete THallTeamNotifyUpdateMemberInfo::default_instance_;
  delete THallTeamNotifyUpdateMemberInfo_reflection_;
  delete THallTeamNotifyUpdateTeamInfo::default_instance_;
  delete THallTeamNotifyUpdateTeamInfo_reflection_;
  delete THallTeamNotifyDelMember::default_instance_;
  delete THallTeamNotifyDelMember_reflection_;
  delete THallTeamNotifyMemberReady::default_instance_;
  delete THallTeamNotifyMemberReady_reflection_;
  delete THallTeamNotifyTeamDissolved::default_instance_;
  delete THallTeamNotifyTeamDissolved_reflection_;
  delete THallTeamNotifyStartPlay::default_instance_;
  delete THallTeamNotifyStartPlay_reflection_;
}

void protobuf_AddDesc_net_2fTeam_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016net/Team.proto\022\002pb\"x\n\017THallMemberInfo\022"
    "\020\n\010MemberId\030\001 \001(\004\022\020\n\010ServerId\030\002 \001(\t\022/\n\013R"
    "eadyStatus\030\003 \001(\0162\032.pb.EHallMemberReadySt"
    "atus\022\020\n\010InfoData\030\004 \001(\014\"y\n\rTHallTeamInfo\022"
    "\016\n\006TeamId\030\001 \001(\004\022\020\n\010LeaderId\030\002 \001(\004\022#\n\010Tea"
    "mType\030\003 \001(\0162\021.pb.EHallTeamType\022\017\n\007MaxSiz"
    "e\030\004 \001(\r\022\020\n\010InfoData\030\005 \001(\014\"S\n\030THallTeamNo"
    "tifyAddMember\022\016\n\006TeamId\030\001 \001(\004\022\'\n\nMemberI"
    "nfo\030\002 \001(\0132\023.pb.THallMemberInfo\"Z\n\037THallT"
    "eamNotifyUpdateMemberInfo\022\016\n\006TeamId\030\001 \001("
    "\004\022\'\n\nMemberInfo\030\002 \001(\0132\023.pb.THallMemberIn"
    "fo\"D\n\035THallTeamNotifyUpdateTeamInfo\022#\n\010T"
    "eamInfo\030\001 \001(\0132\021.pb.THallTeamInfo\"<\n\030THal"
    "lTeamNotifyDelMember\022\016\n\006TeamId\030\001 \001(\004\022\020\n\010"
    "MemberId\030\002 \001(\004\"o\n\032THallTeamNotifyMemberR"
    "eady\022\016\n\006TeamId\030\001 \001(\004\022\020\n\010MemberId\030\002 \001(\004\022/"
    "\n\013ReadyStatus\030\003 \001(\0162\032.pb.EHallMemberRead"
    "yStatus\"U\n\034THallTeamNotifyTeamDissolved\022"
    "\016\n\006TeamId\030\001 \001(\004\022%\n\005Cause\030\002 \001(\0162\026.pb.ETea"
    "mDissolveCause\"7\n\030THallTeamNotifyStartPl"
    "ay\022\016\n\006TeamId\030\001 \001(\004\022\013\n\003Err\030\002 \001(\r*V\n\026EHall"
    "MemberReadyStatus\022\036\n\032HALL_MEMBER_STATUS_"
    "NOREADY\020\001\022\034\n\030HALL_MEMBER_STATUS_READY\020\002*"
    "F\n\rEHallTeamType\022\032\n\026HALL_TEAM_TYPE_PRIVA"
    "TE\020\001\022\031\n\025HALL_TEAM_TYPE_PUBLIC\020\002*\177\n\022ETeam"
    "DissolveCause\022$\n TEAM_DISSOLVE_CAUSE_LEA"
    "DER_LEAVE\020\001\022\"\n\036TEAM_DISSOLVE_CAUSE_LEADE"
    "R_ACT\020\002\022\037\n\033TEAM_DISSOLVE_CAUSE_TIMEOUT\020\003", 1120);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Team.proto", &protobuf_RegisterTypes);
  THallMemberInfo::default_instance_ = new THallMemberInfo();
  THallTeamInfo::default_instance_ = new THallTeamInfo();
  THallTeamNotifyAddMember::default_instance_ = new THallTeamNotifyAddMember();
  THallTeamNotifyUpdateMemberInfo::default_instance_ = new THallTeamNotifyUpdateMemberInfo();
  THallTeamNotifyUpdateTeamInfo::default_instance_ = new THallTeamNotifyUpdateTeamInfo();
  THallTeamNotifyDelMember::default_instance_ = new THallTeamNotifyDelMember();
  THallTeamNotifyMemberReady::default_instance_ = new THallTeamNotifyMemberReady();
  THallTeamNotifyTeamDissolved::default_instance_ = new THallTeamNotifyTeamDissolved();
  THallTeamNotifyStartPlay::default_instance_ = new THallTeamNotifyStartPlay();
  THallMemberInfo::default_instance_->InitAsDefaultInstance();
  THallTeamInfo::default_instance_->InitAsDefaultInstance();
  THallTeamNotifyAddMember::default_instance_->InitAsDefaultInstance();
  THallTeamNotifyUpdateMemberInfo::default_instance_->InitAsDefaultInstance();
  THallTeamNotifyUpdateTeamInfo::default_instance_->InitAsDefaultInstance();
  THallTeamNotifyDelMember::default_instance_->InitAsDefaultInstance();
  THallTeamNotifyMemberReady::default_instance_->InitAsDefaultInstance();
  THallTeamNotifyTeamDissolved::default_instance_->InitAsDefaultInstance();
  THallTeamNotifyStartPlay::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fTeam_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fTeam_2eproto {
  StaticDescriptorInitializer_net_2fTeam_2eproto() {
    protobuf_AddDesc_net_2fTeam_2eproto();
  }
} static_descriptor_initializer_net_2fTeam_2eproto_;
const ::google::protobuf::EnumDescriptor* EHallMemberReadyStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EHallMemberReadyStatus_descriptor_;
}
bool EHallMemberReadyStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EHallTeamType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EHallTeamType_descriptor_;
}
bool EHallTeamType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETeamDissolveCause_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETeamDissolveCause_descriptor_;
}
bool ETeamDissolveCause_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int THallMemberInfo::kMemberIdFieldNumber;
const int THallMemberInfo::kServerIdFieldNumber;
const int THallMemberInfo::kReadyStatusFieldNumber;
const int THallMemberInfo::kInfoDataFieldNumber;
#endif  // !_MSC_VER

THallMemberInfo::THallMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THallMemberInfo)
}

void THallMemberInfo::InitAsDefaultInstance() {
}

THallMemberInfo::THallMemberInfo(const THallMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THallMemberInfo)
}

void THallMemberInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  memberid_ = GOOGLE_ULONGLONG(0);
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  readystatus_ = 1;
  infodata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THallMemberInfo::~THallMemberInfo() {
  // @@protoc_insertion_point(destructor:pb.THallMemberInfo)
  SharedDtor();
}

void THallMemberInfo::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (infodata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete infodata_;
  }
  if (this != default_instance_) {
  }
}

void THallMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THallMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THallMemberInfo_descriptor_;
}

const THallMemberInfo& THallMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTeam_2eproto();
  return *default_instance_;
}

THallMemberInfo* THallMemberInfo::default_instance_ = NULL;

THallMemberInfo* THallMemberInfo::New() const {
  return new THallMemberInfo;
}

void THallMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    memberid_ = GOOGLE_ULONGLONG(0);
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
    readystatus_ = 1;
    if (has_infodata()) {
      if (infodata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        infodata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THallMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THallMemberInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 MemberId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memberid_)));
          set_has_memberid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 2;
      case 2: {
        if (tag == 18) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ReadyStatus;
        break;
      }

      // optional .pb.EHallMemberReadyStatus ReadyStatus = 3;
      case 3: {
        if (tag == 24) {
         parse_ReadyStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EHallMemberReadyStatus_IsValid(value)) {
            set_readystatus(static_cast< ::pb::EHallMemberReadyStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_InfoData;
        break;
      }

      // optional bytes InfoData = 4;
      case 4: {
        if (tag == 34) {
         parse_InfoData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_infodata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THallMemberInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THallMemberInfo)
  return false;
#undef DO_
}

void THallMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THallMemberInfo)
  // optional uint64 MemberId = 1;
  if (has_memberid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->memberid(), output);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverid(), output);
  }

  // optional .pb.EHallMemberReadyStatus ReadyStatus = 3;
  if (has_readystatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->readystatus(), output);
  }

  // optional bytes InfoData = 4;
  if (has_infodata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->infodata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THallMemberInfo)
}

::google::protobuf::uint8* THallMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THallMemberInfo)
  // optional uint64 MemberId = 1;
  if (has_memberid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->memberid(), target);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverid(), target);
  }

  // optional .pb.EHallMemberReadyStatus ReadyStatus = 3;
  if (has_readystatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->readystatus(), target);
  }

  // optional bytes InfoData = 4;
  if (has_infodata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->infodata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THallMemberInfo)
  return target;
}

int THallMemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 MemberId = 1;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->memberid());
    }

    // optional string ServerId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

    // optional .pb.EHallMemberReadyStatus ReadyStatus = 3;
    if (has_readystatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->readystatus());
    }

    // optional bytes InfoData = 4;
    if (has_infodata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->infodata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THallMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THallMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THallMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THallMemberInfo::MergeFrom(const THallMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memberid()) {
      set_memberid(from.memberid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_readystatus()) {
      set_readystatus(from.readystatus());
    }
    if (from.has_infodata()) {
      set_infodata(from.infodata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THallMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THallMemberInfo::CopyFrom(const THallMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THallMemberInfo::IsInitialized() const {

  return true;
}

void THallMemberInfo::Swap(THallMemberInfo* other) {
  if (other != this) {
    std::swap(memberid_, other->memberid_);
    std::swap(serverid_, other->serverid_);
    std::swap(readystatus_, other->readystatus_);
    std::swap(infodata_, other->infodata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THallMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THallMemberInfo_descriptor_;
  metadata.reflection = THallMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THallTeamInfo::kTeamIdFieldNumber;
const int THallTeamInfo::kLeaderIdFieldNumber;
const int THallTeamInfo::kTeamTypeFieldNumber;
const int THallTeamInfo::kMaxSizeFieldNumber;
const int THallTeamInfo::kInfoDataFieldNumber;
#endif  // !_MSC_VER

THallTeamInfo::THallTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THallTeamInfo)
}

void THallTeamInfo::InitAsDefaultInstance() {
}

THallTeamInfo::THallTeamInfo(const THallTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THallTeamInfo)
}

void THallTeamInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  leaderid_ = GOOGLE_ULONGLONG(0);
  teamtype_ = 1;
  maxsize_ = 0u;
  infodata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THallTeamInfo::~THallTeamInfo() {
  // @@protoc_insertion_point(destructor:pb.THallTeamInfo)
  SharedDtor();
}

void THallTeamInfo::SharedDtor() {
  if (infodata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete infodata_;
  }
  if (this != default_instance_) {
  }
}

void THallTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THallTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THallTeamInfo_descriptor_;
}

const THallTeamInfo& THallTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTeam_2eproto();
  return *default_instance_;
}

THallTeamInfo* THallTeamInfo::default_instance_ = NULL;

THallTeamInfo* THallTeamInfo::New() const {
  return new THallTeamInfo;
}

void THallTeamInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<THallTeamInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(teamid_, leaderid_);
    teamtype_ = 1;
    maxsize_ = 0u;
    if (has_infodata()) {
      if (infodata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        infodata_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THallTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THallTeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LeaderId;
        break;
      }

      // optional uint64 LeaderId = 2;
      case 2: {
        if (tag == 16) {
         parse_LeaderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leaderid_)));
          set_has_leaderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TeamType;
        break;
      }

      // optional .pb.EHallTeamType TeamType = 3;
      case 3: {
        if (tag == 24) {
         parse_TeamType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EHallTeamType_IsValid(value)) {
            set_teamtype(static_cast< ::pb::EHallTeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MaxSize;
        break;
      }

      // optional uint32 MaxSize = 4;
      case 4: {
        if (tag == 32) {
         parse_MaxSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxsize_)));
          set_has_maxsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_InfoData;
        break;
      }

      // optional bytes InfoData = 5;
      case 5: {
        if (tag == 42) {
         parse_InfoData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_infodata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THallTeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THallTeamInfo)
  return false;
#undef DO_
}

void THallTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THallTeamInfo)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional uint64 LeaderId = 2;
  if (has_leaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->leaderid(), output);
  }

  // optional .pb.EHallTeamType TeamType = 3;
  if (has_teamtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->teamtype(), output);
  }

  // optional uint32 MaxSize = 4;
  if (has_maxsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxsize(), output);
  }

  // optional bytes InfoData = 5;
  if (has_infodata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->infodata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THallTeamInfo)
}

::google::protobuf::uint8* THallTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THallTeamInfo)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional uint64 LeaderId = 2;
  if (has_leaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->leaderid(), target);
  }

  // optional .pb.EHallTeamType TeamType = 3;
  if (has_teamtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->teamtype(), target);
  }

  // optional uint32 MaxSize = 4;
  if (has_maxsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxsize(), target);
  }

  // optional bytes InfoData = 5;
  if (has_infodata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->infodata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THallTeamInfo)
  return target;
}

int THallTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 LeaderId = 2;
    if (has_leaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leaderid());
    }

    // optional .pb.EHallTeamType TeamType = 3;
    if (has_teamtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->teamtype());
    }

    // optional uint32 MaxSize = 4;
    if (has_maxsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxsize());
    }

    // optional bytes InfoData = 5;
    if (has_infodata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->infodata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THallTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THallTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THallTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THallTeamInfo::MergeFrom(const THallTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_leaderid()) {
      set_leaderid(from.leaderid());
    }
    if (from.has_teamtype()) {
      set_teamtype(from.teamtype());
    }
    if (from.has_maxsize()) {
      set_maxsize(from.maxsize());
    }
    if (from.has_infodata()) {
      set_infodata(from.infodata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THallTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THallTeamInfo::CopyFrom(const THallTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THallTeamInfo::IsInitialized() const {

  return true;
}

void THallTeamInfo::Swap(THallTeamInfo* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(leaderid_, other->leaderid_);
    std::swap(teamtype_, other->teamtype_);
    std::swap(maxsize_, other->maxsize_);
    std::swap(infodata_, other->infodata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THallTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THallTeamInfo_descriptor_;
  metadata.reflection = THallTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THallTeamNotifyAddMember::kTeamIdFieldNumber;
const int THallTeamNotifyAddMember::kMemberInfoFieldNumber;
#endif  // !_MSC_VER

THallTeamNotifyAddMember::THallTeamNotifyAddMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THallTeamNotifyAddMember)
}

void THallTeamNotifyAddMember::InitAsDefaultInstance() {
  memberinfo_ = const_cast< ::pb::THallMemberInfo*>(&::pb::THallMemberInfo::default_instance());
}

THallTeamNotifyAddMember::THallTeamNotifyAddMember(const THallTeamNotifyAddMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THallTeamNotifyAddMember)
}

void THallTeamNotifyAddMember::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  memberinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THallTeamNotifyAddMember::~THallTeamNotifyAddMember() {
  // @@protoc_insertion_point(destructor:pb.THallTeamNotifyAddMember)
  SharedDtor();
}

void THallTeamNotifyAddMember::SharedDtor() {
  if (this != default_instance_) {
    delete memberinfo_;
  }
}

void THallTeamNotifyAddMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THallTeamNotifyAddMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THallTeamNotifyAddMember_descriptor_;
}

const THallTeamNotifyAddMember& THallTeamNotifyAddMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTeam_2eproto();
  return *default_instance_;
}

THallTeamNotifyAddMember* THallTeamNotifyAddMember::default_instance_ = NULL;

THallTeamNotifyAddMember* THallTeamNotifyAddMember::New() const {
  return new THallTeamNotifyAddMember;
}

void THallTeamNotifyAddMember::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    teamid_ = GOOGLE_ULONGLONG(0);
    if (has_memberinfo()) {
      if (memberinfo_ != NULL) memberinfo_->::pb::THallMemberInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THallTeamNotifyAddMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THallTeamNotifyAddMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MemberInfo;
        break;
      }

      // optional .pb.THallMemberInfo MemberInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_MemberInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memberinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THallTeamNotifyAddMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THallTeamNotifyAddMember)
  return false;
#undef DO_
}

void THallTeamNotifyAddMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THallTeamNotifyAddMember)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional .pb.THallMemberInfo MemberInfo = 2;
  if (has_memberinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->memberinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THallTeamNotifyAddMember)
}

::google::protobuf::uint8* THallTeamNotifyAddMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THallTeamNotifyAddMember)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional .pb.THallMemberInfo MemberInfo = 2;
  if (has_memberinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->memberinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THallTeamNotifyAddMember)
  return target;
}

int THallTeamNotifyAddMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .pb.THallMemberInfo MemberInfo = 2;
    if (has_memberinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THallTeamNotifyAddMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THallTeamNotifyAddMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THallTeamNotifyAddMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THallTeamNotifyAddMember::MergeFrom(const THallTeamNotifyAddMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_memberinfo()) {
      mutable_memberinfo()->::pb::THallMemberInfo::MergeFrom(from.memberinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THallTeamNotifyAddMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THallTeamNotifyAddMember::CopyFrom(const THallTeamNotifyAddMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THallTeamNotifyAddMember::IsInitialized() const {

  return true;
}

void THallTeamNotifyAddMember::Swap(THallTeamNotifyAddMember* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(memberinfo_, other->memberinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THallTeamNotifyAddMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THallTeamNotifyAddMember_descriptor_;
  metadata.reflection = THallTeamNotifyAddMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THallTeamNotifyUpdateMemberInfo::kTeamIdFieldNumber;
const int THallTeamNotifyUpdateMemberInfo::kMemberInfoFieldNumber;
#endif  // !_MSC_VER

THallTeamNotifyUpdateMemberInfo::THallTeamNotifyUpdateMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THallTeamNotifyUpdateMemberInfo)
}

void THallTeamNotifyUpdateMemberInfo::InitAsDefaultInstance() {
  memberinfo_ = const_cast< ::pb::THallMemberInfo*>(&::pb::THallMemberInfo::default_instance());
}

THallTeamNotifyUpdateMemberInfo::THallTeamNotifyUpdateMemberInfo(const THallTeamNotifyUpdateMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THallTeamNotifyUpdateMemberInfo)
}

void THallTeamNotifyUpdateMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  memberinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THallTeamNotifyUpdateMemberInfo::~THallTeamNotifyUpdateMemberInfo() {
  // @@protoc_insertion_point(destructor:pb.THallTeamNotifyUpdateMemberInfo)
  SharedDtor();
}

void THallTeamNotifyUpdateMemberInfo::SharedDtor() {
  if (this != default_instance_) {
    delete memberinfo_;
  }
}

void THallTeamNotifyUpdateMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THallTeamNotifyUpdateMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THallTeamNotifyUpdateMemberInfo_descriptor_;
}

const THallTeamNotifyUpdateMemberInfo& THallTeamNotifyUpdateMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTeam_2eproto();
  return *default_instance_;
}

THallTeamNotifyUpdateMemberInfo* THallTeamNotifyUpdateMemberInfo::default_instance_ = NULL;

THallTeamNotifyUpdateMemberInfo* THallTeamNotifyUpdateMemberInfo::New() const {
  return new THallTeamNotifyUpdateMemberInfo;
}

void THallTeamNotifyUpdateMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    teamid_ = GOOGLE_ULONGLONG(0);
    if (has_memberinfo()) {
      if (memberinfo_ != NULL) memberinfo_->::pb::THallMemberInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THallTeamNotifyUpdateMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THallTeamNotifyUpdateMemberInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MemberInfo;
        break;
      }

      // optional .pb.THallMemberInfo MemberInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_MemberInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memberinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THallTeamNotifyUpdateMemberInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THallTeamNotifyUpdateMemberInfo)
  return false;
#undef DO_
}

void THallTeamNotifyUpdateMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THallTeamNotifyUpdateMemberInfo)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional .pb.THallMemberInfo MemberInfo = 2;
  if (has_memberinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->memberinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THallTeamNotifyUpdateMemberInfo)
}

::google::protobuf::uint8* THallTeamNotifyUpdateMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THallTeamNotifyUpdateMemberInfo)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional .pb.THallMemberInfo MemberInfo = 2;
  if (has_memberinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->memberinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THallTeamNotifyUpdateMemberInfo)
  return target;
}

int THallTeamNotifyUpdateMemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .pb.THallMemberInfo MemberInfo = 2;
    if (has_memberinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THallTeamNotifyUpdateMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THallTeamNotifyUpdateMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THallTeamNotifyUpdateMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THallTeamNotifyUpdateMemberInfo::MergeFrom(const THallTeamNotifyUpdateMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_memberinfo()) {
      mutable_memberinfo()->::pb::THallMemberInfo::MergeFrom(from.memberinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THallTeamNotifyUpdateMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THallTeamNotifyUpdateMemberInfo::CopyFrom(const THallTeamNotifyUpdateMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THallTeamNotifyUpdateMemberInfo::IsInitialized() const {

  return true;
}

void THallTeamNotifyUpdateMemberInfo::Swap(THallTeamNotifyUpdateMemberInfo* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(memberinfo_, other->memberinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THallTeamNotifyUpdateMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THallTeamNotifyUpdateMemberInfo_descriptor_;
  metadata.reflection = THallTeamNotifyUpdateMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THallTeamNotifyUpdateTeamInfo::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

THallTeamNotifyUpdateTeamInfo::THallTeamNotifyUpdateTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THallTeamNotifyUpdateTeamInfo)
}

void THallTeamNotifyUpdateTeamInfo::InitAsDefaultInstance() {
  teaminfo_ = const_cast< ::pb::THallTeamInfo*>(&::pb::THallTeamInfo::default_instance());
}

THallTeamNotifyUpdateTeamInfo::THallTeamNotifyUpdateTeamInfo(const THallTeamNotifyUpdateTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THallTeamNotifyUpdateTeamInfo)
}

void THallTeamNotifyUpdateTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  teaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THallTeamNotifyUpdateTeamInfo::~THallTeamNotifyUpdateTeamInfo() {
  // @@protoc_insertion_point(destructor:pb.THallTeamNotifyUpdateTeamInfo)
  SharedDtor();
}

void THallTeamNotifyUpdateTeamInfo::SharedDtor() {
  if (this != default_instance_) {
    delete teaminfo_;
  }
}

void THallTeamNotifyUpdateTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THallTeamNotifyUpdateTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THallTeamNotifyUpdateTeamInfo_descriptor_;
}

const THallTeamNotifyUpdateTeamInfo& THallTeamNotifyUpdateTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTeam_2eproto();
  return *default_instance_;
}

THallTeamNotifyUpdateTeamInfo* THallTeamNotifyUpdateTeamInfo::default_instance_ = NULL;

THallTeamNotifyUpdateTeamInfo* THallTeamNotifyUpdateTeamInfo::New() const {
  return new THallTeamNotifyUpdateTeamInfo;
}

void THallTeamNotifyUpdateTeamInfo::Clear() {
  if (has_teaminfo()) {
    if (teaminfo_ != NULL) teaminfo_->::pb::THallTeamInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THallTeamNotifyUpdateTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THallTeamNotifyUpdateTeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.THallTeamInfo TeamInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THallTeamNotifyUpdateTeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THallTeamNotifyUpdateTeamInfo)
  return false;
#undef DO_
}

void THallTeamNotifyUpdateTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THallTeamNotifyUpdateTeamInfo)
  // optional .pb.THallTeamInfo TeamInfo = 1;
  if (has_teaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teaminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THallTeamNotifyUpdateTeamInfo)
}

::google::protobuf::uint8* THallTeamNotifyUpdateTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THallTeamNotifyUpdateTeamInfo)
  // optional .pb.THallTeamInfo TeamInfo = 1;
  if (has_teaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teaminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THallTeamNotifyUpdateTeamInfo)
  return target;
}

int THallTeamNotifyUpdateTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.THallTeamInfo TeamInfo = 1;
    if (has_teaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teaminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THallTeamNotifyUpdateTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THallTeamNotifyUpdateTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THallTeamNotifyUpdateTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THallTeamNotifyUpdateTeamInfo::MergeFrom(const THallTeamNotifyUpdateTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teaminfo()) {
      mutable_teaminfo()->::pb::THallTeamInfo::MergeFrom(from.teaminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THallTeamNotifyUpdateTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THallTeamNotifyUpdateTeamInfo::CopyFrom(const THallTeamNotifyUpdateTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THallTeamNotifyUpdateTeamInfo::IsInitialized() const {

  return true;
}

void THallTeamNotifyUpdateTeamInfo::Swap(THallTeamNotifyUpdateTeamInfo* other) {
  if (other != this) {
    std::swap(teaminfo_, other->teaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THallTeamNotifyUpdateTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THallTeamNotifyUpdateTeamInfo_descriptor_;
  metadata.reflection = THallTeamNotifyUpdateTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THallTeamNotifyDelMember::kTeamIdFieldNumber;
const int THallTeamNotifyDelMember::kMemberIdFieldNumber;
#endif  // !_MSC_VER

THallTeamNotifyDelMember::THallTeamNotifyDelMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THallTeamNotifyDelMember)
}

void THallTeamNotifyDelMember::InitAsDefaultInstance() {
}

THallTeamNotifyDelMember::THallTeamNotifyDelMember(const THallTeamNotifyDelMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THallTeamNotifyDelMember)
}

void THallTeamNotifyDelMember::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  memberid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THallTeamNotifyDelMember::~THallTeamNotifyDelMember() {
  // @@protoc_insertion_point(destructor:pb.THallTeamNotifyDelMember)
  SharedDtor();
}

void THallTeamNotifyDelMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void THallTeamNotifyDelMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THallTeamNotifyDelMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THallTeamNotifyDelMember_descriptor_;
}

const THallTeamNotifyDelMember& THallTeamNotifyDelMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTeam_2eproto();
  return *default_instance_;
}

THallTeamNotifyDelMember* THallTeamNotifyDelMember::default_instance_ = NULL;

THallTeamNotifyDelMember* THallTeamNotifyDelMember::New() const {
  return new THallTeamNotifyDelMember;
}

void THallTeamNotifyDelMember::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<THallTeamNotifyDelMember*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(teamid_, memberid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THallTeamNotifyDelMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THallTeamNotifyDelMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MemberId;
        break;
      }

      // optional uint64 MemberId = 2;
      case 2: {
        if (tag == 16) {
         parse_MemberId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memberid_)));
          set_has_memberid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THallTeamNotifyDelMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THallTeamNotifyDelMember)
  return false;
#undef DO_
}

void THallTeamNotifyDelMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THallTeamNotifyDelMember)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional uint64 MemberId = 2;
  if (has_memberid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->memberid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THallTeamNotifyDelMember)
}

::google::protobuf::uint8* THallTeamNotifyDelMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THallTeamNotifyDelMember)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional uint64 MemberId = 2;
  if (has_memberid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->memberid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THallTeamNotifyDelMember)
  return target;
}

int THallTeamNotifyDelMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 MemberId = 2;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->memberid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THallTeamNotifyDelMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THallTeamNotifyDelMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THallTeamNotifyDelMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THallTeamNotifyDelMember::MergeFrom(const THallTeamNotifyDelMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_memberid()) {
      set_memberid(from.memberid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THallTeamNotifyDelMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THallTeamNotifyDelMember::CopyFrom(const THallTeamNotifyDelMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THallTeamNotifyDelMember::IsInitialized() const {

  return true;
}

void THallTeamNotifyDelMember::Swap(THallTeamNotifyDelMember* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(memberid_, other->memberid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THallTeamNotifyDelMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THallTeamNotifyDelMember_descriptor_;
  metadata.reflection = THallTeamNotifyDelMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THallTeamNotifyMemberReady::kTeamIdFieldNumber;
const int THallTeamNotifyMemberReady::kMemberIdFieldNumber;
const int THallTeamNotifyMemberReady::kReadyStatusFieldNumber;
#endif  // !_MSC_VER

THallTeamNotifyMemberReady::THallTeamNotifyMemberReady()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THallTeamNotifyMemberReady)
}

void THallTeamNotifyMemberReady::InitAsDefaultInstance() {
}

THallTeamNotifyMemberReady::THallTeamNotifyMemberReady(const THallTeamNotifyMemberReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THallTeamNotifyMemberReady)
}

void THallTeamNotifyMemberReady::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  memberid_ = GOOGLE_ULONGLONG(0);
  readystatus_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THallTeamNotifyMemberReady::~THallTeamNotifyMemberReady() {
  // @@protoc_insertion_point(destructor:pb.THallTeamNotifyMemberReady)
  SharedDtor();
}

void THallTeamNotifyMemberReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void THallTeamNotifyMemberReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THallTeamNotifyMemberReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THallTeamNotifyMemberReady_descriptor_;
}

const THallTeamNotifyMemberReady& THallTeamNotifyMemberReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTeam_2eproto();
  return *default_instance_;
}

THallTeamNotifyMemberReady* THallTeamNotifyMemberReady::default_instance_ = NULL;

THallTeamNotifyMemberReady* THallTeamNotifyMemberReady::New() const {
  return new THallTeamNotifyMemberReady;
}

void THallTeamNotifyMemberReady::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<THallTeamNotifyMemberReady*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(teamid_, memberid_);
    readystatus_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THallTeamNotifyMemberReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THallTeamNotifyMemberReady)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MemberId;
        break;
      }

      // optional uint64 MemberId = 2;
      case 2: {
        if (tag == 16) {
         parse_MemberId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memberid_)));
          set_has_memberid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ReadyStatus;
        break;
      }

      // optional .pb.EHallMemberReadyStatus ReadyStatus = 3;
      case 3: {
        if (tag == 24) {
         parse_ReadyStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EHallMemberReadyStatus_IsValid(value)) {
            set_readystatus(static_cast< ::pb::EHallMemberReadyStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THallTeamNotifyMemberReady)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THallTeamNotifyMemberReady)
  return false;
#undef DO_
}

void THallTeamNotifyMemberReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THallTeamNotifyMemberReady)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional uint64 MemberId = 2;
  if (has_memberid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->memberid(), output);
  }

  // optional .pb.EHallMemberReadyStatus ReadyStatus = 3;
  if (has_readystatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->readystatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THallTeamNotifyMemberReady)
}

::google::protobuf::uint8* THallTeamNotifyMemberReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THallTeamNotifyMemberReady)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional uint64 MemberId = 2;
  if (has_memberid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->memberid(), target);
  }

  // optional .pb.EHallMemberReadyStatus ReadyStatus = 3;
  if (has_readystatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->readystatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THallTeamNotifyMemberReady)
  return target;
}

int THallTeamNotifyMemberReady::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 MemberId = 2;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->memberid());
    }

    // optional .pb.EHallMemberReadyStatus ReadyStatus = 3;
    if (has_readystatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->readystatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THallTeamNotifyMemberReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THallTeamNotifyMemberReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THallTeamNotifyMemberReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THallTeamNotifyMemberReady::MergeFrom(const THallTeamNotifyMemberReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_memberid()) {
      set_memberid(from.memberid());
    }
    if (from.has_readystatus()) {
      set_readystatus(from.readystatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THallTeamNotifyMemberReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THallTeamNotifyMemberReady::CopyFrom(const THallTeamNotifyMemberReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THallTeamNotifyMemberReady::IsInitialized() const {

  return true;
}

void THallTeamNotifyMemberReady::Swap(THallTeamNotifyMemberReady* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(memberid_, other->memberid_);
    std::swap(readystatus_, other->readystatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THallTeamNotifyMemberReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THallTeamNotifyMemberReady_descriptor_;
  metadata.reflection = THallTeamNotifyMemberReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THallTeamNotifyTeamDissolved::kTeamIdFieldNumber;
const int THallTeamNotifyTeamDissolved::kCauseFieldNumber;
#endif  // !_MSC_VER

THallTeamNotifyTeamDissolved::THallTeamNotifyTeamDissolved()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THallTeamNotifyTeamDissolved)
}

void THallTeamNotifyTeamDissolved::InitAsDefaultInstance() {
}

THallTeamNotifyTeamDissolved::THallTeamNotifyTeamDissolved(const THallTeamNotifyTeamDissolved& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THallTeamNotifyTeamDissolved)
}

void THallTeamNotifyTeamDissolved::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  cause_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THallTeamNotifyTeamDissolved::~THallTeamNotifyTeamDissolved() {
  // @@protoc_insertion_point(destructor:pb.THallTeamNotifyTeamDissolved)
  SharedDtor();
}

void THallTeamNotifyTeamDissolved::SharedDtor() {
  if (this != default_instance_) {
  }
}

void THallTeamNotifyTeamDissolved::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THallTeamNotifyTeamDissolved::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THallTeamNotifyTeamDissolved_descriptor_;
}

const THallTeamNotifyTeamDissolved& THallTeamNotifyTeamDissolved::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTeam_2eproto();
  return *default_instance_;
}

THallTeamNotifyTeamDissolved* THallTeamNotifyTeamDissolved::default_instance_ = NULL;

THallTeamNotifyTeamDissolved* THallTeamNotifyTeamDissolved::New() const {
  return new THallTeamNotifyTeamDissolved;
}

void THallTeamNotifyTeamDissolved::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    teamid_ = GOOGLE_ULONGLONG(0);
    cause_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THallTeamNotifyTeamDissolved::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THallTeamNotifyTeamDissolved)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Cause;
        break;
      }

      // optional .pb.ETeamDissolveCause Cause = 2;
      case 2: {
        if (tag == 16) {
         parse_Cause:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ETeamDissolveCause_IsValid(value)) {
            set_cause(static_cast< ::pb::ETeamDissolveCause >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THallTeamNotifyTeamDissolved)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THallTeamNotifyTeamDissolved)
  return false;
#undef DO_
}

void THallTeamNotifyTeamDissolved::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THallTeamNotifyTeamDissolved)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional .pb.ETeamDissolveCause Cause = 2;
  if (has_cause()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cause(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THallTeamNotifyTeamDissolved)
}

::google::protobuf::uint8* THallTeamNotifyTeamDissolved::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THallTeamNotifyTeamDissolved)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional .pb.ETeamDissolveCause Cause = 2;
  if (has_cause()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cause(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THallTeamNotifyTeamDissolved)
  return target;
}

int THallTeamNotifyTeamDissolved::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .pb.ETeamDissolveCause Cause = 2;
    if (has_cause()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cause());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THallTeamNotifyTeamDissolved::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THallTeamNotifyTeamDissolved* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THallTeamNotifyTeamDissolved*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THallTeamNotifyTeamDissolved::MergeFrom(const THallTeamNotifyTeamDissolved& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_cause()) {
      set_cause(from.cause());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THallTeamNotifyTeamDissolved::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THallTeamNotifyTeamDissolved::CopyFrom(const THallTeamNotifyTeamDissolved& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THallTeamNotifyTeamDissolved::IsInitialized() const {

  return true;
}

void THallTeamNotifyTeamDissolved::Swap(THallTeamNotifyTeamDissolved* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(cause_, other->cause_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THallTeamNotifyTeamDissolved::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THallTeamNotifyTeamDissolved_descriptor_;
  metadata.reflection = THallTeamNotifyTeamDissolved_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THallTeamNotifyStartPlay::kTeamIdFieldNumber;
const int THallTeamNotifyStartPlay::kErrFieldNumber;
#endif  // !_MSC_VER

THallTeamNotifyStartPlay::THallTeamNotifyStartPlay()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THallTeamNotifyStartPlay)
}

void THallTeamNotifyStartPlay::InitAsDefaultInstance() {
}

THallTeamNotifyStartPlay::THallTeamNotifyStartPlay(const THallTeamNotifyStartPlay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THallTeamNotifyStartPlay)
}

void THallTeamNotifyStartPlay::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  err_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THallTeamNotifyStartPlay::~THallTeamNotifyStartPlay() {
  // @@protoc_insertion_point(destructor:pb.THallTeamNotifyStartPlay)
  SharedDtor();
}

void THallTeamNotifyStartPlay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void THallTeamNotifyStartPlay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THallTeamNotifyStartPlay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THallTeamNotifyStartPlay_descriptor_;
}

const THallTeamNotifyStartPlay& THallTeamNotifyStartPlay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTeam_2eproto();
  return *default_instance_;
}

THallTeamNotifyStartPlay* THallTeamNotifyStartPlay::default_instance_ = NULL;

THallTeamNotifyStartPlay* THallTeamNotifyStartPlay::New() const {
  return new THallTeamNotifyStartPlay;
}

void THallTeamNotifyStartPlay::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<THallTeamNotifyStartPlay*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(teamid_, err_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THallTeamNotifyStartPlay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THallTeamNotifyStartPlay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Err;
        break;
      }

      // optional uint32 Err = 2;
      case 2: {
        if (tag == 16) {
         parse_Err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THallTeamNotifyStartPlay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THallTeamNotifyStartPlay)
  return false;
#undef DO_
}

void THallTeamNotifyStartPlay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THallTeamNotifyStartPlay)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional uint32 Err = 2;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->err(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THallTeamNotifyStartPlay)
}

::google::protobuf::uint8* THallTeamNotifyStartPlay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THallTeamNotifyStartPlay)
  // optional uint64 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional uint32 Err = 2;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->err(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THallTeamNotifyStartPlay)
  return target;
}

int THallTeamNotifyStartPlay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 Err = 2;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->err());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THallTeamNotifyStartPlay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THallTeamNotifyStartPlay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THallTeamNotifyStartPlay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THallTeamNotifyStartPlay::MergeFrom(const THallTeamNotifyStartPlay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THallTeamNotifyStartPlay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THallTeamNotifyStartPlay::CopyFrom(const THallTeamNotifyStartPlay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THallTeamNotifyStartPlay::IsInitialized() const {

  return true;
}

void THallTeamNotifyStartPlay::Swap(THallTeamNotifyStartPlay* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(err_, other->err_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THallTeamNotifyStartPlay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THallTeamNotifyStartPlay_descriptor_;
  metadata.reflection = THallTeamNotifyStartPlay_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
