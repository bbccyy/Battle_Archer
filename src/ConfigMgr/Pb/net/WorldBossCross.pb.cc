// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/WorldBossCross.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/WorldBossCross.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TWorldBossCrossExchangeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossExchangeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossShopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossDamageSingle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossDamageSingle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossRankInfoForRankId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossRankInfoForRankId_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossGetBossInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossGetBossInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossGetAboveRankNRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossGetAboveRankNRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossGetRankInfoByRankIdReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossGetRankInfoByRankIdReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossGetRankInfoByRankIdRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossGetRankInfoByRankIdRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossEnterBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossEnterBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossEnterBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossEnterBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossReportBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossReportBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossReportBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossReportBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossBuyAtkNumReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossBuyAtkNumReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossBuyAtkNumRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossBuyAtkNumRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossReceiveDamageRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossReceiveDamageRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossReceiveDamageRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossReceiveDamageRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossAutoReceiveDamageRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossAutoReceiveDamageRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossBattleRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossBattleRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossGetBattleRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossGetBattleRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossGetMaxBattleRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossGetMaxBattleRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossGetMaxBattleRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossGetMaxBattleRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossGetUserMaxBattleRidReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossGetUserMaxBattleRidReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossGetUserMaxBattleRidRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossGetUserMaxBattleRidRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossGetBossSimpleInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossGetBossSimpleInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossExchangeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossExchangeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossGetRankInfoTopNRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossGetRankInfoTopNRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossGetRankInfoByLimitReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossGetRankInfoByLimitReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossGetRankInfoByLimitRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossGetRankInfoByLimitRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWorldBossCrossNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWorldBossCrossNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fWorldBossCross_2eproto() {
  protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/WorldBossCross.proto");
  GOOGLE_CHECK(file != NULL);
  TWorldBossCrossExchangeInfo_descriptor_ = file->message_type(0);
  static const int TWorldBossCrossExchangeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossExchangeInfo, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossExchangeInfo, num_),
  };
  TWorldBossCrossExchangeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossExchangeInfo_descriptor_,
      TWorldBossCrossExchangeInfo::default_instance_,
      TWorldBossCrossExchangeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossExchangeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossExchangeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossExchangeInfo));
  TWorldBossCrossShopInfo_descriptor_ = file->message_type(1);
  static const int TWorldBossCrossShopInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossShopInfo, goodsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossShopInfo, buynum_),
  };
  TWorldBossCrossShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossShopInfo_descriptor_,
      TWorldBossCrossShopInfo::default_instance_,
      TWorldBossCrossShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossShopInfo));
  TWorldBossCrossDamageSingle_descriptor_ = file->message_type(2);
  static const int TWorldBossCrossDamageSingle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossDamageSingle, maxdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossDamageSingle, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossDamageSingle, usersimple_),
  };
  TWorldBossCrossDamageSingle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossDamageSingle_descriptor_,
      TWorldBossCrossDamageSingle::default_instance_,
      TWorldBossCrossDamageSingle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossDamageSingle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossDamageSingle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossDamageSingle));
  TWorldBossCrossRankInfoForRankId_descriptor_ = file->message_type(3);
  static const int TWorldBossCrossRankInfoForRankId_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossRankInfoForRankId, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossRankInfoForRankId, usernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossRankInfoForRankId, damagemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossRankInfoForRankId, damagerankarr_),
  };
  TWorldBossCrossRankInfoForRankId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossRankInfoForRankId_descriptor_,
      TWorldBossCrossRankInfoForRankId::default_instance_,
      TWorldBossCrossRankInfoForRankId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossRankInfoForRankId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossRankInfoForRankId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossRankInfoForRankId));
  TWorldBossCrossGetBossInfoRsp_descriptor_ = file->message_type(4);
  static const int TWorldBossCrossGetBossInfoRsp_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetBossInfoRsp, crossteamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetBossInfoRsp, usedatknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetBossInfoRsp, buynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetBossInfoRsp, buyatknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetBossInfoRsp, receiveddamagerewardtidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetBossInfoRsp, myrankinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetBossInfoRsp, rankforrankidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetBossInfoRsp, dailymaxdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetBossInfoRsp, arrexchangeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetBossInfoRsp, arrrmbshop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetBossInfoRsp, arrrankreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetBossInfoRsp, isrankrewardview_),
  };
  TWorldBossCrossGetBossInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossGetBossInfoRsp_descriptor_,
      TWorldBossCrossGetBossInfoRsp::default_instance_,
      TWorldBossCrossGetBossInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetBossInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetBossInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossGetBossInfoRsp));
  TWorldBossCrossGetAboveRankNRsp_descriptor_ = file->message_type(5);
  static const int TWorldBossCrossGetAboveRankNRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetAboveRankNRsp, aboverankarr_),
  };
  TWorldBossCrossGetAboveRankNRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossGetAboveRankNRsp_descriptor_,
      TWorldBossCrossGetAboveRankNRsp::default_instance_,
      TWorldBossCrossGetAboveRankNRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetAboveRankNRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetAboveRankNRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossGetAboveRankNRsp));
  TWorldBossCrossGetRankInfoByRankIdReq_descriptor_ = file->message_type(6);
  static const int TWorldBossCrossGetRankInfoByRankIdReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetRankInfoByRankIdReq, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetRankInfoByRankIdReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetRankInfoByRankIdReq, limit_),
  };
  TWorldBossCrossGetRankInfoByRankIdReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossGetRankInfoByRankIdReq_descriptor_,
      TWorldBossCrossGetRankInfoByRankIdReq::default_instance_,
      TWorldBossCrossGetRankInfoByRankIdReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetRankInfoByRankIdReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetRankInfoByRankIdReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossGetRankInfoByRankIdReq));
  TWorldBossCrossGetRankInfoByRankIdRsp_descriptor_ = file->message_type(7);
  static const int TWorldBossCrossGetRankInfoByRankIdRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetRankInfoByRankIdRsp, damagerankarr_),
  };
  TWorldBossCrossGetRankInfoByRankIdRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossGetRankInfoByRankIdRsp_descriptor_,
      TWorldBossCrossGetRankInfoByRankIdRsp::default_instance_,
      TWorldBossCrossGetRankInfoByRankIdRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetRankInfoByRankIdRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetRankInfoByRankIdRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossGetRankInfoByRankIdRsp));
  TWorldBossCrossEnterBattleReq_descriptor_ = file->message_type(8);
  static const int TWorldBossCrossEnterBattleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossEnterBattleReq, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossEnterBattleReq, battlecheckparam_),
  };
  TWorldBossCrossEnterBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossEnterBattleReq_descriptor_,
      TWorldBossCrossEnterBattleReq::default_instance_,
      TWorldBossCrossEnterBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossEnterBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossEnterBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossEnterBattleReq));
  TWorldBossCrossEnterBattleRsp_descriptor_ = file->message_type(9);
  static const int TWorldBossCrossEnterBattleRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossEnterBattleRsp, battleargs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossEnterBattleRsp, usedatknum_),
  };
  TWorldBossCrossEnterBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossEnterBattleRsp_descriptor_,
      TWorldBossCrossEnterBattleRsp::default_instance_,
      TWorldBossCrossEnterBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossEnterBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossEnterBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossEnterBattleRsp));
  TWorldBossCrossReportBattleReq_descriptor_ = file->message_type(10);
  static const int TWorldBossCrossReportBattleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossReportBattleReq, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossReportBattleReq, battleret_),
  };
  TWorldBossCrossReportBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossReportBattleReq_descriptor_,
      TWorldBossCrossReportBattleReq::default_instance_,
      TWorldBossCrossReportBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossReportBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossReportBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossReportBattleReq));
  TWorldBossCrossReportBattleRsp_descriptor_ = file->message_type(11);
  static const int TWorldBossCrossReportBattleRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossReportBattleRsp, isnewdamagerecord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossReportBattleRsp, myrankinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossReportBattleRsp, droparray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossReportBattleRsp, dailymaxdamage_),
  };
  TWorldBossCrossReportBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossReportBattleRsp_descriptor_,
      TWorldBossCrossReportBattleRsp::default_instance_,
      TWorldBossCrossReportBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossReportBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossReportBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossReportBattleRsp));
  TWorldBossCrossBuyAtkNumReq_descriptor_ = file->message_type(12);
  static const int TWorldBossCrossBuyAtkNumReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossBuyAtkNumReq, num_),
  };
  TWorldBossCrossBuyAtkNumReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossBuyAtkNumReq_descriptor_,
      TWorldBossCrossBuyAtkNumReq::default_instance_,
      TWorldBossCrossBuyAtkNumReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossBuyAtkNumReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossBuyAtkNumReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossBuyAtkNumReq));
  TWorldBossCrossBuyAtkNumRsp_descriptor_ = file->message_type(13);
  static const int TWorldBossCrossBuyAtkNumRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossBuyAtkNumRsp, buynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossBuyAtkNumRsp, buyatknum_),
  };
  TWorldBossCrossBuyAtkNumRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossBuyAtkNumRsp_descriptor_,
      TWorldBossCrossBuyAtkNumRsp::default_instance_,
      TWorldBossCrossBuyAtkNumRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossBuyAtkNumRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossBuyAtkNumRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossBuyAtkNumRsp));
  TWorldBossCrossReceiveDamageRewardReq_descriptor_ = file->message_type(14);
  static const int TWorldBossCrossReceiveDamageRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossReceiveDamageRewardReq, rewardtid_),
  };
  TWorldBossCrossReceiveDamageRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossReceiveDamageRewardReq_descriptor_,
      TWorldBossCrossReceiveDamageRewardReq::default_instance_,
      TWorldBossCrossReceiveDamageRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossReceiveDamageRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossReceiveDamageRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossReceiveDamageRewardReq));
  TWorldBossCrossReceiveDamageRewardRsp_descriptor_ = file->message_type(15);
  static const int TWorldBossCrossReceiveDamageRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossReceiveDamageRewardRsp, rewardarr_),
  };
  TWorldBossCrossReceiveDamageRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossReceiveDamageRewardRsp_descriptor_,
      TWorldBossCrossReceiveDamageRewardRsp::default_instance_,
      TWorldBossCrossReceiveDamageRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossReceiveDamageRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossReceiveDamageRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossReceiveDamageRewardRsp));
  TWorldBossCrossAutoReceiveDamageRewardRsp_descriptor_ = file->message_type(16);
  static const int TWorldBossCrossAutoReceiveDamageRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossAutoReceiveDamageRewardRsp, receivedrewardtidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossAutoReceiveDamageRewardRsp, rewardarr_),
  };
  TWorldBossCrossAutoReceiveDamageRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossAutoReceiveDamageRewardRsp_descriptor_,
      TWorldBossCrossAutoReceiveDamageRewardRsp::default_instance_,
      TWorldBossCrossAutoReceiveDamageRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossAutoReceiveDamageRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossAutoReceiveDamageRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossAutoReceiveDamageRewardRsp));
  TWorldBossCrossUnit_descriptor_ = file->message_type(17);
  static const int TWorldBossCrossUnit_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossUnit, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossUnit, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossUnit, starlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossUnit, level_),
  };
  TWorldBossCrossUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossUnit_descriptor_,
      TWorldBossCrossUnit::default_instance_,
      TWorldBossCrossUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossUnit));
  TWorldBossCrossBattleRecord_descriptor_ = file->message_type(18);
  static const int TWorldBossCrossBattleRecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossBattleRecord, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossBattleRecord, battletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossBattleRecord, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossBattleRecord, unitarr_),
  };
  TWorldBossCrossBattleRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossBattleRecord_descriptor_,
      TWorldBossCrossBattleRecord::default_instance_,
      TWorldBossCrossBattleRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossBattleRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossBattleRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossBattleRecord));
  TWorldBossCrossGetBattleRecordRsp_descriptor_ = file->message_type(19);
  static const int TWorldBossCrossGetBattleRecordRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetBattleRecordRsp, recordarr_),
  };
  TWorldBossCrossGetBattleRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossGetBattleRecordRsp_descriptor_,
      TWorldBossCrossGetBattleRecordRsp::default_instance_,
      TWorldBossCrossGetBattleRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetBattleRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetBattleRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossGetBattleRecordRsp));
  TWorldBossCrossGetMaxBattleRecordReq_descriptor_ = file->message_type(20);
  static const int TWorldBossCrossGetMaxBattleRecordReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetMaxBattleRecordReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetMaxBattleRecordReq, serverid_),
  };
  TWorldBossCrossGetMaxBattleRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossGetMaxBattleRecordReq_descriptor_,
      TWorldBossCrossGetMaxBattleRecordReq::default_instance_,
      TWorldBossCrossGetMaxBattleRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetMaxBattleRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetMaxBattleRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossGetMaxBattleRecordReq));
  TWorldBossCrossGetMaxBattleRecordRsp_descriptor_ = file->message_type(21);
  static const int TWorldBossCrossGetMaxBattleRecordRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetMaxBattleRecordRsp, battleret_),
  };
  TWorldBossCrossGetMaxBattleRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossGetMaxBattleRecordRsp_descriptor_,
      TWorldBossCrossGetMaxBattleRecordRsp::default_instance_,
      TWorldBossCrossGetMaxBattleRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetMaxBattleRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetMaxBattleRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossGetMaxBattleRecordRsp));
  TWorldBossCrossGetUserMaxBattleRidReq_descriptor_ = file->message_type(22);
  static const int TWorldBossCrossGetUserMaxBattleRidReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetUserMaxBattleRidReq, uid_),
  };
  TWorldBossCrossGetUserMaxBattleRidReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossGetUserMaxBattleRidReq_descriptor_,
      TWorldBossCrossGetUserMaxBattleRidReq::default_instance_,
      TWorldBossCrossGetUserMaxBattleRidReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetUserMaxBattleRidReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetUserMaxBattleRidReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossGetUserMaxBattleRidReq));
  TWorldBossCrossGetUserMaxBattleRidRsp_descriptor_ = file->message_type(23);
  static const int TWorldBossCrossGetUserMaxBattleRidRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetUserMaxBattleRidRsp, rid_),
  };
  TWorldBossCrossGetUserMaxBattleRidRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossGetUserMaxBattleRidRsp_descriptor_,
      TWorldBossCrossGetUserMaxBattleRidRsp::default_instance_,
      TWorldBossCrossGetUserMaxBattleRidRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetUserMaxBattleRidRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetUserMaxBattleRidRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossGetUserMaxBattleRidRsp));
  TWorldBossCrossGetBossSimpleInfoRsp_descriptor_ = file->message_type(24);
  static const int TWorldBossCrossGetBossSimpleInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetBossSimpleInfoRsp, rankforrankidarr_),
  };
  TWorldBossCrossGetBossSimpleInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossGetBossSimpleInfoRsp_descriptor_,
      TWorldBossCrossGetBossSimpleInfoRsp::default_instance_,
      TWorldBossCrossGetBossSimpleInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetBossSimpleInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetBossSimpleInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossGetBossSimpleInfoRsp));
  TWorldBossCrossExchangeReq_descriptor_ = file->message_type(25);
  static const int TWorldBossCrossExchangeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossExchangeReq, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossExchangeReq, num_),
  };
  TWorldBossCrossExchangeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossExchangeReq_descriptor_,
      TWorldBossCrossExchangeReq::default_instance_,
      TWorldBossCrossExchangeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossExchangeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossExchangeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossExchangeReq));
  TWorldBossCrossGetRankInfoTopNRsp_descriptor_ = file->message_type(26);
  static const int TWorldBossCrossGetRankInfoTopNRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetRankInfoTopNRsp, damagerankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetRankInfoTopNRsp, myrankinfo_),
  };
  TWorldBossCrossGetRankInfoTopNRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossGetRankInfoTopNRsp_descriptor_,
      TWorldBossCrossGetRankInfoTopNRsp::default_instance_,
      TWorldBossCrossGetRankInfoTopNRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetRankInfoTopNRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetRankInfoTopNRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossGetRankInfoTopNRsp));
  TWorldBossCrossGetRankInfoByLimitReq_descriptor_ = file->message_type(27);
  static const int TWorldBossCrossGetRankInfoByLimitReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetRankInfoByLimitReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetRankInfoByLimitReq, limit_),
  };
  TWorldBossCrossGetRankInfoByLimitReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossGetRankInfoByLimitReq_descriptor_,
      TWorldBossCrossGetRankInfoByLimitReq::default_instance_,
      TWorldBossCrossGetRankInfoByLimitReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetRankInfoByLimitReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetRankInfoByLimitReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossGetRankInfoByLimitReq));
  TWorldBossCrossGetRankInfoByLimitRsp_descriptor_ = file->message_type(28);
  static const int TWorldBossCrossGetRankInfoByLimitRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetRankInfoByLimitRsp, damagerankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetRankInfoByLimitRsp, myrankinfo_),
  };
  TWorldBossCrossGetRankInfoByLimitRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossGetRankInfoByLimitRsp_descriptor_,
      TWorldBossCrossGetRankInfoByLimitRsp::default_instance_,
      TWorldBossCrossGetRankInfoByLimitRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetRankInfoByLimitRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossGetRankInfoByLimitRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossGetRankInfoByLimitRsp));
  TWorldBossCrossNotify_descriptor_ = file->message_type(29);
  static const int TWorldBossCrossNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossNotify, arrrmbshop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossNotify, arrrankreward_),
  };
  TWorldBossCrossNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWorldBossCrossNotify_descriptor_,
      TWorldBossCrossNotify::default_instance_,
      TWorldBossCrossNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWorldBossCrossNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWorldBossCrossNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fWorldBossCross_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossExchangeInfo_descriptor_, &TWorldBossCrossExchangeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossShopInfo_descriptor_, &TWorldBossCrossShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossDamageSingle_descriptor_, &TWorldBossCrossDamageSingle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossRankInfoForRankId_descriptor_, &TWorldBossCrossRankInfoForRankId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossGetBossInfoRsp_descriptor_, &TWorldBossCrossGetBossInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossGetAboveRankNRsp_descriptor_, &TWorldBossCrossGetAboveRankNRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossGetRankInfoByRankIdReq_descriptor_, &TWorldBossCrossGetRankInfoByRankIdReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossGetRankInfoByRankIdRsp_descriptor_, &TWorldBossCrossGetRankInfoByRankIdRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossEnterBattleReq_descriptor_, &TWorldBossCrossEnterBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossEnterBattleRsp_descriptor_, &TWorldBossCrossEnterBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossReportBattleReq_descriptor_, &TWorldBossCrossReportBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossReportBattleRsp_descriptor_, &TWorldBossCrossReportBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossBuyAtkNumReq_descriptor_, &TWorldBossCrossBuyAtkNumReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossBuyAtkNumRsp_descriptor_, &TWorldBossCrossBuyAtkNumRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossReceiveDamageRewardReq_descriptor_, &TWorldBossCrossReceiveDamageRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossReceiveDamageRewardRsp_descriptor_, &TWorldBossCrossReceiveDamageRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossAutoReceiveDamageRewardRsp_descriptor_, &TWorldBossCrossAutoReceiveDamageRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossUnit_descriptor_, &TWorldBossCrossUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossBattleRecord_descriptor_, &TWorldBossCrossBattleRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossGetBattleRecordRsp_descriptor_, &TWorldBossCrossGetBattleRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossGetMaxBattleRecordReq_descriptor_, &TWorldBossCrossGetMaxBattleRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossGetMaxBattleRecordRsp_descriptor_, &TWorldBossCrossGetMaxBattleRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossGetUserMaxBattleRidReq_descriptor_, &TWorldBossCrossGetUserMaxBattleRidReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossGetUserMaxBattleRidRsp_descriptor_, &TWorldBossCrossGetUserMaxBattleRidRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossGetBossSimpleInfoRsp_descriptor_, &TWorldBossCrossGetBossSimpleInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossExchangeReq_descriptor_, &TWorldBossCrossExchangeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossGetRankInfoTopNRsp_descriptor_, &TWorldBossCrossGetRankInfoTopNRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossGetRankInfoByLimitReq_descriptor_, &TWorldBossCrossGetRankInfoByLimitReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossGetRankInfoByLimitRsp_descriptor_, &TWorldBossCrossGetRankInfoByLimitRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWorldBossCrossNotify_descriptor_, &TWorldBossCrossNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fWorldBossCross_2eproto() {
  delete TWorldBossCrossExchangeInfo::default_instance_;
  delete TWorldBossCrossExchangeInfo_reflection_;
  delete TWorldBossCrossShopInfo::default_instance_;
  delete TWorldBossCrossShopInfo_reflection_;
  delete TWorldBossCrossDamageSingle::default_instance_;
  delete TWorldBossCrossDamageSingle_reflection_;
  delete TWorldBossCrossRankInfoForRankId::default_instance_;
  delete TWorldBossCrossRankInfoForRankId_reflection_;
  delete TWorldBossCrossGetBossInfoRsp::default_instance_;
  delete TWorldBossCrossGetBossInfoRsp_reflection_;
  delete TWorldBossCrossGetAboveRankNRsp::default_instance_;
  delete TWorldBossCrossGetAboveRankNRsp_reflection_;
  delete TWorldBossCrossGetRankInfoByRankIdReq::default_instance_;
  delete TWorldBossCrossGetRankInfoByRankIdReq_reflection_;
  delete TWorldBossCrossGetRankInfoByRankIdRsp::default_instance_;
  delete TWorldBossCrossGetRankInfoByRankIdRsp_reflection_;
  delete TWorldBossCrossEnterBattleReq::default_instance_;
  delete TWorldBossCrossEnterBattleReq_reflection_;
  delete TWorldBossCrossEnterBattleRsp::default_instance_;
  delete TWorldBossCrossEnterBattleRsp_reflection_;
  delete TWorldBossCrossReportBattleReq::default_instance_;
  delete TWorldBossCrossReportBattleReq_reflection_;
  delete TWorldBossCrossReportBattleRsp::default_instance_;
  delete TWorldBossCrossReportBattleRsp_reflection_;
  delete TWorldBossCrossBuyAtkNumReq::default_instance_;
  delete TWorldBossCrossBuyAtkNumReq_reflection_;
  delete TWorldBossCrossBuyAtkNumRsp::default_instance_;
  delete TWorldBossCrossBuyAtkNumRsp_reflection_;
  delete TWorldBossCrossReceiveDamageRewardReq::default_instance_;
  delete TWorldBossCrossReceiveDamageRewardReq_reflection_;
  delete TWorldBossCrossReceiveDamageRewardRsp::default_instance_;
  delete TWorldBossCrossReceiveDamageRewardRsp_reflection_;
  delete TWorldBossCrossAutoReceiveDamageRewardRsp::default_instance_;
  delete TWorldBossCrossAutoReceiveDamageRewardRsp_reflection_;
  delete TWorldBossCrossUnit::default_instance_;
  delete TWorldBossCrossUnit_reflection_;
  delete TWorldBossCrossBattleRecord::default_instance_;
  delete TWorldBossCrossBattleRecord_reflection_;
  delete TWorldBossCrossGetBattleRecordRsp::default_instance_;
  delete TWorldBossCrossGetBattleRecordRsp_reflection_;
  delete TWorldBossCrossGetMaxBattleRecordReq::default_instance_;
  delete TWorldBossCrossGetMaxBattleRecordReq_reflection_;
  delete TWorldBossCrossGetMaxBattleRecordRsp::default_instance_;
  delete TWorldBossCrossGetMaxBattleRecordRsp_reflection_;
  delete TWorldBossCrossGetUserMaxBattleRidReq::default_instance_;
  delete TWorldBossCrossGetUserMaxBattleRidReq_reflection_;
  delete TWorldBossCrossGetUserMaxBattleRidRsp::default_instance_;
  delete TWorldBossCrossGetUserMaxBattleRidRsp_reflection_;
  delete TWorldBossCrossGetBossSimpleInfoRsp::default_instance_;
  delete TWorldBossCrossGetBossSimpleInfoRsp_reflection_;
  delete TWorldBossCrossExchangeReq::default_instance_;
  delete TWorldBossCrossExchangeReq_reflection_;
  delete TWorldBossCrossGetRankInfoTopNRsp::default_instance_;
  delete TWorldBossCrossGetRankInfoTopNRsp_reflection_;
  delete TWorldBossCrossGetRankInfoByLimitReq::default_instance_;
  delete TWorldBossCrossGetRankInfoByLimitReq_reflection_;
  delete TWorldBossCrossGetRankInfoByLimitRsp::default_instance_;
  delete TWorldBossCrossGetRankInfoByLimitRsp_reflection_;
  delete TWorldBossCrossNotify::default_instance_;
  delete TWorldBossCrossNotify_reflection_;
}

void protobuf_AddDesc_net_2fWorldBossCross_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030net/WorldBossCross.proto\022\002pb\032\020net/Batt"
    "le.proto\032\016net/User.proto\032\026net/CommonRewa"
    "rd.proto\">\n\033TWorldBossCrossExchangeInfo\022"
    "\022\n\nExchangeId\030\001 \001(\r\022\013\n\003Num\030\002 \001(\r\":\n\027TWor"
    "ldBossCrossShopInfo\022\017\n\007GoodsId\030\001 \001(\r\022\016\n\006"
    "BuyNum\030\002 \001(\r\"g\n\033TWorldBossCrossDamageSin"
    "gle\022\021\n\tMaxDamage\030\001 \001(\004\022\014\n\004Rank\030\002 \001(\r\022\'\n\n"
    "UserSimple\030\003 \001(\0132\023.pb.TUserSimpleInfo\"\216\001"
    "\n TWorldBossCrossRankInfoForRankId\022\016\n\006Ra"
    "nkId\030\001 \001(\r\022\017\n\007UserNum\030\002 \001(\r\022\021\n\tDamageMin"
    "\030\003 \001(\004\0226\n\rDamageRankArr\030\004 \003(\0132\037.pb.TWorl"
    "dBossCrossDamageSingle\"\313\003\n\035TWorldBossCro"
    "ssGetBossInfoRsp\022\023\n\013CrossTeamId\030\001 \001(\r\022\022\n"
    "\nUsedAtkNum\030\002 \001(\r\022\016\n\006BuyNum\030\003 \001(\r\022\021\n\tBuy"
    "AtkNum\030\004 \001(\r\022\"\n\032ReceivedDamageRewardTidA"
    "rr\030\005 \003(\r\0223\n\nMyRankInfo\030\006 \001(\0132\037.pb.TWorld"
    "BossCrossDamageSingle\022>\n\020RankForRankIdAr"
    "r\030\007 \003(\0132$.pb.TWorldBossCrossRankInfoForR"
    "ankId\022\026\n\016DailyMaxDamage\030\010 \001(\004\0228\n\017ArrExch"
    "angeInfo\030\t \003(\0132\037.pb.TWorldBossCrossExcha"
    "ngeInfo\022/\n\nArrRmbShop\030\n \003(\0132\033.pb.TWorldB"
    "ossCrossShopInfo\022(\n\rArrRankReward\030\013 \003(\0132"
    "\021.pb.TCommonReward\022\030\n\020IsRankRewardView\030\014"
    " \001(\r\"X\n\037TWorldBossCrossGetAboveRankNRsp\022"
    "5\n\014AboveRankArr\030\001 \003(\0132\037.pb.TWorldBossCro"
    "ssDamageSingle\"V\n%TWorldBossCrossGetRank"
    "InfoByRankIdReq\022\016\n\006RankId\030\001 \001(\r\022\016\n\006Offse"
    "t\030\002 \001(\r\022\r\n\005Limit\030\003 \001(\r\"_\n%TWorldBossCros"
    "sGetRankInfoByRankIdRsp\0226\n\rDamageRankArr"
    "\030\001 \003(\0132\037.pb.TWorldBossCrossDamageSingle\""
    "`\n\035TWorldBossCrossEnterBattleReq\022\016\n\006Boss"
    "Id\030\001 \001(\r\022/\n\020BattleCheckParam\030\002 \001(\0132\025.pb."
    "TBattleCheckParam\"X\n\035TWorldBossCrossEnte"
    "rBattleRsp\022#\n\nBattleArgs\030\001 \001(\0132\017.pb.TBat"
    "tleArgs\022\022\n\nUsedAtkNum\030\002 \001(\r\"C\n\036TWorldBos"
    "sCrossReportBattleReq\022\016\n\006BossId\030\001 \001(\r\022\021\n"
    "\tBattleRet\030\002 \001(\014\"\256\001\n\036TWorldBossCrossRepo"
    "rtBattleRsp\022\031\n\021IsNewDamageRecord\030\001 \001(\010\0223"
    "\n\nMyRankInfo\030\002 \001(\0132\037.pb.TWorldBossCrossD"
    "amageSingle\022$\n\tDropArray\030\003 \003(\0132\021.pb.TCom"
    "monReward\022\026\n\016DailyMaxDamage\030\004 \001(\004\"*\n\033TWo"
    "rldBossCrossBuyAtkNumReq\022\013\n\003Num\030\001 \001(\r\"@\n"
    "\033TWorldBossCrossBuyAtkNumRsp\022\016\n\006BuyNum\030\001"
    " \001(\r\022\021\n\tBuyAtkNum\030\002 \001(\r\":\n%TWorldBossCro"
    "ssReceiveDamageRewardReq\022\021\n\tRewardTid\030\001 "
    "\001(\r\"M\n%TWorldBossCrossReceiveDamageRewar"
    "dRsp\022$\n\tRewardArr\030\001 \003(\0132\021.pb.TCommonRewa"
    "rd\"o\n)TWorldBossCrossAutoReceiveDamageRe"
    "wardRsp\022\034\n\024ReceivedRewardTidArr\030\001 \003(\r\022$\n"
    "\tRewardArr\030\002 \003(\0132\021.pb.TCommonReward\"N\n\023T"
    "WorldBossCrossUnit\022\013\n\003Hid\030\001 \001(\r\022\013\n\003Pos\030\002"
    " \001(\r\022\016\n\006StarLv\030\003 \001(\r\022\r\n\005Level\030\004 \001(\r\"x\n\033T"
    "WorldBossCrossBattleRecord\022\013\n\003Rid\030\001 \001(\004\022"
    "\022\n\nBattleTime\030\002 \001(\004\022\016\n\006Damage\030\003 \001(\004\022(\n\007U"
    "nitArr\030\004 \003(\0132\027.pb.TWorldBossCrossUnit\"W\n"
    "!TWorldBossCrossGetBattleRecordRsp\0222\n\tRe"
    "cordArr\030\001 \003(\0132\037.pb.TWorldBossCrossBattle"
    "Record\"E\n$TWorldBossCrossGetMaxBattleRec"
    "ordReq\022\013\n\003Uid\030\001 \001(\004\022\020\n\010ServerId\030\002 \001(\t\"9\n"
    "$TWorldBossCrossGetMaxBattleRecordRsp\022\021\n"
    "\tBattleRet\030\002 \001(\014\"4\n%TWorldBossCrossGetUs"
    "erMaxBattleRidReq\022\013\n\003Uid\030\001 \001(\004\"4\n%TWorld"
    "BossCrossGetUserMaxBattleRidRsp\022\013\n\003Rid\030\002"
    " \001(\004\"e\n#TWorldBossCrossGetBossSimpleInfo"
    "Rsp\022>\n\020RankForRankIdArr\030\t \003(\0132$.pb.TWorl"
    "dBossCrossRankInfoForRankId\"=\n\032TWorldBos"
    "sCrossExchangeReq\022\022\n\nExchangeId\030\001 \001(\r\022\013\n"
    "\003Num\030\002 \001(\r\"\220\001\n!TWorldBossCrossGetRankInf"
    "oTopNRsp\0226\n\rDamageRankArr\030\001 \003(\0132\037.pb.TWo"
    "rldBossCrossDamageSingle\0223\n\nMyRankInfo\030\002"
    " \001(\0132\037.pb.TWorldBossCrossDamageSingle\"E\n"
    "$TWorldBossCrossGetRankInfoByLimitReq\022\016\n"
    "\006Offset\030\001 \001(\r\022\r\n\005Limit\030\002 \001(\r\"\223\001\n$TWorldB"
    "ossCrossGetRankInfoByLimitRsp\0226\n\rDamageR"
    "ankArr\030\001 \003(\0132\037.pb.TWorldBossCrossDamageS"
    "ingle\0223\n\nMyRankInfo\030\002 \001(\0132\037.pb.TWorldBos"
    "sCrossDamageSingle\"r\n\025TWorldBossCrossNot"
    "ify\022/\n\nArrRmbShop\030\n \003(\0132\033.pb.TWorldBossC"
    "rossShopInfo\022(\n\rArrRankReward\030\013 \003(\0132\021.pb"
    ".TCommonReward", 3174);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/WorldBossCross.proto", &protobuf_RegisterTypes);
  TWorldBossCrossExchangeInfo::default_instance_ = new TWorldBossCrossExchangeInfo();
  TWorldBossCrossShopInfo::default_instance_ = new TWorldBossCrossShopInfo();
  TWorldBossCrossDamageSingle::default_instance_ = new TWorldBossCrossDamageSingle();
  TWorldBossCrossRankInfoForRankId::default_instance_ = new TWorldBossCrossRankInfoForRankId();
  TWorldBossCrossGetBossInfoRsp::default_instance_ = new TWorldBossCrossGetBossInfoRsp();
  TWorldBossCrossGetAboveRankNRsp::default_instance_ = new TWorldBossCrossGetAboveRankNRsp();
  TWorldBossCrossGetRankInfoByRankIdReq::default_instance_ = new TWorldBossCrossGetRankInfoByRankIdReq();
  TWorldBossCrossGetRankInfoByRankIdRsp::default_instance_ = new TWorldBossCrossGetRankInfoByRankIdRsp();
  TWorldBossCrossEnterBattleReq::default_instance_ = new TWorldBossCrossEnterBattleReq();
  TWorldBossCrossEnterBattleRsp::default_instance_ = new TWorldBossCrossEnterBattleRsp();
  TWorldBossCrossReportBattleReq::default_instance_ = new TWorldBossCrossReportBattleReq();
  TWorldBossCrossReportBattleRsp::default_instance_ = new TWorldBossCrossReportBattleRsp();
  TWorldBossCrossBuyAtkNumReq::default_instance_ = new TWorldBossCrossBuyAtkNumReq();
  TWorldBossCrossBuyAtkNumRsp::default_instance_ = new TWorldBossCrossBuyAtkNumRsp();
  TWorldBossCrossReceiveDamageRewardReq::default_instance_ = new TWorldBossCrossReceiveDamageRewardReq();
  TWorldBossCrossReceiveDamageRewardRsp::default_instance_ = new TWorldBossCrossReceiveDamageRewardRsp();
  TWorldBossCrossAutoReceiveDamageRewardRsp::default_instance_ = new TWorldBossCrossAutoReceiveDamageRewardRsp();
  TWorldBossCrossUnit::default_instance_ = new TWorldBossCrossUnit();
  TWorldBossCrossBattleRecord::default_instance_ = new TWorldBossCrossBattleRecord();
  TWorldBossCrossGetBattleRecordRsp::default_instance_ = new TWorldBossCrossGetBattleRecordRsp();
  TWorldBossCrossGetMaxBattleRecordReq::default_instance_ = new TWorldBossCrossGetMaxBattleRecordReq();
  TWorldBossCrossGetMaxBattleRecordRsp::default_instance_ = new TWorldBossCrossGetMaxBattleRecordRsp();
  TWorldBossCrossGetUserMaxBattleRidReq::default_instance_ = new TWorldBossCrossGetUserMaxBattleRidReq();
  TWorldBossCrossGetUserMaxBattleRidRsp::default_instance_ = new TWorldBossCrossGetUserMaxBattleRidRsp();
  TWorldBossCrossGetBossSimpleInfoRsp::default_instance_ = new TWorldBossCrossGetBossSimpleInfoRsp();
  TWorldBossCrossExchangeReq::default_instance_ = new TWorldBossCrossExchangeReq();
  TWorldBossCrossGetRankInfoTopNRsp::default_instance_ = new TWorldBossCrossGetRankInfoTopNRsp();
  TWorldBossCrossGetRankInfoByLimitReq::default_instance_ = new TWorldBossCrossGetRankInfoByLimitReq();
  TWorldBossCrossGetRankInfoByLimitRsp::default_instance_ = new TWorldBossCrossGetRankInfoByLimitRsp();
  TWorldBossCrossNotify::default_instance_ = new TWorldBossCrossNotify();
  TWorldBossCrossExchangeInfo::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossShopInfo::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossDamageSingle::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossRankInfoForRankId::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossGetBossInfoRsp::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossGetAboveRankNRsp::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossGetRankInfoByRankIdReq::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossGetRankInfoByRankIdRsp::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossEnterBattleReq::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossEnterBattleRsp::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossReportBattleReq::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossReportBattleRsp::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossBuyAtkNumReq::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossBuyAtkNumRsp::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossReceiveDamageRewardReq::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossReceiveDamageRewardRsp::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossAutoReceiveDamageRewardRsp::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossUnit::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossBattleRecord::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossGetBattleRecordRsp::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossGetMaxBattleRecordReq::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossGetMaxBattleRecordRsp::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossGetUserMaxBattleRidReq::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossGetUserMaxBattleRidRsp::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossGetBossSimpleInfoRsp::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossExchangeReq::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossGetRankInfoTopNRsp::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossGetRankInfoByLimitReq::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossGetRankInfoByLimitRsp::default_instance_->InitAsDefaultInstance();
  TWorldBossCrossNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fWorldBossCross_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fWorldBossCross_2eproto {
  StaticDescriptorInitializer_net_2fWorldBossCross_2eproto() {
    protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  }
} static_descriptor_initializer_net_2fWorldBossCross_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossExchangeInfo::kExchangeIdFieldNumber;
const int TWorldBossCrossExchangeInfo::kNumFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossExchangeInfo::TWorldBossCrossExchangeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossExchangeInfo)
}

void TWorldBossCrossExchangeInfo::InitAsDefaultInstance() {
}

TWorldBossCrossExchangeInfo::TWorldBossCrossExchangeInfo(const TWorldBossCrossExchangeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossExchangeInfo)
}

void TWorldBossCrossExchangeInfo::SharedCtor() {
  _cached_size_ = 0;
  exchangeid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossExchangeInfo::~TWorldBossCrossExchangeInfo() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossExchangeInfo)
  SharedDtor();
}

void TWorldBossCrossExchangeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossCrossExchangeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossExchangeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossExchangeInfo_descriptor_;
}

const TWorldBossCrossExchangeInfo& TWorldBossCrossExchangeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossExchangeInfo* TWorldBossCrossExchangeInfo::default_instance_ = NULL;

TWorldBossCrossExchangeInfo* TWorldBossCrossExchangeInfo::New() const {
  return new TWorldBossCrossExchangeInfo;
}

void TWorldBossCrossExchangeInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TWorldBossCrossExchangeInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(exchangeid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossExchangeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossExchangeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ExchangeId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exchangeid_)));
          set_has_exchangeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossExchangeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossExchangeInfo)
  return false;
#undef DO_
}

void TWorldBossCrossExchangeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossExchangeInfo)
  // optional uint32 ExchangeId = 1;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exchangeid(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossExchangeInfo)
}

::google::protobuf::uint8* TWorldBossCrossExchangeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossExchangeInfo)
  // optional uint32 ExchangeId = 1;
  if (has_exchangeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exchangeid(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossExchangeInfo)
  return target;
}

int TWorldBossCrossExchangeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ExchangeId = 1;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exchangeid());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossExchangeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossExchangeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossExchangeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossExchangeInfo::MergeFrom(const TWorldBossCrossExchangeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossExchangeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossExchangeInfo::CopyFrom(const TWorldBossCrossExchangeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossExchangeInfo::IsInitialized() const {

  return true;
}

void TWorldBossCrossExchangeInfo::Swap(TWorldBossCrossExchangeInfo* other) {
  if (other != this) {
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossExchangeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossExchangeInfo_descriptor_;
  metadata.reflection = TWorldBossCrossExchangeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossShopInfo::kGoodsIdFieldNumber;
const int TWorldBossCrossShopInfo::kBuyNumFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossShopInfo::TWorldBossCrossShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossShopInfo)
}

void TWorldBossCrossShopInfo::InitAsDefaultInstance() {
}

TWorldBossCrossShopInfo::TWorldBossCrossShopInfo(const TWorldBossCrossShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossShopInfo)
}

void TWorldBossCrossShopInfo::SharedCtor() {
  _cached_size_ = 0;
  goodsid_ = 0u;
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossShopInfo::~TWorldBossCrossShopInfo() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossShopInfo)
  SharedDtor();
}

void TWorldBossCrossShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossCrossShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossShopInfo_descriptor_;
}

const TWorldBossCrossShopInfo& TWorldBossCrossShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossShopInfo* TWorldBossCrossShopInfo::default_instance_ = NULL;

TWorldBossCrossShopInfo* TWorldBossCrossShopInfo::New() const {
  return new TWorldBossCrossShopInfo;
}

void TWorldBossCrossShopInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TWorldBossCrossShopInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(goodsid_, buynum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossShopInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GoodsId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goodsid_)));
          set_has_goodsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyNum;
        break;
      }

      // optional uint32 BuyNum = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossShopInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossShopInfo)
  return false;
#undef DO_
}

void TWorldBossCrossShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossShopInfo)
  // optional uint32 GoodsId = 1;
  if (has_goodsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->goodsid(), output);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossShopInfo)
}

::google::protobuf::uint8* TWorldBossCrossShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossShopInfo)
  // optional uint32 GoodsId = 1;
  if (has_goodsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->goodsid(), target);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossShopInfo)
  return target;
}

int TWorldBossCrossShopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GoodsId = 1;
    if (has_goodsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goodsid());
    }

    // optional uint32 BuyNum = 2;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossShopInfo::MergeFrom(const TWorldBossCrossShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goodsid()) {
      set_goodsid(from.goodsid());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossShopInfo::CopyFrom(const TWorldBossCrossShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossShopInfo::IsInitialized() const {

  return true;
}

void TWorldBossCrossShopInfo::Swap(TWorldBossCrossShopInfo* other) {
  if (other != this) {
    std::swap(goodsid_, other->goodsid_);
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossShopInfo_descriptor_;
  metadata.reflection = TWorldBossCrossShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossDamageSingle::kMaxDamageFieldNumber;
const int TWorldBossCrossDamageSingle::kRankFieldNumber;
const int TWorldBossCrossDamageSingle::kUserSimpleFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossDamageSingle::TWorldBossCrossDamageSingle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossDamageSingle)
}

void TWorldBossCrossDamageSingle::InitAsDefaultInstance() {
  usersimple_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TWorldBossCrossDamageSingle::TWorldBossCrossDamageSingle(const TWorldBossCrossDamageSingle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossDamageSingle)
}

void TWorldBossCrossDamageSingle::SharedCtor() {
  _cached_size_ = 0;
  maxdamage_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  usersimple_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossDamageSingle::~TWorldBossCrossDamageSingle() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossDamageSingle)
  SharedDtor();
}

void TWorldBossCrossDamageSingle::SharedDtor() {
  if (this != default_instance_) {
    delete usersimple_;
  }
}

void TWorldBossCrossDamageSingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossDamageSingle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossDamageSingle_descriptor_;
}

const TWorldBossCrossDamageSingle& TWorldBossCrossDamageSingle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossDamageSingle* TWorldBossCrossDamageSingle::default_instance_ = NULL;

TWorldBossCrossDamageSingle* TWorldBossCrossDamageSingle::New() const {
  return new TWorldBossCrossDamageSingle;
}

void TWorldBossCrossDamageSingle::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    maxdamage_ = GOOGLE_ULONGLONG(0);
    rank_ = 0u;
    if (has_usersimple()) {
      if (usersimple_ != NULL) usersimple_->::pb::TUserSimpleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossDamageSingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossDamageSingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 MaxDamage = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxdamage_)));
          set_has_maxdamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 2;
      case 2: {
        if (tag == 16) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UserSimple;
        break;
      }

      // optional .pb.TUserSimpleInfo UserSimple = 3;
      case 3: {
        if (tag == 26) {
         parse_UserSimple:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usersimple()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossDamageSingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossDamageSingle)
  return false;
#undef DO_
}

void TWorldBossCrossDamageSingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossDamageSingle)
  // optional uint64 MaxDamage = 1;
  if (has_maxdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->maxdamage(), output);
  }

  // optional uint32 Rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  // optional .pb.TUserSimpleInfo UserSimple = 3;
  if (has_usersimple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->usersimple(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossDamageSingle)
}

::google::protobuf::uint8* TWorldBossCrossDamageSingle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossDamageSingle)
  // optional uint64 MaxDamage = 1;
  if (has_maxdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->maxdamage(), target);
  }

  // optional uint32 Rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  // optional .pb.TUserSimpleInfo UserSimple = 3;
  if (has_usersimple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->usersimple(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossDamageSingle)
  return target;
}

int TWorldBossCrossDamageSingle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 MaxDamage = 1;
    if (has_maxdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxdamage());
    }

    // optional uint32 Rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional .pb.TUserSimpleInfo UserSimple = 3;
    if (has_usersimple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usersimple());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossDamageSingle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossDamageSingle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossDamageSingle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossDamageSingle::MergeFrom(const TWorldBossCrossDamageSingle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxdamage()) {
      set_maxdamage(from.maxdamage());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_usersimple()) {
      mutable_usersimple()->::pb::TUserSimpleInfo::MergeFrom(from.usersimple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossDamageSingle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossDamageSingle::CopyFrom(const TWorldBossCrossDamageSingle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossDamageSingle::IsInitialized() const {

  return true;
}

void TWorldBossCrossDamageSingle::Swap(TWorldBossCrossDamageSingle* other) {
  if (other != this) {
    std::swap(maxdamage_, other->maxdamage_);
    std::swap(rank_, other->rank_);
    std::swap(usersimple_, other->usersimple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossDamageSingle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossDamageSingle_descriptor_;
  metadata.reflection = TWorldBossCrossDamageSingle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossRankInfoForRankId::kRankIdFieldNumber;
const int TWorldBossCrossRankInfoForRankId::kUserNumFieldNumber;
const int TWorldBossCrossRankInfoForRankId::kDamageMinFieldNumber;
const int TWorldBossCrossRankInfoForRankId::kDamageRankArrFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossRankInfoForRankId::TWorldBossCrossRankInfoForRankId()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossRankInfoForRankId)
}

void TWorldBossCrossRankInfoForRankId::InitAsDefaultInstance() {
}

TWorldBossCrossRankInfoForRankId::TWorldBossCrossRankInfoForRankId(const TWorldBossCrossRankInfoForRankId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossRankInfoForRankId)
}

void TWorldBossCrossRankInfoForRankId::SharedCtor() {
  _cached_size_ = 0;
  rankid_ = 0u;
  usernum_ = 0u;
  damagemin_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossRankInfoForRankId::~TWorldBossCrossRankInfoForRankId() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossRankInfoForRankId)
  SharedDtor();
}

void TWorldBossCrossRankInfoForRankId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossCrossRankInfoForRankId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossRankInfoForRankId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossRankInfoForRankId_descriptor_;
}

const TWorldBossCrossRankInfoForRankId& TWorldBossCrossRankInfoForRankId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossRankInfoForRankId* TWorldBossCrossRankInfoForRankId::default_instance_ = NULL;

TWorldBossCrossRankInfoForRankId* TWorldBossCrossRankInfoForRankId::New() const {
  return new TWorldBossCrossRankInfoForRankId;
}

void TWorldBossCrossRankInfoForRankId::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TWorldBossCrossRankInfoForRankId*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rankid_, damagemin_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  damagerankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossRankInfoForRankId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossRankInfoForRankId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RankId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UserNum;
        break;
      }

      // optional uint32 UserNum = 2;
      case 2: {
        if (tag == 16) {
         parse_UserNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usernum_)));
          set_has_usernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DamageMin;
        break;
      }

      // optional uint64 DamageMin = 3;
      case 3: {
        if (tag == 24) {
         parse_DamageMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &damagemin_)));
          set_has_damagemin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_DamageRankArr;
        break;
      }

      // repeated .pb.TWorldBossCrossDamageSingle DamageRankArr = 4;
      case 4: {
        if (tag == 34) {
         parse_DamageRankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damagerankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_DamageRankArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossRankInfoForRankId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossRankInfoForRankId)
  return false;
#undef DO_
}

void TWorldBossCrossRankInfoForRankId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossRankInfoForRankId)
  // optional uint32 RankId = 1;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rankid(), output);
  }

  // optional uint32 UserNum = 2;
  if (has_usernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usernum(), output);
  }

  // optional uint64 DamageMin = 3;
  if (has_damagemin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->damagemin(), output);
  }

  // repeated .pb.TWorldBossCrossDamageSingle DamageRankArr = 4;
  for (int i = 0; i < this->damagerankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->damagerankarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossRankInfoForRankId)
}

::google::protobuf::uint8* TWorldBossCrossRankInfoForRankId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossRankInfoForRankId)
  // optional uint32 RankId = 1;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rankid(), target);
  }

  // optional uint32 UserNum = 2;
  if (has_usernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usernum(), target);
  }

  // optional uint64 DamageMin = 3;
  if (has_damagemin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->damagemin(), target);
  }

  // repeated .pb.TWorldBossCrossDamageSingle DamageRankArr = 4;
  for (int i = 0; i < this->damagerankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->damagerankarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossRankInfoForRankId)
  return target;
}

int TWorldBossCrossRankInfoForRankId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RankId = 1;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

    // optional uint32 UserNum = 2;
    if (has_usernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usernum());
    }

    // optional uint64 DamageMin = 3;
    if (has_damagemin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->damagemin());
    }

  }
  // repeated .pb.TWorldBossCrossDamageSingle DamageRankArr = 4;
  total_size += 1 * this->damagerankarr_size();
  for (int i = 0; i < this->damagerankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damagerankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossRankInfoForRankId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossRankInfoForRankId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossRankInfoForRankId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossRankInfoForRankId::MergeFrom(const TWorldBossCrossRankInfoForRankId& from) {
  GOOGLE_CHECK_NE(&from, this);
  damagerankarr_.MergeFrom(from.damagerankarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_usernum()) {
      set_usernum(from.usernum());
    }
    if (from.has_damagemin()) {
      set_damagemin(from.damagemin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossRankInfoForRankId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossRankInfoForRankId::CopyFrom(const TWorldBossCrossRankInfoForRankId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossRankInfoForRankId::IsInitialized() const {

  return true;
}

void TWorldBossCrossRankInfoForRankId::Swap(TWorldBossCrossRankInfoForRankId* other) {
  if (other != this) {
    std::swap(rankid_, other->rankid_);
    std::swap(usernum_, other->usernum_);
    std::swap(damagemin_, other->damagemin_);
    damagerankarr_.Swap(&other->damagerankarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossRankInfoForRankId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossRankInfoForRankId_descriptor_;
  metadata.reflection = TWorldBossCrossRankInfoForRankId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossGetBossInfoRsp::kCrossTeamIdFieldNumber;
const int TWorldBossCrossGetBossInfoRsp::kUsedAtkNumFieldNumber;
const int TWorldBossCrossGetBossInfoRsp::kBuyNumFieldNumber;
const int TWorldBossCrossGetBossInfoRsp::kBuyAtkNumFieldNumber;
const int TWorldBossCrossGetBossInfoRsp::kReceivedDamageRewardTidArrFieldNumber;
const int TWorldBossCrossGetBossInfoRsp::kMyRankInfoFieldNumber;
const int TWorldBossCrossGetBossInfoRsp::kRankForRankIdArrFieldNumber;
const int TWorldBossCrossGetBossInfoRsp::kDailyMaxDamageFieldNumber;
const int TWorldBossCrossGetBossInfoRsp::kArrExchangeInfoFieldNumber;
const int TWorldBossCrossGetBossInfoRsp::kArrRmbShopFieldNumber;
const int TWorldBossCrossGetBossInfoRsp::kArrRankRewardFieldNumber;
const int TWorldBossCrossGetBossInfoRsp::kIsRankRewardViewFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossGetBossInfoRsp::TWorldBossCrossGetBossInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossGetBossInfoRsp)
}

void TWorldBossCrossGetBossInfoRsp::InitAsDefaultInstance() {
  myrankinfo_ = const_cast< ::pb::TWorldBossCrossDamageSingle*>(&::pb::TWorldBossCrossDamageSingle::default_instance());
}

TWorldBossCrossGetBossInfoRsp::TWorldBossCrossGetBossInfoRsp(const TWorldBossCrossGetBossInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossGetBossInfoRsp)
}

void TWorldBossCrossGetBossInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  crossteamid_ = 0u;
  usedatknum_ = 0u;
  buynum_ = 0u;
  buyatknum_ = 0u;
  myrankinfo_ = NULL;
  dailymaxdamage_ = GOOGLE_ULONGLONG(0);
  isrankrewardview_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossGetBossInfoRsp::~TWorldBossCrossGetBossInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossGetBossInfoRsp)
  SharedDtor();
}

void TWorldBossCrossGetBossInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete myrankinfo_;
  }
}

void TWorldBossCrossGetBossInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossGetBossInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossGetBossInfoRsp_descriptor_;
}

const TWorldBossCrossGetBossInfoRsp& TWorldBossCrossGetBossInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossGetBossInfoRsp* TWorldBossCrossGetBossInfoRsp::default_instance_ = NULL;

TWorldBossCrossGetBossInfoRsp* TWorldBossCrossGetBossInfoRsp::New() const {
  return new TWorldBossCrossGetBossInfoRsp;
}

void TWorldBossCrossGetBossInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TWorldBossCrossGetBossInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 175) {
    ZR_(crossteamid_, buyatknum_);
    if (has_myrankinfo()) {
      if (myrankinfo_ != NULL) myrankinfo_->::pb::TWorldBossCrossDamageSingle::Clear();
    }
    dailymaxdamage_ = GOOGLE_ULONGLONG(0);
  }
  isrankrewardview_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  receiveddamagerewardtidarr_.Clear();
  rankforrankidarr_.Clear();
  arrexchangeinfo_.Clear();
  arrrmbshop_.Clear();
  arrrankreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossGetBossInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossGetBossInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CrossTeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crossteamid_)));
          set_has_crossteamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UsedAtkNum;
        break;
      }

      // optional uint32 UsedAtkNum = 2;
      case 2: {
        if (tag == 16) {
         parse_UsedAtkNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedatknum_)));
          set_has_usedatknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BuyNum;
        break;
      }

      // optional uint32 BuyNum = 3;
      case 3: {
        if (tag == 24) {
         parse_BuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BuyAtkNum;
        break;
      }

      // optional uint32 BuyAtkNum = 4;
      case 4: {
        if (tag == 32) {
         parse_BuyAtkNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buyatknum_)));
          set_has_buyatknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ReceivedDamageRewardTidArr;
        break;
      }

      // repeated uint32 ReceivedDamageRewardTidArr = 5;
      case 5: {
        if (tag == 40) {
         parse_ReceivedDamageRewardTidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_receiveddamagerewardtidarr())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_receiveddamagerewardtidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ReceivedDamageRewardTidArr;
        if (input->ExpectTag(50)) goto parse_MyRankInfo;
        break;
      }

      // optional .pb.TWorldBossCrossDamageSingle MyRankInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_MyRankInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myrankinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_RankForRankIdArr;
        break;
      }

      // repeated .pb.TWorldBossCrossRankInfoForRankId RankForRankIdArr = 7;
      case 7: {
        if (tag == 58) {
         parse_RankForRankIdArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankforrankidarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_RankForRankIdArr;
        if (input->ExpectTag(64)) goto parse_DailyMaxDamage;
        break;
      }

      // optional uint64 DailyMaxDamage = 8;
      case 8: {
        if (tag == 64) {
         parse_DailyMaxDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dailymaxdamage_)));
          set_has_dailymaxdamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ArrExchangeInfo;
        break;
      }

      // repeated .pb.TWorldBossCrossExchangeInfo ArrExchangeInfo = 9;
      case 9: {
        if (tag == 74) {
         parse_ArrExchangeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrexchangeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_ArrExchangeInfo;
        if (input->ExpectTag(82)) goto parse_ArrRmbShop;
        break;
      }

      // repeated .pb.TWorldBossCrossShopInfo ArrRmbShop = 10;
      case 10: {
        if (tag == 82) {
         parse_ArrRmbShop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrmbshop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ArrRmbShop;
        if (input->ExpectTag(90)) goto parse_ArrRankReward;
        break;
      }

      // repeated .pb.TCommonReward ArrRankReward = 11;
      case 11: {
        if (tag == 90) {
         parse_ArrRankReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrankreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_ArrRankReward;
        if (input->ExpectTag(96)) goto parse_IsRankRewardView;
        break;
      }

      // optional uint32 IsRankRewardView = 12;
      case 12: {
        if (tag == 96) {
         parse_IsRankRewardView:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isrankrewardview_)));
          set_has_isrankrewardview();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossGetBossInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossGetBossInfoRsp)
  return false;
#undef DO_
}

void TWorldBossCrossGetBossInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossGetBossInfoRsp)
  // optional uint32 CrossTeamId = 1;
  if (has_crossteamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->crossteamid(), output);
  }

  // optional uint32 UsedAtkNum = 2;
  if (has_usedatknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usedatknum(), output);
  }

  // optional uint32 BuyNum = 3;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buynum(), output);
  }

  // optional uint32 BuyAtkNum = 4;
  if (has_buyatknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buyatknum(), output);
  }

  // repeated uint32 ReceivedDamageRewardTidArr = 5;
  for (int i = 0; i < this->receiveddamagerewardtidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->receiveddamagerewardtidarr(i), output);
  }

  // optional .pb.TWorldBossCrossDamageSingle MyRankInfo = 6;
  if (has_myrankinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->myrankinfo(), output);
  }

  // repeated .pb.TWorldBossCrossRankInfoForRankId RankForRankIdArr = 7;
  for (int i = 0; i < this->rankforrankidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rankforrankidarr(i), output);
  }

  // optional uint64 DailyMaxDamage = 8;
  if (has_dailymaxdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->dailymaxdamage(), output);
  }

  // repeated .pb.TWorldBossCrossExchangeInfo ArrExchangeInfo = 9;
  for (int i = 0; i < this->arrexchangeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->arrexchangeinfo(i), output);
  }

  // repeated .pb.TWorldBossCrossShopInfo ArrRmbShop = 10;
  for (int i = 0; i < this->arrrmbshop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->arrrmbshop(i), output);
  }

  // repeated .pb.TCommonReward ArrRankReward = 11;
  for (int i = 0; i < this->arrrankreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->arrrankreward(i), output);
  }

  // optional uint32 IsRankRewardView = 12;
  if (has_isrankrewardview()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->isrankrewardview(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossGetBossInfoRsp)
}

::google::protobuf::uint8* TWorldBossCrossGetBossInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossGetBossInfoRsp)
  // optional uint32 CrossTeamId = 1;
  if (has_crossteamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->crossteamid(), target);
  }

  // optional uint32 UsedAtkNum = 2;
  if (has_usedatknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usedatknum(), target);
  }

  // optional uint32 BuyNum = 3;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buynum(), target);
  }

  // optional uint32 BuyAtkNum = 4;
  if (has_buyatknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buyatknum(), target);
  }

  // repeated uint32 ReceivedDamageRewardTidArr = 5;
  for (int i = 0; i < this->receiveddamagerewardtidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->receiveddamagerewardtidarr(i), target);
  }

  // optional .pb.TWorldBossCrossDamageSingle MyRankInfo = 6;
  if (has_myrankinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->myrankinfo(), target);
  }

  // repeated .pb.TWorldBossCrossRankInfoForRankId RankForRankIdArr = 7;
  for (int i = 0; i < this->rankforrankidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rankforrankidarr(i), target);
  }

  // optional uint64 DailyMaxDamage = 8;
  if (has_dailymaxdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->dailymaxdamage(), target);
  }

  // repeated .pb.TWorldBossCrossExchangeInfo ArrExchangeInfo = 9;
  for (int i = 0; i < this->arrexchangeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->arrexchangeinfo(i), target);
  }

  // repeated .pb.TWorldBossCrossShopInfo ArrRmbShop = 10;
  for (int i = 0; i < this->arrrmbshop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->arrrmbshop(i), target);
  }

  // repeated .pb.TCommonReward ArrRankReward = 11;
  for (int i = 0; i < this->arrrankreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->arrrankreward(i), target);
  }

  // optional uint32 IsRankRewardView = 12;
  if (has_isrankrewardview()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->isrankrewardview(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossGetBossInfoRsp)
  return target;
}

int TWorldBossCrossGetBossInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CrossTeamId = 1;
    if (has_crossteamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crossteamid());
    }

    // optional uint32 UsedAtkNum = 2;
    if (has_usedatknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedatknum());
    }

    // optional uint32 BuyNum = 3;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

    // optional uint32 BuyAtkNum = 4;
    if (has_buyatknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buyatknum());
    }

    // optional .pb.TWorldBossCrossDamageSingle MyRankInfo = 6;
    if (has_myrankinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myrankinfo());
    }

    // optional uint64 DailyMaxDamage = 8;
    if (has_dailymaxdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dailymaxdamage());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional uint32 IsRankRewardView = 12;
    if (has_isrankrewardview()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isrankrewardview());
    }

  }
  // repeated uint32 ReceivedDamageRewardTidArr = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->receiveddamagerewardtidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->receiveddamagerewardtidarr(i));
    }
    total_size += 1 * this->receiveddamagerewardtidarr_size() + data_size;
  }

  // repeated .pb.TWorldBossCrossRankInfoForRankId RankForRankIdArr = 7;
  total_size += 1 * this->rankforrankidarr_size();
  for (int i = 0; i < this->rankforrankidarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankforrankidarr(i));
  }

  // repeated .pb.TWorldBossCrossExchangeInfo ArrExchangeInfo = 9;
  total_size += 1 * this->arrexchangeinfo_size();
  for (int i = 0; i < this->arrexchangeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrexchangeinfo(i));
  }

  // repeated .pb.TWorldBossCrossShopInfo ArrRmbShop = 10;
  total_size += 1 * this->arrrmbshop_size();
  for (int i = 0; i < this->arrrmbshop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrmbshop(i));
  }

  // repeated .pb.TCommonReward ArrRankReward = 11;
  total_size += 1 * this->arrrankreward_size();
  for (int i = 0; i < this->arrrankreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrankreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossGetBossInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossGetBossInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossGetBossInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossGetBossInfoRsp::MergeFrom(const TWorldBossCrossGetBossInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  receiveddamagerewardtidarr_.MergeFrom(from.receiveddamagerewardtidarr_);
  rankforrankidarr_.MergeFrom(from.rankforrankidarr_);
  arrexchangeinfo_.MergeFrom(from.arrexchangeinfo_);
  arrrmbshop_.MergeFrom(from.arrrmbshop_);
  arrrankreward_.MergeFrom(from.arrrankreward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crossteamid()) {
      set_crossteamid(from.crossteamid());
    }
    if (from.has_usedatknum()) {
      set_usedatknum(from.usedatknum());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
    if (from.has_buyatknum()) {
      set_buyatknum(from.buyatknum());
    }
    if (from.has_myrankinfo()) {
      mutable_myrankinfo()->::pb::TWorldBossCrossDamageSingle::MergeFrom(from.myrankinfo());
    }
    if (from.has_dailymaxdamage()) {
      set_dailymaxdamage(from.dailymaxdamage());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_isrankrewardview()) {
      set_isrankrewardview(from.isrankrewardview());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossGetBossInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossGetBossInfoRsp::CopyFrom(const TWorldBossCrossGetBossInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossGetBossInfoRsp::IsInitialized() const {

  return true;
}

void TWorldBossCrossGetBossInfoRsp::Swap(TWorldBossCrossGetBossInfoRsp* other) {
  if (other != this) {
    std::swap(crossteamid_, other->crossteamid_);
    std::swap(usedatknum_, other->usedatknum_);
    std::swap(buynum_, other->buynum_);
    std::swap(buyatknum_, other->buyatknum_);
    receiveddamagerewardtidarr_.Swap(&other->receiveddamagerewardtidarr_);
    std::swap(myrankinfo_, other->myrankinfo_);
    rankforrankidarr_.Swap(&other->rankforrankidarr_);
    std::swap(dailymaxdamage_, other->dailymaxdamage_);
    arrexchangeinfo_.Swap(&other->arrexchangeinfo_);
    arrrmbshop_.Swap(&other->arrrmbshop_);
    arrrankreward_.Swap(&other->arrrankreward_);
    std::swap(isrankrewardview_, other->isrankrewardview_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossGetBossInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossGetBossInfoRsp_descriptor_;
  metadata.reflection = TWorldBossCrossGetBossInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossGetAboveRankNRsp::kAboveRankArrFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossGetAboveRankNRsp::TWorldBossCrossGetAboveRankNRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossGetAboveRankNRsp)
}

void TWorldBossCrossGetAboveRankNRsp::InitAsDefaultInstance() {
}

TWorldBossCrossGetAboveRankNRsp::TWorldBossCrossGetAboveRankNRsp(const TWorldBossCrossGetAboveRankNRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossGetAboveRankNRsp)
}

void TWorldBossCrossGetAboveRankNRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossGetAboveRankNRsp::~TWorldBossCrossGetAboveRankNRsp() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossGetAboveRankNRsp)
  SharedDtor();
}

void TWorldBossCrossGetAboveRankNRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossCrossGetAboveRankNRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossGetAboveRankNRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossGetAboveRankNRsp_descriptor_;
}

const TWorldBossCrossGetAboveRankNRsp& TWorldBossCrossGetAboveRankNRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossGetAboveRankNRsp* TWorldBossCrossGetAboveRankNRsp::default_instance_ = NULL;

TWorldBossCrossGetAboveRankNRsp* TWorldBossCrossGetAboveRankNRsp::New() const {
  return new TWorldBossCrossGetAboveRankNRsp;
}

void TWorldBossCrossGetAboveRankNRsp::Clear() {
  aboverankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossGetAboveRankNRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossGetAboveRankNRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TWorldBossCrossDamageSingle AboveRankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_AboveRankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_aboverankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_AboveRankArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossGetAboveRankNRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossGetAboveRankNRsp)
  return false;
#undef DO_
}

void TWorldBossCrossGetAboveRankNRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossGetAboveRankNRsp)
  // repeated .pb.TWorldBossCrossDamageSingle AboveRankArr = 1;
  for (int i = 0; i < this->aboverankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->aboverankarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossGetAboveRankNRsp)
}

::google::protobuf::uint8* TWorldBossCrossGetAboveRankNRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossGetAboveRankNRsp)
  // repeated .pb.TWorldBossCrossDamageSingle AboveRankArr = 1;
  for (int i = 0; i < this->aboverankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->aboverankarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossGetAboveRankNRsp)
  return target;
}

int TWorldBossCrossGetAboveRankNRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TWorldBossCrossDamageSingle AboveRankArr = 1;
  total_size += 1 * this->aboverankarr_size();
  for (int i = 0; i < this->aboverankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->aboverankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossGetAboveRankNRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossGetAboveRankNRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossGetAboveRankNRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossGetAboveRankNRsp::MergeFrom(const TWorldBossCrossGetAboveRankNRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  aboverankarr_.MergeFrom(from.aboverankarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossGetAboveRankNRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossGetAboveRankNRsp::CopyFrom(const TWorldBossCrossGetAboveRankNRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossGetAboveRankNRsp::IsInitialized() const {

  return true;
}

void TWorldBossCrossGetAboveRankNRsp::Swap(TWorldBossCrossGetAboveRankNRsp* other) {
  if (other != this) {
    aboverankarr_.Swap(&other->aboverankarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossGetAboveRankNRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossGetAboveRankNRsp_descriptor_;
  metadata.reflection = TWorldBossCrossGetAboveRankNRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossGetRankInfoByRankIdReq::kRankIdFieldNumber;
const int TWorldBossCrossGetRankInfoByRankIdReq::kOffsetFieldNumber;
const int TWorldBossCrossGetRankInfoByRankIdReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossGetRankInfoByRankIdReq::TWorldBossCrossGetRankInfoByRankIdReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossGetRankInfoByRankIdReq)
}

void TWorldBossCrossGetRankInfoByRankIdReq::InitAsDefaultInstance() {
}

TWorldBossCrossGetRankInfoByRankIdReq::TWorldBossCrossGetRankInfoByRankIdReq(const TWorldBossCrossGetRankInfoByRankIdReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossGetRankInfoByRankIdReq)
}

void TWorldBossCrossGetRankInfoByRankIdReq::SharedCtor() {
  _cached_size_ = 0;
  rankid_ = 0u;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossGetRankInfoByRankIdReq::~TWorldBossCrossGetRankInfoByRankIdReq() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossGetRankInfoByRankIdReq)
  SharedDtor();
}

void TWorldBossCrossGetRankInfoByRankIdReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossCrossGetRankInfoByRankIdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossGetRankInfoByRankIdReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossGetRankInfoByRankIdReq_descriptor_;
}

const TWorldBossCrossGetRankInfoByRankIdReq& TWorldBossCrossGetRankInfoByRankIdReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossGetRankInfoByRankIdReq* TWorldBossCrossGetRankInfoByRankIdReq::default_instance_ = NULL;

TWorldBossCrossGetRankInfoByRankIdReq* TWorldBossCrossGetRankInfoByRankIdReq::New() const {
  return new TWorldBossCrossGetRankInfoByRankIdReq;
}

void TWorldBossCrossGetRankInfoByRankIdReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TWorldBossCrossGetRankInfoByRankIdReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rankid_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossGetRankInfoByRankIdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossGetRankInfoByRankIdReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RankId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Offset;
        break;
      }

      // optional uint32 Offset = 2;
      case 2: {
        if (tag == 16) {
         parse_Offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 3;
      case 3: {
        if (tag == 24) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossGetRankInfoByRankIdReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossGetRankInfoByRankIdReq)
  return false;
#undef DO_
}

void TWorldBossCrossGetRankInfoByRankIdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossGetRankInfoByRankIdReq)
  // optional uint32 RankId = 1;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rankid(), output);
  }

  // optional uint32 Offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offset(), output);
  }

  // optional uint32 Limit = 3;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossGetRankInfoByRankIdReq)
}

::google::protobuf::uint8* TWorldBossCrossGetRankInfoByRankIdReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossGetRankInfoByRankIdReq)
  // optional uint32 RankId = 1;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rankid(), target);
  }

  // optional uint32 Offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->offset(), target);
  }

  // optional uint32 Limit = 3;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossGetRankInfoByRankIdReq)
  return target;
}

int TWorldBossCrossGetRankInfoByRankIdReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RankId = 1;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

    // optional uint32 Offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 3;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossGetRankInfoByRankIdReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossGetRankInfoByRankIdReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossGetRankInfoByRankIdReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossGetRankInfoByRankIdReq::MergeFrom(const TWorldBossCrossGetRankInfoByRankIdReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossGetRankInfoByRankIdReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossGetRankInfoByRankIdReq::CopyFrom(const TWorldBossCrossGetRankInfoByRankIdReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossGetRankInfoByRankIdReq::IsInitialized() const {

  return true;
}

void TWorldBossCrossGetRankInfoByRankIdReq::Swap(TWorldBossCrossGetRankInfoByRankIdReq* other) {
  if (other != this) {
    std::swap(rankid_, other->rankid_);
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossGetRankInfoByRankIdReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossGetRankInfoByRankIdReq_descriptor_;
  metadata.reflection = TWorldBossCrossGetRankInfoByRankIdReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossGetRankInfoByRankIdRsp::kDamageRankArrFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossGetRankInfoByRankIdRsp::TWorldBossCrossGetRankInfoByRankIdRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossGetRankInfoByRankIdRsp)
}

void TWorldBossCrossGetRankInfoByRankIdRsp::InitAsDefaultInstance() {
}

TWorldBossCrossGetRankInfoByRankIdRsp::TWorldBossCrossGetRankInfoByRankIdRsp(const TWorldBossCrossGetRankInfoByRankIdRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossGetRankInfoByRankIdRsp)
}

void TWorldBossCrossGetRankInfoByRankIdRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossGetRankInfoByRankIdRsp::~TWorldBossCrossGetRankInfoByRankIdRsp() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossGetRankInfoByRankIdRsp)
  SharedDtor();
}

void TWorldBossCrossGetRankInfoByRankIdRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossCrossGetRankInfoByRankIdRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossGetRankInfoByRankIdRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossGetRankInfoByRankIdRsp_descriptor_;
}

const TWorldBossCrossGetRankInfoByRankIdRsp& TWorldBossCrossGetRankInfoByRankIdRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossGetRankInfoByRankIdRsp* TWorldBossCrossGetRankInfoByRankIdRsp::default_instance_ = NULL;

TWorldBossCrossGetRankInfoByRankIdRsp* TWorldBossCrossGetRankInfoByRankIdRsp::New() const {
  return new TWorldBossCrossGetRankInfoByRankIdRsp;
}

void TWorldBossCrossGetRankInfoByRankIdRsp::Clear() {
  damagerankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossGetRankInfoByRankIdRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossGetRankInfoByRankIdRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TWorldBossCrossDamageSingle DamageRankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_DamageRankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damagerankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_DamageRankArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossGetRankInfoByRankIdRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossGetRankInfoByRankIdRsp)
  return false;
#undef DO_
}

void TWorldBossCrossGetRankInfoByRankIdRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossGetRankInfoByRankIdRsp)
  // repeated .pb.TWorldBossCrossDamageSingle DamageRankArr = 1;
  for (int i = 0; i < this->damagerankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->damagerankarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossGetRankInfoByRankIdRsp)
}

::google::protobuf::uint8* TWorldBossCrossGetRankInfoByRankIdRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossGetRankInfoByRankIdRsp)
  // repeated .pb.TWorldBossCrossDamageSingle DamageRankArr = 1;
  for (int i = 0; i < this->damagerankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->damagerankarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossGetRankInfoByRankIdRsp)
  return target;
}

int TWorldBossCrossGetRankInfoByRankIdRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TWorldBossCrossDamageSingle DamageRankArr = 1;
  total_size += 1 * this->damagerankarr_size();
  for (int i = 0; i < this->damagerankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damagerankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossGetRankInfoByRankIdRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossGetRankInfoByRankIdRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossGetRankInfoByRankIdRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossGetRankInfoByRankIdRsp::MergeFrom(const TWorldBossCrossGetRankInfoByRankIdRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  damagerankarr_.MergeFrom(from.damagerankarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossGetRankInfoByRankIdRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossGetRankInfoByRankIdRsp::CopyFrom(const TWorldBossCrossGetRankInfoByRankIdRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossGetRankInfoByRankIdRsp::IsInitialized() const {

  return true;
}

void TWorldBossCrossGetRankInfoByRankIdRsp::Swap(TWorldBossCrossGetRankInfoByRankIdRsp* other) {
  if (other != this) {
    damagerankarr_.Swap(&other->damagerankarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossGetRankInfoByRankIdRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossGetRankInfoByRankIdRsp_descriptor_;
  metadata.reflection = TWorldBossCrossGetRankInfoByRankIdRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossEnterBattleReq::kBossIdFieldNumber;
const int TWorldBossCrossEnterBattleReq::kBattleCheckParamFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossEnterBattleReq::TWorldBossCrossEnterBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossEnterBattleReq)
}

void TWorldBossCrossEnterBattleReq::InitAsDefaultInstance() {
  battlecheckparam_ = const_cast< ::pb::TBattleCheckParam*>(&::pb::TBattleCheckParam::default_instance());
}

TWorldBossCrossEnterBattleReq::TWorldBossCrossEnterBattleReq(const TWorldBossCrossEnterBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossEnterBattleReq)
}

void TWorldBossCrossEnterBattleReq::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  battlecheckparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossEnterBattleReq::~TWorldBossCrossEnterBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossEnterBattleReq)
  SharedDtor();
}

void TWorldBossCrossEnterBattleReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlecheckparam_;
  }
}

void TWorldBossCrossEnterBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossEnterBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossEnterBattleReq_descriptor_;
}

const TWorldBossCrossEnterBattleReq& TWorldBossCrossEnterBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossEnterBattleReq* TWorldBossCrossEnterBattleReq::default_instance_ = NULL;

TWorldBossCrossEnterBattleReq* TWorldBossCrossEnterBattleReq::New() const {
  return new TWorldBossCrossEnterBattleReq;
}

void TWorldBossCrossEnterBattleReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    bossid_ = 0u;
    if (has_battlecheckparam()) {
      if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossEnterBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossEnterBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleCheckParam;
        break;
      }

      // optional .pb.TBattleCheckParam BattleCheckParam = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleCheckParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecheckparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossEnterBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossEnterBattleReq)
  return false;
#undef DO_
}

void TWorldBossCrossEnterBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossEnterBattleReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battlecheckparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossEnterBattleReq)
}

::google::protobuf::uint8* TWorldBossCrossEnterBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossEnterBattleReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battlecheckparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossEnterBattleReq)
  return target;
}

int TWorldBossCrossEnterBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional .pb.TBattleCheckParam BattleCheckParam = 2;
    if (has_battlecheckparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecheckparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossEnterBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossEnterBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossEnterBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossEnterBattleReq::MergeFrom(const TWorldBossCrossEnterBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_battlecheckparam()) {
      mutable_battlecheckparam()->::pb::TBattleCheckParam::MergeFrom(from.battlecheckparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossEnterBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossEnterBattleReq::CopyFrom(const TWorldBossCrossEnterBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossEnterBattleReq::IsInitialized() const {

  return true;
}

void TWorldBossCrossEnterBattleReq::Swap(TWorldBossCrossEnterBattleReq* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(battlecheckparam_, other->battlecheckparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossEnterBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossEnterBattleReq_descriptor_;
  metadata.reflection = TWorldBossCrossEnterBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossEnterBattleRsp::kBattleArgsFieldNumber;
const int TWorldBossCrossEnterBattleRsp::kUsedAtkNumFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossEnterBattleRsp::TWorldBossCrossEnterBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossEnterBattleRsp)
}

void TWorldBossCrossEnterBattleRsp::InitAsDefaultInstance() {
  battleargs_ = const_cast< ::pb::TBattleArgs*>(&::pb::TBattleArgs::default_instance());
}

TWorldBossCrossEnterBattleRsp::TWorldBossCrossEnterBattleRsp(const TWorldBossCrossEnterBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossEnterBattleRsp)
}

void TWorldBossCrossEnterBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  battleargs_ = NULL;
  usedatknum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossEnterBattleRsp::~TWorldBossCrossEnterBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossEnterBattleRsp)
  SharedDtor();
}

void TWorldBossCrossEnterBattleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battleargs_;
  }
}

void TWorldBossCrossEnterBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossEnterBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossEnterBattleRsp_descriptor_;
}

const TWorldBossCrossEnterBattleRsp& TWorldBossCrossEnterBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossEnterBattleRsp* TWorldBossCrossEnterBattleRsp::default_instance_ = NULL;

TWorldBossCrossEnterBattleRsp* TWorldBossCrossEnterBattleRsp::New() const {
  return new TWorldBossCrossEnterBattleRsp;
}

void TWorldBossCrossEnterBattleRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_battleargs()) {
      if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
    }
    usedatknum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossEnterBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossEnterBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBattleArgs BattleArgs = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_UsedAtkNum;
        break;
      }

      // optional uint32 UsedAtkNum = 2;
      case 2: {
        if (tag == 16) {
         parse_UsedAtkNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedatknum_)));
          set_has_usedatknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossEnterBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossEnterBattleRsp)
  return false;
#undef DO_
}

void TWorldBossCrossEnterBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossEnterBattleRsp)
  // optional .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battleargs(), output);
  }

  // optional uint32 UsedAtkNum = 2;
  if (has_usedatknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usedatknum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossEnterBattleRsp)
}

::google::protobuf::uint8* TWorldBossCrossEnterBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossEnterBattleRsp)
  // optional .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battleargs(), target);
  }

  // optional uint32 UsedAtkNum = 2;
  if (has_usedatknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usedatknum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossEnterBattleRsp)
  return target;
}

int TWorldBossCrossEnterBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBattleArgs BattleArgs = 1;
    if (has_battleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleargs());
    }

    // optional uint32 UsedAtkNum = 2;
    if (has_usedatknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedatknum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossEnterBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossEnterBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossEnterBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossEnterBattleRsp::MergeFrom(const TWorldBossCrossEnterBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleargs()) {
      mutable_battleargs()->::pb::TBattleArgs::MergeFrom(from.battleargs());
    }
    if (from.has_usedatknum()) {
      set_usedatknum(from.usedatknum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossEnterBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossEnterBattleRsp::CopyFrom(const TWorldBossCrossEnterBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossEnterBattleRsp::IsInitialized() const {

  if (has_battleargs()) {
    if (!this->battleargs().IsInitialized()) return false;
  }
  return true;
}

void TWorldBossCrossEnterBattleRsp::Swap(TWorldBossCrossEnterBattleRsp* other) {
  if (other != this) {
    std::swap(battleargs_, other->battleargs_);
    std::swap(usedatknum_, other->usedatknum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossEnterBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossEnterBattleRsp_descriptor_;
  metadata.reflection = TWorldBossCrossEnterBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossReportBattleReq::kBossIdFieldNumber;
const int TWorldBossCrossReportBattleReq::kBattleRetFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossReportBattleReq::TWorldBossCrossReportBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossReportBattleReq)
}

void TWorldBossCrossReportBattleReq::InitAsDefaultInstance() {
}

TWorldBossCrossReportBattleReq::TWorldBossCrossReportBattleReq(const TWorldBossCrossReportBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossReportBattleReq)
}

void TWorldBossCrossReportBattleReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bossid_ = 0u;
  battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossReportBattleReq::~TWorldBossCrossReportBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossReportBattleReq)
  SharedDtor();
}

void TWorldBossCrossReportBattleReq::SharedDtor() {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleret_;
  }
  if (this != default_instance_) {
  }
}

void TWorldBossCrossReportBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossReportBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossReportBattleReq_descriptor_;
}

const TWorldBossCrossReportBattleReq& TWorldBossCrossReportBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossReportBattleReq* TWorldBossCrossReportBattleReq::default_instance_ = NULL;

TWorldBossCrossReportBattleReq* TWorldBossCrossReportBattleReq::New() const {
  return new TWorldBossCrossReportBattleReq;
}

void TWorldBossCrossReportBattleReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    bossid_ = 0u;
    if (has_battleret()) {
      if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battleret_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossReportBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossReportBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleRet;
        break;
      }

      // optional bytes BattleRet = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleRet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battleret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossReportBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossReportBattleReq)
  return false;
#undef DO_
}

void TWorldBossCrossReportBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossReportBattleReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  // optional bytes BattleRet = 2;
  if (has_battleret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->battleret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossReportBattleReq)
}

::google::protobuf::uint8* TWorldBossCrossReportBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossReportBattleReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  // optional bytes BattleRet = 2;
  if (has_battleret()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->battleret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossReportBattleReq)
  return target;
}

int TWorldBossCrossReportBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional bytes BattleRet = 2;
    if (has_battleret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battleret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossReportBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossReportBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossReportBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossReportBattleReq::MergeFrom(const TWorldBossCrossReportBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_battleret()) {
      set_battleret(from.battleret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossReportBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossReportBattleReq::CopyFrom(const TWorldBossCrossReportBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossReportBattleReq::IsInitialized() const {

  return true;
}

void TWorldBossCrossReportBattleReq::Swap(TWorldBossCrossReportBattleReq* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(battleret_, other->battleret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossReportBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossReportBattleReq_descriptor_;
  metadata.reflection = TWorldBossCrossReportBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossReportBattleRsp::kIsNewDamageRecordFieldNumber;
const int TWorldBossCrossReportBattleRsp::kMyRankInfoFieldNumber;
const int TWorldBossCrossReportBattleRsp::kDropArrayFieldNumber;
const int TWorldBossCrossReportBattleRsp::kDailyMaxDamageFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossReportBattleRsp::TWorldBossCrossReportBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossReportBattleRsp)
}

void TWorldBossCrossReportBattleRsp::InitAsDefaultInstance() {
  myrankinfo_ = const_cast< ::pb::TWorldBossCrossDamageSingle*>(&::pb::TWorldBossCrossDamageSingle::default_instance());
}

TWorldBossCrossReportBattleRsp::TWorldBossCrossReportBattleRsp(const TWorldBossCrossReportBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossReportBattleRsp)
}

void TWorldBossCrossReportBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  isnewdamagerecord_ = false;
  myrankinfo_ = NULL;
  dailymaxdamage_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossReportBattleRsp::~TWorldBossCrossReportBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossReportBattleRsp)
  SharedDtor();
}

void TWorldBossCrossReportBattleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete myrankinfo_;
  }
}

void TWorldBossCrossReportBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossReportBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossReportBattleRsp_descriptor_;
}

const TWorldBossCrossReportBattleRsp& TWorldBossCrossReportBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossReportBattleRsp* TWorldBossCrossReportBattleRsp::default_instance_ = NULL;

TWorldBossCrossReportBattleRsp* TWorldBossCrossReportBattleRsp::New() const {
  return new TWorldBossCrossReportBattleRsp;
}

void TWorldBossCrossReportBattleRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TWorldBossCrossReportBattleRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(dailymaxdamage_, isnewdamagerecord_);
    if (has_myrankinfo()) {
      if (myrankinfo_ != NULL) myrankinfo_->::pb::TWorldBossCrossDamageSingle::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  droparray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossReportBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossReportBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsNewDamageRecord = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnewdamagerecord_)));
          set_has_isnewdamagerecord();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MyRankInfo;
        break;
      }

      // optional .pb.TWorldBossCrossDamageSingle MyRankInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_MyRankInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myrankinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DropArray;
        break;
      }

      // repeated .pb.TCommonReward DropArray = 3;
      case 3: {
        if (tag == 26) {
         parse_DropArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_droparray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DropArray;
        if (input->ExpectTag(32)) goto parse_DailyMaxDamage;
        break;
      }

      // optional uint64 DailyMaxDamage = 4;
      case 4: {
        if (tag == 32) {
         parse_DailyMaxDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dailymaxdamage_)));
          set_has_dailymaxdamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossReportBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossReportBattleRsp)
  return false;
#undef DO_
}

void TWorldBossCrossReportBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossReportBattleRsp)
  // optional bool IsNewDamageRecord = 1;
  if (has_isnewdamagerecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isnewdamagerecord(), output);
  }

  // optional .pb.TWorldBossCrossDamageSingle MyRankInfo = 2;
  if (has_myrankinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->myrankinfo(), output);
  }

  // repeated .pb.TCommonReward DropArray = 3;
  for (int i = 0; i < this->droparray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->droparray(i), output);
  }

  // optional uint64 DailyMaxDamage = 4;
  if (has_dailymaxdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dailymaxdamage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossReportBattleRsp)
}

::google::protobuf::uint8* TWorldBossCrossReportBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossReportBattleRsp)
  // optional bool IsNewDamageRecord = 1;
  if (has_isnewdamagerecord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isnewdamagerecord(), target);
  }

  // optional .pb.TWorldBossCrossDamageSingle MyRankInfo = 2;
  if (has_myrankinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->myrankinfo(), target);
  }

  // repeated .pb.TCommonReward DropArray = 3;
  for (int i = 0; i < this->droparray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->droparray(i), target);
  }

  // optional uint64 DailyMaxDamage = 4;
  if (has_dailymaxdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->dailymaxdamage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossReportBattleRsp)
  return target;
}

int TWorldBossCrossReportBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsNewDamageRecord = 1;
    if (has_isnewdamagerecord()) {
      total_size += 1 + 1;
    }

    // optional .pb.TWorldBossCrossDamageSingle MyRankInfo = 2;
    if (has_myrankinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myrankinfo());
    }

    // optional uint64 DailyMaxDamage = 4;
    if (has_dailymaxdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dailymaxdamage());
    }

  }
  // repeated .pb.TCommonReward DropArray = 3;
  total_size += 1 * this->droparray_size();
  for (int i = 0; i < this->droparray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->droparray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossReportBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossReportBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossReportBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossReportBattleRsp::MergeFrom(const TWorldBossCrossReportBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  droparray_.MergeFrom(from.droparray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isnewdamagerecord()) {
      set_isnewdamagerecord(from.isnewdamagerecord());
    }
    if (from.has_myrankinfo()) {
      mutable_myrankinfo()->::pb::TWorldBossCrossDamageSingle::MergeFrom(from.myrankinfo());
    }
    if (from.has_dailymaxdamage()) {
      set_dailymaxdamage(from.dailymaxdamage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossReportBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossReportBattleRsp::CopyFrom(const TWorldBossCrossReportBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossReportBattleRsp::IsInitialized() const {

  return true;
}

void TWorldBossCrossReportBattleRsp::Swap(TWorldBossCrossReportBattleRsp* other) {
  if (other != this) {
    std::swap(isnewdamagerecord_, other->isnewdamagerecord_);
    std::swap(myrankinfo_, other->myrankinfo_);
    droparray_.Swap(&other->droparray_);
    std::swap(dailymaxdamage_, other->dailymaxdamage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossReportBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossReportBattleRsp_descriptor_;
  metadata.reflection = TWorldBossCrossReportBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossBuyAtkNumReq::kNumFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossBuyAtkNumReq::TWorldBossCrossBuyAtkNumReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossBuyAtkNumReq)
}

void TWorldBossCrossBuyAtkNumReq::InitAsDefaultInstance() {
}

TWorldBossCrossBuyAtkNumReq::TWorldBossCrossBuyAtkNumReq(const TWorldBossCrossBuyAtkNumReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossBuyAtkNumReq)
}

void TWorldBossCrossBuyAtkNumReq::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossBuyAtkNumReq::~TWorldBossCrossBuyAtkNumReq() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossBuyAtkNumReq)
  SharedDtor();
}

void TWorldBossCrossBuyAtkNumReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossCrossBuyAtkNumReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossBuyAtkNumReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossBuyAtkNumReq_descriptor_;
}

const TWorldBossCrossBuyAtkNumReq& TWorldBossCrossBuyAtkNumReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossBuyAtkNumReq* TWorldBossCrossBuyAtkNumReq::default_instance_ = NULL;

TWorldBossCrossBuyAtkNumReq* TWorldBossCrossBuyAtkNumReq::New() const {
  return new TWorldBossCrossBuyAtkNumReq;
}

void TWorldBossCrossBuyAtkNumReq::Clear() {
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossBuyAtkNumReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossBuyAtkNumReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossBuyAtkNumReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossBuyAtkNumReq)
  return false;
#undef DO_
}

void TWorldBossCrossBuyAtkNumReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossBuyAtkNumReq)
  // optional uint32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossBuyAtkNumReq)
}

::google::protobuf::uint8* TWorldBossCrossBuyAtkNumReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossBuyAtkNumReq)
  // optional uint32 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossBuyAtkNumReq)
  return target;
}

int TWorldBossCrossBuyAtkNumReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossBuyAtkNumReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossBuyAtkNumReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossBuyAtkNumReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossBuyAtkNumReq::MergeFrom(const TWorldBossCrossBuyAtkNumReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossBuyAtkNumReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossBuyAtkNumReq::CopyFrom(const TWorldBossCrossBuyAtkNumReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossBuyAtkNumReq::IsInitialized() const {

  return true;
}

void TWorldBossCrossBuyAtkNumReq::Swap(TWorldBossCrossBuyAtkNumReq* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossBuyAtkNumReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossBuyAtkNumReq_descriptor_;
  metadata.reflection = TWorldBossCrossBuyAtkNumReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossBuyAtkNumRsp::kBuyNumFieldNumber;
const int TWorldBossCrossBuyAtkNumRsp::kBuyAtkNumFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossBuyAtkNumRsp::TWorldBossCrossBuyAtkNumRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossBuyAtkNumRsp)
}

void TWorldBossCrossBuyAtkNumRsp::InitAsDefaultInstance() {
}

TWorldBossCrossBuyAtkNumRsp::TWorldBossCrossBuyAtkNumRsp(const TWorldBossCrossBuyAtkNumRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossBuyAtkNumRsp)
}

void TWorldBossCrossBuyAtkNumRsp::SharedCtor() {
  _cached_size_ = 0;
  buynum_ = 0u;
  buyatknum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossBuyAtkNumRsp::~TWorldBossCrossBuyAtkNumRsp() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossBuyAtkNumRsp)
  SharedDtor();
}

void TWorldBossCrossBuyAtkNumRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossCrossBuyAtkNumRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossBuyAtkNumRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossBuyAtkNumRsp_descriptor_;
}

const TWorldBossCrossBuyAtkNumRsp& TWorldBossCrossBuyAtkNumRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossBuyAtkNumRsp* TWorldBossCrossBuyAtkNumRsp::default_instance_ = NULL;

TWorldBossCrossBuyAtkNumRsp* TWorldBossCrossBuyAtkNumRsp::New() const {
  return new TWorldBossCrossBuyAtkNumRsp;
}

void TWorldBossCrossBuyAtkNumRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TWorldBossCrossBuyAtkNumRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(buynum_, buyatknum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossBuyAtkNumRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossBuyAtkNumRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BuyNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyAtkNum;
        break;
      }

      // optional uint32 BuyAtkNum = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyAtkNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buyatknum_)));
          set_has_buyatknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossBuyAtkNumRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossBuyAtkNumRsp)
  return false;
#undef DO_
}

void TWorldBossCrossBuyAtkNumRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossBuyAtkNumRsp)
  // optional uint32 BuyNum = 1;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buynum(), output);
  }

  // optional uint32 BuyAtkNum = 2;
  if (has_buyatknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buyatknum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossBuyAtkNumRsp)
}

::google::protobuf::uint8* TWorldBossCrossBuyAtkNumRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossBuyAtkNumRsp)
  // optional uint32 BuyNum = 1;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buynum(), target);
  }

  // optional uint32 BuyAtkNum = 2;
  if (has_buyatknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buyatknum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossBuyAtkNumRsp)
  return target;
}

int TWorldBossCrossBuyAtkNumRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BuyNum = 1;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

    // optional uint32 BuyAtkNum = 2;
    if (has_buyatknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buyatknum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossBuyAtkNumRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossBuyAtkNumRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossBuyAtkNumRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossBuyAtkNumRsp::MergeFrom(const TWorldBossCrossBuyAtkNumRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
    if (from.has_buyatknum()) {
      set_buyatknum(from.buyatknum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossBuyAtkNumRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossBuyAtkNumRsp::CopyFrom(const TWorldBossCrossBuyAtkNumRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossBuyAtkNumRsp::IsInitialized() const {

  return true;
}

void TWorldBossCrossBuyAtkNumRsp::Swap(TWorldBossCrossBuyAtkNumRsp* other) {
  if (other != this) {
    std::swap(buynum_, other->buynum_);
    std::swap(buyatknum_, other->buyatknum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossBuyAtkNumRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossBuyAtkNumRsp_descriptor_;
  metadata.reflection = TWorldBossCrossBuyAtkNumRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossReceiveDamageRewardReq::kRewardTidFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossReceiveDamageRewardReq::TWorldBossCrossReceiveDamageRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossReceiveDamageRewardReq)
}

void TWorldBossCrossReceiveDamageRewardReq::InitAsDefaultInstance() {
}

TWorldBossCrossReceiveDamageRewardReq::TWorldBossCrossReceiveDamageRewardReq(const TWorldBossCrossReceiveDamageRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossReceiveDamageRewardReq)
}

void TWorldBossCrossReceiveDamageRewardReq::SharedCtor() {
  _cached_size_ = 0;
  rewardtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossReceiveDamageRewardReq::~TWorldBossCrossReceiveDamageRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossReceiveDamageRewardReq)
  SharedDtor();
}

void TWorldBossCrossReceiveDamageRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossCrossReceiveDamageRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossReceiveDamageRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossReceiveDamageRewardReq_descriptor_;
}

const TWorldBossCrossReceiveDamageRewardReq& TWorldBossCrossReceiveDamageRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossReceiveDamageRewardReq* TWorldBossCrossReceiveDamageRewardReq::default_instance_ = NULL;

TWorldBossCrossReceiveDamageRewardReq* TWorldBossCrossReceiveDamageRewardReq::New() const {
  return new TWorldBossCrossReceiveDamageRewardReq;
}

void TWorldBossCrossReceiveDamageRewardReq::Clear() {
  rewardtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossReceiveDamageRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossReceiveDamageRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RewardTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardtid_)));
          set_has_rewardtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossReceiveDamageRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossReceiveDamageRewardReq)
  return false;
#undef DO_
}

void TWorldBossCrossReceiveDamageRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossReceiveDamageRewardReq)
  // optional uint32 RewardTid = 1;
  if (has_rewardtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rewardtid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossReceiveDamageRewardReq)
}

::google::protobuf::uint8* TWorldBossCrossReceiveDamageRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossReceiveDamageRewardReq)
  // optional uint32 RewardTid = 1;
  if (has_rewardtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rewardtid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossReceiveDamageRewardReq)
  return target;
}

int TWorldBossCrossReceiveDamageRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RewardTid = 1;
    if (has_rewardtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardtid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossReceiveDamageRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossReceiveDamageRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossReceiveDamageRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossReceiveDamageRewardReq::MergeFrom(const TWorldBossCrossReceiveDamageRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardtid()) {
      set_rewardtid(from.rewardtid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossReceiveDamageRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossReceiveDamageRewardReq::CopyFrom(const TWorldBossCrossReceiveDamageRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossReceiveDamageRewardReq::IsInitialized() const {

  return true;
}

void TWorldBossCrossReceiveDamageRewardReq::Swap(TWorldBossCrossReceiveDamageRewardReq* other) {
  if (other != this) {
    std::swap(rewardtid_, other->rewardtid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossReceiveDamageRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossReceiveDamageRewardReq_descriptor_;
  metadata.reflection = TWorldBossCrossReceiveDamageRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossReceiveDamageRewardRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossReceiveDamageRewardRsp::TWorldBossCrossReceiveDamageRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossReceiveDamageRewardRsp)
}

void TWorldBossCrossReceiveDamageRewardRsp::InitAsDefaultInstance() {
}

TWorldBossCrossReceiveDamageRewardRsp::TWorldBossCrossReceiveDamageRewardRsp(const TWorldBossCrossReceiveDamageRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossReceiveDamageRewardRsp)
}

void TWorldBossCrossReceiveDamageRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossReceiveDamageRewardRsp::~TWorldBossCrossReceiveDamageRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossReceiveDamageRewardRsp)
  SharedDtor();
}

void TWorldBossCrossReceiveDamageRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossCrossReceiveDamageRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossReceiveDamageRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossReceiveDamageRewardRsp_descriptor_;
}

const TWorldBossCrossReceiveDamageRewardRsp& TWorldBossCrossReceiveDamageRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossReceiveDamageRewardRsp* TWorldBossCrossReceiveDamageRewardRsp::default_instance_ = NULL;

TWorldBossCrossReceiveDamageRewardRsp* TWorldBossCrossReceiveDamageRewardRsp::New() const {
  return new TWorldBossCrossReceiveDamageRewardRsp;
}

void TWorldBossCrossReceiveDamageRewardRsp::Clear() {
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossReceiveDamageRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossReceiveDamageRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossReceiveDamageRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossReceiveDamageRewardRsp)
  return false;
#undef DO_
}

void TWorldBossCrossReceiveDamageRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossReceiveDamageRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossReceiveDamageRewardRsp)
}

::google::protobuf::uint8* TWorldBossCrossReceiveDamageRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossReceiveDamageRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossReceiveDamageRewardRsp)
  return target;
}

int TWorldBossCrossReceiveDamageRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossReceiveDamageRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossReceiveDamageRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossReceiveDamageRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossReceiveDamageRewardRsp::MergeFrom(const TWorldBossCrossReceiveDamageRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossReceiveDamageRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossReceiveDamageRewardRsp::CopyFrom(const TWorldBossCrossReceiveDamageRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossReceiveDamageRewardRsp::IsInitialized() const {

  return true;
}

void TWorldBossCrossReceiveDamageRewardRsp::Swap(TWorldBossCrossReceiveDamageRewardRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossReceiveDamageRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossReceiveDamageRewardRsp_descriptor_;
  metadata.reflection = TWorldBossCrossReceiveDamageRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossAutoReceiveDamageRewardRsp::kReceivedRewardTidArrFieldNumber;
const int TWorldBossCrossAutoReceiveDamageRewardRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossAutoReceiveDamageRewardRsp::TWorldBossCrossAutoReceiveDamageRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossAutoReceiveDamageRewardRsp)
}

void TWorldBossCrossAutoReceiveDamageRewardRsp::InitAsDefaultInstance() {
}

TWorldBossCrossAutoReceiveDamageRewardRsp::TWorldBossCrossAutoReceiveDamageRewardRsp(const TWorldBossCrossAutoReceiveDamageRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossAutoReceiveDamageRewardRsp)
}

void TWorldBossCrossAutoReceiveDamageRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossAutoReceiveDamageRewardRsp::~TWorldBossCrossAutoReceiveDamageRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossAutoReceiveDamageRewardRsp)
  SharedDtor();
}

void TWorldBossCrossAutoReceiveDamageRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossCrossAutoReceiveDamageRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossAutoReceiveDamageRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossAutoReceiveDamageRewardRsp_descriptor_;
}

const TWorldBossCrossAutoReceiveDamageRewardRsp& TWorldBossCrossAutoReceiveDamageRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossAutoReceiveDamageRewardRsp* TWorldBossCrossAutoReceiveDamageRewardRsp::default_instance_ = NULL;

TWorldBossCrossAutoReceiveDamageRewardRsp* TWorldBossCrossAutoReceiveDamageRewardRsp::New() const {
  return new TWorldBossCrossAutoReceiveDamageRewardRsp;
}

void TWorldBossCrossAutoReceiveDamageRewardRsp::Clear() {
  receivedrewardtidarr_.Clear();
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossAutoReceiveDamageRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossAutoReceiveDamageRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ReceivedRewardTidArr = 1;
      case 1: {
        if (tag == 8) {
         parse_ReceivedRewardTidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_receivedrewardtidarr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_receivedrewardtidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_ReceivedRewardTidArr;
        if (input->ExpectTag(18)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossAutoReceiveDamageRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossAutoReceiveDamageRewardRsp)
  return false;
#undef DO_
}

void TWorldBossCrossAutoReceiveDamageRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossAutoReceiveDamageRewardRsp)
  // repeated uint32 ReceivedRewardTidArr = 1;
  for (int i = 0; i < this->receivedrewardtidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->receivedrewardtidarr(i), output);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossAutoReceiveDamageRewardRsp)
}

::google::protobuf::uint8* TWorldBossCrossAutoReceiveDamageRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossAutoReceiveDamageRewardRsp)
  // repeated uint32 ReceivedRewardTidArr = 1;
  for (int i = 0; i < this->receivedrewardtidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->receivedrewardtidarr(i), target);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossAutoReceiveDamageRewardRsp)
  return target;
}

int TWorldBossCrossAutoReceiveDamageRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 ReceivedRewardTidArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->receivedrewardtidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->receivedrewardtidarr(i));
    }
    total_size += 1 * this->receivedrewardtidarr_size() + data_size;
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossAutoReceiveDamageRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossAutoReceiveDamageRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossAutoReceiveDamageRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossAutoReceiveDamageRewardRsp::MergeFrom(const TWorldBossCrossAutoReceiveDamageRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  receivedrewardtidarr_.MergeFrom(from.receivedrewardtidarr_);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossAutoReceiveDamageRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossAutoReceiveDamageRewardRsp::CopyFrom(const TWorldBossCrossAutoReceiveDamageRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossAutoReceiveDamageRewardRsp::IsInitialized() const {

  return true;
}

void TWorldBossCrossAutoReceiveDamageRewardRsp::Swap(TWorldBossCrossAutoReceiveDamageRewardRsp* other) {
  if (other != this) {
    receivedrewardtidarr_.Swap(&other->receivedrewardtidarr_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossAutoReceiveDamageRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossAutoReceiveDamageRewardRsp_descriptor_;
  metadata.reflection = TWorldBossCrossAutoReceiveDamageRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossUnit::kHidFieldNumber;
const int TWorldBossCrossUnit::kPosFieldNumber;
const int TWorldBossCrossUnit::kStarLvFieldNumber;
const int TWorldBossCrossUnit::kLevelFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossUnit::TWorldBossCrossUnit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossUnit)
}

void TWorldBossCrossUnit::InitAsDefaultInstance() {
}

TWorldBossCrossUnit::TWorldBossCrossUnit(const TWorldBossCrossUnit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossUnit)
}

void TWorldBossCrossUnit::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  pos_ = 0u;
  starlv_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossUnit::~TWorldBossCrossUnit() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossUnit)
  SharedDtor();
}

void TWorldBossCrossUnit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossCrossUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossUnit_descriptor_;
}

const TWorldBossCrossUnit& TWorldBossCrossUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossUnit* TWorldBossCrossUnit::default_instance_ = NULL;

TWorldBossCrossUnit* TWorldBossCrossUnit::New() const {
  return new TWorldBossCrossUnit;
}

void TWorldBossCrossUnit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TWorldBossCrossUnit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hid_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossUnit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Pos;
        break;
      }

      // optional uint32 Pos = 2;
      case 2: {
        if (tag == 16) {
         parse_Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_StarLv;
        break;
      }

      // optional uint32 StarLv = 3;
      case 3: {
        if (tag == 24) {
         parse_StarLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starlv_)));
          set_has_starlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 4;
      case 4: {
        if (tag == 32) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossUnit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossUnit)
  return false;
#undef DO_
}

void TWorldBossCrossUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossUnit)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional uint32 StarLv = 3;
  if (has_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->starlv(), output);
  }

  // optional uint32 Level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossUnit)
}

::google::protobuf::uint8* TWorldBossCrossUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossUnit)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional uint32 StarLv = 3;
  if (has_starlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->starlv(), target);
  }

  // optional uint32 Level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossUnit)
  return target;
}

int TWorldBossCrossUnit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint32 Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 StarLv = 3;
    if (has_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starlv());
    }

    // optional uint32 Level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossUnit::MergeFrom(const TWorldBossCrossUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_starlv()) {
      set_starlv(from.starlv());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossUnit::CopyFrom(const TWorldBossCrossUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossUnit::IsInitialized() const {

  return true;
}

void TWorldBossCrossUnit::Swap(TWorldBossCrossUnit* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(pos_, other->pos_);
    std::swap(starlv_, other->starlv_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossUnit_descriptor_;
  metadata.reflection = TWorldBossCrossUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossBattleRecord::kRidFieldNumber;
const int TWorldBossCrossBattleRecord::kBattleTimeFieldNumber;
const int TWorldBossCrossBattleRecord::kDamageFieldNumber;
const int TWorldBossCrossBattleRecord::kUnitArrFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossBattleRecord::TWorldBossCrossBattleRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossBattleRecord)
}

void TWorldBossCrossBattleRecord::InitAsDefaultInstance() {
}

TWorldBossCrossBattleRecord::TWorldBossCrossBattleRecord(const TWorldBossCrossBattleRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossBattleRecord)
}

void TWorldBossCrossBattleRecord::SharedCtor() {
  _cached_size_ = 0;
  rid_ = GOOGLE_ULONGLONG(0);
  battletime_ = GOOGLE_ULONGLONG(0);
  damage_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossBattleRecord::~TWorldBossCrossBattleRecord() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossBattleRecord)
  SharedDtor();
}

void TWorldBossCrossBattleRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossCrossBattleRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossBattleRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossBattleRecord_descriptor_;
}

const TWorldBossCrossBattleRecord& TWorldBossCrossBattleRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossBattleRecord* TWorldBossCrossBattleRecord::default_instance_ = NULL;

TWorldBossCrossBattleRecord* TWorldBossCrossBattleRecord::New() const {
  return new TWorldBossCrossBattleRecord;
}

void TWorldBossCrossBattleRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TWorldBossCrossBattleRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rid_, damage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  unitarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossBattleRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossBattleRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Rid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BattleTime;
        break;
      }

      // optional uint64 BattleTime = 2;
      case 2: {
        if (tag == 16) {
         parse_BattleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battletime_)));
          set_has_battletime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Damage;
        break;
      }

      // optional uint64 Damage = 3;
      case 3: {
        if (tag == 24) {
         parse_Damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_UnitArr;
        break;
      }

      // repeated .pb.TWorldBossCrossUnit UnitArr = 4;
      case 4: {
        if (tag == 34) {
         parse_UnitArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_UnitArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossBattleRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossBattleRecord)
  return false;
#undef DO_
}

void TWorldBossCrossBattleRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossBattleRecord)
  // optional uint64 Rid = 1;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->rid(), output);
  }

  // optional uint64 BattleTime = 2;
  if (has_battletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battletime(), output);
  }

  // optional uint64 Damage = 3;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->damage(), output);
  }

  // repeated .pb.TWorldBossCrossUnit UnitArr = 4;
  for (int i = 0; i < this->unitarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->unitarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossBattleRecord)
}

::google::protobuf::uint8* TWorldBossCrossBattleRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossBattleRecord)
  // optional uint64 Rid = 1;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->rid(), target);
  }

  // optional uint64 BattleTime = 2;
  if (has_battletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battletime(), target);
  }

  // optional uint64 Damage = 3;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->damage(), target);
  }

  // repeated .pb.TWorldBossCrossUnit UnitArr = 4;
  for (int i = 0; i < this->unitarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->unitarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossBattleRecord)
  return target;
}

int TWorldBossCrossBattleRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Rid = 1;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rid());
    }

    // optional uint64 BattleTime = 2;
    if (has_battletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battletime());
    }

    // optional uint64 Damage = 3;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->damage());
    }

  }
  // repeated .pb.TWorldBossCrossUnit UnitArr = 4;
  total_size += 1 * this->unitarr_size();
  for (int i = 0; i < this->unitarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossBattleRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossBattleRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossBattleRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossBattleRecord::MergeFrom(const TWorldBossCrossBattleRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitarr_.MergeFrom(from.unitarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_battletime()) {
      set_battletime(from.battletime());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossBattleRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossBattleRecord::CopyFrom(const TWorldBossCrossBattleRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossBattleRecord::IsInitialized() const {

  return true;
}

void TWorldBossCrossBattleRecord::Swap(TWorldBossCrossBattleRecord* other) {
  if (other != this) {
    std::swap(rid_, other->rid_);
    std::swap(battletime_, other->battletime_);
    std::swap(damage_, other->damage_);
    unitarr_.Swap(&other->unitarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossBattleRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossBattleRecord_descriptor_;
  metadata.reflection = TWorldBossCrossBattleRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossGetBattleRecordRsp::kRecordArrFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossGetBattleRecordRsp::TWorldBossCrossGetBattleRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossGetBattleRecordRsp)
}

void TWorldBossCrossGetBattleRecordRsp::InitAsDefaultInstance() {
}

TWorldBossCrossGetBattleRecordRsp::TWorldBossCrossGetBattleRecordRsp(const TWorldBossCrossGetBattleRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossGetBattleRecordRsp)
}

void TWorldBossCrossGetBattleRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossGetBattleRecordRsp::~TWorldBossCrossGetBattleRecordRsp() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossGetBattleRecordRsp)
  SharedDtor();
}

void TWorldBossCrossGetBattleRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossCrossGetBattleRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossGetBattleRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossGetBattleRecordRsp_descriptor_;
}

const TWorldBossCrossGetBattleRecordRsp& TWorldBossCrossGetBattleRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossGetBattleRecordRsp* TWorldBossCrossGetBattleRecordRsp::default_instance_ = NULL;

TWorldBossCrossGetBattleRecordRsp* TWorldBossCrossGetBattleRecordRsp::New() const {
  return new TWorldBossCrossGetBattleRecordRsp;
}

void TWorldBossCrossGetBattleRecordRsp::Clear() {
  recordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossGetBattleRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossGetBattleRecordRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TWorldBossCrossBattleRecord RecordArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RecordArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossGetBattleRecordRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossGetBattleRecordRsp)
  return false;
#undef DO_
}

void TWorldBossCrossGetBattleRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossGetBattleRecordRsp)
  // repeated .pb.TWorldBossCrossBattleRecord RecordArr = 1;
  for (int i = 0; i < this->recordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recordarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossGetBattleRecordRsp)
}

::google::protobuf::uint8* TWorldBossCrossGetBattleRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossGetBattleRecordRsp)
  // repeated .pb.TWorldBossCrossBattleRecord RecordArr = 1;
  for (int i = 0; i < this->recordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recordarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossGetBattleRecordRsp)
  return target;
}

int TWorldBossCrossGetBattleRecordRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TWorldBossCrossBattleRecord RecordArr = 1;
  total_size += 1 * this->recordarr_size();
  for (int i = 0; i < this->recordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossGetBattleRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossGetBattleRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossGetBattleRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossGetBattleRecordRsp::MergeFrom(const TWorldBossCrossGetBattleRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordarr_.MergeFrom(from.recordarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossGetBattleRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossGetBattleRecordRsp::CopyFrom(const TWorldBossCrossGetBattleRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossGetBattleRecordRsp::IsInitialized() const {

  return true;
}

void TWorldBossCrossGetBattleRecordRsp::Swap(TWorldBossCrossGetBattleRecordRsp* other) {
  if (other != this) {
    recordarr_.Swap(&other->recordarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossGetBattleRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossGetBattleRecordRsp_descriptor_;
  metadata.reflection = TWorldBossCrossGetBattleRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossGetMaxBattleRecordReq::kUidFieldNumber;
const int TWorldBossCrossGetMaxBattleRecordReq::kServerIdFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossGetMaxBattleRecordReq::TWorldBossCrossGetMaxBattleRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossGetMaxBattleRecordReq)
}

void TWorldBossCrossGetMaxBattleRecordReq::InitAsDefaultInstance() {
}

TWorldBossCrossGetMaxBattleRecordReq::TWorldBossCrossGetMaxBattleRecordReq(const TWorldBossCrossGetMaxBattleRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossGetMaxBattleRecordReq)
}

void TWorldBossCrossGetMaxBattleRecordReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossGetMaxBattleRecordReq::~TWorldBossCrossGetMaxBattleRecordReq() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossGetMaxBattleRecordReq)
  SharedDtor();
}

void TWorldBossCrossGetMaxBattleRecordReq::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void TWorldBossCrossGetMaxBattleRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossGetMaxBattleRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossGetMaxBattleRecordReq_descriptor_;
}

const TWorldBossCrossGetMaxBattleRecordReq& TWorldBossCrossGetMaxBattleRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossGetMaxBattleRecordReq* TWorldBossCrossGetMaxBattleRecordReq::default_instance_ = NULL;

TWorldBossCrossGetMaxBattleRecordReq* TWorldBossCrossGetMaxBattleRecordReq::New() const {
  return new TWorldBossCrossGetMaxBattleRecordReq;
}

void TWorldBossCrossGetMaxBattleRecordReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossGetMaxBattleRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossGetMaxBattleRecordReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 2;
      case 2: {
        if (tag == 18) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossGetMaxBattleRecordReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossGetMaxBattleRecordReq)
  return false;
#undef DO_
}

void TWorldBossCrossGetMaxBattleRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossGetMaxBattleRecordReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossGetMaxBattleRecordReq)
}

::google::protobuf::uint8* TWorldBossCrossGetMaxBattleRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossGetMaxBattleRecordReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossGetMaxBattleRecordReq)
  return target;
}

int TWorldBossCrossGetMaxBattleRecordReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string ServerId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossGetMaxBattleRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossGetMaxBattleRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossGetMaxBattleRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossGetMaxBattleRecordReq::MergeFrom(const TWorldBossCrossGetMaxBattleRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossGetMaxBattleRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossGetMaxBattleRecordReq::CopyFrom(const TWorldBossCrossGetMaxBattleRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossGetMaxBattleRecordReq::IsInitialized() const {

  return true;
}

void TWorldBossCrossGetMaxBattleRecordReq::Swap(TWorldBossCrossGetMaxBattleRecordReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossGetMaxBattleRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossGetMaxBattleRecordReq_descriptor_;
  metadata.reflection = TWorldBossCrossGetMaxBattleRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossGetMaxBattleRecordRsp::kBattleRetFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossGetMaxBattleRecordRsp::TWorldBossCrossGetMaxBattleRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossGetMaxBattleRecordRsp)
}

void TWorldBossCrossGetMaxBattleRecordRsp::InitAsDefaultInstance() {
}

TWorldBossCrossGetMaxBattleRecordRsp::TWorldBossCrossGetMaxBattleRecordRsp(const TWorldBossCrossGetMaxBattleRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossGetMaxBattleRecordRsp)
}

void TWorldBossCrossGetMaxBattleRecordRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossGetMaxBattleRecordRsp::~TWorldBossCrossGetMaxBattleRecordRsp() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossGetMaxBattleRecordRsp)
  SharedDtor();
}

void TWorldBossCrossGetMaxBattleRecordRsp::SharedDtor() {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleret_;
  }
  if (this != default_instance_) {
  }
}

void TWorldBossCrossGetMaxBattleRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossGetMaxBattleRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossGetMaxBattleRecordRsp_descriptor_;
}

const TWorldBossCrossGetMaxBattleRecordRsp& TWorldBossCrossGetMaxBattleRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossGetMaxBattleRecordRsp* TWorldBossCrossGetMaxBattleRecordRsp::default_instance_ = NULL;

TWorldBossCrossGetMaxBattleRecordRsp* TWorldBossCrossGetMaxBattleRecordRsp::New() const {
  return new TWorldBossCrossGetMaxBattleRecordRsp;
}

void TWorldBossCrossGetMaxBattleRecordRsp::Clear() {
  if (has_battleret()) {
    if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      battleret_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossGetMaxBattleRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossGetMaxBattleRecordRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes BattleRet = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battleret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossGetMaxBattleRecordRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossGetMaxBattleRecordRsp)
  return false;
#undef DO_
}

void TWorldBossCrossGetMaxBattleRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossGetMaxBattleRecordRsp)
  // optional bytes BattleRet = 2;
  if (has_battleret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->battleret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossGetMaxBattleRecordRsp)
}

::google::protobuf::uint8* TWorldBossCrossGetMaxBattleRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossGetMaxBattleRecordRsp)
  // optional bytes BattleRet = 2;
  if (has_battleret()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->battleret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossGetMaxBattleRecordRsp)
  return target;
}

int TWorldBossCrossGetMaxBattleRecordRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes BattleRet = 2;
    if (has_battleret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battleret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossGetMaxBattleRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossGetMaxBattleRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossGetMaxBattleRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossGetMaxBattleRecordRsp::MergeFrom(const TWorldBossCrossGetMaxBattleRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleret()) {
      set_battleret(from.battleret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossGetMaxBattleRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossGetMaxBattleRecordRsp::CopyFrom(const TWorldBossCrossGetMaxBattleRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossGetMaxBattleRecordRsp::IsInitialized() const {

  return true;
}

void TWorldBossCrossGetMaxBattleRecordRsp::Swap(TWorldBossCrossGetMaxBattleRecordRsp* other) {
  if (other != this) {
    std::swap(battleret_, other->battleret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossGetMaxBattleRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossGetMaxBattleRecordRsp_descriptor_;
  metadata.reflection = TWorldBossCrossGetMaxBattleRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossGetUserMaxBattleRidReq::kUidFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossGetUserMaxBattleRidReq::TWorldBossCrossGetUserMaxBattleRidReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossGetUserMaxBattleRidReq)
}

void TWorldBossCrossGetUserMaxBattleRidReq::InitAsDefaultInstance() {
}

TWorldBossCrossGetUserMaxBattleRidReq::TWorldBossCrossGetUserMaxBattleRidReq(const TWorldBossCrossGetUserMaxBattleRidReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossGetUserMaxBattleRidReq)
}

void TWorldBossCrossGetUserMaxBattleRidReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossGetUserMaxBattleRidReq::~TWorldBossCrossGetUserMaxBattleRidReq() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossGetUserMaxBattleRidReq)
  SharedDtor();
}

void TWorldBossCrossGetUserMaxBattleRidReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossCrossGetUserMaxBattleRidReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossGetUserMaxBattleRidReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossGetUserMaxBattleRidReq_descriptor_;
}

const TWorldBossCrossGetUserMaxBattleRidReq& TWorldBossCrossGetUserMaxBattleRidReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossGetUserMaxBattleRidReq* TWorldBossCrossGetUserMaxBattleRidReq::default_instance_ = NULL;

TWorldBossCrossGetUserMaxBattleRidReq* TWorldBossCrossGetUserMaxBattleRidReq::New() const {
  return new TWorldBossCrossGetUserMaxBattleRidReq;
}

void TWorldBossCrossGetUserMaxBattleRidReq::Clear() {
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossGetUserMaxBattleRidReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossGetUserMaxBattleRidReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossGetUserMaxBattleRidReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossGetUserMaxBattleRidReq)
  return false;
#undef DO_
}

void TWorldBossCrossGetUserMaxBattleRidReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossGetUserMaxBattleRidReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossGetUserMaxBattleRidReq)
}

::google::protobuf::uint8* TWorldBossCrossGetUserMaxBattleRidReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossGetUserMaxBattleRidReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossGetUserMaxBattleRidReq)
  return target;
}

int TWorldBossCrossGetUserMaxBattleRidReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossGetUserMaxBattleRidReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossGetUserMaxBattleRidReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossGetUserMaxBattleRidReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossGetUserMaxBattleRidReq::MergeFrom(const TWorldBossCrossGetUserMaxBattleRidReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossGetUserMaxBattleRidReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossGetUserMaxBattleRidReq::CopyFrom(const TWorldBossCrossGetUserMaxBattleRidReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossGetUserMaxBattleRidReq::IsInitialized() const {

  return true;
}

void TWorldBossCrossGetUserMaxBattleRidReq::Swap(TWorldBossCrossGetUserMaxBattleRidReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossGetUserMaxBattleRidReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossGetUserMaxBattleRidReq_descriptor_;
  metadata.reflection = TWorldBossCrossGetUserMaxBattleRidReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossGetUserMaxBattleRidRsp::kRidFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossGetUserMaxBattleRidRsp::TWorldBossCrossGetUserMaxBattleRidRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossGetUserMaxBattleRidRsp)
}

void TWorldBossCrossGetUserMaxBattleRidRsp::InitAsDefaultInstance() {
}

TWorldBossCrossGetUserMaxBattleRidRsp::TWorldBossCrossGetUserMaxBattleRidRsp(const TWorldBossCrossGetUserMaxBattleRidRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossGetUserMaxBattleRidRsp)
}

void TWorldBossCrossGetUserMaxBattleRidRsp::SharedCtor() {
  _cached_size_ = 0;
  rid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossGetUserMaxBattleRidRsp::~TWorldBossCrossGetUserMaxBattleRidRsp() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossGetUserMaxBattleRidRsp)
  SharedDtor();
}

void TWorldBossCrossGetUserMaxBattleRidRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossCrossGetUserMaxBattleRidRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossGetUserMaxBattleRidRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossGetUserMaxBattleRidRsp_descriptor_;
}

const TWorldBossCrossGetUserMaxBattleRidRsp& TWorldBossCrossGetUserMaxBattleRidRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossGetUserMaxBattleRidRsp* TWorldBossCrossGetUserMaxBattleRidRsp::default_instance_ = NULL;

TWorldBossCrossGetUserMaxBattleRidRsp* TWorldBossCrossGetUserMaxBattleRidRsp::New() const {
  return new TWorldBossCrossGetUserMaxBattleRidRsp;
}

void TWorldBossCrossGetUserMaxBattleRidRsp::Clear() {
  rid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossGetUserMaxBattleRidRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossGetUserMaxBattleRidRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Rid = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossGetUserMaxBattleRidRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossGetUserMaxBattleRidRsp)
  return false;
#undef DO_
}

void TWorldBossCrossGetUserMaxBattleRidRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossGetUserMaxBattleRidRsp)
  // optional uint64 Rid = 2;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->rid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossGetUserMaxBattleRidRsp)
}

::google::protobuf::uint8* TWorldBossCrossGetUserMaxBattleRidRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossGetUserMaxBattleRidRsp)
  // optional uint64 Rid = 2;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->rid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossGetUserMaxBattleRidRsp)
  return target;
}

int TWorldBossCrossGetUserMaxBattleRidRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Rid = 2;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossGetUserMaxBattleRidRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossGetUserMaxBattleRidRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossGetUserMaxBattleRidRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossGetUserMaxBattleRidRsp::MergeFrom(const TWorldBossCrossGetUserMaxBattleRidRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rid()) {
      set_rid(from.rid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossGetUserMaxBattleRidRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossGetUserMaxBattleRidRsp::CopyFrom(const TWorldBossCrossGetUserMaxBattleRidRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossGetUserMaxBattleRidRsp::IsInitialized() const {

  return true;
}

void TWorldBossCrossGetUserMaxBattleRidRsp::Swap(TWorldBossCrossGetUserMaxBattleRidRsp* other) {
  if (other != this) {
    std::swap(rid_, other->rid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossGetUserMaxBattleRidRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossGetUserMaxBattleRidRsp_descriptor_;
  metadata.reflection = TWorldBossCrossGetUserMaxBattleRidRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossGetBossSimpleInfoRsp::kRankForRankIdArrFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossGetBossSimpleInfoRsp::TWorldBossCrossGetBossSimpleInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossGetBossSimpleInfoRsp)
}

void TWorldBossCrossGetBossSimpleInfoRsp::InitAsDefaultInstance() {
}

TWorldBossCrossGetBossSimpleInfoRsp::TWorldBossCrossGetBossSimpleInfoRsp(const TWorldBossCrossGetBossSimpleInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossGetBossSimpleInfoRsp)
}

void TWorldBossCrossGetBossSimpleInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossGetBossSimpleInfoRsp::~TWorldBossCrossGetBossSimpleInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossGetBossSimpleInfoRsp)
  SharedDtor();
}

void TWorldBossCrossGetBossSimpleInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossCrossGetBossSimpleInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossGetBossSimpleInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossGetBossSimpleInfoRsp_descriptor_;
}

const TWorldBossCrossGetBossSimpleInfoRsp& TWorldBossCrossGetBossSimpleInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossGetBossSimpleInfoRsp* TWorldBossCrossGetBossSimpleInfoRsp::default_instance_ = NULL;

TWorldBossCrossGetBossSimpleInfoRsp* TWorldBossCrossGetBossSimpleInfoRsp::New() const {
  return new TWorldBossCrossGetBossSimpleInfoRsp;
}

void TWorldBossCrossGetBossSimpleInfoRsp::Clear() {
  rankforrankidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossGetBossSimpleInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossGetBossSimpleInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TWorldBossCrossRankInfoForRankId RankForRankIdArr = 9;
      case 9: {
        if (tag == 74) {
         parse_RankForRankIdArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankforrankidarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_RankForRankIdArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossGetBossSimpleInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossGetBossSimpleInfoRsp)
  return false;
#undef DO_
}

void TWorldBossCrossGetBossSimpleInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossGetBossSimpleInfoRsp)
  // repeated .pb.TWorldBossCrossRankInfoForRankId RankForRankIdArr = 9;
  for (int i = 0; i < this->rankforrankidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->rankforrankidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossGetBossSimpleInfoRsp)
}

::google::protobuf::uint8* TWorldBossCrossGetBossSimpleInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossGetBossSimpleInfoRsp)
  // repeated .pb.TWorldBossCrossRankInfoForRankId RankForRankIdArr = 9;
  for (int i = 0; i < this->rankforrankidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->rankforrankidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossGetBossSimpleInfoRsp)
  return target;
}

int TWorldBossCrossGetBossSimpleInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TWorldBossCrossRankInfoForRankId RankForRankIdArr = 9;
  total_size += 1 * this->rankforrankidarr_size();
  for (int i = 0; i < this->rankforrankidarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankforrankidarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossGetBossSimpleInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossGetBossSimpleInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossGetBossSimpleInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossGetBossSimpleInfoRsp::MergeFrom(const TWorldBossCrossGetBossSimpleInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankforrankidarr_.MergeFrom(from.rankforrankidarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossGetBossSimpleInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossGetBossSimpleInfoRsp::CopyFrom(const TWorldBossCrossGetBossSimpleInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossGetBossSimpleInfoRsp::IsInitialized() const {

  return true;
}

void TWorldBossCrossGetBossSimpleInfoRsp::Swap(TWorldBossCrossGetBossSimpleInfoRsp* other) {
  if (other != this) {
    rankforrankidarr_.Swap(&other->rankforrankidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossGetBossSimpleInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossGetBossSimpleInfoRsp_descriptor_;
  metadata.reflection = TWorldBossCrossGetBossSimpleInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossExchangeReq::kExchangeIdFieldNumber;
const int TWorldBossCrossExchangeReq::kNumFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossExchangeReq::TWorldBossCrossExchangeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossExchangeReq)
}

void TWorldBossCrossExchangeReq::InitAsDefaultInstance() {
}

TWorldBossCrossExchangeReq::TWorldBossCrossExchangeReq(const TWorldBossCrossExchangeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossExchangeReq)
}

void TWorldBossCrossExchangeReq::SharedCtor() {
  _cached_size_ = 0;
  exchangeid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossExchangeReq::~TWorldBossCrossExchangeReq() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossExchangeReq)
  SharedDtor();
}

void TWorldBossCrossExchangeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossCrossExchangeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossExchangeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossExchangeReq_descriptor_;
}

const TWorldBossCrossExchangeReq& TWorldBossCrossExchangeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossExchangeReq* TWorldBossCrossExchangeReq::default_instance_ = NULL;

TWorldBossCrossExchangeReq* TWorldBossCrossExchangeReq::New() const {
  return new TWorldBossCrossExchangeReq;
}

void TWorldBossCrossExchangeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TWorldBossCrossExchangeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(exchangeid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossExchangeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossExchangeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ExchangeId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exchangeid_)));
          set_has_exchangeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossExchangeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossExchangeReq)
  return false;
#undef DO_
}

void TWorldBossCrossExchangeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossExchangeReq)
  // optional uint32 ExchangeId = 1;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exchangeid(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossExchangeReq)
}

::google::protobuf::uint8* TWorldBossCrossExchangeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossExchangeReq)
  // optional uint32 ExchangeId = 1;
  if (has_exchangeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exchangeid(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossExchangeReq)
  return target;
}

int TWorldBossCrossExchangeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ExchangeId = 1;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exchangeid());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossExchangeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossExchangeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossExchangeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossExchangeReq::MergeFrom(const TWorldBossCrossExchangeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossExchangeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossExchangeReq::CopyFrom(const TWorldBossCrossExchangeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossExchangeReq::IsInitialized() const {

  return true;
}

void TWorldBossCrossExchangeReq::Swap(TWorldBossCrossExchangeReq* other) {
  if (other != this) {
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossExchangeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossExchangeReq_descriptor_;
  metadata.reflection = TWorldBossCrossExchangeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossGetRankInfoTopNRsp::kDamageRankArrFieldNumber;
const int TWorldBossCrossGetRankInfoTopNRsp::kMyRankInfoFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossGetRankInfoTopNRsp::TWorldBossCrossGetRankInfoTopNRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossGetRankInfoTopNRsp)
}

void TWorldBossCrossGetRankInfoTopNRsp::InitAsDefaultInstance() {
  myrankinfo_ = const_cast< ::pb::TWorldBossCrossDamageSingle*>(&::pb::TWorldBossCrossDamageSingle::default_instance());
}

TWorldBossCrossGetRankInfoTopNRsp::TWorldBossCrossGetRankInfoTopNRsp(const TWorldBossCrossGetRankInfoTopNRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossGetRankInfoTopNRsp)
}

void TWorldBossCrossGetRankInfoTopNRsp::SharedCtor() {
  _cached_size_ = 0;
  myrankinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossGetRankInfoTopNRsp::~TWorldBossCrossGetRankInfoTopNRsp() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossGetRankInfoTopNRsp)
  SharedDtor();
}

void TWorldBossCrossGetRankInfoTopNRsp::SharedDtor() {
  if (this != default_instance_) {
    delete myrankinfo_;
  }
}

void TWorldBossCrossGetRankInfoTopNRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossGetRankInfoTopNRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossGetRankInfoTopNRsp_descriptor_;
}

const TWorldBossCrossGetRankInfoTopNRsp& TWorldBossCrossGetRankInfoTopNRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossGetRankInfoTopNRsp* TWorldBossCrossGetRankInfoTopNRsp::default_instance_ = NULL;

TWorldBossCrossGetRankInfoTopNRsp* TWorldBossCrossGetRankInfoTopNRsp::New() const {
  return new TWorldBossCrossGetRankInfoTopNRsp;
}

void TWorldBossCrossGetRankInfoTopNRsp::Clear() {
  if (has_myrankinfo()) {
    if (myrankinfo_ != NULL) myrankinfo_->::pb::TWorldBossCrossDamageSingle::Clear();
  }
  damagerankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossGetRankInfoTopNRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossGetRankInfoTopNRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TWorldBossCrossDamageSingle DamageRankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_DamageRankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damagerankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_DamageRankArr;
        if (input->ExpectTag(18)) goto parse_MyRankInfo;
        break;
      }

      // optional .pb.TWorldBossCrossDamageSingle MyRankInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_MyRankInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myrankinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossGetRankInfoTopNRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossGetRankInfoTopNRsp)
  return false;
#undef DO_
}

void TWorldBossCrossGetRankInfoTopNRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossGetRankInfoTopNRsp)
  // repeated .pb.TWorldBossCrossDamageSingle DamageRankArr = 1;
  for (int i = 0; i < this->damagerankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->damagerankarr(i), output);
  }

  // optional .pb.TWorldBossCrossDamageSingle MyRankInfo = 2;
  if (has_myrankinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->myrankinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossGetRankInfoTopNRsp)
}

::google::protobuf::uint8* TWorldBossCrossGetRankInfoTopNRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossGetRankInfoTopNRsp)
  // repeated .pb.TWorldBossCrossDamageSingle DamageRankArr = 1;
  for (int i = 0; i < this->damagerankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->damagerankarr(i), target);
  }

  // optional .pb.TWorldBossCrossDamageSingle MyRankInfo = 2;
  if (has_myrankinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->myrankinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossGetRankInfoTopNRsp)
  return target;
}

int TWorldBossCrossGetRankInfoTopNRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .pb.TWorldBossCrossDamageSingle MyRankInfo = 2;
    if (has_myrankinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myrankinfo());
    }

  }
  // repeated .pb.TWorldBossCrossDamageSingle DamageRankArr = 1;
  total_size += 1 * this->damagerankarr_size();
  for (int i = 0; i < this->damagerankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damagerankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossGetRankInfoTopNRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossGetRankInfoTopNRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossGetRankInfoTopNRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossGetRankInfoTopNRsp::MergeFrom(const TWorldBossCrossGetRankInfoTopNRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  damagerankarr_.MergeFrom(from.damagerankarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrankinfo()) {
      mutable_myrankinfo()->::pb::TWorldBossCrossDamageSingle::MergeFrom(from.myrankinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossGetRankInfoTopNRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossGetRankInfoTopNRsp::CopyFrom(const TWorldBossCrossGetRankInfoTopNRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossGetRankInfoTopNRsp::IsInitialized() const {

  return true;
}

void TWorldBossCrossGetRankInfoTopNRsp::Swap(TWorldBossCrossGetRankInfoTopNRsp* other) {
  if (other != this) {
    damagerankarr_.Swap(&other->damagerankarr_);
    std::swap(myrankinfo_, other->myrankinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossGetRankInfoTopNRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossGetRankInfoTopNRsp_descriptor_;
  metadata.reflection = TWorldBossCrossGetRankInfoTopNRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossGetRankInfoByLimitReq::kOffsetFieldNumber;
const int TWorldBossCrossGetRankInfoByLimitReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossGetRankInfoByLimitReq::TWorldBossCrossGetRankInfoByLimitReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossGetRankInfoByLimitReq)
}

void TWorldBossCrossGetRankInfoByLimitReq::InitAsDefaultInstance() {
}

TWorldBossCrossGetRankInfoByLimitReq::TWorldBossCrossGetRankInfoByLimitReq(const TWorldBossCrossGetRankInfoByLimitReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossGetRankInfoByLimitReq)
}

void TWorldBossCrossGetRankInfoByLimitReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossGetRankInfoByLimitReq::~TWorldBossCrossGetRankInfoByLimitReq() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossGetRankInfoByLimitReq)
  SharedDtor();
}

void TWorldBossCrossGetRankInfoByLimitReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossCrossGetRankInfoByLimitReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossGetRankInfoByLimitReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossGetRankInfoByLimitReq_descriptor_;
}

const TWorldBossCrossGetRankInfoByLimitReq& TWorldBossCrossGetRankInfoByLimitReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossGetRankInfoByLimitReq* TWorldBossCrossGetRankInfoByLimitReq::default_instance_ = NULL;

TWorldBossCrossGetRankInfoByLimitReq* TWorldBossCrossGetRankInfoByLimitReq::New() const {
  return new TWorldBossCrossGetRankInfoByLimitReq;
}

void TWorldBossCrossGetRankInfoByLimitReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TWorldBossCrossGetRankInfoByLimitReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossGetRankInfoByLimitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossGetRankInfoByLimitReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossGetRankInfoByLimitReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossGetRankInfoByLimitReq)
  return false;
#undef DO_
}

void TWorldBossCrossGetRankInfoByLimitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossGetRankInfoByLimitReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossGetRankInfoByLimitReq)
}

::google::protobuf::uint8* TWorldBossCrossGetRankInfoByLimitReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossGetRankInfoByLimitReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossGetRankInfoByLimitReq)
  return target;
}

int TWorldBossCrossGetRankInfoByLimitReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossGetRankInfoByLimitReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossGetRankInfoByLimitReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossGetRankInfoByLimitReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossGetRankInfoByLimitReq::MergeFrom(const TWorldBossCrossGetRankInfoByLimitReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossGetRankInfoByLimitReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossGetRankInfoByLimitReq::CopyFrom(const TWorldBossCrossGetRankInfoByLimitReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossGetRankInfoByLimitReq::IsInitialized() const {

  return true;
}

void TWorldBossCrossGetRankInfoByLimitReq::Swap(TWorldBossCrossGetRankInfoByLimitReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossGetRankInfoByLimitReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossGetRankInfoByLimitReq_descriptor_;
  metadata.reflection = TWorldBossCrossGetRankInfoByLimitReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossGetRankInfoByLimitRsp::kDamageRankArrFieldNumber;
const int TWorldBossCrossGetRankInfoByLimitRsp::kMyRankInfoFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossGetRankInfoByLimitRsp::TWorldBossCrossGetRankInfoByLimitRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossGetRankInfoByLimitRsp)
}

void TWorldBossCrossGetRankInfoByLimitRsp::InitAsDefaultInstance() {
  myrankinfo_ = const_cast< ::pb::TWorldBossCrossDamageSingle*>(&::pb::TWorldBossCrossDamageSingle::default_instance());
}

TWorldBossCrossGetRankInfoByLimitRsp::TWorldBossCrossGetRankInfoByLimitRsp(const TWorldBossCrossGetRankInfoByLimitRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossGetRankInfoByLimitRsp)
}

void TWorldBossCrossGetRankInfoByLimitRsp::SharedCtor() {
  _cached_size_ = 0;
  myrankinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossGetRankInfoByLimitRsp::~TWorldBossCrossGetRankInfoByLimitRsp() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossGetRankInfoByLimitRsp)
  SharedDtor();
}

void TWorldBossCrossGetRankInfoByLimitRsp::SharedDtor() {
  if (this != default_instance_) {
    delete myrankinfo_;
  }
}

void TWorldBossCrossGetRankInfoByLimitRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossGetRankInfoByLimitRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossGetRankInfoByLimitRsp_descriptor_;
}

const TWorldBossCrossGetRankInfoByLimitRsp& TWorldBossCrossGetRankInfoByLimitRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossGetRankInfoByLimitRsp* TWorldBossCrossGetRankInfoByLimitRsp::default_instance_ = NULL;

TWorldBossCrossGetRankInfoByLimitRsp* TWorldBossCrossGetRankInfoByLimitRsp::New() const {
  return new TWorldBossCrossGetRankInfoByLimitRsp;
}

void TWorldBossCrossGetRankInfoByLimitRsp::Clear() {
  if (has_myrankinfo()) {
    if (myrankinfo_ != NULL) myrankinfo_->::pb::TWorldBossCrossDamageSingle::Clear();
  }
  damagerankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossGetRankInfoByLimitRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossGetRankInfoByLimitRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TWorldBossCrossDamageSingle DamageRankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_DamageRankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damagerankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_DamageRankArr;
        if (input->ExpectTag(18)) goto parse_MyRankInfo;
        break;
      }

      // optional .pb.TWorldBossCrossDamageSingle MyRankInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_MyRankInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myrankinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossGetRankInfoByLimitRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossGetRankInfoByLimitRsp)
  return false;
#undef DO_
}

void TWorldBossCrossGetRankInfoByLimitRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossGetRankInfoByLimitRsp)
  // repeated .pb.TWorldBossCrossDamageSingle DamageRankArr = 1;
  for (int i = 0; i < this->damagerankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->damagerankarr(i), output);
  }

  // optional .pb.TWorldBossCrossDamageSingle MyRankInfo = 2;
  if (has_myrankinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->myrankinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossGetRankInfoByLimitRsp)
}

::google::protobuf::uint8* TWorldBossCrossGetRankInfoByLimitRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossGetRankInfoByLimitRsp)
  // repeated .pb.TWorldBossCrossDamageSingle DamageRankArr = 1;
  for (int i = 0; i < this->damagerankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->damagerankarr(i), target);
  }

  // optional .pb.TWorldBossCrossDamageSingle MyRankInfo = 2;
  if (has_myrankinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->myrankinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossGetRankInfoByLimitRsp)
  return target;
}

int TWorldBossCrossGetRankInfoByLimitRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .pb.TWorldBossCrossDamageSingle MyRankInfo = 2;
    if (has_myrankinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myrankinfo());
    }

  }
  // repeated .pb.TWorldBossCrossDamageSingle DamageRankArr = 1;
  total_size += 1 * this->damagerankarr_size();
  for (int i = 0; i < this->damagerankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damagerankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossGetRankInfoByLimitRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossGetRankInfoByLimitRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossGetRankInfoByLimitRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossGetRankInfoByLimitRsp::MergeFrom(const TWorldBossCrossGetRankInfoByLimitRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  damagerankarr_.MergeFrom(from.damagerankarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrankinfo()) {
      mutable_myrankinfo()->::pb::TWorldBossCrossDamageSingle::MergeFrom(from.myrankinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossGetRankInfoByLimitRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossGetRankInfoByLimitRsp::CopyFrom(const TWorldBossCrossGetRankInfoByLimitRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossGetRankInfoByLimitRsp::IsInitialized() const {

  return true;
}

void TWorldBossCrossGetRankInfoByLimitRsp::Swap(TWorldBossCrossGetRankInfoByLimitRsp* other) {
  if (other != this) {
    damagerankarr_.Swap(&other->damagerankarr_);
    std::swap(myrankinfo_, other->myrankinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossGetRankInfoByLimitRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossGetRankInfoByLimitRsp_descriptor_;
  metadata.reflection = TWorldBossCrossGetRankInfoByLimitRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWorldBossCrossNotify::kArrRmbShopFieldNumber;
const int TWorldBossCrossNotify::kArrRankRewardFieldNumber;
#endif  // !_MSC_VER

TWorldBossCrossNotify::TWorldBossCrossNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWorldBossCrossNotify)
}

void TWorldBossCrossNotify::InitAsDefaultInstance() {
}

TWorldBossCrossNotify::TWorldBossCrossNotify(const TWorldBossCrossNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWorldBossCrossNotify)
}

void TWorldBossCrossNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWorldBossCrossNotify::~TWorldBossCrossNotify() {
  // @@protoc_insertion_point(destructor:pb.TWorldBossCrossNotify)
  SharedDtor();
}

void TWorldBossCrossNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWorldBossCrossNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWorldBossCrossNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWorldBossCrossNotify_descriptor_;
}

const TWorldBossCrossNotify& TWorldBossCrossNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fWorldBossCross_2eproto();
  return *default_instance_;
}

TWorldBossCrossNotify* TWorldBossCrossNotify::default_instance_ = NULL;

TWorldBossCrossNotify* TWorldBossCrossNotify::New() const {
  return new TWorldBossCrossNotify;
}

void TWorldBossCrossNotify::Clear() {
  arrrmbshop_.Clear();
  arrrankreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWorldBossCrossNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWorldBossCrossNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TWorldBossCrossShopInfo ArrRmbShop = 10;
      case 10: {
        if (tag == 82) {
         parse_ArrRmbShop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrmbshop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ArrRmbShop;
        if (input->ExpectTag(90)) goto parse_ArrRankReward;
        break;
      }

      // repeated .pb.TCommonReward ArrRankReward = 11;
      case 11: {
        if (tag == 90) {
         parse_ArrRankReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrankreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_ArrRankReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWorldBossCrossNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWorldBossCrossNotify)
  return false;
#undef DO_
}

void TWorldBossCrossNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWorldBossCrossNotify)
  // repeated .pb.TWorldBossCrossShopInfo ArrRmbShop = 10;
  for (int i = 0; i < this->arrrmbshop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->arrrmbshop(i), output);
  }

  // repeated .pb.TCommonReward ArrRankReward = 11;
  for (int i = 0; i < this->arrrankreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->arrrankreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWorldBossCrossNotify)
}

::google::protobuf::uint8* TWorldBossCrossNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWorldBossCrossNotify)
  // repeated .pb.TWorldBossCrossShopInfo ArrRmbShop = 10;
  for (int i = 0; i < this->arrrmbshop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->arrrmbshop(i), target);
  }

  // repeated .pb.TCommonReward ArrRankReward = 11;
  for (int i = 0; i < this->arrrankreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->arrrankreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWorldBossCrossNotify)
  return target;
}

int TWorldBossCrossNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TWorldBossCrossShopInfo ArrRmbShop = 10;
  total_size += 1 * this->arrrmbshop_size();
  for (int i = 0; i < this->arrrmbshop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrmbshop(i));
  }

  // repeated .pb.TCommonReward ArrRankReward = 11;
  total_size += 1 * this->arrrankreward_size();
  for (int i = 0; i < this->arrrankreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrankreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWorldBossCrossNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWorldBossCrossNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWorldBossCrossNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWorldBossCrossNotify::MergeFrom(const TWorldBossCrossNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrmbshop_.MergeFrom(from.arrrmbshop_);
  arrrankreward_.MergeFrom(from.arrrankreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWorldBossCrossNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWorldBossCrossNotify::CopyFrom(const TWorldBossCrossNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWorldBossCrossNotify::IsInitialized() const {

  return true;
}

void TWorldBossCrossNotify::Swap(TWorldBossCrossNotify* other) {
  if (other != this) {
    arrrmbshop_.Swap(&other->arrrmbshop_);
    arrrankreward_.Swap(&other->arrrankreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWorldBossCrossNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWorldBossCrossNotify_descriptor_;
  metadata.reflection = TWorldBossCrossNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
