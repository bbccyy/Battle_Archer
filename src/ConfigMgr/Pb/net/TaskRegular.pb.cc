// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/TaskRegular.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/TaskRegular.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TTaskRegularInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTaskRegularInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTaskRegularInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTaskRegularInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTaskRegularAcceptReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTaskRegularAcceptReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTaskRegularAwardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTaskRegularAwardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTaskRegularInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTaskRegularInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTaskRegularProcessAddReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTaskRegularProcessAddReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTaskRegularReturnNPCReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTaskRegularReturnNPCReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fTaskRegular_2eproto() {
  protobuf_AddDesc_net_2fTaskRegular_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/TaskRegular.proto");
  GOOGLE_CHECK(file != NULL);
  TTaskRegularInfoRsp_descriptor_ = file->message_type(0);
  static const int TTaskRegularInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTaskRegularInfoRsp, arrdata_),
  };
  TTaskRegularInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTaskRegularInfoRsp_descriptor_,
      TTaskRegularInfoRsp::default_instance_,
      TTaskRegularInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTaskRegularInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTaskRegularInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTaskRegularInfoRsp));
  TTaskRegularInfoNotify_descriptor_ = file->message_type(1);
  static const int TTaskRegularInfoNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTaskRegularInfoNotify, arrdata_),
  };
  TTaskRegularInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTaskRegularInfoNotify_descriptor_,
      TTaskRegularInfoNotify::default_instance_,
      TTaskRegularInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTaskRegularInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTaskRegularInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTaskRegularInfoNotify));
  TTaskRegularAcceptReq_descriptor_ = file->message_type(2);
  static const int TTaskRegularAcceptReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTaskRegularAcceptReq, taskid_),
  };
  TTaskRegularAcceptReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTaskRegularAcceptReq_descriptor_,
      TTaskRegularAcceptReq::default_instance_,
      TTaskRegularAcceptReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTaskRegularAcceptReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTaskRegularAcceptReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTaskRegularAcceptReq));
  TTaskRegularAwardReq_descriptor_ = file->message_type(3);
  static const int TTaskRegularAwardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTaskRegularAwardReq, taskid_),
  };
  TTaskRegularAwardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTaskRegularAwardReq_descriptor_,
      TTaskRegularAwardReq::default_instance_,
      TTaskRegularAwardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTaskRegularAwardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTaskRegularAwardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTaskRegularAwardReq));
  TTaskRegularInfoReq_descriptor_ = file->message_type(4);
  static const int TTaskRegularInfoReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTaskRegularInfoReq, maintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTaskRegularInfoReq, subtype_),
  };
  TTaskRegularInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTaskRegularInfoReq_descriptor_,
      TTaskRegularInfoReq::default_instance_,
      TTaskRegularInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTaskRegularInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTaskRegularInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTaskRegularInfoReq));
  TTaskRegularProcessAddReq_descriptor_ = file->message_type(5);
  static const int TTaskRegularProcessAddReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTaskRegularProcessAddReq, tasktid_),
  };
  TTaskRegularProcessAddReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTaskRegularProcessAddReq_descriptor_,
      TTaskRegularProcessAddReq::default_instance_,
      TTaskRegularProcessAddReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTaskRegularProcessAddReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTaskRegularProcessAddReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTaskRegularProcessAddReq));
  TTaskRegularReturnNPCReq_descriptor_ = file->message_type(6);
  static const int TTaskRegularReturnNPCReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTaskRegularReturnNPCReq, tasktid_),
  };
  TTaskRegularReturnNPCReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTaskRegularReturnNPCReq_descriptor_,
      TTaskRegularReturnNPCReq::default_instance_,
      TTaskRegularReturnNPCReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTaskRegularReturnNPCReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTaskRegularReturnNPCReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTaskRegularReturnNPCReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fTaskRegular_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTaskRegularInfoRsp_descriptor_, &TTaskRegularInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTaskRegularInfoNotify_descriptor_, &TTaskRegularInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTaskRegularAcceptReq_descriptor_, &TTaskRegularAcceptReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTaskRegularAwardReq_descriptor_, &TTaskRegularAwardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTaskRegularInfoReq_descriptor_, &TTaskRegularInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTaskRegularProcessAddReq_descriptor_, &TTaskRegularProcessAddReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTaskRegularReturnNPCReq_descriptor_, &TTaskRegularReturnNPCReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fTaskRegular_2eproto() {
  delete TTaskRegularInfoRsp::default_instance_;
  delete TTaskRegularInfoRsp_reflection_;
  delete TTaskRegularInfoNotify::default_instance_;
  delete TTaskRegularInfoNotify_reflection_;
  delete TTaskRegularAcceptReq::default_instance_;
  delete TTaskRegularAcceptReq_reflection_;
  delete TTaskRegularAwardReq::default_instance_;
  delete TTaskRegularAwardReq_reflection_;
  delete TTaskRegularInfoReq::default_instance_;
  delete TTaskRegularInfoReq_reflection_;
  delete TTaskRegularProcessAddReq::default_instance_;
  delete TTaskRegularProcessAddReq_reflection_;
  delete TTaskRegularReturnNPCReq::default_instance_;
  delete TTaskRegularReturnNPCReq_reflection_;
}

void protobuf_AddDesc_net_2fTaskRegular_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fTaskData_2eproto();
  ::pb::protobuf_AddDesc_net_2fTaskBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025net/TaskRegular.proto\022\002pb\032\025module/Task"
    "Data.proto\032\022net/TaskBase.proto\"5\n\023TTaskR"
    "egularInfoRsp\022\036\n\007ArrData\030\001 \003(\0132\r.pb.TTas"
    "kData\"8\n\026TTaskRegularInfoNotify\022\036\n\007ArrDa"
    "ta\030\001 \003(\0132\r.pb.TTaskData\"\'\n\025TTaskRegularA"
    "cceptReq\022\016\n\006TaskID\030\001 \001(\005\"&\n\024TTaskRegular"
    "AwardReq\022\016\n\006TaskID\030\001 \001(\005\"]\n\023TTaskRegular"
    "InfoReq\022#\n\010MainType\030\001 \001(\0162\021.pb.ETaskMain"
    "Type\022!\n\007SubType\030\002 \001(\0162\020.pb.ETaskSubType\""
    ",\n\031TTaskRegularProcessAddReq\022\017\n\007TaskTid\030"
    "\001 \001(\005\"+\n\030TTaskRegularReturnNPCReq\022\017\n\007Tas"
    "kTid\030\001 \001(\005", 450);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/TaskRegular.proto", &protobuf_RegisterTypes);
  TTaskRegularInfoRsp::default_instance_ = new TTaskRegularInfoRsp();
  TTaskRegularInfoNotify::default_instance_ = new TTaskRegularInfoNotify();
  TTaskRegularAcceptReq::default_instance_ = new TTaskRegularAcceptReq();
  TTaskRegularAwardReq::default_instance_ = new TTaskRegularAwardReq();
  TTaskRegularInfoReq::default_instance_ = new TTaskRegularInfoReq();
  TTaskRegularProcessAddReq::default_instance_ = new TTaskRegularProcessAddReq();
  TTaskRegularReturnNPCReq::default_instance_ = new TTaskRegularReturnNPCReq();
  TTaskRegularInfoRsp::default_instance_->InitAsDefaultInstance();
  TTaskRegularInfoNotify::default_instance_->InitAsDefaultInstance();
  TTaskRegularAcceptReq::default_instance_->InitAsDefaultInstance();
  TTaskRegularAwardReq::default_instance_->InitAsDefaultInstance();
  TTaskRegularInfoReq::default_instance_->InitAsDefaultInstance();
  TTaskRegularProcessAddReq::default_instance_->InitAsDefaultInstance();
  TTaskRegularReturnNPCReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fTaskRegular_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fTaskRegular_2eproto {
  StaticDescriptorInitializer_net_2fTaskRegular_2eproto() {
    protobuf_AddDesc_net_2fTaskRegular_2eproto();
  }
} static_descriptor_initializer_net_2fTaskRegular_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TTaskRegularInfoRsp::kArrDataFieldNumber;
#endif  // !_MSC_VER

TTaskRegularInfoRsp::TTaskRegularInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTaskRegularInfoRsp)
}

void TTaskRegularInfoRsp::InitAsDefaultInstance() {
}

TTaskRegularInfoRsp::TTaskRegularInfoRsp(const TTaskRegularInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTaskRegularInfoRsp)
}

void TTaskRegularInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTaskRegularInfoRsp::~TTaskRegularInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TTaskRegularInfoRsp)
  SharedDtor();
}

void TTaskRegularInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTaskRegularInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTaskRegularInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTaskRegularInfoRsp_descriptor_;
}

const TTaskRegularInfoRsp& TTaskRegularInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTaskRegular_2eproto();
  return *default_instance_;
}

TTaskRegularInfoRsp* TTaskRegularInfoRsp::default_instance_ = NULL;

TTaskRegularInfoRsp* TTaskRegularInfoRsp::New() const {
  return new TTaskRegularInfoRsp;
}

void TTaskRegularInfoRsp::Clear() {
  arrdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTaskRegularInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTaskRegularInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TTaskData ArrData = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTaskRegularInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTaskRegularInfoRsp)
  return false;
#undef DO_
}

void TTaskRegularInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTaskRegularInfoRsp)
  // repeated .pb.TTaskData ArrData = 1;
  for (int i = 0; i < this->arrdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTaskRegularInfoRsp)
}

::google::protobuf::uint8* TTaskRegularInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTaskRegularInfoRsp)
  // repeated .pb.TTaskData ArrData = 1;
  for (int i = 0; i < this->arrdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTaskRegularInfoRsp)
  return target;
}

int TTaskRegularInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TTaskData ArrData = 1;
  total_size += 1 * this->arrdata_size();
  for (int i = 0; i < this->arrdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTaskRegularInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTaskRegularInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTaskRegularInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTaskRegularInfoRsp::MergeFrom(const TTaskRegularInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrdata_.MergeFrom(from.arrdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTaskRegularInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTaskRegularInfoRsp::CopyFrom(const TTaskRegularInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTaskRegularInfoRsp::IsInitialized() const {

  return true;
}

void TTaskRegularInfoRsp::Swap(TTaskRegularInfoRsp* other) {
  if (other != this) {
    arrdata_.Swap(&other->arrdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTaskRegularInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTaskRegularInfoRsp_descriptor_;
  metadata.reflection = TTaskRegularInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTaskRegularInfoNotify::kArrDataFieldNumber;
#endif  // !_MSC_VER

TTaskRegularInfoNotify::TTaskRegularInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTaskRegularInfoNotify)
}

void TTaskRegularInfoNotify::InitAsDefaultInstance() {
}

TTaskRegularInfoNotify::TTaskRegularInfoNotify(const TTaskRegularInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTaskRegularInfoNotify)
}

void TTaskRegularInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTaskRegularInfoNotify::~TTaskRegularInfoNotify() {
  // @@protoc_insertion_point(destructor:pb.TTaskRegularInfoNotify)
  SharedDtor();
}

void TTaskRegularInfoNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTaskRegularInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTaskRegularInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTaskRegularInfoNotify_descriptor_;
}

const TTaskRegularInfoNotify& TTaskRegularInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTaskRegular_2eproto();
  return *default_instance_;
}

TTaskRegularInfoNotify* TTaskRegularInfoNotify::default_instance_ = NULL;

TTaskRegularInfoNotify* TTaskRegularInfoNotify::New() const {
  return new TTaskRegularInfoNotify;
}

void TTaskRegularInfoNotify::Clear() {
  arrdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTaskRegularInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTaskRegularInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TTaskData ArrData = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTaskRegularInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTaskRegularInfoNotify)
  return false;
#undef DO_
}

void TTaskRegularInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTaskRegularInfoNotify)
  // repeated .pb.TTaskData ArrData = 1;
  for (int i = 0; i < this->arrdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTaskRegularInfoNotify)
}

::google::protobuf::uint8* TTaskRegularInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTaskRegularInfoNotify)
  // repeated .pb.TTaskData ArrData = 1;
  for (int i = 0; i < this->arrdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTaskRegularInfoNotify)
  return target;
}

int TTaskRegularInfoNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TTaskData ArrData = 1;
  total_size += 1 * this->arrdata_size();
  for (int i = 0; i < this->arrdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTaskRegularInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTaskRegularInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTaskRegularInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTaskRegularInfoNotify::MergeFrom(const TTaskRegularInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrdata_.MergeFrom(from.arrdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTaskRegularInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTaskRegularInfoNotify::CopyFrom(const TTaskRegularInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTaskRegularInfoNotify::IsInitialized() const {

  return true;
}

void TTaskRegularInfoNotify::Swap(TTaskRegularInfoNotify* other) {
  if (other != this) {
    arrdata_.Swap(&other->arrdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTaskRegularInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTaskRegularInfoNotify_descriptor_;
  metadata.reflection = TTaskRegularInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTaskRegularAcceptReq::kTaskIDFieldNumber;
#endif  // !_MSC_VER

TTaskRegularAcceptReq::TTaskRegularAcceptReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTaskRegularAcceptReq)
}

void TTaskRegularAcceptReq::InitAsDefaultInstance() {
}

TTaskRegularAcceptReq::TTaskRegularAcceptReq(const TTaskRegularAcceptReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTaskRegularAcceptReq)
}

void TTaskRegularAcceptReq::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTaskRegularAcceptReq::~TTaskRegularAcceptReq() {
  // @@protoc_insertion_point(destructor:pb.TTaskRegularAcceptReq)
  SharedDtor();
}

void TTaskRegularAcceptReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTaskRegularAcceptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTaskRegularAcceptReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTaskRegularAcceptReq_descriptor_;
}

const TTaskRegularAcceptReq& TTaskRegularAcceptReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTaskRegular_2eproto();
  return *default_instance_;
}

TTaskRegularAcceptReq* TTaskRegularAcceptReq::default_instance_ = NULL;

TTaskRegularAcceptReq* TTaskRegularAcceptReq::New() const {
  return new TTaskRegularAcceptReq;
}

void TTaskRegularAcceptReq::Clear() {
  taskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTaskRegularAcceptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTaskRegularAcceptReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TaskID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTaskRegularAcceptReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTaskRegularAcceptReq)
  return false;
#undef DO_
}

void TTaskRegularAcceptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTaskRegularAcceptReq)
  // optional int32 TaskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTaskRegularAcceptReq)
}

::google::protobuf::uint8* TTaskRegularAcceptReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTaskRegularAcceptReq)
  // optional int32 TaskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTaskRegularAcceptReq)
  return target;
}

int TTaskRegularAcceptReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTaskRegularAcceptReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTaskRegularAcceptReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTaskRegularAcceptReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTaskRegularAcceptReq::MergeFrom(const TTaskRegularAcceptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTaskRegularAcceptReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTaskRegularAcceptReq::CopyFrom(const TTaskRegularAcceptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTaskRegularAcceptReq::IsInitialized() const {

  return true;
}

void TTaskRegularAcceptReq::Swap(TTaskRegularAcceptReq* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTaskRegularAcceptReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTaskRegularAcceptReq_descriptor_;
  metadata.reflection = TTaskRegularAcceptReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTaskRegularAwardReq::kTaskIDFieldNumber;
#endif  // !_MSC_VER

TTaskRegularAwardReq::TTaskRegularAwardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTaskRegularAwardReq)
}

void TTaskRegularAwardReq::InitAsDefaultInstance() {
}

TTaskRegularAwardReq::TTaskRegularAwardReq(const TTaskRegularAwardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTaskRegularAwardReq)
}

void TTaskRegularAwardReq::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTaskRegularAwardReq::~TTaskRegularAwardReq() {
  // @@protoc_insertion_point(destructor:pb.TTaskRegularAwardReq)
  SharedDtor();
}

void TTaskRegularAwardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTaskRegularAwardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTaskRegularAwardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTaskRegularAwardReq_descriptor_;
}

const TTaskRegularAwardReq& TTaskRegularAwardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTaskRegular_2eproto();
  return *default_instance_;
}

TTaskRegularAwardReq* TTaskRegularAwardReq::default_instance_ = NULL;

TTaskRegularAwardReq* TTaskRegularAwardReq::New() const {
  return new TTaskRegularAwardReq;
}

void TTaskRegularAwardReq::Clear() {
  taskid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTaskRegularAwardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTaskRegularAwardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TaskID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTaskRegularAwardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTaskRegularAwardReq)
  return false;
#undef DO_
}

void TTaskRegularAwardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTaskRegularAwardReq)
  // optional int32 TaskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTaskRegularAwardReq)
}

::google::protobuf::uint8* TTaskRegularAwardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTaskRegularAwardReq)
  // optional int32 TaskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTaskRegularAwardReq)
  return target;
}

int TTaskRegularAwardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTaskRegularAwardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTaskRegularAwardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTaskRegularAwardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTaskRegularAwardReq::MergeFrom(const TTaskRegularAwardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTaskRegularAwardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTaskRegularAwardReq::CopyFrom(const TTaskRegularAwardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTaskRegularAwardReq::IsInitialized() const {

  return true;
}

void TTaskRegularAwardReq::Swap(TTaskRegularAwardReq* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTaskRegularAwardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTaskRegularAwardReq_descriptor_;
  metadata.reflection = TTaskRegularAwardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTaskRegularInfoReq::kMainTypeFieldNumber;
const int TTaskRegularInfoReq::kSubTypeFieldNumber;
#endif  // !_MSC_VER

TTaskRegularInfoReq::TTaskRegularInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTaskRegularInfoReq)
}

void TTaskRegularInfoReq::InitAsDefaultInstance() {
}

TTaskRegularInfoReq::TTaskRegularInfoReq(const TTaskRegularInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTaskRegularInfoReq)
}

void TTaskRegularInfoReq::SharedCtor() {
  _cached_size_ = 0;
  maintype_ = 0;
  subtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTaskRegularInfoReq::~TTaskRegularInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TTaskRegularInfoReq)
  SharedDtor();
}

void TTaskRegularInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTaskRegularInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTaskRegularInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTaskRegularInfoReq_descriptor_;
}

const TTaskRegularInfoReq& TTaskRegularInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTaskRegular_2eproto();
  return *default_instance_;
}

TTaskRegularInfoReq* TTaskRegularInfoReq::default_instance_ = NULL;

TTaskRegularInfoReq* TTaskRegularInfoReq::New() const {
  return new TTaskRegularInfoReq;
}

void TTaskRegularInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTaskRegularInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(maintype_, subtype_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTaskRegularInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTaskRegularInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ETaskMainType MainType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ETaskMainType_IsValid(value)) {
            set_maintype(static_cast< ::pb::ETaskMainType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SubType;
        break;
      }

      // optional .pb.ETaskSubType SubType = 2;
      case 2: {
        if (tag == 16) {
         parse_SubType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ETaskSubType_IsValid(value)) {
            set_subtype(static_cast< ::pb::ETaskSubType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTaskRegularInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTaskRegularInfoReq)
  return false;
#undef DO_
}

void TTaskRegularInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTaskRegularInfoReq)
  // optional .pb.ETaskMainType MainType = 1;
  if (has_maintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->maintype(), output);
  }

  // optional .pb.ETaskSubType SubType = 2;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->subtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTaskRegularInfoReq)
}

::google::protobuf::uint8* TTaskRegularInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTaskRegularInfoReq)
  // optional .pb.ETaskMainType MainType = 1;
  if (has_maintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->maintype(), target);
  }

  // optional .pb.ETaskSubType SubType = 2;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->subtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTaskRegularInfoReq)
  return target;
}

int TTaskRegularInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ETaskMainType MainType = 1;
    if (has_maintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->maintype());
    }

    // optional .pb.ETaskSubType SubType = 2;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->subtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTaskRegularInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTaskRegularInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTaskRegularInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTaskRegularInfoReq::MergeFrom(const TTaskRegularInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maintype()) {
      set_maintype(from.maintype());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTaskRegularInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTaskRegularInfoReq::CopyFrom(const TTaskRegularInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTaskRegularInfoReq::IsInitialized() const {

  return true;
}

void TTaskRegularInfoReq::Swap(TTaskRegularInfoReq* other) {
  if (other != this) {
    std::swap(maintype_, other->maintype_);
    std::swap(subtype_, other->subtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTaskRegularInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTaskRegularInfoReq_descriptor_;
  metadata.reflection = TTaskRegularInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTaskRegularProcessAddReq::kTaskTidFieldNumber;
#endif  // !_MSC_VER

TTaskRegularProcessAddReq::TTaskRegularProcessAddReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTaskRegularProcessAddReq)
}

void TTaskRegularProcessAddReq::InitAsDefaultInstance() {
}

TTaskRegularProcessAddReq::TTaskRegularProcessAddReq(const TTaskRegularProcessAddReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTaskRegularProcessAddReq)
}

void TTaskRegularProcessAddReq::SharedCtor() {
  _cached_size_ = 0;
  tasktid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTaskRegularProcessAddReq::~TTaskRegularProcessAddReq() {
  // @@protoc_insertion_point(destructor:pb.TTaskRegularProcessAddReq)
  SharedDtor();
}

void TTaskRegularProcessAddReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTaskRegularProcessAddReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTaskRegularProcessAddReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTaskRegularProcessAddReq_descriptor_;
}

const TTaskRegularProcessAddReq& TTaskRegularProcessAddReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTaskRegular_2eproto();
  return *default_instance_;
}

TTaskRegularProcessAddReq* TTaskRegularProcessAddReq::default_instance_ = NULL;

TTaskRegularProcessAddReq* TTaskRegularProcessAddReq::New() const {
  return new TTaskRegularProcessAddReq;
}

void TTaskRegularProcessAddReq::Clear() {
  tasktid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTaskRegularProcessAddReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTaskRegularProcessAddReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TaskTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tasktid_)));
          set_has_tasktid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTaskRegularProcessAddReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTaskRegularProcessAddReq)
  return false;
#undef DO_
}

void TTaskRegularProcessAddReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTaskRegularProcessAddReq)
  // optional int32 TaskTid = 1;
  if (has_tasktid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tasktid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTaskRegularProcessAddReq)
}

::google::protobuf::uint8* TTaskRegularProcessAddReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTaskRegularProcessAddReq)
  // optional int32 TaskTid = 1;
  if (has_tasktid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tasktid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTaskRegularProcessAddReq)
  return target;
}

int TTaskRegularProcessAddReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 TaskTid = 1;
    if (has_tasktid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tasktid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTaskRegularProcessAddReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTaskRegularProcessAddReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTaskRegularProcessAddReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTaskRegularProcessAddReq::MergeFrom(const TTaskRegularProcessAddReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tasktid()) {
      set_tasktid(from.tasktid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTaskRegularProcessAddReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTaskRegularProcessAddReq::CopyFrom(const TTaskRegularProcessAddReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTaskRegularProcessAddReq::IsInitialized() const {

  return true;
}

void TTaskRegularProcessAddReq::Swap(TTaskRegularProcessAddReq* other) {
  if (other != this) {
    std::swap(tasktid_, other->tasktid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTaskRegularProcessAddReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTaskRegularProcessAddReq_descriptor_;
  metadata.reflection = TTaskRegularProcessAddReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTaskRegularReturnNPCReq::kTaskTidFieldNumber;
#endif  // !_MSC_VER

TTaskRegularReturnNPCReq::TTaskRegularReturnNPCReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTaskRegularReturnNPCReq)
}

void TTaskRegularReturnNPCReq::InitAsDefaultInstance() {
}

TTaskRegularReturnNPCReq::TTaskRegularReturnNPCReq(const TTaskRegularReturnNPCReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTaskRegularReturnNPCReq)
}

void TTaskRegularReturnNPCReq::SharedCtor() {
  _cached_size_ = 0;
  tasktid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTaskRegularReturnNPCReq::~TTaskRegularReturnNPCReq() {
  // @@protoc_insertion_point(destructor:pb.TTaskRegularReturnNPCReq)
  SharedDtor();
}

void TTaskRegularReturnNPCReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTaskRegularReturnNPCReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTaskRegularReturnNPCReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTaskRegularReturnNPCReq_descriptor_;
}

const TTaskRegularReturnNPCReq& TTaskRegularReturnNPCReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTaskRegular_2eproto();
  return *default_instance_;
}

TTaskRegularReturnNPCReq* TTaskRegularReturnNPCReq::default_instance_ = NULL;

TTaskRegularReturnNPCReq* TTaskRegularReturnNPCReq::New() const {
  return new TTaskRegularReturnNPCReq;
}

void TTaskRegularReturnNPCReq::Clear() {
  tasktid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTaskRegularReturnNPCReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTaskRegularReturnNPCReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TaskTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tasktid_)));
          set_has_tasktid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTaskRegularReturnNPCReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTaskRegularReturnNPCReq)
  return false;
#undef DO_
}

void TTaskRegularReturnNPCReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTaskRegularReturnNPCReq)
  // optional int32 TaskTid = 1;
  if (has_tasktid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tasktid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTaskRegularReturnNPCReq)
}

::google::protobuf::uint8* TTaskRegularReturnNPCReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTaskRegularReturnNPCReq)
  // optional int32 TaskTid = 1;
  if (has_tasktid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tasktid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTaskRegularReturnNPCReq)
  return target;
}

int TTaskRegularReturnNPCReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 TaskTid = 1;
    if (has_tasktid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tasktid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTaskRegularReturnNPCReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTaskRegularReturnNPCReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTaskRegularReturnNPCReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTaskRegularReturnNPCReq::MergeFrom(const TTaskRegularReturnNPCReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tasktid()) {
      set_tasktid(from.tasktid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTaskRegularReturnNPCReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTaskRegularReturnNPCReq::CopyFrom(const TTaskRegularReturnNPCReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTaskRegularReturnNPCReq::IsInitialized() const {

  return true;
}

void TTaskRegularReturnNPCReq::Swap(TTaskRegularReturnNPCReq* other) {
  if (other != this) {
    std::swap(tasktid_, other->tasktid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTaskRegularReturnNPCReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTaskRegularReturnNPCReq_descriptor_;
  metadata.reflection = TTaskRegularReturnNPCReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
