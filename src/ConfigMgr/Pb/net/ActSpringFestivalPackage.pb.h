// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActSpringFestivalPackage.proto

#ifndef PROTOBUF_net_2fActSpringFestivalPackage_2eproto__INCLUDED
#define PROTOBUF_net_2fActSpringFestivalPackage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActSpringFestivalPackage_2eproto();
void protobuf_AssignDesc_net_2fActSpringFestivalPackage_2eproto();
void protobuf_ShutdownFile_net_2fActSpringFestivalPackage_2eproto();

class TActSpringFestivalPackageInfo;
class TActSpringFestivalPackageGetInfoRsp;
class TActSpringFestivalPackageNotify;
class TActSpringFestivalPackageBuyGiftReq;
class TActSpringFestivalPackageBuyGiftRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TActSpringFestivalPackageInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActSpringFestivalPackage.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActSpringFestivalPackageInfo : public ::google::protobuf::Message {
 public:
  TActSpringFestivalPackageInfo();
  virtual ~TActSpringFestivalPackageInfo();

  TActSpringFestivalPackageInfo(const TActSpringFestivalPackageInfo& from);

  inline TActSpringFestivalPackageInfo& operator=(const TActSpringFestivalPackageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActSpringFestivalPackageInfo& default_instance();

  void Swap(TActSpringFestivalPackageInfo* other);

  // implements Message ----------------------------------------------

  TActSpringFestivalPackageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActSpringFestivalPackageInfo& from);
  void MergeFrom(const TActSpringFestivalPackageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActSpringFestivalPackageInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 BuyNum = 2;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActSpringFestivalPackageInfo</name>
  	<Function>
  		<name>buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActSpringFestivalPackageInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_buynum();
  inline void clear_has_buynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 buynum_;
  friend void  protobuf_AddDesc_net_2fActSpringFestivalPackage_2eproto();
  friend void protobuf_AssignDesc_net_2fActSpringFestivalPackage_2eproto();
  friend void protobuf_ShutdownFile_net_2fActSpringFestivalPackage_2eproto();

  void InitAsDefaultInstance();
  static TActSpringFestivalPackageInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActSpringFestivalPackageGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActSpringFestivalPackage.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActSpringFestivalPackageGetInfoRsp : public ::google::protobuf::Message {
 public:
  TActSpringFestivalPackageGetInfoRsp();
  virtual ~TActSpringFestivalPackageGetInfoRsp();

  TActSpringFestivalPackageGetInfoRsp(const TActSpringFestivalPackageGetInfoRsp& from);

  inline TActSpringFestivalPackageGetInfoRsp& operator=(const TActSpringFestivalPackageGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActSpringFestivalPackageGetInfoRsp& default_instance();

  void Swap(TActSpringFestivalPackageGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TActSpringFestivalPackageGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActSpringFestivalPackageGetInfoRsp& from);
  void MergeFrom(const TActSpringFestivalPackageGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActSpringFestivalPackageInfo ArrInfo = 1;
  inline int arrinfo_size() const;
  inline void clear_arrinfo();
  static const int kArrInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActSpringFestivalPackageGetInfoRsp</name>
  	<Function>
  		<name>arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrinfo_size</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActSpringFestivalPackageInfo& arrinfo(int index) const;
  inline ::pb::TActSpringFestivalPackageInfo* mutable_arrinfo(int index);
  inline ::pb::TActSpringFestivalPackageInfo* add_arrinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActSpringFestivalPackageInfo >&
      arrinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActSpringFestivalPackageInfo >*
      mutable_arrinfo();

  // @@protoc_insertion_point(class_scope:pb.TActSpringFestivalPackageGetInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActSpringFestivalPackageInfo > arrinfo_;
  friend void  protobuf_AddDesc_net_2fActSpringFestivalPackage_2eproto();
  friend void protobuf_AssignDesc_net_2fActSpringFestivalPackage_2eproto();
  friend void protobuf_ShutdownFile_net_2fActSpringFestivalPackage_2eproto();

  void InitAsDefaultInstance();
  static TActSpringFestivalPackageGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActSpringFestivalPackageNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActSpringFestivalPackage.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActSpringFestivalPackageNotify : public ::google::protobuf::Message {
 public:
  TActSpringFestivalPackageNotify();
  virtual ~TActSpringFestivalPackageNotify();

  TActSpringFestivalPackageNotify(const TActSpringFestivalPackageNotify& from);

  inline TActSpringFestivalPackageNotify& operator=(const TActSpringFestivalPackageNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActSpringFestivalPackageNotify& default_instance();

  void Swap(TActSpringFestivalPackageNotify* other);

  // implements Message ----------------------------------------------

  TActSpringFestivalPackageNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActSpringFestivalPackageNotify& from);
  void MergeFrom(const TActSpringFestivalPackageNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActSpringFestivalPackageInfo ArrInfo = 1;
  inline int arrinfo_size() const;
  inline void clear_arrinfo();
  static const int kArrInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActSpringFestivalPackageNotify</name>
  	<Function>
  		<name>arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrinfo_size</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActSpringFestivalPackageInfo& arrinfo(int index) const;
  inline ::pb::TActSpringFestivalPackageInfo* mutable_arrinfo(int index);
  inline ::pb::TActSpringFestivalPackageInfo* add_arrinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActSpringFestivalPackageInfo >&
      arrinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActSpringFestivalPackageInfo >*
      mutable_arrinfo();

  // @@protoc_insertion_point(class_scope:pb.TActSpringFestivalPackageNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActSpringFestivalPackageInfo > arrinfo_;
  friend void  protobuf_AddDesc_net_2fActSpringFestivalPackage_2eproto();
  friend void protobuf_AssignDesc_net_2fActSpringFestivalPackage_2eproto();
  friend void protobuf_ShutdownFile_net_2fActSpringFestivalPackage_2eproto();

  void InitAsDefaultInstance();
  static TActSpringFestivalPackageNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActSpringFestivalPackageBuyGiftReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActSpringFestivalPackage.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActSpringFestivalPackageBuyGiftReq : public ::google::protobuf::Message {
 public:
  TActSpringFestivalPackageBuyGiftReq();
  virtual ~TActSpringFestivalPackageBuyGiftReq();

  TActSpringFestivalPackageBuyGiftReq(const TActSpringFestivalPackageBuyGiftReq& from);

  inline TActSpringFestivalPackageBuyGiftReq& operator=(const TActSpringFestivalPackageBuyGiftReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActSpringFestivalPackageBuyGiftReq& default_instance();

  void Swap(TActSpringFestivalPackageBuyGiftReq* other);

  // implements Message ----------------------------------------------

  TActSpringFestivalPackageBuyGiftReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActSpringFestivalPackageBuyGiftReq& from);
  void MergeFrom(const TActSpringFestivalPackageBuyGiftReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActSpringFestivalPackageBuyGiftReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 BuyNum = 2;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActSpringFestivalPackageBuyGiftReq</name>
  	<Function>
  		<name>buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActSpringFestivalPackageBuyGiftReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_buynum();
  inline void clear_has_buynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 buynum_;
  friend void  protobuf_AddDesc_net_2fActSpringFestivalPackage_2eproto();
  friend void protobuf_AssignDesc_net_2fActSpringFestivalPackage_2eproto();
  friend void protobuf_ShutdownFile_net_2fActSpringFestivalPackage_2eproto();

  void InitAsDefaultInstance();
  static TActSpringFestivalPackageBuyGiftReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActSpringFestivalPackageBuyGiftRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActSpringFestivalPackage.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActSpringFestivalPackageBuyGiftRsp : public ::google::protobuf::Message {
 public:
  TActSpringFestivalPackageBuyGiftRsp();
  virtual ~TActSpringFestivalPackageBuyGiftRsp();

  TActSpringFestivalPackageBuyGiftRsp(const TActSpringFestivalPackageBuyGiftRsp& from);

  inline TActSpringFestivalPackageBuyGiftRsp& operator=(const TActSpringFestivalPackageBuyGiftRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActSpringFestivalPackageBuyGiftRsp& default_instance();

  void Swap(TActSpringFestivalPackageBuyGiftRsp* other);

  // implements Message ----------------------------------------------

  TActSpringFestivalPackageBuyGiftRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActSpringFestivalPackageBuyGiftRsp& from);
  void MergeFrom(const TActSpringFestivalPackageBuyGiftRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrReward = 1;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActSpringFestivalPackageBuyGiftRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TActSpringFestivalPackageBuyGiftRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fActSpringFestivalPackage_2eproto();
  friend void protobuf_AssignDesc_net_2fActSpringFestivalPackage_2eproto();
  friend void protobuf_ShutdownFile_net_2fActSpringFestivalPackage_2eproto();

  void InitAsDefaultInstance();
  static TActSpringFestivalPackageBuyGiftRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TActSpringFestivalPackageInfo

// optional uint32 Id = 1;
inline bool TActSpringFestivalPackageInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActSpringFestivalPackageInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActSpringFestivalPackageInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActSpringFestivalPackageInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActSpringFestivalPackageInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TActSpringFestivalPackageInfo.Id)
  return id_;
}
inline void TActSpringFestivalPackageInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActSpringFestivalPackageInfo.Id)
}

// optional uint32 BuyNum = 2;
inline bool TActSpringFestivalPackageInfo::has_buynum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActSpringFestivalPackageInfo::set_has_buynum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActSpringFestivalPackageInfo::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActSpringFestivalPackageInfo::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 TActSpringFestivalPackageInfo::buynum() const {
  // @@protoc_insertion_point(field_get:pb.TActSpringFestivalPackageInfo.BuyNum)
  return buynum_;
}
inline void TActSpringFestivalPackageInfo::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActSpringFestivalPackageInfo.BuyNum)
}

// -------------------------------------------------------------------

// TActSpringFestivalPackageGetInfoRsp

// repeated .pb.TActSpringFestivalPackageInfo ArrInfo = 1;
inline int TActSpringFestivalPackageGetInfoRsp::arrinfo_size() const {
  return arrinfo_.size();
}
inline void TActSpringFestivalPackageGetInfoRsp::clear_arrinfo() {
  arrinfo_.Clear();
}
inline const ::pb::TActSpringFestivalPackageInfo& TActSpringFestivalPackageGetInfoRsp::arrinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActSpringFestivalPackageGetInfoRsp.ArrInfo)
  return arrinfo_.Get(index);
}
inline ::pb::TActSpringFestivalPackageInfo* TActSpringFestivalPackageGetInfoRsp::mutable_arrinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActSpringFestivalPackageGetInfoRsp.ArrInfo)
  return arrinfo_.Mutable(index);
}
inline ::pb::TActSpringFestivalPackageInfo* TActSpringFestivalPackageGetInfoRsp::add_arrinfo() {
  // @@protoc_insertion_point(field_add:pb.TActSpringFestivalPackageGetInfoRsp.ArrInfo)
  return arrinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActSpringFestivalPackageInfo >&
TActSpringFestivalPackageGetInfoRsp::arrinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActSpringFestivalPackageGetInfoRsp.ArrInfo)
  return arrinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActSpringFestivalPackageInfo >*
TActSpringFestivalPackageGetInfoRsp::mutable_arrinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActSpringFestivalPackageGetInfoRsp.ArrInfo)
  return &arrinfo_;
}

// -------------------------------------------------------------------

// TActSpringFestivalPackageNotify

// repeated .pb.TActSpringFestivalPackageInfo ArrInfo = 1;
inline int TActSpringFestivalPackageNotify::arrinfo_size() const {
  return arrinfo_.size();
}
inline void TActSpringFestivalPackageNotify::clear_arrinfo() {
  arrinfo_.Clear();
}
inline const ::pb::TActSpringFestivalPackageInfo& TActSpringFestivalPackageNotify::arrinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActSpringFestivalPackageNotify.ArrInfo)
  return arrinfo_.Get(index);
}
inline ::pb::TActSpringFestivalPackageInfo* TActSpringFestivalPackageNotify::mutable_arrinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActSpringFestivalPackageNotify.ArrInfo)
  return arrinfo_.Mutable(index);
}
inline ::pb::TActSpringFestivalPackageInfo* TActSpringFestivalPackageNotify::add_arrinfo() {
  // @@protoc_insertion_point(field_add:pb.TActSpringFestivalPackageNotify.ArrInfo)
  return arrinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActSpringFestivalPackageInfo >&
TActSpringFestivalPackageNotify::arrinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActSpringFestivalPackageNotify.ArrInfo)
  return arrinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActSpringFestivalPackageInfo >*
TActSpringFestivalPackageNotify::mutable_arrinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActSpringFestivalPackageNotify.ArrInfo)
  return &arrinfo_;
}

// -------------------------------------------------------------------

// TActSpringFestivalPackageBuyGiftReq

// optional uint32 Id = 1;
inline bool TActSpringFestivalPackageBuyGiftReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActSpringFestivalPackageBuyGiftReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActSpringFestivalPackageBuyGiftReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActSpringFestivalPackageBuyGiftReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActSpringFestivalPackageBuyGiftReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TActSpringFestivalPackageBuyGiftReq.Id)
  return id_;
}
inline void TActSpringFestivalPackageBuyGiftReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActSpringFestivalPackageBuyGiftReq.Id)
}

// optional uint32 BuyNum = 2;
inline bool TActSpringFestivalPackageBuyGiftReq::has_buynum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActSpringFestivalPackageBuyGiftReq::set_has_buynum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActSpringFestivalPackageBuyGiftReq::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActSpringFestivalPackageBuyGiftReq::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 TActSpringFestivalPackageBuyGiftReq::buynum() const {
  // @@protoc_insertion_point(field_get:pb.TActSpringFestivalPackageBuyGiftReq.BuyNum)
  return buynum_;
}
inline void TActSpringFestivalPackageBuyGiftReq::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActSpringFestivalPackageBuyGiftReq.BuyNum)
}

// -------------------------------------------------------------------

// TActSpringFestivalPackageBuyGiftRsp

// repeated .pb.TCommonReward ArrReward = 1;
inline int TActSpringFestivalPackageBuyGiftRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TActSpringFestivalPackageBuyGiftRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TActSpringFestivalPackageBuyGiftRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActSpringFestivalPackageBuyGiftRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TActSpringFestivalPackageBuyGiftRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActSpringFestivalPackageBuyGiftRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TActSpringFestivalPackageBuyGiftRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TActSpringFestivalPackageBuyGiftRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActSpringFestivalPackageBuyGiftRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TActSpringFestivalPackageBuyGiftRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActSpringFestivalPackageBuyGiftRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActSpringFestivalPackageBuyGiftRsp.ArrReward)
  return &arrreward_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActSpringFestivalPackage_2eproto__INCLUDED
