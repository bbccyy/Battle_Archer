// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Outsmart.proto

#ifndef PROTOBUF_net_2fOutsmart_2eproto__INCLUDED
#define PROTOBUF_net_2fOutsmart_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/Battle.pb.h"
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fOutsmart_2eproto();
void protobuf_AssignDesc_net_2fOutsmart_2eproto();
void protobuf_ShutdownFile_net_2fOutsmart_2eproto();

class TOutsmartHidPosInfo;
class TOutsmartFmtInfo;
class TOutsmartSiteInfo;
class TOutsmartGetInfoRsp;
class TOutsmartSetFormationReq;
class TOutsmartGetBattleArgsReq;
class TOutsmartGetBattleArgsRsp;
class TOutsmartReportBattleReq;
class TOutsmartReportBattleRsp;
class TOutsmartChooseBuffReq;
class TOutsmartBuyChallengeNumReq;
class TOutsmartReceiveSettleRewardRsp;
class TOutsmartGarrisonReq;
class TOutsmartSweepReq;
class TOutsmartSweepRsp;
class TOutsmartGarrisonInfo;
class TOutsmartOneKeyGarrisonReq;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TOutsmartHidPosInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Outsmart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TOutsmartHidPosInfo : public ::google::protobuf::Message {
 public:
  TOutsmartHidPosInfo();
  virtual ~TOutsmartHidPosInfo();

  TOutsmartHidPosInfo(const TOutsmartHidPosInfo& from);

  inline TOutsmartHidPosInfo& operator=(const TOutsmartHidPosInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TOutsmartHidPosInfo& default_instance();

  void Swap(TOutsmartHidPosInfo* other);

  // implements Message ----------------------------------------------

  TOutsmartHidPosInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TOutsmartHidPosInfo& from);
  void MergeFrom(const TOutsmartHidPosInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartHidPosInfo</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint32 Pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartHidPosInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TOutsmartHidPosInfo)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 pos_;
  friend void  protobuf_AddDesc_net_2fOutsmart_2eproto();
  friend void protobuf_AssignDesc_net_2fOutsmart_2eproto();
  friend void protobuf_ShutdownFile_net_2fOutsmart_2eproto();

  void InitAsDefaultInstance();
  static TOutsmartHidPosInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TOutsmartFmtInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Outsmart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TOutsmartFmtInfo : public ::google::protobuf::Message {
 public:
  TOutsmartFmtInfo();
  virtual ~TOutsmartFmtInfo();

  TOutsmartFmtInfo(const TOutsmartFmtInfo& from);

  inline TOutsmartFmtInfo& operator=(const TOutsmartFmtInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TOutsmartFmtInfo& default_instance();

  void Swap(TOutsmartFmtInfo* other);

  // implements Message ----------------------------------------------

  TOutsmartFmtInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TOutsmartFmtInfo& from);
  void MergeFrom(const TOutsmartFmtInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FormationId = 1;
  inline bool has_formationid() const;
  inline void clear_formationid();
  static const int kFormationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartFmtInfo</name>
  	<Function>
  		<name>formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 formationid() const;
  inline void set_formationid(::google::protobuf::uint32 value);

  // repeated .pb.TOutsmartHidPosInfo HidPosArr = 2;
  inline int hidposarr_size() const;
  inline void clear_hidposarr();
  static const int kHidPosArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartFmtInfo</name>
  	<Function>
  		<name>hidposarr</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_hidposarr</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_hidposarr</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hidposarr</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>hidposarr_size</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TOutsmartHidPosInfo& hidposarr(int index) const;
  inline ::pb::TOutsmartHidPosInfo* mutable_hidposarr(int index);
  inline ::pb::TOutsmartHidPosInfo* add_hidposarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartHidPosInfo >&
      hidposarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartHidPosInfo >*
      mutable_hidposarr();

  // @@protoc_insertion_point(class_scope:pb.TOutsmartFmtInfo)
 private:
  inline void set_has_formationid();
  inline void clear_has_formationid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartHidPosInfo > hidposarr_;
  ::google::protobuf::uint32 formationid_;
  friend void  protobuf_AddDesc_net_2fOutsmart_2eproto();
  friend void protobuf_AssignDesc_net_2fOutsmart_2eproto();
  friend void protobuf_ShutdownFile_net_2fOutsmart_2eproto();

  void InitAsDefaultInstance();
  static TOutsmartFmtInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TOutsmartSiteInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Outsmart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TOutsmartSiteInfo : public ::google::protobuf::Message {
 public:
  TOutsmartSiteInfo();
  virtual ~TOutsmartSiteInfo();

  TOutsmartSiteInfo(const TOutsmartSiteInfo& from);

  inline TOutsmartSiteInfo& operator=(const TOutsmartSiteInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TOutsmartSiteInfo& default_instance();

  void Swap(TOutsmartSiteInfo* other);

  // implements Message ----------------------------------------------

  TOutsmartSiteInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TOutsmartSiteInfo& from);
  void MergeFrom(const TOutsmartSiteInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SiteId = 1;
  inline bool has_siteid() const;
  inline void clear_siteid();
  static const int kSiteIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartSiteInfo</name>
  	<Function>
  		<name>siteid</name>
  		<replaceName>SiteId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_siteid</name>
  		<replaceName>SiteId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_siteid</name>
  		<replaceName>SiteId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 siteid() const;
  inline void set_siteid(::google::protobuf::uint32 value);

  // repeated uint32 MonsterId = 2;
  inline int monsterid_size() const;
  inline void clear_monsterid();
  static const int kMonsterIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartSiteInfo</name>
  	<Function>
  		<name>monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>monsterid_size</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 monsterid(int index) const;
  inline void set_monsterid(int index, ::google::protobuf::uint32 value);
  inline void add_monsterid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      monsterid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_monsterid();

  // optional uint32 BuffId = 3;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartSiteInfo</name>
  	<Function>
  		<name>buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buffid() const;
  inline void set_buffid(::google::protobuf::uint32 value);

  // optional uint64 FirstPassTime = 4;
  inline bool has_firstpasstime() const;
  inline void clear_firstpasstime();
  static const int kFirstPassTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartSiteInfo</name>
  	<Function>
  		<name>firstpasstime</name>
  		<replaceName>FirstPassTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_firstpasstime</name>
  		<replaceName>FirstPassTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_firstpasstime</name>
  		<replaceName>FirstPassTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 firstpasstime() const;
  inline void set_firstpasstime(::google::protobuf::uint64 value);

  // repeated uint32 BuffIdArr = 5;
  inline int buffidarr_size() const;
  inline void clear_buffidarr();
  static const int kBuffIdArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartSiteInfo</name>
  	<Function>
  		<name>buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buffidarr_size</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buffidarr(int index) const;
  inline void set_buffidarr(int index, ::google::protobuf::uint32 value);
  inline void add_buffidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      buffidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_buffidarr();

  // optional uint32 Hid = 6;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartSiteInfo</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint32 FailNum = 7;
  inline bool has_failnum() const;
  inline void clear_failnum();
  static const int kFailNumFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartSiteInfo</name>
  	<Function>
  		<name>failnum</name>
  		<replaceName>FailNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_failnum</name>
  		<replaceName>FailNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_failnum</name>
  		<replaceName>FailNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 failnum() const;
  inline void set_failnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TOutsmartSiteInfo)
 private:
  inline void set_has_siteid();
  inline void clear_has_siteid();
  inline void set_has_buffid();
  inline void clear_has_buffid();
  inline void set_has_firstpasstime();
  inline void clear_has_firstpasstime();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_failnum();
  inline void clear_has_failnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > monsterid_;
  ::google::protobuf::uint32 siteid_;
  ::google::protobuf::uint32 buffid_;
  ::google::protobuf::uint64 firstpasstime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > buffidarr_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 failnum_;
  friend void  protobuf_AddDesc_net_2fOutsmart_2eproto();
  friend void protobuf_AssignDesc_net_2fOutsmart_2eproto();
  friend void protobuf_ShutdownFile_net_2fOutsmart_2eproto();

  void InitAsDefaultInstance();
  static TOutsmartSiteInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TOutsmartGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Outsmart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TOutsmartGetInfoRsp : public ::google::protobuf::Message {
 public:
  TOutsmartGetInfoRsp();
  virtual ~TOutsmartGetInfoRsp();

  TOutsmartGetInfoRsp(const TOutsmartGetInfoRsp& from);

  inline TOutsmartGetInfoRsp& operator=(const TOutsmartGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TOutsmartGetInfoRsp& default_instance();

  void Swap(TOutsmartGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TOutsmartGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TOutsmartGetInfoRsp& from);
  void MergeFrom(const TOutsmartGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ChallengeNum = 1;
  inline bool has_challengenum() const;
  inline void clear_challengenum();
  static const int kChallengeNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartGetInfoRsp</name>
  	<Function>
  		<name>challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 challengenum() const;
  inline void set_challengenum(::google::protobuf::uint32 value);

  // optional uint32 BuyChallengeNum = 2;
  inline bool has_buychallengenum() const;
  inline void clear_buychallengenum();
  static const int kBuyChallengeNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartGetInfoRsp</name>
  	<Function>
  		<name>buychallengenum</name>
  		<replaceName>BuyChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buychallengenum</name>
  		<replaceName>BuyChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buychallengenum</name>
  		<replaceName>BuyChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buychallengenum() const;
  inline void set_buychallengenum(::google::protobuf::uint32 value);

  // optional uint64 RefreshTime = 3;
  inline bool has_refreshtime() const;
  inline void clear_refreshtime();
  static const int kRefreshTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartGetInfoRsp</name>
  	<Function>
  		<name>refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 refreshtime() const;
  inline void set_refreshtime(::google::protobuf::uint64 value);

  // repeated .pb.TOutsmartFmtInfo FmtArr = 4;
  inline int fmtarr_size() const;
  inline void clear_fmtarr();
  static const int kFmtArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartGetInfoRsp</name>
  	<Function>
  		<name>fmtarr</name>
  		<replaceName>FmtArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_fmtarr</name>
  		<replaceName>FmtArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_fmtarr</name>
  		<replaceName>FmtArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fmtarr</name>
  		<replaceName>FmtArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>fmtarr_size</name>
  		<replaceName>FmtArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TOutsmartFmtInfo& fmtarr(int index) const;
  inline ::pb::TOutsmartFmtInfo* mutable_fmtarr(int index);
  inline ::pb::TOutsmartFmtInfo* add_fmtarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartFmtInfo >&
      fmtarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartFmtInfo >*
      mutable_fmtarr();

  // repeated .pb.TOutsmartSiteInfo SiteInfoArr = 5;
  inline int siteinfoarr_size() const;
  inline void clear_siteinfoarr();
  static const int kSiteInfoArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartGetInfoRsp</name>
  	<Function>
  		<name>siteinfoarr</name>
  		<replaceName>SiteInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_siteinfoarr</name>
  		<replaceName>SiteInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_siteinfoarr</name>
  		<replaceName>SiteInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_siteinfoarr</name>
  		<replaceName>SiteInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>siteinfoarr_size</name>
  		<replaceName>SiteInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TOutsmartSiteInfo& siteinfoarr(int index) const;
  inline ::pb::TOutsmartSiteInfo* mutable_siteinfoarr(int index);
  inline ::pb::TOutsmartSiteInfo* add_siteinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartSiteInfo >&
      siteinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartSiteInfo >*
      mutable_siteinfoarr();

  // repeated uint32 BuffIdArr = 6;
  inline int buffidarr_size() const;
  inline void clear_buffidarr();
  static const int kBuffIdArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartGetInfoRsp</name>
  	<Function>
  		<name>buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buffidarr_size</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buffidarr(int index) const;
  inline void set_buffidarr(int index, ::google::protobuf::uint32 value);
  inline void add_buffidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      buffidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_buffidarr();

  // optional uint32 RewardId = 7;
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardIdFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartGetInfoRsp</name>
  	<Function>
  		<name>rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardid() const;
  inline void set_rewardid(::google::protobuf::uint32 value);

  // optional uint64 SettleTime = 8;
  inline bool has_settletime() const;
  inline void clear_settletime();
  static const int kSettleTimeFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartGetInfoRsp</name>
  	<Function>
  		<name>settletime</name>
  		<replaceName>SettleTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_settletime</name>
  		<replaceName>SettleTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_settletime</name>
  		<replaceName>SettleTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 settletime() const;
  inline void set_settletime(::google::protobuf::uint64 value);

  // repeated .pb.TCommonReward RewardArr = 9;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartGetInfoRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TOutsmartGetInfoRsp)
 private:
  inline void set_has_challengenum();
  inline void clear_has_challengenum();
  inline void set_has_buychallengenum();
  inline void clear_has_buychallengenum();
  inline void set_has_refreshtime();
  inline void clear_has_refreshtime();
  inline void set_has_rewardid();
  inline void clear_has_rewardid();
  inline void set_has_settletime();
  inline void clear_has_settletime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 challengenum_;
  ::google::protobuf::uint32 buychallengenum_;
  ::google::protobuf::uint64 refreshtime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartFmtInfo > fmtarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartSiteInfo > siteinfoarr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > buffidarr_;
  ::google::protobuf::uint64 settletime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::uint32 rewardid_;
  friend void  protobuf_AddDesc_net_2fOutsmart_2eproto();
  friend void protobuf_AssignDesc_net_2fOutsmart_2eproto();
  friend void protobuf_ShutdownFile_net_2fOutsmart_2eproto();

  void InitAsDefaultInstance();
  static TOutsmartGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TOutsmartSetFormationReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Outsmart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TOutsmartSetFormationReq : public ::google::protobuf::Message {
 public:
  TOutsmartSetFormationReq();
  virtual ~TOutsmartSetFormationReq();

  TOutsmartSetFormationReq(const TOutsmartSetFormationReq& from);

  inline TOutsmartSetFormationReq& operator=(const TOutsmartSetFormationReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TOutsmartSetFormationReq& default_instance();

  void Swap(TOutsmartSetFormationReq* other);

  // implements Message ----------------------------------------------

  TOutsmartSetFormationReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TOutsmartSetFormationReq& from);
  void MergeFrom(const TOutsmartSetFormationReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TOutsmartFmtInfo FormationArr = 1;
  inline int formationarr_size() const;
  inline void clear_formationarr();
  static const int kFormationArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartSetFormationReq</name>
  	<Function>
  		<name>formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>formationarr_size</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TOutsmartFmtInfo& formationarr(int index) const;
  inline ::pb::TOutsmartFmtInfo* mutable_formationarr(int index);
  inline ::pb::TOutsmartFmtInfo* add_formationarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartFmtInfo >&
      formationarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartFmtInfo >*
      mutable_formationarr();

  // @@protoc_insertion_point(class_scope:pb.TOutsmartSetFormationReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartFmtInfo > formationarr_;
  friend void  protobuf_AddDesc_net_2fOutsmart_2eproto();
  friend void protobuf_AssignDesc_net_2fOutsmart_2eproto();
  friend void protobuf_ShutdownFile_net_2fOutsmart_2eproto();

  void InitAsDefaultInstance();
  static TOutsmartSetFormationReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TOutsmartGetBattleArgsReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Outsmart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TOutsmartGetBattleArgsReq : public ::google::protobuf::Message {
 public:
  TOutsmartGetBattleArgsReq();
  virtual ~TOutsmartGetBattleArgsReq();

  TOutsmartGetBattleArgsReq(const TOutsmartGetBattleArgsReq& from);

  inline TOutsmartGetBattleArgsReq& operator=(const TOutsmartGetBattleArgsReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TOutsmartGetBattleArgsReq& default_instance();

  void Swap(TOutsmartGetBattleArgsReq* other);

  // implements Message ----------------------------------------------

  TOutsmartGetBattleArgsReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TOutsmartGetBattleArgsReq& from);
  void MergeFrom(const TOutsmartGetBattleArgsReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartGetBattleArgsReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 RefreshTime = 2;
  inline bool has_refreshtime() const;
  inline void clear_refreshtime();
  static const int kRefreshTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartGetBattleArgsReq</name>
  	<Function>
  		<name>refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 refreshtime() const;
  inline void set_refreshtime(::google::protobuf::uint64 value);

  // optional .pb.TBattleCheckParam BattleCheckParam = 3;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartGetBattleArgsReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // @@protoc_insertion_point(class_scope:pb.TOutsmartGetBattleArgsReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_refreshtime();
  inline void clear_has_refreshtime();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 refreshtime_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fOutsmart_2eproto();
  friend void protobuf_AssignDesc_net_2fOutsmart_2eproto();
  friend void protobuf_ShutdownFile_net_2fOutsmart_2eproto();

  void InitAsDefaultInstance();
  static TOutsmartGetBattleArgsReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TOutsmartGetBattleArgsRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Outsmart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TOutsmartGetBattleArgsRsp : public ::google::protobuf::Message {
 public:
  TOutsmartGetBattleArgsRsp();
  virtual ~TOutsmartGetBattleArgsRsp();

  TOutsmartGetBattleArgsRsp(const TOutsmartGetBattleArgsRsp& from);

  inline TOutsmartGetBattleArgsRsp& operator=(const TOutsmartGetBattleArgsRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TOutsmartGetBattleArgsRsp& default_instance();

  void Swap(TOutsmartGetBattleArgsRsp* other);

  // implements Message ----------------------------------------------

  TOutsmartGetBattleArgsRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TOutsmartGetBattleArgsRsp& from);
  void MergeFrom(const TOutsmartGetBattleArgsRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBattleArgs BattleArgsArr = 1;
  inline int battleargsarr_size() const;
  inline void clear_battleargsarr();
  static const int kBattleArgsArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartGetBattleArgsRsp</name>
  	<Function>
  		<name>battleargsarr</name>
  		<replaceName>BattleArgsArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_battleargsarr</name>
  		<replaceName>BattleArgsArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_battleargsarr</name>
  		<replaceName>BattleArgsArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargsarr</name>
  		<replaceName>BattleArgsArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>battleargsarr_size</name>
  		<replaceName>BattleArgsArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& battleargsarr(int index) const;
  inline ::pb::TBattleArgs* mutable_battleargsarr(int index);
  inline ::pb::TBattleArgs* add_battleargsarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBattleArgs >&
      battleargsarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBattleArgs >*
      mutable_battleargsarr();

  // @@protoc_insertion_point(class_scope:pb.TOutsmartGetBattleArgsRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBattleArgs > battleargsarr_;
  friend void  protobuf_AddDesc_net_2fOutsmart_2eproto();
  friend void protobuf_AssignDesc_net_2fOutsmart_2eproto();
  friend void protobuf_ShutdownFile_net_2fOutsmart_2eproto();

  void InitAsDefaultInstance();
  static TOutsmartGetBattleArgsRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TOutsmartReportBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Outsmart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TOutsmartReportBattleReq : public ::google::protobuf::Message {
 public:
  TOutsmartReportBattleReq();
  virtual ~TOutsmartReportBattleReq();

  TOutsmartReportBattleReq(const TOutsmartReportBattleReq& from);

  inline TOutsmartReportBattleReq& operator=(const TOutsmartReportBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TOutsmartReportBattleReq& default_instance();

  void Swap(TOutsmartReportBattleReq* other);

  // implements Message ----------------------------------------------

  TOutsmartReportBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TOutsmartReportBattleReq& from);
  void MergeFrom(const TOutsmartReportBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartReportBattleReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 RefreshTime = 2;
  inline bool has_refreshtime() const;
  inline void clear_refreshtime();
  static const int kRefreshTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartReportBattleReq</name>
  	<Function>
  		<name>refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 refreshtime() const;
  inline void set_refreshtime(::google::protobuf::uint64 value);

  // repeated bytes BattleRetArr = 3;
  inline int battleretarr_size() const;
  inline void clear_battleretarr();
  static const int kBattleRetArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartReportBattleReq</name>
  	<Function>
  		<name>battleretarr</name>
  		<replaceName>BattleRetArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_battleretarr</name>
  		<replaceName>BattleRetArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_battleretarr</name>
  		<replaceName>BattleRetArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleretarr</name>
  		<replaceName>BattleRetArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>battleretarr_size</name>
  		<replaceName>BattleRetArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleretarr(int index) const;
  inline ::std::string* mutable_battleretarr(int index);
  inline void set_battleretarr(int index, const ::std::string& value);
  inline void set_battleretarr(int index, const char* value);
  inline void set_battleretarr(int index, const void* value, size_t size);
  inline ::std::string* add_battleretarr();
  inline void add_battleretarr(const ::std::string& value);
  inline void add_battleretarr(const char* value);
  inline void add_battleretarr(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& battleretarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_battleretarr();

  // @@protoc_insertion_point(class_scope:pb.TOutsmartReportBattleReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_refreshtime();
  inline void clear_has_refreshtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 refreshtime_;
  ::google::protobuf::RepeatedPtrField< ::std::string> battleretarr_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fOutsmart_2eproto();
  friend void protobuf_AssignDesc_net_2fOutsmart_2eproto();
  friend void protobuf_ShutdownFile_net_2fOutsmart_2eproto();

  void InitAsDefaultInstance();
  static TOutsmartReportBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TOutsmartReportBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Outsmart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TOutsmartReportBattleRsp : public ::google::protobuf::Message {
 public:
  TOutsmartReportBattleRsp();
  virtual ~TOutsmartReportBattleRsp();

  TOutsmartReportBattleRsp(const TOutsmartReportBattleRsp& from);

  inline TOutsmartReportBattleRsp& operator=(const TOutsmartReportBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TOutsmartReportBattleRsp& default_instance();

  void Swap(TOutsmartReportBattleRsp* other);

  // implements Message ----------------------------------------------

  TOutsmartReportBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TOutsmartReportBattleRsp& from);
  void MergeFrom(const TOutsmartReportBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsWin = 1;
  inline bool has_iswin() const;
  inline void clear_iswin();
  static const int kIsWinFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartReportBattleRsp</name>
  	<Function>
  		<name>iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool iswin() const;
  inline void set_iswin(bool value);

  // optional bool IsFirst = 2;
  inline bool has_isfirst() const;
  inline void clear_isfirst();
  static const int kIsFirstFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartReportBattleRsp</name>
  	<Function>
  		<name>isfirst</name>
  		<replaceName>IsFirst</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isfirst</name>
  		<replaceName>IsFirst</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isfirst</name>
  		<replaceName>IsFirst</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isfirst() const;
  inline void set_isfirst(bool value);

  // repeated .pb.TCommonReward RewardArr = 3;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartReportBattleRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // repeated uint32 BuffIdArr = 4;
  inline int buffidarr_size() const;
  inline void clear_buffidarr();
  static const int kBuffIdArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartReportBattleRsp</name>
  	<Function>
  		<name>buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buffidarr_size</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buffidarr(int index) const;
  inline void set_buffidarr(int index, ::google::protobuf::uint32 value);
  inline void add_buffidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      buffidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_buffidarr();

  // @@protoc_insertion_point(class_scope:pb.TOutsmartReportBattleRsp)
 private:
  inline void set_has_iswin();
  inline void clear_has_iswin();
  inline void set_has_isfirst();
  inline void clear_has_isfirst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > buffidarr_;
  bool iswin_;
  bool isfirst_;
  friend void  protobuf_AddDesc_net_2fOutsmart_2eproto();
  friend void protobuf_AssignDesc_net_2fOutsmart_2eproto();
  friend void protobuf_ShutdownFile_net_2fOutsmart_2eproto();

  void InitAsDefaultInstance();
  static TOutsmartReportBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TOutsmartChooseBuffReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Outsmart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TOutsmartChooseBuffReq : public ::google::protobuf::Message {
 public:
  TOutsmartChooseBuffReq();
  virtual ~TOutsmartChooseBuffReq();

  TOutsmartChooseBuffReq(const TOutsmartChooseBuffReq& from);

  inline TOutsmartChooseBuffReq& operator=(const TOutsmartChooseBuffReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TOutsmartChooseBuffReq& default_instance();

  void Swap(TOutsmartChooseBuffReq* other);

  // implements Message ----------------------------------------------

  TOutsmartChooseBuffReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TOutsmartChooseBuffReq& from);
  void MergeFrom(const TOutsmartChooseBuffReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartChooseBuffReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 RefreshTime = 2;
  inline bool has_refreshtime() const;
  inline void clear_refreshtime();
  static const int kRefreshTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartChooseBuffReq</name>
  	<Function>
  		<name>refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 refreshtime() const;
  inline void set_refreshtime(::google::protobuf::uint64 value);

  // optional uint32 BuffId = 3;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartChooseBuffReq</name>
  	<Function>
  		<name>buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buffid() const;
  inline void set_buffid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TOutsmartChooseBuffReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_refreshtime();
  inline void clear_has_refreshtime();
  inline void set_has_buffid();
  inline void clear_has_buffid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 refreshtime_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 buffid_;
  friend void  protobuf_AddDesc_net_2fOutsmart_2eproto();
  friend void protobuf_AssignDesc_net_2fOutsmart_2eproto();
  friend void protobuf_ShutdownFile_net_2fOutsmart_2eproto();

  void InitAsDefaultInstance();
  static TOutsmartChooseBuffReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TOutsmartBuyChallengeNumReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Outsmart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TOutsmartBuyChallengeNumReq : public ::google::protobuf::Message {
 public:
  TOutsmartBuyChallengeNumReq();
  virtual ~TOutsmartBuyChallengeNumReq();

  TOutsmartBuyChallengeNumReq(const TOutsmartBuyChallengeNumReq& from);

  inline TOutsmartBuyChallengeNumReq& operator=(const TOutsmartBuyChallengeNumReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TOutsmartBuyChallengeNumReq& default_instance();

  void Swap(TOutsmartBuyChallengeNumReq* other);

  // implements Message ----------------------------------------------

  TOutsmartBuyChallengeNumReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TOutsmartBuyChallengeNumReq& from);
  void MergeFrom(const TOutsmartBuyChallengeNumReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartBuyChallengeNumReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TOutsmartBuyChallengeNumReq)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fOutsmart_2eproto();
  friend void protobuf_AssignDesc_net_2fOutsmart_2eproto();
  friend void protobuf_ShutdownFile_net_2fOutsmart_2eproto();

  void InitAsDefaultInstance();
  static TOutsmartBuyChallengeNumReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TOutsmartReceiveSettleRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Outsmart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TOutsmartReceiveSettleRewardRsp : public ::google::protobuf::Message {
 public:
  TOutsmartReceiveSettleRewardRsp();
  virtual ~TOutsmartReceiveSettleRewardRsp();

  TOutsmartReceiveSettleRewardRsp(const TOutsmartReceiveSettleRewardRsp& from);

  inline TOutsmartReceiveSettleRewardRsp& operator=(const TOutsmartReceiveSettleRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TOutsmartReceiveSettleRewardRsp& default_instance();

  void Swap(TOutsmartReceiveSettleRewardRsp* other);

  // implements Message ----------------------------------------------

  TOutsmartReceiveSettleRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TOutsmartReceiveSettleRewardRsp& from);
  void MergeFrom(const TOutsmartReceiveSettleRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartReceiveSettleRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TOutsmartReceiveSettleRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fOutsmart_2eproto();
  friend void protobuf_AssignDesc_net_2fOutsmart_2eproto();
  friend void protobuf_ShutdownFile_net_2fOutsmart_2eproto();

  void InitAsDefaultInstance();
  static TOutsmartReceiveSettleRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TOutsmartGarrisonReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Outsmart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TOutsmartGarrisonReq : public ::google::protobuf::Message {
 public:
  TOutsmartGarrisonReq();
  virtual ~TOutsmartGarrisonReq();

  TOutsmartGarrisonReq(const TOutsmartGarrisonReq& from);

  inline TOutsmartGarrisonReq& operator=(const TOutsmartGarrisonReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TOutsmartGarrisonReq& default_instance();

  void Swap(TOutsmartGarrisonReq* other);

  // implements Message ----------------------------------------------

  TOutsmartGarrisonReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TOutsmartGarrisonReq& from);
  void MergeFrom(const TOutsmartGarrisonReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartGarrisonReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 Hid = 2;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartGarrisonReq</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint32 OriId = 3;
  inline bool has_oriid() const;
  inline void clear_oriid();
  static const int kOriIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartGarrisonReq</name>
  	<Function>
  		<name>oriid</name>
  		<replaceName>OriId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_oriid</name>
  		<replaceName>OriId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_oriid</name>
  		<replaceName>OriId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 oriid() const;
  inline void set_oriid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TOutsmartGarrisonReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_oriid();
  inline void clear_has_oriid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 oriid_;
  friend void  protobuf_AddDesc_net_2fOutsmart_2eproto();
  friend void protobuf_AssignDesc_net_2fOutsmart_2eproto();
  friend void protobuf_ShutdownFile_net_2fOutsmart_2eproto();

  void InitAsDefaultInstance();
  static TOutsmartGarrisonReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TOutsmartSweepReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Outsmart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TOutsmartSweepReq : public ::google::protobuf::Message {
 public:
  TOutsmartSweepReq();
  virtual ~TOutsmartSweepReq();

  TOutsmartSweepReq(const TOutsmartSweepReq& from);

  inline TOutsmartSweepReq& operator=(const TOutsmartSweepReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TOutsmartSweepReq& default_instance();

  void Swap(TOutsmartSweepReq* other);

  // implements Message ----------------------------------------------

  TOutsmartSweepReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TOutsmartSweepReq& from);
  void MergeFrom(const TOutsmartSweepReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartSweepReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 RefreshTime = 2;
  inline bool has_refreshtime() const;
  inline void clear_refreshtime();
  static const int kRefreshTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartSweepReq</name>
  	<Function>
  		<name>refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 refreshtime() const;
  inline void set_refreshtime(::google::protobuf::uint64 value);

  // optional uint32 SwType = 3;
  inline bool has_swtype() const;
  inline void clear_swtype();
  static const int kSwTypeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartSweepReq</name>
  	<Function>
  		<name>swtype</name>
  		<replaceName>SwType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_swtype</name>
  		<replaceName>SwType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_swtype</name>
  		<replaceName>SwType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 swtype() const;
  inline void set_swtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TOutsmartSweepReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_refreshtime();
  inline void clear_has_refreshtime();
  inline void set_has_swtype();
  inline void clear_has_swtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 refreshtime_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 swtype_;
  friend void  protobuf_AddDesc_net_2fOutsmart_2eproto();
  friend void protobuf_AssignDesc_net_2fOutsmart_2eproto();
  friend void protobuf_ShutdownFile_net_2fOutsmart_2eproto();

  void InitAsDefaultInstance();
  static TOutsmartSweepReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TOutsmartSweepRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Outsmart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TOutsmartSweepRsp : public ::google::protobuf::Message {
 public:
  TOutsmartSweepRsp();
  virtual ~TOutsmartSweepRsp();

  TOutsmartSweepRsp(const TOutsmartSweepRsp& from);

  inline TOutsmartSweepRsp& operator=(const TOutsmartSweepRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TOutsmartSweepRsp& default_instance();

  void Swap(TOutsmartSweepRsp* other);

  // implements Message ----------------------------------------------

  TOutsmartSweepRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TOutsmartSweepRsp& from);
  void MergeFrom(const TOutsmartSweepRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartSweepRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // repeated uint32 BuffIdArr = 2;
  inline int buffidarr_size() const;
  inline void clear_buffidarr();
  static const int kBuffIdArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartSweepRsp</name>
  	<Function>
  		<name>buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffidarr</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buffidarr_size</name>
  		<replaceName>BuffIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buffidarr(int index) const;
  inline void set_buffidarr(int index, ::google::protobuf::uint32 value);
  inline void add_buffidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      buffidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_buffidarr();

  // @@protoc_insertion_point(class_scope:pb.TOutsmartSweepRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > buffidarr_;
  friend void  protobuf_AddDesc_net_2fOutsmart_2eproto();
  friend void protobuf_AssignDesc_net_2fOutsmart_2eproto();
  friend void protobuf_ShutdownFile_net_2fOutsmart_2eproto();

  void InitAsDefaultInstance();
  static TOutsmartSweepRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TOutsmartGarrisonInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Outsmart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TOutsmartGarrisonInfo : public ::google::protobuf::Message {
 public:
  TOutsmartGarrisonInfo();
  virtual ~TOutsmartGarrisonInfo();

  TOutsmartGarrisonInfo(const TOutsmartGarrisonInfo& from);

  inline TOutsmartGarrisonInfo& operator=(const TOutsmartGarrisonInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TOutsmartGarrisonInfo& default_instance();

  void Swap(TOutsmartGarrisonInfo* other);

  // implements Message ----------------------------------------------

  TOutsmartGarrisonInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TOutsmartGarrisonInfo& from);
  void MergeFrom(const TOutsmartGarrisonInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartGarrisonInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 Hid = 2;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartGarrisonInfo</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TOutsmartGarrisonInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_hid();
  inline void clear_has_hid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 hid_;
  friend void  protobuf_AddDesc_net_2fOutsmart_2eproto();
  friend void protobuf_AssignDesc_net_2fOutsmart_2eproto();
  friend void protobuf_ShutdownFile_net_2fOutsmart_2eproto();

  void InitAsDefaultInstance();
  static TOutsmartGarrisonInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TOutsmartOneKeyGarrisonReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Outsmart.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TOutsmartOneKeyGarrisonReq : public ::google::protobuf::Message {
 public:
  TOutsmartOneKeyGarrisonReq();
  virtual ~TOutsmartOneKeyGarrisonReq();

  TOutsmartOneKeyGarrisonReq(const TOutsmartOneKeyGarrisonReq& from);

  inline TOutsmartOneKeyGarrisonReq& operator=(const TOutsmartOneKeyGarrisonReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TOutsmartOneKeyGarrisonReq& default_instance();

  void Swap(TOutsmartOneKeyGarrisonReq* other);

  // implements Message ----------------------------------------------

  TOutsmartOneKeyGarrisonReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TOutsmartOneKeyGarrisonReq& from);
  void MergeFrom(const TOutsmartOneKeyGarrisonReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TOutsmartGarrisonInfo GarrisonInfoArr = 1;
  inline int garrisoninfoarr_size() const;
  inline void clear_garrisoninfoarr();
  static const int kGarrisonInfoArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TOutsmartOneKeyGarrisonReq</name>
  	<Function>
  		<name>garrisoninfoarr</name>
  		<replaceName>GarrisonInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_garrisoninfoarr</name>
  		<replaceName>GarrisonInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_garrisoninfoarr</name>
  		<replaceName>GarrisonInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_garrisoninfoarr</name>
  		<replaceName>GarrisonInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>garrisoninfoarr_size</name>
  		<replaceName>GarrisonInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TOutsmartGarrisonInfo& garrisoninfoarr(int index) const;
  inline ::pb::TOutsmartGarrisonInfo* mutable_garrisoninfoarr(int index);
  inline ::pb::TOutsmartGarrisonInfo* add_garrisoninfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartGarrisonInfo >&
      garrisoninfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartGarrisonInfo >*
      mutable_garrisoninfoarr();

  // @@protoc_insertion_point(class_scope:pb.TOutsmartOneKeyGarrisonReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartGarrisonInfo > garrisoninfoarr_;
  friend void  protobuf_AddDesc_net_2fOutsmart_2eproto();
  friend void protobuf_AssignDesc_net_2fOutsmart_2eproto();
  friend void protobuf_ShutdownFile_net_2fOutsmart_2eproto();

  void InitAsDefaultInstance();
  static TOutsmartOneKeyGarrisonReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TOutsmartHidPosInfo

// optional uint32 Hid = 1;
inline bool TOutsmartHidPosInfo::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TOutsmartHidPosInfo::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TOutsmartHidPosInfo::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TOutsmartHidPosInfo::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TOutsmartHidPosInfo::hid() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartHidPosInfo.Hid)
  return hid_;
}
inline void TOutsmartHidPosInfo::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartHidPosInfo.Hid)
}

// optional uint32 Pos = 2;
inline bool TOutsmartHidPosInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TOutsmartHidPosInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TOutsmartHidPosInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TOutsmartHidPosInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TOutsmartHidPosInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartHidPosInfo.Pos)
  return pos_;
}
inline void TOutsmartHidPosInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartHidPosInfo.Pos)
}

// -------------------------------------------------------------------

// TOutsmartFmtInfo

// optional uint32 FormationId = 1;
inline bool TOutsmartFmtInfo::has_formationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TOutsmartFmtInfo::set_has_formationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TOutsmartFmtInfo::clear_has_formationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TOutsmartFmtInfo::clear_formationid() {
  formationid_ = 0u;
  clear_has_formationid();
}
inline ::google::protobuf::uint32 TOutsmartFmtInfo::formationid() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartFmtInfo.FormationId)
  return formationid_;
}
inline void TOutsmartFmtInfo::set_formationid(::google::protobuf::uint32 value) {
  set_has_formationid();
  formationid_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartFmtInfo.FormationId)
}

// repeated .pb.TOutsmartHidPosInfo HidPosArr = 2;
inline int TOutsmartFmtInfo::hidposarr_size() const {
  return hidposarr_.size();
}
inline void TOutsmartFmtInfo::clear_hidposarr() {
  hidposarr_.Clear();
}
inline const ::pb::TOutsmartHidPosInfo& TOutsmartFmtInfo::hidposarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartFmtInfo.HidPosArr)
  return hidposarr_.Get(index);
}
inline ::pb::TOutsmartHidPosInfo* TOutsmartFmtInfo::mutable_hidposarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TOutsmartFmtInfo.HidPosArr)
  return hidposarr_.Mutable(index);
}
inline ::pb::TOutsmartHidPosInfo* TOutsmartFmtInfo::add_hidposarr() {
  // @@protoc_insertion_point(field_add:pb.TOutsmartFmtInfo.HidPosArr)
  return hidposarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartHidPosInfo >&
TOutsmartFmtInfo::hidposarr() const {
  // @@protoc_insertion_point(field_list:pb.TOutsmartFmtInfo.HidPosArr)
  return hidposarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartHidPosInfo >*
TOutsmartFmtInfo::mutable_hidposarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TOutsmartFmtInfo.HidPosArr)
  return &hidposarr_;
}

// -------------------------------------------------------------------

// TOutsmartSiteInfo

// optional uint32 SiteId = 1;
inline bool TOutsmartSiteInfo::has_siteid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TOutsmartSiteInfo::set_has_siteid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TOutsmartSiteInfo::clear_has_siteid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TOutsmartSiteInfo::clear_siteid() {
  siteid_ = 0u;
  clear_has_siteid();
}
inline ::google::protobuf::uint32 TOutsmartSiteInfo::siteid() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartSiteInfo.SiteId)
  return siteid_;
}
inline void TOutsmartSiteInfo::set_siteid(::google::protobuf::uint32 value) {
  set_has_siteid();
  siteid_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartSiteInfo.SiteId)
}

// repeated uint32 MonsterId = 2;
inline int TOutsmartSiteInfo::monsterid_size() const {
  return monsterid_.size();
}
inline void TOutsmartSiteInfo::clear_monsterid() {
  monsterid_.Clear();
}
inline ::google::protobuf::uint32 TOutsmartSiteInfo::monsterid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartSiteInfo.MonsterId)
  return monsterid_.Get(index);
}
inline void TOutsmartSiteInfo::set_monsterid(int index, ::google::protobuf::uint32 value) {
  monsterid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TOutsmartSiteInfo.MonsterId)
}
inline void TOutsmartSiteInfo::add_monsterid(::google::protobuf::uint32 value) {
  monsterid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TOutsmartSiteInfo.MonsterId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TOutsmartSiteInfo::monsterid() const {
  // @@protoc_insertion_point(field_list:pb.TOutsmartSiteInfo.MonsterId)
  return monsterid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TOutsmartSiteInfo::mutable_monsterid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TOutsmartSiteInfo.MonsterId)
  return &monsterid_;
}

// optional uint32 BuffId = 3;
inline bool TOutsmartSiteInfo::has_buffid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TOutsmartSiteInfo::set_has_buffid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TOutsmartSiteInfo::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TOutsmartSiteInfo::clear_buffid() {
  buffid_ = 0u;
  clear_has_buffid();
}
inline ::google::protobuf::uint32 TOutsmartSiteInfo::buffid() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartSiteInfo.BuffId)
  return buffid_;
}
inline void TOutsmartSiteInfo::set_buffid(::google::protobuf::uint32 value) {
  set_has_buffid();
  buffid_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartSiteInfo.BuffId)
}

// optional uint64 FirstPassTime = 4;
inline bool TOutsmartSiteInfo::has_firstpasstime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TOutsmartSiteInfo::set_has_firstpasstime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TOutsmartSiteInfo::clear_has_firstpasstime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TOutsmartSiteInfo::clear_firstpasstime() {
  firstpasstime_ = GOOGLE_ULONGLONG(0);
  clear_has_firstpasstime();
}
inline ::google::protobuf::uint64 TOutsmartSiteInfo::firstpasstime() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartSiteInfo.FirstPassTime)
  return firstpasstime_;
}
inline void TOutsmartSiteInfo::set_firstpasstime(::google::protobuf::uint64 value) {
  set_has_firstpasstime();
  firstpasstime_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartSiteInfo.FirstPassTime)
}

// repeated uint32 BuffIdArr = 5;
inline int TOutsmartSiteInfo::buffidarr_size() const {
  return buffidarr_.size();
}
inline void TOutsmartSiteInfo::clear_buffidarr() {
  buffidarr_.Clear();
}
inline ::google::protobuf::uint32 TOutsmartSiteInfo::buffidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartSiteInfo.BuffIdArr)
  return buffidarr_.Get(index);
}
inline void TOutsmartSiteInfo::set_buffidarr(int index, ::google::protobuf::uint32 value) {
  buffidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TOutsmartSiteInfo.BuffIdArr)
}
inline void TOutsmartSiteInfo::add_buffidarr(::google::protobuf::uint32 value) {
  buffidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TOutsmartSiteInfo.BuffIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TOutsmartSiteInfo::buffidarr() const {
  // @@protoc_insertion_point(field_list:pb.TOutsmartSiteInfo.BuffIdArr)
  return buffidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TOutsmartSiteInfo::mutable_buffidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TOutsmartSiteInfo.BuffIdArr)
  return &buffidarr_;
}

// optional uint32 Hid = 6;
inline bool TOutsmartSiteInfo::has_hid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TOutsmartSiteInfo::set_has_hid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TOutsmartSiteInfo::clear_has_hid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TOutsmartSiteInfo::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TOutsmartSiteInfo::hid() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartSiteInfo.Hid)
  return hid_;
}
inline void TOutsmartSiteInfo::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartSiteInfo.Hid)
}

// optional uint32 FailNum = 7;
inline bool TOutsmartSiteInfo::has_failnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TOutsmartSiteInfo::set_has_failnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TOutsmartSiteInfo::clear_has_failnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TOutsmartSiteInfo::clear_failnum() {
  failnum_ = 0u;
  clear_has_failnum();
}
inline ::google::protobuf::uint32 TOutsmartSiteInfo::failnum() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartSiteInfo.FailNum)
  return failnum_;
}
inline void TOutsmartSiteInfo::set_failnum(::google::protobuf::uint32 value) {
  set_has_failnum();
  failnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartSiteInfo.FailNum)
}

// -------------------------------------------------------------------

// TOutsmartGetInfoRsp

// optional uint32 ChallengeNum = 1;
inline bool TOutsmartGetInfoRsp::has_challengenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TOutsmartGetInfoRsp::set_has_challengenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TOutsmartGetInfoRsp::clear_has_challengenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TOutsmartGetInfoRsp::clear_challengenum() {
  challengenum_ = 0u;
  clear_has_challengenum();
}
inline ::google::protobuf::uint32 TOutsmartGetInfoRsp::challengenum() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartGetInfoRsp.ChallengeNum)
  return challengenum_;
}
inline void TOutsmartGetInfoRsp::set_challengenum(::google::protobuf::uint32 value) {
  set_has_challengenum();
  challengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartGetInfoRsp.ChallengeNum)
}

// optional uint32 BuyChallengeNum = 2;
inline bool TOutsmartGetInfoRsp::has_buychallengenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TOutsmartGetInfoRsp::set_has_buychallengenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TOutsmartGetInfoRsp::clear_has_buychallengenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TOutsmartGetInfoRsp::clear_buychallengenum() {
  buychallengenum_ = 0u;
  clear_has_buychallengenum();
}
inline ::google::protobuf::uint32 TOutsmartGetInfoRsp::buychallengenum() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartGetInfoRsp.BuyChallengeNum)
  return buychallengenum_;
}
inline void TOutsmartGetInfoRsp::set_buychallengenum(::google::protobuf::uint32 value) {
  set_has_buychallengenum();
  buychallengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartGetInfoRsp.BuyChallengeNum)
}

// optional uint64 RefreshTime = 3;
inline bool TOutsmartGetInfoRsp::has_refreshtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TOutsmartGetInfoRsp::set_has_refreshtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TOutsmartGetInfoRsp::clear_has_refreshtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TOutsmartGetInfoRsp::clear_refreshtime() {
  refreshtime_ = GOOGLE_ULONGLONG(0);
  clear_has_refreshtime();
}
inline ::google::protobuf::uint64 TOutsmartGetInfoRsp::refreshtime() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartGetInfoRsp.RefreshTime)
  return refreshtime_;
}
inline void TOutsmartGetInfoRsp::set_refreshtime(::google::protobuf::uint64 value) {
  set_has_refreshtime();
  refreshtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartGetInfoRsp.RefreshTime)
}

// repeated .pb.TOutsmartFmtInfo FmtArr = 4;
inline int TOutsmartGetInfoRsp::fmtarr_size() const {
  return fmtarr_.size();
}
inline void TOutsmartGetInfoRsp::clear_fmtarr() {
  fmtarr_.Clear();
}
inline const ::pb::TOutsmartFmtInfo& TOutsmartGetInfoRsp::fmtarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartGetInfoRsp.FmtArr)
  return fmtarr_.Get(index);
}
inline ::pb::TOutsmartFmtInfo* TOutsmartGetInfoRsp::mutable_fmtarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TOutsmartGetInfoRsp.FmtArr)
  return fmtarr_.Mutable(index);
}
inline ::pb::TOutsmartFmtInfo* TOutsmartGetInfoRsp::add_fmtarr() {
  // @@protoc_insertion_point(field_add:pb.TOutsmartGetInfoRsp.FmtArr)
  return fmtarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartFmtInfo >&
TOutsmartGetInfoRsp::fmtarr() const {
  // @@protoc_insertion_point(field_list:pb.TOutsmartGetInfoRsp.FmtArr)
  return fmtarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartFmtInfo >*
TOutsmartGetInfoRsp::mutable_fmtarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TOutsmartGetInfoRsp.FmtArr)
  return &fmtarr_;
}

// repeated .pb.TOutsmartSiteInfo SiteInfoArr = 5;
inline int TOutsmartGetInfoRsp::siteinfoarr_size() const {
  return siteinfoarr_.size();
}
inline void TOutsmartGetInfoRsp::clear_siteinfoarr() {
  siteinfoarr_.Clear();
}
inline const ::pb::TOutsmartSiteInfo& TOutsmartGetInfoRsp::siteinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartGetInfoRsp.SiteInfoArr)
  return siteinfoarr_.Get(index);
}
inline ::pb::TOutsmartSiteInfo* TOutsmartGetInfoRsp::mutable_siteinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TOutsmartGetInfoRsp.SiteInfoArr)
  return siteinfoarr_.Mutable(index);
}
inline ::pb::TOutsmartSiteInfo* TOutsmartGetInfoRsp::add_siteinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TOutsmartGetInfoRsp.SiteInfoArr)
  return siteinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartSiteInfo >&
TOutsmartGetInfoRsp::siteinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TOutsmartGetInfoRsp.SiteInfoArr)
  return siteinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartSiteInfo >*
TOutsmartGetInfoRsp::mutable_siteinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TOutsmartGetInfoRsp.SiteInfoArr)
  return &siteinfoarr_;
}

// repeated uint32 BuffIdArr = 6;
inline int TOutsmartGetInfoRsp::buffidarr_size() const {
  return buffidarr_.size();
}
inline void TOutsmartGetInfoRsp::clear_buffidarr() {
  buffidarr_.Clear();
}
inline ::google::protobuf::uint32 TOutsmartGetInfoRsp::buffidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartGetInfoRsp.BuffIdArr)
  return buffidarr_.Get(index);
}
inline void TOutsmartGetInfoRsp::set_buffidarr(int index, ::google::protobuf::uint32 value) {
  buffidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TOutsmartGetInfoRsp.BuffIdArr)
}
inline void TOutsmartGetInfoRsp::add_buffidarr(::google::protobuf::uint32 value) {
  buffidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TOutsmartGetInfoRsp.BuffIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TOutsmartGetInfoRsp::buffidarr() const {
  // @@protoc_insertion_point(field_list:pb.TOutsmartGetInfoRsp.BuffIdArr)
  return buffidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TOutsmartGetInfoRsp::mutable_buffidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TOutsmartGetInfoRsp.BuffIdArr)
  return &buffidarr_;
}

// optional uint32 RewardId = 7;
inline bool TOutsmartGetInfoRsp::has_rewardid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TOutsmartGetInfoRsp::set_has_rewardid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TOutsmartGetInfoRsp::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TOutsmartGetInfoRsp::clear_rewardid() {
  rewardid_ = 0u;
  clear_has_rewardid();
}
inline ::google::protobuf::uint32 TOutsmartGetInfoRsp::rewardid() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartGetInfoRsp.RewardId)
  return rewardid_;
}
inline void TOutsmartGetInfoRsp::set_rewardid(::google::protobuf::uint32 value) {
  set_has_rewardid();
  rewardid_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartGetInfoRsp.RewardId)
}

// optional uint64 SettleTime = 8;
inline bool TOutsmartGetInfoRsp::has_settletime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TOutsmartGetInfoRsp::set_has_settletime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TOutsmartGetInfoRsp::clear_has_settletime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TOutsmartGetInfoRsp::clear_settletime() {
  settletime_ = GOOGLE_ULONGLONG(0);
  clear_has_settletime();
}
inline ::google::protobuf::uint64 TOutsmartGetInfoRsp::settletime() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartGetInfoRsp.SettleTime)
  return settletime_;
}
inline void TOutsmartGetInfoRsp::set_settletime(::google::protobuf::uint64 value) {
  set_has_settletime();
  settletime_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartGetInfoRsp.SettleTime)
}

// repeated .pb.TCommonReward RewardArr = 9;
inline int TOutsmartGetInfoRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TOutsmartGetInfoRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TOutsmartGetInfoRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartGetInfoRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TOutsmartGetInfoRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TOutsmartGetInfoRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TOutsmartGetInfoRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TOutsmartGetInfoRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TOutsmartGetInfoRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TOutsmartGetInfoRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TOutsmartGetInfoRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TOutsmartGetInfoRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TOutsmartSetFormationReq

// repeated .pb.TOutsmartFmtInfo FormationArr = 1;
inline int TOutsmartSetFormationReq::formationarr_size() const {
  return formationarr_.size();
}
inline void TOutsmartSetFormationReq::clear_formationarr() {
  formationarr_.Clear();
}
inline const ::pb::TOutsmartFmtInfo& TOutsmartSetFormationReq::formationarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartSetFormationReq.FormationArr)
  return formationarr_.Get(index);
}
inline ::pb::TOutsmartFmtInfo* TOutsmartSetFormationReq::mutable_formationarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TOutsmartSetFormationReq.FormationArr)
  return formationarr_.Mutable(index);
}
inline ::pb::TOutsmartFmtInfo* TOutsmartSetFormationReq::add_formationarr() {
  // @@protoc_insertion_point(field_add:pb.TOutsmartSetFormationReq.FormationArr)
  return formationarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartFmtInfo >&
TOutsmartSetFormationReq::formationarr() const {
  // @@protoc_insertion_point(field_list:pb.TOutsmartSetFormationReq.FormationArr)
  return formationarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartFmtInfo >*
TOutsmartSetFormationReq::mutable_formationarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TOutsmartSetFormationReq.FormationArr)
  return &formationarr_;
}

// -------------------------------------------------------------------

// TOutsmartGetBattleArgsReq

// optional uint32 Id = 1;
inline bool TOutsmartGetBattleArgsReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TOutsmartGetBattleArgsReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TOutsmartGetBattleArgsReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TOutsmartGetBattleArgsReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TOutsmartGetBattleArgsReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartGetBattleArgsReq.Id)
  return id_;
}
inline void TOutsmartGetBattleArgsReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartGetBattleArgsReq.Id)
}

// optional uint64 RefreshTime = 2;
inline bool TOutsmartGetBattleArgsReq::has_refreshtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TOutsmartGetBattleArgsReq::set_has_refreshtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TOutsmartGetBattleArgsReq::clear_has_refreshtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TOutsmartGetBattleArgsReq::clear_refreshtime() {
  refreshtime_ = GOOGLE_ULONGLONG(0);
  clear_has_refreshtime();
}
inline ::google::protobuf::uint64 TOutsmartGetBattleArgsReq::refreshtime() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartGetBattleArgsReq.RefreshTime)
  return refreshtime_;
}
inline void TOutsmartGetBattleArgsReq::set_refreshtime(::google::protobuf::uint64 value) {
  set_has_refreshtime();
  refreshtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartGetBattleArgsReq.RefreshTime)
}

// optional .pb.TBattleCheckParam BattleCheckParam = 3;
inline bool TOutsmartGetBattleArgsReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TOutsmartGetBattleArgsReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TOutsmartGetBattleArgsReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TOutsmartGetBattleArgsReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TOutsmartGetBattleArgsReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartGetBattleArgsReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TOutsmartGetBattleArgsReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TOutsmartGetBattleArgsReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TOutsmartGetBattleArgsReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TOutsmartGetBattleArgsReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TOutsmartGetBattleArgsReq.BattleCheckParam)
}

// -------------------------------------------------------------------

// TOutsmartGetBattleArgsRsp

// repeated .pb.TBattleArgs BattleArgsArr = 1;
inline int TOutsmartGetBattleArgsRsp::battleargsarr_size() const {
  return battleargsarr_.size();
}
inline void TOutsmartGetBattleArgsRsp::clear_battleargsarr() {
  battleargsarr_.Clear();
}
inline const ::pb::TBattleArgs& TOutsmartGetBattleArgsRsp::battleargsarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartGetBattleArgsRsp.BattleArgsArr)
  return battleargsarr_.Get(index);
}
inline ::pb::TBattleArgs* TOutsmartGetBattleArgsRsp::mutable_battleargsarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TOutsmartGetBattleArgsRsp.BattleArgsArr)
  return battleargsarr_.Mutable(index);
}
inline ::pb::TBattleArgs* TOutsmartGetBattleArgsRsp::add_battleargsarr() {
  // @@protoc_insertion_point(field_add:pb.TOutsmartGetBattleArgsRsp.BattleArgsArr)
  return battleargsarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBattleArgs >&
TOutsmartGetBattleArgsRsp::battleargsarr() const {
  // @@protoc_insertion_point(field_list:pb.TOutsmartGetBattleArgsRsp.BattleArgsArr)
  return battleargsarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBattleArgs >*
TOutsmartGetBattleArgsRsp::mutable_battleargsarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TOutsmartGetBattleArgsRsp.BattleArgsArr)
  return &battleargsarr_;
}

// -------------------------------------------------------------------

// TOutsmartReportBattleReq

// optional uint32 Id = 1;
inline bool TOutsmartReportBattleReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TOutsmartReportBattleReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TOutsmartReportBattleReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TOutsmartReportBattleReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TOutsmartReportBattleReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartReportBattleReq.Id)
  return id_;
}
inline void TOutsmartReportBattleReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartReportBattleReq.Id)
}

// optional uint64 RefreshTime = 2;
inline bool TOutsmartReportBattleReq::has_refreshtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TOutsmartReportBattleReq::set_has_refreshtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TOutsmartReportBattleReq::clear_has_refreshtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TOutsmartReportBattleReq::clear_refreshtime() {
  refreshtime_ = GOOGLE_ULONGLONG(0);
  clear_has_refreshtime();
}
inline ::google::protobuf::uint64 TOutsmartReportBattleReq::refreshtime() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartReportBattleReq.RefreshTime)
  return refreshtime_;
}
inline void TOutsmartReportBattleReq::set_refreshtime(::google::protobuf::uint64 value) {
  set_has_refreshtime();
  refreshtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartReportBattleReq.RefreshTime)
}

// repeated bytes BattleRetArr = 3;
inline int TOutsmartReportBattleReq::battleretarr_size() const {
  return battleretarr_.size();
}
inline void TOutsmartReportBattleReq::clear_battleretarr() {
  battleretarr_.Clear();
}
inline const ::std::string& TOutsmartReportBattleReq::battleretarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartReportBattleReq.BattleRetArr)
  return battleretarr_.Get(index);
}
inline ::std::string* TOutsmartReportBattleReq::mutable_battleretarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TOutsmartReportBattleReq.BattleRetArr)
  return battleretarr_.Mutable(index);
}
inline void TOutsmartReportBattleReq::set_battleretarr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TOutsmartReportBattleReq.BattleRetArr)
  battleretarr_.Mutable(index)->assign(value);
}
inline void TOutsmartReportBattleReq::set_battleretarr(int index, const char* value) {
  battleretarr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TOutsmartReportBattleReq.BattleRetArr)
}
inline void TOutsmartReportBattleReq::set_battleretarr(int index, const void* value, size_t size) {
  battleretarr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TOutsmartReportBattleReq.BattleRetArr)
}
inline ::std::string* TOutsmartReportBattleReq::add_battleretarr() {
  return battleretarr_.Add();
}
inline void TOutsmartReportBattleReq::add_battleretarr(const ::std::string& value) {
  battleretarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TOutsmartReportBattleReq.BattleRetArr)
}
inline void TOutsmartReportBattleReq::add_battleretarr(const char* value) {
  battleretarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TOutsmartReportBattleReq.BattleRetArr)
}
inline void TOutsmartReportBattleReq::add_battleretarr(const void* value, size_t size) {
  battleretarr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TOutsmartReportBattleReq.BattleRetArr)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TOutsmartReportBattleReq::battleretarr() const {
  // @@protoc_insertion_point(field_list:pb.TOutsmartReportBattleReq.BattleRetArr)
  return battleretarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TOutsmartReportBattleReq::mutable_battleretarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TOutsmartReportBattleReq.BattleRetArr)
  return &battleretarr_;
}

// -------------------------------------------------------------------

// TOutsmartReportBattleRsp

// optional bool IsWin = 1;
inline bool TOutsmartReportBattleRsp::has_iswin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TOutsmartReportBattleRsp::set_has_iswin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TOutsmartReportBattleRsp::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TOutsmartReportBattleRsp::clear_iswin() {
  iswin_ = false;
  clear_has_iswin();
}
inline bool TOutsmartReportBattleRsp::iswin() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartReportBattleRsp.IsWin)
  return iswin_;
}
inline void TOutsmartReportBattleRsp::set_iswin(bool value) {
  set_has_iswin();
  iswin_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartReportBattleRsp.IsWin)
}

// optional bool IsFirst = 2;
inline bool TOutsmartReportBattleRsp::has_isfirst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TOutsmartReportBattleRsp::set_has_isfirst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TOutsmartReportBattleRsp::clear_has_isfirst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TOutsmartReportBattleRsp::clear_isfirst() {
  isfirst_ = false;
  clear_has_isfirst();
}
inline bool TOutsmartReportBattleRsp::isfirst() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartReportBattleRsp.IsFirst)
  return isfirst_;
}
inline void TOutsmartReportBattleRsp::set_isfirst(bool value) {
  set_has_isfirst();
  isfirst_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartReportBattleRsp.IsFirst)
}

// repeated .pb.TCommonReward RewardArr = 3;
inline int TOutsmartReportBattleRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TOutsmartReportBattleRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TOutsmartReportBattleRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartReportBattleRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TOutsmartReportBattleRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TOutsmartReportBattleRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TOutsmartReportBattleRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TOutsmartReportBattleRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TOutsmartReportBattleRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TOutsmartReportBattleRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TOutsmartReportBattleRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TOutsmartReportBattleRsp.RewardArr)
  return &rewardarr_;
}

// repeated uint32 BuffIdArr = 4;
inline int TOutsmartReportBattleRsp::buffidarr_size() const {
  return buffidarr_.size();
}
inline void TOutsmartReportBattleRsp::clear_buffidarr() {
  buffidarr_.Clear();
}
inline ::google::protobuf::uint32 TOutsmartReportBattleRsp::buffidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartReportBattleRsp.BuffIdArr)
  return buffidarr_.Get(index);
}
inline void TOutsmartReportBattleRsp::set_buffidarr(int index, ::google::protobuf::uint32 value) {
  buffidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TOutsmartReportBattleRsp.BuffIdArr)
}
inline void TOutsmartReportBattleRsp::add_buffidarr(::google::protobuf::uint32 value) {
  buffidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TOutsmartReportBattleRsp.BuffIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TOutsmartReportBattleRsp::buffidarr() const {
  // @@protoc_insertion_point(field_list:pb.TOutsmartReportBattleRsp.BuffIdArr)
  return buffidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TOutsmartReportBattleRsp::mutable_buffidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TOutsmartReportBattleRsp.BuffIdArr)
  return &buffidarr_;
}

// -------------------------------------------------------------------

// TOutsmartChooseBuffReq

// optional uint32 Id = 1;
inline bool TOutsmartChooseBuffReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TOutsmartChooseBuffReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TOutsmartChooseBuffReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TOutsmartChooseBuffReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TOutsmartChooseBuffReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartChooseBuffReq.Id)
  return id_;
}
inline void TOutsmartChooseBuffReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartChooseBuffReq.Id)
}

// optional uint64 RefreshTime = 2;
inline bool TOutsmartChooseBuffReq::has_refreshtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TOutsmartChooseBuffReq::set_has_refreshtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TOutsmartChooseBuffReq::clear_has_refreshtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TOutsmartChooseBuffReq::clear_refreshtime() {
  refreshtime_ = GOOGLE_ULONGLONG(0);
  clear_has_refreshtime();
}
inline ::google::protobuf::uint64 TOutsmartChooseBuffReq::refreshtime() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartChooseBuffReq.RefreshTime)
  return refreshtime_;
}
inline void TOutsmartChooseBuffReq::set_refreshtime(::google::protobuf::uint64 value) {
  set_has_refreshtime();
  refreshtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartChooseBuffReq.RefreshTime)
}

// optional uint32 BuffId = 3;
inline bool TOutsmartChooseBuffReq::has_buffid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TOutsmartChooseBuffReq::set_has_buffid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TOutsmartChooseBuffReq::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TOutsmartChooseBuffReq::clear_buffid() {
  buffid_ = 0u;
  clear_has_buffid();
}
inline ::google::protobuf::uint32 TOutsmartChooseBuffReq::buffid() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartChooseBuffReq.BuffId)
  return buffid_;
}
inline void TOutsmartChooseBuffReq::set_buffid(::google::protobuf::uint32 value) {
  set_has_buffid();
  buffid_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartChooseBuffReq.BuffId)
}

// -------------------------------------------------------------------

// TOutsmartBuyChallengeNumReq

// optional uint32 Num = 1;
inline bool TOutsmartBuyChallengeNumReq::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TOutsmartBuyChallengeNumReq::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TOutsmartBuyChallengeNumReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TOutsmartBuyChallengeNumReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TOutsmartBuyChallengeNumReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartBuyChallengeNumReq.Num)
  return num_;
}
inline void TOutsmartBuyChallengeNumReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartBuyChallengeNumReq.Num)
}

// -------------------------------------------------------------------

// TOutsmartReceiveSettleRewardRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TOutsmartReceiveSettleRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TOutsmartReceiveSettleRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TOutsmartReceiveSettleRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartReceiveSettleRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TOutsmartReceiveSettleRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TOutsmartReceiveSettleRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TOutsmartReceiveSettleRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TOutsmartReceiveSettleRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TOutsmartReceiveSettleRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TOutsmartReceiveSettleRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TOutsmartReceiveSettleRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TOutsmartReceiveSettleRewardRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TOutsmartGarrisonReq

// optional uint32 Id = 1;
inline bool TOutsmartGarrisonReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TOutsmartGarrisonReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TOutsmartGarrisonReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TOutsmartGarrisonReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TOutsmartGarrisonReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartGarrisonReq.Id)
  return id_;
}
inline void TOutsmartGarrisonReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartGarrisonReq.Id)
}

// optional uint32 Hid = 2;
inline bool TOutsmartGarrisonReq::has_hid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TOutsmartGarrisonReq::set_has_hid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TOutsmartGarrisonReq::clear_has_hid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TOutsmartGarrisonReq::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TOutsmartGarrisonReq::hid() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartGarrisonReq.Hid)
  return hid_;
}
inline void TOutsmartGarrisonReq::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartGarrisonReq.Hid)
}

// optional uint32 OriId = 3;
inline bool TOutsmartGarrisonReq::has_oriid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TOutsmartGarrisonReq::set_has_oriid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TOutsmartGarrisonReq::clear_has_oriid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TOutsmartGarrisonReq::clear_oriid() {
  oriid_ = 0u;
  clear_has_oriid();
}
inline ::google::protobuf::uint32 TOutsmartGarrisonReq::oriid() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartGarrisonReq.OriId)
  return oriid_;
}
inline void TOutsmartGarrisonReq::set_oriid(::google::protobuf::uint32 value) {
  set_has_oriid();
  oriid_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartGarrisonReq.OriId)
}

// -------------------------------------------------------------------

// TOutsmartSweepReq

// optional uint32 Id = 1;
inline bool TOutsmartSweepReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TOutsmartSweepReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TOutsmartSweepReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TOutsmartSweepReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TOutsmartSweepReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartSweepReq.Id)
  return id_;
}
inline void TOutsmartSweepReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartSweepReq.Id)
}

// optional uint64 RefreshTime = 2;
inline bool TOutsmartSweepReq::has_refreshtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TOutsmartSweepReq::set_has_refreshtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TOutsmartSweepReq::clear_has_refreshtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TOutsmartSweepReq::clear_refreshtime() {
  refreshtime_ = GOOGLE_ULONGLONG(0);
  clear_has_refreshtime();
}
inline ::google::protobuf::uint64 TOutsmartSweepReq::refreshtime() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartSweepReq.RefreshTime)
  return refreshtime_;
}
inline void TOutsmartSweepReq::set_refreshtime(::google::protobuf::uint64 value) {
  set_has_refreshtime();
  refreshtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartSweepReq.RefreshTime)
}

// optional uint32 SwType = 3;
inline bool TOutsmartSweepReq::has_swtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TOutsmartSweepReq::set_has_swtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TOutsmartSweepReq::clear_has_swtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TOutsmartSweepReq::clear_swtype() {
  swtype_ = 0u;
  clear_has_swtype();
}
inline ::google::protobuf::uint32 TOutsmartSweepReq::swtype() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartSweepReq.SwType)
  return swtype_;
}
inline void TOutsmartSweepReq::set_swtype(::google::protobuf::uint32 value) {
  set_has_swtype();
  swtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartSweepReq.SwType)
}

// -------------------------------------------------------------------

// TOutsmartSweepRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TOutsmartSweepRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TOutsmartSweepRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TOutsmartSweepRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartSweepRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TOutsmartSweepRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TOutsmartSweepRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TOutsmartSweepRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TOutsmartSweepRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TOutsmartSweepRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TOutsmartSweepRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TOutsmartSweepRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TOutsmartSweepRsp.RewardArr)
  return &rewardarr_;
}

// repeated uint32 BuffIdArr = 2;
inline int TOutsmartSweepRsp::buffidarr_size() const {
  return buffidarr_.size();
}
inline void TOutsmartSweepRsp::clear_buffidarr() {
  buffidarr_.Clear();
}
inline ::google::protobuf::uint32 TOutsmartSweepRsp::buffidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartSweepRsp.BuffIdArr)
  return buffidarr_.Get(index);
}
inline void TOutsmartSweepRsp::set_buffidarr(int index, ::google::protobuf::uint32 value) {
  buffidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TOutsmartSweepRsp.BuffIdArr)
}
inline void TOutsmartSweepRsp::add_buffidarr(::google::protobuf::uint32 value) {
  buffidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TOutsmartSweepRsp.BuffIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TOutsmartSweepRsp::buffidarr() const {
  // @@protoc_insertion_point(field_list:pb.TOutsmartSweepRsp.BuffIdArr)
  return buffidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TOutsmartSweepRsp::mutable_buffidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TOutsmartSweepRsp.BuffIdArr)
  return &buffidarr_;
}

// -------------------------------------------------------------------

// TOutsmartGarrisonInfo

// optional uint32 Id = 1;
inline bool TOutsmartGarrisonInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TOutsmartGarrisonInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TOutsmartGarrisonInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TOutsmartGarrisonInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TOutsmartGarrisonInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartGarrisonInfo.Id)
  return id_;
}
inline void TOutsmartGarrisonInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartGarrisonInfo.Id)
}

// optional uint32 Hid = 2;
inline bool TOutsmartGarrisonInfo::has_hid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TOutsmartGarrisonInfo::set_has_hid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TOutsmartGarrisonInfo::clear_has_hid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TOutsmartGarrisonInfo::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TOutsmartGarrisonInfo::hid() const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartGarrisonInfo.Hid)
  return hid_;
}
inline void TOutsmartGarrisonInfo::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TOutsmartGarrisonInfo.Hid)
}

// -------------------------------------------------------------------

// TOutsmartOneKeyGarrisonReq

// repeated .pb.TOutsmartGarrisonInfo GarrisonInfoArr = 1;
inline int TOutsmartOneKeyGarrisonReq::garrisoninfoarr_size() const {
  return garrisoninfoarr_.size();
}
inline void TOutsmartOneKeyGarrisonReq::clear_garrisoninfoarr() {
  garrisoninfoarr_.Clear();
}
inline const ::pb::TOutsmartGarrisonInfo& TOutsmartOneKeyGarrisonReq::garrisoninfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TOutsmartOneKeyGarrisonReq.GarrisonInfoArr)
  return garrisoninfoarr_.Get(index);
}
inline ::pb::TOutsmartGarrisonInfo* TOutsmartOneKeyGarrisonReq::mutable_garrisoninfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TOutsmartOneKeyGarrisonReq.GarrisonInfoArr)
  return garrisoninfoarr_.Mutable(index);
}
inline ::pb::TOutsmartGarrisonInfo* TOutsmartOneKeyGarrisonReq::add_garrisoninfoarr() {
  // @@protoc_insertion_point(field_add:pb.TOutsmartOneKeyGarrisonReq.GarrisonInfoArr)
  return garrisoninfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartGarrisonInfo >&
TOutsmartOneKeyGarrisonReq::garrisoninfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TOutsmartOneKeyGarrisonReq.GarrisonInfoArr)
  return garrisoninfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TOutsmartGarrisonInfo >*
TOutsmartOneKeyGarrisonReq::mutable_garrisoninfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TOutsmartOneKeyGarrisonReq.GarrisonInfoArr)
  return &garrisoninfoarr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fOutsmart_2eproto__INCLUDED
