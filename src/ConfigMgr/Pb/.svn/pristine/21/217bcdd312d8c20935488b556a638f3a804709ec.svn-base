// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/Attributer.proto

#ifndef PROTOBUF_module_2fAttributer_2eproto__INCLUDED
#define PROTOBUF_module_2fAttributer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_module_2fAttributer_2eproto();
void protobuf_AssignDesc_module_2fAttributer_2eproto();
void protobuf_ShutdownFile_module_2fAttributer_2eproto();

class TAttribute;
class TAttributeInfo;
class TSkillAttribute;
class THaloData;
class THalo;
class TSelf;
class TSkill;
class THeroBaseInfo;
class TModuleAttr;
class TPosition;
class TSquad;
class TPositionArr;

enum EAttrSrc {
  EAttrTeamHalo = 1,
  EAttrFashion = 2,
  EAttrMount = 3,
  EAttrDestiny = 4,
  EAttrTitle = 5,
  EAttrIllustration = 6,
  EAttrBaseHero = 7,
  EAttrFavor = 8,
  EAttrComb = 9,
  EAttrAdv = 10,
  EAttrStar = 11,
  EAttrArm = 12,
  EAttrAccessory = 13,
  EAttrSoul = 14,
  EAttrExcl = 15,
  EAttrEnmst = 16,
  EAttrSuit = 17,
  EAttrExtra = 18,
  EAttrMythCreature = 19,
  EAttrHallStar = 20,
  EAttrGoldHero = 21,
  EAttrTreasureSystem = 22,
  EAttrGoldHeroBreak = 23,
  EAttrSilk = 24,
  EAttrHeroTitle = 25,
  EAttrHeroWhiteGold = 26,
  EAttrWhiteGoldHeroBreak = 27,
  EAttrArmCarver = 28,
  EAttrInnerAlliance = 29,
  EAttrOfficialPosition = 30,
  EAttrHeroPlug = 31,
  EAttrBarrack = 32,
  EAttrGodHero = 33,
  EAttrGodHeroInherit = 34,
  EAttrWarRiding = 35,
  EAttrWarRidingHandBook = 36,
  EAttrHeroPurpleGold = 37,
  EAttrCardBuff = 38,
  EAttrFamousBook = 39,
  EAttrArtifact = 40,
  EAttrDivineTroops = 41,
  EAttrDivineTroopsHandBook = 42,
  EAttrForceSoul = 43,
  EAttrRealBody = 44,
  EAttrBeautyHouse = 45
};
bool EAttrSrc_IsValid(int value);
const EAttrSrc EAttrSrc_MIN = EAttrTeamHalo;
const EAttrSrc EAttrSrc_MAX = EAttrBeautyHouse;
const int EAttrSrc_ARRAYSIZE = EAttrSrc_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAttrSrc_descriptor();
inline const ::std::string& EAttrSrc_Name(EAttrSrc value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAttrSrc_descriptor(), value);
}
inline bool EAttrSrc_Parse(
    const ::std::string& name, EAttrSrc* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAttrSrc>(
    EAttrSrc_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TAttribute</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/Attributer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAttribute : public ::google::protobuf::Message {
 public:
  TAttribute();
  virtual ~TAttribute();

  TAttribute(const TAttribute& from);

  inline TAttribute& operator=(const TAttribute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAttribute& default_instance();

  void Swap(TAttribute* other);

  // implements Message ----------------------------------------------

  TAttribute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAttribute& from);
  void MergeFrom(const TAttribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAttribute</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint64 Value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAttribute</name>
  	<Function>
  		<name>value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TAttribute)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 value_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_module_2fAttributer_2eproto();
  friend void protobuf_AssignDesc_module_2fAttributer_2eproto();
  friend void protobuf_ShutdownFile_module_2fAttributer_2eproto();

  void InitAsDefaultInstance();
  static TAttribute* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAttributeInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/Attributer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAttributeInfo : public ::google::protobuf::Message {
 public:
  TAttributeInfo();
  virtual ~TAttributeInfo();

  TAttributeInfo(const TAttributeInfo& from);

  inline TAttributeInfo& operator=(const TAttributeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAttributeInfo& default_instance();

  void Swap(TAttributeInfo* other);

  // implements Message ----------------------------------------------

  TAttributeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAttributeInfo& from);
  void MergeFrom(const TAttributeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAttributeInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required int64 Value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAttributeInfo</name>
  	<Function>
  		<name>value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.TAttributeInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 value_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_module_2fAttributer_2eproto();
  friend void protobuf_AssignDesc_module_2fAttributer_2eproto();
  friend void protobuf_ShutdownFile_module_2fAttributer_2eproto();

  void InitAsDefaultInstance();
  static TAttributeInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSkillAttribute</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/Attributer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSkillAttribute : public ::google::protobuf::Message {
 public:
  TSkillAttribute();
  virtual ~TSkillAttribute();

  TSkillAttribute(const TSkillAttribute& from);

  inline TSkillAttribute& operator=(const TSkillAttribute& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSkillAttribute& default_instance();

  void Swap(TSkillAttribute* other);

  // implements Message ----------------------------------------------

  TSkillAttribute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSkillAttribute& from);
  void MergeFrom(const TSkillAttribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSkillAttribute</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 Level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSkillAttribute</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSkillAttribute)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_module_2fAttributer_2eproto();
  friend void protobuf_AssignDesc_module_2fAttributer_2eproto();
  friend void protobuf_ShutdownFile_module_2fAttributer_2eproto();

  void InitAsDefaultInstance();
  static TSkillAttribute* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>THaloData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/Attributer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THaloData : public ::google::protobuf::Message {
 public:
  THaloData();
  virtual ~THaloData();

  THaloData(const THaloData& from);

  inline THaloData& operator=(const THaloData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THaloData& default_instance();

  void Swap(THaloData* other);

  // implements Message ----------------------------------------------

  THaloData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THaloData& from);
  void MergeFrom(const THaloData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THaloData</name>
  	<Function>
  		<name>name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 name() const;
  inline void set_name(::google::protobuf::uint32 value);

  // required .pb.TAttribute Attr = 2;
  inline bool has_attr() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>THaloData</name>
  	<Function>
  		<name>attr</name>
  		<replaceName>Attr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attr</name>
  		<replaceName>Attr</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_attr</name>
  		<replaceName>Attr</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attr</name>
  		<replaceName>Attr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAttribute& attr() const;
  inline ::pb::TAttribute* mutable_attr();
  inline ::pb::TAttribute* release_attr();
  inline void set_allocated_attr(::pb::TAttribute* attr);

  // required uint32 HaloType = 3;
  inline bool has_halotype() const;
  inline void clear_halotype();
  static const int kHaloTypeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>THaloData</name>
  	<Function>
  		<name>halotype</name>
  		<replaceName>HaloType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_halotype</name>
  		<replaceName>HaloType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_halotype</name>
  		<replaceName>HaloType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 halotype() const;
  inline void set_halotype(::google::protobuf::uint32 value);

  // repeated uint32 Param = 4;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>THaloData</name>
  	<Function>
  		<name>param</name>
  		<replaceName>Param</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_param</name>
  		<replaceName>Param</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_param</name>
  		<replaceName>Param</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_param</name>
  		<replaceName>Param</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>param_size</name>
  		<replaceName>Param</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 param(int index) const;
  inline void set_param(int index, ::google::protobuf::uint32 value);
  inline void add_param(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      param() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_param();

  // @@protoc_insertion_point(class_scope:pb.THaloData)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_attr();
  inline void clear_has_attr();
  inline void set_has_halotype();
  inline void clear_has_halotype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAttribute* attr_;
  ::google::protobuf::uint32 name_;
  ::google::protobuf::uint32 halotype_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > param_;
  friend void  protobuf_AddDesc_module_2fAttributer_2eproto();
  friend void protobuf_AssignDesc_module_2fAttributer_2eproto();
  friend void protobuf_ShutdownFile_module_2fAttributer_2eproto();

  void InitAsDefaultInstance();
  static THaloData* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>THalo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/Attributer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THalo : public ::google::protobuf::Message {
 public:
  THalo();
  virtual ~THalo();

  THalo(const THalo& from);

  inline THalo& operator=(const THalo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THalo& default_instance();

  void Swap(THalo* other);

  // implements Message ----------------------------------------------

  THalo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THalo& from);
  void MergeFrom(const THalo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.THaloData HaloData = 1;
  inline int halodata_size() const;
  inline void clear_halodata();
  static const int kHaloDataFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THalo</name>
  	<Function>
  		<name>halodata</name>
  		<replaceName>HaloData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_halodata</name>
  		<replaceName>HaloData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_halodata</name>
  		<replaceName>HaloData</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_halodata</name>
  		<replaceName>HaloData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>halodata_size</name>
  		<replaceName>HaloData</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::THaloData& halodata(int index) const;
  inline ::pb::THaloData* mutable_halodata(int index);
  inline ::pb::THaloData* add_halodata();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::THaloData >&
      halodata() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::THaloData >*
      mutable_halodata();

  // @@protoc_insertion_point(class_scope:pb.THalo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::THaloData > halodata_;
  friend void  protobuf_AddDesc_module_2fAttributer_2eproto();
  friend void protobuf_AssignDesc_module_2fAttributer_2eproto();
  friend void protobuf_ShutdownFile_module_2fAttributer_2eproto();

  void InitAsDefaultInstance();
  static THalo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSelf</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/Attributer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSelf : public ::google::protobuf::Message {
 public:
  TSelf();
  virtual ~TSelf();

  TSelf(const TSelf& from);

  inline TSelf& operator=(const TSelf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSelf& default_instance();

  void Swap(TSelf* other);

  // implements Message ----------------------------------------------

  TSelf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSelf& from);
  void MergeFrom(const TSelf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TAttribute Attr = 1;
  inline int attr_size() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSelf</name>
  	<Function>
  		<name>attr</name>
  		<replaceName>Attr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_attr</name>
  		<replaceName>Attr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_attr</name>
  		<replaceName>Attr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attr</name>
  		<replaceName>Attr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>attr_size</name>
  		<replaceName>Attr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAttribute& attr(int index) const;
  inline ::pb::TAttribute* mutable_attr(int index);
  inline ::pb::TAttribute* add_attr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAttribute >&
      attr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAttribute >*
      mutable_attr();

  // @@protoc_insertion_point(class_scope:pb.TSelf)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAttribute > attr_;
  friend void  protobuf_AddDesc_module_2fAttributer_2eproto();
  friend void protobuf_AssignDesc_module_2fAttributer_2eproto();
  friend void protobuf_ShutdownFile_module_2fAttributer_2eproto();

  void InitAsDefaultInstance();
  static TSelf* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSkill</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/Attributer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSkill : public ::google::protobuf::Message {
 public:
  TSkill();
  virtual ~TSkill();

  TSkill(const TSkill& from);

  inline TSkill& operator=(const TSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSkill& default_instance();

  void Swap(TSkill* other);

  // implements Message ----------------------------------------------

  TSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSkill& from);
  void MergeFrom(const TSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TSkillAttribute Skill = 1;
  inline int skill_size() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSkill</name>
  	<Function>
  		<name>skill</name>
  		<replaceName>Skill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_skill</name>
  		<replaceName>Skill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_skill</name>
  		<replaceName>Skill</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skill</name>
  		<replaceName>Skill</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>skill_size</name>
  		<replaceName>Skill</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSkillAttribute& skill(int index) const;
  inline ::pb::TSkillAttribute* mutable_skill(int index);
  inline ::pb::TSkillAttribute* add_skill();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute >&
      skill() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute >*
      mutable_skill();

  // @@protoc_insertion_point(class_scope:pb.TSkill)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute > skill_;
  friend void  protobuf_AddDesc_module_2fAttributer_2eproto();
  friend void protobuf_AssignDesc_module_2fAttributer_2eproto();
  friend void protobuf_ShutdownFile_module_2fAttributer_2eproto();

  void InitAsDefaultInstance();
  static TSkill* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>THeroBaseInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/Attributer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class THeroBaseInfo : public ::google::protobuf::Message {
 public:
  THeroBaseInfo();
  virtual ~THeroBaseInfo();

  THeroBaseInfo(const THeroBaseInfo& from);

  inline THeroBaseInfo& operator=(const THeroBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const THeroBaseInfo& default_instance();

  void Swap(THeroBaseInfo* other);

  // implements Message ----------------------------------------------

  THeroBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const THeroBaseInfo& from);
  void MergeFrom(const THeroBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Htid = 1;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>THeroBaseInfo</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // optional uint32 Hid = 2;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>THeroBaseInfo</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint32 HeroLv = 3;
  inline bool has_herolv() const;
  inline void clear_herolv();
  static const int kHeroLvFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>THeroBaseInfo</name>
  	<Function>
  		<name>herolv</name>
  		<replaceName>HeroLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_herolv</name>
  		<replaceName>HeroLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_herolv</name>
  		<replaceName>HeroLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 herolv() const;
  inline void set_herolv(::google::protobuf::uint32 value);

  // optional .pb.TSkill Skill = 4;
  inline bool has_skill() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>THeroBaseInfo</name>
  	<Function>
  		<name>skill</name>
  		<replaceName>Skill</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skill</name>
  		<replaceName>Skill</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_skill</name>
  		<replaceName>Skill</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skill</name>
  		<replaceName>Skill</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSkill& skill() const;
  inline ::pb::TSkill* mutable_skill();
  inline ::pb::TSkill* release_skill();
  inline void set_allocated_skill(::pb::TSkill* skill);

  // optional uint32 Weight = 5;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>THeroBaseInfo</name>
  	<Function>
  		<name>weight</name>
  		<replaceName>Weight</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_weight</name>
  		<replaceName>Weight</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_weight</name>
  		<replaceName>Weight</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 weight() const;
  inline void set_weight(::google::protobuf::uint32 value);

  // optional uint32 Star = 6;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>THeroBaseInfo</name>
  	<Function>
  		<name>star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional uint32 AdvLv = 7;
  inline bool has_advlv() const;
  inline void clear_advlv();
  static const int kAdvLvFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>THeroBaseInfo</name>
  	<Function>
  		<name>advlv</name>
  		<replaceName>AdvLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_advlv</name>
  		<replaceName>AdvLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_advlv</name>
  		<replaceName>AdvLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 advlv() const;
  inline void set_advlv(::google::protobuf::uint32 value);

  // optional uint32 BaseScale = 8;
  inline bool has_basescale() const;
  inline void clear_basescale();
  static const int kBaseScaleFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>THeroBaseInfo</name>
  	<Function>
  		<name>basescale</name>
  		<replaceName>BaseScale</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_basescale</name>
  		<replaceName>BaseScale</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_basescale</name>
  		<replaceName>BaseScale</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 basescale() const;
  inline void set_basescale(::google::protobuf::uint32 value);

  // optional uint32 GoldHeroBreakLv = 9;
  inline bool has_goldherobreaklv() const;
  inline void clear_goldherobreaklv();
  static const int kGoldHeroBreakLvFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>THeroBaseInfo</name>
  	<Function>
  		<name>goldherobreaklv</name>
  		<replaceName>GoldHeroBreakLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goldherobreaklv</name>
  		<replaceName>GoldHeroBreakLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goldherobreaklv</name>
  		<replaceName>GoldHeroBreakLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 goldherobreaklv() const;
  inline void set_goldherobreaklv(::google::protobuf::uint32 value);

  // optional uint32 WhiteGoldBreakLv = 10;
  inline bool has_whitegoldbreaklv() const;
  inline void clear_whitegoldbreaklv();
  static const int kWhiteGoldBreakLvFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>THeroBaseInfo</name>
  	<Function>
  		<name>whitegoldbreaklv</name>
  		<replaceName>WhiteGoldBreakLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_whitegoldbreaklv</name>
  		<replaceName>WhiteGoldBreakLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_whitegoldbreaklv</name>
  		<replaceName>WhiteGoldBreakLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 whitegoldbreaklv() const;
  inline void set_whitegoldbreaklv(::google::protobuf::uint32 value);

  // optional uint32 GoldLv = 11;
  inline bool has_goldlv() const;
  inline void clear_goldlv();
  static const int kGoldLvFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>THeroBaseInfo</name>
  	<Function>
  		<name>goldlv</name>
  		<replaceName>GoldLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goldlv</name>
  		<replaceName>GoldLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goldlv</name>
  		<replaceName>GoldLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 goldlv() const;
  inline void set_goldlv(::google::protobuf::uint32 value);

  // optional uint32 WhiteGoldLv = 12;
  inline bool has_whitegoldlv() const;
  inline void clear_whitegoldlv();
  static const int kWhiteGoldLvFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>THeroBaseInfo</name>
  	<Function>
  		<name>whitegoldlv</name>
  		<replaceName>WhiteGoldLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_whitegoldlv</name>
  		<replaceName>WhiteGoldLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_whitegoldlv</name>
  		<replaceName>WhiteGoldLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 whitegoldlv() const;
  inline void set_whitegoldlv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.THeroBaseInfo)
 private:
  inline void set_has_htid();
  inline void clear_has_htid();
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_herolv();
  inline void clear_has_herolv();
  inline void set_has_skill();
  inline void clear_has_skill();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_advlv();
  inline void clear_has_advlv();
  inline void set_has_basescale();
  inline void clear_has_basescale();
  inline void set_has_goldherobreaklv();
  inline void clear_has_goldherobreaklv();
  inline void set_has_whitegoldbreaklv();
  inline void clear_has_whitegoldbreaklv();
  inline void set_has_goldlv();
  inline void clear_has_goldlv();
  inline void set_has_whitegoldlv();
  inline void clear_has_whitegoldlv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 htid_;
  ::google::protobuf::uint32 hid_;
  ::pb::TSkill* skill_;
  ::google::protobuf::uint32 herolv_;
  ::google::protobuf::uint32 weight_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 advlv_;
  ::google::protobuf::uint32 basescale_;
  ::google::protobuf::uint32 goldherobreaklv_;
  ::google::protobuf::uint32 whitegoldbreaklv_;
  ::google::protobuf::uint32 goldlv_;
  ::google::protobuf::uint32 whitegoldlv_;
  friend void  protobuf_AddDesc_module_2fAttributer_2eproto();
  friend void protobuf_AssignDesc_module_2fAttributer_2eproto();
  friend void protobuf_ShutdownFile_module_2fAttributer_2eproto();

  void InitAsDefaultInstance();
  static THeroBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TModuleAttr</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/Attributer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TModuleAttr : public ::google::protobuf::Message {
 public:
  TModuleAttr();
  virtual ~TModuleAttr();

  TModuleAttr(const TModuleAttr& from);

  inline TModuleAttr& operator=(const TModuleAttr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TModuleAttr& default_instance();

  void Swap(TModuleAttr* other);

  // implements Message ----------------------------------------------

  TModuleAttr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TModuleAttr& from);
  void MergeFrom(const TModuleAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TModuleAttr</name>
  	<Function>
  		<name>name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 name() const;
  inline void set_name(::google::protobuf::uint32 value);

  // optional .pb.TSelf Self = 2;
  inline bool has_self() const;
  inline void clear_self();
  static const int kSelfFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TModuleAttr</name>
  	<Function>
  		<name>self</name>
  		<replaceName>Self</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_self</name>
  		<replaceName>Self</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_self</name>
  		<replaceName>Self</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_self</name>
  		<replaceName>Self</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSelf& self() const;
  inline ::pb::TSelf* mutable_self();
  inline ::pb::TSelf* release_self();
  inline void set_allocated_self(::pb::TSelf* self);

  // optional .pb.THalo Halo = 3;
  inline bool has_halo() const;
  inline void clear_halo();
  static const int kHaloFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TModuleAttr</name>
  	<Function>
  		<name>halo</name>
  		<replaceName>Halo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_halo</name>
  		<replaceName>Halo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_halo</name>
  		<replaceName>Halo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_halo</name>
  		<replaceName>Halo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::THalo& halo() const;
  inline ::pb::THalo* mutable_halo();
  inline ::pb::THalo* release_halo();
  inline void set_allocated_halo(::pb::THalo* halo);

  // repeated .pb.TSkillAttribute Skills = 4;
  inline int skills_size() const;
  inline void clear_skills();
  static const int kSkillsFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TModuleAttr</name>
  	<Function>
  		<name>skills</name>
  		<replaceName>Skills</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_skills</name>
  		<replaceName>Skills</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_skills</name>
  		<replaceName>Skills</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skills</name>
  		<replaceName>Skills</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>skills_size</name>
  		<replaceName>Skills</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSkillAttribute& skills(int index) const;
  inline ::pb::TSkillAttribute* mutable_skills(int index);
  inline ::pb::TSkillAttribute* add_skills();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute >&
      skills() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute >*
      mutable_skills();

  // optional uint64 Fightforce = 5;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightforceFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TModuleAttr</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>Fightforce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>Fightforce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>Fightforce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TModuleAttr)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_self();
  inline void clear_has_self();
  inline void set_has_halo();
  inline void clear_has_halo();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TSelf* self_;
  ::pb::THalo* halo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute > skills_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint32 name_;
  friend void  protobuf_AddDesc_module_2fAttributer_2eproto();
  friend void protobuf_AssignDesc_module_2fAttributer_2eproto();
  friend void protobuf_ShutdownFile_module_2fAttributer_2eproto();

  void InitAsDefaultInstance();
  static TModuleAttr* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPosition</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/Attributer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPosition : public ::google::protobuf::Message {
 public:
  TPosition();
  virtual ~TPosition();

  TPosition(const TPosition& from);

  inline TPosition& operator=(const TPosition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPosition& default_instance();

  void Swap(TPosition* other);

  // implements Message ----------------------------------------------

  TPosition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPosition& from);
  void MergeFrom(const TPosition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPosition</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional .pb.THeroBaseInfo HeroInfo = 2;
  inline bool has_heroinfo() const;
  inline void clear_heroinfo();
  static const int kHeroInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TPosition</name>
  	<Function>
  		<name>heroinfo</name>
  		<replaceName>HeroInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_heroinfo</name>
  		<replaceName>HeroInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_heroinfo</name>
  		<replaceName>HeroInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_heroinfo</name>
  		<replaceName>HeroInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::THeroBaseInfo& heroinfo() const;
  inline ::pb::THeroBaseInfo* mutable_heroinfo();
  inline ::pb::THeroBaseInfo* release_heroinfo();
  inline void set_allocated_heroinfo(::pb::THeroBaseInfo* heroinfo);

  // repeated .pb.TModuleAttr Data = 3;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TPosition</name>
  	<Function>
  		<name>data</name>
  		<replaceName>Data</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_data</name>
  		<replaceName>Data</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_data</name>
  		<replaceName>Data</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_data</name>
  		<replaceName>Data</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>data_size</name>
  		<replaceName>Data</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TModuleAttr& data(int index) const;
  inline ::pb::TModuleAttr* mutable_data(int index);
  inline ::pb::TModuleAttr* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TModuleAttr >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TModuleAttr >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:pb.TPosition)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_heroinfo();
  inline void clear_has_heroinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::THeroBaseInfo* heroinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TModuleAttr > data_;
  ::google::protobuf::uint32 pos_;
  friend void  protobuf_AddDesc_module_2fAttributer_2eproto();
  friend void protobuf_AssignDesc_module_2fAttributer_2eproto();
  friend void protobuf_ShutdownFile_module_2fAttributer_2eproto();

  void InitAsDefaultInstance();
  static TPosition* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSquad</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/Attributer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSquad : public ::google::protobuf::Message {
 public:
  TSquad();
  virtual ~TSquad();

  TSquad(const TSquad& from);

  inline TSquad& operator=(const TSquad& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSquad& default_instance();

  void Swap(TSquad* other);

  // implements Message ----------------------------------------------

  TSquad* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSquad& from);
  void MergeFrom(const TSquad& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.THalo GHalo = 1;
  inline bool has_ghalo() const;
  inline void clear_ghalo();
  static const int kGHaloFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSquad</name>
  	<Function>
  		<name>ghalo</name>
  		<replaceName>GHalo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ghalo</name>
  		<replaceName>GHalo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_ghalo</name>
  		<replaceName>GHalo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ghalo</name>
  		<replaceName>GHalo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::THalo& ghalo() const;
  inline ::pb::THalo* mutable_ghalo();
  inline ::pb::THalo* release_ghalo();
  inline void set_allocated_ghalo(::pb::THalo* ghalo);

  // optional .pb.THalo TeamHalo = 2;
  inline bool has_teamhalo() const;
  inline void clear_teamhalo();
  static const int kTeamHaloFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSquad</name>
  	<Function>
  		<name>teamhalo</name>
  		<replaceName>TeamHalo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamhalo</name>
  		<replaceName>TeamHalo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_teamhalo</name>
  		<replaceName>TeamHalo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamhalo</name>
  		<replaceName>TeamHalo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::THalo& teamhalo() const;
  inline ::pb::THalo* mutable_teamhalo();
  inline ::pb::THalo* release_teamhalo();
  inline void set_allocated_teamhalo(::pb::THalo* teamhalo);

  // repeated .pb.TPosition Squad = 3;
  inline int squad_size() const;
  inline void clear_squad();
  static const int kSquadFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSquad</name>
  	<Function>
  		<name>squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>squad_size</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPosition& squad(int index) const;
  inline ::pb::TPosition* mutable_squad(int index);
  inline ::pb::TPosition* add_squad();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPosition >&
      squad() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPosition >*
      mutable_squad();

  // optional uint64 Uid = 4;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TSquad</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 Starter = 5;
  inline bool has_starter() const;
  inline void clear_starter();
  static const int kStarterFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TSquad</name>
  	<Function>
  		<name>starter</name>
  		<replaceName>Starter</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starter</name>
  		<replaceName>Starter</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starter</name>
  		<replaceName>Starter</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 starter() const;
  inline void set_starter(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSquad)
 private:
  inline void set_has_ghalo();
  inline void clear_has_ghalo();
  inline void set_has_teamhalo();
  inline void clear_has_teamhalo();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_starter();
  inline void clear_has_starter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::THalo* ghalo_;
  ::pb::THalo* teamhalo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPosition > squad_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 starter_;
  friend void  protobuf_AddDesc_module_2fAttributer_2eproto();
  friend void protobuf_AssignDesc_module_2fAttributer_2eproto();
  friend void protobuf_ShutdownFile_module_2fAttributer_2eproto();

  void InitAsDefaultInstance();
  static TSquad* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TPositionArr</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/Attributer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TPositionArr : public ::google::protobuf::Message {
 public:
  TPositionArr();
  virtual ~TPositionArr();

  TPositionArr(const TPositionArr& from);

  inline TPositionArr& operator=(const TPositionArr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TPositionArr& default_instance();

  void Swap(TPositionArr* other);

  // implements Message ----------------------------------------------

  TPositionArr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TPositionArr& from);
  void MergeFrom(const TPositionArr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TPosition Squad = 1;
  inline int squad_size() const;
  inline void clear_squad();
  static const int kSquadFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TPositionArr</name>
  	<Function>
  		<name>squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_squad</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>squad_size</name>
  		<replaceName>Squad</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPosition& squad(int index) const;
  inline ::pb::TPosition* mutable_squad(int index);
  inline ::pb::TPosition* add_squad();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPosition >&
      squad() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPosition >*
      mutable_squad();

  // @@protoc_insertion_point(class_scope:pb.TPositionArr)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPosition > squad_;
  friend void  protobuf_AddDesc_module_2fAttributer_2eproto();
  friend void protobuf_AssignDesc_module_2fAttributer_2eproto();
  friend void protobuf_ShutdownFile_module_2fAttributer_2eproto();

  void InitAsDefaultInstance();
  static TPositionArr* default_instance_;
};
// ===================================================================


// ===================================================================

// TAttribute

// required uint32 Id = 1;
inline bool TAttribute::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAttribute::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAttribute::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAttribute::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TAttribute::id() const {
  // @@protoc_insertion_point(field_get:pb.TAttribute.Id)
  return id_;
}
inline void TAttribute::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TAttribute.Id)
}

// required uint64 Value = 2;
inline bool TAttribute::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAttribute::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAttribute::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAttribute::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 TAttribute::value() const {
  // @@protoc_insertion_point(field_get:pb.TAttribute.Value)
  return value_;
}
inline void TAttribute::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:pb.TAttribute.Value)
}

// -------------------------------------------------------------------

// TAttributeInfo

// required uint32 Id = 1;
inline bool TAttributeInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAttributeInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAttributeInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAttributeInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TAttributeInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TAttributeInfo.Id)
  return id_;
}
inline void TAttributeInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TAttributeInfo.Id)
}

// required int64 Value = 2;
inline bool TAttributeInfo::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAttributeInfo::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAttributeInfo::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAttributeInfo::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 TAttributeInfo::value() const {
  // @@protoc_insertion_point(field_get:pb.TAttributeInfo.Value)
  return value_;
}
inline void TAttributeInfo::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:pb.TAttributeInfo.Value)
}

// -------------------------------------------------------------------

// TSkillAttribute

// required uint32 Id = 1;
inline bool TSkillAttribute::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSkillAttribute::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSkillAttribute::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSkillAttribute::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TSkillAttribute::id() const {
  // @@protoc_insertion_point(field_get:pb.TSkillAttribute.Id)
  return id_;
}
inline void TSkillAttribute::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TSkillAttribute.Id)
}

// required uint32 Level = 2;
inline bool TSkillAttribute::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSkillAttribute::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSkillAttribute::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSkillAttribute::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TSkillAttribute::level() const {
  // @@protoc_insertion_point(field_get:pb.TSkillAttribute.Level)
  return level_;
}
inline void TSkillAttribute::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TSkillAttribute.Level)
}

// -------------------------------------------------------------------

// THaloData

// required uint32 Name = 1;
inline bool THaloData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void THaloData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void THaloData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void THaloData::clear_name() {
  name_ = 0u;
  clear_has_name();
}
inline ::google::protobuf::uint32 THaloData::name() const {
  // @@protoc_insertion_point(field_get:pb.THaloData.Name)
  return name_;
}
inline void THaloData::set_name(::google::protobuf::uint32 value) {
  set_has_name();
  name_ = value;
  // @@protoc_insertion_point(field_set:pb.THaloData.Name)
}

// required .pb.TAttribute Attr = 2;
inline bool THaloData::has_attr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void THaloData::set_has_attr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void THaloData::clear_has_attr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void THaloData::clear_attr() {
  if (attr_ != NULL) attr_->::pb::TAttribute::Clear();
  clear_has_attr();
}
inline const ::pb::TAttribute& THaloData::attr() const {
  // @@protoc_insertion_point(field_get:pb.THaloData.Attr)
  return attr_ != NULL ? *attr_ : *default_instance_->attr_;
}
inline ::pb::TAttribute* THaloData::mutable_attr() {
  set_has_attr();
  if (attr_ == NULL) attr_ = new ::pb::TAttribute;
  // @@protoc_insertion_point(field_mutable:pb.THaloData.Attr)
  return attr_;
}
inline ::pb::TAttribute* THaloData::release_attr() {
  clear_has_attr();
  ::pb::TAttribute* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline void THaloData::set_allocated_attr(::pb::TAttribute* attr) {
  delete attr_;
  attr_ = attr;
  if (attr) {
    set_has_attr();
  } else {
    clear_has_attr();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.THaloData.Attr)
}

// required uint32 HaloType = 3;
inline bool THaloData::has_halotype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void THaloData::set_has_halotype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void THaloData::clear_has_halotype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void THaloData::clear_halotype() {
  halotype_ = 0u;
  clear_has_halotype();
}
inline ::google::protobuf::uint32 THaloData::halotype() const {
  // @@protoc_insertion_point(field_get:pb.THaloData.HaloType)
  return halotype_;
}
inline void THaloData::set_halotype(::google::protobuf::uint32 value) {
  set_has_halotype();
  halotype_ = value;
  // @@protoc_insertion_point(field_set:pb.THaloData.HaloType)
}

// repeated uint32 Param = 4;
inline int THaloData::param_size() const {
  return param_.size();
}
inline void THaloData::clear_param() {
  param_.Clear();
}
inline ::google::protobuf::uint32 THaloData::param(int index) const {
  // @@protoc_insertion_point(field_get:pb.THaloData.Param)
  return param_.Get(index);
}
inline void THaloData::set_param(int index, ::google::protobuf::uint32 value) {
  param_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.THaloData.Param)
}
inline void THaloData::add_param(::google::protobuf::uint32 value) {
  param_.Add(value);
  // @@protoc_insertion_point(field_add:pb.THaloData.Param)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
THaloData::param() const {
  // @@protoc_insertion_point(field_list:pb.THaloData.Param)
  return param_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
THaloData::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:pb.THaloData.Param)
  return &param_;
}

// -------------------------------------------------------------------

// THalo

// repeated .pb.THaloData HaloData = 1;
inline int THalo::halodata_size() const {
  return halodata_.size();
}
inline void THalo::clear_halodata() {
  halodata_.Clear();
}
inline const ::pb::THaloData& THalo::halodata(int index) const {
  // @@protoc_insertion_point(field_get:pb.THalo.HaloData)
  return halodata_.Get(index);
}
inline ::pb::THaloData* THalo::mutable_halodata(int index) {
  // @@protoc_insertion_point(field_mutable:pb.THalo.HaloData)
  return halodata_.Mutable(index);
}
inline ::pb::THaloData* THalo::add_halodata() {
  // @@protoc_insertion_point(field_add:pb.THalo.HaloData)
  return halodata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::THaloData >&
THalo::halodata() const {
  // @@protoc_insertion_point(field_list:pb.THalo.HaloData)
  return halodata_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::THaloData >*
THalo::mutable_halodata() {
  // @@protoc_insertion_point(field_mutable_list:pb.THalo.HaloData)
  return &halodata_;
}

// -------------------------------------------------------------------

// TSelf

// repeated .pb.TAttribute Attr = 1;
inline int TSelf::attr_size() const {
  return attr_.size();
}
inline void TSelf::clear_attr() {
  attr_.Clear();
}
inline const ::pb::TAttribute& TSelf::attr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSelf.Attr)
  return attr_.Get(index);
}
inline ::pb::TAttribute* TSelf::mutable_attr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSelf.Attr)
  return attr_.Mutable(index);
}
inline ::pb::TAttribute* TSelf::add_attr() {
  // @@protoc_insertion_point(field_add:pb.TSelf.Attr)
  return attr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAttribute >&
TSelf::attr() const {
  // @@protoc_insertion_point(field_list:pb.TSelf.Attr)
  return attr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAttribute >*
TSelf::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSelf.Attr)
  return &attr_;
}

// -------------------------------------------------------------------

// TSkill

// repeated .pb.TSkillAttribute Skill = 1;
inline int TSkill::skill_size() const {
  return skill_.size();
}
inline void TSkill::clear_skill() {
  skill_.Clear();
}
inline const ::pb::TSkillAttribute& TSkill::skill(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSkill.Skill)
  return skill_.Get(index);
}
inline ::pb::TSkillAttribute* TSkill::mutable_skill(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSkill.Skill)
  return skill_.Mutable(index);
}
inline ::pb::TSkillAttribute* TSkill::add_skill() {
  // @@protoc_insertion_point(field_add:pb.TSkill.Skill)
  return skill_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute >&
TSkill::skill() const {
  // @@protoc_insertion_point(field_list:pb.TSkill.Skill)
  return skill_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute >*
TSkill::mutable_skill() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSkill.Skill)
  return &skill_;
}

// -------------------------------------------------------------------

// THeroBaseInfo

// optional uint32 Htid = 1;
inline bool THeroBaseInfo::has_htid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void THeroBaseInfo::set_has_htid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void THeroBaseInfo::clear_has_htid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void THeroBaseInfo::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 THeroBaseInfo::htid() const {
  // @@protoc_insertion_point(field_get:pb.THeroBaseInfo.Htid)
  return htid_;
}
inline void THeroBaseInfo::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.THeroBaseInfo.Htid)
}

// optional uint32 Hid = 2;
inline bool THeroBaseInfo::has_hid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void THeroBaseInfo::set_has_hid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void THeroBaseInfo::clear_has_hid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void THeroBaseInfo::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 THeroBaseInfo::hid() const {
  // @@protoc_insertion_point(field_get:pb.THeroBaseInfo.Hid)
  return hid_;
}
inline void THeroBaseInfo::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.THeroBaseInfo.Hid)
}

// optional uint32 HeroLv = 3;
inline bool THeroBaseInfo::has_herolv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void THeroBaseInfo::set_has_herolv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void THeroBaseInfo::clear_has_herolv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void THeroBaseInfo::clear_herolv() {
  herolv_ = 0u;
  clear_has_herolv();
}
inline ::google::protobuf::uint32 THeroBaseInfo::herolv() const {
  // @@protoc_insertion_point(field_get:pb.THeroBaseInfo.HeroLv)
  return herolv_;
}
inline void THeroBaseInfo::set_herolv(::google::protobuf::uint32 value) {
  set_has_herolv();
  herolv_ = value;
  // @@protoc_insertion_point(field_set:pb.THeroBaseInfo.HeroLv)
}

// optional .pb.TSkill Skill = 4;
inline bool THeroBaseInfo::has_skill() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void THeroBaseInfo::set_has_skill() {
  _has_bits_[0] |= 0x00000008u;
}
inline void THeroBaseInfo::clear_has_skill() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void THeroBaseInfo::clear_skill() {
  if (skill_ != NULL) skill_->::pb::TSkill::Clear();
  clear_has_skill();
}
inline const ::pb::TSkill& THeroBaseInfo::skill() const {
  // @@protoc_insertion_point(field_get:pb.THeroBaseInfo.Skill)
  return skill_ != NULL ? *skill_ : *default_instance_->skill_;
}
inline ::pb::TSkill* THeroBaseInfo::mutable_skill() {
  set_has_skill();
  if (skill_ == NULL) skill_ = new ::pb::TSkill;
  // @@protoc_insertion_point(field_mutable:pb.THeroBaseInfo.Skill)
  return skill_;
}
inline ::pb::TSkill* THeroBaseInfo::release_skill() {
  clear_has_skill();
  ::pb::TSkill* temp = skill_;
  skill_ = NULL;
  return temp;
}
inline void THeroBaseInfo::set_allocated_skill(::pb::TSkill* skill) {
  delete skill_;
  skill_ = skill;
  if (skill) {
    set_has_skill();
  } else {
    clear_has_skill();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.THeroBaseInfo.Skill)
}

// optional uint32 Weight = 5;
inline bool THeroBaseInfo::has_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void THeroBaseInfo::set_has_weight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void THeroBaseInfo::clear_has_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void THeroBaseInfo::clear_weight() {
  weight_ = 0u;
  clear_has_weight();
}
inline ::google::protobuf::uint32 THeroBaseInfo::weight() const {
  // @@protoc_insertion_point(field_get:pb.THeroBaseInfo.Weight)
  return weight_;
}
inline void THeroBaseInfo::set_weight(::google::protobuf::uint32 value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:pb.THeroBaseInfo.Weight)
}

// optional uint32 Star = 6;
inline bool THeroBaseInfo::has_star() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void THeroBaseInfo::set_has_star() {
  _has_bits_[0] |= 0x00000020u;
}
inline void THeroBaseInfo::clear_has_star() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void THeroBaseInfo::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 THeroBaseInfo::star() const {
  // @@protoc_insertion_point(field_get:pb.THeroBaseInfo.Star)
  return star_;
}
inline void THeroBaseInfo::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:pb.THeroBaseInfo.Star)
}

// optional uint32 AdvLv = 7;
inline bool THeroBaseInfo::has_advlv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void THeroBaseInfo::set_has_advlv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void THeroBaseInfo::clear_has_advlv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void THeroBaseInfo::clear_advlv() {
  advlv_ = 0u;
  clear_has_advlv();
}
inline ::google::protobuf::uint32 THeroBaseInfo::advlv() const {
  // @@protoc_insertion_point(field_get:pb.THeroBaseInfo.AdvLv)
  return advlv_;
}
inline void THeroBaseInfo::set_advlv(::google::protobuf::uint32 value) {
  set_has_advlv();
  advlv_ = value;
  // @@protoc_insertion_point(field_set:pb.THeroBaseInfo.AdvLv)
}

// optional uint32 BaseScale = 8;
inline bool THeroBaseInfo::has_basescale() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void THeroBaseInfo::set_has_basescale() {
  _has_bits_[0] |= 0x00000080u;
}
inline void THeroBaseInfo::clear_has_basescale() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void THeroBaseInfo::clear_basescale() {
  basescale_ = 0u;
  clear_has_basescale();
}
inline ::google::protobuf::uint32 THeroBaseInfo::basescale() const {
  // @@protoc_insertion_point(field_get:pb.THeroBaseInfo.BaseScale)
  return basescale_;
}
inline void THeroBaseInfo::set_basescale(::google::protobuf::uint32 value) {
  set_has_basescale();
  basescale_ = value;
  // @@protoc_insertion_point(field_set:pb.THeroBaseInfo.BaseScale)
}

// optional uint32 GoldHeroBreakLv = 9;
inline bool THeroBaseInfo::has_goldherobreaklv() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void THeroBaseInfo::set_has_goldherobreaklv() {
  _has_bits_[0] |= 0x00000100u;
}
inline void THeroBaseInfo::clear_has_goldherobreaklv() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void THeroBaseInfo::clear_goldherobreaklv() {
  goldherobreaklv_ = 0u;
  clear_has_goldherobreaklv();
}
inline ::google::protobuf::uint32 THeroBaseInfo::goldherobreaklv() const {
  // @@protoc_insertion_point(field_get:pb.THeroBaseInfo.GoldHeroBreakLv)
  return goldherobreaklv_;
}
inline void THeroBaseInfo::set_goldherobreaklv(::google::protobuf::uint32 value) {
  set_has_goldherobreaklv();
  goldherobreaklv_ = value;
  // @@protoc_insertion_point(field_set:pb.THeroBaseInfo.GoldHeroBreakLv)
}

// optional uint32 WhiteGoldBreakLv = 10;
inline bool THeroBaseInfo::has_whitegoldbreaklv() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void THeroBaseInfo::set_has_whitegoldbreaklv() {
  _has_bits_[0] |= 0x00000200u;
}
inline void THeroBaseInfo::clear_has_whitegoldbreaklv() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void THeroBaseInfo::clear_whitegoldbreaklv() {
  whitegoldbreaklv_ = 0u;
  clear_has_whitegoldbreaklv();
}
inline ::google::protobuf::uint32 THeroBaseInfo::whitegoldbreaklv() const {
  // @@protoc_insertion_point(field_get:pb.THeroBaseInfo.WhiteGoldBreakLv)
  return whitegoldbreaklv_;
}
inline void THeroBaseInfo::set_whitegoldbreaklv(::google::protobuf::uint32 value) {
  set_has_whitegoldbreaklv();
  whitegoldbreaklv_ = value;
  // @@protoc_insertion_point(field_set:pb.THeroBaseInfo.WhiteGoldBreakLv)
}

// optional uint32 GoldLv = 11;
inline bool THeroBaseInfo::has_goldlv() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void THeroBaseInfo::set_has_goldlv() {
  _has_bits_[0] |= 0x00000400u;
}
inline void THeroBaseInfo::clear_has_goldlv() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void THeroBaseInfo::clear_goldlv() {
  goldlv_ = 0u;
  clear_has_goldlv();
}
inline ::google::protobuf::uint32 THeroBaseInfo::goldlv() const {
  // @@protoc_insertion_point(field_get:pb.THeroBaseInfo.GoldLv)
  return goldlv_;
}
inline void THeroBaseInfo::set_goldlv(::google::protobuf::uint32 value) {
  set_has_goldlv();
  goldlv_ = value;
  // @@protoc_insertion_point(field_set:pb.THeroBaseInfo.GoldLv)
}

// optional uint32 WhiteGoldLv = 12;
inline bool THeroBaseInfo::has_whitegoldlv() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void THeroBaseInfo::set_has_whitegoldlv() {
  _has_bits_[0] |= 0x00000800u;
}
inline void THeroBaseInfo::clear_has_whitegoldlv() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void THeroBaseInfo::clear_whitegoldlv() {
  whitegoldlv_ = 0u;
  clear_has_whitegoldlv();
}
inline ::google::protobuf::uint32 THeroBaseInfo::whitegoldlv() const {
  // @@protoc_insertion_point(field_get:pb.THeroBaseInfo.WhiteGoldLv)
  return whitegoldlv_;
}
inline void THeroBaseInfo::set_whitegoldlv(::google::protobuf::uint32 value) {
  set_has_whitegoldlv();
  whitegoldlv_ = value;
  // @@protoc_insertion_point(field_set:pb.THeroBaseInfo.WhiteGoldLv)
}

// -------------------------------------------------------------------

// TModuleAttr

// required uint32 Name = 1;
inline bool TModuleAttr::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TModuleAttr::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TModuleAttr::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TModuleAttr::clear_name() {
  name_ = 0u;
  clear_has_name();
}
inline ::google::protobuf::uint32 TModuleAttr::name() const {
  // @@protoc_insertion_point(field_get:pb.TModuleAttr.Name)
  return name_;
}
inline void TModuleAttr::set_name(::google::protobuf::uint32 value) {
  set_has_name();
  name_ = value;
  // @@protoc_insertion_point(field_set:pb.TModuleAttr.Name)
}

// optional .pb.TSelf Self = 2;
inline bool TModuleAttr::has_self() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TModuleAttr::set_has_self() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TModuleAttr::clear_has_self() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TModuleAttr::clear_self() {
  if (self_ != NULL) self_->::pb::TSelf::Clear();
  clear_has_self();
}
inline const ::pb::TSelf& TModuleAttr::self() const {
  // @@protoc_insertion_point(field_get:pb.TModuleAttr.Self)
  return self_ != NULL ? *self_ : *default_instance_->self_;
}
inline ::pb::TSelf* TModuleAttr::mutable_self() {
  set_has_self();
  if (self_ == NULL) self_ = new ::pb::TSelf;
  // @@protoc_insertion_point(field_mutable:pb.TModuleAttr.Self)
  return self_;
}
inline ::pb::TSelf* TModuleAttr::release_self() {
  clear_has_self();
  ::pb::TSelf* temp = self_;
  self_ = NULL;
  return temp;
}
inline void TModuleAttr::set_allocated_self(::pb::TSelf* self) {
  delete self_;
  self_ = self;
  if (self) {
    set_has_self();
  } else {
    clear_has_self();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TModuleAttr.Self)
}

// optional .pb.THalo Halo = 3;
inline bool TModuleAttr::has_halo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TModuleAttr::set_has_halo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TModuleAttr::clear_has_halo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TModuleAttr::clear_halo() {
  if (halo_ != NULL) halo_->::pb::THalo::Clear();
  clear_has_halo();
}
inline const ::pb::THalo& TModuleAttr::halo() const {
  // @@protoc_insertion_point(field_get:pb.TModuleAttr.Halo)
  return halo_ != NULL ? *halo_ : *default_instance_->halo_;
}
inline ::pb::THalo* TModuleAttr::mutable_halo() {
  set_has_halo();
  if (halo_ == NULL) halo_ = new ::pb::THalo;
  // @@protoc_insertion_point(field_mutable:pb.TModuleAttr.Halo)
  return halo_;
}
inline ::pb::THalo* TModuleAttr::release_halo() {
  clear_has_halo();
  ::pb::THalo* temp = halo_;
  halo_ = NULL;
  return temp;
}
inline void TModuleAttr::set_allocated_halo(::pb::THalo* halo) {
  delete halo_;
  halo_ = halo;
  if (halo) {
    set_has_halo();
  } else {
    clear_has_halo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TModuleAttr.Halo)
}

// repeated .pb.TSkillAttribute Skills = 4;
inline int TModuleAttr::skills_size() const {
  return skills_.size();
}
inline void TModuleAttr::clear_skills() {
  skills_.Clear();
}
inline const ::pb::TSkillAttribute& TModuleAttr::skills(int index) const {
  // @@protoc_insertion_point(field_get:pb.TModuleAttr.Skills)
  return skills_.Get(index);
}
inline ::pb::TSkillAttribute* TModuleAttr::mutable_skills(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TModuleAttr.Skills)
  return skills_.Mutable(index);
}
inline ::pb::TSkillAttribute* TModuleAttr::add_skills() {
  // @@protoc_insertion_point(field_add:pb.TModuleAttr.Skills)
  return skills_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute >&
TModuleAttr::skills() const {
  // @@protoc_insertion_point(field_list:pb.TModuleAttr.Skills)
  return skills_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute >*
TModuleAttr::mutable_skills() {
  // @@protoc_insertion_point(field_mutable_list:pb.TModuleAttr.Skills)
  return &skills_;
}

// optional uint64 Fightforce = 5;
inline bool TModuleAttr::has_fightforce() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TModuleAttr::set_has_fightforce() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TModuleAttr::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TModuleAttr::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TModuleAttr::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TModuleAttr.Fightforce)
  return fightforce_;
}
inline void TModuleAttr::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TModuleAttr.Fightforce)
}

// -------------------------------------------------------------------

// TPosition

// optional uint32 Pos = 1;
inline bool TPosition::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TPosition::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TPosition::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TPosition::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TPosition::pos() const {
  // @@protoc_insertion_point(field_get:pb.TPosition.Pos)
  return pos_;
}
inline void TPosition::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TPosition.Pos)
}

// optional .pb.THeroBaseInfo HeroInfo = 2;
inline bool TPosition::has_heroinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TPosition::set_has_heroinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TPosition::clear_has_heroinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TPosition::clear_heroinfo() {
  if (heroinfo_ != NULL) heroinfo_->::pb::THeroBaseInfo::Clear();
  clear_has_heroinfo();
}
inline const ::pb::THeroBaseInfo& TPosition::heroinfo() const {
  // @@protoc_insertion_point(field_get:pb.TPosition.HeroInfo)
  return heroinfo_ != NULL ? *heroinfo_ : *default_instance_->heroinfo_;
}
inline ::pb::THeroBaseInfo* TPosition::mutable_heroinfo() {
  set_has_heroinfo();
  if (heroinfo_ == NULL) heroinfo_ = new ::pb::THeroBaseInfo;
  // @@protoc_insertion_point(field_mutable:pb.TPosition.HeroInfo)
  return heroinfo_;
}
inline ::pb::THeroBaseInfo* TPosition::release_heroinfo() {
  clear_has_heroinfo();
  ::pb::THeroBaseInfo* temp = heroinfo_;
  heroinfo_ = NULL;
  return temp;
}
inline void TPosition::set_allocated_heroinfo(::pb::THeroBaseInfo* heroinfo) {
  delete heroinfo_;
  heroinfo_ = heroinfo;
  if (heroinfo) {
    set_has_heroinfo();
  } else {
    clear_has_heroinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TPosition.HeroInfo)
}

// repeated .pb.TModuleAttr Data = 3;
inline int TPosition::data_size() const {
  return data_.size();
}
inline void TPosition::clear_data() {
  data_.Clear();
}
inline const ::pb::TModuleAttr& TPosition::data(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPosition.Data)
  return data_.Get(index);
}
inline ::pb::TModuleAttr* TPosition::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPosition.Data)
  return data_.Mutable(index);
}
inline ::pb::TModuleAttr* TPosition::add_data() {
  // @@protoc_insertion_point(field_add:pb.TPosition.Data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TModuleAttr >&
TPosition::data() const {
  // @@protoc_insertion_point(field_list:pb.TPosition.Data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TModuleAttr >*
TPosition::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPosition.Data)
  return &data_;
}

// -------------------------------------------------------------------

// TSquad

// optional .pb.THalo GHalo = 1;
inline bool TSquad::has_ghalo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSquad::set_has_ghalo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSquad::clear_has_ghalo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSquad::clear_ghalo() {
  if (ghalo_ != NULL) ghalo_->::pb::THalo::Clear();
  clear_has_ghalo();
}
inline const ::pb::THalo& TSquad::ghalo() const {
  // @@protoc_insertion_point(field_get:pb.TSquad.GHalo)
  return ghalo_ != NULL ? *ghalo_ : *default_instance_->ghalo_;
}
inline ::pb::THalo* TSquad::mutable_ghalo() {
  set_has_ghalo();
  if (ghalo_ == NULL) ghalo_ = new ::pb::THalo;
  // @@protoc_insertion_point(field_mutable:pb.TSquad.GHalo)
  return ghalo_;
}
inline ::pb::THalo* TSquad::release_ghalo() {
  clear_has_ghalo();
  ::pb::THalo* temp = ghalo_;
  ghalo_ = NULL;
  return temp;
}
inline void TSquad::set_allocated_ghalo(::pb::THalo* ghalo) {
  delete ghalo_;
  ghalo_ = ghalo;
  if (ghalo) {
    set_has_ghalo();
  } else {
    clear_has_ghalo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TSquad.GHalo)
}

// optional .pb.THalo TeamHalo = 2;
inline bool TSquad::has_teamhalo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSquad::set_has_teamhalo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSquad::clear_has_teamhalo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSquad::clear_teamhalo() {
  if (teamhalo_ != NULL) teamhalo_->::pb::THalo::Clear();
  clear_has_teamhalo();
}
inline const ::pb::THalo& TSquad::teamhalo() const {
  // @@protoc_insertion_point(field_get:pb.TSquad.TeamHalo)
  return teamhalo_ != NULL ? *teamhalo_ : *default_instance_->teamhalo_;
}
inline ::pb::THalo* TSquad::mutable_teamhalo() {
  set_has_teamhalo();
  if (teamhalo_ == NULL) teamhalo_ = new ::pb::THalo;
  // @@protoc_insertion_point(field_mutable:pb.TSquad.TeamHalo)
  return teamhalo_;
}
inline ::pb::THalo* TSquad::release_teamhalo() {
  clear_has_teamhalo();
  ::pb::THalo* temp = teamhalo_;
  teamhalo_ = NULL;
  return temp;
}
inline void TSquad::set_allocated_teamhalo(::pb::THalo* teamhalo) {
  delete teamhalo_;
  teamhalo_ = teamhalo;
  if (teamhalo) {
    set_has_teamhalo();
  } else {
    clear_has_teamhalo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TSquad.TeamHalo)
}

// repeated .pb.TPosition Squad = 3;
inline int TSquad::squad_size() const {
  return squad_.size();
}
inline void TSquad::clear_squad() {
  squad_.Clear();
}
inline const ::pb::TPosition& TSquad::squad(int index) const {
  // @@protoc_insertion_point(field_get:pb.TSquad.Squad)
  return squad_.Get(index);
}
inline ::pb::TPosition* TSquad::mutable_squad(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TSquad.Squad)
  return squad_.Mutable(index);
}
inline ::pb::TPosition* TSquad::add_squad() {
  // @@protoc_insertion_point(field_add:pb.TSquad.Squad)
  return squad_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPosition >&
TSquad::squad() const {
  // @@protoc_insertion_point(field_list:pb.TSquad.Squad)
  return squad_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPosition >*
TSquad::mutable_squad() {
  // @@protoc_insertion_point(field_mutable_list:pb.TSquad.Squad)
  return &squad_;
}

// optional uint64 Uid = 4;
inline bool TSquad::has_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TSquad::set_has_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TSquad::clear_has_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TSquad::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TSquad::uid() const {
  // @@protoc_insertion_point(field_get:pb.TSquad.Uid)
  return uid_;
}
inline void TSquad::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TSquad.Uid)
}

// optional uint32 Starter = 5;
inline bool TSquad::has_starter() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TSquad::set_has_starter() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TSquad::clear_has_starter() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TSquad::clear_starter() {
  starter_ = 0u;
  clear_has_starter();
}
inline ::google::protobuf::uint32 TSquad::starter() const {
  // @@protoc_insertion_point(field_get:pb.TSquad.Starter)
  return starter_;
}
inline void TSquad::set_starter(::google::protobuf::uint32 value) {
  set_has_starter();
  starter_ = value;
  // @@protoc_insertion_point(field_set:pb.TSquad.Starter)
}

// -------------------------------------------------------------------

// TPositionArr

// repeated .pb.TPosition Squad = 1;
inline int TPositionArr::squad_size() const {
  return squad_.size();
}
inline void TPositionArr::clear_squad() {
  squad_.Clear();
}
inline const ::pb::TPosition& TPositionArr::squad(int index) const {
  // @@protoc_insertion_point(field_get:pb.TPositionArr.Squad)
  return squad_.Get(index);
}
inline ::pb::TPosition* TPositionArr::mutable_squad(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TPositionArr.Squad)
  return squad_.Mutable(index);
}
inline ::pb::TPosition* TPositionArr::add_squad() {
  // @@protoc_insertion_point(field_add:pb.TPositionArr.Squad)
  return squad_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPosition >&
TPositionArr::squad() const {
  // @@protoc_insertion_point(field_list:pb.TPositionArr.Squad)
  return squad_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPosition >*
TPositionArr::mutable_squad() {
  // @@protoc_insertion_point(field_mutable_list:pb.TPositionArr.Squad)
  return &squad_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EAttrSrc> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EAttrSrc>() {
  return ::pb::EAttrSrc_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_module_2fAttributer_2eproto__INCLUDED
