// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/BattleBase.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/BattleBase.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TSkillStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSkillStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUnitStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUnitStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTDSingle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTDSingle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTDTimeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTDTimeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSkillCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSkillCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSkillCountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSkillCountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TPointBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPointBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFriendCD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFriendCD_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTDRecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTDRecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUnitWheelWarRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUnitWheelWarRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* TArmyWheelWarRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TArmyWheelWarRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFieldWheelWarRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFieldWheelWarRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWheelWarFieldStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWheelWarFieldStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGetBattleArgsFromMajorUsingReplacementReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGetBattleArgsFromMajorUsingReplacementReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRushInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRushInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTreadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTreadInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWinnerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWinnerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSpecialEntrance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSpecialEntrance_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWheelWarRidingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWheelWarRidingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBattleResultArrayReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBattleResultArrayReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBattleResultArrayRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBattleResultArrayRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGetBattleArgsWithUidListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGetBattleArgsWithUidListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TWarRidingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TWarRidingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGetBattleArgsWithUidReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGetBattleArgsWithUidReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGetBattleArgsFromMajorSpecifyWarRiding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGetBattleArgsFromMajorSpecifyWarRiding_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBattleSoulInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBattleSoulInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EGroupMatchType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBTAction_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fBattleBase_2eproto() {
  protobuf_AddDesc_net_2fBattleBase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/BattleBase.proto");
  GOOGLE_CHECK(file != NULL);
  TSkillStatistics_descriptor_ = file->message_type(0);
  static const int TSkillStatistics_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSkillStatistics, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSkillStatistics, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSkillStatistics, totaleffecttarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSkillStatistics, totalphycialdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSkillStatistics, totalmagicaldamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSkillStatistics, totalheal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSkillStatistics, totalsuckblood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSkillStatistics, collisionnum_),
  };
  TSkillStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSkillStatistics_descriptor_,
      TSkillStatistics::default_instance_,
      TSkillStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSkillStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSkillStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSkillStatistics));
  TUnitStatistics_descriptor_ = file->message_type(1);
  static const int TUnitStatistics_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, totalphycialdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, totalmagicaldamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, totalheal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, phycialdamageundertake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, magicaldamageundertake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, skillexecutecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, dodgecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, physicalbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, exemptioncount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, magicalbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, parrycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, resistcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, criticaldamagecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, criticaldamagebase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, criticalhealcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, criticalhealbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, becriticaldamagecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, bedamagebase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, skillstatisticsarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, totalsuckblood_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, timetolive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, realheal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, totalabsorbblood_),
  };
  TUnitStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUnitStatistics_descriptor_,
      TUnitStatistics::default_instance_,
      TUnitStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUnitStatistics));
  TTDSingle_descriptor_ = file->message_type(2);
  static const int TTDSingle_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDSingle, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDSingle, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDSingle, wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDSingle, pathindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDSingle, energy_),
  };
  TTDSingle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTDSingle_descriptor_,
      TTDSingle::default_instance_,
      TTDSingle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDSingle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDSingle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTDSingle));
  TTDTimeInfo_descriptor_ = file->message_type(3);
  static const int TTDTimeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDTimeInfo, gametime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDTimeInfo, enemyarr_),
  };
  TTDTimeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTDTimeInfo_descriptor_,
      TTDTimeInfo::default_instance_,
      TTDTimeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDTimeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDTimeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTDTimeInfo));
  TSkillCount_descriptor_ = file->message_type(4);
  static const int TSkillCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSkillCount, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSkillCount, count_),
  };
  TSkillCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSkillCount_descriptor_,
      TSkillCount::default_instance_,
      TSkillCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSkillCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSkillCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSkillCount));
  TSkillCountInfo_descriptor_ = file->message_type(5);
  static const int TSkillCountInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSkillCountInfo, skillcountarr_),
  };
  TSkillCountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSkillCountInfo_descriptor_,
      TSkillCountInfo::default_instance_,
      TSkillCountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSkillCountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSkillCountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSkillCountInfo));
  TPointBuff_descriptor_ = file->message_type(6);
  static const int TPointBuff_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPointBuff, pointindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPointBuff, buffarr_),
  };
  TPointBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPointBuff_descriptor_,
      TPointBuff::default_instance_,
      TPointBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPointBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPointBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPointBuff));
  TFriendCD_descriptor_ = file->message_type(7);
  static const int TFriendCD_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendCD, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendCD, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendCD, htid_),
  };
  TFriendCD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFriendCD_descriptor_,
      TFriendCD::default_instance_,
      TFriendCD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendCD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFriendCD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFriendCD));
  TTDRecordInfo_descriptor_ = file->message_type(8);
  static const int TTDRecordInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDRecordInfo, friendcd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDRecordInfo, restenergy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDRecordInfo, skillcounter_),
  };
  TTDRecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTDRecordInfo_descriptor_,
      TTDRecordInfo::default_instance_,
      TTDRecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDRecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTDRecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTDRecordInfo));
  TUnitWheelWarRecord_descriptor_ = file->message_type(9);
  static const int TUnitWheelWarRecord_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitWheelWarRecord, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitWheelWarRecord, htid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitWheelWarRecord, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitWheelWarRecord, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitWheelWarRecord, currage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitWheelWarRecord, damageout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitWheelWarRecord, damagein_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitWheelWarRecord, healout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitWheelWarRecord, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitWheelWarRecord, level_),
  };
  TUnitWheelWarRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUnitWheelWarRecord_descriptor_,
      TUnitWheelWarRecord::default_instance_,
      TUnitWheelWarRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitWheelWarRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUnitWheelWarRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUnitWheelWarRecord));
  TArmyWheelWarRecord_descriptor_ = file->message_type(10);
  static const int TArmyWheelWarRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmyWheelWarRecord, armyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmyWheelWarRecord, unitarr_),
  };
  TArmyWheelWarRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TArmyWheelWarRecord_descriptor_,
      TArmyWheelWarRecord::default_instance_,
      TArmyWheelWarRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmyWheelWarRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TArmyWheelWarRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TArmyWheelWarRecord));
  TFieldWheelWarRecord_descriptor_ = file->message_type(11);
  static const int TFieldWheelWarRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFieldWheelWarRecord, fieldindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFieldWheelWarRecord, army1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFieldWheelWarRecord, army2_),
  };
  TFieldWheelWarRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFieldWheelWarRecord_descriptor_,
      TFieldWheelWarRecord::default_instance_,
      TFieldWheelWarRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFieldWheelWarRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFieldWheelWarRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFieldWheelWarRecord));
  TWheelWarFieldStatus_descriptor_ = file->message_type(12);
  static const int TWheelWarFieldStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWheelWarFieldStatus, fieldrecordarr_),
  };
  TWheelWarFieldStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWheelWarFieldStatus_descriptor_,
      TWheelWarFieldStatus::default_instance_,
      TWheelWarFieldStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWheelWarFieldStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWheelWarFieldStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWheelWarFieldStatus));
  TGetBattleArgsFromMajorUsingReplacementReq_descriptor_ = file->message_type(13);
  static const int TGetBattleArgsFromMajorUsingReplacementReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsFromMajorUsingReplacementReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsFromMajorUsingReplacementReq, replacedhtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsFromMajorUsingReplacementReq, newhtid_),
  };
  TGetBattleArgsFromMajorUsingReplacementReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGetBattleArgsFromMajorUsingReplacementReq_descriptor_,
      TGetBattleArgsFromMajorUsingReplacementReq::default_instance_,
      TGetBattleArgsFromMajorUsingReplacementReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsFromMajorUsingReplacementReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsFromMajorUsingReplacementReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGetBattleArgsFromMajorUsingReplacementReq));
  TRushInfo_descriptor_ = file->message_type(14);
  static const int TRushInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRushInfo, army1pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRushInfo, army2pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRushInfo, rushresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRushInfo, army1horseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRushInfo, army2horseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRushInfo, targetposarr_),
  };
  TRushInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRushInfo_descriptor_,
      TRushInfo::default_instance_,
      TRushInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRushInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRushInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRushInfo));
  TTreadInfo_descriptor_ = file->message_type(15);
  static const int TTreadInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreadInfo, armyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreadInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreadInfo, targetposarr_),
  };
  TTreadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTreadInfo_descriptor_,
      TTreadInfo::default_instance_,
      TTreadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTreadInfo));
  TWinnerInfo_descriptor_ = file->message_type(16);
  static const int TWinnerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWinnerInfo, winner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWinnerInfo, winarr_),
  };
  TWinnerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWinnerInfo_descriptor_,
      TWinnerInfo::default_instance_,
      TWinnerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWinnerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWinnerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWinnerInfo));
  TSpecialEntrance_descriptor_ = file->message_type(17);
  static const int TSpecialEntrance_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSpecialEntrance, rushinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSpecialEntrance, treadinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSpecialEntrance, winnerinfo_),
  };
  TSpecialEntrance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSpecialEntrance_descriptor_,
      TSpecialEntrance::default_instance_,
      TSpecialEntrance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSpecialEntrance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSpecialEntrance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSpecialEntrance));
  TWheelWarRidingInfo_descriptor_ = file->message_type(18);
  static const int TWheelWarRidingInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWheelWarRidingInfo, hasinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWheelWarRidingInfo, winnerinfos_),
  };
  TWheelWarRidingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWheelWarRidingInfo_descriptor_,
      TWheelWarRidingInfo::default_instance_,
      TWheelWarRidingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWheelWarRidingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWheelWarRidingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWheelWarRidingInfo));
  TBattleResultArrayReq_descriptor_ = file->message_type(19);
  static const int TBattleResultArrayReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResultArrayReq, ridarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResultArrayReq, serverid_),
  };
  TBattleResultArrayReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBattleResultArrayReq_descriptor_,
      TBattleResultArrayReq::default_instance_,
      TBattleResultArrayReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResultArrayReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResultArrayReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBattleResultArrayReq));
  TBattleResultArrayRsp_descriptor_ = file->message_type(20);
  static const int TBattleResultArrayRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResultArrayRsp, battleresultarr_),
  };
  TBattleResultArrayRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBattleResultArrayRsp_descriptor_,
      TBattleResultArrayRsp::default_instance_,
      TBattleResultArrayRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResultArrayRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleResultArrayRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBattleResultArrayRsp));
  TGetBattleArgsWithUidListReq_descriptor_ = file->message_type(21);
  static const int TGetBattleArgsWithUidListReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsWithUidListReq, uidarr_),
  };
  TGetBattleArgsWithUidListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGetBattleArgsWithUidListReq_descriptor_,
      TGetBattleArgsWithUidListReq::default_instance_,
      TGetBattleArgsWithUidListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsWithUidListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsWithUidListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGetBattleArgsWithUidListReq));
  TWarRidingInfo_descriptor_ = file->message_type(22);
  static const int TWarRidingInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingInfo, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingInfo, fightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingInfo, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingInfo, trampleskillid_),
  };
  TWarRidingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TWarRidingInfo_descriptor_,
      TWarRidingInfo::default_instance_,
      TWarRidingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TWarRidingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TWarRidingInfo));
  TGetBattleArgsWithUidReq_descriptor_ = file->message_type(23);
  static const int TGetBattleArgsWithUidReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsWithUidReq, uid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsWithUidReq, uid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsWithUidReq, battleid_),
  };
  TGetBattleArgsWithUidReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGetBattleArgsWithUidReq_descriptor_,
      TGetBattleArgsWithUidReq::default_instance_,
      TGetBattleArgsWithUidReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsWithUidReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsWithUidReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGetBattleArgsWithUidReq));
  TGetBattleArgsFromMajorSpecifyWarRiding_descriptor_ = file->message_type(24);
  static const int TGetBattleArgsFromMajorSpecifyWarRiding_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsFromMajorSpecifyWarRiding, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsFromMajorSpecifyWarRiding, warridingtidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsFromMajorSpecifyWarRiding, warridinglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsFromMajorSpecifyWarRiding, warridingadvlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsFromMajorSpecifyWarRiding, warridingstar_),
  };
  TGetBattleArgsFromMajorSpecifyWarRiding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGetBattleArgsFromMajorSpecifyWarRiding_descriptor_,
      TGetBattleArgsFromMajorSpecifyWarRiding::default_instance_,
      TGetBattleArgsFromMajorSpecifyWarRiding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsFromMajorSpecifyWarRiding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGetBattleArgsFromMajorSpecifyWarRiding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGetBattleArgsFromMajorSpecifyWarRiding));
  TBattleSoulInfo_descriptor_ = file->message_type(25);
  static const int TBattleSoulInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleSoulInfo, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleSoulInfo, triggerskillidarray_),
  };
  TBattleSoulInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBattleSoulInfo_descriptor_,
      TBattleSoulInfo::default_instance_,
      TBattleSoulInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleSoulInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBattleSoulInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBattleSoulInfo));
  EGroupMatchType_descriptor_ = file->enum_type(0);
  EBTAction_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fBattleBase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSkillStatistics_descriptor_, &TSkillStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUnitStatistics_descriptor_, &TUnitStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTDSingle_descriptor_, &TTDSingle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTDTimeInfo_descriptor_, &TTDTimeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSkillCount_descriptor_, &TSkillCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSkillCountInfo_descriptor_, &TSkillCountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPointBuff_descriptor_, &TPointBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFriendCD_descriptor_, &TFriendCD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTDRecordInfo_descriptor_, &TTDRecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUnitWheelWarRecord_descriptor_, &TUnitWheelWarRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TArmyWheelWarRecord_descriptor_, &TArmyWheelWarRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFieldWheelWarRecord_descriptor_, &TFieldWheelWarRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWheelWarFieldStatus_descriptor_, &TWheelWarFieldStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGetBattleArgsFromMajorUsingReplacementReq_descriptor_, &TGetBattleArgsFromMajorUsingReplacementReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRushInfo_descriptor_, &TRushInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTreadInfo_descriptor_, &TTreadInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWinnerInfo_descriptor_, &TWinnerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSpecialEntrance_descriptor_, &TSpecialEntrance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWheelWarRidingInfo_descriptor_, &TWheelWarRidingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBattleResultArrayReq_descriptor_, &TBattleResultArrayReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBattleResultArrayRsp_descriptor_, &TBattleResultArrayRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGetBattleArgsWithUidListReq_descriptor_, &TGetBattleArgsWithUidListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TWarRidingInfo_descriptor_, &TWarRidingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGetBattleArgsWithUidReq_descriptor_, &TGetBattleArgsWithUidReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGetBattleArgsFromMajorSpecifyWarRiding_descriptor_, &TGetBattleArgsFromMajorSpecifyWarRiding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBattleSoulInfo_descriptor_, &TBattleSoulInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fBattleBase_2eproto() {
  delete TSkillStatistics::default_instance_;
  delete TSkillStatistics_reflection_;
  delete TUnitStatistics::default_instance_;
  delete TUnitStatistics_reflection_;
  delete TTDSingle::default_instance_;
  delete TTDSingle_reflection_;
  delete TTDTimeInfo::default_instance_;
  delete TTDTimeInfo_reflection_;
  delete TSkillCount::default_instance_;
  delete TSkillCount_reflection_;
  delete TSkillCountInfo::default_instance_;
  delete TSkillCountInfo_reflection_;
  delete TPointBuff::default_instance_;
  delete TPointBuff_reflection_;
  delete TFriendCD::default_instance_;
  delete TFriendCD_reflection_;
  delete TTDRecordInfo::default_instance_;
  delete TTDRecordInfo_reflection_;
  delete TUnitWheelWarRecord::default_instance_;
  delete TUnitWheelWarRecord_reflection_;
  delete TArmyWheelWarRecord::default_instance_;
  delete TArmyWheelWarRecord_reflection_;
  delete TFieldWheelWarRecord::default_instance_;
  delete TFieldWheelWarRecord_reflection_;
  delete TWheelWarFieldStatus::default_instance_;
  delete TWheelWarFieldStatus_reflection_;
  delete TGetBattleArgsFromMajorUsingReplacementReq::default_instance_;
  delete TGetBattleArgsFromMajorUsingReplacementReq_reflection_;
  delete TRushInfo::default_instance_;
  delete TRushInfo_reflection_;
  delete TTreadInfo::default_instance_;
  delete TTreadInfo_reflection_;
  delete TWinnerInfo::default_instance_;
  delete TWinnerInfo_reflection_;
  delete TSpecialEntrance::default_instance_;
  delete TSpecialEntrance_reflection_;
  delete TWheelWarRidingInfo::default_instance_;
  delete TWheelWarRidingInfo_reflection_;
  delete TBattleResultArrayReq::default_instance_;
  delete TBattleResultArrayReq_reflection_;
  delete TBattleResultArrayRsp::default_instance_;
  delete TBattleResultArrayRsp_reflection_;
  delete TGetBattleArgsWithUidListReq::default_instance_;
  delete TGetBattleArgsWithUidListReq_reflection_;
  delete TWarRidingInfo::default_instance_;
  delete TWarRidingInfo_reflection_;
  delete TGetBattleArgsWithUidReq::default_instance_;
  delete TGetBattleArgsWithUidReq_reflection_;
  delete TGetBattleArgsFromMajorSpecifyWarRiding::default_instance_;
  delete TGetBattleArgsFromMajorSpecifyWarRiding_reflection_;
  delete TBattleSoulInfo::default_instance_;
  delete TBattleSoulInfo_reflection_;
}

void protobuf_AddDesc_net_2fBattleBase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024net/BattleBase.proto\022\002pb\"\306\001\n\020TSkillSta"
    "tistics\022\017\n\007SkillId\030\001 \001(\r\022\r\n\005Count\030\002 \001(\r\022"
    "\031\n\021TotalEffectTarget\030\003 \001(\r\022\032\n\022TotalPhyci"
    "alDamage\030\004 \001(\004\022\032\n\022TotalMagicalDamage\030\005 \001"
    "(\004\022\021\n\tTotalHeal\030\006 \001(\004\022\026\n\016TotalSuckBlood\030"
    "\007 \001(\004\022\024\n\014CollisionNum\030\010 \001(\r\"\344\004\n\017TUnitSta"
    "tistics\022\032\n\022TotalPhycialDamage\030\001 \001(\004\022\032\n\022T"
    "otalMagicalDamage\030\002 \001(\004\022\021\n\tTotalHeal\030\003 \001"
    "(\004\022\036\n\026PhycialDamageUndertake\030\004 \001(\004\022\036\n\026Ma"
    "gicalDamageUndertake\030\005 \001(\004\022\031\n\021SkillExecu"
    "teCount\030\006 \001(\r\022\022\n\nDodgeCount\030\007 \001(\r\022\024\n\014Phy"
    "sicalBase\030\010 \001(\r\022\026\n\016ExemptionCount\030\t \001(\r\022"
    "\023\n\013MagicalBase\030\n \001(\r\022\022\n\nParryCount\030\013 \001(\r"
    "\022\023\n\013ResistCount\030\014 \001(\r\022\033\n\023CriticalDamageC"
    "ount\030\r \001(\r\022\032\n\022CriticalDamageBase\030\016 \001(\r\022\031"
    "\n\021CriticalHealCount\030\017 \001(\r\022\030\n\020CriticalHea"
    "lBase\030\020 \001(\r\022\035\n\025BeCriticalDamageCount\030\021 \001"
    "(\r\022\024\n\014BeDamageBase\030\022 \001(\r\0220\n\022SkillStatist"
    "icsArr\030\023 \003(\0132\024.pb.TSkillStatistics\022\026\n\016To"
    "talSuckBlood\030\024 \001(\004\022\022\n\nTimeToLive\030\025 \001(\r\022\020"
    "\n\010RealHeal\030\026 \001(\004\022\030\n\020TotalAbsorbBlood\030\027 \001"
    "(\004\"V\n\tTTDSingle\022\013\n\003Hid\030\001 \002(\r\022\013\n\003Pos\030\002 \002("
    "\r\022\014\n\004Wave\030\003 \001(\005\022\021\n\tPathIndex\030\004 \001(\005\022\016\n\006En"
    "ergy\030\005 \001(\005\"@\n\013TTDTimeInfo\022\020\n\010GameTime\030\001 "
    "\002(\r\022\037\n\010EnemyArr\030\002 \003(\0132\r.pb.TTDSingle\"-\n\013"
    "TSkillCount\022\017\n\007SkillId\030\001 \002(\r\022\r\n\005Count\030\002 "
    "\002(\r\"9\n\017TSkillCountInfo\022&\n\rSkillCountArr\030"
    "\001 \003(\0132\017.pb.TSkillCount\"1\n\nTPointBuff\022\022\n\n"
    "PointIndex\030\001 \001(\005\022\017\n\007BuffArr\030\002 \003(\005\"2\n\tTFr"
    "iendCD\022\013\n\003Hid\030\001 \001(\r\022\n\n\002CD\030\002 \001(\r\022\014\n\004Htid\030"
    "\003 \001(\r\"k\n\rTTDRecordInfo\022\037\n\010FriendCD\030\001 \003(\013"
    "2\r.pb.TFriendCD\022\022\n\nRestEnergy\030\002 \001(\r\022%\n\014S"
    "killCounter\030\003 \003(\0132\017.pb.TSkillCount\"\262\001\n\023T"
    "UnitWheelWarRecord\022\013\n\003Hid\030\001 \001(\r\022\014\n\004Htid\030"
    "\002 \001(\r\022\r\n\005CurHp\030\003 \001(\004\022\r\n\005MaxHp\030\004 \001(\004\022\017\n\007C"
    "urRage\030\005 \001(\r\022\021\n\tDamageOut\030\006 \001(\004\022\020\n\010Damag"
    "eIn\030\007 \001(\004\022\017\n\007HealOut\030\010 \001(\004\022\014\n\004Star\030\t \001(\r"
    "\022\r\n\005Level\030\n \001(\r\"O\n\023TArmyWheelWarRecord\022\016"
    "\n\006ArmyId\030\001 \001(\005\022(\n\007UnitArr\030\002 \003(\0132\027.pb.TUn"
    "itWheelWarRecord\"z\n\024TFieldWheelWarRecord"
    "\022\022\n\nFieldIndex\030\001 \001(\005\022&\n\005Army1\030\002 \001(\0132\027.pb"
    ".TArmyWheelWarRecord\022&\n\005Army2\030\003 \001(\0132\027.pb"
    ".TArmyWheelWarRecord\"H\n\024TWheelWarFieldSt"
    "atus\0220\n\016FieldRecordArr\030\001 \003(\0132\030.pb.TField"
    "WheelWarRecord\"`\n*TGetBattleArgsFromMajo"
    "rUsingReplacementReq\022\013\n\003Uid\030\001 \001(\004\022\024\n\014Rep"
    "lacedHtid\030\002 \001(\r\022\017\n\007NewHtid\030\003 \001(\r\"\205\001\n\tTRu"
    "shInfo\022\020\n\010Army1Pos\030\001 \001(\r\022\020\n\010Army2Pos\030\002 \001"
    "(\r\022\022\n\nRushResult\030\003 \001(\r\022\024\n\014Army1HorseId\030\004"
    " \001(\r\022\024\n\014Army2HorseId\030\005 \001(\r\022\024\n\014TargetPosA"
    "rr\030\006 \003(\r\"\?\n\nTTreadInfo\022\016\n\006ArmyId\030\001 \001(\r\022\013"
    "\n\003Pos\030\002 \001(\r\022\024\n\014TargetPosArr\030\003 \003(\r\"-\n\013TWi"
    "nnerInfo\022\016\n\006Winner\030\001 \001(\r\022\016\n\006WinArr\030\002 \003(\r"
    "\"\201\001\n\020TSpecialEntrance\022\"\n\013RushInfoArr\030\001 \003"
    "(\0132\r.pb.TRushInfo\022$\n\014TreadInfoArr\030\002 \003(\0132"
    "\016.pb.TTreadInfo\022#\n\nWinnerInfo\030\003 \001(\0132\017.pb"
    ".TWinnerInfo\"L\n\023TWheelWarRidingInfo\022\017\n\007H"
    "asInfo\030\001 \001(\r\022$\n\013WinnerInfos\030\002 \003(\0132\017.pb.T"
    "WinnerInfo\"9\n\025TBattleResultArrayReq\022\016\n\006r"
    "idArr\030\001 \003(\004\022\020\n\010ServerId\030\002 \001(\t\"0\n\025TBattle"
    "ResultArrayRsp\022\027\n\017battleResultArr\030\001 \003(\014\""
    ".\n\034TGetBattleArgsWithUidListReq\022\016\n\006UidAr"
    "r\030\001 \003(\004\"Z\n\016TWarRidingInfo\022\013\n\003Tid\030\001 \001(\r\022\022"
    "\n\nFightForce\030\002 \001(\004\022\017\n\007SkillId\030\003 \001(\r\022\026\n\016T"
    "rampleSkillId\030\004 \001(\r\"H\n\030TGetBattleArgsWit"
    "hUidReq\022\014\n\004Uid1\030\001 \001(\004\022\014\n\004Uid2\030\002 \001(\004\022\020\n\010B"
    "attleId\030\003 \001(\r\"\226\001\n\'TGetBattleArgsFromMajo"
    "rSpecifyWarRiding\022\013\n\003Uid\030\001 \001(\004\022\027\n\017WarRid"
    "ingTidArr\030\002 \003(\r\022\026\n\016WarRidingLevel\030\003 \001(\r\022"
    "\026\n\016WarRidingAdvLv\030\004 \001(\r\022\025\n\rWarRidingStar"
    "\030\005 \001(\r\"\?\n\017TBattleSoulInfo\022\017\n\007SkillId\030\001 \001"
    "(\r\022\033\n\023TriggerSkillIdArray\030\002 \003(\r*H\n\017EGrou"
    "pMatchType\022\027\n\023EBattleTypeWheelWar\020\001\022\034\n\030E"
    "BattleTypeGroupKnockout\020\002*\203\004\n\tEBTAction\022"
    "\026\n\022EBTATaskBattleNone\020\000\022(\n#EBTATask_Comm"
    "on_ShowBlackScreenText\020\356\007\022\'\n\"EBTATaskBat"
    "tlePlayEffectStandPoint\020\324\017\022\030\n\023EBTATaskHe"
    "roVisible\020\332\017\022\030\n\023EBTATaskBattlePause\020\333\017\022\034"
    "\n\027EBTATaskBattleHideLayer\020\334\017\022\033\n\026EBTATask"
    "HeroPlayEffect\020\342\017\022\025\n\020EBTATaskHeroAnim\020\343\017"
    "\022\032\n\025EBTATaskHeroChangeDir\020\344\017\022\036\n\031EBTATask"
    "SceneInsertObject\020\345\017\022\036\n\031EBTATaskControlO"
    "bjectMove\020\346\017\022\031\n\024EBTATaskRemoveObject\020\347\017\022"
    "\031\n\024EBTATaskRemoveEffect\020\350\017\022\030\n\023EBTATaskRe"
    "setCamera\020\354\017\022\033\n\026EBTATaskUseCameraTrack\020\355"
    "\017\022\033\n\026EBTATaskHeadIdentifier\020\356\017\022\037\n\032EBTATa"
    "skActiveScreenEffect\020\363\017", 3463);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/BattleBase.proto", &protobuf_RegisterTypes);
  TSkillStatistics::default_instance_ = new TSkillStatistics();
  TUnitStatistics::default_instance_ = new TUnitStatistics();
  TTDSingle::default_instance_ = new TTDSingle();
  TTDTimeInfo::default_instance_ = new TTDTimeInfo();
  TSkillCount::default_instance_ = new TSkillCount();
  TSkillCountInfo::default_instance_ = new TSkillCountInfo();
  TPointBuff::default_instance_ = new TPointBuff();
  TFriendCD::default_instance_ = new TFriendCD();
  TTDRecordInfo::default_instance_ = new TTDRecordInfo();
  TUnitWheelWarRecord::default_instance_ = new TUnitWheelWarRecord();
  TArmyWheelWarRecord::default_instance_ = new TArmyWheelWarRecord();
  TFieldWheelWarRecord::default_instance_ = new TFieldWheelWarRecord();
  TWheelWarFieldStatus::default_instance_ = new TWheelWarFieldStatus();
  TGetBattleArgsFromMajorUsingReplacementReq::default_instance_ = new TGetBattleArgsFromMajorUsingReplacementReq();
  TRushInfo::default_instance_ = new TRushInfo();
  TTreadInfo::default_instance_ = new TTreadInfo();
  TWinnerInfo::default_instance_ = new TWinnerInfo();
  TSpecialEntrance::default_instance_ = new TSpecialEntrance();
  TWheelWarRidingInfo::default_instance_ = new TWheelWarRidingInfo();
  TBattleResultArrayReq::default_instance_ = new TBattleResultArrayReq();
  TBattleResultArrayRsp::default_instance_ = new TBattleResultArrayRsp();
  TGetBattleArgsWithUidListReq::default_instance_ = new TGetBattleArgsWithUidListReq();
  TWarRidingInfo::default_instance_ = new TWarRidingInfo();
  TGetBattleArgsWithUidReq::default_instance_ = new TGetBattleArgsWithUidReq();
  TGetBattleArgsFromMajorSpecifyWarRiding::default_instance_ = new TGetBattleArgsFromMajorSpecifyWarRiding();
  TBattleSoulInfo::default_instance_ = new TBattleSoulInfo();
  TSkillStatistics::default_instance_->InitAsDefaultInstance();
  TUnitStatistics::default_instance_->InitAsDefaultInstance();
  TTDSingle::default_instance_->InitAsDefaultInstance();
  TTDTimeInfo::default_instance_->InitAsDefaultInstance();
  TSkillCount::default_instance_->InitAsDefaultInstance();
  TSkillCountInfo::default_instance_->InitAsDefaultInstance();
  TPointBuff::default_instance_->InitAsDefaultInstance();
  TFriendCD::default_instance_->InitAsDefaultInstance();
  TTDRecordInfo::default_instance_->InitAsDefaultInstance();
  TUnitWheelWarRecord::default_instance_->InitAsDefaultInstance();
  TArmyWheelWarRecord::default_instance_->InitAsDefaultInstance();
  TFieldWheelWarRecord::default_instance_->InitAsDefaultInstance();
  TWheelWarFieldStatus::default_instance_->InitAsDefaultInstance();
  TGetBattleArgsFromMajorUsingReplacementReq::default_instance_->InitAsDefaultInstance();
  TRushInfo::default_instance_->InitAsDefaultInstance();
  TTreadInfo::default_instance_->InitAsDefaultInstance();
  TWinnerInfo::default_instance_->InitAsDefaultInstance();
  TSpecialEntrance::default_instance_->InitAsDefaultInstance();
  TWheelWarRidingInfo::default_instance_->InitAsDefaultInstance();
  TBattleResultArrayReq::default_instance_->InitAsDefaultInstance();
  TBattleResultArrayRsp::default_instance_->InitAsDefaultInstance();
  TGetBattleArgsWithUidListReq::default_instance_->InitAsDefaultInstance();
  TWarRidingInfo::default_instance_->InitAsDefaultInstance();
  TGetBattleArgsWithUidReq::default_instance_->InitAsDefaultInstance();
  TGetBattleArgsFromMajorSpecifyWarRiding::default_instance_->InitAsDefaultInstance();
  TBattleSoulInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fBattleBase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fBattleBase_2eproto {
  StaticDescriptorInitializer_net_2fBattleBase_2eproto() {
    protobuf_AddDesc_net_2fBattleBase_2eproto();
  }
} static_descriptor_initializer_net_2fBattleBase_2eproto_;
const ::google::protobuf::EnumDescriptor* EGroupMatchType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGroupMatchType_descriptor_;
}
bool EGroupMatchType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBTAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBTAction_descriptor_;
}
bool EBTAction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1006:
    case 2004:
    case 2010:
    case 2011:
    case 2012:
    case 2018:
    case 2019:
    case 2020:
    case 2021:
    case 2022:
    case 2023:
    case 2024:
    case 2028:
    case 2029:
    case 2030:
    case 2035:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TSkillStatistics::kSkillIdFieldNumber;
const int TSkillStatistics::kCountFieldNumber;
const int TSkillStatistics::kTotalEffectTargetFieldNumber;
const int TSkillStatistics::kTotalPhycialDamageFieldNumber;
const int TSkillStatistics::kTotalMagicalDamageFieldNumber;
const int TSkillStatistics::kTotalHealFieldNumber;
const int TSkillStatistics::kTotalSuckBloodFieldNumber;
const int TSkillStatistics::kCollisionNumFieldNumber;
#endif  // !_MSC_VER

TSkillStatistics::TSkillStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSkillStatistics)
}

void TSkillStatistics::InitAsDefaultInstance() {
}

TSkillStatistics::TSkillStatistics(const TSkillStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSkillStatistics)
}

void TSkillStatistics::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  count_ = 0u;
  totaleffecttarget_ = 0u;
  totalphycialdamage_ = GOOGLE_ULONGLONG(0);
  totalmagicaldamage_ = GOOGLE_ULONGLONG(0);
  totalheal_ = GOOGLE_ULONGLONG(0);
  totalsuckblood_ = GOOGLE_ULONGLONG(0);
  collisionnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSkillStatistics::~TSkillStatistics() {
  // @@protoc_insertion_point(destructor:pb.TSkillStatistics)
  SharedDtor();
}

void TSkillStatistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSkillStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSkillStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSkillStatistics_descriptor_;
}

const TSkillStatistics& TSkillStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TSkillStatistics* TSkillStatistics::default_instance_ = NULL;

TSkillStatistics* TSkillStatistics::New() const {
  return new TSkillStatistics;
}

void TSkillStatistics::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSkillStatistics*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(skillid_, totalsuckblood_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSkillStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSkillStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SkillId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Count;
        break;
      }

      // optional uint32 Count = 2;
      case 2: {
        if (tag == 16) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TotalEffectTarget;
        break;
      }

      // optional uint32 TotalEffectTarget = 3;
      case 3: {
        if (tag == 24) {
         parse_TotalEffectTarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totaleffecttarget_)));
          set_has_totaleffecttarget();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TotalPhycialDamage;
        break;
      }

      // optional uint64 TotalPhycialDamage = 4;
      case 4: {
        if (tag == 32) {
         parse_TotalPhycialDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalphycialdamage_)));
          set_has_totalphycialdamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_TotalMagicalDamage;
        break;
      }

      // optional uint64 TotalMagicalDamage = 5;
      case 5: {
        if (tag == 40) {
         parse_TotalMagicalDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalmagicaldamage_)));
          set_has_totalmagicaldamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_TotalHeal;
        break;
      }

      // optional uint64 TotalHeal = 6;
      case 6: {
        if (tag == 48) {
         parse_TotalHeal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalheal_)));
          set_has_totalheal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_TotalSuckBlood;
        break;
      }

      // optional uint64 TotalSuckBlood = 7;
      case 7: {
        if (tag == 56) {
         parse_TotalSuckBlood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalsuckblood_)));
          set_has_totalsuckblood();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_CollisionNum;
        break;
      }

      // optional uint32 CollisionNum = 8;
      case 8: {
        if (tag == 64) {
         parse_CollisionNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collisionnum_)));
          set_has_collisionnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSkillStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSkillStatistics)
  return false;
#undef DO_
}

void TSkillStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSkillStatistics)
  // optional uint32 SkillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // optional uint32 Count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional uint32 TotalEffectTarget = 3;
  if (has_totaleffecttarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totaleffecttarget(), output);
  }

  // optional uint64 TotalPhycialDamage = 4;
  if (has_totalphycialdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->totalphycialdamage(), output);
  }

  // optional uint64 TotalMagicalDamage = 5;
  if (has_totalmagicaldamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->totalmagicaldamage(), output);
  }

  // optional uint64 TotalHeal = 6;
  if (has_totalheal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->totalheal(), output);
  }

  // optional uint64 TotalSuckBlood = 7;
  if (has_totalsuckblood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->totalsuckblood(), output);
  }

  // optional uint32 CollisionNum = 8;
  if (has_collisionnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->collisionnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSkillStatistics)
}

::google::protobuf::uint8* TSkillStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSkillStatistics)
  // optional uint32 SkillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  // optional uint32 Count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional uint32 TotalEffectTarget = 3;
  if (has_totaleffecttarget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->totaleffecttarget(), target);
  }

  // optional uint64 TotalPhycialDamage = 4;
  if (has_totalphycialdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->totalphycialdamage(), target);
  }

  // optional uint64 TotalMagicalDamage = 5;
  if (has_totalmagicaldamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->totalmagicaldamage(), target);
  }

  // optional uint64 TotalHeal = 6;
  if (has_totalheal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->totalheal(), target);
  }

  // optional uint64 TotalSuckBlood = 7;
  if (has_totalsuckblood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->totalsuckblood(), target);
  }

  // optional uint32 CollisionNum = 8;
  if (has_collisionnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->collisionnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSkillStatistics)
  return target;
}

int TSkillStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SkillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 Count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 TotalEffectTarget = 3;
    if (has_totaleffecttarget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totaleffecttarget());
    }

    // optional uint64 TotalPhycialDamage = 4;
    if (has_totalphycialdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalphycialdamage());
    }

    // optional uint64 TotalMagicalDamage = 5;
    if (has_totalmagicaldamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalmagicaldamage());
    }

    // optional uint64 TotalHeal = 6;
    if (has_totalheal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalheal());
    }

    // optional uint64 TotalSuckBlood = 7;
    if (has_totalsuckblood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalsuckblood());
    }

    // optional uint32 CollisionNum = 8;
    if (has_collisionnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->collisionnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSkillStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSkillStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSkillStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSkillStatistics::MergeFrom(const TSkillStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_totaleffecttarget()) {
      set_totaleffecttarget(from.totaleffecttarget());
    }
    if (from.has_totalphycialdamage()) {
      set_totalphycialdamage(from.totalphycialdamage());
    }
    if (from.has_totalmagicaldamage()) {
      set_totalmagicaldamage(from.totalmagicaldamage());
    }
    if (from.has_totalheal()) {
      set_totalheal(from.totalheal());
    }
    if (from.has_totalsuckblood()) {
      set_totalsuckblood(from.totalsuckblood());
    }
    if (from.has_collisionnum()) {
      set_collisionnum(from.collisionnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSkillStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSkillStatistics::CopyFrom(const TSkillStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSkillStatistics::IsInitialized() const {

  return true;
}

void TSkillStatistics::Swap(TSkillStatistics* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(count_, other->count_);
    std::swap(totaleffecttarget_, other->totaleffecttarget_);
    std::swap(totalphycialdamage_, other->totalphycialdamage_);
    std::swap(totalmagicaldamage_, other->totalmagicaldamage_);
    std::swap(totalheal_, other->totalheal_);
    std::swap(totalsuckblood_, other->totalsuckblood_);
    std::swap(collisionnum_, other->collisionnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSkillStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSkillStatistics_descriptor_;
  metadata.reflection = TSkillStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUnitStatistics::kTotalPhycialDamageFieldNumber;
const int TUnitStatistics::kTotalMagicalDamageFieldNumber;
const int TUnitStatistics::kTotalHealFieldNumber;
const int TUnitStatistics::kPhycialDamageUndertakeFieldNumber;
const int TUnitStatistics::kMagicalDamageUndertakeFieldNumber;
const int TUnitStatistics::kSkillExecuteCountFieldNumber;
const int TUnitStatistics::kDodgeCountFieldNumber;
const int TUnitStatistics::kPhysicalBaseFieldNumber;
const int TUnitStatistics::kExemptionCountFieldNumber;
const int TUnitStatistics::kMagicalBaseFieldNumber;
const int TUnitStatistics::kParryCountFieldNumber;
const int TUnitStatistics::kResistCountFieldNumber;
const int TUnitStatistics::kCriticalDamageCountFieldNumber;
const int TUnitStatistics::kCriticalDamageBaseFieldNumber;
const int TUnitStatistics::kCriticalHealCountFieldNumber;
const int TUnitStatistics::kCriticalHealBaseFieldNumber;
const int TUnitStatistics::kBeCriticalDamageCountFieldNumber;
const int TUnitStatistics::kBeDamageBaseFieldNumber;
const int TUnitStatistics::kSkillStatisticsArrFieldNumber;
const int TUnitStatistics::kTotalSuckBloodFieldNumber;
const int TUnitStatistics::kTimeToLiveFieldNumber;
const int TUnitStatistics::kRealHealFieldNumber;
const int TUnitStatistics::kTotalAbsorbBloodFieldNumber;
#endif  // !_MSC_VER

TUnitStatistics::TUnitStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUnitStatistics)
}

void TUnitStatistics::InitAsDefaultInstance() {
}

TUnitStatistics::TUnitStatistics(const TUnitStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUnitStatistics)
}

void TUnitStatistics::SharedCtor() {
  _cached_size_ = 0;
  totalphycialdamage_ = GOOGLE_ULONGLONG(0);
  totalmagicaldamage_ = GOOGLE_ULONGLONG(0);
  totalheal_ = GOOGLE_ULONGLONG(0);
  phycialdamageundertake_ = GOOGLE_ULONGLONG(0);
  magicaldamageundertake_ = GOOGLE_ULONGLONG(0);
  skillexecutecount_ = 0u;
  dodgecount_ = 0u;
  physicalbase_ = 0u;
  exemptioncount_ = 0u;
  magicalbase_ = 0u;
  parrycount_ = 0u;
  resistcount_ = 0u;
  criticaldamagecount_ = 0u;
  criticaldamagebase_ = 0u;
  criticalhealcount_ = 0u;
  criticalhealbase_ = 0u;
  becriticaldamagecount_ = 0u;
  bedamagebase_ = 0u;
  totalsuckblood_ = GOOGLE_ULONGLONG(0);
  timetolive_ = 0u;
  realheal_ = GOOGLE_ULONGLONG(0);
  totalabsorbblood_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUnitStatistics::~TUnitStatistics() {
  // @@protoc_insertion_point(destructor:pb.TUnitStatistics)
  SharedDtor();
}

void TUnitStatistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUnitStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUnitStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUnitStatistics_descriptor_;
}

const TUnitStatistics& TUnitStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TUnitStatistics* TUnitStatistics::default_instance_ = NULL;

TUnitStatistics* TUnitStatistics::New() const {
  return new TUnitStatistics;
}

void TUnitStatistics::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUnitStatistics*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(totalphycialdamage_, physicalbase_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(exemptioncount_, criticalhealbase_);
  }
  if (_has_bits_[16 / 32] & 8060928) {
    ZR_(bedamagebase_, totalabsorbblood_);
    becriticaldamagecount_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  skillstatisticsarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUnitStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUnitStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TotalPhycialDamage = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalphycialdamage_)));
          set_has_totalphycialdamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TotalMagicalDamage;
        break;
      }

      // optional uint64 TotalMagicalDamage = 2;
      case 2: {
        if (tag == 16) {
         parse_TotalMagicalDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalmagicaldamage_)));
          set_has_totalmagicaldamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TotalHeal;
        break;
      }

      // optional uint64 TotalHeal = 3;
      case 3: {
        if (tag == 24) {
         parse_TotalHeal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalheal_)));
          set_has_totalheal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PhycialDamageUndertake;
        break;
      }

      // optional uint64 PhycialDamageUndertake = 4;
      case 4: {
        if (tag == 32) {
         parse_PhycialDamageUndertake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &phycialdamageundertake_)));
          set_has_phycialdamageundertake();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_MagicalDamageUndertake;
        break;
      }

      // optional uint64 MagicalDamageUndertake = 5;
      case 5: {
        if (tag == 40) {
         parse_MagicalDamageUndertake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &magicaldamageundertake_)));
          set_has_magicaldamageundertake();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_SkillExecuteCount;
        break;
      }

      // optional uint32 SkillExecuteCount = 6;
      case 6: {
        if (tag == 48) {
         parse_SkillExecuteCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillexecutecount_)));
          set_has_skillexecutecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_DodgeCount;
        break;
      }

      // optional uint32 DodgeCount = 7;
      case 7: {
        if (tag == 56) {
         parse_DodgeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodgecount_)));
          set_has_dodgecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_PhysicalBase;
        break;
      }

      // optional uint32 PhysicalBase = 8;
      case 8: {
        if (tag == 64) {
         parse_PhysicalBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &physicalbase_)));
          set_has_physicalbase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ExemptionCount;
        break;
      }

      // optional uint32 ExemptionCount = 9;
      case 9: {
        if (tag == 72) {
         parse_ExemptionCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exemptioncount_)));
          set_has_exemptioncount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_MagicalBase;
        break;
      }

      // optional uint32 MagicalBase = 10;
      case 10: {
        if (tag == 80) {
         parse_MagicalBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magicalbase_)));
          set_has_magicalbase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ParryCount;
        break;
      }

      // optional uint32 ParryCount = 11;
      case 11: {
        if (tag == 88) {
         parse_ParryCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parrycount_)));
          set_has_parrycount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ResistCount;
        break;
      }

      // optional uint32 ResistCount = 12;
      case 12: {
        if (tag == 96) {
         parse_ResistCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resistcount_)));
          set_has_resistcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_CriticalDamageCount;
        break;
      }

      // optional uint32 CriticalDamageCount = 13;
      case 13: {
        if (tag == 104) {
         parse_CriticalDamageCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &criticaldamagecount_)));
          set_has_criticaldamagecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_CriticalDamageBase;
        break;
      }

      // optional uint32 CriticalDamageBase = 14;
      case 14: {
        if (tag == 112) {
         parse_CriticalDamageBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &criticaldamagebase_)));
          set_has_criticaldamagebase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_CriticalHealCount;
        break;
      }

      // optional uint32 CriticalHealCount = 15;
      case 15: {
        if (tag == 120) {
         parse_CriticalHealCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &criticalhealcount_)));
          set_has_criticalhealcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_CriticalHealBase;
        break;
      }

      // optional uint32 CriticalHealBase = 16;
      case 16: {
        if (tag == 128) {
         parse_CriticalHealBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &criticalhealbase_)));
          set_has_criticalhealbase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_BeCriticalDamageCount;
        break;
      }

      // optional uint32 BeCriticalDamageCount = 17;
      case 17: {
        if (tag == 136) {
         parse_BeCriticalDamageCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &becriticaldamagecount_)));
          set_has_becriticaldamagecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_BeDamageBase;
        break;
      }

      // optional uint32 BeDamageBase = 18;
      case 18: {
        if (tag == 144) {
         parse_BeDamageBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bedamagebase_)));
          set_has_bedamagebase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_SkillStatisticsArr;
        break;
      }

      // repeated .pb.TSkillStatistics SkillStatisticsArr = 19;
      case 19: {
        if (tag == 154) {
         parse_SkillStatisticsArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillstatisticsarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_SkillStatisticsArr;
        if (input->ExpectTag(160)) goto parse_TotalSuckBlood;
        break;
      }

      // optional uint64 TotalSuckBlood = 20;
      case 20: {
        if (tag == 160) {
         parse_TotalSuckBlood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalsuckblood_)));
          set_has_totalsuckblood();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_TimeToLive;
        break;
      }

      // optional uint32 TimeToLive = 21;
      case 21: {
        if (tag == 168) {
         parse_TimeToLive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timetolive_)));
          set_has_timetolive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_RealHeal;
        break;
      }

      // optional uint64 RealHeal = 22;
      case 22: {
        if (tag == 176) {
         parse_RealHeal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &realheal_)));
          set_has_realheal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_TotalAbsorbBlood;
        break;
      }

      // optional uint64 TotalAbsorbBlood = 23;
      case 23: {
        if (tag == 184) {
         parse_TotalAbsorbBlood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalabsorbblood_)));
          set_has_totalabsorbblood();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUnitStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUnitStatistics)
  return false;
#undef DO_
}

void TUnitStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUnitStatistics)
  // optional uint64 TotalPhycialDamage = 1;
  if (has_totalphycialdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->totalphycialdamage(), output);
  }

  // optional uint64 TotalMagicalDamage = 2;
  if (has_totalmagicaldamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->totalmagicaldamage(), output);
  }

  // optional uint64 TotalHeal = 3;
  if (has_totalheal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->totalheal(), output);
  }

  // optional uint64 PhycialDamageUndertake = 4;
  if (has_phycialdamageundertake()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->phycialdamageundertake(), output);
  }

  // optional uint64 MagicalDamageUndertake = 5;
  if (has_magicaldamageundertake()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->magicaldamageundertake(), output);
  }

  // optional uint32 SkillExecuteCount = 6;
  if (has_skillexecutecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->skillexecutecount(), output);
  }

  // optional uint32 DodgeCount = 7;
  if (has_dodgecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->dodgecount(), output);
  }

  // optional uint32 PhysicalBase = 8;
  if (has_physicalbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->physicalbase(), output);
  }

  // optional uint32 ExemptionCount = 9;
  if (has_exemptioncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->exemptioncount(), output);
  }

  // optional uint32 MagicalBase = 10;
  if (has_magicalbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->magicalbase(), output);
  }

  // optional uint32 ParryCount = 11;
  if (has_parrycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->parrycount(), output);
  }

  // optional uint32 ResistCount = 12;
  if (has_resistcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->resistcount(), output);
  }

  // optional uint32 CriticalDamageCount = 13;
  if (has_criticaldamagecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->criticaldamagecount(), output);
  }

  // optional uint32 CriticalDamageBase = 14;
  if (has_criticaldamagebase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->criticaldamagebase(), output);
  }

  // optional uint32 CriticalHealCount = 15;
  if (has_criticalhealcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->criticalhealcount(), output);
  }

  // optional uint32 CriticalHealBase = 16;
  if (has_criticalhealbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->criticalhealbase(), output);
  }

  // optional uint32 BeCriticalDamageCount = 17;
  if (has_becriticaldamagecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->becriticaldamagecount(), output);
  }

  // optional uint32 BeDamageBase = 18;
  if (has_bedamagebase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->bedamagebase(), output);
  }

  // repeated .pb.TSkillStatistics SkillStatisticsArr = 19;
  for (int i = 0; i < this->skillstatisticsarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->skillstatisticsarr(i), output);
  }

  // optional uint64 TotalSuckBlood = 20;
  if (has_totalsuckblood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->totalsuckblood(), output);
  }

  // optional uint32 TimeToLive = 21;
  if (has_timetolive()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->timetolive(), output);
  }

  // optional uint64 RealHeal = 22;
  if (has_realheal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->realheal(), output);
  }

  // optional uint64 TotalAbsorbBlood = 23;
  if (has_totalabsorbblood()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->totalabsorbblood(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUnitStatistics)
}

::google::protobuf::uint8* TUnitStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUnitStatistics)
  // optional uint64 TotalPhycialDamage = 1;
  if (has_totalphycialdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->totalphycialdamage(), target);
  }

  // optional uint64 TotalMagicalDamage = 2;
  if (has_totalmagicaldamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->totalmagicaldamage(), target);
  }

  // optional uint64 TotalHeal = 3;
  if (has_totalheal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->totalheal(), target);
  }

  // optional uint64 PhycialDamageUndertake = 4;
  if (has_phycialdamageundertake()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->phycialdamageundertake(), target);
  }

  // optional uint64 MagicalDamageUndertake = 5;
  if (has_magicaldamageundertake()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->magicaldamageundertake(), target);
  }

  // optional uint32 SkillExecuteCount = 6;
  if (has_skillexecutecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->skillexecutecount(), target);
  }

  // optional uint32 DodgeCount = 7;
  if (has_dodgecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->dodgecount(), target);
  }

  // optional uint32 PhysicalBase = 8;
  if (has_physicalbase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->physicalbase(), target);
  }

  // optional uint32 ExemptionCount = 9;
  if (has_exemptioncount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->exemptioncount(), target);
  }

  // optional uint32 MagicalBase = 10;
  if (has_magicalbase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->magicalbase(), target);
  }

  // optional uint32 ParryCount = 11;
  if (has_parrycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->parrycount(), target);
  }

  // optional uint32 ResistCount = 12;
  if (has_resistcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->resistcount(), target);
  }

  // optional uint32 CriticalDamageCount = 13;
  if (has_criticaldamagecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->criticaldamagecount(), target);
  }

  // optional uint32 CriticalDamageBase = 14;
  if (has_criticaldamagebase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->criticaldamagebase(), target);
  }

  // optional uint32 CriticalHealCount = 15;
  if (has_criticalhealcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->criticalhealcount(), target);
  }

  // optional uint32 CriticalHealBase = 16;
  if (has_criticalhealbase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->criticalhealbase(), target);
  }

  // optional uint32 BeCriticalDamageCount = 17;
  if (has_becriticaldamagecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->becriticaldamagecount(), target);
  }

  // optional uint32 BeDamageBase = 18;
  if (has_bedamagebase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->bedamagebase(), target);
  }

  // repeated .pb.TSkillStatistics SkillStatisticsArr = 19;
  for (int i = 0; i < this->skillstatisticsarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->skillstatisticsarr(i), target);
  }

  // optional uint64 TotalSuckBlood = 20;
  if (has_totalsuckblood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->totalsuckblood(), target);
  }

  // optional uint32 TimeToLive = 21;
  if (has_timetolive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->timetolive(), target);
  }

  // optional uint64 RealHeal = 22;
  if (has_realheal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->realheal(), target);
  }

  // optional uint64 TotalAbsorbBlood = 23;
  if (has_totalabsorbblood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->totalabsorbblood(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUnitStatistics)
  return target;
}

int TUnitStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TotalPhycialDamage = 1;
    if (has_totalphycialdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalphycialdamage());
    }

    // optional uint64 TotalMagicalDamage = 2;
    if (has_totalmagicaldamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalmagicaldamage());
    }

    // optional uint64 TotalHeal = 3;
    if (has_totalheal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalheal());
    }

    // optional uint64 PhycialDamageUndertake = 4;
    if (has_phycialdamageundertake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->phycialdamageundertake());
    }

    // optional uint64 MagicalDamageUndertake = 5;
    if (has_magicaldamageundertake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->magicaldamageundertake());
    }

    // optional uint32 SkillExecuteCount = 6;
    if (has_skillexecutecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillexecutecount());
    }

    // optional uint32 DodgeCount = 7;
    if (has_dodgecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodgecount());
    }

    // optional uint32 PhysicalBase = 8;
    if (has_physicalbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->physicalbase());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 ExemptionCount = 9;
    if (has_exemptioncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exemptioncount());
    }

    // optional uint32 MagicalBase = 10;
    if (has_magicalbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magicalbase());
    }

    // optional uint32 ParryCount = 11;
    if (has_parrycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parrycount());
    }

    // optional uint32 ResistCount = 12;
    if (has_resistcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resistcount());
    }

    // optional uint32 CriticalDamageCount = 13;
    if (has_criticaldamagecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->criticaldamagecount());
    }

    // optional uint32 CriticalDamageBase = 14;
    if (has_criticaldamagebase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->criticaldamagebase());
    }

    // optional uint32 CriticalHealCount = 15;
    if (has_criticalhealcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->criticalhealcount());
    }

    // optional uint32 CriticalHealBase = 16;
    if (has_criticalhealbase()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->criticalhealbase());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 BeCriticalDamageCount = 17;
    if (has_becriticaldamagecount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->becriticaldamagecount());
    }

    // optional uint32 BeDamageBase = 18;
    if (has_bedamagebase()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bedamagebase());
    }

    // optional uint64 TotalSuckBlood = 20;
    if (has_totalsuckblood()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalsuckblood());
    }

    // optional uint32 TimeToLive = 21;
    if (has_timetolive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timetolive());
    }

    // optional uint64 RealHeal = 22;
    if (has_realheal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->realheal());
    }

    // optional uint64 TotalAbsorbBlood = 23;
    if (has_totalabsorbblood()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalabsorbblood());
    }

  }
  // repeated .pb.TSkillStatistics SkillStatisticsArr = 19;
  total_size += 2 * this->skillstatisticsarr_size();
  for (int i = 0; i < this->skillstatisticsarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillstatisticsarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUnitStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUnitStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUnitStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUnitStatistics::MergeFrom(const TUnitStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillstatisticsarr_.MergeFrom(from.skillstatisticsarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalphycialdamage()) {
      set_totalphycialdamage(from.totalphycialdamage());
    }
    if (from.has_totalmagicaldamage()) {
      set_totalmagicaldamage(from.totalmagicaldamage());
    }
    if (from.has_totalheal()) {
      set_totalheal(from.totalheal());
    }
    if (from.has_phycialdamageundertake()) {
      set_phycialdamageundertake(from.phycialdamageundertake());
    }
    if (from.has_magicaldamageundertake()) {
      set_magicaldamageundertake(from.magicaldamageundertake());
    }
    if (from.has_skillexecutecount()) {
      set_skillexecutecount(from.skillexecutecount());
    }
    if (from.has_dodgecount()) {
      set_dodgecount(from.dodgecount());
    }
    if (from.has_physicalbase()) {
      set_physicalbase(from.physicalbase());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exemptioncount()) {
      set_exemptioncount(from.exemptioncount());
    }
    if (from.has_magicalbase()) {
      set_magicalbase(from.magicalbase());
    }
    if (from.has_parrycount()) {
      set_parrycount(from.parrycount());
    }
    if (from.has_resistcount()) {
      set_resistcount(from.resistcount());
    }
    if (from.has_criticaldamagecount()) {
      set_criticaldamagecount(from.criticaldamagecount());
    }
    if (from.has_criticaldamagebase()) {
      set_criticaldamagebase(from.criticaldamagebase());
    }
    if (from.has_criticalhealcount()) {
      set_criticalhealcount(from.criticalhealcount());
    }
    if (from.has_criticalhealbase()) {
      set_criticalhealbase(from.criticalhealbase());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_becriticaldamagecount()) {
      set_becriticaldamagecount(from.becriticaldamagecount());
    }
    if (from.has_bedamagebase()) {
      set_bedamagebase(from.bedamagebase());
    }
    if (from.has_totalsuckblood()) {
      set_totalsuckblood(from.totalsuckblood());
    }
    if (from.has_timetolive()) {
      set_timetolive(from.timetolive());
    }
    if (from.has_realheal()) {
      set_realheal(from.realheal());
    }
    if (from.has_totalabsorbblood()) {
      set_totalabsorbblood(from.totalabsorbblood());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUnitStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUnitStatistics::CopyFrom(const TUnitStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUnitStatistics::IsInitialized() const {

  return true;
}

void TUnitStatistics::Swap(TUnitStatistics* other) {
  if (other != this) {
    std::swap(totalphycialdamage_, other->totalphycialdamage_);
    std::swap(totalmagicaldamage_, other->totalmagicaldamage_);
    std::swap(totalheal_, other->totalheal_);
    std::swap(phycialdamageundertake_, other->phycialdamageundertake_);
    std::swap(magicaldamageundertake_, other->magicaldamageundertake_);
    std::swap(skillexecutecount_, other->skillexecutecount_);
    std::swap(dodgecount_, other->dodgecount_);
    std::swap(physicalbase_, other->physicalbase_);
    std::swap(exemptioncount_, other->exemptioncount_);
    std::swap(magicalbase_, other->magicalbase_);
    std::swap(parrycount_, other->parrycount_);
    std::swap(resistcount_, other->resistcount_);
    std::swap(criticaldamagecount_, other->criticaldamagecount_);
    std::swap(criticaldamagebase_, other->criticaldamagebase_);
    std::swap(criticalhealcount_, other->criticalhealcount_);
    std::swap(criticalhealbase_, other->criticalhealbase_);
    std::swap(becriticaldamagecount_, other->becriticaldamagecount_);
    std::swap(bedamagebase_, other->bedamagebase_);
    skillstatisticsarr_.Swap(&other->skillstatisticsarr_);
    std::swap(totalsuckblood_, other->totalsuckblood_);
    std::swap(timetolive_, other->timetolive_);
    std::swap(realheal_, other->realheal_);
    std::swap(totalabsorbblood_, other->totalabsorbblood_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUnitStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUnitStatistics_descriptor_;
  metadata.reflection = TUnitStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTDSingle::kHidFieldNumber;
const int TTDSingle::kPosFieldNumber;
const int TTDSingle::kWaveFieldNumber;
const int TTDSingle::kPathIndexFieldNumber;
const int TTDSingle::kEnergyFieldNumber;
#endif  // !_MSC_VER

TTDSingle::TTDSingle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTDSingle)
}

void TTDSingle::InitAsDefaultInstance() {
}

TTDSingle::TTDSingle(const TTDSingle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTDSingle)
}

void TTDSingle::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  pos_ = 0u;
  wave_ = 0;
  pathindex_ = 0;
  energy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTDSingle::~TTDSingle() {
  // @@protoc_insertion_point(destructor:pb.TTDSingle)
  SharedDtor();
}

void TTDSingle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTDSingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTDSingle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTDSingle_descriptor_;
}

const TTDSingle& TTDSingle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TTDSingle* TTDSingle::default_instance_ = NULL;

TTDSingle* TTDSingle::New() const {
  return new TTDSingle;
}

void TTDSingle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTDSingle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(hid_, energy_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTDSingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTDSingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Pos;
        break;
      }

      // required uint32 Pos = 2;
      case 2: {
        if (tag == 16) {
         parse_Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Wave;
        break;
      }

      // optional int32 Wave = 3;
      case 3: {
        if (tag == 24) {
         parse_Wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wave_)));
          set_has_wave();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PathIndex;
        break;
      }

      // optional int32 PathIndex = 4;
      case 4: {
        if (tag == 32) {
         parse_PathIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pathindex_)));
          set_has_pathindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Energy;
        break;
      }

      // optional int32 Energy = 5;
      case 5: {
        if (tag == 40) {
         parse_Energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTDSingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTDSingle)
  return false;
#undef DO_
}

void TTDSingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTDSingle)
  // required uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // required uint32 Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional int32 Wave = 3;
  if (has_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wave(), output);
  }

  // optional int32 PathIndex = 4;
  if (has_pathindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pathindex(), output);
  }

  // optional int32 Energy = 5;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->energy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTDSingle)
}

::google::protobuf::uint8* TTDSingle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTDSingle)
  // required uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // required uint32 Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional int32 Wave = 3;
  if (has_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wave(), target);
  }

  // optional int32 PathIndex = 4;
  if (has_pathindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pathindex(), target);
  }

  // optional int32 Energy = 5;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->energy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTDSingle)
  return target;
}

int TTDSingle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // required uint32 Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional int32 Wave = 3;
    if (has_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wave());
    }

    // optional int32 PathIndex = 4;
    if (has_pathindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pathindex());
    }

    // optional int32 Energy = 5;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTDSingle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTDSingle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTDSingle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTDSingle::MergeFrom(const TTDSingle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_wave()) {
      set_wave(from.wave());
    }
    if (from.has_pathindex()) {
      set_pathindex(from.pathindex());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTDSingle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTDSingle::CopyFrom(const TTDSingle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTDSingle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TTDSingle::Swap(TTDSingle* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(pos_, other->pos_);
    std::swap(wave_, other->wave_);
    std::swap(pathindex_, other->pathindex_);
    std::swap(energy_, other->energy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTDSingle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTDSingle_descriptor_;
  metadata.reflection = TTDSingle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTDTimeInfo::kGameTimeFieldNumber;
const int TTDTimeInfo::kEnemyArrFieldNumber;
#endif  // !_MSC_VER

TTDTimeInfo::TTDTimeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTDTimeInfo)
}

void TTDTimeInfo::InitAsDefaultInstance() {
}

TTDTimeInfo::TTDTimeInfo(const TTDTimeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTDTimeInfo)
}

void TTDTimeInfo::SharedCtor() {
  _cached_size_ = 0;
  gametime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTDTimeInfo::~TTDTimeInfo() {
  // @@protoc_insertion_point(destructor:pb.TTDTimeInfo)
  SharedDtor();
}

void TTDTimeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTDTimeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTDTimeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTDTimeInfo_descriptor_;
}

const TTDTimeInfo& TTDTimeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TTDTimeInfo* TTDTimeInfo::default_instance_ = NULL;

TTDTimeInfo* TTDTimeInfo::New() const {
  return new TTDTimeInfo;
}

void TTDTimeInfo::Clear() {
  gametime_ = 0u;
  enemyarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTDTimeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTDTimeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 GameTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gametime_)));
          set_has_gametime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_EnemyArr;
        break;
      }

      // repeated .pb.TTDSingle EnemyArr = 2;
      case 2: {
        if (tag == 18) {
         parse_EnemyArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemyarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_EnemyArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTDTimeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTDTimeInfo)
  return false;
#undef DO_
}

void TTDTimeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTDTimeInfo)
  // required uint32 GameTime = 1;
  if (has_gametime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gametime(), output);
  }

  // repeated .pb.TTDSingle EnemyArr = 2;
  for (int i = 0; i < this->enemyarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->enemyarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTDTimeInfo)
}

::google::protobuf::uint8* TTDTimeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTDTimeInfo)
  // required uint32 GameTime = 1;
  if (has_gametime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gametime(), target);
  }

  // repeated .pb.TTDSingle EnemyArr = 2;
  for (int i = 0; i < this->enemyarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->enemyarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTDTimeInfo)
  return target;
}

int TTDTimeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 GameTime = 1;
    if (has_gametime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gametime());
    }

  }
  // repeated .pb.TTDSingle EnemyArr = 2;
  total_size += 1 * this->enemyarr_size();
  for (int i = 0; i < this->enemyarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemyarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTDTimeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTDTimeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTDTimeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTDTimeInfo::MergeFrom(const TTDTimeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  enemyarr_.MergeFrom(from.enemyarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gametime()) {
      set_gametime(from.gametime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTDTimeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTDTimeInfo::CopyFrom(const TTDTimeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTDTimeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->enemyarr())) return false;
  return true;
}

void TTDTimeInfo::Swap(TTDTimeInfo* other) {
  if (other != this) {
    std::swap(gametime_, other->gametime_);
    enemyarr_.Swap(&other->enemyarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTDTimeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTDTimeInfo_descriptor_;
  metadata.reflection = TTDTimeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSkillCount::kSkillIdFieldNumber;
const int TSkillCount::kCountFieldNumber;
#endif  // !_MSC_VER

TSkillCount::TSkillCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSkillCount)
}

void TSkillCount::InitAsDefaultInstance() {
}

TSkillCount::TSkillCount(const TSkillCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSkillCount)
}

void TSkillCount::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSkillCount::~TSkillCount() {
  // @@protoc_insertion_point(destructor:pb.TSkillCount)
  SharedDtor();
}

void TSkillCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSkillCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSkillCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSkillCount_descriptor_;
}

const TSkillCount& TSkillCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TSkillCount* TSkillCount::default_instance_ = NULL;

TSkillCount* TSkillCount::New() const {
  return new TSkillCount;
}

void TSkillCount::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSkillCount*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(skillid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSkillCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSkillCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 SkillId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Count;
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (tag == 16) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSkillCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSkillCount)
  return false;
#undef DO_
}

void TSkillCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSkillCount)
  // required uint32 SkillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // required uint32 Count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSkillCount)
}

::google::protobuf::uint8* TSkillCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSkillCount)
  // required uint32 SkillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  // required uint32 Count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSkillCount)
  return target;
}

int TSkillCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 SkillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // required uint32 Count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSkillCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSkillCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSkillCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSkillCount::MergeFrom(const TSkillCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSkillCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSkillCount::CopyFrom(const TSkillCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSkillCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TSkillCount::Swap(TSkillCount* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSkillCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSkillCount_descriptor_;
  metadata.reflection = TSkillCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSkillCountInfo::kSkillCountArrFieldNumber;
#endif  // !_MSC_VER

TSkillCountInfo::TSkillCountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSkillCountInfo)
}

void TSkillCountInfo::InitAsDefaultInstance() {
}

TSkillCountInfo::TSkillCountInfo(const TSkillCountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSkillCountInfo)
}

void TSkillCountInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSkillCountInfo::~TSkillCountInfo() {
  // @@protoc_insertion_point(destructor:pb.TSkillCountInfo)
  SharedDtor();
}

void TSkillCountInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSkillCountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSkillCountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSkillCountInfo_descriptor_;
}

const TSkillCountInfo& TSkillCountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TSkillCountInfo* TSkillCountInfo::default_instance_ = NULL;

TSkillCountInfo* TSkillCountInfo::New() const {
  return new TSkillCountInfo;
}

void TSkillCountInfo::Clear() {
  skillcountarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSkillCountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSkillCountInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TSkillCount SkillCountArr = 1;
      case 1: {
        if (tag == 10) {
         parse_SkillCountArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillcountarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_SkillCountArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSkillCountInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSkillCountInfo)
  return false;
#undef DO_
}

void TSkillCountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSkillCountInfo)
  // repeated .pb.TSkillCount SkillCountArr = 1;
  for (int i = 0; i < this->skillcountarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skillcountarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSkillCountInfo)
}

::google::protobuf::uint8* TSkillCountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSkillCountInfo)
  // repeated .pb.TSkillCount SkillCountArr = 1;
  for (int i = 0; i < this->skillcountarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skillcountarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSkillCountInfo)
  return target;
}

int TSkillCountInfo::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TSkillCount SkillCountArr = 1;
  total_size += 1 * this->skillcountarr_size();
  for (int i = 0; i < this->skillcountarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillcountarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSkillCountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSkillCountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSkillCountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSkillCountInfo::MergeFrom(const TSkillCountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillcountarr_.MergeFrom(from.skillcountarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSkillCountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSkillCountInfo::CopyFrom(const TSkillCountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSkillCountInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->skillcountarr())) return false;
  return true;
}

void TSkillCountInfo::Swap(TSkillCountInfo* other) {
  if (other != this) {
    skillcountarr_.Swap(&other->skillcountarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSkillCountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSkillCountInfo_descriptor_;
  metadata.reflection = TSkillCountInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TPointBuff::kPointIndexFieldNumber;
const int TPointBuff::kBuffArrFieldNumber;
#endif  // !_MSC_VER

TPointBuff::TPointBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPointBuff)
}

void TPointBuff::InitAsDefaultInstance() {
}

TPointBuff::TPointBuff(const TPointBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPointBuff)
}

void TPointBuff::SharedCtor() {
  _cached_size_ = 0;
  pointindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPointBuff::~TPointBuff() {
  // @@protoc_insertion_point(destructor:pb.TPointBuff)
  SharedDtor();
}

void TPointBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TPointBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPointBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPointBuff_descriptor_;
}

const TPointBuff& TPointBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TPointBuff* TPointBuff::default_instance_ = NULL;

TPointBuff* TPointBuff::New() const {
  return new TPointBuff;
}

void TPointBuff::Clear() {
  pointindex_ = 0;
  buffarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPointBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPointBuff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PointIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pointindex_)));
          set_has_pointindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuffArr;
        break;
      }

      // repeated int32 BuffArr = 2;
      case 2: {
        if (tag == 16) {
         parse_BuffArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_buffarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_buffarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuffArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPointBuff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPointBuff)
  return false;
#undef DO_
}

void TPointBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPointBuff)
  // optional int32 PointIndex = 1;
  if (has_pointindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pointindex(), output);
  }

  // repeated int32 BuffArr = 2;
  for (int i = 0; i < this->buffarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->buffarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPointBuff)
}

::google::protobuf::uint8* TPointBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPointBuff)
  // optional int32 PointIndex = 1;
  if (has_pointindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pointindex(), target);
  }

  // repeated int32 BuffArr = 2;
  for (int i = 0; i < this->buffarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->buffarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPointBuff)
  return target;
}

int TPointBuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PointIndex = 1;
    if (has_pointindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pointindex());
    }

  }
  // repeated int32 BuffArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->buffarr(i));
    }
    total_size += 1 * this->buffarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPointBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPointBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPointBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPointBuff::MergeFrom(const TPointBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffarr_.MergeFrom(from.buffarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pointindex()) {
      set_pointindex(from.pointindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPointBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPointBuff::CopyFrom(const TPointBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPointBuff::IsInitialized() const {

  return true;
}

void TPointBuff::Swap(TPointBuff* other) {
  if (other != this) {
    std::swap(pointindex_, other->pointindex_);
    buffarr_.Swap(&other->buffarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPointBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPointBuff_descriptor_;
  metadata.reflection = TPointBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFriendCD::kHidFieldNumber;
const int TFriendCD::kCDFieldNumber;
const int TFriendCD::kHtidFieldNumber;
#endif  // !_MSC_VER

TFriendCD::TFriendCD()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFriendCD)
}

void TFriendCD::InitAsDefaultInstance() {
}

TFriendCD::TFriendCD(const TFriendCD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFriendCD)
}

void TFriendCD::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  cd_ = 0u;
  htid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFriendCD::~TFriendCD() {
  // @@protoc_insertion_point(destructor:pb.TFriendCD)
  SharedDtor();
}

void TFriendCD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFriendCD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFriendCD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFriendCD_descriptor_;
}

const TFriendCD& TFriendCD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TFriendCD* TFriendCD::default_instance_ = NULL;

TFriendCD* TFriendCD::New() const {
  return new TFriendCD;
}

void TFriendCD::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TFriendCD*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hid_, htid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFriendCD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFriendCD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CD;
        break;
      }

      // optional uint32 CD = 2;
      case 2: {
        if (tag == 16) {
         parse_CD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Htid;
        break;
      }

      // optional uint32 Htid = 3;
      case 3: {
        if (tag == 24) {
         parse_Htid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFriendCD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFriendCD)
  return false;
#undef DO_
}

void TFriendCD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFriendCD)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // optional uint32 CD = 2;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cd(), output);
  }

  // optional uint32 Htid = 3;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->htid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFriendCD)
}

::google::protobuf::uint8* TFriendCD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFriendCD)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // optional uint32 CD = 2;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cd(), target);
  }

  // optional uint32 Htid = 3;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->htid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFriendCD)
  return target;
}

int TFriendCD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint32 CD = 2;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cd());
    }

    // optional uint32 Htid = 3;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFriendCD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFriendCD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFriendCD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFriendCD::MergeFrom(const TFriendCD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_htid()) {
      set_htid(from.htid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFriendCD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFriendCD::CopyFrom(const TFriendCD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFriendCD::IsInitialized() const {

  return true;
}

void TFriendCD::Swap(TFriendCD* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(cd_, other->cd_);
    std::swap(htid_, other->htid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFriendCD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFriendCD_descriptor_;
  metadata.reflection = TFriendCD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTDRecordInfo::kFriendCDFieldNumber;
const int TTDRecordInfo::kRestEnergyFieldNumber;
const int TTDRecordInfo::kSkillCounterFieldNumber;
#endif  // !_MSC_VER

TTDRecordInfo::TTDRecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTDRecordInfo)
}

void TTDRecordInfo::InitAsDefaultInstance() {
}

TTDRecordInfo::TTDRecordInfo(const TTDRecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTDRecordInfo)
}

void TTDRecordInfo::SharedCtor() {
  _cached_size_ = 0;
  restenergy_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTDRecordInfo::~TTDRecordInfo() {
  // @@protoc_insertion_point(destructor:pb.TTDRecordInfo)
  SharedDtor();
}

void TTDRecordInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTDRecordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTDRecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTDRecordInfo_descriptor_;
}

const TTDRecordInfo& TTDRecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TTDRecordInfo* TTDRecordInfo::default_instance_ = NULL;

TTDRecordInfo* TTDRecordInfo::New() const {
  return new TTDRecordInfo;
}

void TTDRecordInfo::Clear() {
  restenergy_ = 0u;
  friendcd_.Clear();
  skillcounter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTDRecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTDRecordInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TFriendCD FriendCD = 1;
      case 1: {
        if (tag == 10) {
         parse_FriendCD:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendcd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FriendCD;
        if (input->ExpectTag(16)) goto parse_RestEnergy;
        break;
      }

      // optional uint32 RestEnergy = 2;
      case 2: {
        if (tag == 16) {
         parse_RestEnergy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &restenergy_)));
          set_has_restenergy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SkillCounter;
        break;
      }

      // repeated .pb.TSkillCount SkillCounter = 3;
      case 3: {
        if (tag == 26) {
         parse_SkillCounter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillcounter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SkillCounter;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTDRecordInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTDRecordInfo)
  return false;
#undef DO_
}

void TTDRecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTDRecordInfo)
  // repeated .pb.TFriendCD FriendCD = 1;
  for (int i = 0; i < this->friendcd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friendcd(i), output);
  }

  // optional uint32 RestEnergy = 2;
  if (has_restenergy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->restenergy(), output);
  }

  // repeated .pb.TSkillCount SkillCounter = 3;
  for (int i = 0; i < this->skillcounter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skillcounter(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTDRecordInfo)
}

::google::protobuf::uint8* TTDRecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTDRecordInfo)
  // repeated .pb.TFriendCD FriendCD = 1;
  for (int i = 0; i < this->friendcd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friendcd(i), target);
  }

  // optional uint32 RestEnergy = 2;
  if (has_restenergy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->restenergy(), target);
  }

  // repeated .pb.TSkillCount SkillCounter = 3;
  for (int i = 0; i < this->skillcounter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skillcounter(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTDRecordInfo)
  return target;
}

int TTDRecordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 RestEnergy = 2;
    if (has_restenergy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->restenergy());
    }

  }
  // repeated .pb.TFriendCD FriendCD = 1;
  total_size += 1 * this->friendcd_size();
  for (int i = 0; i < this->friendcd_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendcd(i));
  }

  // repeated .pb.TSkillCount SkillCounter = 3;
  total_size += 1 * this->skillcounter_size();
  for (int i = 0; i < this->skillcounter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillcounter(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTDRecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTDRecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTDRecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTDRecordInfo::MergeFrom(const TTDRecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendcd_.MergeFrom(from.friendcd_);
  skillcounter_.MergeFrom(from.skillcounter_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_restenergy()) {
      set_restenergy(from.restenergy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTDRecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTDRecordInfo::CopyFrom(const TTDRecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTDRecordInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->skillcounter())) return false;
  return true;
}

void TTDRecordInfo::Swap(TTDRecordInfo* other) {
  if (other != this) {
    friendcd_.Swap(&other->friendcd_);
    std::swap(restenergy_, other->restenergy_);
    skillcounter_.Swap(&other->skillcounter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTDRecordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTDRecordInfo_descriptor_;
  metadata.reflection = TTDRecordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUnitWheelWarRecord::kHidFieldNumber;
const int TUnitWheelWarRecord::kHtidFieldNumber;
const int TUnitWheelWarRecord::kCurHpFieldNumber;
const int TUnitWheelWarRecord::kMaxHpFieldNumber;
const int TUnitWheelWarRecord::kCurRageFieldNumber;
const int TUnitWheelWarRecord::kDamageOutFieldNumber;
const int TUnitWheelWarRecord::kDamageInFieldNumber;
const int TUnitWheelWarRecord::kHealOutFieldNumber;
const int TUnitWheelWarRecord::kStarFieldNumber;
const int TUnitWheelWarRecord::kLevelFieldNumber;
#endif  // !_MSC_VER

TUnitWheelWarRecord::TUnitWheelWarRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUnitWheelWarRecord)
}

void TUnitWheelWarRecord::InitAsDefaultInstance() {
}

TUnitWheelWarRecord::TUnitWheelWarRecord(const TUnitWheelWarRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUnitWheelWarRecord)
}

void TUnitWheelWarRecord::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  htid_ = 0u;
  curhp_ = GOOGLE_ULONGLONG(0);
  maxhp_ = GOOGLE_ULONGLONG(0);
  currage_ = 0u;
  damageout_ = GOOGLE_ULONGLONG(0);
  damagein_ = GOOGLE_ULONGLONG(0);
  healout_ = GOOGLE_ULONGLONG(0);
  star_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUnitWheelWarRecord::~TUnitWheelWarRecord() {
  // @@protoc_insertion_point(destructor:pb.TUnitWheelWarRecord)
  SharedDtor();
}

void TUnitWheelWarRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUnitWheelWarRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUnitWheelWarRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUnitWheelWarRecord_descriptor_;
}

const TUnitWheelWarRecord& TUnitWheelWarRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TUnitWheelWarRecord* TUnitWheelWarRecord::default_instance_ = NULL;

TUnitWheelWarRecord* TUnitWheelWarRecord::New() const {
  return new TUnitWheelWarRecord;
}

void TUnitWheelWarRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUnitWheelWarRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(hid_, currage_);
    healout_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & 768) {
    star_ = 0u;
    level_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUnitWheelWarRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUnitWheelWarRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Htid;
        break;
      }

      // optional uint32 Htid = 2;
      case 2: {
        if (tag == 16) {
         parse_Htid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CurHp;
        break;
      }

      // optional uint64 CurHp = 3;
      case 3: {
        if (tag == 24) {
         parse_CurHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MaxHp;
        break;
      }

      // optional uint64 MaxHp = 4;
      case 4: {
        if (tag == 32) {
         parse_MaxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CurRage;
        break;
      }

      // optional uint32 CurRage = 5;
      case 5: {
        if (tag == 40) {
         parse_CurRage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currage_)));
          set_has_currage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_DamageOut;
        break;
      }

      // optional uint64 DamageOut = 6;
      case 6: {
        if (tag == 48) {
         parse_DamageOut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &damageout_)));
          set_has_damageout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_DamageIn;
        break;
      }

      // optional uint64 DamageIn = 7;
      case 7: {
        if (tag == 56) {
         parse_DamageIn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &damagein_)));
          set_has_damagein();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_HealOut;
        break;
      }

      // optional uint64 HealOut = 8;
      case 8: {
        if (tag == 64) {
         parse_HealOut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &healout_)));
          set_has_healout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_Star;
        break;
      }

      // optional uint32 Star = 9;
      case 9: {
        if (tag == 72) {
         parse_Star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 10;
      case 10: {
        if (tag == 80) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUnitWheelWarRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUnitWheelWarRecord)
  return false;
#undef DO_
}

void TUnitWheelWarRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUnitWheelWarRecord)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // optional uint32 Htid = 2;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->htid(), output);
  }

  // optional uint64 CurHp = 3;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->curhp(), output);
  }

  // optional uint64 MaxHp = 4;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->maxhp(), output);
  }

  // optional uint32 CurRage = 5;
  if (has_currage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->currage(), output);
  }

  // optional uint64 DamageOut = 6;
  if (has_damageout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->damageout(), output);
  }

  // optional uint64 DamageIn = 7;
  if (has_damagein()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->damagein(), output);
  }

  // optional uint64 HealOut = 8;
  if (has_healout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->healout(), output);
  }

  // optional uint32 Star = 9;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->star(), output);
  }

  // optional uint32 Level = 10;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUnitWheelWarRecord)
}

::google::protobuf::uint8* TUnitWheelWarRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUnitWheelWarRecord)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // optional uint32 Htid = 2;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->htid(), target);
  }

  // optional uint64 CurHp = 3;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->curhp(), target);
  }

  // optional uint64 MaxHp = 4;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->maxhp(), target);
  }

  // optional uint32 CurRage = 5;
  if (has_currage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->currage(), target);
  }

  // optional uint64 DamageOut = 6;
  if (has_damageout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->damageout(), target);
  }

  // optional uint64 DamageIn = 7;
  if (has_damagein()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->damagein(), target);
  }

  // optional uint64 HealOut = 8;
  if (has_healout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->healout(), target);
  }

  // optional uint32 Star = 9;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->star(), target);
  }

  // optional uint32 Level = 10;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUnitWheelWarRecord)
  return target;
}

int TUnitWheelWarRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint32 Htid = 2;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

    // optional uint64 CurHp = 3;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curhp());
    }

    // optional uint64 MaxHp = 4;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxhp());
    }

    // optional uint32 CurRage = 5;
    if (has_currage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currage());
    }

    // optional uint64 DamageOut = 6;
    if (has_damageout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->damageout());
    }

    // optional uint64 DamageIn = 7;
    if (has_damagein()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->damagein());
    }

    // optional uint64 HealOut = 8;
    if (has_healout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->healout());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Star = 9;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional uint32 Level = 10;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUnitWheelWarRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUnitWheelWarRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUnitWheelWarRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUnitWheelWarRecord::MergeFrom(const TUnitWheelWarRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_htid()) {
      set_htid(from.htid());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_currage()) {
      set_currage(from.currage());
    }
    if (from.has_damageout()) {
      set_damageout(from.damageout());
    }
    if (from.has_damagein()) {
      set_damagein(from.damagein());
    }
    if (from.has_healout()) {
      set_healout(from.healout());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUnitWheelWarRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUnitWheelWarRecord::CopyFrom(const TUnitWheelWarRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUnitWheelWarRecord::IsInitialized() const {

  return true;
}

void TUnitWheelWarRecord::Swap(TUnitWheelWarRecord* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(htid_, other->htid_);
    std::swap(curhp_, other->curhp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(currage_, other->currage_);
    std::swap(damageout_, other->damageout_);
    std::swap(damagein_, other->damagein_);
    std::swap(healout_, other->healout_);
    std::swap(star_, other->star_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUnitWheelWarRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUnitWheelWarRecord_descriptor_;
  metadata.reflection = TUnitWheelWarRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TArmyWheelWarRecord::kArmyIdFieldNumber;
const int TArmyWheelWarRecord::kUnitArrFieldNumber;
#endif  // !_MSC_VER

TArmyWheelWarRecord::TArmyWheelWarRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TArmyWheelWarRecord)
}

void TArmyWheelWarRecord::InitAsDefaultInstance() {
}

TArmyWheelWarRecord::TArmyWheelWarRecord(const TArmyWheelWarRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TArmyWheelWarRecord)
}

void TArmyWheelWarRecord::SharedCtor() {
  _cached_size_ = 0;
  armyid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TArmyWheelWarRecord::~TArmyWheelWarRecord() {
  // @@protoc_insertion_point(destructor:pb.TArmyWheelWarRecord)
  SharedDtor();
}

void TArmyWheelWarRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TArmyWheelWarRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TArmyWheelWarRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TArmyWheelWarRecord_descriptor_;
}

const TArmyWheelWarRecord& TArmyWheelWarRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TArmyWheelWarRecord* TArmyWheelWarRecord::default_instance_ = NULL;

TArmyWheelWarRecord* TArmyWheelWarRecord::New() const {
  return new TArmyWheelWarRecord;
}

void TArmyWheelWarRecord::Clear() {
  armyid_ = 0;
  unitarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TArmyWheelWarRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TArmyWheelWarRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ArmyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armyid_)));
          set_has_armyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UnitArr;
        break;
      }

      // repeated .pb.TUnitWheelWarRecord UnitArr = 2;
      case 2: {
        if (tag == 18) {
         parse_UnitArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UnitArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TArmyWheelWarRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TArmyWheelWarRecord)
  return false;
#undef DO_
}

void TArmyWheelWarRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TArmyWheelWarRecord)
  // optional int32 ArmyId = 1;
  if (has_armyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->armyid(), output);
  }

  // repeated .pb.TUnitWheelWarRecord UnitArr = 2;
  for (int i = 0; i < this->unitarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->unitarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TArmyWheelWarRecord)
}

::google::protobuf::uint8* TArmyWheelWarRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TArmyWheelWarRecord)
  // optional int32 ArmyId = 1;
  if (has_armyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->armyid(), target);
  }

  // repeated .pb.TUnitWheelWarRecord UnitArr = 2;
  for (int i = 0; i < this->unitarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->unitarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TArmyWheelWarRecord)
  return target;
}

int TArmyWheelWarRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ArmyId = 1;
    if (has_armyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armyid());
    }

  }
  // repeated .pb.TUnitWheelWarRecord UnitArr = 2;
  total_size += 1 * this->unitarr_size();
  for (int i = 0; i < this->unitarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TArmyWheelWarRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TArmyWheelWarRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TArmyWheelWarRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TArmyWheelWarRecord::MergeFrom(const TArmyWheelWarRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitarr_.MergeFrom(from.unitarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_armyid()) {
      set_armyid(from.armyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TArmyWheelWarRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TArmyWheelWarRecord::CopyFrom(const TArmyWheelWarRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TArmyWheelWarRecord::IsInitialized() const {

  return true;
}

void TArmyWheelWarRecord::Swap(TArmyWheelWarRecord* other) {
  if (other != this) {
    std::swap(armyid_, other->armyid_);
    unitarr_.Swap(&other->unitarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TArmyWheelWarRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TArmyWheelWarRecord_descriptor_;
  metadata.reflection = TArmyWheelWarRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFieldWheelWarRecord::kFieldIndexFieldNumber;
const int TFieldWheelWarRecord::kArmy1FieldNumber;
const int TFieldWheelWarRecord::kArmy2FieldNumber;
#endif  // !_MSC_VER

TFieldWheelWarRecord::TFieldWheelWarRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFieldWheelWarRecord)
}

void TFieldWheelWarRecord::InitAsDefaultInstance() {
  army1_ = const_cast< ::pb::TArmyWheelWarRecord*>(&::pb::TArmyWheelWarRecord::default_instance());
  army2_ = const_cast< ::pb::TArmyWheelWarRecord*>(&::pb::TArmyWheelWarRecord::default_instance());
}

TFieldWheelWarRecord::TFieldWheelWarRecord(const TFieldWheelWarRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFieldWheelWarRecord)
}

void TFieldWheelWarRecord::SharedCtor() {
  _cached_size_ = 0;
  fieldindex_ = 0;
  army1_ = NULL;
  army2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFieldWheelWarRecord::~TFieldWheelWarRecord() {
  // @@protoc_insertion_point(destructor:pb.TFieldWheelWarRecord)
  SharedDtor();
}

void TFieldWheelWarRecord::SharedDtor() {
  if (this != default_instance_) {
    delete army1_;
    delete army2_;
  }
}

void TFieldWheelWarRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFieldWheelWarRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFieldWheelWarRecord_descriptor_;
}

const TFieldWheelWarRecord& TFieldWheelWarRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TFieldWheelWarRecord* TFieldWheelWarRecord::default_instance_ = NULL;

TFieldWheelWarRecord* TFieldWheelWarRecord::New() const {
  return new TFieldWheelWarRecord;
}

void TFieldWheelWarRecord::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    fieldindex_ = 0;
    if (has_army1()) {
      if (army1_ != NULL) army1_->::pb::TArmyWheelWarRecord::Clear();
    }
    if (has_army2()) {
      if (army2_ != NULL) army2_->::pb::TArmyWheelWarRecord::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFieldWheelWarRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFieldWheelWarRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 FieldIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fieldindex_)));
          set_has_fieldindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Army1;
        break;
      }

      // optional .pb.TArmyWheelWarRecord Army1 = 2;
      case 2: {
        if (tag == 18) {
         parse_Army1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_army1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Army2;
        break;
      }

      // optional .pb.TArmyWheelWarRecord Army2 = 3;
      case 3: {
        if (tag == 26) {
         parse_Army2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_army2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFieldWheelWarRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFieldWheelWarRecord)
  return false;
#undef DO_
}

void TFieldWheelWarRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFieldWheelWarRecord)
  // optional int32 FieldIndex = 1;
  if (has_fieldindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fieldindex(), output);
  }

  // optional .pb.TArmyWheelWarRecord Army1 = 2;
  if (has_army1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->army1(), output);
  }

  // optional .pb.TArmyWheelWarRecord Army2 = 3;
  if (has_army2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->army2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFieldWheelWarRecord)
}

::google::protobuf::uint8* TFieldWheelWarRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFieldWheelWarRecord)
  // optional int32 FieldIndex = 1;
  if (has_fieldindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fieldindex(), target);
  }

  // optional .pb.TArmyWheelWarRecord Army1 = 2;
  if (has_army1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->army1(), target);
  }

  // optional .pb.TArmyWheelWarRecord Army2 = 3;
  if (has_army2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->army2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFieldWheelWarRecord)
  return target;
}

int TFieldWheelWarRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 FieldIndex = 1;
    if (has_fieldindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fieldindex());
    }

    // optional .pb.TArmyWheelWarRecord Army1 = 2;
    if (has_army1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->army1());
    }

    // optional .pb.TArmyWheelWarRecord Army2 = 3;
    if (has_army2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->army2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFieldWheelWarRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFieldWheelWarRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFieldWheelWarRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFieldWheelWarRecord::MergeFrom(const TFieldWheelWarRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fieldindex()) {
      set_fieldindex(from.fieldindex());
    }
    if (from.has_army1()) {
      mutable_army1()->::pb::TArmyWheelWarRecord::MergeFrom(from.army1());
    }
    if (from.has_army2()) {
      mutable_army2()->::pb::TArmyWheelWarRecord::MergeFrom(from.army2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFieldWheelWarRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFieldWheelWarRecord::CopyFrom(const TFieldWheelWarRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFieldWheelWarRecord::IsInitialized() const {

  return true;
}

void TFieldWheelWarRecord::Swap(TFieldWheelWarRecord* other) {
  if (other != this) {
    std::swap(fieldindex_, other->fieldindex_);
    std::swap(army1_, other->army1_);
    std::swap(army2_, other->army2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFieldWheelWarRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFieldWheelWarRecord_descriptor_;
  metadata.reflection = TFieldWheelWarRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWheelWarFieldStatus::kFieldRecordArrFieldNumber;
#endif  // !_MSC_VER

TWheelWarFieldStatus::TWheelWarFieldStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWheelWarFieldStatus)
}

void TWheelWarFieldStatus::InitAsDefaultInstance() {
}

TWheelWarFieldStatus::TWheelWarFieldStatus(const TWheelWarFieldStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWheelWarFieldStatus)
}

void TWheelWarFieldStatus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWheelWarFieldStatus::~TWheelWarFieldStatus() {
  // @@protoc_insertion_point(destructor:pb.TWheelWarFieldStatus)
  SharedDtor();
}

void TWheelWarFieldStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWheelWarFieldStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWheelWarFieldStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWheelWarFieldStatus_descriptor_;
}

const TWheelWarFieldStatus& TWheelWarFieldStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TWheelWarFieldStatus* TWheelWarFieldStatus::default_instance_ = NULL;

TWheelWarFieldStatus* TWheelWarFieldStatus::New() const {
  return new TWheelWarFieldStatus;
}

void TWheelWarFieldStatus::Clear() {
  fieldrecordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWheelWarFieldStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWheelWarFieldStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TFieldWheelWarRecord FieldRecordArr = 1;
      case 1: {
        if (tag == 10) {
         parse_FieldRecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldrecordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FieldRecordArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWheelWarFieldStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWheelWarFieldStatus)
  return false;
#undef DO_
}

void TWheelWarFieldStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWheelWarFieldStatus)
  // repeated .pb.TFieldWheelWarRecord FieldRecordArr = 1;
  for (int i = 0; i < this->fieldrecordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fieldrecordarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWheelWarFieldStatus)
}

::google::protobuf::uint8* TWheelWarFieldStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWheelWarFieldStatus)
  // repeated .pb.TFieldWheelWarRecord FieldRecordArr = 1;
  for (int i = 0; i < this->fieldrecordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fieldrecordarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWheelWarFieldStatus)
  return target;
}

int TWheelWarFieldStatus::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TFieldWheelWarRecord FieldRecordArr = 1;
  total_size += 1 * this->fieldrecordarr_size();
  for (int i = 0; i < this->fieldrecordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldrecordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWheelWarFieldStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWheelWarFieldStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWheelWarFieldStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWheelWarFieldStatus::MergeFrom(const TWheelWarFieldStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  fieldrecordarr_.MergeFrom(from.fieldrecordarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWheelWarFieldStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWheelWarFieldStatus::CopyFrom(const TWheelWarFieldStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWheelWarFieldStatus::IsInitialized() const {

  return true;
}

void TWheelWarFieldStatus::Swap(TWheelWarFieldStatus* other) {
  if (other != this) {
    fieldrecordarr_.Swap(&other->fieldrecordarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWheelWarFieldStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWheelWarFieldStatus_descriptor_;
  metadata.reflection = TWheelWarFieldStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGetBattleArgsFromMajorUsingReplacementReq::kUidFieldNumber;
const int TGetBattleArgsFromMajorUsingReplacementReq::kReplacedHtidFieldNumber;
const int TGetBattleArgsFromMajorUsingReplacementReq::kNewHtidFieldNumber;
#endif  // !_MSC_VER

TGetBattleArgsFromMajorUsingReplacementReq::TGetBattleArgsFromMajorUsingReplacementReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGetBattleArgsFromMajorUsingReplacementReq)
}

void TGetBattleArgsFromMajorUsingReplacementReq::InitAsDefaultInstance() {
}

TGetBattleArgsFromMajorUsingReplacementReq::TGetBattleArgsFromMajorUsingReplacementReq(const TGetBattleArgsFromMajorUsingReplacementReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGetBattleArgsFromMajorUsingReplacementReq)
}

void TGetBattleArgsFromMajorUsingReplacementReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  replacedhtid_ = 0u;
  newhtid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGetBattleArgsFromMajorUsingReplacementReq::~TGetBattleArgsFromMajorUsingReplacementReq() {
  // @@protoc_insertion_point(destructor:pb.TGetBattleArgsFromMajorUsingReplacementReq)
  SharedDtor();
}

void TGetBattleArgsFromMajorUsingReplacementReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGetBattleArgsFromMajorUsingReplacementReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGetBattleArgsFromMajorUsingReplacementReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGetBattleArgsFromMajorUsingReplacementReq_descriptor_;
}

const TGetBattleArgsFromMajorUsingReplacementReq& TGetBattleArgsFromMajorUsingReplacementReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TGetBattleArgsFromMajorUsingReplacementReq* TGetBattleArgsFromMajorUsingReplacementReq::default_instance_ = NULL;

TGetBattleArgsFromMajorUsingReplacementReq* TGetBattleArgsFromMajorUsingReplacementReq::New() const {
  return new TGetBattleArgsFromMajorUsingReplacementReq;
}

void TGetBattleArgsFromMajorUsingReplacementReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGetBattleArgsFromMajorUsingReplacementReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, newhtid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGetBattleArgsFromMajorUsingReplacementReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGetBattleArgsFromMajorUsingReplacementReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ReplacedHtid;
        break;
      }

      // optional uint32 ReplacedHtid = 2;
      case 2: {
        if (tag == 16) {
         parse_ReplacedHtid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replacedhtid_)));
          set_has_replacedhtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_NewHtid;
        break;
      }

      // optional uint32 NewHtid = 3;
      case 3: {
        if (tag == 24) {
         parse_NewHtid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newhtid_)));
          set_has_newhtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGetBattleArgsFromMajorUsingReplacementReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGetBattleArgsFromMajorUsingReplacementReq)
  return false;
#undef DO_
}

void TGetBattleArgsFromMajorUsingReplacementReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGetBattleArgsFromMajorUsingReplacementReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 ReplacedHtid = 2;
  if (has_replacedhtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->replacedhtid(), output);
  }

  // optional uint32 NewHtid = 3;
  if (has_newhtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->newhtid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGetBattleArgsFromMajorUsingReplacementReq)
}

::google::protobuf::uint8* TGetBattleArgsFromMajorUsingReplacementReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGetBattleArgsFromMajorUsingReplacementReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 ReplacedHtid = 2;
  if (has_replacedhtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->replacedhtid(), target);
  }

  // optional uint32 NewHtid = 3;
  if (has_newhtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->newhtid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGetBattleArgsFromMajorUsingReplacementReq)
  return target;
}

int TGetBattleArgsFromMajorUsingReplacementReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 ReplacedHtid = 2;
    if (has_replacedhtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->replacedhtid());
    }

    // optional uint32 NewHtid = 3;
    if (has_newhtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newhtid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGetBattleArgsFromMajorUsingReplacementReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGetBattleArgsFromMajorUsingReplacementReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGetBattleArgsFromMajorUsingReplacementReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGetBattleArgsFromMajorUsingReplacementReq::MergeFrom(const TGetBattleArgsFromMajorUsingReplacementReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_replacedhtid()) {
      set_replacedhtid(from.replacedhtid());
    }
    if (from.has_newhtid()) {
      set_newhtid(from.newhtid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGetBattleArgsFromMajorUsingReplacementReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGetBattleArgsFromMajorUsingReplacementReq::CopyFrom(const TGetBattleArgsFromMajorUsingReplacementReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGetBattleArgsFromMajorUsingReplacementReq::IsInitialized() const {

  return true;
}

void TGetBattleArgsFromMajorUsingReplacementReq::Swap(TGetBattleArgsFromMajorUsingReplacementReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(replacedhtid_, other->replacedhtid_);
    std::swap(newhtid_, other->newhtid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGetBattleArgsFromMajorUsingReplacementReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGetBattleArgsFromMajorUsingReplacementReq_descriptor_;
  metadata.reflection = TGetBattleArgsFromMajorUsingReplacementReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRushInfo::kArmy1PosFieldNumber;
const int TRushInfo::kArmy2PosFieldNumber;
const int TRushInfo::kRushResultFieldNumber;
const int TRushInfo::kArmy1HorseIdFieldNumber;
const int TRushInfo::kArmy2HorseIdFieldNumber;
const int TRushInfo::kTargetPosArrFieldNumber;
#endif  // !_MSC_VER

TRushInfo::TRushInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRushInfo)
}

void TRushInfo::InitAsDefaultInstance() {
}

TRushInfo::TRushInfo(const TRushInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRushInfo)
}

void TRushInfo::SharedCtor() {
  _cached_size_ = 0;
  army1pos_ = 0u;
  army2pos_ = 0u;
  rushresult_ = 0u;
  army1horseid_ = 0u;
  army2horseid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRushInfo::~TRushInfo() {
  // @@protoc_insertion_point(destructor:pb.TRushInfo)
  SharedDtor();
}

void TRushInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRushInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRushInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRushInfo_descriptor_;
}

const TRushInfo& TRushInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TRushInfo* TRushInfo::default_instance_ = NULL;

TRushInfo* TRushInfo::New() const {
  return new TRushInfo;
}

void TRushInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TRushInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(army1pos_, army1horseid_);
    army2horseid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  targetposarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRushInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRushInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Army1Pos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &army1pos_)));
          set_has_army1pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Army2Pos;
        break;
      }

      // optional uint32 Army2Pos = 2;
      case 2: {
        if (tag == 16) {
         parse_Army2Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &army2pos_)));
          set_has_army2pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RushResult;
        break;
      }

      // optional uint32 RushResult = 3;
      case 3: {
        if (tag == 24) {
         parse_RushResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rushresult_)));
          set_has_rushresult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Army1HorseId;
        break;
      }

      // optional uint32 Army1HorseId = 4;
      case 4: {
        if (tag == 32) {
         parse_Army1HorseId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &army1horseid_)));
          set_has_army1horseid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Army2HorseId;
        break;
      }

      // optional uint32 Army2HorseId = 5;
      case 5: {
        if (tag == 40) {
         parse_Army2HorseId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &army2horseid_)));
          set_has_army2horseid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_TargetPosArr;
        break;
      }

      // repeated uint32 TargetPosArr = 6;
      case 6: {
        if (tag == 48) {
         parse_TargetPosArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_targetposarr())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_targetposarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_TargetPosArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRushInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRushInfo)
  return false;
#undef DO_
}

void TRushInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRushInfo)
  // optional uint32 Army1Pos = 1;
  if (has_army1pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->army1pos(), output);
  }

  // optional uint32 Army2Pos = 2;
  if (has_army2pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->army2pos(), output);
  }

  // optional uint32 RushResult = 3;
  if (has_rushresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rushresult(), output);
  }

  // optional uint32 Army1HorseId = 4;
  if (has_army1horseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->army1horseid(), output);
  }

  // optional uint32 Army2HorseId = 5;
  if (has_army2horseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->army2horseid(), output);
  }

  // repeated uint32 TargetPosArr = 6;
  for (int i = 0; i < this->targetposarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->targetposarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRushInfo)
}

::google::protobuf::uint8* TRushInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRushInfo)
  // optional uint32 Army1Pos = 1;
  if (has_army1pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->army1pos(), target);
  }

  // optional uint32 Army2Pos = 2;
  if (has_army2pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->army2pos(), target);
  }

  // optional uint32 RushResult = 3;
  if (has_rushresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rushresult(), target);
  }

  // optional uint32 Army1HorseId = 4;
  if (has_army1horseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->army1horseid(), target);
  }

  // optional uint32 Army2HorseId = 5;
  if (has_army2horseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->army2horseid(), target);
  }

  // repeated uint32 TargetPosArr = 6;
  for (int i = 0; i < this->targetposarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->targetposarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRushInfo)
  return target;
}

int TRushInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Army1Pos = 1;
    if (has_army1pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->army1pos());
    }

    // optional uint32 Army2Pos = 2;
    if (has_army2pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->army2pos());
    }

    // optional uint32 RushResult = 3;
    if (has_rushresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rushresult());
    }

    // optional uint32 Army1HorseId = 4;
    if (has_army1horseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->army1horseid());
    }

    // optional uint32 Army2HorseId = 5;
    if (has_army2horseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->army2horseid());
    }

  }
  // repeated uint32 TargetPosArr = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->targetposarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->targetposarr(i));
    }
    total_size += 1 * this->targetposarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRushInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRushInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRushInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRushInfo::MergeFrom(const TRushInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  targetposarr_.MergeFrom(from.targetposarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_army1pos()) {
      set_army1pos(from.army1pos());
    }
    if (from.has_army2pos()) {
      set_army2pos(from.army2pos());
    }
    if (from.has_rushresult()) {
      set_rushresult(from.rushresult());
    }
    if (from.has_army1horseid()) {
      set_army1horseid(from.army1horseid());
    }
    if (from.has_army2horseid()) {
      set_army2horseid(from.army2horseid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRushInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRushInfo::CopyFrom(const TRushInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRushInfo::IsInitialized() const {

  return true;
}

void TRushInfo::Swap(TRushInfo* other) {
  if (other != this) {
    std::swap(army1pos_, other->army1pos_);
    std::swap(army2pos_, other->army2pos_);
    std::swap(rushresult_, other->rushresult_);
    std::swap(army1horseid_, other->army1horseid_);
    std::swap(army2horseid_, other->army2horseid_);
    targetposarr_.Swap(&other->targetposarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRushInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRushInfo_descriptor_;
  metadata.reflection = TRushInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTreadInfo::kArmyIdFieldNumber;
const int TTreadInfo::kPosFieldNumber;
const int TTreadInfo::kTargetPosArrFieldNumber;
#endif  // !_MSC_VER

TTreadInfo::TTreadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTreadInfo)
}

void TTreadInfo::InitAsDefaultInstance() {
}

TTreadInfo::TTreadInfo(const TTreadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTreadInfo)
}

void TTreadInfo::SharedCtor() {
  _cached_size_ = 0;
  armyid_ = 0u;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTreadInfo::~TTreadInfo() {
  // @@protoc_insertion_point(destructor:pb.TTreadInfo)
  SharedDtor();
}

void TTreadInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTreadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTreadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTreadInfo_descriptor_;
}

const TTreadInfo& TTreadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TTreadInfo* TTreadInfo::default_instance_ = NULL;

TTreadInfo* TTreadInfo::New() const {
  return new TTreadInfo;
}

void TTreadInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTreadInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(armyid_, pos_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  targetposarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTreadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTreadInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ArmyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &armyid_)));
          set_has_armyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Pos;
        break;
      }

      // optional uint32 Pos = 2;
      case 2: {
        if (tag == 16) {
         parse_Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TargetPosArr;
        break;
      }

      // repeated uint32 TargetPosArr = 3;
      case 3: {
        if (tag == 24) {
         parse_TargetPosArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_targetposarr())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_targetposarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TargetPosArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTreadInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTreadInfo)
  return false;
#undef DO_
}

void TTreadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTreadInfo)
  // optional uint32 ArmyId = 1;
  if (has_armyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->armyid(), output);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // repeated uint32 TargetPosArr = 3;
  for (int i = 0; i < this->targetposarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->targetposarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTreadInfo)
}

::google::protobuf::uint8* TTreadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTreadInfo)
  // optional uint32 ArmyId = 1;
  if (has_armyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->armyid(), target);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // repeated uint32 TargetPosArr = 3;
  for (int i = 0; i < this->targetposarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->targetposarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTreadInfo)
  return target;
}

int TTreadInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ArmyId = 1;
    if (has_armyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->armyid());
    }

    // optional uint32 Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  // repeated uint32 TargetPosArr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->targetposarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->targetposarr(i));
    }
    total_size += 1 * this->targetposarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTreadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTreadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTreadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTreadInfo::MergeFrom(const TTreadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  targetposarr_.MergeFrom(from.targetposarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_armyid()) {
      set_armyid(from.armyid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTreadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTreadInfo::CopyFrom(const TTreadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTreadInfo::IsInitialized() const {

  return true;
}

void TTreadInfo::Swap(TTreadInfo* other) {
  if (other != this) {
    std::swap(armyid_, other->armyid_);
    std::swap(pos_, other->pos_);
    targetposarr_.Swap(&other->targetposarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTreadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTreadInfo_descriptor_;
  metadata.reflection = TTreadInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWinnerInfo::kWinnerFieldNumber;
const int TWinnerInfo::kWinArrFieldNumber;
#endif  // !_MSC_VER

TWinnerInfo::TWinnerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWinnerInfo)
}

void TWinnerInfo::InitAsDefaultInstance() {
}

TWinnerInfo::TWinnerInfo(const TWinnerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWinnerInfo)
}

void TWinnerInfo::SharedCtor() {
  _cached_size_ = 0;
  winner_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWinnerInfo::~TWinnerInfo() {
  // @@protoc_insertion_point(destructor:pb.TWinnerInfo)
  SharedDtor();
}

void TWinnerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWinnerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWinnerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWinnerInfo_descriptor_;
}

const TWinnerInfo& TWinnerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TWinnerInfo* TWinnerInfo::default_instance_ = NULL;

TWinnerInfo* TWinnerInfo::New() const {
  return new TWinnerInfo;
}

void TWinnerInfo::Clear() {
  winner_ = 0u;
  winarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWinnerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWinnerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Winner = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winner_)));
          set_has_winner();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_WinArr;
        break;
      }

      // repeated uint32 WinArr = 2;
      case 2: {
        if (tag == 16) {
         parse_WinArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_winarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_winarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_WinArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWinnerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWinnerInfo)
  return false;
#undef DO_
}

void TWinnerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWinnerInfo)
  // optional uint32 Winner = 1;
  if (has_winner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->winner(), output);
  }

  // repeated uint32 WinArr = 2;
  for (int i = 0; i < this->winarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->winarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWinnerInfo)
}

::google::protobuf::uint8* TWinnerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWinnerInfo)
  // optional uint32 Winner = 1;
  if (has_winner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->winner(), target);
  }

  // repeated uint32 WinArr = 2;
  for (int i = 0; i < this->winarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->winarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWinnerInfo)
  return target;
}

int TWinnerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Winner = 1;
    if (has_winner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winner());
    }

  }
  // repeated uint32 WinArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->winarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->winarr(i));
    }
    total_size += 1 * this->winarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWinnerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWinnerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWinnerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWinnerInfo::MergeFrom(const TWinnerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  winarr_.MergeFrom(from.winarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_winner()) {
      set_winner(from.winner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWinnerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWinnerInfo::CopyFrom(const TWinnerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWinnerInfo::IsInitialized() const {

  return true;
}

void TWinnerInfo::Swap(TWinnerInfo* other) {
  if (other != this) {
    std::swap(winner_, other->winner_);
    winarr_.Swap(&other->winarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWinnerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWinnerInfo_descriptor_;
  metadata.reflection = TWinnerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSpecialEntrance::kRushInfoArrFieldNumber;
const int TSpecialEntrance::kTreadInfoArrFieldNumber;
const int TSpecialEntrance::kWinnerInfoFieldNumber;
#endif  // !_MSC_VER

TSpecialEntrance::TSpecialEntrance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSpecialEntrance)
}

void TSpecialEntrance::InitAsDefaultInstance() {
  winnerinfo_ = const_cast< ::pb::TWinnerInfo*>(&::pb::TWinnerInfo::default_instance());
}

TSpecialEntrance::TSpecialEntrance(const TSpecialEntrance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSpecialEntrance)
}

void TSpecialEntrance::SharedCtor() {
  _cached_size_ = 0;
  winnerinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSpecialEntrance::~TSpecialEntrance() {
  // @@protoc_insertion_point(destructor:pb.TSpecialEntrance)
  SharedDtor();
}

void TSpecialEntrance::SharedDtor() {
  if (this != default_instance_) {
    delete winnerinfo_;
  }
}

void TSpecialEntrance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSpecialEntrance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSpecialEntrance_descriptor_;
}

const TSpecialEntrance& TSpecialEntrance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TSpecialEntrance* TSpecialEntrance::default_instance_ = NULL;

TSpecialEntrance* TSpecialEntrance::New() const {
  return new TSpecialEntrance;
}

void TSpecialEntrance::Clear() {
  if (has_winnerinfo()) {
    if (winnerinfo_ != NULL) winnerinfo_->::pb::TWinnerInfo::Clear();
  }
  rushinfoarr_.Clear();
  treadinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSpecialEntrance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSpecialEntrance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TRushInfo RushInfoArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RushInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rushinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RushInfoArr;
        if (input->ExpectTag(18)) goto parse_TreadInfoArr;
        break;
      }

      // repeated .pb.TTreadInfo TreadInfoArr = 2;
      case 2: {
        if (tag == 18) {
         parse_TreadInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_treadinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TreadInfoArr;
        if (input->ExpectTag(26)) goto parse_WinnerInfo;
        break;
      }

      // optional .pb.TWinnerInfo WinnerInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_WinnerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_winnerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSpecialEntrance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSpecialEntrance)
  return false;
#undef DO_
}

void TSpecialEntrance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSpecialEntrance)
  // repeated .pb.TRushInfo RushInfoArr = 1;
  for (int i = 0; i < this->rushinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rushinfoarr(i), output);
  }

  // repeated .pb.TTreadInfo TreadInfoArr = 2;
  for (int i = 0; i < this->treadinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->treadinfoarr(i), output);
  }

  // optional .pb.TWinnerInfo WinnerInfo = 3;
  if (has_winnerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->winnerinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSpecialEntrance)
}

::google::protobuf::uint8* TSpecialEntrance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSpecialEntrance)
  // repeated .pb.TRushInfo RushInfoArr = 1;
  for (int i = 0; i < this->rushinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rushinfoarr(i), target);
  }

  // repeated .pb.TTreadInfo TreadInfoArr = 2;
  for (int i = 0; i < this->treadinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->treadinfoarr(i), target);
  }

  // optional .pb.TWinnerInfo WinnerInfo = 3;
  if (has_winnerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->winnerinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSpecialEntrance)
  return target;
}

int TSpecialEntrance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .pb.TWinnerInfo WinnerInfo = 3;
    if (has_winnerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->winnerinfo());
    }

  }
  // repeated .pb.TRushInfo RushInfoArr = 1;
  total_size += 1 * this->rushinfoarr_size();
  for (int i = 0; i < this->rushinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rushinfoarr(i));
  }

  // repeated .pb.TTreadInfo TreadInfoArr = 2;
  total_size += 1 * this->treadinfoarr_size();
  for (int i = 0; i < this->treadinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->treadinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSpecialEntrance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSpecialEntrance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSpecialEntrance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSpecialEntrance::MergeFrom(const TSpecialEntrance& from) {
  GOOGLE_CHECK_NE(&from, this);
  rushinfoarr_.MergeFrom(from.rushinfoarr_);
  treadinfoarr_.MergeFrom(from.treadinfoarr_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_winnerinfo()) {
      mutable_winnerinfo()->::pb::TWinnerInfo::MergeFrom(from.winnerinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSpecialEntrance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSpecialEntrance::CopyFrom(const TSpecialEntrance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSpecialEntrance::IsInitialized() const {

  return true;
}

void TSpecialEntrance::Swap(TSpecialEntrance* other) {
  if (other != this) {
    rushinfoarr_.Swap(&other->rushinfoarr_);
    treadinfoarr_.Swap(&other->treadinfoarr_);
    std::swap(winnerinfo_, other->winnerinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSpecialEntrance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSpecialEntrance_descriptor_;
  metadata.reflection = TSpecialEntrance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWheelWarRidingInfo::kHasInfoFieldNumber;
const int TWheelWarRidingInfo::kWinnerInfosFieldNumber;
#endif  // !_MSC_VER

TWheelWarRidingInfo::TWheelWarRidingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWheelWarRidingInfo)
}

void TWheelWarRidingInfo::InitAsDefaultInstance() {
}

TWheelWarRidingInfo::TWheelWarRidingInfo(const TWheelWarRidingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWheelWarRidingInfo)
}

void TWheelWarRidingInfo::SharedCtor() {
  _cached_size_ = 0;
  hasinfo_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWheelWarRidingInfo::~TWheelWarRidingInfo() {
  // @@protoc_insertion_point(destructor:pb.TWheelWarRidingInfo)
  SharedDtor();
}

void TWheelWarRidingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWheelWarRidingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWheelWarRidingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWheelWarRidingInfo_descriptor_;
}

const TWheelWarRidingInfo& TWheelWarRidingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TWheelWarRidingInfo* TWheelWarRidingInfo::default_instance_ = NULL;

TWheelWarRidingInfo* TWheelWarRidingInfo::New() const {
  return new TWheelWarRidingInfo;
}

void TWheelWarRidingInfo::Clear() {
  hasinfo_ = 0u;
  winnerinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWheelWarRidingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWheelWarRidingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 HasInfo = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hasinfo_)));
          set_has_hasinfo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_WinnerInfos;
        break;
      }

      // repeated .pb.TWinnerInfo WinnerInfos = 2;
      case 2: {
        if (tag == 18) {
         parse_WinnerInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_winnerinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_WinnerInfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWheelWarRidingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWheelWarRidingInfo)
  return false;
#undef DO_
}

void TWheelWarRidingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWheelWarRidingInfo)
  // optional uint32 HasInfo = 1;
  if (has_hasinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hasinfo(), output);
  }

  // repeated .pb.TWinnerInfo WinnerInfos = 2;
  for (int i = 0; i < this->winnerinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->winnerinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWheelWarRidingInfo)
}

::google::protobuf::uint8* TWheelWarRidingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWheelWarRidingInfo)
  // optional uint32 HasInfo = 1;
  if (has_hasinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hasinfo(), target);
  }

  // repeated .pb.TWinnerInfo WinnerInfos = 2;
  for (int i = 0; i < this->winnerinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->winnerinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWheelWarRidingInfo)
  return target;
}

int TWheelWarRidingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 HasInfo = 1;
    if (has_hasinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hasinfo());
    }

  }
  // repeated .pb.TWinnerInfo WinnerInfos = 2;
  total_size += 1 * this->winnerinfos_size();
  for (int i = 0; i < this->winnerinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->winnerinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWheelWarRidingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWheelWarRidingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWheelWarRidingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWheelWarRidingInfo::MergeFrom(const TWheelWarRidingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  winnerinfos_.MergeFrom(from.winnerinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hasinfo()) {
      set_hasinfo(from.hasinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWheelWarRidingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWheelWarRidingInfo::CopyFrom(const TWheelWarRidingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWheelWarRidingInfo::IsInitialized() const {

  return true;
}

void TWheelWarRidingInfo::Swap(TWheelWarRidingInfo* other) {
  if (other != this) {
    std::swap(hasinfo_, other->hasinfo_);
    winnerinfos_.Swap(&other->winnerinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWheelWarRidingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWheelWarRidingInfo_descriptor_;
  metadata.reflection = TWheelWarRidingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBattleResultArrayReq::kRidArrFieldNumber;
const int TBattleResultArrayReq::kServerIdFieldNumber;
#endif  // !_MSC_VER

TBattleResultArrayReq::TBattleResultArrayReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBattleResultArrayReq)
}

void TBattleResultArrayReq::InitAsDefaultInstance() {
}

TBattleResultArrayReq::TBattleResultArrayReq(const TBattleResultArrayReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBattleResultArrayReq)
}

void TBattleResultArrayReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBattleResultArrayReq::~TBattleResultArrayReq() {
  // @@protoc_insertion_point(destructor:pb.TBattleResultArrayReq)
  SharedDtor();
}

void TBattleResultArrayReq::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void TBattleResultArrayReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBattleResultArrayReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBattleResultArrayReq_descriptor_;
}

const TBattleResultArrayReq& TBattleResultArrayReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TBattleResultArrayReq* TBattleResultArrayReq::default_instance_ = NULL;

TBattleResultArrayReq* TBattleResultArrayReq::New() const {
  return new TBattleResultArrayReq;
}

void TBattleResultArrayReq::Clear() {
  if (has_serverid()) {
    if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      serverid_->clear();
    }
  }
  ridarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBattleResultArrayReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBattleResultArrayReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 ridArr = 1;
      case 1: {
        if (tag == 8) {
         parse_ridArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_ridarr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ridarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_ridArr;
        if (input->ExpectTag(18)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 2;
      case 2: {
        if (tag == 18) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBattleResultArrayReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBattleResultArrayReq)
  return false;
#undef DO_
}

void TBattleResultArrayReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBattleResultArrayReq)
  // repeated uint64 ridArr = 1;
  for (int i = 0; i < this->ridarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->ridarr(i), output);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBattleResultArrayReq)
}

::google::protobuf::uint8* TBattleResultArrayReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBattleResultArrayReq)
  // repeated uint64 ridArr = 1;
  for (int i = 0; i < this->ridarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->ridarr(i), target);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBattleResultArrayReq)
  return target;
}

int TBattleResultArrayReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string ServerId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

  }
  // repeated uint64 ridArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ridarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->ridarr(i));
    }
    total_size += 1 * this->ridarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBattleResultArrayReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBattleResultArrayReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBattleResultArrayReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBattleResultArrayReq::MergeFrom(const TBattleResultArrayReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  ridarr_.MergeFrom(from.ridarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBattleResultArrayReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBattleResultArrayReq::CopyFrom(const TBattleResultArrayReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBattleResultArrayReq::IsInitialized() const {

  return true;
}

void TBattleResultArrayReq::Swap(TBattleResultArrayReq* other) {
  if (other != this) {
    ridarr_.Swap(&other->ridarr_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBattleResultArrayReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBattleResultArrayReq_descriptor_;
  metadata.reflection = TBattleResultArrayReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBattleResultArrayRsp::kBattleResultArrFieldNumber;
#endif  // !_MSC_VER

TBattleResultArrayRsp::TBattleResultArrayRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBattleResultArrayRsp)
}

void TBattleResultArrayRsp::InitAsDefaultInstance() {
}

TBattleResultArrayRsp::TBattleResultArrayRsp(const TBattleResultArrayRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBattleResultArrayRsp)
}

void TBattleResultArrayRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBattleResultArrayRsp::~TBattleResultArrayRsp() {
  // @@protoc_insertion_point(destructor:pb.TBattleResultArrayRsp)
  SharedDtor();
}

void TBattleResultArrayRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBattleResultArrayRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBattleResultArrayRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBattleResultArrayRsp_descriptor_;
}

const TBattleResultArrayRsp& TBattleResultArrayRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TBattleResultArrayRsp* TBattleResultArrayRsp::default_instance_ = NULL;

TBattleResultArrayRsp* TBattleResultArrayRsp::New() const {
  return new TBattleResultArrayRsp;
}

void TBattleResultArrayRsp::Clear() {
  battleresultarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBattleResultArrayRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBattleResultArrayRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes battleResultArr = 1;
      case 1: {
        if (tag == 10) {
         parse_battleResultArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_battleresultarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_battleResultArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBattleResultArrayRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBattleResultArrayRsp)
  return false;
#undef DO_
}

void TBattleResultArrayRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBattleResultArrayRsp)
  // repeated bytes battleResultArr = 1;
  for (int i = 0; i < this->battleresultarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->battleresultarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBattleResultArrayRsp)
}

::google::protobuf::uint8* TBattleResultArrayRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBattleResultArrayRsp)
  // repeated bytes battleResultArr = 1;
  for (int i = 0; i < this->battleresultarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->battleresultarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBattleResultArrayRsp)
  return target;
}

int TBattleResultArrayRsp::ByteSize() const {
  int total_size = 0;

  // repeated bytes battleResultArr = 1;
  total_size += 1 * this->battleresultarr_size();
  for (int i = 0; i < this->battleresultarr_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->battleresultarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBattleResultArrayRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBattleResultArrayRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBattleResultArrayRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBattleResultArrayRsp::MergeFrom(const TBattleResultArrayRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  battleresultarr_.MergeFrom(from.battleresultarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBattleResultArrayRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBattleResultArrayRsp::CopyFrom(const TBattleResultArrayRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBattleResultArrayRsp::IsInitialized() const {

  return true;
}

void TBattleResultArrayRsp::Swap(TBattleResultArrayRsp* other) {
  if (other != this) {
    battleresultarr_.Swap(&other->battleresultarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBattleResultArrayRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBattleResultArrayRsp_descriptor_;
  metadata.reflection = TBattleResultArrayRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGetBattleArgsWithUidListReq::kUidArrFieldNumber;
#endif  // !_MSC_VER

TGetBattleArgsWithUidListReq::TGetBattleArgsWithUidListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGetBattleArgsWithUidListReq)
}

void TGetBattleArgsWithUidListReq::InitAsDefaultInstance() {
}

TGetBattleArgsWithUidListReq::TGetBattleArgsWithUidListReq(const TGetBattleArgsWithUidListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGetBattleArgsWithUidListReq)
}

void TGetBattleArgsWithUidListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGetBattleArgsWithUidListReq::~TGetBattleArgsWithUidListReq() {
  // @@protoc_insertion_point(destructor:pb.TGetBattleArgsWithUidListReq)
  SharedDtor();
}

void TGetBattleArgsWithUidListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGetBattleArgsWithUidListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGetBattleArgsWithUidListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGetBattleArgsWithUidListReq_descriptor_;
}

const TGetBattleArgsWithUidListReq& TGetBattleArgsWithUidListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TGetBattleArgsWithUidListReq* TGetBattleArgsWithUidListReq::default_instance_ = NULL;

TGetBattleArgsWithUidListReq* TGetBattleArgsWithUidListReq::New() const {
  return new TGetBattleArgsWithUidListReq;
}

void TGetBattleArgsWithUidListReq::Clear() {
  uidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGetBattleArgsWithUidListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGetBattleArgsWithUidListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 UidArr = 1;
      case 1: {
        if (tag == 8) {
         parse_UidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_uidarr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_UidArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGetBattleArgsWithUidListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGetBattleArgsWithUidListReq)
  return false;
#undef DO_
}

void TGetBattleArgsWithUidListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGetBattleArgsWithUidListReq)
  // repeated uint64 UidArr = 1;
  for (int i = 0; i < this->uidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->uidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGetBattleArgsWithUidListReq)
}

::google::protobuf::uint8* TGetBattleArgsWithUidListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGetBattleArgsWithUidListReq)
  // repeated uint64 UidArr = 1;
  for (int i = 0; i < this->uidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->uidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGetBattleArgsWithUidListReq)
  return target;
}

int TGetBattleArgsWithUidListReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 UidArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->uidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uidarr(i));
    }
    total_size += 1 * this->uidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGetBattleArgsWithUidListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGetBattleArgsWithUidListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGetBattleArgsWithUidListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGetBattleArgsWithUidListReq::MergeFrom(const TGetBattleArgsWithUidListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  uidarr_.MergeFrom(from.uidarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGetBattleArgsWithUidListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGetBattleArgsWithUidListReq::CopyFrom(const TGetBattleArgsWithUidListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGetBattleArgsWithUidListReq::IsInitialized() const {

  return true;
}

void TGetBattleArgsWithUidListReq::Swap(TGetBattleArgsWithUidListReq* other) {
  if (other != this) {
    uidarr_.Swap(&other->uidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGetBattleArgsWithUidListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGetBattleArgsWithUidListReq_descriptor_;
  metadata.reflection = TGetBattleArgsWithUidListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TWarRidingInfo::kTidFieldNumber;
const int TWarRidingInfo::kFightForceFieldNumber;
const int TWarRidingInfo::kSkillIdFieldNumber;
const int TWarRidingInfo::kTrampleSkillIdFieldNumber;
#endif  // !_MSC_VER

TWarRidingInfo::TWarRidingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TWarRidingInfo)
}

void TWarRidingInfo::InitAsDefaultInstance() {
}

TWarRidingInfo::TWarRidingInfo(const TWarRidingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TWarRidingInfo)
}

void TWarRidingInfo::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  skillid_ = 0u;
  trampleskillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TWarRidingInfo::~TWarRidingInfo() {
  // @@protoc_insertion_point(destructor:pb.TWarRidingInfo)
  SharedDtor();
}

void TWarRidingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TWarRidingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TWarRidingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TWarRidingInfo_descriptor_;
}

const TWarRidingInfo& TWarRidingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TWarRidingInfo* TWarRidingInfo::default_instance_ = NULL;

TWarRidingInfo* TWarRidingInfo::New() const {
  return new TWarRidingInfo;
}

void TWarRidingInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TWarRidingInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fightforce_, trampleskillid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TWarRidingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TWarRidingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 2;
      case 2: {
        if (tag == 16) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SkillId;
        break;
      }

      // optional uint32 SkillId = 3;
      case 3: {
        if (tag == 24) {
         parse_SkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TrampleSkillId;
        break;
      }

      // optional uint32 TrampleSkillId = 4;
      case 4: {
        if (tag == 32) {
         parse_TrampleSkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trampleskillid_)));
          set_has_trampleskillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TWarRidingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TWarRidingInfo)
  return false;
#undef DO_
}

void TWarRidingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TWarRidingInfo)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tid(), output);
  }

  // optional uint64 FightForce = 2;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fightforce(), output);
  }

  // optional uint32 SkillId = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skillid(), output);
  }

  // optional uint32 TrampleSkillId = 4;
  if (has_trampleskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->trampleskillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TWarRidingInfo)
}

::google::protobuf::uint8* TWarRidingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TWarRidingInfo)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tid(), target);
  }

  // optional uint64 FightForce = 2;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fightforce(), target);
  }

  // optional uint32 SkillId = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skillid(), target);
  }

  // optional uint32 TrampleSkillId = 4;
  if (has_trampleskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->trampleskillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TWarRidingInfo)
  return target;
}

int TWarRidingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional uint64 FightForce = 2;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

    // optional uint32 SkillId = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 TrampleSkillId = 4;
    if (has_trampleskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trampleskillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TWarRidingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TWarRidingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TWarRidingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TWarRidingInfo::MergeFrom(const TWarRidingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_trampleskillid()) {
      set_trampleskillid(from.trampleskillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TWarRidingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TWarRidingInfo::CopyFrom(const TWarRidingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TWarRidingInfo::IsInitialized() const {

  return true;
}

void TWarRidingInfo::Swap(TWarRidingInfo* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(skillid_, other->skillid_);
    std::swap(trampleskillid_, other->trampleskillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TWarRidingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TWarRidingInfo_descriptor_;
  metadata.reflection = TWarRidingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGetBattleArgsWithUidReq::kUid1FieldNumber;
const int TGetBattleArgsWithUidReq::kUid2FieldNumber;
const int TGetBattleArgsWithUidReq::kBattleIdFieldNumber;
#endif  // !_MSC_VER

TGetBattleArgsWithUidReq::TGetBattleArgsWithUidReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGetBattleArgsWithUidReq)
}

void TGetBattleArgsWithUidReq::InitAsDefaultInstance() {
}

TGetBattleArgsWithUidReq::TGetBattleArgsWithUidReq(const TGetBattleArgsWithUidReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGetBattleArgsWithUidReq)
}

void TGetBattleArgsWithUidReq::SharedCtor() {
  _cached_size_ = 0;
  uid1_ = GOOGLE_ULONGLONG(0);
  uid2_ = GOOGLE_ULONGLONG(0);
  battleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGetBattleArgsWithUidReq::~TGetBattleArgsWithUidReq() {
  // @@protoc_insertion_point(destructor:pb.TGetBattleArgsWithUidReq)
  SharedDtor();
}

void TGetBattleArgsWithUidReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGetBattleArgsWithUidReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGetBattleArgsWithUidReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGetBattleArgsWithUidReq_descriptor_;
}

const TGetBattleArgsWithUidReq& TGetBattleArgsWithUidReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TGetBattleArgsWithUidReq* TGetBattleArgsWithUidReq::default_instance_ = NULL;

TGetBattleArgsWithUidReq* TGetBattleArgsWithUidReq::New() const {
  return new TGetBattleArgsWithUidReq;
}

void TGetBattleArgsWithUidReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGetBattleArgsWithUidReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid1_, battleid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGetBattleArgsWithUidReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGetBattleArgsWithUidReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid1_)));
          set_has_uid1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Uid2;
        break;
      }

      // optional uint64 Uid2 = 2;
      case 2: {
        if (tag == 16) {
         parse_Uid2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid2_)));
          set_has_uid2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BattleId;
        break;
      }

      // optional uint32 BattleId = 3;
      case 3: {
        if (tag == 24) {
         parse_BattleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleid_)));
          set_has_battleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGetBattleArgsWithUidReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGetBattleArgsWithUidReq)
  return false;
#undef DO_
}

void TGetBattleArgsWithUidReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGetBattleArgsWithUidReq)
  // optional uint64 Uid1 = 1;
  if (has_uid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid1(), output);
  }

  // optional uint64 Uid2 = 2;
  if (has_uid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uid2(), output);
  }

  // optional uint32 BattleId = 3;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->battleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGetBattleArgsWithUidReq)
}

::google::protobuf::uint8* TGetBattleArgsWithUidReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGetBattleArgsWithUidReq)
  // optional uint64 Uid1 = 1;
  if (has_uid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid1(), target);
  }

  // optional uint64 Uid2 = 2;
  if (has_uid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->uid2(), target);
  }

  // optional uint32 BattleId = 3;
  if (has_battleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->battleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGetBattleArgsWithUidReq)
  return target;
}

int TGetBattleArgsWithUidReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid1 = 1;
    if (has_uid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid1());
    }

    // optional uint64 Uid2 = 2;
    if (has_uid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid2());
    }

    // optional uint32 BattleId = 3;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGetBattleArgsWithUidReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGetBattleArgsWithUidReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGetBattleArgsWithUidReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGetBattleArgsWithUidReq::MergeFrom(const TGetBattleArgsWithUidReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid1()) {
      set_uid1(from.uid1());
    }
    if (from.has_uid2()) {
      set_uid2(from.uid2());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGetBattleArgsWithUidReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGetBattleArgsWithUidReq::CopyFrom(const TGetBattleArgsWithUidReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGetBattleArgsWithUidReq::IsInitialized() const {

  return true;
}

void TGetBattleArgsWithUidReq::Swap(TGetBattleArgsWithUidReq* other) {
  if (other != this) {
    std::swap(uid1_, other->uid1_);
    std::swap(uid2_, other->uid2_);
    std::swap(battleid_, other->battleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGetBattleArgsWithUidReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGetBattleArgsWithUidReq_descriptor_;
  metadata.reflection = TGetBattleArgsWithUidReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGetBattleArgsFromMajorSpecifyWarRiding::kUidFieldNumber;
const int TGetBattleArgsFromMajorSpecifyWarRiding::kWarRidingTidArrFieldNumber;
const int TGetBattleArgsFromMajorSpecifyWarRiding::kWarRidingLevelFieldNumber;
const int TGetBattleArgsFromMajorSpecifyWarRiding::kWarRidingAdvLvFieldNumber;
const int TGetBattleArgsFromMajorSpecifyWarRiding::kWarRidingStarFieldNumber;
#endif  // !_MSC_VER

TGetBattleArgsFromMajorSpecifyWarRiding::TGetBattleArgsFromMajorSpecifyWarRiding()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGetBattleArgsFromMajorSpecifyWarRiding)
}

void TGetBattleArgsFromMajorSpecifyWarRiding::InitAsDefaultInstance() {
}

TGetBattleArgsFromMajorSpecifyWarRiding::TGetBattleArgsFromMajorSpecifyWarRiding(const TGetBattleArgsFromMajorSpecifyWarRiding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGetBattleArgsFromMajorSpecifyWarRiding)
}

void TGetBattleArgsFromMajorSpecifyWarRiding::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  warridinglevel_ = 0u;
  warridingadvlv_ = 0u;
  warridingstar_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGetBattleArgsFromMajorSpecifyWarRiding::~TGetBattleArgsFromMajorSpecifyWarRiding() {
  // @@protoc_insertion_point(destructor:pb.TGetBattleArgsFromMajorSpecifyWarRiding)
  SharedDtor();
}

void TGetBattleArgsFromMajorSpecifyWarRiding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGetBattleArgsFromMajorSpecifyWarRiding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGetBattleArgsFromMajorSpecifyWarRiding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGetBattleArgsFromMajorSpecifyWarRiding_descriptor_;
}

const TGetBattleArgsFromMajorSpecifyWarRiding& TGetBattleArgsFromMajorSpecifyWarRiding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TGetBattleArgsFromMajorSpecifyWarRiding* TGetBattleArgsFromMajorSpecifyWarRiding::default_instance_ = NULL;

TGetBattleArgsFromMajorSpecifyWarRiding* TGetBattleArgsFromMajorSpecifyWarRiding::New() const {
  return new TGetBattleArgsFromMajorSpecifyWarRiding;
}

void TGetBattleArgsFromMajorSpecifyWarRiding::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGetBattleArgsFromMajorSpecifyWarRiding*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 29) {
    ZR_(warridinglevel_, warridingstar_);
    uid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  warridingtidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGetBattleArgsFromMajorSpecifyWarRiding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGetBattleArgsFromMajorSpecifyWarRiding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_WarRidingTidArr;
        break;
      }

      // repeated uint32 WarRidingTidArr = 2;
      case 2: {
        if (tag == 16) {
         parse_WarRidingTidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_warridingtidarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_warridingtidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_WarRidingTidArr;
        if (input->ExpectTag(24)) goto parse_WarRidingLevel;
        break;
      }

      // optional uint32 WarRidingLevel = 3;
      case 3: {
        if (tag == 24) {
         parse_WarRidingLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warridinglevel_)));
          set_has_warridinglevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_WarRidingAdvLv;
        break;
      }

      // optional uint32 WarRidingAdvLv = 4;
      case 4: {
        if (tag == 32) {
         parse_WarRidingAdvLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warridingadvlv_)));
          set_has_warridingadvlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_WarRidingStar;
        break;
      }

      // optional uint32 WarRidingStar = 5;
      case 5: {
        if (tag == 40) {
         parse_WarRidingStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warridingstar_)));
          set_has_warridingstar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGetBattleArgsFromMajorSpecifyWarRiding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGetBattleArgsFromMajorSpecifyWarRiding)
  return false;
#undef DO_
}

void TGetBattleArgsFromMajorSpecifyWarRiding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGetBattleArgsFromMajorSpecifyWarRiding)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // repeated uint32 WarRidingTidArr = 2;
  for (int i = 0; i < this->warridingtidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->warridingtidarr(i), output);
  }

  // optional uint32 WarRidingLevel = 3;
  if (has_warridinglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->warridinglevel(), output);
  }

  // optional uint32 WarRidingAdvLv = 4;
  if (has_warridingadvlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->warridingadvlv(), output);
  }

  // optional uint32 WarRidingStar = 5;
  if (has_warridingstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->warridingstar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGetBattleArgsFromMajorSpecifyWarRiding)
}

::google::protobuf::uint8* TGetBattleArgsFromMajorSpecifyWarRiding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGetBattleArgsFromMajorSpecifyWarRiding)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // repeated uint32 WarRidingTidArr = 2;
  for (int i = 0; i < this->warridingtidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->warridingtidarr(i), target);
  }

  // optional uint32 WarRidingLevel = 3;
  if (has_warridinglevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->warridinglevel(), target);
  }

  // optional uint32 WarRidingAdvLv = 4;
  if (has_warridingadvlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->warridingadvlv(), target);
  }

  // optional uint32 WarRidingStar = 5;
  if (has_warridingstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->warridingstar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGetBattleArgsFromMajorSpecifyWarRiding)
  return target;
}

int TGetBattleArgsFromMajorSpecifyWarRiding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 WarRidingLevel = 3;
    if (has_warridinglevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warridinglevel());
    }

    // optional uint32 WarRidingAdvLv = 4;
    if (has_warridingadvlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warridingadvlv());
    }

    // optional uint32 WarRidingStar = 5;
    if (has_warridingstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warridingstar());
    }

  }
  // repeated uint32 WarRidingTidArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->warridingtidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->warridingtidarr(i));
    }
    total_size += 1 * this->warridingtidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGetBattleArgsFromMajorSpecifyWarRiding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGetBattleArgsFromMajorSpecifyWarRiding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGetBattleArgsFromMajorSpecifyWarRiding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGetBattleArgsFromMajorSpecifyWarRiding::MergeFrom(const TGetBattleArgsFromMajorSpecifyWarRiding& from) {
  GOOGLE_CHECK_NE(&from, this);
  warridingtidarr_.MergeFrom(from.warridingtidarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_warridinglevel()) {
      set_warridinglevel(from.warridinglevel());
    }
    if (from.has_warridingadvlv()) {
      set_warridingadvlv(from.warridingadvlv());
    }
    if (from.has_warridingstar()) {
      set_warridingstar(from.warridingstar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGetBattleArgsFromMajorSpecifyWarRiding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGetBattleArgsFromMajorSpecifyWarRiding::CopyFrom(const TGetBattleArgsFromMajorSpecifyWarRiding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGetBattleArgsFromMajorSpecifyWarRiding::IsInitialized() const {

  return true;
}

void TGetBattleArgsFromMajorSpecifyWarRiding::Swap(TGetBattleArgsFromMajorSpecifyWarRiding* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    warridingtidarr_.Swap(&other->warridingtidarr_);
    std::swap(warridinglevel_, other->warridinglevel_);
    std::swap(warridingadvlv_, other->warridingadvlv_);
    std::swap(warridingstar_, other->warridingstar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGetBattleArgsFromMajorSpecifyWarRiding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGetBattleArgsFromMajorSpecifyWarRiding_descriptor_;
  metadata.reflection = TGetBattleArgsFromMajorSpecifyWarRiding_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBattleSoulInfo::kSkillIdFieldNumber;
const int TBattleSoulInfo::kTriggerSkillIdArrayFieldNumber;
#endif  // !_MSC_VER

TBattleSoulInfo::TBattleSoulInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBattleSoulInfo)
}

void TBattleSoulInfo::InitAsDefaultInstance() {
}

TBattleSoulInfo::TBattleSoulInfo(const TBattleSoulInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBattleSoulInfo)
}

void TBattleSoulInfo::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBattleSoulInfo::~TBattleSoulInfo() {
  // @@protoc_insertion_point(destructor:pb.TBattleSoulInfo)
  SharedDtor();
}

void TBattleSoulInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBattleSoulInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBattleSoulInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBattleSoulInfo_descriptor_;
}

const TBattleSoulInfo& TBattleSoulInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBattleBase_2eproto();
  return *default_instance_;
}

TBattleSoulInfo* TBattleSoulInfo::default_instance_ = NULL;

TBattleSoulInfo* TBattleSoulInfo::New() const {
  return new TBattleSoulInfo;
}

void TBattleSoulInfo::Clear() {
  skillid_ = 0u;
  triggerskillidarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBattleSoulInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBattleSoulInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SkillId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TriggerSkillIdArray;
        break;
      }

      // repeated uint32 TriggerSkillIdArray = 2;
      case 2: {
        if (tag == 16) {
         parse_TriggerSkillIdArray:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_triggerskillidarray())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_triggerskillidarray())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TriggerSkillIdArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBattleSoulInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBattleSoulInfo)
  return false;
#undef DO_
}

void TBattleSoulInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBattleSoulInfo)
  // optional uint32 SkillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // repeated uint32 TriggerSkillIdArray = 2;
  for (int i = 0; i < this->triggerskillidarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->triggerskillidarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBattleSoulInfo)
}

::google::protobuf::uint8* TBattleSoulInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBattleSoulInfo)
  // optional uint32 SkillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  // repeated uint32 TriggerSkillIdArray = 2;
  for (int i = 0; i < this->triggerskillidarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->triggerskillidarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBattleSoulInfo)
  return target;
}

int TBattleSoulInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SkillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

  }
  // repeated uint32 TriggerSkillIdArray = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->triggerskillidarray_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->triggerskillidarray(i));
    }
    total_size += 1 * this->triggerskillidarray_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBattleSoulInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBattleSoulInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBattleSoulInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBattleSoulInfo::MergeFrom(const TBattleSoulInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  triggerskillidarray_.MergeFrom(from.triggerskillidarray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBattleSoulInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBattleSoulInfo::CopyFrom(const TBattleSoulInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBattleSoulInfo::IsInitialized() const {

  return true;
}

void TBattleSoulInfo::Swap(TBattleSoulInfo* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    triggerskillidarray_.Swap(&other->triggerskillidarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBattleSoulInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBattleSoulInfo_descriptor_;
  metadata.reflection = TBattleSoulInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
