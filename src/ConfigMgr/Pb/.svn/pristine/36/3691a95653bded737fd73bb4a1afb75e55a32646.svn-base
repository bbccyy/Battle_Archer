// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Alliance.proto

#ifndef PROTOBUF_net_2fAlliance_2eproto__INCLUDED
#define PROTOBUF_net_2fAlliance_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/User.pb.h"
#include "net/CommonReward.pb.h"
#include "net/Guild.pb.h"
#include "net/GuildUser.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fAlliance_2eproto();
void protobuf_AssignDesc_net_2fAlliance_2eproto();
void protobuf_ShutdownFile_net_2fAlliance_2eproto();

class TAllianceUserTaskType;
class TAllianceUserTask;
class TAllianceUserPractice;
class TAllianceUserInfo;
class TAllianceTip;
class TAllianceSimpleInfo;
class TAllianceSimpleInfoWithApplyStatus;
class TAllianceVoteInfo;
class TAllianceScience;
class TAllianceDetailInfo;
class TAllianceGuildUserMemberInfo;
class TAllianceGuildMemberInfo;
class TAllianceGuildMemberInfoWithUser;
class TAllianceApplyGuildInfo;
class TInnerAllianceGetServerTeamInfoRsp;
class TInnerAllianceGetAllianceInfoRsp;
class TInnerAllianceRefreshTaskReq;
class TInnerAllianceUpgradeTaskReq;
class TInnerAllianceCommitTaskReq;
class TInnerAllianceCommitTaskRsp;
class TInnerAllianceReceiveTaskRewardReq;
class TInnerAllianceReceiveTaskRewardRsp;
class TInnerAllianceReceiveSignRewardRsp;
class TInnerAllianceUpgradePracticeReq;
class TAllianceUserInfoChange;
class TCrossAllianceGetAllianceListReq;
class TCrossAllianceGetAllianceListRsp;
class TCrossAllianceSearchAllianceReq;
class TCrossAllianceSearchAllianceRsp;
class TCrossAllianceGetAllianceMemberListReq;
class TCrossAllianceGetAllianceMemberListRsp;
class TCrossAllianceGetAllianceApplyListRsp;
class TCrossAllianceCreateAllianceReq;
class TCrossAllianceApplyAllianceReq;
class TCrossAllianceApplyAllianceRsp;
class TCrossAllianceCancelApplyAllianceReq;
class TCrossAllianceExamineApplyReq;
class TCrossAllianceModifyInfoReq;
class TCrossAllianceChangeNameReq;
class TCrossAllianceKickGuildReq;
class TCrossAllianceAppointPostReq;
class TCrossAllianceInitiateVoteReq;
class TCrossAllianceCancelVoteReq;
class TCrossAllianceVoteReq;
class TCrossAllianceUpgradeScienceReq;
class TAllianceInfoChange;
class TAllianceJoinNotify;
class TAllianceLeaveNotify;

enum EAllianceTipType {
  ALLIANCE_TIP_GUILD_JOIN = 1,
  ALLIANCE_TIP_GUILD_LEAVE = 2,
  ALLIANCE_TIP_VOTE_KICK_SUCCESS = 3,
  ALLIANCE_TIP_VOTE_KICK_FAILED = 4,
  ALLIANCE_TIP_VOTE_IMPEACH_SUCCESS = 5,
  ALLIANCE_TIP_VOTE_IMPEACH_FAILED = 6,
  ALLIANCE_TIP_TRANSFER_LEADER = 7,
  ALLIANCE_TIP_CHANGE_NAME = 8,
  ALLIANCE_TIP_INITIATE_VOTE = 9,
  ALLIANCE_TIP_COMPLETE_SIGN = 10,
  ALLIANCE_TIP_COMMIT_TASK = 11,
  ALLIANCE_TIP_COMMIT_TASK_2 = 12,
  ALLIANCE_TIP_ALLYWAR_RANK = 13
};
bool EAllianceTipType_IsValid(int value);
const EAllianceTipType EAllianceTipType_MIN = ALLIANCE_TIP_GUILD_JOIN;
const EAllianceTipType EAllianceTipType_MAX = ALLIANCE_TIP_ALLYWAR_RANK;
const int EAllianceTipType_ARRAYSIZE = EAllianceTipType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAllianceTipType_descriptor();
inline const ::std::string& EAllianceTipType_Name(EAllianceTipType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAllianceTipType_descriptor(), value);
}
inline bool EAllianceTipType_Parse(
    const ::std::string& name, EAllianceTipType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAllianceTipType>(
    EAllianceTipType_descriptor(), name, value);
}
enum EAllianceVoteType {
  ALLIANCE_VOTE_TYPE_IMPEACH = 1,
  ALLIANCE_VOTE_TYPE_KICK_GUILD = 2
};
bool EAllianceVoteType_IsValid(int value);
const EAllianceVoteType EAllianceVoteType_MIN = ALLIANCE_VOTE_TYPE_IMPEACH;
const EAllianceVoteType EAllianceVoteType_MAX = ALLIANCE_VOTE_TYPE_KICK_GUILD;
const int EAllianceVoteType_ARRAYSIZE = EAllianceVoteType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAllianceVoteType_descriptor();
inline const ::std::string& EAllianceVoteType_Name(EAllianceVoteType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAllianceVoteType_descriptor(), value);
}
inline bool EAllianceVoteType_Parse(
    const ::std::string& name, EAllianceVoteType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAllianceVoteType>(
    EAllianceVoteType_descriptor(), name, value);
}
enum EAlliancePost {
  ALLIANCE_POST_NONE = 0,
  ALLIANCE_POST_MEMBER = 1,
  ALLIANCE_POST_LEADER = 2,
  ALLIANCE_POST_DEPUTY = 3
};
bool EAlliancePost_IsValid(int value);
const EAlliancePost EAlliancePost_MIN = ALLIANCE_POST_NONE;
const EAlliancePost EAlliancePost_MAX = ALLIANCE_POST_DEPUTY;
const int EAlliancePost_ARRAYSIZE = EAlliancePost_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAlliancePost_descriptor();
inline const ::std::string& EAlliancePost_Name(EAlliancePost value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAlliancePost_descriptor(), value);
}
inline bool EAlliancePost_Parse(
    const ::std::string& name, EAlliancePost* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAlliancePost>(
    EAlliancePost_descriptor(), name, value);
}
enum EAllianceVoteResult {
  ALLIANCE_VOTE_AGREE = 1,
  ALLIANCE_POST_AGAINST = 2
};
bool EAllianceVoteResult_IsValid(int value);
const EAllianceVoteResult EAllianceVoteResult_MIN = ALLIANCE_VOTE_AGREE;
const EAllianceVoteResult EAllianceVoteResult_MAX = ALLIANCE_POST_AGAINST;
const int EAllianceVoteResult_ARRAYSIZE = EAllianceVoteResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAllianceVoteResult_descriptor();
inline const ::std::string& EAllianceVoteResult_Name(EAllianceVoteResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAllianceVoteResult_descriptor(), value);
}
inline bool EAllianceVoteResult_Parse(
    const ::std::string& name, EAllianceVoteResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAllianceVoteResult>(
    EAllianceVoteResult_descriptor(), name, value);
}
enum EAllianceResult {
  ALLIANCE_RESULT_SUCCESS = 1,
  ALLIANCE_RESULT_FAIL = 2
};
bool EAllianceResult_IsValid(int value);
const EAllianceResult EAllianceResult_MIN = ALLIANCE_RESULT_SUCCESS;
const EAllianceResult EAllianceResult_MAX = ALLIANCE_RESULT_FAIL;
const int EAllianceResult_ARRAYSIZE = EAllianceResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAllianceResult_descriptor();
inline const ::std::string& EAllianceResult_Name(EAllianceResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAllianceResult_descriptor(), value);
}
inline bool EAllianceResult_Parse(
    const ::std::string& name, EAllianceResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAllianceResult>(
    EAllianceResult_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TAllianceUserTaskType</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAllianceUserTaskType : public ::google::protobuf::Message {
 public:
  TAllianceUserTaskType();
  virtual ~TAllianceUserTaskType();

  TAllianceUserTaskType(const TAllianceUserTaskType& from);

  inline TAllianceUserTaskType& operator=(const TAllianceUserTaskType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAllianceUserTaskType& default_instance();

  void Swap(TAllianceUserTaskType* other);

  // implements Message ----------------------------------------------

  TAllianceUserTaskType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAllianceUserTaskType& from);
  void MergeFrom(const TAllianceUserTaskType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TaskType = 1;
  inline bool has_tasktype() const;
  inline void clear_tasktype();
  static const int kTaskTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAllianceUserTaskType</name>
  	<Function>
  		<name>tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tasktype</name>
  		<replaceName>TaskType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tasktype() const;
  inline void set_tasktype(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAllianceUserTaskType</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAllianceUserTaskType)
 private:
  inline void set_has_tasktype();
  inline void clear_has_tasktype();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tasktype_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TAllianceUserTaskType* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAllianceUserTask</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAllianceUserTask : public ::google::protobuf::Message {
 public:
  TAllianceUserTask();
  virtual ~TAllianceUserTask();

  TAllianceUserTask(const TAllianceUserTask& from);

  inline TAllianceUserTask& operator=(const TAllianceUserTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAllianceUserTask& default_instance();

  void Swap(TAllianceUserTask* other);

  // implements Message ----------------------------------------------

  TAllianceUserTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAllianceUserTask& from);
  void MergeFrom(const TAllianceUserTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TaskId = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAllianceUserTask</name>
  	<Function>
  		<name>taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // optional uint64 CommitTime = 2;
  inline bool has_committime() const;
  inline void clear_committime();
  static const int kCommitTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAllianceUserTask</name>
  	<Function>
  		<name>committime</name>
  		<replaceName>CommitTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_committime</name>
  		<replaceName>CommitTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_committime</name>
  		<replaceName>CommitTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 committime() const;
  inline void set_committime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TAllianceUserTask)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_committime();
  inline void clear_has_committime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 committime_;
  ::google::protobuf::uint32 taskid_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TAllianceUserTask* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAllianceUserPractice</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAllianceUserPractice : public ::google::protobuf::Message {
 public:
  TAllianceUserPractice();
  virtual ~TAllianceUserPractice();

  TAllianceUserPractice(const TAllianceUserPractice& from);

  inline TAllianceUserPractice& operator=(const TAllianceUserPractice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAllianceUserPractice& default_instance();

  void Swap(TAllianceUserPractice* other);

  // implements Message ----------------------------------------------

  TAllianceUserPractice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAllianceUserPractice& from);
  void MergeFrom(const TAllianceUserPractice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAllianceUserPractice</name>
  	<Function>
  		<name>type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 Level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAllianceUserPractice</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAllianceUserPractice)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TAllianceUserPractice* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAllianceUserInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAllianceUserInfo : public ::google::protobuf::Message {
 public:
  TAllianceUserInfo();
  virtual ~TAllianceUserInfo();

  TAllianceUserInfo(const TAllianceUserInfo& from);

  inline TAllianceUserInfo& operator=(const TAllianceUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAllianceUserInfo& default_instance();

  void Swap(TAllianceUserInfo* other);

  // implements Message ----------------------------------------------

  TAllianceUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAllianceUserInfo& from);
  void MergeFrom(const TAllianceUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TaskRefreshNum = 1;
  inline bool has_taskrefreshnum() const;
  inline void clear_taskrefreshnum();
  static const int kTaskRefreshNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAllianceUserInfo</name>
  	<Function>
  		<name>taskrefreshnum</name>
  		<replaceName>TaskRefreshNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_taskrefreshnum</name>
  		<replaceName>TaskRefreshNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskrefreshnum</name>
  		<replaceName>TaskRefreshNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 taskrefreshnum() const;
  inline void set_taskrefreshnum(::google::protobuf::uint32 value);

  // optional uint32 TaskUpgradeNum = 2;
  inline bool has_taskupgradenum() const;
  inline void clear_taskupgradenum();
  static const int kTaskUpgradeNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAllianceUserInfo</name>
  	<Function>
  		<name>taskupgradenum</name>
  		<replaceName>TaskUpgradeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_taskupgradenum</name>
  		<replaceName>TaskUpgradeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskupgradenum</name>
  		<replaceName>TaskUpgradeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 taskupgradenum() const;
  inline void set_taskupgradenum(::google::protobuf::uint32 value);

  // repeated .pb.TAllianceUserTaskType ArrTaskTypeInfo = 3;
  inline int arrtasktypeinfo_size() const;
  inline void clear_arrtasktypeinfo();
  static const int kArrTaskTypeInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAllianceUserInfo</name>
  	<Function>
  		<name>arrtasktypeinfo</name>
  		<replaceName>ArrTaskTypeInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtasktypeinfo</name>
  		<replaceName>ArrTaskTypeInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtasktypeinfo</name>
  		<replaceName>ArrTaskTypeInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtasktypeinfo</name>
  		<replaceName>ArrTaskTypeInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtasktypeinfo_size</name>
  		<replaceName>ArrTaskTypeInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceUserTaskType& arrtasktypeinfo(int index) const;
  inline ::pb::TAllianceUserTaskType* mutable_arrtasktypeinfo(int index);
  inline ::pb::TAllianceUserTaskType* add_arrtasktypeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceUserTaskType >&
      arrtasktypeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceUserTaskType >*
      mutable_arrtasktypeinfo();

  // repeated .pb.TAllianceUserTask ArrTaskInfo = 4;
  inline int arrtaskinfo_size() const;
  inline void clear_arrtaskinfo();
  static const int kArrTaskInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAllianceUserInfo</name>
  	<Function>
  		<name>arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtaskinfo</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtaskinfo_size</name>
  		<replaceName>ArrTaskInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceUserTask& arrtaskinfo(int index) const;
  inline ::pb::TAllianceUserTask* mutable_arrtaskinfo(int index);
  inline ::pb::TAllianceUserTask* add_arrtaskinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceUserTask >&
      arrtaskinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceUserTask >*
      mutable_arrtaskinfo();

  // optional uint64 SignRewardTime = 5;
  inline bool has_signrewardtime() const;
  inline void clear_signrewardtime();
  static const int kSignRewardTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAllianceUserInfo</name>
  	<Function>
  		<name>signrewardtime</name>
  		<replaceName>SignRewardTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_signrewardtime</name>
  		<replaceName>SignRewardTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_signrewardtime</name>
  		<replaceName>SignRewardTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 signrewardtime() const;
  inline void set_signrewardtime(::google::protobuf::uint64 value);

  // repeated uint64 TaskRewardTime = 6;
  inline int taskrewardtime_size() const;
  inline void clear_taskrewardtime();
  static const int kTaskRewardTimeFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TAllianceUserInfo</name>
  	<Function>
  		<name>taskrewardtime</name>
  		<replaceName>TaskRewardTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_taskrewardtime</name>
  		<replaceName>TaskRewardTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_taskrewardtime</name>
  		<replaceName>TaskRewardTime</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskrewardtime</name>
  		<replaceName>TaskRewardTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>taskrewardtime_size</name>
  		<replaceName>TaskRewardTime</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 taskrewardtime(int index) const;
  inline void set_taskrewardtime(int index, ::google::protobuf::uint64 value);
  inline void add_taskrewardtime(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      taskrewardtime() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_taskrewardtime();

  // repeated .pb.TAllianceUserPractice ArrPractice = 7;
  inline int arrpractice_size() const;
  inline void clear_arrpractice();
  static const int kArrPracticeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TAllianceUserInfo</name>
  	<Function>
  		<name>arrpractice</name>
  		<replaceName>ArrPractice</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrpractice</name>
  		<replaceName>ArrPractice</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrpractice</name>
  		<replaceName>ArrPractice</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrpractice</name>
  		<replaceName>ArrPractice</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrpractice_size</name>
  		<replaceName>ArrPractice</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceUserPractice& arrpractice(int index) const;
  inline ::pb::TAllianceUserPractice* mutable_arrpractice(int index);
  inline ::pb::TAllianceUserPractice* add_arrpractice();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceUserPractice >&
      arrpractice() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceUserPractice >*
      mutable_arrpractice();

  // @@protoc_insertion_point(class_scope:pb.TAllianceUserInfo)
 private:
  inline void set_has_taskrefreshnum();
  inline void clear_has_taskrefreshnum();
  inline void set_has_taskupgradenum();
  inline void clear_has_taskupgradenum();
  inline void set_has_signrewardtime();
  inline void clear_has_signrewardtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 taskrefreshnum_;
  ::google::protobuf::uint32 taskupgradenum_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAllianceUserTaskType > arrtasktypeinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAllianceUserTask > arrtaskinfo_;
  ::google::protobuf::uint64 signrewardtime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > taskrewardtime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAllianceUserPractice > arrpractice_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TAllianceUserInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAllianceTip</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAllianceTip : public ::google::protobuf::Message {
 public:
  TAllianceTip();
  virtual ~TAllianceTip();

  TAllianceTip(const TAllianceTip& from);

  inline TAllianceTip& operator=(const TAllianceTip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAllianceTip& default_instance();

  void Swap(TAllianceTip* other);

  // implements Message ----------------------------------------------

  TAllianceTip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAllianceTip& from);
  void MergeFrom(const TAllianceTip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAllianceTip</name>
  	<Function>
  		<name>time</name>
  		<replaceName>Time</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_time</name>
  		<replaceName>Time</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_time</name>
  		<replaceName>Time</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional .pb.EAllianceTipType Type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAllianceTip</name>
  	<Function>
  		<name>type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAllianceTipType type() const;
  inline void set_type(::pb::EAllianceTipType value);

  // repeated string ParamArr = 3;
  inline int paramarr_size() const;
  inline void clear_paramarr();
  static const int kParamArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAllianceTip</name>
  	<Function>
  		<name>paramarr</name>
  		<replaceName>ParamArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_paramarr</name>
  		<replaceName>ParamArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_paramarr</name>
  		<replaceName>ParamArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_paramarr</name>
  		<replaceName>ParamArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>paramarr_size</name>
  		<replaceName>ParamArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& paramarr(int index) const;
  inline ::std::string* mutable_paramarr(int index);
  inline void set_paramarr(int index, const ::std::string& value);
  inline void set_paramarr(int index, const char* value);
  inline void set_paramarr(int index, const char* value, size_t size);
  inline ::std::string* add_paramarr();
  inline void add_paramarr(const ::std::string& value);
  inline void add_paramarr(const char* value);
  inline void add_paramarr(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& paramarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_paramarr();

  // @@protoc_insertion_point(class_scope:pb.TAllianceTip)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::RepeatedPtrField< ::std::string> paramarr_;
  int type_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TAllianceTip* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAllianceSimpleInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAllianceSimpleInfo : public ::google::protobuf::Message {
 public:
  TAllianceSimpleInfo();
  virtual ~TAllianceSimpleInfo();

  TAllianceSimpleInfo(const TAllianceSimpleInfo& from);

  inline TAllianceSimpleInfo& operator=(const TAllianceSimpleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAllianceSimpleInfo& default_instance();

  void Swap(TAllianceSimpleInfo* other);

  // implements Message ----------------------------------------------

  TAllianceSimpleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAllianceSimpleInfo& from);
  void MergeFrom(const TAllianceSimpleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 AllianceId = 1;
  inline bool has_allianceid() const;
  inline void clear_allianceid();
  static const int kAllianceIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAllianceSimpleInfo</name>
  	<Function>
  		<name>allianceid</name>
  		<replaceName>AllianceId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allianceid</name>
  		<replaceName>AllianceId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_allianceid</name>
  		<replaceName>AllianceId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 allianceid() const;
  inline void set_allianceid(::google::protobuf::uint64 value);

  // optional string Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAllianceSimpleInfo</name>
  	<Function>
  		<name>name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string BannerName = 3;
  inline bool has_bannername() const;
  inline void clear_bannername();
  static const int kBannerNameFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAllianceSimpleInfo</name>
  	<Function>
  		<name>bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& bannername() const;
  inline void set_bannername(const ::std::string& value);
  inline void set_bannername(const char* value);
  inline void set_bannername(const char* value, size_t size);
  inline ::std::string* mutable_bannername();
  inline ::std::string* release_bannername();
  inline void set_allocated_bannername(::std::string* bannername);

  // optional uint32 BannerBase = 4;
  inline bool has_bannerbase() const;
  inline void clear_bannerbase();
  static const int kBannerBaseFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAllianceSimpleInfo</name>
  	<Function>
  		<name>bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bannerbase() const;
  inline void set_bannerbase(::google::protobuf::uint32 value);

  // optional uint32 BannerFigure = 5;
  inline bool has_bannerfigure() const;
  inline void clear_bannerfigure();
  static const int kBannerFigureFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAllianceSimpleInfo</name>
  	<Function>
  		<name>bannerfigure</name>
  		<replaceName>BannerFigure</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannerfigure</name>
  		<replaceName>BannerFigure</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannerfigure</name>
  		<replaceName>BannerFigure</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bannerfigure() const;
  inline void set_bannerfigure(::google::protobuf::uint32 value);

  // optional uint32 Level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TAllianceSimpleInfo</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 Exp = 7;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TAllianceSimpleInfo</name>
  	<Function>
  		<name>exp</name>
  		<replaceName>Exp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_exp</name>
  		<replaceName>Exp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_exp</name>
  		<replaceName>Exp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 GuildMemberNum = 8;
  inline bool has_guildmembernum() const;
  inline void clear_guildmembernum();
  static const int kGuildMemberNumFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TAllianceSimpleInfo</name>
  	<Function>
  		<name>guildmembernum</name>
  		<replaceName>GuildMemberNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildmembernum</name>
  		<replaceName>GuildMemberNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildmembernum</name>
  		<replaceName>GuildMemberNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 guildmembernum() const;
  inline void set_guildmembernum(::google::protobuf::uint32 value);

  // optional uint32 GuildUserNum = 9;
  inline bool has_guildusernum() const;
  inline void clear_guildusernum();
  static const int kGuildUserNumFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TAllianceSimpleInfo</name>
  	<Function>
  		<name>guildusernum</name>
  		<replaceName>GuildUserNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildusernum</name>
  		<replaceName>GuildUserNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildusernum</name>
  		<replaceName>GuildUserNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 guildusernum() const;
  inline void set_guildusernum(::google::protobuf::uint32 value);

  // optional .pb.EReviewMode ReviewMode = 10;
  inline bool has_reviewmode() const;
  inline void clear_reviewmode();
  static const int kReviewModeFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TAllianceSimpleInfo</name>
  	<Function>
  		<name>reviewmode</name>
  		<replaceName>ReviewMode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_reviewmode</name>
  		<replaceName>ReviewMode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reviewmode</name>
  		<replaceName>ReviewMode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EReviewMode reviewmode() const;
  inline void set_reviewmode(::pb::EReviewMode value);

  // optional uint32 GuildLvLimit = 11;
  inline bool has_guildlvlimit() const;
  inline void clear_guildlvlimit();
  static const int kGuildLvLimitFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TAllianceSimpleInfo</name>
  	<Function>
  		<name>guildlvlimit</name>
  		<replaceName>GuildLvLimit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildlvlimit</name>
  		<replaceName>GuildLvLimit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildlvlimit</name>
  		<replaceName>GuildLvLimit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 guildlvlimit() const;
  inline void set_guildlvlimit(::google::protobuf::uint32 value);

  // optional string Summary = 12;
  inline bool has_summary() const;
  inline void clear_summary();
  static const int kSummaryFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TAllianceSimpleInfo</name>
  	<Function>
  		<name>summary</name>
  		<replaceName>Summary</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_summary</name>
  		<replaceName>Summary</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_summary</name>
  		<replaceName>Summary</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& summary() const;
  inline void set_summary(const ::std::string& value);
  inline void set_summary(const char* value);
  inline void set_summary(const char* value, size_t size);
  inline ::std::string* mutable_summary();
  inline ::std::string* release_summary();
  inline void set_allocated_summary(::std::string* summary);

  // optional string QQ = 13;
  inline bool has_qq() const;
  inline void clear_qq();
  static const int kQQFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TAllianceSimpleInfo</name>
  	<Function>
  		<name>qq</name>
  		<replaceName>QQ</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_qq</name>
  		<replaceName>QQ</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_qq</name>
  		<replaceName>QQ</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& qq() const;
  inline void set_qq(const ::std::string& value);
  inline void set_qq(const char* value);
  inline void set_qq(const char* value, size_t size);
  inline ::std::string* mutable_qq();
  inline ::std::string* release_qq();
  inline void set_allocated_qq(::std::string* qq);

  // optional uint64 CreateTime = 14;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>TAllianceSimpleInfo</name>
  	<Function>
  		<name>createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 createtime() const;
  inline void set_createtime(::google::protobuf::uint64 value);

  // optional uint64 TotalFightForce = 15;
  inline bool has_totalfightforce() const;
  inline void clear_totalfightforce();
  static const int kTotalFightForceFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>TAllianceSimpleInfo</name>
  	<Function>
  		<name>totalfightforce</name>
  		<replaceName>TotalFightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalfightforce</name>
  		<replaceName>TotalFightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalfightforce</name>
  		<replaceName>TotalFightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 totalfightforce() const;
  inline void set_totalfightforce(::google::protobuf::uint64 value);

  // optional .pb.TUserSimpleInfo LeaderUserInfo = 16;
  inline bool has_leaderuserinfo() const;
  inline void clear_leaderuserinfo();
  static const int kLeaderUserInfoFieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>TAllianceSimpleInfo</name>
  	<Function>
  		<name>leaderuserinfo</name>
  		<replaceName>LeaderUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_leaderuserinfo</name>
  		<replaceName>LeaderUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_leaderuserinfo</name>
  		<replaceName>LeaderUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_leaderuserinfo</name>
  		<replaceName>LeaderUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& leaderuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_leaderuserinfo();
  inline ::pb::TUserSimpleInfo* release_leaderuserinfo();
  inline void set_allocated_leaderuserinfo(::pb::TUserSimpleInfo* leaderuserinfo);

  // repeated .pb.TAllianceGuildMemberInfo ArrGuildMember = 17;
  inline int arrguildmember_size() const;
  inline void clear_arrguildmember();
  static const int kArrGuildMemberFieldNumber = 17;
  /*FOR2LUA
  <Record>
  	<name>TAllianceSimpleInfo</name>
  	<Function>
  		<name>arrguildmember</name>
  		<replaceName>ArrGuildMember</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrguildmember</name>
  		<replaceName>ArrGuildMember</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrguildmember</name>
  		<replaceName>ArrGuildMember</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrguildmember</name>
  		<replaceName>ArrGuildMember</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrguildmember_size</name>
  		<replaceName>ArrGuildMember</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceGuildMemberInfo& arrguildmember(int index) const;
  inline ::pb::TAllianceGuildMemberInfo* mutable_arrguildmember(int index);
  inline ::pb::TAllianceGuildMemberInfo* add_arrguildmember();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceGuildMemberInfo >&
      arrguildmember() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceGuildMemberInfo >*
      mutable_arrguildmember();

  // optional uint32 AddMemberNum = 18;
  inline bool has_addmembernum() const;
  inline void clear_addmembernum();
  static const int kAddMemberNumFieldNumber = 18;
  /*FOR2LUA
  <Record>
  	<name>TAllianceSimpleInfo</name>
  	<Function>
  		<name>addmembernum</name>
  		<replaceName>AddMemberNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_addmembernum</name>
  		<replaceName>AddMemberNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_addmembernum</name>
  		<replaceName>AddMemberNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 addmembernum() const;
  inline void set_addmembernum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAllianceSimpleInfo)
 private:
  inline void set_has_allianceid();
  inline void clear_has_allianceid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_bannername();
  inline void clear_has_bannername();
  inline void set_has_bannerbase();
  inline void clear_has_bannerbase();
  inline void set_has_bannerfigure();
  inline void clear_has_bannerfigure();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_guildmembernum();
  inline void clear_has_guildmembernum();
  inline void set_has_guildusernum();
  inline void clear_has_guildusernum();
  inline void set_has_reviewmode();
  inline void clear_has_reviewmode();
  inline void set_has_guildlvlimit();
  inline void clear_has_guildlvlimit();
  inline void set_has_summary();
  inline void clear_has_summary();
  inline void set_has_qq();
  inline void clear_has_qq();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_totalfightforce();
  inline void clear_has_totalfightforce();
  inline void set_has_leaderuserinfo();
  inline void clear_has_leaderuserinfo();
  inline void set_has_addmembernum();
  inline void clear_has_addmembernum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 allianceid_;
  ::std::string* name_;
  ::std::string* bannername_;
  ::google::protobuf::uint32 bannerbase_;
  ::google::protobuf::uint32 bannerfigure_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 guildmembernum_;
  ::google::protobuf::uint32 guildusernum_;
  int reviewmode_;
  ::google::protobuf::uint32 guildlvlimit_;
  ::std::string* summary_;
  ::std::string* qq_;
  ::google::protobuf::uint64 createtime_;
  ::google::protobuf::uint64 totalfightforce_;
  ::pb::TUserSimpleInfo* leaderuserinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAllianceGuildMemberInfo > arrguildmember_;
  ::google::protobuf::uint32 addmembernum_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TAllianceSimpleInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAllianceSimpleInfoWithApplyStatus</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAllianceSimpleInfoWithApplyStatus : public ::google::protobuf::Message {
 public:
  TAllianceSimpleInfoWithApplyStatus();
  virtual ~TAllianceSimpleInfoWithApplyStatus();

  TAllianceSimpleInfoWithApplyStatus(const TAllianceSimpleInfoWithApplyStatus& from);

  inline TAllianceSimpleInfoWithApplyStatus& operator=(const TAllianceSimpleInfoWithApplyStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAllianceSimpleInfoWithApplyStatus& default_instance();

  void Swap(TAllianceSimpleInfoWithApplyStatus* other);

  // implements Message ----------------------------------------------

  TAllianceSimpleInfoWithApplyStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAllianceSimpleInfoWithApplyStatus& from);
  void MergeFrom(const TAllianceSimpleInfoWithApplyStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TAllianceSimpleInfo AllianceSimpleInfo = 1;
  inline bool has_alliancesimpleinfo() const;
  inline void clear_alliancesimpleinfo();
  static const int kAllianceSimpleInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAllianceSimpleInfoWithApplyStatus</name>
  	<Function>
  		<name>alliancesimpleinfo</name>
  		<replaceName>AllianceSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_alliancesimpleinfo</name>
  		<replaceName>AllianceSimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_alliancesimpleinfo</name>
  		<replaceName>AllianceSimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_alliancesimpleinfo</name>
  		<replaceName>AllianceSimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceSimpleInfo& alliancesimpleinfo() const;
  inline ::pb::TAllianceSimpleInfo* mutable_alliancesimpleinfo();
  inline ::pb::TAllianceSimpleInfo* release_alliancesimpleinfo();
  inline void set_allocated_alliancesimpleinfo(::pb::TAllianceSimpleInfo* alliancesimpleinfo);

  // optional bool Apply = 2;
  inline bool has_apply() const;
  inline void clear_apply();
  static const int kApplyFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAllianceSimpleInfoWithApplyStatus</name>
  	<Function>
  		<name>apply</name>
  		<replaceName>Apply</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_apply</name>
  		<replaceName>Apply</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_apply</name>
  		<replaceName>Apply</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool apply() const;
  inline void set_apply(bool value);

  // @@protoc_insertion_point(class_scope:pb.TAllianceSimpleInfoWithApplyStatus)
 private:
  inline void set_has_alliancesimpleinfo();
  inline void clear_has_alliancesimpleinfo();
  inline void set_has_apply();
  inline void clear_has_apply();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAllianceSimpleInfo* alliancesimpleinfo_;
  bool apply_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TAllianceSimpleInfoWithApplyStatus* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAllianceVoteInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAllianceVoteInfo : public ::google::protobuf::Message {
 public:
  TAllianceVoteInfo();
  virtual ~TAllianceVoteInfo();

  TAllianceVoteInfo(const TAllianceVoteInfo& from);

  inline TAllianceVoteInfo& operator=(const TAllianceVoteInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAllianceVoteInfo& default_instance();

  void Swap(TAllianceVoteInfo* other);

  // implements Message ----------------------------------------------

  TAllianceVoteInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAllianceVoteInfo& from);
  void MergeFrom(const TAllianceVoteInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 VoteId = 1;
  inline bool has_voteid() const;
  inline void clear_voteid();
  static const int kVoteIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAllianceVoteInfo</name>
  	<Function>
  		<name>voteid</name>
  		<replaceName>VoteId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_voteid</name>
  		<replaceName>VoteId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_voteid</name>
  		<replaceName>VoteId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 voteid() const;
  inline void set_voteid(::google::protobuf::uint64 value);

  // optional .pb.TUserSimpleInfo SponsorUserInfo = 2;
  inline bool has_sponsoruserinfo() const;
  inline void clear_sponsoruserinfo();
  static const int kSponsorUserInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAllianceVoteInfo</name>
  	<Function>
  		<name>sponsoruserinfo</name>
  		<replaceName>SponsorUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sponsoruserinfo</name>
  		<replaceName>SponsorUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_sponsoruserinfo</name>
  		<replaceName>SponsorUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sponsoruserinfo</name>
  		<replaceName>SponsorUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& sponsoruserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_sponsoruserinfo();
  inline ::pb::TUserSimpleInfo* release_sponsoruserinfo();
  inline void set_allocated_sponsoruserinfo(::pb::TUserSimpleInfo* sponsoruserinfo);

  // optional uint64 StartTime = 3;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAllianceVoteInfo</name>
  	<Function>
  		<name>starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 starttime() const;
  inline void set_starttime(::google::protobuf::uint64 value);

  // optional .pb.EAllianceVoteType VoteType = 4;
  inline bool has_votetype() const;
  inline void clear_votetype();
  static const int kVoteTypeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAllianceVoteInfo</name>
  	<Function>
  		<name>votetype</name>
  		<replaceName>VoteType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_votetype</name>
  		<replaceName>VoteType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_votetype</name>
  		<replaceName>VoteType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAllianceVoteType votetype() const;
  inline void set_votetype(::pb::EAllianceVoteType value);

  // optional .pb.TUserSimpleInfo AimUserInfo = 5;
  inline bool has_aimuserinfo() const;
  inline void clear_aimuserinfo();
  static const int kAimUserInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAllianceVoteInfo</name>
  	<Function>
  		<name>aimuserinfo</name>
  		<replaceName>AimUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_aimuserinfo</name>
  		<replaceName>AimUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_aimuserinfo</name>
  		<replaceName>AimUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_aimuserinfo</name>
  		<replaceName>AimUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& aimuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_aimuserinfo();
  inline ::pb::TUserSimpleInfo* release_aimuserinfo();
  inline void set_allocated_aimuserinfo(::pb::TUserSimpleInfo* aimuserinfo);

  // optional uint32 AgreeNum = 6;
  inline bool has_agreenum() const;
  inline void clear_agreenum();
  static const int kAgreeNumFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TAllianceVoteInfo</name>
  	<Function>
  		<name>agreenum</name>
  		<replaceName>AgreeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_agreenum</name>
  		<replaceName>AgreeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_agreenum</name>
  		<replaceName>AgreeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 agreenum() const;
  inline void set_agreenum(::google::protobuf::uint32 value);

  // optional uint32 AgainstNum = 7;
  inline bool has_againstnum() const;
  inline void clear_againstnum();
  static const int kAgainstNumFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TAllianceVoteInfo</name>
  	<Function>
  		<name>againstnum</name>
  		<replaceName>AgainstNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_againstnum</name>
  		<replaceName>AgainstNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_againstnum</name>
  		<replaceName>AgainstNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 againstnum() const;
  inline void set_againstnum(::google::protobuf::uint32 value);

  // optional .pb.EAllianceResult Result = 8;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TAllianceVoteInfo</name>
  	<Function>
  		<name>result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAllianceResult result() const;
  inline void set_result(::pb::EAllianceResult value);

  // optional uint64 CloseTime = 9;
  inline bool has_closetime() const;
  inline void clear_closetime();
  static const int kCloseTimeFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TAllianceVoteInfo</name>
  	<Function>
  		<name>closetime</name>
  		<replaceName>CloseTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_closetime</name>
  		<replaceName>CloseTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_closetime</name>
  		<replaceName>CloseTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 closetime() const;
  inline void set_closetime(::google::protobuf::uint64 value);

  // optional .pb.EAllianceVoteResult SelfVote = 10;
  inline bool has_selfvote() const;
  inline void clear_selfvote();
  static const int kSelfVoteFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TAllianceVoteInfo</name>
  	<Function>
  		<name>selfvote</name>
  		<replaceName>SelfVote</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_selfvote</name>
  		<replaceName>SelfVote</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_selfvote</name>
  		<replaceName>SelfVote</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAllianceVoteResult selfvote() const;
  inline void set_selfvote(::pb::EAllianceVoteResult value);

  // @@protoc_insertion_point(class_scope:pb.TAllianceVoteInfo)
 private:
  inline void set_has_voteid();
  inline void clear_has_voteid();
  inline void set_has_sponsoruserinfo();
  inline void clear_has_sponsoruserinfo();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_votetype();
  inline void clear_has_votetype();
  inline void set_has_aimuserinfo();
  inline void clear_has_aimuserinfo();
  inline void set_has_agreenum();
  inline void clear_has_agreenum();
  inline void set_has_againstnum();
  inline void clear_has_againstnum();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_closetime();
  inline void clear_has_closetime();
  inline void set_has_selfvote();
  inline void clear_has_selfvote();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 voteid_;
  ::pb::TUserSimpleInfo* sponsoruserinfo_;
  ::google::protobuf::uint64 starttime_;
  ::pb::TUserSimpleInfo* aimuserinfo_;
  int votetype_;
  ::google::protobuf::uint32 agreenum_;
  ::google::protobuf::uint32 againstnum_;
  int result_;
  ::google::protobuf::uint64 closetime_;
  int selfvote_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TAllianceVoteInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAllianceScience</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAllianceScience : public ::google::protobuf::Message {
 public:
  TAllianceScience();
  virtual ~TAllianceScience();

  TAllianceScience(const TAllianceScience& from);

  inline TAllianceScience& operator=(const TAllianceScience& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAllianceScience& default_instance();

  void Swap(TAllianceScience* other);

  // implements Message ----------------------------------------------

  TAllianceScience* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAllianceScience& from);
  void MergeFrom(const TAllianceScience& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAllianceScience</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 Level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAllianceScience</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAllianceScience)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TAllianceScience* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAllianceDetailInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAllianceDetailInfo : public ::google::protobuf::Message {
 public:
  TAllianceDetailInfo();
  virtual ~TAllianceDetailInfo();

  TAllianceDetailInfo(const TAllianceDetailInfo& from);

  inline TAllianceDetailInfo& operator=(const TAllianceDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAllianceDetailInfo& default_instance();

  void Swap(TAllianceDetailInfo* other);

  // implements Message ----------------------------------------------

  TAllianceDetailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAllianceDetailInfo& from);
  void MergeFrom(const TAllianceDetailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TAllianceSimpleInfo AllianceSimpleInfo = 1;
  inline bool has_alliancesimpleinfo() const;
  inline void clear_alliancesimpleinfo();
  static const int kAllianceSimpleInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAllianceDetailInfo</name>
  	<Function>
  		<name>alliancesimpleinfo</name>
  		<replaceName>AllianceSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_alliancesimpleinfo</name>
  		<replaceName>AllianceSimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_alliancesimpleinfo</name>
  		<replaceName>AllianceSimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_alliancesimpleinfo</name>
  		<replaceName>AllianceSimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceSimpleInfo& alliancesimpleinfo() const;
  inline ::pb::TAllianceSimpleInfo* mutable_alliancesimpleinfo();
  inline ::pb::TAllianceSimpleInfo* release_alliancesimpleinfo();
  inline void set_allocated_alliancesimpleinfo(::pb::TAllianceSimpleInfo* alliancesimpleinfo);

  // optional uint32 WeekStartLv = 2;
  inline bool has_weekstartlv() const;
  inline void clear_weekstartlv();
  static const int kWeekStartLvFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAllianceDetailInfo</name>
  	<Function>
  		<name>weekstartlv</name>
  		<replaceName>WeekStartLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_weekstartlv</name>
  		<replaceName>WeekStartLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_weekstartlv</name>
  		<replaceName>WeekStartLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 weekstartlv() const;
  inline void set_weekstartlv(::google::protobuf::uint32 value);

  // optional uint64 WeekTaskScore = 3;
  inline bool has_weektaskscore() const;
  inline void clear_weektaskscore();
  static const int kWeekTaskScoreFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAllianceDetailInfo</name>
  	<Function>
  		<name>weektaskscore</name>
  		<replaceName>WeekTaskScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_weektaskscore</name>
  		<replaceName>WeekTaskScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_weektaskscore</name>
  		<replaceName>WeekTaskScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 weektaskscore() const;
  inline void set_weektaskscore(::google::protobuf::uint64 value);

  // optional string Notice = 4;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAllianceDetailInfo</name>
  	<Function>
  		<name>notice</name>
  		<replaceName>Notice</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_notice</name>
  		<replaceName>Notice</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_notice</name>
  		<replaceName>Notice</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // repeated .pb.TAllianceTip ArrTip = 5;
  inline int arrtip_size() const;
  inline void clear_arrtip();
  static const int kArrTipFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAllianceDetailInfo</name>
  	<Function>
  		<name>arrtip</name>
  		<replaceName>ArrTip</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtip</name>
  		<replaceName>ArrTip</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtip</name>
  		<replaceName>ArrTip</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtip</name>
  		<replaceName>ArrTip</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtip_size</name>
  		<replaceName>ArrTip</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceTip& arrtip(int index) const;
  inline ::pb::TAllianceTip* mutable_arrtip(int index);
  inline ::pb::TAllianceTip* add_arrtip();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceTip >&
      arrtip() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceTip >*
      mutable_arrtip();

  // repeated .pb.TUserSimpleInfo ArrSignGuildLeaderUserInfo = 6;
  inline int arrsignguildleaderuserinfo_size() const;
  inline void clear_arrsignguildleaderuserinfo();
  static const int kArrSignGuildLeaderUserInfoFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TAllianceDetailInfo</name>
  	<Function>
  		<name>arrsignguildleaderuserinfo</name>
  		<replaceName>ArrSignGuildLeaderUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrsignguildleaderuserinfo</name>
  		<replaceName>ArrSignGuildLeaderUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrsignguildleaderuserinfo</name>
  		<replaceName>ArrSignGuildLeaderUserInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrsignguildleaderuserinfo</name>
  		<replaceName>ArrSignGuildLeaderUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrsignguildleaderuserinfo_size</name>
  		<replaceName>ArrSignGuildLeaderUserInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& arrsignguildleaderuserinfo(int index) const;
  inline ::pb::TUserSimpleInfo* mutable_arrsignguildleaderuserinfo(int index);
  inline ::pb::TUserSimpleInfo* add_arrsignguildleaderuserinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
      arrsignguildleaderuserinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
      mutable_arrsignguildleaderuserinfo();

  // repeated .pb.TAllianceVoteInfo ArrVoteInfo = 7;
  inline int arrvoteinfo_size() const;
  inline void clear_arrvoteinfo();
  static const int kArrVoteInfoFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TAllianceDetailInfo</name>
  	<Function>
  		<name>arrvoteinfo</name>
  		<replaceName>ArrVoteInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrvoteinfo</name>
  		<replaceName>ArrVoteInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrvoteinfo</name>
  		<replaceName>ArrVoteInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrvoteinfo</name>
  		<replaceName>ArrVoteInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrvoteinfo_size</name>
  		<replaceName>ArrVoteInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceVoteInfo& arrvoteinfo(int index) const;
  inline ::pb::TAllianceVoteInfo* mutable_arrvoteinfo(int index);
  inline ::pb::TAllianceVoteInfo* add_arrvoteinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceVoteInfo >&
      arrvoteinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceVoteInfo >*
      mutable_arrvoteinfo();

  // optional uint32 ApplyNum = 8;
  inline bool has_applynum() const;
  inline void clear_applynum();
  static const int kApplyNumFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TAllianceDetailInfo</name>
  	<Function>
  		<name>applynum</name>
  		<replaceName>ApplyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_applynum</name>
  		<replaceName>ApplyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_applynum</name>
  		<replaceName>ApplyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 applynum() const;
  inline void set_applynum(::google::protobuf::uint32 value);

  // optional uint64 LastImpeachTime = 9;
  inline bool has_lastimpeachtime() const;
  inline void clear_lastimpeachtime();
  static const int kLastImpeachTimeFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TAllianceDetailInfo</name>
  	<Function>
  		<name>lastimpeachtime</name>
  		<replaceName>LastImpeachTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lastimpeachtime</name>
  		<replaceName>LastImpeachTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lastimpeachtime</name>
  		<replaceName>LastImpeachTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 lastimpeachtime() const;
  inline void set_lastimpeachtime(::google::protobuf::uint64 value);

  // optional uint64 MaterialNum = 10;
  inline bool has_materialnum() const;
  inline void clear_materialnum();
  static const int kMaterialNumFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TAllianceDetailInfo</name>
  	<Function>
  		<name>materialnum</name>
  		<replaceName>MaterialNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_materialnum</name>
  		<replaceName>MaterialNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_materialnum</name>
  		<replaceName>MaterialNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 materialnum() const;
  inline void set_materialnum(::google::protobuf::uint64 value);

  // optional uint32 DayDonateNum = 11;
  inline bool has_daydonatenum() const;
  inline void clear_daydonatenum();
  static const int kDayDonateNumFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TAllianceDetailInfo</name>
  	<Function>
  		<name>daydonatenum</name>
  		<replaceName>DayDonateNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_daydonatenum</name>
  		<replaceName>DayDonateNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_daydonatenum</name>
  		<replaceName>DayDonateNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 daydonatenum() const;
  inline void set_daydonatenum(::google::protobuf::uint32 value);

  // repeated .pb.TAllianceScience ArrScience = 12;
  inline int arrscience_size() const;
  inline void clear_arrscience();
  static const int kArrScienceFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TAllianceDetailInfo</name>
  	<Function>
  		<name>arrscience</name>
  		<replaceName>ArrScience</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrscience</name>
  		<replaceName>ArrScience</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrscience</name>
  		<replaceName>ArrScience</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrscience</name>
  		<replaceName>ArrScience</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrscience_size</name>
  		<replaceName>ArrScience</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceScience& arrscience(int index) const;
  inline ::pb::TAllianceScience* mutable_arrscience(int index);
  inline ::pb::TAllianceScience* add_arrscience();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceScience >&
      arrscience() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceScience >*
      mutable_arrscience();

  // @@protoc_insertion_point(class_scope:pb.TAllianceDetailInfo)
 private:
  inline void set_has_alliancesimpleinfo();
  inline void clear_has_alliancesimpleinfo();
  inline void set_has_weekstartlv();
  inline void clear_has_weekstartlv();
  inline void set_has_weektaskscore();
  inline void clear_has_weektaskscore();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_applynum();
  inline void clear_has_applynum();
  inline void set_has_lastimpeachtime();
  inline void clear_has_lastimpeachtime();
  inline void set_has_materialnum();
  inline void clear_has_materialnum();
  inline void set_has_daydonatenum();
  inline void clear_has_daydonatenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAllianceSimpleInfo* alliancesimpleinfo_;
  ::google::protobuf::uint64 weektaskscore_;
  ::std::string* notice_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAllianceTip > arrtip_;
  ::google::protobuf::uint32 weekstartlv_;
  ::google::protobuf::uint32 applynum_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo > arrsignguildleaderuserinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAllianceVoteInfo > arrvoteinfo_;
  ::google::protobuf::uint64 lastimpeachtime_;
  ::google::protobuf::uint64 materialnum_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAllianceScience > arrscience_;
  ::google::protobuf::uint32 daydonatenum_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TAllianceDetailInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAllianceGuildUserMemberInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAllianceGuildUserMemberInfo : public ::google::protobuf::Message {
 public:
  TAllianceGuildUserMemberInfo();
  virtual ~TAllianceGuildUserMemberInfo();

  TAllianceGuildUserMemberInfo(const TAllianceGuildUserMemberInfo& from);

  inline TAllianceGuildUserMemberInfo& operator=(const TAllianceGuildUserMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAllianceGuildUserMemberInfo& default_instance();

  void Swap(TAllianceGuildUserMemberInfo* other);

  // implements Message ----------------------------------------------

  TAllianceGuildUserMemberInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAllianceGuildUserMemberInfo& from);
  void MergeFrom(const TAllianceGuildUserMemberInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAllianceGuildUserMemberInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional .pb.EGuildPost RPGPost = 2;
  inline bool has_rpgpost() const;
  inline void clear_rpgpost();
  static const int kRPGPostFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAllianceGuildUserMemberInfo</name>
  	<Function>
  		<name>rpgpost</name>
  		<replaceName>RPGPost</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rpgpost</name>
  		<replaceName>RPGPost</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rpgpost</name>
  		<replaceName>RPGPost</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EGuildPost rpgpost() const;
  inline void set_rpgpost(::pb::EGuildPost value);

  // optional uint64 TotalDonate = 3;
  inline bool has_totaldonate() const;
  inline void clear_totaldonate();
  static const int kTotalDonateFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAllianceGuildUserMemberInfo</name>
  	<Function>
  		<name>totaldonate</name>
  		<replaceName>TotalDonate</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totaldonate</name>
  		<replaceName>TotalDonate</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totaldonate</name>
  		<replaceName>TotalDonate</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 totaldonate() const;
  inline void set_totaldonate(::google::protobuf::uint64 value);

  // optional uint64 WeekTaskScore = 4;
  inline bool has_weektaskscore() const;
  inline void clear_weektaskscore();
  static const int kWeekTaskScoreFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAllianceGuildUserMemberInfo</name>
  	<Function>
  		<name>weektaskscore</name>
  		<replaceName>WeekTaskScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_weektaskscore</name>
  		<replaceName>WeekTaskScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_weektaskscore</name>
  		<replaceName>WeekTaskScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 weektaskscore() const;
  inline void set_weektaskscore(::google::protobuf::uint64 value);

  // optional uint32 DayTaskStatus = 5;
  inline bool has_daytaskstatus() const;
  inline void clear_daytaskstatus();
  static const int kDayTaskStatusFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAllianceGuildUserMemberInfo</name>
  	<Function>
  		<name>daytaskstatus</name>
  		<replaceName>DayTaskStatus</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_daytaskstatus</name>
  		<replaceName>DayTaskStatus</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_daytaskstatus</name>
  		<replaceName>DayTaskStatus</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 daytaskstatus() const;
  inline void set_daytaskstatus(::google::protobuf::uint32 value);

  // optional uint32 CommitTaskId = 6;
  inline bool has_committaskid() const;
  inline void clear_committaskid();
  static const int kCommitTaskIdFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TAllianceGuildUserMemberInfo</name>
  	<Function>
  		<name>committaskid</name>
  		<replaceName>CommitTaskId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_committaskid</name>
  		<replaceName>CommitTaskId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_committaskid</name>
  		<replaceName>CommitTaskId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 committaskid() const;
  inline void set_committaskid(::google::protobuf::uint32 value);

  // optional uint32 OnlineStatus = 7;
  inline bool has_onlinestatus() const;
  inline void clear_onlinestatus();
  static const int kOnlineStatusFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TAllianceGuildUserMemberInfo</name>
  	<Function>
  		<name>onlinestatus</name>
  		<replaceName>OnlineStatus</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_onlinestatus</name>
  		<replaceName>OnlineStatus</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_onlinestatus</name>
  		<replaceName>OnlineStatus</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 onlinestatus() const;
  inline void set_onlinestatus(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAllianceGuildUserMemberInfo)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_rpgpost();
  inline void clear_has_rpgpost();
  inline void set_has_totaldonate();
  inline void clear_has_totaldonate();
  inline void set_has_weektaskscore();
  inline void clear_has_weektaskscore();
  inline void set_has_daytaskstatus();
  inline void clear_has_daytaskstatus();
  inline void set_has_committaskid();
  inline void clear_has_committaskid();
  inline void set_has_onlinestatus();
  inline void clear_has_onlinestatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint64 totaldonate_;
  int rpgpost_;
  ::google::protobuf::uint32 daytaskstatus_;
  ::google::protobuf::uint64 weektaskscore_;
  ::google::protobuf::uint32 committaskid_;
  ::google::protobuf::uint32 onlinestatus_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TAllianceGuildUserMemberInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAllianceGuildMemberInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAllianceGuildMemberInfo : public ::google::protobuf::Message {
 public:
  TAllianceGuildMemberInfo();
  virtual ~TAllianceGuildMemberInfo();

  TAllianceGuildMemberInfo(const TAllianceGuildMemberInfo& from);

  inline TAllianceGuildMemberInfo& operator=(const TAllianceGuildMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAllianceGuildMemberInfo& default_instance();

  void Swap(TAllianceGuildMemberInfo* other);

  // implements Message ----------------------------------------------

  TAllianceGuildMemberInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAllianceGuildMemberInfo& from);
  void MergeFrom(const TAllianceGuildMemberInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ServerId = 1;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAllianceGuildMemberInfo</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // optional uint64 GuildId = 2;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAllianceGuildMemberInfo</name>
  	<Function>
  		<name>guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional string Name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAllianceGuildMemberInfo</name>
  	<Function>
  		<name>name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string BannerName = 4;
  inline bool has_bannername() const;
  inline void clear_bannername();
  static const int kBannerNameFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAllianceGuildMemberInfo</name>
  	<Function>
  		<name>bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& bannername() const;
  inline void set_bannername(const ::std::string& value);
  inline void set_bannername(const char* value);
  inline void set_bannername(const char* value, size_t size);
  inline ::std::string* mutable_bannername();
  inline ::std::string* release_bannername();
  inline void set_allocated_bannername(::std::string* bannername);

  // optional uint32 BannerBase = 5;
  inline bool has_bannerbase() const;
  inline void clear_bannerbase();
  static const int kBannerBaseFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAllianceGuildMemberInfo</name>
  	<Function>
  		<name>bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bannerbase() const;
  inline void set_bannerbase(::google::protobuf::uint32 value);

  // optional uint32 Level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TAllianceGuildMemberInfo</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint64 FightForce = 7;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TAllianceGuildMemberInfo</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // optional uint32 MemberNum = 8;
  inline bool has_membernum() const;
  inline void clear_membernum();
  static const int kMemberNumFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TAllianceGuildMemberInfo</name>
  	<Function>
  		<name>membernum</name>
  		<replaceName>MemberNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_membernum</name>
  		<replaceName>MemberNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_membernum</name>
  		<replaceName>MemberNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 membernum() const;
  inline void set_membernum(::google::protobuf::uint32 value);

  // optional uint64 LeaderUid = 9;
  inline bool has_leaderuid() const;
  inline void clear_leaderuid();
  static const int kLeaderUidFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TAllianceGuildMemberInfo</name>
  	<Function>
  		<name>leaderuid</name>
  		<replaceName>LeaderUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_leaderuid</name>
  		<replaceName>LeaderUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_leaderuid</name>
  		<replaceName>LeaderUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 leaderuid() const;
  inline void set_leaderuid(::google::protobuf::uint64 value);

  // optional string LeaderUname = 10;
  inline bool has_leaderuname() const;
  inline void clear_leaderuname();
  static const int kLeaderUnameFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TAllianceGuildMemberInfo</name>
  	<Function>
  		<name>leaderuname</name>
  		<replaceName>LeaderUname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_leaderuname</name>
  		<replaceName>LeaderUname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_leaderuname</name>
  		<replaceName>LeaderUname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& leaderuname() const;
  inline void set_leaderuname(const ::std::string& value);
  inline void set_leaderuname(const char* value);
  inline void set_leaderuname(const char* value, size_t size);
  inline ::std::string* mutable_leaderuname();
  inline ::std::string* release_leaderuname();
  inline void set_allocated_leaderuname(::std::string* leaderuname);

  // optional .pb.EAlliancePost Post = 11;
  inline bool has_post() const;
  inline void clear_post();
  static const int kPostFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TAllianceGuildMemberInfo</name>
  	<Function>
  		<name>post</name>
  		<replaceName>Post</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_post</name>
  		<replaceName>Post</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_post</name>
  		<replaceName>Post</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAlliancePost post() const;
  inline void set_post(::pb::EAlliancePost value);

  // @@protoc_insertion_point(class_scope:pb.TAllianceGuildMemberInfo)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_bannername();
  inline void clear_has_bannername();
  inline void set_has_bannerbase();
  inline void clear_has_bannerbase();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();
  inline void set_has_membernum();
  inline void clear_has_membernum();
  inline void set_has_leaderuid();
  inline void clear_has_leaderuid();
  inline void set_has_leaderuname();
  inline void clear_has_leaderuname();
  inline void set_has_post();
  inline void clear_has_post();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* serverid_;
  ::google::protobuf::uint64 guildid_;
  ::std::string* name_;
  ::std::string* bannername_;
  ::google::protobuf::uint32 bannerbase_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint64 leaderuid_;
  ::google::protobuf::uint32 membernum_;
  int post_;
  ::std::string* leaderuname_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TAllianceGuildMemberInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAllianceGuildMemberInfoWithUser</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAllianceGuildMemberInfoWithUser : public ::google::protobuf::Message {
 public:
  TAllianceGuildMemberInfoWithUser();
  virtual ~TAllianceGuildMemberInfoWithUser();

  TAllianceGuildMemberInfoWithUser(const TAllianceGuildMemberInfoWithUser& from);

  inline TAllianceGuildMemberInfoWithUser& operator=(const TAllianceGuildMemberInfoWithUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAllianceGuildMemberInfoWithUser& default_instance();

  void Swap(TAllianceGuildMemberInfoWithUser* other);

  // implements Message ----------------------------------------------

  TAllianceGuildMemberInfoWithUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAllianceGuildMemberInfoWithUser& from);
  void MergeFrom(const TAllianceGuildMemberInfoWithUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TAllianceGuildMemberInfo GuildInfo = 1;
  inline bool has_guildinfo() const;
  inline void clear_guildinfo();
  static const int kGuildInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAllianceGuildMemberInfoWithUser</name>
  	<Function>
  		<name>guildinfo</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildinfo</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_guildinfo</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildinfo</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceGuildMemberInfo& guildinfo() const;
  inline ::pb::TAllianceGuildMemberInfo* mutable_guildinfo();
  inline ::pb::TAllianceGuildMemberInfo* release_guildinfo();
  inline void set_allocated_guildinfo(::pb::TAllianceGuildMemberInfo* guildinfo);

  // repeated .pb.TAllianceGuildUserMemberInfo ArrUser = 2;
  inline int arruser_size() const;
  inline void clear_arruser();
  static const int kArrUserFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAllianceGuildMemberInfoWithUser</name>
  	<Function>
  		<name>arruser</name>
  		<replaceName>ArrUser</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arruser</name>
  		<replaceName>ArrUser</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arruser</name>
  		<replaceName>ArrUser</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arruser</name>
  		<replaceName>ArrUser</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arruser_size</name>
  		<replaceName>ArrUser</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceGuildUserMemberInfo& arruser(int index) const;
  inline ::pb::TAllianceGuildUserMemberInfo* mutable_arruser(int index);
  inline ::pb::TAllianceGuildUserMemberInfo* add_arruser();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceGuildUserMemberInfo >&
      arruser() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceGuildUserMemberInfo >*
      mutable_arruser();

  // @@protoc_insertion_point(class_scope:pb.TAllianceGuildMemberInfoWithUser)
 private:
  inline void set_has_guildinfo();
  inline void clear_has_guildinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAllianceGuildMemberInfo* guildinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAllianceGuildUserMemberInfo > arruser_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TAllianceGuildMemberInfoWithUser* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAllianceApplyGuildInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAllianceApplyGuildInfo : public ::google::protobuf::Message {
 public:
  TAllianceApplyGuildInfo();
  virtual ~TAllianceApplyGuildInfo();

  TAllianceApplyGuildInfo(const TAllianceApplyGuildInfo& from);

  inline TAllianceApplyGuildInfo& operator=(const TAllianceApplyGuildInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAllianceApplyGuildInfo& default_instance();

  void Swap(TAllianceApplyGuildInfo* other);

  // implements Message ----------------------------------------------

  TAllianceApplyGuildInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAllianceApplyGuildInfo& from);
  void MergeFrom(const TAllianceApplyGuildInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo LeaderUserInfo = 1;
  inline bool has_leaderuserinfo() const;
  inline void clear_leaderuserinfo();
  static const int kLeaderUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAllianceApplyGuildInfo</name>
  	<Function>
  		<name>leaderuserinfo</name>
  		<replaceName>LeaderUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_leaderuserinfo</name>
  		<replaceName>LeaderUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_leaderuserinfo</name>
  		<replaceName>LeaderUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_leaderuserinfo</name>
  		<replaceName>LeaderUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& leaderuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_leaderuserinfo();
  inline ::pb::TUserSimpleInfo* release_leaderuserinfo();
  inline void set_allocated_leaderuserinfo(::pb::TUserSimpleInfo* leaderuserinfo);

  // optional uint32 MemberNum = 2;
  inline bool has_membernum() const;
  inline void clear_membernum();
  static const int kMemberNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAllianceApplyGuildInfo</name>
  	<Function>
  		<name>membernum</name>
  		<replaceName>MemberNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_membernum</name>
  		<replaceName>MemberNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_membernum</name>
  		<replaceName>MemberNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 membernum() const;
  inline void set_membernum(::google::protobuf::uint32 value);

  // optional uint64 GuildFightForce = 3;
  inline bool has_guildfightforce() const;
  inline void clear_guildfightforce();
  static const int kGuildFightForceFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAllianceApplyGuildInfo</name>
  	<Function>
  		<name>guildfightforce</name>
  		<replaceName>GuildFightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildfightforce</name>
  		<replaceName>GuildFightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildfightforce</name>
  		<replaceName>GuildFightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildfightforce() const;
  inline void set_guildfightforce(::google::protobuf::uint64 value);

  // optional uint32 GuildLevel = 4;
  inline bool has_guildlevel() const;
  inline void clear_guildlevel();
  static const int kGuildLevelFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAllianceApplyGuildInfo</name>
  	<Function>
  		<name>guildlevel</name>
  		<replaceName>GuildLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildlevel</name>
  		<replaceName>GuildLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildlevel</name>
  		<replaceName>GuildLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 guildlevel() const;
  inline void set_guildlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAllianceApplyGuildInfo)
 private:
  inline void set_has_leaderuserinfo();
  inline void clear_has_leaderuserinfo();
  inline void set_has_membernum();
  inline void clear_has_membernum();
  inline void set_has_guildfightforce();
  inline void clear_has_guildfightforce();
  inline void set_has_guildlevel();
  inline void clear_has_guildlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* leaderuserinfo_;
  ::google::protobuf::uint64 guildfightforce_;
  ::google::protobuf::uint32 membernum_;
  ::google::protobuf::uint32 guildlevel_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TAllianceApplyGuildInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TInnerAllianceGetServerTeamInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TInnerAllianceGetServerTeamInfoRsp : public ::google::protobuf::Message {
 public:
  TInnerAllianceGetServerTeamInfoRsp();
  virtual ~TInnerAllianceGetServerTeamInfoRsp();

  TInnerAllianceGetServerTeamInfoRsp(const TInnerAllianceGetServerTeamInfoRsp& from);

  inline TInnerAllianceGetServerTeamInfoRsp& operator=(const TInnerAllianceGetServerTeamInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TInnerAllianceGetServerTeamInfoRsp& default_instance();

  void Swap(TInnerAllianceGetServerTeamInfoRsp* other);

  // implements Message ----------------------------------------------

  TInnerAllianceGetServerTeamInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TInnerAllianceGetServerTeamInfoRsp& from);
  void MergeFrom(const TInnerAllianceGetServerTeamInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TInnerAllianceGetServerTeamInfoRsp</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional uint32 NeedOpenDay = 2;
  inline bool has_needopenday() const;
  inline void clear_needopenday();
  static const int kNeedOpenDayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TInnerAllianceGetServerTeamInfoRsp</name>
  	<Function>
  		<name>needopenday</name>
  		<replaceName>NeedOpenDay</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_needopenday</name>
  		<replaceName>NeedOpenDay</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_needopenday</name>
  		<replaceName>NeedOpenDay</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 needopenday() const;
  inline void set_needopenday(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TInnerAllianceGetServerTeamInfoRsp)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_needopenday();
  inline void clear_has_needopenday();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::uint32 needopenday_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TInnerAllianceGetServerTeamInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TInnerAllianceGetAllianceInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TInnerAllianceGetAllianceInfoRsp : public ::google::protobuf::Message {
 public:
  TInnerAllianceGetAllianceInfoRsp();
  virtual ~TInnerAllianceGetAllianceInfoRsp();

  TInnerAllianceGetAllianceInfoRsp(const TInnerAllianceGetAllianceInfoRsp& from);

  inline TInnerAllianceGetAllianceInfoRsp& operator=(const TInnerAllianceGetAllianceInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TInnerAllianceGetAllianceInfoRsp& default_instance();

  void Swap(TInnerAllianceGetAllianceInfoRsp* other);

  // implements Message ----------------------------------------------

  TInnerAllianceGetAllianceInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TInnerAllianceGetAllianceInfoRsp& from);
  void MergeFrom(const TInnerAllianceGetAllianceInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TAllianceUserInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TInnerAllianceGetAllianceInfoRsp</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceUserInfo& userinfo() const;
  inline ::pb::TAllianceUserInfo* mutable_userinfo();
  inline ::pb::TAllianceUserInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TAllianceUserInfo* userinfo);

  // optional .pb.TAllianceDetailInfo AllianceDetailInfo = 2;
  inline bool has_alliancedetailinfo() const;
  inline void clear_alliancedetailinfo();
  static const int kAllianceDetailInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TInnerAllianceGetAllianceInfoRsp</name>
  	<Function>
  		<name>alliancedetailinfo</name>
  		<replaceName>AllianceDetailInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_alliancedetailinfo</name>
  		<replaceName>AllianceDetailInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_alliancedetailinfo</name>
  		<replaceName>AllianceDetailInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_alliancedetailinfo</name>
  		<replaceName>AllianceDetailInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceDetailInfo& alliancedetailinfo() const;
  inline ::pb::TAllianceDetailInfo* mutable_alliancedetailinfo();
  inline ::pb::TAllianceDetailInfo* release_alliancedetailinfo();
  inline void set_allocated_alliancedetailinfo(::pb::TAllianceDetailInfo* alliancedetailinfo);

  // @@protoc_insertion_point(class_scope:pb.TInnerAllianceGetAllianceInfoRsp)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_alliancedetailinfo();
  inline void clear_has_alliancedetailinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAllianceUserInfo* userinfo_;
  ::pb::TAllianceDetailInfo* alliancedetailinfo_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TInnerAllianceGetAllianceInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TInnerAllianceRefreshTaskReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TInnerAllianceRefreshTaskReq : public ::google::protobuf::Message {
 public:
  TInnerAllianceRefreshTaskReq();
  virtual ~TInnerAllianceRefreshTaskReq();

  TInnerAllianceRefreshTaskReq(const TInnerAllianceRefreshTaskReq& from);

  inline TInnerAllianceRefreshTaskReq& operator=(const TInnerAllianceRefreshTaskReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TInnerAllianceRefreshTaskReq& default_instance();

  void Swap(TInnerAllianceRefreshTaskReq* other);

  // implements Message ----------------------------------------------

  TInnerAllianceRefreshTaskReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TInnerAllianceRefreshTaskReq& from);
  void MergeFrom(const TInnerAllianceRefreshTaskReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TaskId = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TInnerAllianceRefreshTaskReq</name>
  	<Function>
  		<name>taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TInnerAllianceRefreshTaskReq)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 taskid_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TInnerAllianceRefreshTaskReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TInnerAllianceUpgradeTaskReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TInnerAllianceUpgradeTaskReq : public ::google::protobuf::Message {
 public:
  TInnerAllianceUpgradeTaskReq();
  virtual ~TInnerAllianceUpgradeTaskReq();

  TInnerAllianceUpgradeTaskReq(const TInnerAllianceUpgradeTaskReq& from);

  inline TInnerAllianceUpgradeTaskReq& operator=(const TInnerAllianceUpgradeTaskReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TInnerAllianceUpgradeTaskReq& default_instance();

  void Swap(TInnerAllianceUpgradeTaskReq* other);

  // implements Message ----------------------------------------------

  TInnerAllianceUpgradeTaskReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TInnerAllianceUpgradeTaskReq& from);
  void MergeFrom(const TInnerAllianceUpgradeTaskReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TaskId = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TInnerAllianceUpgradeTaskReq</name>
  	<Function>
  		<name>taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TInnerAllianceUpgradeTaskReq)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 taskid_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TInnerAllianceUpgradeTaskReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TInnerAllianceCommitTaskReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TInnerAllianceCommitTaskReq : public ::google::protobuf::Message {
 public:
  TInnerAllianceCommitTaskReq();
  virtual ~TInnerAllianceCommitTaskReq();

  TInnerAllianceCommitTaskReq(const TInnerAllianceCommitTaskReq& from);

  inline TInnerAllianceCommitTaskReq& operator=(const TInnerAllianceCommitTaskReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TInnerAllianceCommitTaskReq& default_instance();

  void Swap(TInnerAllianceCommitTaskReq* other);

  // implements Message ----------------------------------------------

  TInnerAllianceCommitTaskReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TInnerAllianceCommitTaskReq& from);
  void MergeFrom(const TInnerAllianceCommitTaskReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TaskId = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TInnerAllianceCommitTaskReq</name>
  	<Function>
  		<name>taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_taskid</name>
  		<replaceName>TaskId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TInnerAllianceCommitTaskReq)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 taskid_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TInnerAllianceCommitTaskReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TInnerAllianceCommitTaskRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TInnerAllianceCommitTaskRsp : public ::google::protobuf::Message {
 public:
  TInnerAllianceCommitTaskRsp();
  virtual ~TInnerAllianceCommitTaskRsp();

  TInnerAllianceCommitTaskRsp(const TInnerAllianceCommitTaskRsp& from);

  inline TInnerAllianceCommitTaskRsp& operator=(const TInnerAllianceCommitTaskRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TInnerAllianceCommitTaskRsp& default_instance();

  void Swap(TInnerAllianceCommitTaskRsp* other);

  // implements Message ----------------------------------------------

  TInnerAllianceCommitTaskRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TInnerAllianceCommitTaskRsp& from);
  void MergeFrom(const TInnerAllianceCommitTaskRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArray = 1;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TInnerAllianceCommitTaskRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // @@protoc_insertion_point(class_scope:pb.TInnerAllianceCommitTaskRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TInnerAllianceCommitTaskRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TInnerAllianceReceiveTaskRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TInnerAllianceReceiveTaskRewardReq : public ::google::protobuf::Message {
 public:
  TInnerAllianceReceiveTaskRewardReq();
  virtual ~TInnerAllianceReceiveTaskRewardReq();

  TInnerAllianceReceiveTaskRewardReq(const TInnerAllianceReceiveTaskRewardReq& from);

  inline TInnerAllianceReceiveTaskRewardReq& operator=(const TInnerAllianceReceiveTaskRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TInnerAllianceReceiveTaskRewardReq& default_instance();

  void Swap(TInnerAllianceReceiveTaskRewardReq* other);

  // implements Message ----------------------------------------------

  TInnerAllianceReceiveTaskRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TInnerAllianceReceiveTaskRewardReq& from);
  void MergeFrom(const TInnerAllianceReceiveTaskRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TInnerAllianceReceiveTaskRewardReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TInnerAllianceReceiveTaskRewardReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TInnerAllianceReceiveTaskRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TInnerAllianceReceiveTaskRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TInnerAllianceReceiveTaskRewardRsp : public ::google::protobuf::Message {
 public:
  TInnerAllianceReceiveTaskRewardRsp();
  virtual ~TInnerAllianceReceiveTaskRewardRsp();

  TInnerAllianceReceiveTaskRewardRsp(const TInnerAllianceReceiveTaskRewardRsp& from);

  inline TInnerAllianceReceiveTaskRewardRsp& operator=(const TInnerAllianceReceiveTaskRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TInnerAllianceReceiveTaskRewardRsp& default_instance();

  void Swap(TInnerAllianceReceiveTaskRewardRsp* other);

  // implements Message ----------------------------------------------

  TInnerAllianceReceiveTaskRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TInnerAllianceReceiveTaskRewardRsp& from);
  void MergeFrom(const TInnerAllianceReceiveTaskRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArray = 1;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TInnerAllianceReceiveTaskRewardRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // @@protoc_insertion_point(class_scope:pb.TInnerAllianceReceiveTaskRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TInnerAllianceReceiveTaskRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TInnerAllianceReceiveSignRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TInnerAllianceReceiveSignRewardRsp : public ::google::protobuf::Message {
 public:
  TInnerAllianceReceiveSignRewardRsp();
  virtual ~TInnerAllianceReceiveSignRewardRsp();

  TInnerAllianceReceiveSignRewardRsp(const TInnerAllianceReceiveSignRewardRsp& from);

  inline TInnerAllianceReceiveSignRewardRsp& operator=(const TInnerAllianceReceiveSignRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TInnerAllianceReceiveSignRewardRsp& default_instance();

  void Swap(TInnerAllianceReceiveSignRewardRsp* other);

  // implements Message ----------------------------------------------

  TInnerAllianceReceiveSignRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TInnerAllianceReceiveSignRewardRsp& from);
  void MergeFrom(const TInnerAllianceReceiveSignRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArray = 1;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TInnerAllianceReceiveSignRewardRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // @@protoc_insertion_point(class_scope:pb.TInnerAllianceReceiveSignRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TInnerAllianceReceiveSignRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TInnerAllianceUpgradePracticeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TInnerAllianceUpgradePracticeReq : public ::google::protobuf::Message {
 public:
  TInnerAllianceUpgradePracticeReq();
  virtual ~TInnerAllianceUpgradePracticeReq();

  TInnerAllianceUpgradePracticeReq(const TInnerAllianceUpgradePracticeReq& from);

  inline TInnerAllianceUpgradePracticeReq& operator=(const TInnerAllianceUpgradePracticeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TInnerAllianceUpgradePracticeReq& default_instance();

  void Swap(TInnerAllianceUpgradePracticeReq* other);

  // implements Message ----------------------------------------------

  TInnerAllianceUpgradePracticeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TInnerAllianceUpgradePracticeReq& from);
  void MergeFrom(const TInnerAllianceUpgradePracticeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TInnerAllianceUpgradePracticeReq</name>
  	<Function>
  		<name>type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TInnerAllianceUpgradePracticeReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TInnerAllianceUpgradePracticeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAllianceUserInfoChange</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAllianceUserInfoChange : public ::google::protobuf::Message {
 public:
  TAllianceUserInfoChange();
  virtual ~TAllianceUserInfoChange();

  TAllianceUserInfoChange(const TAllianceUserInfoChange& from);

  inline TAllianceUserInfoChange& operator=(const TAllianceUserInfoChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAllianceUserInfoChange& default_instance();

  void Swap(TAllianceUserInfoChange* other);

  // implements Message ----------------------------------------------

  TAllianceUserInfoChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAllianceUserInfoChange& from);
  void MergeFrom(const TAllianceUserInfoChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TAllianceUserInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAllianceUserInfoChange</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceUserInfo& userinfo() const;
  inline ::pb::TAllianceUserInfo* mutable_userinfo();
  inline ::pb::TAllianceUserInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TAllianceUserInfo* userinfo);

  // @@protoc_insertion_point(class_scope:pb.TAllianceUserInfoChange)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAllianceUserInfo* userinfo_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TAllianceUserInfoChange* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossAllianceGetAllianceListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossAllianceGetAllianceListReq : public ::google::protobuf::Message {
 public:
  TCrossAllianceGetAllianceListReq();
  virtual ~TCrossAllianceGetAllianceListReq();

  TCrossAllianceGetAllianceListReq(const TCrossAllianceGetAllianceListReq& from);

  inline TCrossAllianceGetAllianceListReq& operator=(const TCrossAllianceGetAllianceListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossAllianceGetAllianceListReq& default_instance();

  void Swap(TCrossAllianceGetAllianceListReq* other);

  // implements Message ----------------------------------------------

  TCrossAllianceGetAllianceListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossAllianceGetAllianceListReq& from);
  void MergeFrom(const TCrossAllianceGetAllianceListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceGetAllianceListReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceGetAllianceListReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // optional bool OnlyCanApply = 3;
  inline bool has_onlycanapply() const;
  inline void clear_onlycanapply();
  static const int kOnlyCanApplyFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceGetAllianceListReq</name>
  	<Function>
  		<name>onlycanapply</name>
  		<replaceName>OnlyCanApply</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_onlycanapply</name>
  		<replaceName>OnlyCanApply</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_onlycanapply</name>
  		<replaceName>OnlyCanApply</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool onlycanapply() const;
  inline void set_onlycanapply(bool value);

  // @@protoc_insertion_point(class_scope:pb.TCrossAllianceGetAllianceListReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_onlycanapply();
  inline void clear_has_onlycanapply();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  bool onlycanapply_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TCrossAllianceGetAllianceListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossAllianceGetAllianceListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossAllianceGetAllianceListRsp : public ::google::protobuf::Message {
 public:
  TCrossAllianceGetAllianceListRsp();
  virtual ~TCrossAllianceGetAllianceListRsp();

  TCrossAllianceGetAllianceListRsp(const TCrossAllianceGetAllianceListRsp& from);

  inline TCrossAllianceGetAllianceListRsp& operator=(const TCrossAllianceGetAllianceListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossAllianceGetAllianceListRsp& default_instance();

  void Swap(TCrossAllianceGetAllianceListRsp* other);

  // implements Message ----------------------------------------------

  TCrossAllianceGetAllianceListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossAllianceGetAllianceListRsp& from);
  void MergeFrom(const TCrossAllianceGetAllianceListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TAllianceSimpleInfoWithApplyStatus ArrAllianceInfo = 1;
  inline int arrallianceinfo_size() const;
  inline void clear_arrallianceinfo();
  static const int kArrAllianceInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceGetAllianceListRsp</name>
  	<Function>
  		<name>arrallianceinfo</name>
  		<replaceName>ArrAllianceInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrallianceinfo</name>
  		<replaceName>ArrAllianceInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrallianceinfo</name>
  		<replaceName>ArrAllianceInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrallianceinfo</name>
  		<replaceName>ArrAllianceInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrallianceinfo_size</name>
  		<replaceName>ArrAllianceInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceSimpleInfoWithApplyStatus& arrallianceinfo(int index) const;
  inline ::pb::TAllianceSimpleInfoWithApplyStatus* mutable_arrallianceinfo(int index);
  inline ::pb::TAllianceSimpleInfoWithApplyStatus* add_arrallianceinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceSimpleInfoWithApplyStatus >&
      arrallianceinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceSimpleInfoWithApplyStatus >*
      mutable_arrallianceinfo();

  // @@protoc_insertion_point(class_scope:pb.TCrossAllianceGetAllianceListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAllianceSimpleInfoWithApplyStatus > arrallianceinfo_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TCrossAllianceGetAllianceListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossAllianceSearchAllianceReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossAllianceSearchAllianceReq : public ::google::protobuf::Message {
 public:
  TCrossAllianceSearchAllianceReq();
  virtual ~TCrossAllianceSearchAllianceReq();

  TCrossAllianceSearchAllianceReq(const TCrossAllianceSearchAllianceReq& from);

  inline TCrossAllianceSearchAllianceReq& operator=(const TCrossAllianceSearchAllianceReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossAllianceSearchAllianceReq& default_instance();

  void Swap(TCrossAllianceSearchAllianceReq* other);

  // implements Message ----------------------------------------------

  TCrossAllianceSearchAllianceReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossAllianceSearchAllianceReq& from);
  void MergeFrom(const TCrossAllianceSearchAllianceReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceSearchAllianceReq</name>
  	<Function>
  		<name>name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:pb.TCrossAllianceSearchAllianceReq)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TCrossAllianceSearchAllianceReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossAllianceSearchAllianceRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossAllianceSearchAllianceRsp : public ::google::protobuf::Message {
 public:
  TCrossAllianceSearchAllianceRsp();
  virtual ~TCrossAllianceSearchAllianceRsp();

  TCrossAllianceSearchAllianceRsp(const TCrossAllianceSearchAllianceRsp& from);

  inline TCrossAllianceSearchAllianceRsp& operator=(const TCrossAllianceSearchAllianceRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossAllianceSearchAllianceRsp& default_instance();

  void Swap(TCrossAllianceSearchAllianceRsp* other);

  // implements Message ----------------------------------------------

  TCrossAllianceSearchAllianceRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossAllianceSearchAllianceRsp& from);
  void MergeFrom(const TCrossAllianceSearchAllianceRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TAllianceSimpleInfoWithApplyStatus ArrAllianceSimpleInfo = 1;
  inline int arralliancesimpleinfo_size() const;
  inline void clear_arralliancesimpleinfo();
  static const int kArrAllianceSimpleInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceSearchAllianceRsp</name>
  	<Function>
  		<name>arralliancesimpleinfo</name>
  		<replaceName>ArrAllianceSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arralliancesimpleinfo</name>
  		<replaceName>ArrAllianceSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arralliancesimpleinfo</name>
  		<replaceName>ArrAllianceSimpleInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arralliancesimpleinfo</name>
  		<replaceName>ArrAllianceSimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arralliancesimpleinfo_size</name>
  		<replaceName>ArrAllianceSimpleInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceSimpleInfoWithApplyStatus& arralliancesimpleinfo(int index) const;
  inline ::pb::TAllianceSimpleInfoWithApplyStatus* mutable_arralliancesimpleinfo(int index);
  inline ::pb::TAllianceSimpleInfoWithApplyStatus* add_arralliancesimpleinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceSimpleInfoWithApplyStatus >&
      arralliancesimpleinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceSimpleInfoWithApplyStatus >*
      mutable_arralliancesimpleinfo();

  // @@protoc_insertion_point(class_scope:pb.TCrossAllianceSearchAllianceRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAllianceSimpleInfoWithApplyStatus > arralliancesimpleinfo_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TCrossAllianceSearchAllianceRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossAllianceGetAllianceMemberListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossAllianceGetAllianceMemberListReq : public ::google::protobuf::Message {
 public:
  TCrossAllianceGetAllianceMemberListReq();
  virtual ~TCrossAllianceGetAllianceMemberListReq();

  TCrossAllianceGetAllianceMemberListReq(const TCrossAllianceGetAllianceMemberListReq& from);

  inline TCrossAllianceGetAllianceMemberListReq& operator=(const TCrossAllianceGetAllianceMemberListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossAllianceGetAllianceMemberListReq& default_instance();

  void Swap(TCrossAllianceGetAllianceMemberListReq* other);

  // implements Message ----------------------------------------------

  TCrossAllianceGetAllianceMemberListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossAllianceGetAllianceMemberListReq& from);
  void MergeFrom(const TCrossAllianceGetAllianceMemberListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 GuildId = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceGetAllianceMemberListReq</name>
  	<Function>
  		<name>guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossAllianceGetAllianceMemberListReq)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guildid_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TCrossAllianceGetAllianceMemberListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossAllianceGetAllianceMemberListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossAllianceGetAllianceMemberListRsp : public ::google::protobuf::Message {
 public:
  TCrossAllianceGetAllianceMemberListRsp();
  virtual ~TCrossAllianceGetAllianceMemberListRsp();

  TCrossAllianceGetAllianceMemberListRsp(const TCrossAllianceGetAllianceMemberListRsp& from);

  inline TCrossAllianceGetAllianceMemberListRsp& operator=(const TCrossAllianceGetAllianceMemberListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossAllianceGetAllianceMemberListRsp& default_instance();

  void Swap(TCrossAllianceGetAllianceMemberListRsp* other);

  // implements Message ----------------------------------------------

  TCrossAllianceGetAllianceMemberListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossAllianceGetAllianceMemberListRsp& from);
  void MergeFrom(const TCrossAllianceGetAllianceMemberListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TAllianceGuildMemberInfoWithUser GuildInfo = 1;
  inline int guildinfo_size() const;
  inline void clear_guildinfo();
  static const int kGuildInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceGetAllianceMemberListRsp</name>
  	<Function>
  		<name>guildinfo</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_guildinfo</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_guildinfo</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildinfo</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>guildinfo_size</name>
  		<replaceName>GuildInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceGuildMemberInfoWithUser& guildinfo(int index) const;
  inline ::pb::TAllianceGuildMemberInfoWithUser* mutable_guildinfo(int index);
  inline ::pb::TAllianceGuildMemberInfoWithUser* add_guildinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceGuildMemberInfoWithUser >&
      guildinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceGuildMemberInfoWithUser >*
      mutable_guildinfo();

  // @@protoc_insertion_point(class_scope:pb.TCrossAllianceGetAllianceMemberListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAllianceGuildMemberInfoWithUser > guildinfo_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TCrossAllianceGetAllianceMemberListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossAllianceGetAllianceApplyListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossAllianceGetAllianceApplyListRsp : public ::google::protobuf::Message {
 public:
  TCrossAllianceGetAllianceApplyListRsp();
  virtual ~TCrossAllianceGetAllianceApplyListRsp();

  TCrossAllianceGetAllianceApplyListRsp(const TCrossAllianceGetAllianceApplyListRsp& from);

  inline TCrossAllianceGetAllianceApplyListRsp& operator=(const TCrossAllianceGetAllianceApplyListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossAllianceGetAllianceApplyListRsp& default_instance();

  void Swap(TCrossAllianceGetAllianceApplyListRsp* other);

  // implements Message ----------------------------------------------

  TCrossAllianceGetAllianceApplyListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossAllianceGetAllianceApplyListRsp& from);
  void MergeFrom(const TCrossAllianceGetAllianceApplyListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TAllianceApplyGuildInfo ArrApply = 1;
  inline int arrapply_size() const;
  inline void clear_arrapply();
  static const int kArrApplyFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceGetAllianceApplyListRsp</name>
  	<Function>
  		<name>arrapply</name>
  		<replaceName>ArrApply</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrapply</name>
  		<replaceName>ArrApply</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrapply</name>
  		<replaceName>ArrApply</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrapply</name>
  		<replaceName>ArrApply</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrapply_size</name>
  		<replaceName>ArrApply</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceApplyGuildInfo& arrapply(int index) const;
  inline ::pb::TAllianceApplyGuildInfo* mutable_arrapply(int index);
  inline ::pb::TAllianceApplyGuildInfo* add_arrapply();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceApplyGuildInfo >&
      arrapply() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceApplyGuildInfo >*
      mutable_arrapply();

  // @@protoc_insertion_point(class_scope:pb.TCrossAllianceGetAllianceApplyListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAllianceApplyGuildInfo > arrapply_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TCrossAllianceGetAllianceApplyListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossAllianceCreateAllianceReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossAllianceCreateAllianceReq : public ::google::protobuf::Message {
 public:
  TCrossAllianceCreateAllianceReq();
  virtual ~TCrossAllianceCreateAllianceReq();

  TCrossAllianceCreateAllianceReq(const TCrossAllianceCreateAllianceReq& from);

  inline TCrossAllianceCreateAllianceReq& operator=(const TCrossAllianceCreateAllianceReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossAllianceCreateAllianceReq& default_instance();

  void Swap(TCrossAllianceCreateAllianceReq* other);

  // implements Message ----------------------------------------------

  TCrossAllianceCreateAllianceReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossAllianceCreateAllianceReq& from);
  void MergeFrom(const TCrossAllianceCreateAllianceReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceCreateAllianceReq</name>
  	<Function>
  		<name>name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string Summary = 2;
  inline bool has_summary() const;
  inline void clear_summary();
  static const int kSummaryFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceCreateAllianceReq</name>
  	<Function>
  		<name>summary</name>
  		<replaceName>Summary</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_summary</name>
  		<replaceName>Summary</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_summary</name>
  		<replaceName>Summary</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& summary() const;
  inline void set_summary(const ::std::string& value);
  inline void set_summary(const char* value);
  inline void set_summary(const char* value, size_t size);
  inline ::std::string* mutable_summary();
  inline ::std::string* release_summary();
  inline void set_allocated_summary(::std::string* summary);

  // optional uint32 BannerBase = 3;
  inline bool has_bannerbase() const;
  inline void clear_bannerbase();
  static const int kBannerBaseFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceCreateAllianceReq</name>
  	<Function>
  		<name>bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bannerbase() const;
  inline void set_bannerbase(::google::protobuf::uint32 value);

  // optional uint32 BannerFigure = 4;
  inline bool has_bannerfigure() const;
  inline void clear_bannerfigure();
  static const int kBannerFigureFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceCreateAllianceReq</name>
  	<Function>
  		<name>bannerfigure</name>
  		<replaceName>BannerFigure</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannerfigure</name>
  		<replaceName>BannerFigure</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannerfigure</name>
  		<replaceName>BannerFigure</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bannerfigure() const;
  inline void set_bannerfigure(::google::protobuf::uint32 value);

  // optional string BannerName = 5;
  inline bool has_bannername() const;
  inline void clear_bannername();
  static const int kBannerNameFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceCreateAllianceReq</name>
  	<Function>
  		<name>bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& bannername() const;
  inline void set_bannername(const ::std::string& value);
  inline void set_bannername(const char* value);
  inline void set_bannername(const char* value, size_t size);
  inline ::std::string* mutable_bannername();
  inline ::std::string* release_bannername();
  inline void set_allocated_bannername(::std::string* bannername);

  // @@protoc_insertion_point(class_scope:pb.TCrossAllianceCreateAllianceReq)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_summary();
  inline void clear_has_summary();
  inline void set_has_bannerbase();
  inline void clear_has_bannerbase();
  inline void set_has_bannerfigure();
  inline void clear_has_bannerfigure();
  inline void set_has_bannername();
  inline void clear_has_bannername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* summary_;
  ::google::protobuf::uint32 bannerbase_;
  ::google::protobuf::uint32 bannerfigure_;
  ::std::string* bannername_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TCrossAllianceCreateAllianceReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossAllianceApplyAllianceReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossAllianceApplyAllianceReq : public ::google::protobuf::Message {
 public:
  TCrossAllianceApplyAllianceReq();
  virtual ~TCrossAllianceApplyAllianceReq();

  TCrossAllianceApplyAllianceReq(const TCrossAllianceApplyAllianceReq& from);

  inline TCrossAllianceApplyAllianceReq& operator=(const TCrossAllianceApplyAllianceReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossAllianceApplyAllianceReq& default_instance();

  void Swap(TCrossAllianceApplyAllianceReq* other);

  // implements Message ----------------------------------------------

  TCrossAllianceApplyAllianceReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossAllianceApplyAllianceReq& from);
  void MergeFrom(const TCrossAllianceApplyAllianceReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 AllianceId = 1;
  inline bool has_allianceid() const;
  inline void clear_allianceid();
  static const int kAllianceIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceApplyAllianceReq</name>
  	<Function>
  		<name>allianceid</name>
  		<replaceName>AllianceId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allianceid</name>
  		<replaceName>AllianceId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_allianceid</name>
  		<replaceName>AllianceId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 allianceid() const;
  inline void set_allianceid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossAllianceApplyAllianceReq)
 private:
  inline void set_has_allianceid();
  inline void clear_has_allianceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 allianceid_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TCrossAllianceApplyAllianceReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossAllianceApplyAllianceRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossAllianceApplyAllianceRsp : public ::google::protobuf::Message {
 public:
  TCrossAllianceApplyAllianceRsp();
  virtual ~TCrossAllianceApplyAllianceRsp();

  TCrossAllianceApplyAllianceRsp(const TCrossAllianceApplyAllianceRsp& from);

  inline TCrossAllianceApplyAllianceRsp& operator=(const TCrossAllianceApplyAllianceRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossAllianceApplyAllianceRsp& default_instance();

  void Swap(TCrossAllianceApplyAllianceRsp* other);

  // implements Message ----------------------------------------------

  TCrossAllianceApplyAllianceRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossAllianceApplyAllianceRsp& from);
  void MergeFrom(const TCrossAllianceApplyAllianceRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 JoinAllianceId = 1;
  inline bool has_joinallianceid() const;
  inline void clear_joinallianceid();
  static const int kJoinAllianceIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceApplyAllianceRsp</name>
  	<Function>
  		<name>joinallianceid</name>
  		<replaceName>JoinAllianceId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_joinallianceid</name>
  		<replaceName>JoinAllianceId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_joinallianceid</name>
  		<replaceName>JoinAllianceId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 joinallianceid() const;
  inline void set_joinallianceid(::google::protobuf::uint64 value);

  // repeated uint64 ApplyAllianceId = 2;
  inline int applyallianceid_size() const;
  inline void clear_applyallianceid();
  static const int kApplyAllianceIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceApplyAllianceRsp</name>
  	<Function>
  		<name>applyallianceid</name>
  		<replaceName>ApplyAllianceId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_applyallianceid</name>
  		<replaceName>ApplyAllianceId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_applyallianceid</name>
  		<replaceName>ApplyAllianceId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_applyallianceid</name>
  		<replaceName>ApplyAllianceId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>applyallianceid_size</name>
  		<replaceName>ApplyAllianceId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 applyallianceid(int index) const;
  inline void set_applyallianceid(int index, ::google::protobuf::uint64 value);
  inline void add_applyallianceid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      applyallianceid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_applyallianceid();

  // optional uint64 LeaveTime = 3;
  inline bool has_leavetime() const;
  inline void clear_leavetime();
  static const int kLeaveTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceApplyAllianceRsp</name>
  	<Function>
  		<name>leavetime</name>
  		<replaceName>LeaveTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_leavetime</name>
  		<replaceName>LeaveTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_leavetime</name>
  		<replaceName>LeaveTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 leavetime() const;
  inline void set_leavetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossAllianceApplyAllianceRsp)
 private:
  inline void set_has_joinallianceid();
  inline void clear_has_joinallianceid();
  inline void set_has_leavetime();
  inline void clear_has_leavetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 joinallianceid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > applyallianceid_;
  ::google::protobuf::uint64 leavetime_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TCrossAllianceApplyAllianceRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossAllianceCancelApplyAllianceReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossAllianceCancelApplyAllianceReq : public ::google::protobuf::Message {
 public:
  TCrossAllianceCancelApplyAllianceReq();
  virtual ~TCrossAllianceCancelApplyAllianceReq();

  TCrossAllianceCancelApplyAllianceReq(const TCrossAllianceCancelApplyAllianceReq& from);

  inline TCrossAllianceCancelApplyAllianceReq& operator=(const TCrossAllianceCancelApplyAllianceReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossAllianceCancelApplyAllianceReq& default_instance();

  void Swap(TCrossAllianceCancelApplyAllianceReq* other);

  // implements Message ----------------------------------------------

  TCrossAllianceCancelApplyAllianceReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossAllianceCancelApplyAllianceReq& from);
  void MergeFrom(const TCrossAllianceCancelApplyAllianceReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 AllianceId = 1;
  inline bool has_allianceid() const;
  inline void clear_allianceid();
  static const int kAllianceIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceCancelApplyAllianceReq</name>
  	<Function>
  		<name>allianceid</name>
  		<replaceName>AllianceId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allianceid</name>
  		<replaceName>AllianceId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_allianceid</name>
  		<replaceName>AllianceId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 allianceid() const;
  inline void set_allianceid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossAllianceCancelApplyAllianceReq)
 private:
  inline void set_has_allianceid();
  inline void clear_has_allianceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 allianceid_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TCrossAllianceCancelApplyAllianceReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossAllianceExamineApplyReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossAllianceExamineApplyReq : public ::google::protobuf::Message {
 public:
  TCrossAllianceExamineApplyReq();
  virtual ~TCrossAllianceExamineApplyReq();

  TCrossAllianceExamineApplyReq(const TCrossAllianceExamineApplyReq& from);

  inline TCrossAllianceExamineApplyReq& operator=(const TCrossAllianceExamineApplyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossAllianceExamineApplyReq& default_instance();

  void Swap(TCrossAllianceExamineApplyReq* other);

  // implements Message ----------------------------------------------

  TCrossAllianceExamineApplyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossAllianceExamineApplyReq& from);
  void MergeFrom(const TCrossAllianceExamineApplyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 GuildId = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceExamineApplyReq</name>
  	<Function>
  		<name>guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional bool Agree = 2;
  inline bool has_agree() const;
  inline void clear_agree();
  static const int kAgreeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceExamineApplyReq</name>
  	<Function>
  		<name>agree</name>
  		<replaceName>Agree</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_agree</name>
  		<replaceName>Agree</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_agree</name>
  		<replaceName>Agree</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool agree() const;
  inline void set_agree(bool value);

  // @@protoc_insertion_point(class_scope:pb.TCrossAllianceExamineApplyReq)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_agree();
  inline void clear_has_agree();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guildid_;
  bool agree_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TCrossAllianceExamineApplyReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossAllianceModifyInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossAllianceModifyInfoReq : public ::google::protobuf::Message {
 public:
  TCrossAllianceModifyInfoReq();
  virtual ~TCrossAllianceModifyInfoReq();

  TCrossAllianceModifyInfoReq(const TCrossAllianceModifyInfoReq& from);

  inline TCrossAllianceModifyInfoReq& operator=(const TCrossAllianceModifyInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossAllianceModifyInfoReq& default_instance();

  void Swap(TCrossAllianceModifyInfoReq* other);

  // implements Message ----------------------------------------------

  TCrossAllianceModifyInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossAllianceModifyInfoReq& from);
  void MergeFrom(const TCrossAllianceModifyInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string BannerName = 1;
  inline bool has_bannername() const;
  inline void clear_bannername();
  static const int kBannerNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceModifyInfoReq</name>
  	<Function>
  		<name>bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannername</name>
  		<replaceName>BannerName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& bannername() const;
  inline void set_bannername(const ::std::string& value);
  inline void set_bannername(const char* value);
  inline void set_bannername(const char* value, size_t size);
  inline ::std::string* mutable_bannername();
  inline ::std::string* release_bannername();
  inline void set_allocated_bannername(::std::string* bannername);

  // optional uint32 BannerBase = 2;
  inline bool has_bannerbase() const;
  inline void clear_bannerbase();
  static const int kBannerBaseFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceModifyInfoReq</name>
  	<Function>
  		<name>bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannerbase</name>
  		<replaceName>BannerBase</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bannerbase() const;
  inline void set_bannerbase(::google::protobuf::uint32 value);

  // optional uint32 BannerFigure = 3;
  inline bool has_bannerfigure() const;
  inline void clear_bannerfigure();
  static const int kBannerFigureFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceModifyInfoReq</name>
  	<Function>
  		<name>bannerfigure</name>
  		<replaceName>BannerFigure</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bannerfigure</name>
  		<replaceName>BannerFigure</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bannerfigure</name>
  		<replaceName>BannerFigure</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bannerfigure() const;
  inline void set_bannerfigure(::google::protobuf::uint32 value);

  // optional string Summary = 4;
  inline bool has_summary() const;
  inline void clear_summary();
  static const int kSummaryFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceModifyInfoReq</name>
  	<Function>
  		<name>summary</name>
  		<replaceName>Summary</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_summary</name>
  		<replaceName>Summary</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_summary</name>
  		<replaceName>Summary</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& summary() const;
  inline void set_summary(const ::std::string& value);
  inline void set_summary(const char* value);
  inline void set_summary(const char* value, size_t size);
  inline ::std::string* mutable_summary();
  inline ::std::string* release_summary();
  inline void set_allocated_summary(::std::string* summary);

  // optional string Notice = 5;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceModifyInfoReq</name>
  	<Function>
  		<name>notice</name>
  		<replaceName>Notice</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_notice</name>
  		<replaceName>Notice</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_notice</name>
  		<replaceName>Notice</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // optional .pb.EReviewMode ReviewMode = 6;
  inline bool has_reviewmode() const;
  inline void clear_reviewmode();
  static const int kReviewModeFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceModifyInfoReq</name>
  	<Function>
  		<name>reviewmode</name>
  		<replaceName>ReviewMode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_reviewmode</name>
  		<replaceName>ReviewMode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reviewmode</name>
  		<replaceName>ReviewMode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EReviewMode reviewmode() const;
  inline void set_reviewmode(::pb::EReviewMode value);

  // optional uint32 GuildLvLimit = 7;
  inline bool has_guildlvlimit() const;
  inline void clear_guildlvlimit();
  static const int kGuildLvLimitFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceModifyInfoReq</name>
  	<Function>
  		<name>guildlvlimit</name>
  		<replaceName>GuildLvLimit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildlvlimit</name>
  		<replaceName>GuildLvLimit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildlvlimit</name>
  		<replaceName>GuildLvLimit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 guildlvlimit() const;
  inline void set_guildlvlimit(::google::protobuf::uint32 value);

  // optional string QQ = 8;
  inline bool has_qq() const;
  inline void clear_qq();
  static const int kQQFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceModifyInfoReq</name>
  	<Function>
  		<name>qq</name>
  		<replaceName>QQ</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_qq</name>
  		<replaceName>QQ</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_qq</name>
  		<replaceName>QQ</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& qq() const;
  inline void set_qq(const ::std::string& value);
  inline void set_qq(const char* value);
  inline void set_qq(const char* value, size_t size);
  inline ::std::string* mutable_qq();
  inline ::std::string* release_qq();
  inline void set_allocated_qq(::std::string* qq);

  // @@protoc_insertion_point(class_scope:pb.TCrossAllianceModifyInfoReq)
 private:
  inline void set_has_bannername();
  inline void clear_has_bannername();
  inline void set_has_bannerbase();
  inline void clear_has_bannerbase();
  inline void set_has_bannerfigure();
  inline void clear_has_bannerfigure();
  inline void set_has_summary();
  inline void clear_has_summary();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_reviewmode();
  inline void clear_has_reviewmode();
  inline void set_has_guildlvlimit();
  inline void clear_has_guildlvlimit();
  inline void set_has_qq();
  inline void clear_has_qq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* bannername_;
  ::google::protobuf::uint32 bannerbase_;
  ::google::protobuf::uint32 bannerfigure_;
  ::std::string* summary_;
  ::std::string* notice_;
  int reviewmode_;
  ::google::protobuf::uint32 guildlvlimit_;
  ::std::string* qq_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TCrossAllianceModifyInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossAllianceChangeNameReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossAllianceChangeNameReq : public ::google::protobuf::Message {
 public:
  TCrossAllianceChangeNameReq();
  virtual ~TCrossAllianceChangeNameReq();

  TCrossAllianceChangeNameReq(const TCrossAllianceChangeNameReq& from);

  inline TCrossAllianceChangeNameReq& operator=(const TCrossAllianceChangeNameReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossAllianceChangeNameReq& default_instance();

  void Swap(TCrossAllianceChangeNameReq* other);

  // implements Message ----------------------------------------------

  TCrossAllianceChangeNameReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossAllianceChangeNameReq& from);
  void MergeFrom(const TCrossAllianceChangeNameReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceChangeNameReq</name>
  	<Function>
  		<name>name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:pb.TCrossAllianceChangeNameReq)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TCrossAllianceChangeNameReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossAllianceKickGuildReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossAllianceKickGuildReq : public ::google::protobuf::Message {
 public:
  TCrossAllianceKickGuildReq();
  virtual ~TCrossAllianceKickGuildReq();

  TCrossAllianceKickGuildReq(const TCrossAllianceKickGuildReq& from);

  inline TCrossAllianceKickGuildReq& operator=(const TCrossAllianceKickGuildReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossAllianceKickGuildReq& default_instance();

  void Swap(TCrossAllianceKickGuildReq* other);

  // implements Message ----------------------------------------------

  TCrossAllianceKickGuildReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossAllianceKickGuildReq& from);
  void MergeFrom(const TCrossAllianceKickGuildReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 GuildId = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceKickGuildReq</name>
  	<Function>
  		<name>guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossAllianceKickGuildReq)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guildid_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TCrossAllianceKickGuildReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossAllianceAppointPostReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossAllianceAppointPostReq : public ::google::protobuf::Message {
 public:
  TCrossAllianceAppointPostReq();
  virtual ~TCrossAllianceAppointPostReq();

  TCrossAllianceAppointPostReq(const TCrossAllianceAppointPostReq& from);

  inline TCrossAllianceAppointPostReq& operator=(const TCrossAllianceAppointPostReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossAllianceAppointPostReq& default_instance();

  void Swap(TCrossAllianceAppointPostReq* other);

  // implements Message ----------------------------------------------

  TCrossAllianceAppointPostReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossAllianceAppointPostReq& from);
  void MergeFrom(const TCrossAllianceAppointPostReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 GuildId = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceAppointPostReq</name>
  	<Function>
  		<name>guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional .pb.EAlliancePost Post = 2;
  inline bool has_post() const;
  inline void clear_post();
  static const int kPostFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceAppointPostReq</name>
  	<Function>
  		<name>post</name>
  		<replaceName>Post</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_post</name>
  		<replaceName>Post</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_post</name>
  		<replaceName>Post</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAlliancePost post() const;
  inline void set_post(::pb::EAlliancePost value);

  // @@protoc_insertion_point(class_scope:pb.TCrossAllianceAppointPostReq)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_post();
  inline void clear_has_post();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guildid_;
  int post_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TCrossAllianceAppointPostReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossAllianceInitiateVoteReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossAllianceInitiateVoteReq : public ::google::protobuf::Message {
 public:
  TCrossAllianceInitiateVoteReq();
  virtual ~TCrossAllianceInitiateVoteReq();

  TCrossAllianceInitiateVoteReq(const TCrossAllianceInitiateVoteReq& from);

  inline TCrossAllianceInitiateVoteReq& operator=(const TCrossAllianceInitiateVoteReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossAllianceInitiateVoteReq& default_instance();

  void Swap(TCrossAllianceInitiateVoteReq* other);

  // implements Message ----------------------------------------------

  TCrossAllianceInitiateVoteReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossAllianceInitiateVoteReq& from);
  void MergeFrom(const TCrossAllianceInitiateVoteReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EAllianceVoteType VoteType = 1;
  inline bool has_votetype() const;
  inline void clear_votetype();
  static const int kVoteTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceInitiateVoteReq</name>
  	<Function>
  		<name>votetype</name>
  		<replaceName>VoteType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_votetype</name>
  		<replaceName>VoteType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_votetype</name>
  		<replaceName>VoteType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAllianceVoteType votetype() const;
  inline void set_votetype(::pb::EAllianceVoteType value);

  // optional uint64 GuildId = 2;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceInitiateVoteReq</name>
  	<Function>
  		<name>guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossAllianceInitiateVoteReq)
 private:
  inline void set_has_votetype();
  inline void clear_has_votetype();
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guildid_;
  int votetype_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TCrossAllianceInitiateVoteReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossAllianceCancelVoteReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossAllianceCancelVoteReq : public ::google::protobuf::Message {
 public:
  TCrossAllianceCancelVoteReq();
  virtual ~TCrossAllianceCancelVoteReq();

  TCrossAllianceCancelVoteReq(const TCrossAllianceCancelVoteReq& from);

  inline TCrossAllianceCancelVoteReq& operator=(const TCrossAllianceCancelVoteReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossAllianceCancelVoteReq& default_instance();

  void Swap(TCrossAllianceCancelVoteReq* other);

  // implements Message ----------------------------------------------

  TCrossAllianceCancelVoteReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossAllianceCancelVoteReq& from);
  void MergeFrom(const TCrossAllianceCancelVoteReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 VoteId = 1;
  inline bool has_voteid() const;
  inline void clear_voteid();
  static const int kVoteIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceCancelVoteReq</name>
  	<Function>
  		<name>voteid</name>
  		<replaceName>VoteId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_voteid</name>
  		<replaceName>VoteId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_voteid</name>
  		<replaceName>VoteId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 voteid() const;
  inline void set_voteid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossAllianceCancelVoteReq)
 private:
  inline void set_has_voteid();
  inline void clear_has_voteid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 voteid_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TCrossAllianceCancelVoteReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossAllianceVoteReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossAllianceVoteReq : public ::google::protobuf::Message {
 public:
  TCrossAllianceVoteReq();
  virtual ~TCrossAllianceVoteReq();

  TCrossAllianceVoteReq(const TCrossAllianceVoteReq& from);

  inline TCrossAllianceVoteReq& operator=(const TCrossAllianceVoteReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossAllianceVoteReq& default_instance();

  void Swap(TCrossAllianceVoteReq* other);

  // implements Message ----------------------------------------------

  TCrossAllianceVoteReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossAllianceVoteReq& from);
  void MergeFrom(const TCrossAllianceVoteReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 VoteId = 1;
  inline bool has_voteid() const;
  inline void clear_voteid();
  static const int kVoteIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceVoteReq</name>
  	<Function>
  		<name>voteid</name>
  		<replaceName>VoteId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_voteid</name>
  		<replaceName>VoteId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_voteid</name>
  		<replaceName>VoteId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 voteid() const;
  inline void set_voteid(::google::protobuf::uint64 value);

  // optional .pb.EAllianceVoteResult VoteResult = 2;
  inline bool has_voteresult() const;
  inline void clear_voteresult();
  static const int kVoteResultFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceVoteReq</name>
  	<Function>
  		<name>voteresult</name>
  		<replaceName>VoteResult</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_voteresult</name>
  		<replaceName>VoteResult</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_voteresult</name>
  		<replaceName>VoteResult</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAllianceVoteResult voteresult() const;
  inline void set_voteresult(::pb::EAllianceVoteResult value);

  // @@protoc_insertion_point(class_scope:pb.TCrossAllianceVoteReq)
 private:
  inline void set_has_voteid();
  inline void clear_has_voteid();
  inline void set_has_voteresult();
  inline void clear_has_voteresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 voteid_;
  int voteresult_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TCrossAllianceVoteReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossAllianceUpgradeScienceReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossAllianceUpgradeScienceReq : public ::google::protobuf::Message {
 public:
  TCrossAllianceUpgradeScienceReq();
  virtual ~TCrossAllianceUpgradeScienceReq();

  TCrossAllianceUpgradeScienceReq(const TCrossAllianceUpgradeScienceReq& from);

  inline TCrossAllianceUpgradeScienceReq& operator=(const TCrossAllianceUpgradeScienceReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossAllianceUpgradeScienceReq& default_instance();

  void Swap(TCrossAllianceUpgradeScienceReq* other);

  // implements Message ----------------------------------------------

  TCrossAllianceUpgradeScienceReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossAllianceUpgradeScienceReq& from);
  void MergeFrom(const TCrossAllianceUpgradeScienceReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceUpgradeScienceReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 Level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossAllianceUpgradeScienceReq</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossAllianceUpgradeScienceReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TCrossAllianceUpgradeScienceReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAllianceInfoChange</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAllianceInfoChange : public ::google::protobuf::Message {
 public:
  TAllianceInfoChange();
  virtual ~TAllianceInfoChange();

  TAllianceInfoChange(const TAllianceInfoChange& from);

  inline TAllianceInfoChange& operator=(const TAllianceInfoChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAllianceInfoChange& default_instance();

  void Swap(TAllianceInfoChange* other);

  // implements Message ----------------------------------------------

  TAllianceInfoChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAllianceInfoChange& from);
  void MergeFrom(const TAllianceInfoChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TAllianceDetailInfo AllianceDetailInfo = 1;
  inline bool has_alliancedetailinfo() const;
  inline void clear_alliancedetailinfo();
  static const int kAllianceDetailInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAllianceInfoChange</name>
  	<Function>
  		<name>alliancedetailinfo</name>
  		<replaceName>AllianceDetailInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_alliancedetailinfo</name>
  		<replaceName>AllianceDetailInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_alliancedetailinfo</name>
  		<replaceName>AllianceDetailInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_alliancedetailinfo</name>
  		<replaceName>AllianceDetailInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceDetailInfo& alliancedetailinfo() const;
  inline ::pb::TAllianceDetailInfo* mutable_alliancedetailinfo();
  inline ::pb::TAllianceDetailInfo* release_alliancedetailinfo();
  inline void set_allocated_alliancedetailinfo(::pb::TAllianceDetailInfo* alliancedetailinfo);

  // @@protoc_insertion_point(class_scope:pb.TAllianceInfoChange)
 private:
  inline void set_has_alliancedetailinfo();
  inline void clear_has_alliancedetailinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAllianceDetailInfo* alliancedetailinfo_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TAllianceInfoChange* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAllianceJoinNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAllianceJoinNotify : public ::google::protobuf::Message {
 public:
  TAllianceJoinNotify();
  virtual ~TAllianceJoinNotify();

  TAllianceJoinNotify(const TAllianceJoinNotify& from);

  inline TAllianceJoinNotify& operator=(const TAllianceJoinNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAllianceJoinNotify& default_instance();

  void Swap(TAllianceJoinNotify* other);

  // implements Message ----------------------------------------------

  TAllianceJoinNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAllianceJoinNotify& from);
  void MergeFrom(const TAllianceJoinNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 AllianceId = 1;
  inline bool has_allianceid() const;
  inline void clear_allianceid();
  static const int kAllianceIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAllianceJoinNotify</name>
  	<Function>
  		<name>allianceid</name>
  		<replaceName>AllianceId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allianceid</name>
  		<replaceName>AllianceId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_allianceid</name>
  		<replaceName>AllianceId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 allianceid() const;
  inline void set_allianceid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TAllianceJoinNotify)
 private:
  inline void set_has_allianceid();
  inline void clear_has_allianceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 allianceid_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TAllianceJoinNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAllianceLeaveNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Alliance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAllianceLeaveNotify : public ::google::protobuf::Message {
 public:
  TAllianceLeaveNotify();
  virtual ~TAllianceLeaveNotify();

  TAllianceLeaveNotify(const TAllianceLeaveNotify& from);

  inline TAllianceLeaveNotify& operator=(const TAllianceLeaveNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAllianceLeaveNotify& default_instance();

  void Swap(TAllianceLeaveNotify* other);

  // implements Message ----------------------------------------------

  TAllianceLeaveNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAllianceLeaveNotify& from);
  void MergeFrom(const TAllianceLeaveNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 AllianceId = 1;
  inline bool has_allianceid() const;
  inline void clear_allianceid();
  static const int kAllianceIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAllianceLeaveNotify</name>
  	<Function>
  		<name>allianceid</name>
  		<replaceName>AllianceId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allianceid</name>
  		<replaceName>AllianceId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_allianceid</name>
  		<replaceName>AllianceId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 allianceid() const;
  inline void set_allianceid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TAllianceLeaveNotify)
 private:
  inline void set_has_allianceid();
  inline void clear_has_allianceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 allianceid_;
  friend void  protobuf_AddDesc_net_2fAlliance_2eproto();
  friend void protobuf_AssignDesc_net_2fAlliance_2eproto();
  friend void protobuf_ShutdownFile_net_2fAlliance_2eproto();

  void InitAsDefaultInstance();
  static TAllianceLeaveNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TAllianceUserTaskType

// optional uint32 TaskType = 1;
inline bool TAllianceUserTaskType::has_tasktype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAllianceUserTaskType::set_has_tasktype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAllianceUserTaskType::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAllianceUserTaskType::clear_tasktype() {
  tasktype_ = 0u;
  clear_has_tasktype();
}
inline ::google::protobuf::uint32 TAllianceUserTaskType::tasktype() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceUserTaskType.TaskType)
  return tasktype_;
}
inline void TAllianceUserTaskType::set_tasktype(::google::protobuf::uint32 value) {
  set_has_tasktype();
  tasktype_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceUserTaskType.TaskType)
}

// optional uint32 Num = 2;
inline bool TAllianceUserTaskType::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAllianceUserTaskType::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAllianceUserTaskType::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAllianceUserTaskType::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TAllianceUserTaskType::num() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceUserTaskType.Num)
  return num_;
}
inline void TAllianceUserTaskType::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceUserTaskType.Num)
}

// -------------------------------------------------------------------

// TAllianceUserTask

// optional uint32 TaskId = 1;
inline bool TAllianceUserTask::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAllianceUserTask::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAllianceUserTask::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAllianceUserTask::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 TAllianceUserTask::taskid() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceUserTask.TaskId)
  return taskid_;
}
inline void TAllianceUserTask::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceUserTask.TaskId)
}

// optional uint64 CommitTime = 2;
inline bool TAllianceUserTask::has_committime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAllianceUserTask::set_has_committime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAllianceUserTask::clear_has_committime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAllianceUserTask::clear_committime() {
  committime_ = GOOGLE_ULONGLONG(0);
  clear_has_committime();
}
inline ::google::protobuf::uint64 TAllianceUserTask::committime() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceUserTask.CommitTime)
  return committime_;
}
inline void TAllianceUserTask::set_committime(::google::protobuf::uint64 value) {
  set_has_committime();
  committime_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceUserTask.CommitTime)
}

// -------------------------------------------------------------------

// TAllianceUserPractice

// optional uint32 Type = 1;
inline bool TAllianceUserPractice::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAllianceUserPractice::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAllianceUserPractice::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAllianceUserPractice::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 TAllianceUserPractice::type() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceUserPractice.Type)
  return type_;
}
inline void TAllianceUserPractice::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceUserPractice.Type)
}

// optional uint32 Level = 2;
inline bool TAllianceUserPractice::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAllianceUserPractice::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAllianceUserPractice::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAllianceUserPractice::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TAllianceUserPractice::level() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceUserPractice.Level)
  return level_;
}
inline void TAllianceUserPractice::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceUserPractice.Level)
}

// -------------------------------------------------------------------

// TAllianceUserInfo

// optional uint32 TaskRefreshNum = 1;
inline bool TAllianceUserInfo::has_taskrefreshnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAllianceUserInfo::set_has_taskrefreshnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAllianceUserInfo::clear_has_taskrefreshnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAllianceUserInfo::clear_taskrefreshnum() {
  taskrefreshnum_ = 0u;
  clear_has_taskrefreshnum();
}
inline ::google::protobuf::uint32 TAllianceUserInfo::taskrefreshnum() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceUserInfo.TaskRefreshNum)
  return taskrefreshnum_;
}
inline void TAllianceUserInfo::set_taskrefreshnum(::google::protobuf::uint32 value) {
  set_has_taskrefreshnum();
  taskrefreshnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceUserInfo.TaskRefreshNum)
}

// optional uint32 TaskUpgradeNum = 2;
inline bool TAllianceUserInfo::has_taskupgradenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAllianceUserInfo::set_has_taskupgradenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAllianceUserInfo::clear_has_taskupgradenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAllianceUserInfo::clear_taskupgradenum() {
  taskupgradenum_ = 0u;
  clear_has_taskupgradenum();
}
inline ::google::protobuf::uint32 TAllianceUserInfo::taskupgradenum() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceUserInfo.TaskUpgradeNum)
  return taskupgradenum_;
}
inline void TAllianceUserInfo::set_taskupgradenum(::google::protobuf::uint32 value) {
  set_has_taskupgradenum();
  taskupgradenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceUserInfo.TaskUpgradeNum)
}

// repeated .pb.TAllianceUserTaskType ArrTaskTypeInfo = 3;
inline int TAllianceUserInfo::arrtasktypeinfo_size() const {
  return arrtasktypeinfo_.size();
}
inline void TAllianceUserInfo::clear_arrtasktypeinfo() {
  arrtasktypeinfo_.Clear();
}
inline const ::pb::TAllianceUserTaskType& TAllianceUserInfo::arrtasktypeinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAllianceUserInfo.ArrTaskTypeInfo)
  return arrtasktypeinfo_.Get(index);
}
inline ::pb::TAllianceUserTaskType* TAllianceUserInfo::mutable_arrtasktypeinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAllianceUserInfo.ArrTaskTypeInfo)
  return arrtasktypeinfo_.Mutable(index);
}
inline ::pb::TAllianceUserTaskType* TAllianceUserInfo::add_arrtasktypeinfo() {
  // @@protoc_insertion_point(field_add:pb.TAllianceUserInfo.ArrTaskTypeInfo)
  return arrtasktypeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceUserTaskType >&
TAllianceUserInfo::arrtasktypeinfo() const {
  // @@protoc_insertion_point(field_list:pb.TAllianceUserInfo.ArrTaskTypeInfo)
  return arrtasktypeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceUserTaskType >*
TAllianceUserInfo::mutable_arrtasktypeinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAllianceUserInfo.ArrTaskTypeInfo)
  return &arrtasktypeinfo_;
}

// repeated .pb.TAllianceUserTask ArrTaskInfo = 4;
inline int TAllianceUserInfo::arrtaskinfo_size() const {
  return arrtaskinfo_.size();
}
inline void TAllianceUserInfo::clear_arrtaskinfo() {
  arrtaskinfo_.Clear();
}
inline const ::pb::TAllianceUserTask& TAllianceUserInfo::arrtaskinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAllianceUserInfo.ArrTaskInfo)
  return arrtaskinfo_.Get(index);
}
inline ::pb::TAllianceUserTask* TAllianceUserInfo::mutable_arrtaskinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAllianceUserInfo.ArrTaskInfo)
  return arrtaskinfo_.Mutable(index);
}
inline ::pb::TAllianceUserTask* TAllianceUserInfo::add_arrtaskinfo() {
  // @@protoc_insertion_point(field_add:pb.TAllianceUserInfo.ArrTaskInfo)
  return arrtaskinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceUserTask >&
TAllianceUserInfo::arrtaskinfo() const {
  // @@protoc_insertion_point(field_list:pb.TAllianceUserInfo.ArrTaskInfo)
  return arrtaskinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceUserTask >*
TAllianceUserInfo::mutable_arrtaskinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAllianceUserInfo.ArrTaskInfo)
  return &arrtaskinfo_;
}

// optional uint64 SignRewardTime = 5;
inline bool TAllianceUserInfo::has_signrewardtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TAllianceUserInfo::set_has_signrewardtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TAllianceUserInfo::clear_has_signrewardtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TAllianceUserInfo::clear_signrewardtime() {
  signrewardtime_ = GOOGLE_ULONGLONG(0);
  clear_has_signrewardtime();
}
inline ::google::protobuf::uint64 TAllianceUserInfo::signrewardtime() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceUserInfo.SignRewardTime)
  return signrewardtime_;
}
inline void TAllianceUserInfo::set_signrewardtime(::google::protobuf::uint64 value) {
  set_has_signrewardtime();
  signrewardtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceUserInfo.SignRewardTime)
}

// repeated uint64 TaskRewardTime = 6;
inline int TAllianceUserInfo::taskrewardtime_size() const {
  return taskrewardtime_.size();
}
inline void TAllianceUserInfo::clear_taskrewardtime() {
  taskrewardtime_.Clear();
}
inline ::google::protobuf::uint64 TAllianceUserInfo::taskrewardtime(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAllianceUserInfo.TaskRewardTime)
  return taskrewardtime_.Get(index);
}
inline void TAllianceUserInfo::set_taskrewardtime(int index, ::google::protobuf::uint64 value) {
  taskrewardtime_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TAllianceUserInfo.TaskRewardTime)
}
inline void TAllianceUserInfo::add_taskrewardtime(::google::protobuf::uint64 value) {
  taskrewardtime_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TAllianceUserInfo.TaskRewardTime)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TAllianceUserInfo::taskrewardtime() const {
  // @@protoc_insertion_point(field_list:pb.TAllianceUserInfo.TaskRewardTime)
  return taskrewardtime_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TAllianceUserInfo::mutable_taskrewardtime() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAllianceUserInfo.TaskRewardTime)
  return &taskrewardtime_;
}

// repeated .pb.TAllianceUserPractice ArrPractice = 7;
inline int TAllianceUserInfo::arrpractice_size() const {
  return arrpractice_.size();
}
inline void TAllianceUserInfo::clear_arrpractice() {
  arrpractice_.Clear();
}
inline const ::pb::TAllianceUserPractice& TAllianceUserInfo::arrpractice(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAllianceUserInfo.ArrPractice)
  return arrpractice_.Get(index);
}
inline ::pb::TAllianceUserPractice* TAllianceUserInfo::mutable_arrpractice(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAllianceUserInfo.ArrPractice)
  return arrpractice_.Mutable(index);
}
inline ::pb::TAllianceUserPractice* TAllianceUserInfo::add_arrpractice() {
  // @@protoc_insertion_point(field_add:pb.TAllianceUserInfo.ArrPractice)
  return arrpractice_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceUserPractice >&
TAllianceUserInfo::arrpractice() const {
  // @@protoc_insertion_point(field_list:pb.TAllianceUserInfo.ArrPractice)
  return arrpractice_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceUserPractice >*
TAllianceUserInfo::mutable_arrpractice() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAllianceUserInfo.ArrPractice)
  return &arrpractice_;
}

// -------------------------------------------------------------------

// TAllianceTip

// optional uint64 Time = 1;
inline bool TAllianceTip::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAllianceTip::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAllianceTip::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAllianceTip::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 TAllianceTip::time() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceTip.Time)
  return time_;
}
inline void TAllianceTip::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceTip.Time)
}

// optional .pb.EAllianceTipType Type = 2;
inline bool TAllianceTip::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAllianceTip::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAllianceTip::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAllianceTip::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::pb::EAllianceTipType TAllianceTip::type() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceTip.Type)
  return static_cast< ::pb::EAllianceTipType >(type_);
}
inline void TAllianceTip::set_type(::pb::EAllianceTipType value) {
  assert(::pb::EAllianceTipType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceTip.Type)
}

// repeated string ParamArr = 3;
inline int TAllianceTip::paramarr_size() const {
  return paramarr_.size();
}
inline void TAllianceTip::clear_paramarr() {
  paramarr_.Clear();
}
inline const ::std::string& TAllianceTip::paramarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAllianceTip.ParamArr)
  return paramarr_.Get(index);
}
inline ::std::string* TAllianceTip::mutable_paramarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAllianceTip.ParamArr)
  return paramarr_.Mutable(index);
}
inline void TAllianceTip::set_paramarr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TAllianceTip.ParamArr)
  paramarr_.Mutable(index)->assign(value);
}
inline void TAllianceTip::set_paramarr(int index, const char* value) {
  paramarr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TAllianceTip.ParamArr)
}
inline void TAllianceTip::set_paramarr(int index, const char* value, size_t size) {
  paramarr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TAllianceTip.ParamArr)
}
inline ::std::string* TAllianceTip::add_paramarr() {
  return paramarr_.Add();
}
inline void TAllianceTip::add_paramarr(const ::std::string& value) {
  paramarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TAllianceTip.ParamArr)
}
inline void TAllianceTip::add_paramarr(const char* value) {
  paramarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TAllianceTip.ParamArr)
}
inline void TAllianceTip::add_paramarr(const char* value, size_t size) {
  paramarr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TAllianceTip.ParamArr)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TAllianceTip::paramarr() const {
  // @@protoc_insertion_point(field_list:pb.TAllianceTip.ParamArr)
  return paramarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TAllianceTip::mutable_paramarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAllianceTip.ParamArr)
  return &paramarr_;
}

// -------------------------------------------------------------------

// TAllianceSimpleInfo

// optional uint64 AllianceId = 1;
inline bool TAllianceSimpleInfo::has_allianceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAllianceSimpleInfo::set_has_allianceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAllianceSimpleInfo::clear_has_allianceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAllianceSimpleInfo::clear_allianceid() {
  allianceid_ = GOOGLE_ULONGLONG(0);
  clear_has_allianceid();
}
inline ::google::protobuf::uint64 TAllianceSimpleInfo::allianceid() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceSimpleInfo.AllianceId)
  return allianceid_;
}
inline void TAllianceSimpleInfo::set_allianceid(::google::protobuf::uint64 value) {
  set_has_allianceid();
  allianceid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceSimpleInfo.AllianceId)
}

// optional string Name = 2;
inline bool TAllianceSimpleInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAllianceSimpleInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAllianceSimpleInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAllianceSimpleInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TAllianceSimpleInfo::name() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceSimpleInfo.Name)
  return *name_;
}
inline void TAllianceSimpleInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TAllianceSimpleInfo.Name)
}
inline void TAllianceSimpleInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TAllianceSimpleInfo.Name)
}
inline void TAllianceSimpleInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TAllianceSimpleInfo.Name)
}
inline ::std::string* TAllianceSimpleInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TAllianceSimpleInfo.Name)
  return name_;
}
inline ::std::string* TAllianceSimpleInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TAllianceSimpleInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAllianceSimpleInfo.Name)
}

// optional string BannerName = 3;
inline bool TAllianceSimpleInfo::has_bannername() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAllianceSimpleInfo::set_has_bannername() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAllianceSimpleInfo::clear_has_bannername() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAllianceSimpleInfo::clear_bannername() {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_->clear();
  }
  clear_has_bannername();
}
inline const ::std::string& TAllianceSimpleInfo::bannername() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceSimpleInfo.BannerName)
  return *bannername_;
}
inline void TAllianceSimpleInfo::set_bannername(const ::std::string& value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TAllianceSimpleInfo.BannerName)
}
inline void TAllianceSimpleInfo::set_bannername(const char* value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TAllianceSimpleInfo.BannerName)
}
inline void TAllianceSimpleInfo::set_bannername(const char* value, size_t size) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TAllianceSimpleInfo.BannerName)
}
inline ::std::string* TAllianceSimpleInfo::mutable_bannername() {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TAllianceSimpleInfo.BannerName)
  return bannername_;
}
inline ::std::string* TAllianceSimpleInfo::release_bannername() {
  clear_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bannername_;
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TAllianceSimpleInfo::set_allocated_bannername(::std::string* bannername) {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (bannername) {
    set_has_bannername();
    bannername_ = bannername;
  } else {
    clear_has_bannername();
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAllianceSimpleInfo.BannerName)
}

// optional uint32 BannerBase = 4;
inline bool TAllianceSimpleInfo::has_bannerbase() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAllianceSimpleInfo::set_has_bannerbase() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAllianceSimpleInfo::clear_has_bannerbase() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAllianceSimpleInfo::clear_bannerbase() {
  bannerbase_ = 0u;
  clear_has_bannerbase();
}
inline ::google::protobuf::uint32 TAllianceSimpleInfo::bannerbase() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceSimpleInfo.BannerBase)
  return bannerbase_;
}
inline void TAllianceSimpleInfo::set_bannerbase(::google::protobuf::uint32 value) {
  set_has_bannerbase();
  bannerbase_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceSimpleInfo.BannerBase)
}

// optional uint32 BannerFigure = 5;
inline bool TAllianceSimpleInfo::has_bannerfigure() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TAllianceSimpleInfo::set_has_bannerfigure() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TAllianceSimpleInfo::clear_has_bannerfigure() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TAllianceSimpleInfo::clear_bannerfigure() {
  bannerfigure_ = 0u;
  clear_has_bannerfigure();
}
inline ::google::protobuf::uint32 TAllianceSimpleInfo::bannerfigure() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceSimpleInfo.BannerFigure)
  return bannerfigure_;
}
inline void TAllianceSimpleInfo::set_bannerfigure(::google::protobuf::uint32 value) {
  set_has_bannerfigure();
  bannerfigure_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceSimpleInfo.BannerFigure)
}

// optional uint32 Level = 6;
inline bool TAllianceSimpleInfo::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TAllianceSimpleInfo::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TAllianceSimpleInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TAllianceSimpleInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TAllianceSimpleInfo::level() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceSimpleInfo.Level)
  return level_;
}
inline void TAllianceSimpleInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceSimpleInfo.Level)
}

// optional uint32 Exp = 7;
inline bool TAllianceSimpleInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TAllianceSimpleInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TAllianceSimpleInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TAllianceSimpleInfo::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 TAllianceSimpleInfo::exp() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceSimpleInfo.Exp)
  return exp_;
}
inline void TAllianceSimpleInfo::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceSimpleInfo.Exp)
}

// optional uint32 GuildMemberNum = 8;
inline bool TAllianceSimpleInfo::has_guildmembernum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TAllianceSimpleInfo::set_has_guildmembernum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TAllianceSimpleInfo::clear_has_guildmembernum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TAllianceSimpleInfo::clear_guildmembernum() {
  guildmembernum_ = 0u;
  clear_has_guildmembernum();
}
inline ::google::protobuf::uint32 TAllianceSimpleInfo::guildmembernum() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceSimpleInfo.GuildMemberNum)
  return guildmembernum_;
}
inline void TAllianceSimpleInfo::set_guildmembernum(::google::protobuf::uint32 value) {
  set_has_guildmembernum();
  guildmembernum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceSimpleInfo.GuildMemberNum)
}

// optional uint32 GuildUserNum = 9;
inline bool TAllianceSimpleInfo::has_guildusernum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TAllianceSimpleInfo::set_has_guildusernum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TAllianceSimpleInfo::clear_has_guildusernum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TAllianceSimpleInfo::clear_guildusernum() {
  guildusernum_ = 0u;
  clear_has_guildusernum();
}
inline ::google::protobuf::uint32 TAllianceSimpleInfo::guildusernum() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceSimpleInfo.GuildUserNum)
  return guildusernum_;
}
inline void TAllianceSimpleInfo::set_guildusernum(::google::protobuf::uint32 value) {
  set_has_guildusernum();
  guildusernum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceSimpleInfo.GuildUserNum)
}

// optional .pb.EReviewMode ReviewMode = 10;
inline bool TAllianceSimpleInfo::has_reviewmode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TAllianceSimpleInfo::set_has_reviewmode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TAllianceSimpleInfo::clear_has_reviewmode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TAllianceSimpleInfo::clear_reviewmode() {
  reviewmode_ = 0;
  clear_has_reviewmode();
}
inline ::pb::EReviewMode TAllianceSimpleInfo::reviewmode() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceSimpleInfo.ReviewMode)
  return static_cast< ::pb::EReviewMode >(reviewmode_);
}
inline void TAllianceSimpleInfo::set_reviewmode(::pb::EReviewMode value) {
  assert(::pb::EReviewMode_IsValid(value));
  set_has_reviewmode();
  reviewmode_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceSimpleInfo.ReviewMode)
}

// optional uint32 GuildLvLimit = 11;
inline bool TAllianceSimpleInfo::has_guildlvlimit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TAllianceSimpleInfo::set_has_guildlvlimit() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TAllianceSimpleInfo::clear_has_guildlvlimit() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TAllianceSimpleInfo::clear_guildlvlimit() {
  guildlvlimit_ = 0u;
  clear_has_guildlvlimit();
}
inline ::google::protobuf::uint32 TAllianceSimpleInfo::guildlvlimit() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceSimpleInfo.GuildLvLimit)
  return guildlvlimit_;
}
inline void TAllianceSimpleInfo::set_guildlvlimit(::google::protobuf::uint32 value) {
  set_has_guildlvlimit();
  guildlvlimit_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceSimpleInfo.GuildLvLimit)
}

// optional string Summary = 12;
inline bool TAllianceSimpleInfo::has_summary() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TAllianceSimpleInfo::set_has_summary() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TAllianceSimpleInfo::clear_has_summary() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TAllianceSimpleInfo::clear_summary() {
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_->clear();
  }
  clear_has_summary();
}
inline const ::std::string& TAllianceSimpleInfo::summary() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceSimpleInfo.Summary)
  return *summary_;
}
inline void TAllianceSimpleInfo::set_summary(const ::std::string& value) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  summary_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TAllianceSimpleInfo.Summary)
}
inline void TAllianceSimpleInfo::set_summary(const char* value) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  summary_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TAllianceSimpleInfo.Summary)
}
inline void TAllianceSimpleInfo::set_summary(const char* value, size_t size) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  summary_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TAllianceSimpleInfo.Summary)
}
inline ::std::string* TAllianceSimpleInfo::mutable_summary() {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TAllianceSimpleInfo.Summary)
  return summary_;
}
inline ::std::string* TAllianceSimpleInfo::release_summary() {
  clear_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = summary_;
    summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TAllianceSimpleInfo::set_allocated_summary(::std::string* summary) {
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete summary_;
  }
  if (summary) {
    set_has_summary();
    summary_ = summary;
  } else {
    clear_has_summary();
    summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAllianceSimpleInfo.Summary)
}

// optional string QQ = 13;
inline bool TAllianceSimpleInfo::has_qq() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TAllianceSimpleInfo::set_has_qq() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TAllianceSimpleInfo::clear_has_qq() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TAllianceSimpleInfo::clear_qq() {
  if (qq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qq_->clear();
  }
  clear_has_qq();
}
inline const ::std::string& TAllianceSimpleInfo::qq() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceSimpleInfo.QQ)
  return *qq_;
}
inline void TAllianceSimpleInfo::set_qq(const ::std::string& value) {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qq_ = new ::std::string;
  }
  qq_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TAllianceSimpleInfo.QQ)
}
inline void TAllianceSimpleInfo::set_qq(const char* value) {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qq_ = new ::std::string;
  }
  qq_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TAllianceSimpleInfo.QQ)
}
inline void TAllianceSimpleInfo::set_qq(const char* value, size_t size) {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qq_ = new ::std::string;
  }
  qq_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TAllianceSimpleInfo.QQ)
}
inline ::std::string* TAllianceSimpleInfo::mutable_qq() {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qq_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TAllianceSimpleInfo.QQ)
  return qq_;
}
inline ::std::string* TAllianceSimpleInfo::release_qq() {
  clear_has_qq();
  if (qq_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = qq_;
    qq_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TAllianceSimpleInfo::set_allocated_qq(::std::string* qq) {
  if (qq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qq_;
  }
  if (qq) {
    set_has_qq();
    qq_ = qq;
  } else {
    clear_has_qq();
    qq_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAllianceSimpleInfo.QQ)
}

// optional uint64 CreateTime = 14;
inline bool TAllianceSimpleInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TAllianceSimpleInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TAllianceSimpleInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TAllianceSimpleInfo::clear_createtime() {
  createtime_ = GOOGLE_ULONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::uint64 TAllianceSimpleInfo::createtime() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceSimpleInfo.CreateTime)
  return createtime_;
}
inline void TAllianceSimpleInfo::set_createtime(::google::protobuf::uint64 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceSimpleInfo.CreateTime)
}

// optional uint64 TotalFightForce = 15;
inline bool TAllianceSimpleInfo::has_totalfightforce() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TAllianceSimpleInfo::set_has_totalfightforce() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TAllianceSimpleInfo::clear_has_totalfightforce() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TAllianceSimpleInfo::clear_totalfightforce() {
  totalfightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_totalfightforce();
}
inline ::google::protobuf::uint64 TAllianceSimpleInfo::totalfightforce() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceSimpleInfo.TotalFightForce)
  return totalfightforce_;
}
inline void TAllianceSimpleInfo::set_totalfightforce(::google::protobuf::uint64 value) {
  set_has_totalfightforce();
  totalfightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceSimpleInfo.TotalFightForce)
}

// optional .pb.TUserSimpleInfo LeaderUserInfo = 16;
inline bool TAllianceSimpleInfo::has_leaderuserinfo() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TAllianceSimpleInfo::set_has_leaderuserinfo() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TAllianceSimpleInfo::clear_has_leaderuserinfo() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TAllianceSimpleInfo::clear_leaderuserinfo() {
  if (leaderuserinfo_ != NULL) leaderuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_leaderuserinfo();
}
inline const ::pb::TUserSimpleInfo& TAllianceSimpleInfo::leaderuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceSimpleInfo.LeaderUserInfo)
  return leaderuserinfo_ != NULL ? *leaderuserinfo_ : *default_instance_->leaderuserinfo_;
}
inline ::pb::TUserSimpleInfo* TAllianceSimpleInfo::mutable_leaderuserinfo() {
  set_has_leaderuserinfo();
  if (leaderuserinfo_ == NULL) leaderuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TAllianceSimpleInfo.LeaderUserInfo)
  return leaderuserinfo_;
}
inline ::pb::TUserSimpleInfo* TAllianceSimpleInfo::release_leaderuserinfo() {
  clear_has_leaderuserinfo();
  ::pb::TUserSimpleInfo* temp = leaderuserinfo_;
  leaderuserinfo_ = NULL;
  return temp;
}
inline void TAllianceSimpleInfo::set_allocated_leaderuserinfo(::pb::TUserSimpleInfo* leaderuserinfo) {
  delete leaderuserinfo_;
  leaderuserinfo_ = leaderuserinfo;
  if (leaderuserinfo) {
    set_has_leaderuserinfo();
  } else {
    clear_has_leaderuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAllianceSimpleInfo.LeaderUserInfo)
}

// repeated .pb.TAllianceGuildMemberInfo ArrGuildMember = 17;
inline int TAllianceSimpleInfo::arrguildmember_size() const {
  return arrguildmember_.size();
}
inline void TAllianceSimpleInfo::clear_arrguildmember() {
  arrguildmember_.Clear();
}
inline const ::pb::TAllianceGuildMemberInfo& TAllianceSimpleInfo::arrguildmember(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAllianceSimpleInfo.ArrGuildMember)
  return arrguildmember_.Get(index);
}
inline ::pb::TAllianceGuildMemberInfo* TAllianceSimpleInfo::mutable_arrguildmember(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAllianceSimpleInfo.ArrGuildMember)
  return arrguildmember_.Mutable(index);
}
inline ::pb::TAllianceGuildMemberInfo* TAllianceSimpleInfo::add_arrguildmember() {
  // @@protoc_insertion_point(field_add:pb.TAllianceSimpleInfo.ArrGuildMember)
  return arrguildmember_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceGuildMemberInfo >&
TAllianceSimpleInfo::arrguildmember() const {
  // @@protoc_insertion_point(field_list:pb.TAllianceSimpleInfo.ArrGuildMember)
  return arrguildmember_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceGuildMemberInfo >*
TAllianceSimpleInfo::mutable_arrguildmember() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAllianceSimpleInfo.ArrGuildMember)
  return &arrguildmember_;
}

// optional uint32 AddMemberNum = 18;
inline bool TAllianceSimpleInfo::has_addmembernum() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TAllianceSimpleInfo::set_has_addmembernum() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TAllianceSimpleInfo::clear_has_addmembernum() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TAllianceSimpleInfo::clear_addmembernum() {
  addmembernum_ = 0u;
  clear_has_addmembernum();
}
inline ::google::protobuf::uint32 TAllianceSimpleInfo::addmembernum() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceSimpleInfo.AddMemberNum)
  return addmembernum_;
}
inline void TAllianceSimpleInfo::set_addmembernum(::google::protobuf::uint32 value) {
  set_has_addmembernum();
  addmembernum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceSimpleInfo.AddMemberNum)
}

// -------------------------------------------------------------------

// TAllianceSimpleInfoWithApplyStatus

// optional .pb.TAllianceSimpleInfo AllianceSimpleInfo = 1;
inline bool TAllianceSimpleInfoWithApplyStatus::has_alliancesimpleinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAllianceSimpleInfoWithApplyStatus::set_has_alliancesimpleinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAllianceSimpleInfoWithApplyStatus::clear_has_alliancesimpleinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAllianceSimpleInfoWithApplyStatus::clear_alliancesimpleinfo() {
  if (alliancesimpleinfo_ != NULL) alliancesimpleinfo_->::pb::TAllianceSimpleInfo::Clear();
  clear_has_alliancesimpleinfo();
}
inline const ::pb::TAllianceSimpleInfo& TAllianceSimpleInfoWithApplyStatus::alliancesimpleinfo() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceSimpleInfoWithApplyStatus.AllianceSimpleInfo)
  return alliancesimpleinfo_ != NULL ? *alliancesimpleinfo_ : *default_instance_->alliancesimpleinfo_;
}
inline ::pb::TAllianceSimpleInfo* TAllianceSimpleInfoWithApplyStatus::mutable_alliancesimpleinfo() {
  set_has_alliancesimpleinfo();
  if (alliancesimpleinfo_ == NULL) alliancesimpleinfo_ = new ::pb::TAllianceSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TAllianceSimpleInfoWithApplyStatus.AllianceSimpleInfo)
  return alliancesimpleinfo_;
}
inline ::pb::TAllianceSimpleInfo* TAllianceSimpleInfoWithApplyStatus::release_alliancesimpleinfo() {
  clear_has_alliancesimpleinfo();
  ::pb::TAllianceSimpleInfo* temp = alliancesimpleinfo_;
  alliancesimpleinfo_ = NULL;
  return temp;
}
inline void TAllianceSimpleInfoWithApplyStatus::set_allocated_alliancesimpleinfo(::pb::TAllianceSimpleInfo* alliancesimpleinfo) {
  delete alliancesimpleinfo_;
  alliancesimpleinfo_ = alliancesimpleinfo;
  if (alliancesimpleinfo) {
    set_has_alliancesimpleinfo();
  } else {
    clear_has_alliancesimpleinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAllianceSimpleInfoWithApplyStatus.AllianceSimpleInfo)
}

// optional bool Apply = 2;
inline bool TAllianceSimpleInfoWithApplyStatus::has_apply() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAllianceSimpleInfoWithApplyStatus::set_has_apply() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAllianceSimpleInfoWithApplyStatus::clear_has_apply() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAllianceSimpleInfoWithApplyStatus::clear_apply() {
  apply_ = false;
  clear_has_apply();
}
inline bool TAllianceSimpleInfoWithApplyStatus::apply() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceSimpleInfoWithApplyStatus.Apply)
  return apply_;
}
inline void TAllianceSimpleInfoWithApplyStatus::set_apply(bool value) {
  set_has_apply();
  apply_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceSimpleInfoWithApplyStatus.Apply)
}

// -------------------------------------------------------------------

// TAllianceVoteInfo

// optional uint64 VoteId = 1;
inline bool TAllianceVoteInfo::has_voteid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAllianceVoteInfo::set_has_voteid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAllianceVoteInfo::clear_has_voteid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAllianceVoteInfo::clear_voteid() {
  voteid_ = GOOGLE_ULONGLONG(0);
  clear_has_voteid();
}
inline ::google::protobuf::uint64 TAllianceVoteInfo::voteid() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceVoteInfo.VoteId)
  return voteid_;
}
inline void TAllianceVoteInfo::set_voteid(::google::protobuf::uint64 value) {
  set_has_voteid();
  voteid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceVoteInfo.VoteId)
}

// optional .pb.TUserSimpleInfo SponsorUserInfo = 2;
inline bool TAllianceVoteInfo::has_sponsoruserinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAllianceVoteInfo::set_has_sponsoruserinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAllianceVoteInfo::clear_has_sponsoruserinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAllianceVoteInfo::clear_sponsoruserinfo() {
  if (sponsoruserinfo_ != NULL) sponsoruserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_sponsoruserinfo();
}
inline const ::pb::TUserSimpleInfo& TAllianceVoteInfo::sponsoruserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceVoteInfo.SponsorUserInfo)
  return sponsoruserinfo_ != NULL ? *sponsoruserinfo_ : *default_instance_->sponsoruserinfo_;
}
inline ::pb::TUserSimpleInfo* TAllianceVoteInfo::mutable_sponsoruserinfo() {
  set_has_sponsoruserinfo();
  if (sponsoruserinfo_ == NULL) sponsoruserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TAllianceVoteInfo.SponsorUserInfo)
  return sponsoruserinfo_;
}
inline ::pb::TUserSimpleInfo* TAllianceVoteInfo::release_sponsoruserinfo() {
  clear_has_sponsoruserinfo();
  ::pb::TUserSimpleInfo* temp = sponsoruserinfo_;
  sponsoruserinfo_ = NULL;
  return temp;
}
inline void TAllianceVoteInfo::set_allocated_sponsoruserinfo(::pb::TUserSimpleInfo* sponsoruserinfo) {
  delete sponsoruserinfo_;
  sponsoruserinfo_ = sponsoruserinfo;
  if (sponsoruserinfo) {
    set_has_sponsoruserinfo();
  } else {
    clear_has_sponsoruserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAllianceVoteInfo.SponsorUserInfo)
}

// optional uint64 StartTime = 3;
inline bool TAllianceVoteInfo::has_starttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAllianceVoteInfo::set_has_starttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAllianceVoteInfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAllianceVoteInfo::clear_starttime() {
  starttime_ = GOOGLE_ULONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::uint64 TAllianceVoteInfo::starttime() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceVoteInfo.StartTime)
  return starttime_;
}
inline void TAllianceVoteInfo::set_starttime(::google::protobuf::uint64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceVoteInfo.StartTime)
}

// optional .pb.EAllianceVoteType VoteType = 4;
inline bool TAllianceVoteInfo::has_votetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAllianceVoteInfo::set_has_votetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAllianceVoteInfo::clear_has_votetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAllianceVoteInfo::clear_votetype() {
  votetype_ = 1;
  clear_has_votetype();
}
inline ::pb::EAllianceVoteType TAllianceVoteInfo::votetype() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceVoteInfo.VoteType)
  return static_cast< ::pb::EAllianceVoteType >(votetype_);
}
inline void TAllianceVoteInfo::set_votetype(::pb::EAllianceVoteType value) {
  assert(::pb::EAllianceVoteType_IsValid(value));
  set_has_votetype();
  votetype_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceVoteInfo.VoteType)
}

// optional .pb.TUserSimpleInfo AimUserInfo = 5;
inline bool TAllianceVoteInfo::has_aimuserinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TAllianceVoteInfo::set_has_aimuserinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TAllianceVoteInfo::clear_has_aimuserinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TAllianceVoteInfo::clear_aimuserinfo() {
  if (aimuserinfo_ != NULL) aimuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_aimuserinfo();
}
inline const ::pb::TUserSimpleInfo& TAllianceVoteInfo::aimuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceVoteInfo.AimUserInfo)
  return aimuserinfo_ != NULL ? *aimuserinfo_ : *default_instance_->aimuserinfo_;
}
inline ::pb::TUserSimpleInfo* TAllianceVoteInfo::mutable_aimuserinfo() {
  set_has_aimuserinfo();
  if (aimuserinfo_ == NULL) aimuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TAllianceVoteInfo.AimUserInfo)
  return aimuserinfo_;
}
inline ::pb::TUserSimpleInfo* TAllianceVoteInfo::release_aimuserinfo() {
  clear_has_aimuserinfo();
  ::pb::TUserSimpleInfo* temp = aimuserinfo_;
  aimuserinfo_ = NULL;
  return temp;
}
inline void TAllianceVoteInfo::set_allocated_aimuserinfo(::pb::TUserSimpleInfo* aimuserinfo) {
  delete aimuserinfo_;
  aimuserinfo_ = aimuserinfo;
  if (aimuserinfo) {
    set_has_aimuserinfo();
  } else {
    clear_has_aimuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAllianceVoteInfo.AimUserInfo)
}

// optional uint32 AgreeNum = 6;
inline bool TAllianceVoteInfo::has_agreenum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TAllianceVoteInfo::set_has_agreenum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TAllianceVoteInfo::clear_has_agreenum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TAllianceVoteInfo::clear_agreenum() {
  agreenum_ = 0u;
  clear_has_agreenum();
}
inline ::google::protobuf::uint32 TAllianceVoteInfo::agreenum() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceVoteInfo.AgreeNum)
  return agreenum_;
}
inline void TAllianceVoteInfo::set_agreenum(::google::protobuf::uint32 value) {
  set_has_agreenum();
  agreenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceVoteInfo.AgreeNum)
}

// optional uint32 AgainstNum = 7;
inline bool TAllianceVoteInfo::has_againstnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TAllianceVoteInfo::set_has_againstnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TAllianceVoteInfo::clear_has_againstnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TAllianceVoteInfo::clear_againstnum() {
  againstnum_ = 0u;
  clear_has_againstnum();
}
inline ::google::protobuf::uint32 TAllianceVoteInfo::againstnum() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceVoteInfo.AgainstNum)
  return againstnum_;
}
inline void TAllianceVoteInfo::set_againstnum(::google::protobuf::uint32 value) {
  set_has_againstnum();
  againstnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceVoteInfo.AgainstNum)
}

// optional .pb.EAllianceResult Result = 8;
inline bool TAllianceVoteInfo::has_result() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TAllianceVoteInfo::set_has_result() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TAllianceVoteInfo::clear_has_result() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TAllianceVoteInfo::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::pb::EAllianceResult TAllianceVoteInfo::result() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceVoteInfo.Result)
  return static_cast< ::pb::EAllianceResult >(result_);
}
inline void TAllianceVoteInfo::set_result(::pb::EAllianceResult value) {
  assert(::pb::EAllianceResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceVoteInfo.Result)
}

// optional uint64 CloseTime = 9;
inline bool TAllianceVoteInfo::has_closetime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TAllianceVoteInfo::set_has_closetime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TAllianceVoteInfo::clear_has_closetime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TAllianceVoteInfo::clear_closetime() {
  closetime_ = GOOGLE_ULONGLONG(0);
  clear_has_closetime();
}
inline ::google::protobuf::uint64 TAllianceVoteInfo::closetime() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceVoteInfo.CloseTime)
  return closetime_;
}
inline void TAllianceVoteInfo::set_closetime(::google::protobuf::uint64 value) {
  set_has_closetime();
  closetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceVoteInfo.CloseTime)
}

// optional .pb.EAllianceVoteResult SelfVote = 10;
inline bool TAllianceVoteInfo::has_selfvote() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TAllianceVoteInfo::set_has_selfvote() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TAllianceVoteInfo::clear_has_selfvote() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TAllianceVoteInfo::clear_selfvote() {
  selfvote_ = 1;
  clear_has_selfvote();
}
inline ::pb::EAllianceVoteResult TAllianceVoteInfo::selfvote() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceVoteInfo.SelfVote)
  return static_cast< ::pb::EAllianceVoteResult >(selfvote_);
}
inline void TAllianceVoteInfo::set_selfvote(::pb::EAllianceVoteResult value) {
  assert(::pb::EAllianceVoteResult_IsValid(value));
  set_has_selfvote();
  selfvote_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceVoteInfo.SelfVote)
}

// -------------------------------------------------------------------

// TAllianceScience

// optional uint32 Id = 1;
inline bool TAllianceScience::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAllianceScience::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAllianceScience::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAllianceScience::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TAllianceScience::id() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceScience.Id)
  return id_;
}
inline void TAllianceScience::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceScience.Id)
}

// optional uint32 Level = 2;
inline bool TAllianceScience::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAllianceScience::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAllianceScience::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAllianceScience::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TAllianceScience::level() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceScience.Level)
  return level_;
}
inline void TAllianceScience::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceScience.Level)
}

// -------------------------------------------------------------------

// TAllianceDetailInfo

// optional .pb.TAllianceSimpleInfo AllianceSimpleInfo = 1;
inline bool TAllianceDetailInfo::has_alliancesimpleinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAllianceDetailInfo::set_has_alliancesimpleinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAllianceDetailInfo::clear_has_alliancesimpleinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAllianceDetailInfo::clear_alliancesimpleinfo() {
  if (alliancesimpleinfo_ != NULL) alliancesimpleinfo_->::pb::TAllianceSimpleInfo::Clear();
  clear_has_alliancesimpleinfo();
}
inline const ::pb::TAllianceSimpleInfo& TAllianceDetailInfo::alliancesimpleinfo() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceDetailInfo.AllianceSimpleInfo)
  return alliancesimpleinfo_ != NULL ? *alliancesimpleinfo_ : *default_instance_->alliancesimpleinfo_;
}
inline ::pb::TAllianceSimpleInfo* TAllianceDetailInfo::mutable_alliancesimpleinfo() {
  set_has_alliancesimpleinfo();
  if (alliancesimpleinfo_ == NULL) alliancesimpleinfo_ = new ::pb::TAllianceSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TAllianceDetailInfo.AllianceSimpleInfo)
  return alliancesimpleinfo_;
}
inline ::pb::TAllianceSimpleInfo* TAllianceDetailInfo::release_alliancesimpleinfo() {
  clear_has_alliancesimpleinfo();
  ::pb::TAllianceSimpleInfo* temp = alliancesimpleinfo_;
  alliancesimpleinfo_ = NULL;
  return temp;
}
inline void TAllianceDetailInfo::set_allocated_alliancesimpleinfo(::pb::TAllianceSimpleInfo* alliancesimpleinfo) {
  delete alliancesimpleinfo_;
  alliancesimpleinfo_ = alliancesimpleinfo;
  if (alliancesimpleinfo) {
    set_has_alliancesimpleinfo();
  } else {
    clear_has_alliancesimpleinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAllianceDetailInfo.AllianceSimpleInfo)
}

// optional uint32 WeekStartLv = 2;
inline bool TAllianceDetailInfo::has_weekstartlv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAllianceDetailInfo::set_has_weekstartlv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAllianceDetailInfo::clear_has_weekstartlv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAllianceDetailInfo::clear_weekstartlv() {
  weekstartlv_ = 0u;
  clear_has_weekstartlv();
}
inline ::google::protobuf::uint32 TAllianceDetailInfo::weekstartlv() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceDetailInfo.WeekStartLv)
  return weekstartlv_;
}
inline void TAllianceDetailInfo::set_weekstartlv(::google::protobuf::uint32 value) {
  set_has_weekstartlv();
  weekstartlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceDetailInfo.WeekStartLv)
}

// optional uint64 WeekTaskScore = 3;
inline bool TAllianceDetailInfo::has_weektaskscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAllianceDetailInfo::set_has_weektaskscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAllianceDetailInfo::clear_has_weektaskscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAllianceDetailInfo::clear_weektaskscore() {
  weektaskscore_ = GOOGLE_ULONGLONG(0);
  clear_has_weektaskscore();
}
inline ::google::protobuf::uint64 TAllianceDetailInfo::weektaskscore() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceDetailInfo.WeekTaskScore)
  return weektaskscore_;
}
inline void TAllianceDetailInfo::set_weektaskscore(::google::protobuf::uint64 value) {
  set_has_weektaskscore();
  weektaskscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceDetailInfo.WeekTaskScore)
}

// optional string Notice = 4;
inline bool TAllianceDetailInfo::has_notice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAllianceDetailInfo::set_has_notice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAllianceDetailInfo::clear_has_notice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAllianceDetailInfo::clear_notice() {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& TAllianceDetailInfo::notice() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceDetailInfo.Notice)
  return *notice_;
}
inline void TAllianceDetailInfo::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TAllianceDetailInfo.Notice)
}
inline void TAllianceDetailInfo::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TAllianceDetailInfo.Notice)
}
inline void TAllianceDetailInfo::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TAllianceDetailInfo.Notice)
}
inline ::std::string* TAllianceDetailInfo::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TAllianceDetailInfo.Notice)
  return notice_;
}
inline ::std::string* TAllianceDetailInfo::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TAllianceDetailInfo::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAllianceDetailInfo.Notice)
}

// repeated .pb.TAllianceTip ArrTip = 5;
inline int TAllianceDetailInfo::arrtip_size() const {
  return arrtip_.size();
}
inline void TAllianceDetailInfo::clear_arrtip() {
  arrtip_.Clear();
}
inline const ::pb::TAllianceTip& TAllianceDetailInfo::arrtip(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAllianceDetailInfo.ArrTip)
  return arrtip_.Get(index);
}
inline ::pb::TAllianceTip* TAllianceDetailInfo::mutable_arrtip(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAllianceDetailInfo.ArrTip)
  return arrtip_.Mutable(index);
}
inline ::pb::TAllianceTip* TAllianceDetailInfo::add_arrtip() {
  // @@protoc_insertion_point(field_add:pb.TAllianceDetailInfo.ArrTip)
  return arrtip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceTip >&
TAllianceDetailInfo::arrtip() const {
  // @@protoc_insertion_point(field_list:pb.TAllianceDetailInfo.ArrTip)
  return arrtip_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceTip >*
TAllianceDetailInfo::mutable_arrtip() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAllianceDetailInfo.ArrTip)
  return &arrtip_;
}

// repeated .pb.TUserSimpleInfo ArrSignGuildLeaderUserInfo = 6;
inline int TAllianceDetailInfo::arrsignguildleaderuserinfo_size() const {
  return arrsignguildleaderuserinfo_.size();
}
inline void TAllianceDetailInfo::clear_arrsignguildleaderuserinfo() {
  arrsignguildleaderuserinfo_.Clear();
}
inline const ::pb::TUserSimpleInfo& TAllianceDetailInfo::arrsignguildleaderuserinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAllianceDetailInfo.ArrSignGuildLeaderUserInfo)
  return arrsignguildleaderuserinfo_.Get(index);
}
inline ::pb::TUserSimpleInfo* TAllianceDetailInfo::mutable_arrsignguildleaderuserinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAllianceDetailInfo.ArrSignGuildLeaderUserInfo)
  return arrsignguildleaderuserinfo_.Mutable(index);
}
inline ::pb::TUserSimpleInfo* TAllianceDetailInfo::add_arrsignguildleaderuserinfo() {
  // @@protoc_insertion_point(field_add:pb.TAllianceDetailInfo.ArrSignGuildLeaderUserInfo)
  return arrsignguildleaderuserinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
TAllianceDetailInfo::arrsignguildleaderuserinfo() const {
  // @@protoc_insertion_point(field_list:pb.TAllianceDetailInfo.ArrSignGuildLeaderUserInfo)
  return arrsignguildleaderuserinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
TAllianceDetailInfo::mutable_arrsignguildleaderuserinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAllianceDetailInfo.ArrSignGuildLeaderUserInfo)
  return &arrsignguildleaderuserinfo_;
}

// repeated .pb.TAllianceVoteInfo ArrVoteInfo = 7;
inline int TAllianceDetailInfo::arrvoteinfo_size() const {
  return arrvoteinfo_.size();
}
inline void TAllianceDetailInfo::clear_arrvoteinfo() {
  arrvoteinfo_.Clear();
}
inline const ::pb::TAllianceVoteInfo& TAllianceDetailInfo::arrvoteinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAllianceDetailInfo.ArrVoteInfo)
  return arrvoteinfo_.Get(index);
}
inline ::pb::TAllianceVoteInfo* TAllianceDetailInfo::mutable_arrvoteinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAllianceDetailInfo.ArrVoteInfo)
  return arrvoteinfo_.Mutable(index);
}
inline ::pb::TAllianceVoteInfo* TAllianceDetailInfo::add_arrvoteinfo() {
  // @@protoc_insertion_point(field_add:pb.TAllianceDetailInfo.ArrVoteInfo)
  return arrvoteinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceVoteInfo >&
TAllianceDetailInfo::arrvoteinfo() const {
  // @@protoc_insertion_point(field_list:pb.TAllianceDetailInfo.ArrVoteInfo)
  return arrvoteinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceVoteInfo >*
TAllianceDetailInfo::mutable_arrvoteinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAllianceDetailInfo.ArrVoteInfo)
  return &arrvoteinfo_;
}

// optional uint32 ApplyNum = 8;
inline bool TAllianceDetailInfo::has_applynum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TAllianceDetailInfo::set_has_applynum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TAllianceDetailInfo::clear_has_applynum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TAllianceDetailInfo::clear_applynum() {
  applynum_ = 0u;
  clear_has_applynum();
}
inline ::google::protobuf::uint32 TAllianceDetailInfo::applynum() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceDetailInfo.ApplyNum)
  return applynum_;
}
inline void TAllianceDetailInfo::set_applynum(::google::protobuf::uint32 value) {
  set_has_applynum();
  applynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceDetailInfo.ApplyNum)
}

// optional uint64 LastImpeachTime = 9;
inline bool TAllianceDetailInfo::has_lastimpeachtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TAllianceDetailInfo::set_has_lastimpeachtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TAllianceDetailInfo::clear_has_lastimpeachtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TAllianceDetailInfo::clear_lastimpeachtime() {
  lastimpeachtime_ = GOOGLE_ULONGLONG(0);
  clear_has_lastimpeachtime();
}
inline ::google::protobuf::uint64 TAllianceDetailInfo::lastimpeachtime() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceDetailInfo.LastImpeachTime)
  return lastimpeachtime_;
}
inline void TAllianceDetailInfo::set_lastimpeachtime(::google::protobuf::uint64 value) {
  set_has_lastimpeachtime();
  lastimpeachtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceDetailInfo.LastImpeachTime)
}

// optional uint64 MaterialNum = 10;
inline bool TAllianceDetailInfo::has_materialnum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TAllianceDetailInfo::set_has_materialnum() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TAllianceDetailInfo::clear_has_materialnum() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TAllianceDetailInfo::clear_materialnum() {
  materialnum_ = GOOGLE_ULONGLONG(0);
  clear_has_materialnum();
}
inline ::google::protobuf::uint64 TAllianceDetailInfo::materialnum() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceDetailInfo.MaterialNum)
  return materialnum_;
}
inline void TAllianceDetailInfo::set_materialnum(::google::protobuf::uint64 value) {
  set_has_materialnum();
  materialnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceDetailInfo.MaterialNum)
}

// optional uint32 DayDonateNum = 11;
inline bool TAllianceDetailInfo::has_daydonatenum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TAllianceDetailInfo::set_has_daydonatenum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TAllianceDetailInfo::clear_has_daydonatenum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TAllianceDetailInfo::clear_daydonatenum() {
  daydonatenum_ = 0u;
  clear_has_daydonatenum();
}
inline ::google::protobuf::uint32 TAllianceDetailInfo::daydonatenum() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceDetailInfo.DayDonateNum)
  return daydonatenum_;
}
inline void TAllianceDetailInfo::set_daydonatenum(::google::protobuf::uint32 value) {
  set_has_daydonatenum();
  daydonatenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceDetailInfo.DayDonateNum)
}

// repeated .pb.TAllianceScience ArrScience = 12;
inline int TAllianceDetailInfo::arrscience_size() const {
  return arrscience_.size();
}
inline void TAllianceDetailInfo::clear_arrscience() {
  arrscience_.Clear();
}
inline const ::pb::TAllianceScience& TAllianceDetailInfo::arrscience(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAllianceDetailInfo.ArrScience)
  return arrscience_.Get(index);
}
inline ::pb::TAllianceScience* TAllianceDetailInfo::mutable_arrscience(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAllianceDetailInfo.ArrScience)
  return arrscience_.Mutable(index);
}
inline ::pb::TAllianceScience* TAllianceDetailInfo::add_arrscience() {
  // @@protoc_insertion_point(field_add:pb.TAllianceDetailInfo.ArrScience)
  return arrscience_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceScience >&
TAllianceDetailInfo::arrscience() const {
  // @@protoc_insertion_point(field_list:pb.TAllianceDetailInfo.ArrScience)
  return arrscience_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceScience >*
TAllianceDetailInfo::mutable_arrscience() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAllianceDetailInfo.ArrScience)
  return &arrscience_;
}

// -------------------------------------------------------------------

// TAllianceGuildUserMemberInfo

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TAllianceGuildUserMemberInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAllianceGuildUserMemberInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAllianceGuildUserMemberInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAllianceGuildUserMemberInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TAllianceGuildUserMemberInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceGuildUserMemberInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TAllianceGuildUserMemberInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TAllianceGuildUserMemberInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TAllianceGuildUserMemberInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TAllianceGuildUserMemberInfo::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAllianceGuildUserMemberInfo.UserInfo)
}

// optional .pb.EGuildPost RPGPost = 2;
inline bool TAllianceGuildUserMemberInfo::has_rpgpost() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAllianceGuildUserMemberInfo::set_has_rpgpost() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAllianceGuildUserMemberInfo::clear_has_rpgpost() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAllianceGuildUserMemberInfo::clear_rpgpost() {
  rpgpost_ = 0;
  clear_has_rpgpost();
}
inline ::pb::EGuildPost TAllianceGuildUserMemberInfo::rpgpost() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceGuildUserMemberInfo.RPGPost)
  return static_cast< ::pb::EGuildPost >(rpgpost_);
}
inline void TAllianceGuildUserMemberInfo::set_rpgpost(::pb::EGuildPost value) {
  assert(::pb::EGuildPost_IsValid(value));
  set_has_rpgpost();
  rpgpost_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceGuildUserMemberInfo.RPGPost)
}

// optional uint64 TotalDonate = 3;
inline bool TAllianceGuildUserMemberInfo::has_totaldonate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAllianceGuildUserMemberInfo::set_has_totaldonate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAllianceGuildUserMemberInfo::clear_has_totaldonate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAllianceGuildUserMemberInfo::clear_totaldonate() {
  totaldonate_ = GOOGLE_ULONGLONG(0);
  clear_has_totaldonate();
}
inline ::google::protobuf::uint64 TAllianceGuildUserMemberInfo::totaldonate() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceGuildUserMemberInfo.TotalDonate)
  return totaldonate_;
}
inline void TAllianceGuildUserMemberInfo::set_totaldonate(::google::protobuf::uint64 value) {
  set_has_totaldonate();
  totaldonate_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceGuildUserMemberInfo.TotalDonate)
}

// optional uint64 WeekTaskScore = 4;
inline bool TAllianceGuildUserMemberInfo::has_weektaskscore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAllianceGuildUserMemberInfo::set_has_weektaskscore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAllianceGuildUserMemberInfo::clear_has_weektaskscore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAllianceGuildUserMemberInfo::clear_weektaskscore() {
  weektaskscore_ = GOOGLE_ULONGLONG(0);
  clear_has_weektaskscore();
}
inline ::google::protobuf::uint64 TAllianceGuildUserMemberInfo::weektaskscore() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceGuildUserMemberInfo.WeekTaskScore)
  return weektaskscore_;
}
inline void TAllianceGuildUserMemberInfo::set_weektaskscore(::google::protobuf::uint64 value) {
  set_has_weektaskscore();
  weektaskscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceGuildUserMemberInfo.WeekTaskScore)
}

// optional uint32 DayTaskStatus = 5;
inline bool TAllianceGuildUserMemberInfo::has_daytaskstatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TAllianceGuildUserMemberInfo::set_has_daytaskstatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TAllianceGuildUserMemberInfo::clear_has_daytaskstatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TAllianceGuildUserMemberInfo::clear_daytaskstatus() {
  daytaskstatus_ = 0u;
  clear_has_daytaskstatus();
}
inline ::google::protobuf::uint32 TAllianceGuildUserMemberInfo::daytaskstatus() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceGuildUserMemberInfo.DayTaskStatus)
  return daytaskstatus_;
}
inline void TAllianceGuildUserMemberInfo::set_daytaskstatus(::google::protobuf::uint32 value) {
  set_has_daytaskstatus();
  daytaskstatus_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceGuildUserMemberInfo.DayTaskStatus)
}

// optional uint32 CommitTaskId = 6;
inline bool TAllianceGuildUserMemberInfo::has_committaskid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TAllianceGuildUserMemberInfo::set_has_committaskid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TAllianceGuildUserMemberInfo::clear_has_committaskid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TAllianceGuildUserMemberInfo::clear_committaskid() {
  committaskid_ = 0u;
  clear_has_committaskid();
}
inline ::google::protobuf::uint32 TAllianceGuildUserMemberInfo::committaskid() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceGuildUserMemberInfo.CommitTaskId)
  return committaskid_;
}
inline void TAllianceGuildUserMemberInfo::set_committaskid(::google::protobuf::uint32 value) {
  set_has_committaskid();
  committaskid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceGuildUserMemberInfo.CommitTaskId)
}

// optional uint32 OnlineStatus = 7;
inline bool TAllianceGuildUserMemberInfo::has_onlinestatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TAllianceGuildUserMemberInfo::set_has_onlinestatus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TAllianceGuildUserMemberInfo::clear_has_onlinestatus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TAllianceGuildUserMemberInfo::clear_onlinestatus() {
  onlinestatus_ = 0u;
  clear_has_onlinestatus();
}
inline ::google::protobuf::uint32 TAllianceGuildUserMemberInfo::onlinestatus() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceGuildUserMemberInfo.OnlineStatus)
  return onlinestatus_;
}
inline void TAllianceGuildUserMemberInfo::set_onlinestatus(::google::protobuf::uint32 value) {
  set_has_onlinestatus();
  onlinestatus_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceGuildUserMemberInfo.OnlineStatus)
}

// -------------------------------------------------------------------

// TAllianceGuildMemberInfo

// optional string ServerId = 1;
inline bool TAllianceGuildMemberInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAllianceGuildMemberInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAllianceGuildMemberInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAllianceGuildMemberInfo::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TAllianceGuildMemberInfo::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceGuildMemberInfo.ServerId)
  return *serverid_;
}
inline void TAllianceGuildMemberInfo::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TAllianceGuildMemberInfo.ServerId)
}
inline void TAllianceGuildMemberInfo::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TAllianceGuildMemberInfo.ServerId)
}
inline void TAllianceGuildMemberInfo::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TAllianceGuildMemberInfo.ServerId)
}
inline ::std::string* TAllianceGuildMemberInfo::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TAllianceGuildMemberInfo.ServerId)
  return serverid_;
}
inline ::std::string* TAllianceGuildMemberInfo::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TAllianceGuildMemberInfo::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAllianceGuildMemberInfo.ServerId)
}

// optional uint64 GuildId = 2;
inline bool TAllianceGuildMemberInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAllianceGuildMemberInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAllianceGuildMemberInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAllianceGuildMemberInfo::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TAllianceGuildMemberInfo::guildid() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceGuildMemberInfo.GuildId)
  return guildid_;
}
inline void TAllianceGuildMemberInfo::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceGuildMemberInfo.GuildId)
}

// optional string Name = 3;
inline bool TAllianceGuildMemberInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAllianceGuildMemberInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAllianceGuildMemberInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAllianceGuildMemberInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TAllianceGuildMemberInfo::name() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceGuildMemberInfo.Name)
  return *name_;
}
inline void TAllianceGuildMemberInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TAllianceGuildMemberInfo.Name)
}
inline void TAllianceGuildMemberInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TAllianceGuildMemberInfo.Name)
}
inline void TAllianceGuildMemberInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TAllianceGuildMemberInfo.Name)
}
inline ::std::string* TAllianceGuildMemberInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TAllianceGuildMemberInfo.Name)
  return name_;
}
inline ::std::string* TAllianceGuildMemberInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TAllianceGuildMemberInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAllianceGuildMemberInfo.Name)
}

// optional string BannerName = 4;
inline bool TAllianceGuildMemberInfo::has_bannername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAllianceGuildMemberInfo::set_has_bannername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAllianceGuildMemberInfo::clear_has_bannername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAllianceGuildMemberInfo::clear_bannername() {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_->clear();
  }
  clear_has_bannername();
}
inline const ::std::string& TAllianceGuildMemberInfo::bannername() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceGuildMemberInfo.BannerName)
  return *bannername_;
}
inline void TAllianceGuildMemberInfo::set_bannername(const ::std::string& value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TAllianceGuildMemberInfo.BannerName)
}
inline void TAllianceGuildMemberInfo::set_bannername(const char* value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TAllianceGuildMemberInfo.BannerName)
}
inline void TAllianceGuildMemberInfo::set_bannername(const char* value, size_t size) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TAllianceGuildMemberInfo.BannerName)
}
inline ::std::string* TAllianceGuildMemberInfo::mutable_bannername() {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TAllianceGuildMemberInfo.BannerName)
  return bannername_;
}
inline ::std::string* TAllianceGuildMemberInfo::release_bannername() {
  clear_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bannername_;
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TAllianceGuildMemberInfo::set_allocated_bannername(::std::string* bannername) {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (bannername) {
    set_has_bannername();
    bannername_ = bannername;
  } else {
    clear_has_bannername();
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAllianceGuildMemberInfo.BannerName)
}

// optional uint32 BannerBase = 5;
inline bool TAllianceGuildMemberInfo::has_bannerbase() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TAllianceGuildMemberInfo::set_has_bannerbase() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TAllianceGuildMemberInfo::clear_has_bannerbase() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TAllianceGuildMemberInfo::clear_bannerbase() {
  bannerbase_ = 0u;
  clear_has_bannerbase();
}
inline ::google::protobuf::uint32 TAllianceGuildMemberInfo::bannerbase() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceGuildMemberInfo.BannerBase)
  return bannerbase_;
}
inline void TAllianceGuildMemberInfo::set_bannerbase(::google::protobuf::uint32 value) {
  set_has_bannerbase();
  bannerbase_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceGuildMemberInfo.BannerBase)
}

// optional uint32 Level = 6;
inline bool TAllianceGuildMemberInfo::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TAllianceGuildMemberInfo::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TAllianceGuildMemberInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TAllianceGuildMemberInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TAllianceGuildMemberInfo::level() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceGuildMemberInfo.Level)
  return level_;
}
inline void TAllianceGuildMemberInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceGuildMemberInfo.Level)
}

// optional uint64 FightForce = 7;
inline bool TAllianceGuildMemberInfo::has_fightforce() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TAllianceGuildMemberInfo::set_has_fightforce() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TAllianceGuildMemberInfo::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TAllianceGuildMemberInfo::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TAllianceGuildMemberInfo::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceGuildMemberInfo.FightForce)
  return fightforce_;
}
inline void TAllianceGuildMemberInfo::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceGuildMemberInfo.FightForce)
}

// optional uint32 MemberNum = 8;
inline bool TAllianceGuildMemberInfo::has_membernum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TAllianceGuildMemberInfo::set_has_membernum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TAllianceGuildMemberInfo::clear_has_membernum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TAllianceGuildMemberInfo::clear_membernum() {
  membernum_ = 0u;
  clear_has_membernum();
}
inline ::google::protobuf::uint32 TAllianceGuildMemberInfo::membernum() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceGuildMemberInfo.MemberNum)
  return membernum_;
}
inline void TAllianceGuildMemberInfo::set_membernum(::google::protobuf::uint32 value) {
  set_has_membernum();
  membernum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceGuildMemberInfo.MemberNum)
}

// optional uint64 LeaderUid = 9;
inline bool TAllianceGuildMemberInfo::has_leaderuid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TAllianceGuildMemberInfo::set_has_leaderuid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TAllianceGuildMemberInfo::clear_has_leaderuid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TAllianceGuildMemberInfo::clear_leaderuid() {
  leaderuid_ = GOOGLE_ULONGLONG(0);
  clear_has_leaderuid();
}
inline ::google::protobuf::uint64 TAllianceGuildMemberInfo::leaderuid() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceGuildMemberInfo.LeaderUid)
  return leaderuid_;
}
inline void TAllianceGuildMemberInfo::set_leaderuid(::google::protobuf::uint64 value) {
  set_has_leaderuid();
  leaderuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceGuildMemberInfo.LeaderUid)
}

// optional string LeaderUname = 10;
inline bool TAllianceGuildMemberInfo::has_leaderuname() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TAllianceGuildMemberInfo::set_has_leaderuname() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TAllianceGuildMemberInfo::clear_has_leaderuname() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TAllianceGuildMemberInfo::clear_leaderuname() {
  if (leaderuname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leaderuname_->clear();
  }
  clear_has_leaderuname();
}
inline const ::std::string& TAllianceGuildMemberInfo::leaderuname() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceGuildMemberInfo.LeaderUname)
  return *leaderuname_;
}
inline void TAllianceGuildMemberInfo::set_leaderuname(const ::std::string& value) {
  set_has_leaderuname();
  if (leaderuname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leaderuname_ = new ::std::string;
  }
  leaderuname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TAllianceGuildMemberInfo.LeaderUname)
}
inline void TAllianceGuildMemberInfo::set_leaderuname(const char* value) {
  set_has_leaderuname();
  if (leaderuname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leaderuname_ = new ::std::string;
  }
  leaderuname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TAllianceGuildMemberInfo.LeaderUname)
}
inline void TAllianceGuildMemberInfo::set_leaderuname(const char* value, size_t size) {
  set_has_leaderuname();
  if (leaderuname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leaderuname_ = new ::std::string;
  }
  leaderuname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TAllianceGuildMemberInfo.LeaderUname)
}
inline ::std::string* TAllianceGuildMemberInfo::mutable_leaderuname() {
  set_has_leaderuname();
  if (leaderuname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leaderuname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TAllianceGuildMemberInfo.LeaderUname)
  return leaderuname_;
}
inline ::std::string* TAllianceGuildMemberInfo::release_leaderuname() {
  clear_has_leaderuname();
  if (leaderuname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = leaderuname_;
    leaderuname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TAllianceGuildMemberInfo::set_allocated_leaderuname(::std::string* leaderuname) {
  if (leaderuname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leaderuname_;
  }
  if (leaderuname) {
    set_has_leaderuname();
    leaderuname_ = leaderuname;
  } else {
    clear_has_leaderuname();
    leaderuname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAllianceGuildMemberInfo.LeaderUname)
}

// optional .pb.EAlliancePost Post = 11;
inline bool TAllianceGuildMemberInfo::has_post() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TAllianceGuildMemberInfo::set_has_post() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TAllianceGuildMemberInfo::clear_has_post() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TAllianceGuildMemberInfo::clear_post() {
  post_ = 0;
  clear_has_post();
}
inline ::pb::EAlliancePost TAllianceGuildMemberInfo::post() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceGuildMemberInfo.Post)
  return static_cast< ::pb::EAlliancePost >(post_);
}
inline void TAllianceGuildMemberInfo::set_post(::pb::EAlliancePost value) {
  assert(::pb::EAlliancePost_IsValid(value));
  set_has_post();
  post_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceGuildMemberInfo.Post)
}

// -------------------------------------------------------------------

// TAllianceGuildMemberInfoWithUser

// optional .pb.TAllianceGuildMemberInfo GuildInfo = 1;
inline bool TAllianceGuildMemberInfoWithUser::has_guildinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAllianceGuildMemberInfoWithUser::set_has_guildinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAllianceGuildMemberInfoWithUser::clear_has_guildinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAllianceGuildMemberInfoWithUser::clear_guildinfo() {
  if (guildinfo_ != NULL) guildinfo_->::pb::TAllianceGuildMemberInfo::Clear();
  clear_has_guildinfo();
}
inline const ::pb::TAllianceGuildMemberInfo& TAllianceGuildMemberInfoWithUser::guildinfo() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceGuildMemberInfoWithUser.GuildInfo)
  return guildinfo_ != NULL ? *guildinfo_ : *default_instance_->guildinfo_;
}
inline ::pb::TAllianceGuildMemberInfo* TAllianceGuildMemberInfoWithUser::mutable_guildinfo() {
  set_has_guildinfo();
  if (guildinfo_ == NULL) guildinfo_ = new ::pb::TAllianceGuildMemberInfo;
  // @@protoc_insertion_point(field_mutable:pb.TAllianceGuildMemberInfoWithUser.GuildInfo)
  return guildinfo_;
}
inline ::pb::TAllianceGuildMemberInfo* TAllianceGuildMemberInfoWithUser::release_guildinfo() {
  clear_has_guildinfo();
  ::pb::TAllianceGuildMemberInfo* temp = guildinfo_;
  guildinfo_ = NULL;
  return temp;
}
inline void TAllianceGuildMemberInfoWithUser::set_allocated_guildinfo(::pb::TAllianceGuildMemberInfo* guildinfo) {
  delete guildinfo_;
  guildinfo_ = guildinfo;
  if (guildinfo) {
    set_has_guildinfo();
  } else {
    clear_has_guildinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAllianceGuildMemberInfoWithUser.GuildInfo)
}

// repeated .pb.TAllianceGuildUserMemberInfo ArrUser = 2;
inline int TAllianceGuildMemberInfoWithUser::arruser_size() const {
  return arruser_.size();
}
inline void TAllianceGuildMemberInfoWithUser::clear_arruser() {
  arruser_.Clear();
}
inline const ::pb::TAllianceGuildUserMemberInfo& TAllianceGuildMemberInfoWithUser::arruser(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAllianceGuildMemberInfoWithUser.ArrUser)
  return arruser_.Get(index);
}
inline ::pb::TAllianceGuildUserMemberInfo* TAllianceGuildMemberInfoWithUser::mutable_arruser(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAllianceGuildMemberInfoWithUser.ArrUser)
  return arruser_.Mutable(index);
}
inline ::pb::TAllianceGuildUserMemberInfo* TAllianceGuildMemberInfoWithUser::add_arruser() {
  // @@protoc_insertion_point(field_add:pb.TAllianceGuildMemberInfoWithUser.ArrUser)
  return arruser_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceGuildUserMemberInfo >&
TAllianceGuildMemberInfoWithUser::arruser() const {
  // @@protoc_insertion_point(field_list:pb.TAllianceGuildMemberInfoWithUser.ArrUser)
  return arruser_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceGuildUserMemberInfo >*
TAllianceGuildMemberInfoWithUser::mutable_arruser() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAllianceGuildMemberInfoWithUser.ArrUser)
  return &arruser_;
}

// -------------------------------------------------------------------

// TAllianceApplyGuildInfo

// optional .pb.TUserSimpleInfo LeaderUserInfo = 1;
inline bool TAllianceApplyGuildInfo::has_leaderuserinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAllianceApplyGuildInfo::set_has_leaderuserinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAllianceApplyGuildInfo::clear_has_leaderuserinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAllianceApplyGuildInfo::clear_leaderuserinfo() {
  if (leaderuserinfo_ != NULL) leaderuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_leaderuserinfo();
}
inline const ::pb::TUserSimpleInfo& TAllianceApplyGuildInfo::leaderuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceApplyGuildInfo.LeaderUserInfo)
  return leaderuserinfo_ != NULL ? *leaderuserinfo_ : *default_instance_->leaderuserinfo_;
}
inline ::pb::TUserSimpleInfo* TAllianceApplyGuildInfo::mutable_leaderuserinfo() {
  set_has_leaderuserinfo();
  if (leaderuserinfo_ == NULL) leaderuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TAllianceApplyGuildInfo.LeaderUserInfo)
  return leaderuserinfo_;
}
inline ::pb::TUserSimpleInfo* TAllianceApplyGuildInfo::release_leaderuserinfo() {
  clear_has_leaderuserinfo();
  ::pb::TUserSimpleInfo* temp = leaderuserinfo_;
  leaderuserinfo_ = NULL;
  return temp;
}
inline void TAllianceApplyGuildInfo::set_allocated_leaderuserinfo(::pb::TUserSimpleInfo* leaderuserinfo) {
  delete leaderuserinfo_;
  leaderuserinfo_ = leaderuserinfo;
  if (leaderuserinfo) {
    set_has_leaderuserinfo();
  } else {
    clear_has_leaderuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAllianceApplyGuildInfo.LeaderUserInfo)
}

// optional uint32 MemberNum = 2;
inline bool TAllianceApplyGuildInfo::has_membernum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAllianceApplyGuildInfo::set_has_membernum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAllianceApplyGuildInfo::clear_has_membernum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAllianceApplyGuildInfo::clear_membernum() {
  membernum_ = 0u;
  clear_has_membernum();
}
inline ::google::protobuf::uint32 TAllianceApplyGuildInfo::membernum() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceApplyGuildInfo.MemberNum)
  return membernum_;
}
inline void TAllianceApplyGuildInfo::set_membernum(::google::protobuf::uint32 value) {
  set_has_membernum();
  membernum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceApplyGuildInfo.MemberNum)
}

// optional uint64 GuildFightForce = 3;
inline bool TAllianceApplyGuildInfo::has_guildfightforce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAllianceApplyGuildInfo::set_has_guildfightforce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAllianceApplyGuildInfo::clear_has_guildfightforce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAllianceApplyGuildInfo::clear_guildfightforce() {
  guildfightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_guildfightforce();
}
inline ::google::protobuf::uint64 TAllianceApplyGuildInfo::guildfightforce() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceApplyGuildInfo.GuildFightForce)
  return guildfightforce_;
}
inline void TAllianceApplyGuildInfo::set_guildfightforce(::google::protobuf::uint64 value) {
  set_has_guildfightforce();
  guildfightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceApplyGuildInfo.GuildFightForce)
}

// optional uint32 GuildLevel = 4;
inline bool TAllianceApplyGuildInfo::has_guildlevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAllianceApplyGuildInfo::set_has_guildlevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAllianceApplyGuildInfo::clear_has_guildlevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAllianceApplyGuildInfo::clear_guildlevel() {
  guildlevel_ = 0u;
  clear_has_guildlevel();
}
inline ::google::protobuf::uint32 TAllianceApplyGuildInfo::guildlevel() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceApplyGuildInfo.GuildLevel)
  return guildlevel_;
}
inline void TAllianceApplyGuildInfo::set_guildlevel(::google::protobuf::uint32 value) {
  set_has_guildlevel();
  guildlevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceApplyGuildInfo.GuildLevel)
}

// -------------------------------------------------------------------

// TInnerAllianceGetServerTeamInfoRsp

// optional uint32 TeamId = 1;
inline bool TInnerAllianceGetServerTeamInfoRsp::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TInnerAllianceGetServerTeamInfoRsp::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TInnerAllianceGetServerTeamInfoRsp::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TInnerAllianceGetServerTeamInfoRsp::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TInnerAllianceGetServerTeamInfoRsp::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TInnerAllianceGetServerTeamInfoRsp.TeamId)
  return teamid_;
}
inline void TInnerAllianceGetServerTeamInfoRsp::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TInnerAllianceGetServerTeamInfoRsp.TeamId)
}

// optional uint32 NeedOpenDay = 2;
inline bool TInnerAllianceGetServerTeamInfoRsp::has_needopenday() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TInnerAllianceGetServerTeamInfoRsp::set_has_needopenday() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TInnerAllianceGetServerTeamInfoRsp::clear_has_needopenday() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TInnerAllianceGetServerTeamInfoRsp::clear_needopenday() {
  needopenday_ = 0u;
  clear_has_needopenday();
}
inline ::google::protobuf::uint32 TInnerAllianceGetServerTeamInfoRsp::needopenday() const {
  // @@protoc_insertion_point(field_get:pb.TInnerAllianceGetServerTeamInfoRsp.NeedOpenDay)
  return needopenday_;
}
inline void TInnerAllianceGetServerTeamInfoRsp::set_needopenday(::google::protobuf::uint32 value) {
  set_has_needopenday();
  needopenday_ = value;
  // @@protoc_insertion_point(field_set:pb.TInnerAllianceGetServerTeamInfoRsp.NeedOpenDay)
}

// -------------------------------------------------------------------

// TInnerAllianceGetAllianceInfoRsp

// optional .pb.TAllianceUserInfo UserInfo = 1;
inline bool TInnerAllianceGetAllianceInfoRsp::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TInnerAllianceGetAllianceInfoRsp::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TInnerAllianceGetAllianceInfoRsp::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TInnerAllianceGetAllianceInfoRsp::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TAllianceUserInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TAllianceUserInfo& TInnerAllianceGetAllianceInfoRsp::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TInnerAllianceGetAllianceInfoRsp.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TAllianceUserInfo* TInnerAllianceGetAllianceInfoRsp::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TAllianceUserInfo;
  // @@protoc_insertion_point(field_mutable:pb.TInnerAllianceGetAllianceInfoRsp.UserInfo)
  return userinfo_;
}
inline ::pb::TAllianceUserInfo* TInnerAllianceGetAllianceInfoRsp::release_userinfo() {
  clear_has_userinfo();
  ::pb::TAllianceUserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TInnerAllianceGetAllianceInfoRsp::set_allocated_userinfo(::pb::TAllianceUserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TInnerAllianceGetAllianceInfoRsp.UserInfo)
}

// optional .pb.TAllianceDetailInfo AllianceDetailInfo = 2;
inline bool TInnerAllianceGetAllianceInfoRsp::has_alliancedetailinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TInnerAllianceGetAllianceInfoRsp::set_has_alliancedetailinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TInnerAllianceGetAllianceInfoRsp::clear_has_alliancedetailinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TInnerAllianceGetAllianceInfoRsp::clear_alliancedetailinfo() {
  if (alliancedetailinfo_ != NULL) alliancedetailinfo_->::pb::TAllianceDetailInfo::Clear();
  clear_has_alliancedetailinfo();
}
inline const ::pb::TAllianceDetailInfo& TInnerAllianceGetAllianceInfoRsp::alliancedetailinfo() const {
  // @@protoc_insertion_point(field_get:pb.TInnerAllianceGetAllianceInfoRsp.AllianceDetailInfo)
  return alliancedetailinfo_ != NULL ? *alliancedetailinfo_ : *default_instance_->alliancedetailinfo_;
}
inline ::pb::TAllianceDetailInfo* TInnerAllianceGetAllianceInfoRsp::mutable_alliancedetailinfo() {
  set_has_alliancedetailinfo();
  if (alliancedetailinfo_ == NULL) alliancedetailinfo_ = new ::pb::TAllianceDetailInfo;
  // @@protoc_insertion_point(field_mutable:pb.TInnerAllianceGetAllianceInfoRsp.AllianceDetailInfo)
  return alliancedetailinfo_;
}
inline ::pb::TAllianceDetailInfo* TInnerAllianceGetAllianceInfoRsp::release_alliancedetailinfo() {
  clear_has_alliancedetailinfo();
  ::pb::TAllianceDetailInfo* temp = alliancedetailinfo_;
  alliancedetailinfo_ = NULL;
  return temp;
}
inline void TInnerAllianceGetAllianceInfoRsp::set_allocated_alliancedetailinfo(::pb::TAllianceDetailInfo* alliancedetailinfo) {
  delete alliancedetailinfo_;
  alliancedetailinfo_ = alliancedetailinfo;
  if (alliancedetailinfo) {
    set_has_alliancedetailinfo();
  } else {
    clear_has_alliancedetailinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TInnerAllianceGetAllianceInfoRsp.AllianceDetailInfo)
}

// -------------------------------------------------------------------

// TInnerAllianceRefreshTaskReq

// optional uint32 TaskId = 1;
inline bool TInnerAllianceRefreshTaskReq::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TInnerAllianceRefreshTaskReq::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TInnerAllianceRefreshTaskReq::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TInnerAllianceRefreshTaskReq::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 TInnerAllianceRefreshTaskReq::taskid() const {
  // @@protoc_insertion_point(field_get:pb.TInnerAllianceRefreshTaskReq.TaskId)
  return taskid_;
}
inline void TInnerAllianceRefreshTaskReq::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:pb.TInnerAllianceRefreshTaskReq.TaskId)
}

// -------------------------------------------------------------------

// TInnerAllianceUpgradeTaskReq

// optional uint32 TaskId = 1;
inline bool TInnerAllianceUpgradeTaskReq::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TInnerAllianceUpgradeTaskReq::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TInnerAllianceUpgradeTaskReq::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TInnerAllianceUpgradeTaskReq::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 TInnerAllianceUpgradeTaskReq::taskid() const {
  // @@protoc_insertion_point(field_get:pb.TInnerAllianceUpgradeTaskReq.TaskId)
  return taskid_;
}
inline void TInnerAllianceUpgradeTaskReq::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:pb.TInnerAllianceUpgradeTaskReq.TaskId)
}

// -------------------------------------------------------------------

// TInnerAllianceCommitTaskReq

// optional uint32 TaskId = 1;
inline bool TInnerAllianceCommitTaskReq::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TInnerAllianceCommitTaskReq::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TInnerAllianceCommitTaskReq::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TInnerAllianceCommitTaskReq::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 TInnerAllianceCommitTaskReq::taskid() const {
  // @@protoc_insertion_point(field_get:pb.TInnerAllianceCommitTaskReq.TaskId)
  return taskid_;
}
inline void TInnerAllianceCommitTaskReq::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:pb.TInnerAllianceCommitTaskReq.TaskId)
}

// -------------------------------------------------------------------

// TInnerAllianceCommitTaskRsp

// repeated .pb.TCommonReward RewardArray = 1;
inline int TInnerAllianceCommitTaskRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TInnerAllianceCommitTaskRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TInnerAllianceCommitTaskRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TInnerAllianceCommitTaskRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TInnerAllianceCommitTaskRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TInnerAllianceCommitTaskRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TInnerAllianceCommitTaskRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TInnerAllianceCommitTaskRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TInnerAllianceCommitTaskRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TInnerAllianceCommitTaskRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TInnerAllianceCommitTaskRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TInnerAllianceCommitTaskRsp.RewardArray)
  return &rewardarray_;
}

// -------------------------------------------------------------------

// TInnerAllianceReceiveTaskRewardReq

// optional uint32 Id = 1;
inline bool TInnerAllianceReceiveTaskRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TInnerAllianceReceiveTaskRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TInnerAllianceReceiveTaskRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TInnerAllianceReceiveTaskRewardReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TInnerAllianceReceiveTaskRewardReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TInnerAllianceReceiveTaskRewardReq.Id)
  return id_;
}
inline void TInnerAllianceReceiveTaskRewardReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TInnerAllianceReceiveTaskRewardReq.Id)
}

// -------------------------------------------------------------------

// TInnerAllianceReceiveTaskRewardRsp

// repeated .pb.TCommonReward RewardArray = 1;
inline int TInnerAllianceReceiveTaskRewardRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TInnerAllianceReceiveTaskRewardRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TInnerAllianceReceiveTaskRewardRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TInnerAllianceReceiveTaskRewardRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TInnerAllianceReceiveTaskRewardRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TInnerAllianceReceiveTaskRewardRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TInnerAllianceReceiveTaskRewardRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TInnerAllianceReceiveTaskRewardRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TInnerAllianceReceiveTaskRewardRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TInnerAllianceReceiveTaskRewardRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TInnerAllianceReceiveTaskRewardRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TInnerAllianceReceiveTaskRewardRsp.RewardArray)
  return &rewardarray_;
}

// -------------------------------------------------------------------

// TInnerAllianceReceiveSignRewardRsp

// repeated .pb.TCommonReward RewardArray = 1;
inline int TInnerAllianceReceiveSignRewardRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TInnerAllianceReceiveSignRewardRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TInnerAllianceReceiveSignRewardRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TInnerAllianceReceiveSignRewardRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TInnerAllianceReceiveSignRewardRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TInnerAllianceReceiveSignRewardRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TInnerAllianceReceiveSignRewardRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TInnerAllianceReceiveSignRewardRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TInnerAllianceReceiveSignRewardRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TInnerAllianceReceiveSignRewardRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TInnerAllianceReceiveSignRewardRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TInnerAllianceReceiveSignRewardRsp.RewardArray)
  return &rewardarray_;
}

// -------------------------------------------------------------------

// TInnerAllianceUpgradePracticeReq

// optional uint32 Type = 1;
inline bool TInnerAllianceUpgradePracticeReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TInnerAllianceUpgradePracticeReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TInnerAllianceUpgradePracticeReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TInnerAllianceUpgradePracticeReq::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 TInnerAllianceUpgradePracticeReq::type() const {
  // @@protoc_insertion_point(field_get:pb.TInnerAllianceUpgradePracticeReq.Type)
  return type_;
}
inline void TInnerAllianceUpgradePracticeReq::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.TInnerAllianceUpgradePracticeReq.Type)
}

// -------------------------------------------------------------------

// TAllianceUserInfoChange

// optional .pb.TAllianceUserInfo UserInfo = 1;
inline bool TAllianceUserInfoChange::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAllianceUserInfoChange::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAllianceUserInfoChange::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAllianceUserInfoChange::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TAllianceUserInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TAllianceUserInfo& TAllianceUserInfoChange::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceUserInfoChange.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TAllianceUserInfo* TAllianceUserInfoChange::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TAllianceUserInfo;
  // @@protoc_insertion_point(field_mutable:pb.TAllianceUserInfoChange.UserInfo)
  return userinfo_;
}
inline ::pb::TAllianceUserInfo* TAllianceUserInfoChange::release_userinfo() {
  clear_has_userinfo();
  ::pb::TAllianceUserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TAllianceUserInfoChange::set_allocated_userinfo(::pb::TAllianceUserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAllianceUserInfoChange.UserInfo)
}

// -------------------------------------------------------------------

// TCrossAllianceGetAllianceListReq

// optional uint32 Offset = 1;
inline bool TCrossAllianceGetAllianceListReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossAllianceGetAllianceListReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossAllianceGetAllianceListReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossAllianceGetAllianceListReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TCrossAllianceGetAllianceListReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceGetAllianceListReq.Offset)
  return offset_;
}
inline void TCrossAllianceGetAllianceListReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceGetAllianceListReq.Offset)
}

// optional uint32 Limit = 2;
inline bool TCrossAllianceGetAllianceListReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossAllianceGetAllianceListReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossAllianceGetAllianceListReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossAllianceGetAllianceListReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TCrossAllianceGetAllianceListReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceGetAllianceListReq.Limit)
  return limit_;
}
inline void TCrossAllianceGetAllianceListReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceGetAllianceListReq.Limit)
}

// optional bool OnlyCanApply = 3;
inline bool TCrossAllianceGetAllianceListReq::has_onlycanapply() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossAllianceGetAllianceListReq::set_has_onlycanapply() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossAllianceGetAllianceListReq::clear_has_onlycanapply() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossAllianceGetAllianceListReq::clear_onlycanapply() {
  onlycanapply_ = false;
  clear_has_onlycanapply();
}
inline bool TCrossAllianceGetAllianceListReq::onlycanapply() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceGetAllianceListReq.OnlyCanApply)
  return onlycanapply_;
}
inline void TCrossAllianceGetAllianceListReq::set_onlycanapply(bool value) {
  set_has_onlycanapply();
  onlycanapply_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceGetAllianceListReq.OnlyCanApply)
}

// -------------------------------------------------------------------

// TCrossAllianceGetAllianceListRsp

// repeated .pb.TAllianceSimpleInfoWithApplyStatus ArrAllianceInfo = 1;
inline int TCrossAllianceGetAllianceListRsp::arrallianceinfo_size() const {
  return arrallianceinfo_.size();
}
inline void TCrossAllianceGetAllianceListRsp::clear_arrallianceinfo() {
  arrallianceinfo_.Clear();
}
inline const ::pb::TAllianceSimpleInfoWithApplyStatus& TCrossAllianceGetAllianceListRsp::arrallianceinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceGetAllianceListRsp.ArrAllianceInfo)
  return arrallianceinfo_.Get(index);
}
inline ::pb::TAllianceSimpleInfoWithApplyStatus* TCrossAllianceGetAllianceListRsp::mutable_arrallianceinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossAllianceGetAllianceListRsp.ArrAllianceInfo)
  return arrallianceinfo_.Mutable(index);
}
inline ::pb::TAllianceSimpleInfoWithApplyStatus* TCrossAllianceGetAllianceListRsp::add_arrallianceinfo() {
  // @@protoc_insertion_point(field_add:pb.TCrossAllianceGetAllianceListRsp.ArrAllianceInfo)
  return arrallianceinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceSimpleInfoWithApplyStatus >&
TCrossAllianceGetAllianceListRsp::arrallianceinfo() const {
  // @@protoc_insertion_point(field_list:pb.TCrossAllianceGetAllianceListRsp.ArrAllianceInfo)
  return arrallianceinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceSimpleInfoWithApplyStatus >*
TCrossAllianceGetAllianceListRsp::mutable_arrallianceinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossAllianceGetAllianceListRsp.ArrAllianceInfo)
  return &arrallianceinfo_;
}

// -------------------------------------------------------------------

// TCrossAllianceSearchAllianceReq

// optional string Name = 1;
inline bool TCrossAllianceSearchAllianceReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossAllianceSearchAllianceReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossAllianceSearchAllianceReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossAllianceSearchAllianceReq::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TCrossAllianceSearchAllianceReq::name() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceSearchAllianceReq.Name)
  return *name_;
}
inline void TCrossAllianceSearchAllianceReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceSearchAllianceReq.Name)
}
inline void TCrossAllianceSearchAllianceReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossAllianceSearchAllianceReq.Name)
}
inline void TCrossAllianceSearchAllianceReq::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossAllianceSearchAllianceReq.Name)
}
inline ::std::string* TCrossAllianceSearchAllianceReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossAllianceSearchAllianceReq.Name)
  return name_;
}
inline ::std::string* TCrossAllianceSearchAllianceReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossAllianceSearchAllianceReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossAllianceSearchAllianceReq.Name)
}

// -------------------------------------------------------------------

// TCrossAllianceSearchAllianceRsp

// repeated .pb.TAllianceSimpleInfoWithApplyStatus ArrAllianceSimpleInfo = 1;
inline int TCrossAllianceSearchAllianceRsp::arralliancesimpleinfo_size() const {
  return arralliancesimpleinfo_.size();
}
inline void TCrossAllianceSearchAllianceRsp::clear_arralliancesimpleinfo() {
  arralliancesimpleinfo_.Clear();
}
inline const ::pb::TAllianceSimpleInfoWithApplyStatus& TCrossAllianceSearchAllianceRsp::arralliancesimpleinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceSearchAllianceRsp.ArrAllianceSimpleInfo)
  return arralliancesimpleinfo_.Get(index);
}
inline ::pb::TAllianceSimpleInfoWithApplyStatus* TCrossAllianceSearchAllianceRsp::mutable_arralliancesimpleinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossAllianceSearchAllianceRsp.ArrAllianceSimpleInfo)
  return arralliancesimpleinfo_.Mutable(index);
}
inline ::pb::TAllianceSimpleInfoWithApplyStatus* TCrossAllianceSearchAllianceRsp::add_arralliancesimpleinfo() {
  // @@protoc_insertion_point(field_add:pb.TCrossAllianceSearchAllianceRsp.ArrAllianceSimpleInfo)
  return arralliancesimpleinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceSimpleInfoWithApplyStatus >&
TCrossAllianceSearchAllianceRsp::arralliancesimpleinfo() const {
  // @@protoc_insertion_point(field_list:pb.TCrossAllianceSearchAllianceRsp.ArrAllianceSimpleInfo)
  return arralliancesimpleinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceSimpleInfoWithApplyStatus >*
TCrossAllianceSearchAllianceRsp::mutable_arralliancesimpleinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossAllianceSearchAllianceRsp.ArrAllianceSimpleInfo)
  return &arralliancesimpleinfo_;
}

// -------------------------------------------------------------------

// TCrossAllianceGetAllianceMemberListReq

// optional uint64 GuildId = 1;
inline bool TCrossAllianceGetAllianceMemberListReq::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossAllianceGetAllianceMemberListReq::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossAllianceGetAllianceMemberListReq::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossAllianceGetAllianceMemberListReq::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TCrossAllianceGetAllianceMemberListReq::guildid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceGetAllianceMemberListReq.GuildId)
  return guildid_;
}
inline void TCrossAllianceGetAllianceMemberListReq::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceGetAllianceMemberListReq.GuildId)
}

// -------------------------------------------------------------------

// TCrossAllianceGetAllianceMemberListRsp

// repeated .pb.TAllianceGuildMemberInfoWithUser GuildInfo = 1;
inline int TCrossAllianceGetAllianceMemberListRsp::guildinfo_size() const {
  return guildinfo_.size();
}
inline void TCrossAllianceGetAllianceMemberListRsp::clear_guildinfo() {
  guildinfo_.Clear();
}
inline const ::pb::TAllianceGuildMemberInfoWithUser& TCrossAllianceGetAllianceMemberListRsp::guildinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceGetAllianceMemberListRsp.GuildInfo)
  return guildinfo_.Get(index);
}
inline ::pb::TAllianceGuildMemberInfoWithUser* TCrossAllianceGetAllianceMemberListRsp::mutable_guildinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossAllianceGetAllianceMemberListRsp.GuildInfo)
  return guildinfo_.Mutable(index);
}
inline ::pb::TAllianceGuildMemberInfoWithUser* TCrossAllianceGetAllianceMemberListRsp::add_guildinfo() {
  // @@protoc_insertion_point(field_add:pb.TCrossAllianceGetAllianceMemberListRsp.GuildInfo)
  return guildinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceGuildMemberInfoWithUser >&
TCrossAllianceGetAllianceMemberListRsp::guildinfo() const {
  // @@protoc_insertion_point(field_list:pb.TCrossAllianceGetAllianceMemberListRsp.GuildInfo)
  return guildinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceGuildMemberInfoWithUser >*
TCrossAllianceGetAllianceMemberListRsp::mutable_guildinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossAllianceGetAllianceMemberListRsp.GuildInfo)
  return &guildinfo_;
}

// -------------------------------------------------------------------

// TCrossAllianceGetAllianceApplyListRsp

// repeated .pb.TAllianceApplyGuildInfo ArrApply = 1;
inline int TCrossAllianceGetAllianceApplyListRsp::arrapply_size() const {
  return arrapply_.size();
}
inline void TCrossAllianceGetAllianceApplyListRsp::clear_arrapply() {
  arrapply_.Clear();
}
inline const ::pb::TAllianceApplyGuildInfo& TCrossAllianceGetAllianceApplyListRsp::arrapply(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceGetAllianceApplyListRsp.ArrApply)
  return arrapply_.Get(index);
}
inline ::pb::TAllianceApplyGuildInfo* TCrossAllianceGetAllianceApplyListRsp::mutable_arrapply(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossAllianceGetAllianceApplyListRsp.ArrApply)
  return arrapply_.Mutable(index);
}
inline ::pb::TAllianceApplyGuildInfo* TCrossAllianceGetAllianceApplyListRsp::add_arrapply() {
  // @@protoc_insertion_point(field_add:pb.TCrossAllianceGetAllianceApplyListRsp.ArrApply)
  return arrapply_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceApplyGuildInfo >&
TCrossAllianceGetAllianceApplyListRsp::arrapply() const {
  // @@protoc_insertion_point(field_list:pb.TCrossAllianceGetAllianceApplyListRsp.ArrApply)
  return arrapply_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceApplyGuildInfo >*
TCrossAllianceGetAllianceApplyListRsp::mutable_arrapply() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossAllianceGetAllianceApplyListRsp.ArrApply)
  return &arrapply_;
}

// -------------------------------------------------------------------

// TCrossAllianceCreateAllianceReq

// optional string Name = 1;
inline bool TCrossAllianceCreateAllianceReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossAllianceCreateAllianceReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossAllianceCreateAllianceReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossAllianceCreateAllianceReq::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TCrossAllianceCreateAllianceReq::name() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceCreateAllianceReq.Name)
  return *name_;
}
inline void TCrossAllianceCreateAllianceReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceCreateAllianceReq.Name)
}
inline void TCrossAllianceCreateAllianceReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossAllianceCreateAllianceReq.Name)
}
inline void TCrossAllianceCreateAllianceReq::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossAllianceCreateAllianceReq.Name)
}
inline ::std::string* TCrossAllianceCreateAllianceReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossAllianceCreateAllianceReq.Name)
  return name_;
}
inline ::std::string* TCrossAllianceCreateAllianceReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossAllianceCreateAllianceReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossAllianceCreateAllianceReq.Name)
}

// optional string Summary = 2;
inline bool TCrossAllianceCreateAllianceReq::has_summary() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossAllianceCreateAllianceReq::set_has_summary() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossAllianceCreateAllianceReq::clear_has_summary() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossAllianceCreateAllianceReq::clear_summary() {
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_->clear();
  }
  clear_has_summary();
}
inline const ::std::string& TCrossAllianceCreateAllianceReq::summary() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceCreateAllianceReq.Summary)
  return *summary_;
}
inline void TCrossAllianceCreateAllianceReq::set_summary(const ::std::string& value) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  summary_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceCreateAllianceReq.Summary)
}
inline void TCrossAllianceCreateAllianceReq::set_summary(const char* value) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  summary_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossAllianceCreateAllianceReq.Summary)
}
inline void TCrossAllianceCreateAllianceReq::set_summary(const char* value, size_t size) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  summary_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossAllianceCreateAllianceReq.Summary)
}
inline ::std::string* TCrossAllianceCreateAllianceReq::mutable_summary() {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossAllianceCreateAllianceReq.Summary)
  return summary_;
}
inline ::std::string* TCrossAllianceCreateAllianceReq::release_summary() {
  clear_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = summary_;
    summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossAllianceCreateAllianceReq::set_allocated_summary(::std::string* summary) {
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete summary_;
  }
  if (summary) {
    set_has_summary();
    summary_ = summary;
  } else {
    clear_has_summary();
    summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossAllianceCreateAllianceReq.Summary)
}

// optional uint32 BannerBase = 3;
inline bool TCrossAllianceCreateAllianceReq::has_bannerbase() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossAllianceCreateAllianceReq::set_has_bannerbase() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossAllianceCreateAllianceReq::clear_has_bannerbase() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossAllianceCreateAllianceReq::clear_bannerbase() {
  bannerbase_ = 0u;
  clear_has_bannerbase();
}
inline ::google::protobuf::uint32 TCrossAllianceCreateAllianceReq::bannerbase() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceCreateAllianceReq.BannerBase)
  return bannerbase_;
}
inline void TCrossAllianceCreateAllianceReq::set_bannerbase(::google::protobuf::uint32 value) {
  set_has_bannerbase();
  bannerbase_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceCreateAllianceReq.BannerBase)
}

// optional uint32 BannerFigure = 4;
inline bool TCrossAllianceCreateAllianceReq::has_bannerfigure() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossAllianceCreateAllianceReq::set_has_bannerfigure() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossAllianceCreateAllianceReq::clear_has_bannerfigure() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossAllianceCreateAllianceReq::clear_bannerfigure() {
  bannerfigure_ = 0u;
  clear_has_bannerfigure();
}
inline ::google::protobuf::uint32 TCrossAllianceCreateAllianceReq::bannerfigure() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceCreateAllianceReq.BannerFigure)
  return bannerfigure_;
}
inline void TCrossAllianceCreateAllianceReq::set_bannerfigure(::google::protobuf::uint32 value) {
  set_has_bannerfigure();
  bannerfigure_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceCreateAllianceReq.BannerFigure)
}

// optional string BannerName = 5;
inline bool TCrossAllianceCreateAllianceReq::has_bannername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossAllianceCreateAllianceReq::set_has_bannername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossAllianceCreateAllianceReq::clear_has_bannername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossAllianceCreateAllianceReq::clear_bannername() {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_->clear();
  }
  clear_has_bannername();
}
inline const ::std::string& TCrossAllianceCreateAllianceReq::bannername() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceCreateAllianceReq.BannerName)
  return *bannername_;
}
inline void TCrossAllianceCreateAllianceReq::set_bannername(const ::std::string& value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceCreateAllianceReq.BannerName)
}
inline void TCrossAllianceCreateAllianceReq::set_bannername(const char* value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossAllianceCreateAllianceReq.BannerName)
}
inline void TCrossAllianceCreateAllianceReq::set_bannername(const char* value, size_t size) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossAllianceCreateAllianceReq.BannerName)
}
inline ::std::string* TCrossAllianceCreateAllianceReq::mutable_bannername() {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossAllianceCreateAllianceReq.BannerName)
  return bannername_;
}
inline ::std::string* TCrossAllianceCreateAllianceReq::release_bannername() {
  clear_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bannername_;
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossAllianceCreateAllianceReq::set_allocated_bannername(::std::string* bannername) {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (bannername) {
    set_has_bannername();
    bannername_ = bannername;
  } else {
    clear_has_bannername();
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossAllianceCreateAllianceReq.BannerName)
}

// -------------------------------------------------------------------

// TCrossAllianceApplyAllianceReq

// optional uint64 AllianceId = 1;
inline bool TCrossAllianceApplyAllianceReq::has_allianceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossAllianceApplyAllianceReq::set_has_allianceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossAllianceApplyAllianceReq::clear_has_allianceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossAllianceApplyAllianceReq::clear_allianceid() {
  allianceid_ = GOOGLE_ULONGLONG(0);
  clear_has_allianceid();
}
inline ::google::protobuf::uint64 TCrossAllianceApplyAllianceReq::allianceid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceApplyAllianceReq.AllianceId)
  return allianceid_;
}
inline void TCrossAllianceApplyAllianceReq::set_allianceid(::google::protobuf::uint64 value) {
  set_has_allianceid();
  allianceid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceApplyAllianceReq.AllianceId)
}

// -------------------------------------------------------------------

// TCrossAllianceApplyAllianceRsp

// optional uint64 JoinAllianceId = 1;
inline bool TCrossAllianceApplyAllianceRsp::has_joinallianceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossAllianceApplyAllianceRsp::set_has_joinallianceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossAllianceApplyAllianceRsp::clear_has_joinallianceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossAllianceApplyAllianceRsp::clear_joinallianceid() {
  joinallianceid_ = GOOGLE_ULONGLONG(0);
  clear_has_joinallianceid();
}
inline ::google::protobuf::uint64 TCrossAllianceApplyAllianceRsp::joinallianceid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceApplyAllianceRsp.JoinAllianceId)
  return joinallianceid_;
}
inline void TCrossAllianceApplyAllianceRsp::set_joinallianceid(::google::protobuf::uint64 value) {
  set_has_joinallianceid();
  joinallianceid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceApplyAllianceRsp.JoinAllianceId)
}

// repeated uint64 ApplyAllianceId = 2;
inline int TCrossAllianceApplyAllianceRsp::applyallianceid_size() const {
  return applyallianceid_.size();
}
inline void TCrossAllianceApplyAllianceRsp::clear_applyallianceid() {
  applyallianceid_.Clear();
}
inline ::google::protobuf::uint64 TCrossAllianceApplyAllianceRsp::applyallianceid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceApplyAllianceRsp.ApplyAllianceId)
  return applyallianceid_.Get(index);
}
inline void TCrossAllianceApplyAllianceRsp::set_applyallianceid(int index, ::google::protobuf::uint64 value) {
  applyallianceid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceApplyAllianceRsp.ApplyAllianceId)
}
inline void TCrossAllianceApplyAllianceRsp::add_applyallianceid(::google::protobuf::uint64 value) {
  applyallianceid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCrossAllianceApplyAllianceRsp.ApplyAllianceId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TCrossAllianceApplyAllianceRsp::applyallianceid() const {
  // @@protoc_insertion_point(field_list:pb.TCrossAllianceApplyAllianceRsp.ApplyAllianceId)
  return applyallianceid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TCrossAllianceApplyAllianceRsp::mutable_applyallianceid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossAllianceApplyAllianceRsp.ApplyAllianceId)
  return &applyallianceid_;
}

// optional uint64 LeaveTime = 3;
inline bool TCrossAllianceApplyAllianceRsp::has_leavetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossAllianceApplyAllianceRsp::set_has_leavetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossAllianceApplyAllianceRsp::clear_has_leavetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossAllianceApplyAllianceRsp::clear_leavetime() {
  leavetime_ = GOOGLE_ULONGLONG(0);
  clear_has_leavetime();
}
inline ::google::protobuf::uint64 TCrossAllianceApplyAllianceRsp::leavetime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceApplyAllianceRsp.LeaveTime)
  return leavetime_;
}
inline void TCrossAllianceApplyAllianceRsp::set_leavetime(::google::protobuf::uint64 value) {
  set_has_leavetime();
  leavetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceApplyAllianceRsp.LeaveTime)
}

// -------------------------------------------------------------------

// TCrossAllianceCancelApplyAllianceReq

// optional uint64 AllianceId = 1;
inline bool TCrossAllianceCancelApplyAllianceReq::has_allianceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossAllianceCancelApplyAllianceReq::set_has_allianceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossAllianceCancelApplyAllianceReq::clear_has_allianceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossAllianceCancelApplyAllianceReq::clear_allianceid() {
  allianceid_ = GOOGLE_ULONGLONG(0);
  clear_has_allianceid();
}
inline ::google::protobuf::uint64 TCrossAllianceCancelApplyAllianceReq::allianceid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceCancelApplyAllianceReq.AllianceId)
  return allianceid_;
}
inline void TCrossAllianceCancelApplyAllianceReq::set_allianceid(::google::protobuf::uint64 value) {
  set_has_allianceid();
  allianceid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceCancelApplyAllianceReq.AllianceId)
}

// -------------------------------------------------------------------

// TCrossAllianceExamineApplyReq

// optional uint64 GuildId = 1;
inline bool TCrossAllianceExamineApplyReq::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossAllianceExamineApplyReq::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossAllianceExamineApplyReq::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossAllianceExamineApplyReq::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TCrossAllianceExamineApplyReq::guildid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceExamineApplyReq.GuildId)
  return guildid_;
}
inline void TCrossAllianceExamineApplyReq::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceExamineApplyReq.GuildId)
}

// optional bool Agree = 2;
inline bool TCrossAllianceExamineApplyReq::has_agree() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossAllianceExamineApplyReq::set_has_agree() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossAllianceExamineApplyReq::clear_has_agree() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossAllianceExamineApplyReq::clear_agree() {
  agree_ = false;
  clear_has_agree();
}
inline bool TCrossAllianceExamineApplyReq::agree() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceExamineApplyReq.Agree)
  return agree_;
}
inline void TCrossAllianceExamineApplyReq::set_agree(bool value) {
  set_has_agree();
  agree_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceExamineApplyReq.Agree)
}

// -------------------------------------------------------------------

// TCrossAllianceModifyInfoReq

// optional string BannerName = 1;
inline bool TCrossAllianceModifyInfoReq::has_bannername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossAllianceModifyInfoReq::set_has_bannername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossAllianceModifyInfoReq::clear_has_bannername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossAllianceModifyInfoReq::clear_bannername() {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_->clear();
  }
  clear_has_bannername();
}
inline const ::std::string& TCrossAllianceModifyInfoReq::bannername() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceModifyInfoReq.BannerName)
  return *bannername_;
}
inline void TCrossAllianceModifyInfoReq::set_bannername(const ::std::string& value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceModifyInfoReq.BannerName)
}
inline void TCrossAllianceModifyInfoReq::set_bannername(const char* value) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossAllianceModifyInfoReq.BannerName)
}
inline void TCrossAllianceModifyInfoReq::set_bannername(const char* value, size_t size) {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  bannername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossAllianceModifyInfoReq.BannerName)
}
inline ::std::string* TCrossAllianceModifyInfoReq::mutable_bannername() {
  set_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bannername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossAllianceModifyInfoReq.BannerName)
  return bannername_;
}
inline ::std::string* TCrossAllianceModifyInfoReq::release_bannername() {
  clear_has_bannername();
  if (bannername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bannername_;
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossAllianceModifyInfoReq::set_allocated_bannername(::std::string* bannername) {
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (bannername) {
    set_has_bannername();
    bannername_ = bannername;
  } else {
    clear_has_bannername();
    bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossAllianceModifyInfoReq.BannerName)
}

// optional uint32 BannerBase = 2;
inline bool TCrossAllianceModifyInfoReq::has_bannerbase() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossAllianceModifyInfoReq::set_has_bannerbase() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossAllianceModifyInfoReq::clear_has_bannerbase() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossAllianceModifyInfoReq::clear_bannerbase() {
  bannerbase_ = 0u;
  clear_has_bannerbase();
}
inline ::google::protobuf::uint32 TCrossAllianceModifyInfoReq::bannerbase() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceModifyInfoReq.BannerBase)
  return bannerbase_;
}
inline void TCrossAllianceModifyInfoReq::set_bannerbase(::google::protobuf::uint32 value) {
  set_has_bannerbase();
  bannerbase_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceModifyInfoReq.BannerBase)
}

// optional uint32 BannerFigure = 3;
inline bool TCrossAllianceModifyInfoReq::has_bannerfigure() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossAllianceModifyInfoReq::set_has_bannerfigure() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossAllianceModifyInfoReq::clear_has_bannerfigure() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossAllianceModifyInfoReq::clear_bannerfigure() {
  bannerfigure_ = 0u;
  clear_has_bannerfigure();
}
inline ::google::protobuf::uint32 TCrossAllianceModifyInfoReq::bannerfigure() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceModifyInfoReq.BannerFigure)
  return bannerfigure_;
}
inline void TCrossAllianceModifyInfoReq::set_bannerfigure(::google::protobuf::uint32 value) {
  set_has_bannerfigure();
  bannerfigure_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceModifyInfoReq.BannerFigure)
}

// optional string Summary = 4;
inline bool TCrossAllianceModifyInfoReq::has_summary() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossAllianceModifyInfoReq::set_has_summary() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossAllianceModifyInfoReq::clear_has_summary() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossAllianceModifyInfoReq::clear_summary() {
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_->clear();
  }
  clear_has_summary();
}
inline const ::std::string& TCrossAllianceModifyInfoReq::summary() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceModifyInfoReq.Summary)
  return *summary_;
}
inline void TCrossAllianceModifyInfoReq::set_summary(const ::std::string& value) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  summary_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceModifyInfoReq.Summary)
}
inline void TCrossAllianceModifyInfoReq::set_summary(const char* value) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  summary_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossAllianceModifyInfoReq.Summary)
}
inline void TCrossAllianceModifyInfoReq::set_summary(const char* value, size_t size) {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  summary_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossAllianceModifyInfoReq.Summary)
}
inline ::std::string* TCrossAllianceModifyInfoReq::mutable_summary() {
  set_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    summary_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossAllianceModifyInfoReq.Summary)
  return summary_;
}
inline ::std::string* TCrossAllianceModifyInfoReq::release_summary() {
  clear_has_summary();
  if (summary_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = summary_;
    summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossAllianceModifyInfoReq::set_allocated_summary(::std::string* summary) {
  if (summary_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete summary_;
  }
  if (summary) {
    set_has_summary();
    summary_ = summary;
  } else {
    clear_has_summary();
    summary_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossAllianceModifyInfoReq.Summary)
}

// optional string Notice = 5;
inline bool TCrossAllianceModifyInfoReq::has_notice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossAllianceModifyInfoReq::set_has_notice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossAllianceModifyInfoReq::clear_has_notice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossAllianceModifyInfoReq::clear_notice() {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& TCrossAllianceModifyInfoReq::notice() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceModifyInfoReq.Notice)
  return *notice_;
}
inline void TCrossAllianceModifyInfoReq::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceModifyInfoReq.Notice)
}
inline void TCrossAllianceModifyInfoReq::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossAllianceModifyInfoReq.Notice)
}
inline void TCrossAllianceModifyInfoReq::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossAllianceModifyInfoReq.Notice)
}
inline ::std::string* TCrossAllianceModifyInfoReq::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    notice_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossAllianceModifyInfoReq.Notice)
  return notice_;
}
inline ::std::string* TCrossAllianceModifyInfoReq::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossAllianceModifyInfoReq::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossAllianceModifyInfoReq.Notice)
}

// optional .pb.EReviewMode ReviewMode = 6;
inline bool TCrossAllianceModifyInfoReq::has_reviewmode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCrossAllianceModifyInfoReq::set_has_reviewmode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCrossAllianceModifyInfoReq::clear_has_reviewmode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCrossAllianceModifyInfoReq::clear_reviewmode() {
  reviewmode_ = 0;
  clear_has_reviewmode();
}
inline ::pb::EReviewMode TCrossAllianceModifyInfoReq::reviewmode() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceModifyInfoReq.ReviewMode)
  return static_cast< ::pb::EReviewMode >(reviewmode_);
}
inline void TCrossAllianceModifyInfoReq::set_reviewmode(::pb::EReviewMode value) {
  assert(::pb::EReviewMode_IsValid(value));
  set_has_reviewmode();
  reviewmode_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceModifyInfoReq.ReviewMode)
}

// optional uint32 GuildLvLimit = 7;
inline bool TCrossAllianceModifyInfoReq::has_guildlvlimit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TCrossAllianceModifyInfoReq::set_has_guildlvlimit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TCrossAllianceModifyInfoReq::clear_has_guildlvlimit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TCrossAllianceModifyInfoReq::clear_guildlvlimit() {
  guildlvlimit_ = 0u;
  clear_has_guildlvlimit();
}
inline ::google::protobuf::uint32 TCrossAllianceModifyInfoReq::guildlvlimit() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceModifyInfoReq.GuildLvLimit)
  return guildlvlimit_;
}
inline void TCrossAllianceModifyInfoReq::set_guildlvlimit(::google::protobuf::uint32 value) {
  set_has_guildlvlimit();
  guildlvlimit_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceModifyInfoReq.GuildLvLimit)
}

// optional string QQ = 8;
inline bool TCrossAllianceModifyInfoReq::has_qq() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TCrossAllianceModifyInfoReq::set_has_qq() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TCrossAllianceModifyInfoReq::clear_has_qq() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TCrossAllianceModifyInfoReq::clear_qq() {
  if (qq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qq_->clear();
  }
  clear_has_qq();
}
inline const ::std::string& TCrossAllianceModifyInfoReq::qq() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceModifyInfoReq.QQ)
  return *qq_;
}
inline void TCrossAllianceModifyInfoReq::set_qq(const ::std::string& value) {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qq_ = new ::std::string;
  }
  qq_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceModifyInfoReq.QQ)
}
inline void TCrossAllianceModifyInfoReq::set_qq(const char* value) {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qq_ = new ::std::string;
  }
  qq_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossAllianceModifyInfoReq.QQ)
}
inline void TCrossAllianceModifyInfoReq::set_qq(const char* value, size_t size) {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qq_ = new ::std::string;
  }
  qq_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossAllianceModifyInfoReq.QQ)
}
inline ::std::string* TCrossAllianceModifyInfoReq::mutable_qq() {
  set_has_qq();
  if (qq_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    qq_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossAllianceModifyInfoReq.QQ)
  return qq_;
}
inline ::std::string* TCrossAllianceModifyInfoReq::release_qq() {
  clear_has_qq();
  if (qq_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = qq_;
    qq_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossAllianceModifyInfoReq::set_allocated_qq(::std::string* qq) {
  if (qq_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete qq_;
  }
  if (qq) {
    set_has_qq();
    qq_ = qq;
  } else {
    clear_has_qq();
    qq_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossAllianceModifyInfoReq.QQ)
}

// -------------------------------------------------------------------

// TCrossAllianceChangeNameReq

// optional string Name = 1;
inline bool TCrossAllianceChangeNameReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossAllianceChangeNameReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossAllianceChangeNameReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossAllianceChangeNameReq::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TCrossAllianceChangeNameReq::name() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceChangeNameReq.Name)
  return *name_;
}
inline void TCrossAllianceChangeNameReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceChangeNameReq.Name)
}
inline void TCrossAllianceChangeNameReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossAllianceChangeNameReq.Name)
}
inline void TCrossAllianceChangeNameReq::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossAllianceChangeNameReq.Name)
}
inline ::std::string* TCrossAllianceChangeNameReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossAllianceChangeNameReq.Name)
  return name_;
}
inline ::std::string* TCrossAllianceChangeNameReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossAllianceChangeNameReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossAllianceChangeNameReq.Name)
}

// -------------------------------------------------------------------

// TCrossAllianceKickGuildReq

// optional uint64 GuildId = 1;
inline bool TCrossAllianceKickGuildReq::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossAllianceKickGuildReq::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossAllianceKickGuildReq::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossAllianceKickGuildReq::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TCrossAllianceKickGuildReq::guildid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceKickGuildReq.GuildId)
  return guildid_;
}
inline void TCrossAllianceKickGuildReq::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceKickGuildReq.GuildId)
}

// -------------------------------------------------------------------

// TCrossAllianceAppointPostReq

// optional uint64 GuildId = 1;
inline bool TCrossAllianceAppointPostReq::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossAllianceAppointPostReq::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossAllianceAppointPostReq::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossAllianceAppointPostReq::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TCrossAllianceAppointPostReq::guildid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceAppointPostReq.GuildId)
  return guildid_;
}
inline void TCrossAllianceAppointPostReq::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceAppointPostReq.GuildId)
}

// optional .pb.EAlliancePost Post = 2;
inline bool TCrossAllianceAppointPostReq::has_post() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossAllianceAppointPostReq::set_has_post() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossAllianceAppointPostReq::clear_has_post() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossAllianceAppointPostReq::clear_post() {
  post_ = 0;
  clear_has_post();
}
inline ::pb::EAlliancePost TCrossAllianceAppointPostReq::post() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceAppointPostReq.Post)
  return static_cast< ::pb::EAlliancePost >(post_);
}
inline void TCrossAllianceAppointPostReq::set_post(::pb::EAlliancePost value) {
  assert(::pb::EAlliancePost_IsValid(value));
  set_has_post();
  post_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceAppointPostReq.Post)
}

// -------------------------------------------------------------------

// TCrossAllianceInitiateVoteReq

// optional .pb.EAllianceVoteType VoteType = 1;
inline bool TCrossAllianceInitiateVoteReq::has_votetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossAllianceInitiateVoteReq::set_has_votetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossAllianceInitiateVoteReq::clear_has_votetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossAllianceInitiateVoteReq::clear_votetype() {
  votetype_ = 1;
  clear_has_votetype();
}
inline ::pb::EAllianceVoteType TCrossAllianceInitiateVoteReq::votetype() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceInitiateVoteReq.VoteType)
  return static_cast< ::pb::EAllianceVoteType >(votetype_);
}
inline void TCrossAllianceInitiateVoteReq::set_votetype(::pb::EAllianceVoteType value) {
  assert(::pb::EAllianceVoteType_IsValid(value));
  set_has_votetype();
  votetype_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceInitiateVoteReq.VoteType)
}

// optional uint64 GuildId = 2;
inline bool TCrossAllianceInitiateVoteReq::has_guildid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossAllianceInitiateVoteReq::set_has_guildid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossAllianceInitiateVoteReq::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossAllianceInitiateVoteReq::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TCrossAllianceInitiateVoteReq::guildid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceInitiateVoteReq.GuildId)
  return guildid_;
}
inline void TCrossAllianceInitiateVoteReq::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceInitiateVoteReq.GuildId)
}

// -------------------------------------------------------------------

// TCrossAllianceCancelVoteReq

// optional uint64 VoteId = 1;
inline bool TCrossAllianceCancelVoteReq::has_voteid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossAllianceCancelVoteReq::set_has_voteid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossAllianceCancelVoteReq::clear_has_voteid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossAllianceCancelVoteReq::clear_voteid() {
  voteid_ = GOOGLE_ULONGLONG(0);
  clear_has_voteid();
}
inline ::google::protobuf::uint64 TCrossAllianceCancelVoteReq::voteid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceCancelVoteReq.VoteId)
  return voteid_;
}
inline void TCrossAllianceCancelVoteReq::set_voteid(::google::protobuf::uint64 value) {
  set_has_voteid();
  voteid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceCancelVoteReq.VoteId)
}

// -------------------------------------------------------------------

// TCrossAllianceVoteReq

// optional uint64 VoteId = 1;
inline bool TCrossAllianceVoteReq::has_voteid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossAllianceVoteReq::set_has_voteid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossAllianceVoteReq::clear_has_voteid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossAllianceVoteReq::clear_voteid() {
  voteid_ = GOOGLE_ULONGLONG(0);
  clear_has_voteid();
}
inline ::google::protobuf::uint64 TCrossAllianceVoteReq::voteid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceVoteReq.VoteId)
  return voteid_;
}
inline void TCrossAllianceVoteReq::set_voteid(::google::protobuf::uint64 value) {
  set_has_voteid();
  voteid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceVoteReq.VoteId)
}

// optional .pb.EAllianceVoteResult VoteResult = 2;
inline bool TCrossAllianceVoteReq::has_voteresult() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossAllianceVoteReq::set_has_voteresult() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossAllianceVoteReq::clear_has_voteresult() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossAllianceVoteReq::clear_voteresult() {
  voteresult_ = 1;
  clear_has_voteresult();
}
inline ::pb::EAllianceVoteResult TCrossAllianceVoteReq::voteresult() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceVoteReq.VoteResult)
  return static_cast< ::pb::EAllianceVoteResult >(voteresult_);
}
inline void TCrossAllianceVoteReq::set_voteresult(::pb::EAllianceVoteResult value) {
  assert(::pb::EAllianceVoteResult_IsValid(value));
  set_has_voteresult();
  voteresult_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceVoteReq.VoteResult)
}

// -------------------------------------------------------------------

// TCrossAllianceUpgradeScienceReq

// optional uint32 Id = 1;
inline bool TCrossAllianceUpgradeScienceReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossAllianceUpgradeScienceReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossAllianceUpgradeScienceReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossAllianceUpgradeScienceReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TCrossAllianceUpgradeScienceReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceUpgradeScienceReq.Id)
  return id_;
}
inline void TCrossAllianceUpgradeScienceReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceUpgradeScienceReq.Id)
}

// optional uint32 Level = 2;
inline bool TCrossAllianceUpgradeScienceReq::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossAllianceUpgradeScienceReq::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossAllianceUpgradeScienceReq::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossAllianceUpgradeScienceReq::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TCrossAllianceUpgradeScienceReq::level() const {
  // @@protoc_insertion_point(field_get:pb.TCrossAllianceUpgradeScienceReq.Level)
  return level_;
}
inline void TCrossAllianceUpgradeScienceReq::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossAllianceUpgradeScienceReq.Level)
}

// -------------------------------------------------------------------

// TAllianceInfoChange

// optional .pb.TAllianceDetailInfo AllianceDetailInfo = 1;
inline bool TAllianceInfoChange::has_alliancedetailinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAllianceInfoChange::set_has_alliancedetailinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAllianceInfoChange::clear_has_alliancedetailinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAllianceInfoChange::clear_alliancedetailinfo() {
  if (alliancedetailinfo_ != NULL) alliancedetailinfo_->::pb::TAllianceDetailInfo::Clear();
  clear_has_alliancedetailinfo();
}
inline const ::pb::TAllianceDetailInfo& TAllianceInfoChange::alliancedetailinfo() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceInfoChange.AllianceDetailInfo)
  return alliancedetailinfo_ != NULL ? *alliancedetailinfo_ : *default_instance_->alliancedetailinfo_;
}
inline ::pb::TAllianceDetailInfo* TAllianceInfoChange::mutable_alliancedetailinfo() {
  set_has_alliancedetailinfo();
  if (alliancedetailinfo_ == NULL) alliancedetailinfo_ = new ::pb::TAllianceDetailInfo;
  // @@protoc_insertion_point(field_mutable:pb.TAllianceInfoChange.AllianceDetailInfo)
  return alliancedetailinfo_;
}
inline ::pb::TAllianceDetailInfo* TAllianceInfoChange::release_alliancedetailinfo() {
  clear_has_alliancedetailinfo();
  ::pb::TAllianceDetailInfo* temp = alliancedetailinfo_;
  alliancedetailinfo_ = NULL;
  return temp;
}
inline void TAllianceInfoChange::set_allocated_alliancedetailinfo(::pb::TAllianceDetailInfo* alliancedetailinfo) {
  delete alliancedetailinfo_;
  alliancedetailinfo_ = alliancedetailinfo;
  if (alliancedetailinfo) {
    set_has_alliancedetailinfo();
  } else {
    clear_has_alliancedetailinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAllianceInfoChange.AllianceDetailInfo)
}

// -------------------------------------------------------------------

// TAllianceJoinNotify

// optional uint64 AllianceId = 1;
inline bool TAllianceJoinNotify::has_allianceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAllianceJoinNotify::set_has_allianceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAllianceJoinNotify::clear_has_allianceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAllianceJoinNotify::clear_allianceid() {
  allianceid_ = GOOGLE_ULONGLONG(0);
  clear_has_allianceid();
}
inline ::google::protobuf::uint64 TAllianceJoinNotify::allianceid() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceJoinNotify.AllianceId)
  return allianceid_;
}
inline void TAllianceJoinNotify::set_allianceid(::google::protobuf::uint64 value) {
  set_has_allianceid();
  allianceid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceJoinNotify.AllianceId)
}

// -------------------------------------------------------------------

// TAllianceLeaveNotify

// optional uint64 AllianceId = 1;
inline bool TAllianceLeaveNotify::has_allianceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAllianceLeaveNotify::set_has_allianceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAllianceLeaveNotify::clear_has_allianceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAllianceLeaveNotify::clear_allianceid() {
  allianceid_ = GOOGLE_ULONGLONG(0);
  clear_has_allianceid();
}
inline ::google::protobuf::uint64 TAllianceLeaveNotify::allianceid() const {
  // @@protoc_insertion_point(field_get:pb.TAllianceLeaveNotify.AllianceId)
  return allianceid_;
}
inline void TAllianceLeaveNotify::set_allianceid(::google::protobuf::uint64 value) {
  set_has_allianceid();
  allianceid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAllianceLeaveNotify.AllianceId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EAllianceTipType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EAllianceTipType>() {
  return ::pb::EAllianceTipType_descriptor();
}
template <> struct is_proto_enum< ::pb::EAllianceVoteType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EAllianceVoteType>() {
  return ::pb::EAllianceVoteType_descriptor();
}
template <> struct is_proto_enum< ::pb::EAlliancePost> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EAlliancePost>() {
  return ::pb::EAlliancePost_descriptor();
}
template <> struct is_proto_enum< ::pb::EAllianceVoteResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EAllianceVoteResult>() {
  return ::pb::EAllianceVoteResult_descriptor();
}
template <> struct is_proto_enum< ::pb::EAllianceResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EAllianceResult>() {
  return ::pb::EAllianceResult_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fAlliance_2eproto__INCLUDED
