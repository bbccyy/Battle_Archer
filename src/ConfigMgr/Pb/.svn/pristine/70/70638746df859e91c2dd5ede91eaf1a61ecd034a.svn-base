// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CardBuff.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/CardBuff.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCardBuffGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCardBuffGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCardBuffActivateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCardBuffActivateReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fCardBuff_2eproto() {
  protobuf_AddDesc_net_2fCardBuff_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/CardBuff.proto");
  GOOGLE_CHECK(file != NULL);
  TCardInfo_descriptor_ = file->message_type(0);
  static const int TCardInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCardInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCardInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCardInfo, endtime_),
  };
  TCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCardInfo_descriptor_,
      TCardInfo::default_instance_,
      TCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCardInfo));
  TCardBuffGetInfoRsp_descriptor_ = file->message_type(1);
  static const int TCardBuffGetInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCardBuffGetInfoRsp, cardbuffinfoarr_),
  };
  TCardBuffGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCardBuffGetInfoRsp_descriptor_,
      TCardBuffGetInfoRsp::default_instance_,
      TCardBuffGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCardBuffGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCardBuffGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCardBuffGetInfoRsp));
  TCardBuffActivateReq_descriptor_ = file->message_type(2);
  static const int TCardBuffActivateReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCardBuffActivateReq, id_),
  };
  TCardBuffActivateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCardBuffActivateReq_descriptor_,
      TCardBuffActivateReq::default_instance_,
      TCardBuffActivateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCardBuffActivateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCardBuffActivateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCardBuffActivateReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fCardBuff_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCardInfo_descriptor_, &TCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCardBuffGetInfoRsp_descriptor_, &TCardBuffGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCardBuffActivateReq_descriptor_, &TCardBuffActivateReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fCardBuff_2eproto() {
  delete TCardInfo::default_instance_;
  delete TCardInfo_reflection_;
  delete TCardBuffGetInfoRsp::default_instance_;
  delete TCardBuffGetInfoRsp_reflection_;
  delete TCardBuffActivateReq::default_instance_;
  delete TCardBuffActivateReq_reflection_;
}

void protobuf_AddDesc_net_2fCardBuff_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022net/CardBuff.proto\022\002pb\"7\n\tTCardInfo\022\n\n"
    "\002Id\030\001 \001(\r\022\r\n\005State\030\002 \001(\r\022\017\n\007EndTime\030\003 \001("
    "\004\"=\n\023TCardBuffGetInfoRsp\022&\n\017CardBuffInfo"
    "Arr\030\001 \003(\0132\r.pb.TCardInfo\"\"\n\024TCardBuffAct"
    "ivateReq\022\n\n\002Id\030\001 \001(\r", 180);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/CardBuff.proto", &protobuf_RegisterTypes);
  TCardInfo::default_instance_ = new TCardInfo();
  TCardBuffGetInfoRsp::default_instance_ = new TCardBuffGetInfoRsp();
  TCardBuffActivateReq::default_instance_ = new TCardBuffActivateReq();
  TCardInfo::default_instance_->InitAsDefaultInstance();
  TCardBuffGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TCardBuffActivateReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fCardBuff_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fCardBuff_2eproto {
  StaticDescriptorInitializer_net_2fCardBuff_2eproto() {
    protobuf_AddDesc_net_2fCardBuff_2eproto();
  }
} static_descriptor_initializer_net_2fCardBuff_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TCardInfo::kIdFieldNumber;
const int TCardInfo::kStateFieldNumber;
const int TCardInfo::kEndTimeFieldNumber;
#endif  // !_MSC_VER

TCardInfo::TCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCardInfo)
}

void TCardInfo::InitAsDefaultInstance() {
}

TCardInfo::TCardInfo(const TCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCardInfo)
}

void TCardInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  state_ = 0u;
  endtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCardInfo::~TCardInfo() {
  // @@protoc_insertion_point(destructor:pb.TCardInfo)
  SharedDtor();
}

void TCardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCardInfo_descriptor_;
}

const TCardInfo& TCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCardBuff_2eproto();
  return *default_instance_;
}

TCardInfo* TCardInfo::default_instance_ = NULL;

TCardInfo* TCardInfo::New() const {
  return new TCardInfo;
}

void TCardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, endtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_State;
        break;
      }

      // optional uint32 State = 2;
      case 2: {
        if (tag == 16) {
         parse_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EndTime;
        break;
      }

      // optional uint64 EndTime = 3;
      case 3: {
        if (tag == 24) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCardInfo)
  return false;
#undef DO_
}

void TCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCardInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 State = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCardInfo)
}

::google::protobuf::uint8* TCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCardInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 State = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCardInfo)
  return target;
}

int TCardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 State = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint64 EndTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCardInfo::MergeFrom(const TCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCardInfo::CopyFrom(const TCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCardInfo::IsInitialized() const {

  return true;
}

void TCardInfo::Swap(TCardInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCardInfo_descriptor_;
  metadata.reflection = TCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCardBuffGetInfoRsp::kCardBuffInfoArrFieldNumber;
#endif  // !_MSC_VER

TCardBuffGetInfoRsp::TCardBuffGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCardBuffGetInfoRsp)
}

void TCardBuffGetInfoRsp::InitAsDefaultInstance() {
}

TCardBuffGetInfoRsp::TCardBuffGetInfoRsp(const TCardBuffGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCardBuffGetInfoRsp)
}

void TCardBuffGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCardBuffGetInfoRsp::~TCardBuffGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TCardBuffGetInfoRsp)
  SharedDtor();
}

void TCardBuffGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCardBuffGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCardBuffGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCardBuffGetInfoRsp_descriptor_;
}

const TCardBuffGetInfoRsp& TCardBuffGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCardBuff_2eproto();
  return *default_instance_;
}

TCardBuffGetInfoRsp* TCardBuffGetInfoRsp::default_instance_ = NULL;

TCardBuffGetInfoRsp* TCardBuffGetInfoRsp::New() const {
  return new TCardBuffGetInfoRsp;
}

void TCardBuffGetInfoRsp::Clear() {
  cardbuffinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCardBuffGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCardBuffGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCardInfo CardBuffInfoArr = 1;
      case 1: {
        if (tag == 10) {
         parse_CardBuffInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cardbuffinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_CardBuffInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCardBuffGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCardBuffGetInfoRsp)
  return false;
#undef DO_
}

void TCardBuffGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCardBuffGetInfoRsp)
  // repeated .pb.TCardInfo CardBuffInfoArr = 1;
  for (int i = 0; i < this->cardbuffinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cardbuffinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCardBuffGetInfoRsp)
}

::google::protobuf::uint8* TCardBuffGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCardBuffGetInfoRsp)
  // repeated .pb.TCardInfo CardBuffInfoArr = 1;
  for (int i = 0; i < this->cardbuffinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cardbuffinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCardBuffGetInfoRsp)
  return target;
}

int TCardBuffGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCardInfo CardBuffInfoArr = 1;
  total_size += 1 * this->cardbuffinfoarr_size();
  for (int i = 0; i < this->cardbuffinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cardbuffinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCardBuffGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCardBuffGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCardBuffGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCardBuffGetInfoRsp::MergeFrom(const TCardBuffGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardbuffinfoarr_.MergeFrom(from.cardbuffinfoarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCardBuffGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCardBuffGetInfoRsp::CopyFrom(const TCardBuffGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCardBuffGetInfoRsp::IsInitialized() const {

  return true;
}

void TCardBuffGetInfoRsp::Swap(TCardBuffGetInfoRsp* other) {
  if (other != this) {
    cardbuffinfoarr_.Swap(&other->cardbuffinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCardBuffGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCardBuffGetInfoRsp_descriptor_;
  metadata.reflection = TCardBuffGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCardBuffActivateReq::kIdFieldNumber;
#endif  // !_MSC_VER

TCardBuffActivateReq::TCardBuffActivateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCardBuffActivateReq)
}

void TCardBuffActivateReq::InitAsDefaultInstance() {
}

TCardBuffActivateReq::TCardBuffActivateReq(const TCardBuffActivateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCardBuffActivateReq)
}

void TCardBuffActivateReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCardBuffActivateReq::~TCardBuffActivateReq() {
  // @@protoc_insertion_point(destructor:pb.TCardBuffActivateReq)
  SharedDtor();
}

void TCardBuffActivateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCardBuffActivateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCardBuffActivateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCardBuffActivateReq_descriptor_;
}

const TCardBuffActivateReq& TCardBuffActivateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCardBuff_2eproto();
  return *default_instance_;
}

TCardBuffActivateReq* TCardBuffActivateReq::default_instance_ = NULL;

TCardBuffActivateReq* TCardBuffActivateReq::New() const {
  return new TCardBuffActivateReq;
}

void TCardBuffActivateReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCardBuffActivateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCardBuffActivateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCardBuffActivateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCardBuffActivateReq)
  return false;
#undef DO_
}

void TCardBuffActivateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCardBuffActivateReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCardBuffActivateReq)
}

::google::protobuf::uint8* TCardBuffActivateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCardBuffActivateReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCardBuffActivateReq)
  return target;
}

int TCardBuffActivateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCardBuffActivateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCardBuffActivateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCardBuffActivateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCardBuffActivateReq::MergeFrom(const TCardBuffActivateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCardBuffActivateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCardBuffActivateReq::CopyFrom(const TCardBuffActivateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCardBuffActivateReq::IsInitialized() const {

  return true;
}

void TCardBuffActivateReq::Swap(TCardBuffActivateReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCardBuffActivateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCardBuffActivateReq_descriptor_;
  metadata.reflection = TCardBuffActivateReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
