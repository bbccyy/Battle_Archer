// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/BigHunt.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/BigHunt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TBigHuntDimensionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntDimensionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntSelfDynamicInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntSelfDynamicInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntMapDynamicInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntMapDynamicInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntBossHpInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntBossHpInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntBossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntMonsterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntMonsterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntHidPosInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntHidPosInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntFormationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntFormationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntEnterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntEnterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntGetUserInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntGetUserInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntSetAtkFormationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntSetAtkFormationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntGetAtkFormationRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntGetAtkFormationRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntGetBattleArgsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntGetBattleArgsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntGetBattleArgsRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntGetBattleArgsRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntReportBattleNormaMonsterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntReportBattleNormaMonsterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntReportBattleEliteMonsterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntReportBattleEliteMonsterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntReportBattleStakeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntReportBattleStakeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntReportBattleMonsterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntReportBattleMonsterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntReportBattleBossReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntReportBattleBossReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntReportBattleBossRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntReportBattleBossRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntGetSelfDynamicInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntGetSelfDynamicInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntReceiveAllianceCoinRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntReceiveAllianceCoinRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntReceiveAllianceCoinRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntReceiveAllianceCoinRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntBuyChallengeNumReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntBuyChallengeNumReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntUpgradeDimensionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntUpgradeDimensionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntAllianceCoinRankList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntAllianceCoinRankList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntAllianceCoinListRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntAllianceCoinListRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntAllianceCoinListRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntAllianceCoinListRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntBossSelfDamageRankList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntBossSelfDamageRankList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntGetBossSelfDamageRankListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntGetBossSelfDamageRankListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntGetBossSelfDamageRankListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntGetBossSelfDamageRankListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntGetSelfCoinRankList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntGetSelfCoinRankList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntGetSelfCoinRankListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntGetSelfCoinRankListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntGetSelfCoinRankListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntGetSelfCoinRankListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntCancelSuppressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntCancelSuppressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntMonsterBeKilledInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntMonsterBeKilledInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntMonsterBeKilledNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntMonsterBeKilledNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntDynamicNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntDynamicNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntUserDimensionNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntUserDimensionNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntCancelSuppressNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntCancelSuppressNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBigHuntUserDataChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBigHuntUserDataChangeNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EBigHuntDynamicType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBigHuntSuccessType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBigHuntKillType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fBigHunt_2eproto() {
  protobuf_AddDesc_net_2fBigHunt_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/BigHunt.proto");
  GOOGLE_CHECK(file != NULL);
  TBigHuntDimensionInfo_descriptor_ = file->message_type(0);
  static const int TBigHuntDimensionInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntDimensionInfo, dimensionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntDimensionInfo, level_),
  };
  TBigHuntDimensionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntDimensionInfo_descriptor_,
      TBigHuntDimensionInfo::default_instance_,
      TBigHuntDimensionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntDimensionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntDimensionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntDimensionInfo));
  TBigHuntSelfDynamicInfo_descriptor_ = file->message_type(1);
  static const int TBigHuntSelfDynamicInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntSelfDynamicInfo, dynamictype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntSelfDynamicInfo, recordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntSelfDynamicInfo, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntSelfDynamicInfo, recordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntSelfDynamicInfo, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntSelfDynamicInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntSelfDynamicInfo, nextmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntSelfDynamicInfo, bossdamage_),
  };
  TBigHuntSelfDynamicInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntSelfDynamicInfo_descriptor_,
      TBigHuntSelfDynamicInfo::default_instance_,
      TBigHuntSelfDynamicInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntSelfDynamicInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntSelfDynamicInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntSelfDynamicInfo));
  TBigHuntMapDynamicInfo_descriptor_ = file->message_type(2);
  static const int TBigHuntMapDynamicInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntMapDynamicInfo, dynamictype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntMapDynamicInfo, dynamictime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntMapDynamicInfo, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntMapDynamicInfo, recordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntMapDynamicInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntMapDynamicInfo, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntMapDynamicInfo, nextmapid_),
  };
  TBigHuntMapDynamicInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntMapDynamicInfo_descriptor_,
      TBigHuntMapDynamicInfo::default_instance_,
      TBigHuntMapDynamicInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntMapDynamicInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntMapDynamicInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntMapDynamicInfo));
  TBigHuntBossHpInfo_descriptor_ = file->message_type(3);
  static const int TBigHuntBossHpInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntBossHpInfo, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntBossHpInfo, hppercentage_),
  };
  TBigHuntBossHpInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntBossHpInfo_descriptor_,
      TBigHuntBossHpInfo::default_instance_,
      TBigHuntBossHpInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntBossHpInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntBossHpInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntBossHpInfo));
  TBigHuntBossInfo_descriptor_ = file->message_type(4);
  static const int TBigHuntBossInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntBossInfo, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntBossInfo, hppercentage_),
  };
  TBigHuntBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntBossInfo_descriptor_,
      TBigHuntBossInfo::default_instance_,
      TBigHuntBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntBossInfo));
  TBigHuntMonsterInfo_descriptor_ = file->message_type(5);
  static const int TBigHuntMonsterInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntMonsterInfo, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntMonsterInfo, suppressuserinfo_),
  };
  TBigHuntMonsterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntMonsterInfo_descriptor_,
      TBigHuntMonsterInfo::default_instance_,
      TBigHuntMonsterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntMonsterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntMonsterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntMonsterInfo));
  TBigHuntHidPosInfo_descriptor_ = file->message_type(6);
  static const int TBigHuntHidPosInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntHidPosInfo, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntHidPosInfo, pos_),
  };
  TBigHuntHidPosInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntHidPosInfo_descriptor_,
      TBigHuntHidPosInfo::default_instance_,
      TBigHuntHidPosInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntHidPosInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntHidPosInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntHidPosInfo));
  TBigHuntFormationInfo_descriptor_ = file->message_type(7);
  static const int TBigHuntFormationInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntFormationInfo, formationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntFormationInfo, hidposarr_),
  };
  TBigHuntFormationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntFormationInfo_descriptor_,
      TBigHuntFormationInfo::default_instance_,
      TBigHuntFormationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntFormationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntFormationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntFormationInfo));
  TBigHuntEnterRsp_descriptor_ = file->message_type(8);
  static const int TBigHuntEnterRsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntEnterRsp, mapdynamicinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntEnterRsp, bossinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntEnterRsp, monsterinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntEnterRsp, selfdynamicinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntEnterRsp, curmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntEnterRsp, formmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntEnterRsp, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntEnterRsp, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntEnterRsp, bossid_),
  };
  TBigHuntEnterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntEnterRsp_descriptor_,
      TBigHuntEnterRsp::default_instance_,
      TBigHuntEnterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntEnterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntEnterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntEnterRsp));
  TBigHuntGetUserInfoRsp_descriptor_ = file->message_type(9);
  static const int TBigHuntGetUserInfoRsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetUserInfoRsp, leftchallengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetUserInfoRsp, buychallengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetUserInfoRsp, suppressmonsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetUserInfoRsp, selfcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetUserInfoRsp, alliancecoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetUserInfoRsp, rewardidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetUserInfoRsp, lastrecovertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetUserInfoRsp, selfdimensionarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetUserInfoRsp, curmapid_),
  };
  TBigHuntGetUserInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntGetUserInfoRsp_descriptor_,
      TBigHuntGetUserInfoRsp::default_instance_,
      TBigHuntGetUserInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetUserInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetUserInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntGetUserInfoRsp));
  TBigHuntSetAtkFormationReq_descriptor_ = file->message_type(10);
  static const int TBigHuntSetAtkFormationReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntSetAtkFormationReq, formationarr_),
  };
  TBigHuntSetAtkFormationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntSetAtkFormationReq_descriptor_,
      TBigHuntSetAtkFormationReq::default_instance_,
      TBigHuntSetAtkFormationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntSetAtkFormationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntSetAtkFormationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntSetAtkFormationReq));
  TBigHuntGetAtkFormationRsp_descriptor_ = file->message_type(11);
  static const int TBigHuntGetAtkFormationRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetAtkFormationRsp, formationarr_),
  };
  TBigHuntGetAtkFormationRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntGetAtkFormationRsp_descriptor_,
      TBigHuntGetAtkFormationRsp::default_instance_,
      TBigHuntGetAtkFormationRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetAtkFormationRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetAtkFormationRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntGetAtkFormationRsp));
  TBigHuntGetBattleArgsReq_descriptor_ = file->message_type(12);
  static const int TBigHuntGetBattleArgsReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetBattleArgsReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetBattleArgsReq, battlecheckparam_),
  };
  TBigHuntGetBattleArgsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntGetBattleArgsReq_descriptor_,
      TBigHuntGetBattleArgsReq::default_instance_,
      TBigHuntGetBattleArgsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetBattleArgsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetBattleArgsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntGetBattleArgsReq));
  TBigHuntGetBattleArgsRsp_descriptor_ = file->message_type(13);
  static const int TBigHuntGetBattleArgsRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetBattleArgsRsp, battleargs_),
  };
  TBigHuntGetBattleArgsRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntGetBattleArgsRsp_descriptor_,
      TBigHuntGetBattleArgsRsp::default_instance_,
      TBigHuntGetBattleArgsRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetBattleArgsRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetBattleArgsRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntGetBattleArgsRsp));
  TBigHuntReportBattleNormaMonsterReq_descriptor_ = file->message_type(14);
  static const int TBigHuntReportBattleNormaMonsterReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleNormaMonsterReq, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleNormaMonsterReq, battleret_),
  };
  TBigHuntReportBattleNormaMonsterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntReportBattleNormaMonsterReq_descriptor_,
      TBigHuntReportBattleNormaMonsterReq::default_instance_,
      TBigHuntReportBattleNormaMonsterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleNormaMonsterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleNormaMonsterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntReportBattleNormaMonsterReq));
  TBigHuntReportBattleEliteMonsterReq_descriptor_ = file->message_type(15);
  static const int TBigHuntReportBattleEliteMonsterReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleEliteMonsterReq, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleEliteMonsterReq, battleret_),
  };
  TBigHuntReportBattleEliteMonsterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntReportBattleEliteMonsterReq_descriptor_,
      TBigHuntReportBattleEliteMonsterReq::default_instance_,
      TBigHuntReportBattleEliteMonsterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleEliteMonsterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleEliteMonsterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntReportBattleEliteMonsterReq));
  TBigHuntReportBattleStakeReq_descriptor_ = file->message_type(16);
  static const int TBigHuntReportBattleStakeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleStakeReq, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleStakeReq, battleret_),
  };
  TBigHuntReportBattleStakeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntReportBattleStakeReq_descriptor_,
      TBigHuntReportBattleStakeReq::default_instance_,
      TBigHuntReportBattleStakeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleStakeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleStakeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntReportBattleStakeReq));
  TBigHuntReportBattleMonsterRsp_descriptor_ = file->message_type(17);
  static const int TBigHuntReportBattleMonsterRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleMonsterRsp, killtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleMonsterRsp, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleMonsterRsp, issuccess_),
  };
  TBigHuntReportBattleMonsterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntReportBattleMonsterRsp_descriptor_,
      TBigHuntReportBattleMonsterRsp::default_instance_,
      TBigHuntReportBattleMonsterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleMonsterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleMonsterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntReportBattleMonsterRsp));
  TBigHuntReportBattleBossReq_descriptor_ = file->message_type(18);
  static const int TBigHuntReportBattleBossReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleBossReq, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleBossReq, battleret_),
  };
  TBigHuntReportBattleBossReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntReportBattleBossReq_descriptor_,
      TBigHuntReportBattleBossReq::default_instance_,
      TBigHuntReportBattleBossReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleBossReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleBossReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntReportBattleBossReq));
  TBigHuntReportBattleBossRsp_descriptor_ = file->message_type(19);
  static const int TBigHuntReportBattleBossRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleBossRsp, iskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleBossRsp, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleBossRsp, hppercentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleBossRsp, issuccess_),
  };
  TBigHuntReportBattleBossRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntReportBattleBossRsp_descriptor_,
      TBigHuntReportBattleBossRsp::default_instance_,
      TBigHuntReportBattleBossRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleBossRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReportBattleBossRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntReportBattleBossRsp));
  TBigHuntGetSelfDynamicInfoRsp_descriptor_ = file->message_type(20);
  static const int TBigHuntGetSelfDynamicInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetSelfDynamicInfoRsp, dynamicarr_),
  };
  TBigHuntGetSelfDynamicInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntGetSelfDynamicInfoRsp_descriptor_,
      TBigHuntGetSelfDynamicInfoRsp::default_instance_,
      TBigHuntGetSelfDynamicInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetSelfDynamicInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetSelfDynamicInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntGetSelfDynamicInfoRsp));
  TBigHuntReceiveAllianceCoinRewardReq_descriptor_ = file->message_type(21);
  static const int TBigHuntReceiveAllianceCoinRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReceiveAllianceCoinRewardReq, id_),
  };
  TBigHuntReceiveAllianceCoinRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntReceiveAllianceCoinRewardReq_descriptor_,
      TBigHuntReceiveAllianceCoinRewardReq::default_instance_,
      TBigHuntReceiveAllianceCoinRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReceiveAllianceCoinRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReceiveAllianceCoinRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntReceiveAllianceCoinRewardReq));
  TBigHuntReceiveAllianceCoinRewardRsp_descriptor_ = file->message_type(22);
  static const int TBigHuntReceiveAllianceCoinRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReceiveAllianceCoinRewardRsp, rewardarr_),
  };
  TBigHuntReceiveAllianceCoinRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntReceiveAllianceCoinRewardRsp_descriptor_,
      TBigHuntReceiveAllianceCoinRewardRsp::default_instance_,
      TBigHuntReceiveAllianceCoinRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReceiveAllianceCoinRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntReceiveAllianceCoinRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntReceiveAllianceCoinRewardRsp));
  TBigHuntBuyChallengeNumReq_descriptor_ = file->message_type(23);
  static const int TBigHuntBuyChallengeNumReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntBuyChallengeNumReq, num_),
  };
  TBigHuntBuyChallengeNumReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntBuyChallengeNumReq_descriptor_,
      TBigHuntBuyChallengeNumReq::default_instance_,
      TBigHuntBuyChallengeNumReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntBuyChallengeNumReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntBuyChallengeNumReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntBuyChallengeNumReq));
  TBigHuntUpgradeDimensionReq_descriptor_ = file->message_type(24);
  static const int TBigHuntUpgradeDimensionReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntUpgradeDimensionReq, id_),
  };
  TBigHuntUpgradeDimensionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntUpgradeDimensionReq_descriptor_,
      TBigHuntUpgradeDimensionReq::default_instance_,
      TBigHuntUpgradeDimensionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntUpgradeDimensionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntUpgradeDimensionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntUpgradeDimensionReq));
  TBigHuntAllianceCoinRankList_descriptor_ = file->message_type(25);
  static const int TBigHuntAllianceCoinRankList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntAllianceCoinRankList, allianceinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntAllianceCoinRankList, coinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntAllianceCoinRankList, rank_),
  };
  TBigHuntAllianceCoinRankList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntAllianceCoinRankList_descriptor_,
      TBigHuntAllianceCoinRankList::default_instance_,
      TBigHuntAllianceCoinRankList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntAllianceCoinRankList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntAllianceCoinRankList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntAllianceCoinRankList));
  TBigHuntAllianceCoinListRankReq_descriptor_ = file->message_type(26);
  static const int TBigHuntAllianceCoinListRankReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntAllianceCoinListRankReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntAllianceCoinListRankReq, limit_),
  };
  TBigHuntAllianceCoinListRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntAllianceCoinListRankReq_descriptor_,
      TBigHuntAllianceCoinListRankReq::default_instance_,
      TBigHuntAllianceCoinListRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntAllianceCoinListRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntAllianceCoinListRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntAllianceCoinListRankReq));
  TBigHuntAllianceCoinListRankRsp_descriptor_ = file->message_type(27);
  static const int TBigHuntAllianceCoinListRankRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntAllianceCoinListRankRsp, selfalliancerank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntAllianceCoinListRankRsp, alliancelistarr_),
  };
  TBigHuntAllianceCoinListRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntAllianceCoinListRankRsp_descriptor_,
      TBigHuntAllianceCoinListRankRsp::default_instance_,
      TBigHuntAllianceCoinListRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntAllianceCoinListRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntAllianceCoinListRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntAllianceCoinListRankRsp));
  TBigHuntBossSelfDamageRankList_descriptor_ = file->message_type(28);
  static const int TBigHuntBossSelfDamageRankList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntBossSelfDamageRankList, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntBossSelfDamageRankList, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntBossSelfDamageRankList, rank_),
  };
  TBigHuntBossSelfDamageRankList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntBossSelfDamageRankList_descriptor_,
      TBigHuntBossSelfDamageRankList::default_instance_,
      TBigHuntBossSelfDamageRankList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntBossSelfDamageRankList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntBossSelfDamageRankList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntBossSelfDamageRankList));
  TBigHuntGetBossSelfDamageRankListReq_descriptor_ = file->message_type(29);
  static const int TBigHuntGetBossSelfDamageRankListReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetBossSelfDamageRankListReq, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetBossSelfDamageRankListReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetBossSelfDamageRankListReq, limit_),
  };
  TBigHuntGetBossSelfDamageRankListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntGetBossSelfDamageRankListReq_descriptor_,
      TBigHuntGetBossSelfDamageRankListReq::default_instance_,
      TBigHuntGetBossSelfDamageRankListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetBossSelfDamageRankListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetBossSelfDamageRankListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntGetBossSelfDamageRankListReq));
  TBigHuntGetBossSelfDamageRankListRsp_descriptor_ = file->message_type(30);
  static const int TBigHuntGetBossSelfDamageRankListRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetBossSelfDamageRankListRsp, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetBossSelfDamageRankListRsp, userlistarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetBossSelfDamageRankListRsp, bossid_),
  };
  TBigHuntGetBossSelfDamageRankListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntGetBossSelfDamageRankListRsp_descriptor_,
      TBigHuntGetBossSelfDamageRankListRsp::default_instance_,
      TBigHuntGetBossSelfDamageRankListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetBossSelfDamageRankListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetBossSelfDamageRankListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntGetBossSelfDamageRankListRsp));
  TBigHuntGetSelfCoinRankList_descriptor_ = file->message_type(31);
  static const int TBigHuntGetSelfCoinRankList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetSelfCoinRankList, coinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetSelfCoinRankList, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetSelfCoinRankList, rank_),
  };
  TBigHuntGetSelfCoinRankList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntGetSelfCoinRankList_descriptor_,
      TBigHuntGetSelfCoinRankList::default_instance_,
      TBigHuntGetSelfCoinRankList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetSelfCoinRankList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetSelfCoinRankList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntGetSelfCoinRankList));
  TBigHuntGetSelfCoinRankListReq_descriptor_ = file->message_type(32);
  static const int TBigHuntGetSelfCoinRankListReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetSelfCoinRankListReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetSelfCoinRankListReq, limit_),
  };
  TBigHuntGetSelfCoinRankListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntGetSelfCoinRankListReq_descriptor_,
      TBigHuntGetSelfCoinRankListReq::default_instance_,
      TBigHuntGetSelfCoinRankListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetSelfCoinRankListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetSelfCoinRankListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntGetSelfCoinRankListReq));
  TBigHuntGetSelfCoinRankListRsp_descriptor_ = file->message_type(33);
  static const int TBigHuntGetSelfCoinRankListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetSelfCoinRankListRsp, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetSelfCoinRankListRsp, alluserrankinfo_),
  };
  TBigHuntGetSelfCoinRankListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntGetSelfCoinRankListRsp_descriptor_,
      TBigHuntGetSelfCoinRankListRsp::default_instance_,
      TBigHuntGetSelfCoinRankListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetSelfCoinRankListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntGetSelfCoinRankListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntGetSelfCoinRankListRsp));
  TBigHuntCancelSuppressReq_descriptor_ = file->message_type(34);
  static const int TBigHuntCancelSuppressReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntCancelSuppressReq, monsterid_),
  };
  TBigHuntCancelSuppressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntCancelSuppressReq_descriptor_,
      TBigHuntCancelSuppressReq::default_instance_,
      TBigHuntCancelSuppressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntCancelSuppressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntCancelSuppressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntCancelSuppressReq));
  TBigHuntMonsterBeKilledInfo_descriptor_ = file->message_type(35);
  static const int TBigHuntMonsterBeKilledInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntMonsterBeKilledInfo, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntMonsterBeKilledInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntMonsterBeKilledInfo, userinfo_),
  };
  TBigHuntMonsterBeKilledInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntMonsterBeKilledInfo_descriptor_,
      TBigHuntMonsterBeKilledInfo::default_instance_,
      TBigHuntMonsterBeKilledInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntMonsterBeKilledInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntMonsterBeKilledInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntMonsterBeKilledInfo));
  TBigHuntMonsterBeKilledNotify_descriptor_ = file->message_type(36);
  static const int TBigHuntMonsterBeKilledNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntMonsterBeKilledNotify, monsterinfo_),
  };
  TBigHuntMonsterBeKilledNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntMonsterBeKilledNotify_descriptor_,
      TBigHuntMonsterBeKilledNotify::default_instance_,
      TBigHuntMonsterBeKilledNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntMonsterBeKilledNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntMonsterBeKilledNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntMonsterBeKilledNotify));
  TBigHuntDynamicNotify_descriptor_ = file->message_type(37);
  static const int TBigHuntDynamicNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntDynamicNotify, recordinfo_),
  };
  TBigHuntDynamicNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntDynamicNotify_descriptor_,
      TBigHuntDynamicNotify::default_instance_,
      TBigHuntDynamicNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntDynamicNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntDynamicNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntDynamicNotify));
  TBigHuntUserDimensionNotify_descriptor_ = file->message_type(38);
  static const int TBigHuntUserDimensionNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntUserDimensionNotify, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntUserDimensionNotify, nowlevel_),
  };
  TBigHuntUserDimensionNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntUserDimensionNotify_descriptor_,
      TBigHuntUserDimensionNotify::default_instance_,
      TBigHuntUserDimensionNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntUserDimensionNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntUserDimensionNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntUserDimensionNotify));
  TBigHuntCancelSuppressNotify_descriptor_ = file->message_type(39);
  static const int TBigHuntCancelSuppressNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntCancelSuppressNotify, monsterid_),
  };
  TBigHuntCancelSuppressNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntCancelSuppressNotify_descriptor_,
      TBigHuntCancelSuppressNotify::default_instance_,
      TBigHuntCancelSuppressNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntCancelSuppressNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntCancelSuppressNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntCancelSuppressNotify));
  TBigHuntUserDataChangeNotify_descriptor_ = file->message_type(40);
  static const int TBigHuntUserDataChangeNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntUserDataChangeNotify, leftchallengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntUserDataChangeNotify, selfcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntUserDataChangeNotify, alliancecoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntUserDataChangeNotify, elitemonster_),
  };
  TBigHuntUserDataChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBigHuntUserDataChangeNotify_descriptor_,
      TBigHuntUserDataChangeNotify::default_instance_,
      TBigHuntUserDataChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntUserDataChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBigHuntUserDataChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBigHuntUserDataChangeNotify));
  EBigHuntDynamicType_descriptor_ = file->enum_type(0);
  EBigHuntSuccessType_descriptor_ = file->enum_type(1);
  EBigHuntKillType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fBigHunt_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntDimensionInfo_descriptor_, &TBigHuntDimensionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntSelfDynamicInfo_descriptor_, &TBigHuntSelfDynamicInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntMapDynamicInfo_descriptor_, &TBigHuntMapDynamicInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntBossHpInfo_descriptor_, &TBigHuntBossHpInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntBossInfo_descriptor_, &TBigHuntBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntMonsterInfo_descriptor_, &TBigHuntMonsterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntHidPosInfo_descriptor_, &TBigHuntHidPosInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntFormationInfo_descriptor_, &TBigHuntFormationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntEnterRsp_descriptor_, &TBigHuntEnterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntGetUserInfoRsp_descriptor_, &TBigHuntGetUserInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntSetAtkFormationReq_descriptor_, &TBigHuntSetAtkFormationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntGetAtkFormationRsp_descriptor_, &TBigHuntGetAtkFormationRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntGetBattleArgsReq_descriptor_, &TBigHuntGetBattleArgsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntGetBattleArgsRsp_descriptor_, &TBigHuntGetBattleArgsRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntReportBattleNormaMonsterReq_descriptor_, &TBigHuntReportBattleNormaMonsterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntReportBattleEliteMonsterReq_descriptor_, &TBigHuntReportBattleEliteMonsterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntReportBattleStakeReq_descriptor_, &TBigHuntReportBattleStakeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntReportBattleMonsterRsp_descriptor_, &TBigHuntReportBattleMonsterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntReportBattleBossReq_descriptor_, &TBigHuntReportBattleBossReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntReportBattleBossRsp_descriptor_, &TBigHuntReportBattleBossRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntGetSelfDynamicInfoRsp_descriptor_, &TBigHuntGetSelfDynamicInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntReceiveAllianceCoinRewardReq_descriptor_, &TBigHuntReceiveAllianceCoinRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntReceiveAllianceCoinRewardRsp_descriptor_, &TBigHuntReceiveAllianceCoinRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntBuyChallengeNumReq_descriptor_, &TBigHuntBuyChallengeNumReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntUpgradeDimensionReq_descriptor_, &TBigHuntUpgradeDimensionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntAllianceCoinRankList_descriptor_, &TBigHuntAllianceCoinRankList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntAllianceCoinListRankReq_descriptor_, &TBigHuntAllianceCoinListRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntAllianceCoinListRankRsp_descriptor_, &TBigHuntAllianceCoinListRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntBossSelfDamageRankList_descriptor_, &TBigHuntBossSelfDamageRankList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntGetBossSelfDamageRankListReq_descriptor_, &TBigHuntGetBossSelfDamageRankListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntGetBossSelfDamageRankListRsp_descriptor_, &TBigHuntGetBossSelfDamageRankListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntGetSelfCoinRankList_descriptor_, &TBigHuntGetSelfCoinRankList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntGetSelfCoinRankListReq_descriptor_, &TBigHuntGetSelfCoinRankListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntGetSelfCoinRankListRsp_descriptor_, &TBigHuntGetSelfCoinRankListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntCancelSuppressReq_descriptor_, &TBigHuntCancelSuppressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntMonsterBeKilledInfo_descriptor_, &TBigHuntMonsterBeKilledInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntMonsterBeKilledNotify_descriptor_, &TBigHuntMonsterBeKilledNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntDynamicNotify_descriptor_, &TBigHuntDynamicNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntUserDimensionNotify_descriptor_, &TBigHuntUserDimensionNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntCancelSuppressNotify_descriptor_, &TBigHuntCancelSuppressNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBigHuntUserDataChangeNotify_descriptor_, &TBigHuntUserDataChangeNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fBigHunt_2eproto() {
  delete TBigHuntDimensionInfo::default_instance_;
  delete TBigHuntDimensionInfo_reflection_;
  delete TBigHuntSelfDynamicInfo::default_instance_;
  delete TBigHuntSelfDynamicInfo_reflection_;
  delete TBigHuntMapDynamicInfo::default_instance_;
  delete TBigHuntMapDynamicInfo_reflection_;
  delete TBigHuntBossHpInfo::default_instance_;
  delete TBigHuntBossHpInfo_reflection_;
  delete TBigHuntBossInfo::default_instance_;
  delete TBigHuntBossInfo_reflection_;
  delete TBigHuntMonsterInfo::default_instance_;
  delete TBigHuntMonsterInfo_reflection_;
  delete TBigHuntHidPosInfo::default_instance_;
  delete TBigHuntHidPosInfo_reflection_;
  delete TBigHuntFormationInfo::default_instance_;
  delete TBigHuntFormationInfo_reflection_;
  delete TBigHuntEnterRsp::default_instance_;
  delete TBigHuntEnterRsp_reflection_;
  delete TBigHuntGetUserInfoRsp::default_instance_;
  delete TBigHuntGetUserInfoRsp_reflection_;
  delete TBigHuntSetAtkFormationReq::default_instance_;
  delete TBigHuntSetAtkFormationReq_reflection_;
  delete TBigHuntGetAtkFormationRsp::default_instance_;
  delete TBigHuntGetAtkFormationRsp_reflection_;
  delete TBigHuntGetBattleArgsReq::default_instance_;
  delete TBigHuntGetBattleArgsReq_reflection_;
  delete TBigHuntGetBattleArgsRsp::default_instance_;
  delete TBigHuntGetBattleArgsRsp_reflection_;
  delete TBigHuntReportBattleNormaMonsterReq::default_instance_;
  delete TBigHuntReportBattleNormaMonsterReq_reflection_;
  delete TBigHuntReportBattleEliteMonsterReq::default_instance_;
  delete TBigHuntReportBattleEliteMonsterReq_reflection_;
  delete TBigHuntReportBattleStakeReq::default_instance_;
  delete TBigHuntReportBattleStakeReq_reflection_;
  delete TBigHuntReportBattleMonsterRsp::default_instance_;
  delete TBigHuntReportBattleMonsterRsp_reflection_;
  delete TBigHuntReportBattleBossReq::default_instance_;
  delete TBigHuntReportBattleBossReq_reflection_;
  delete TBigHuntReportBattleBossRsp::default_instance_;
  delete TBigHuntReportBattleBossRsp_reflection_;
  delete TBigHuntGetSelfDynamicInfoRsp::default_instance_;
  delete TBigHuntGetSelfDynamicInfoRsp_reflection_;
  delete TBigHuntReceiveAllianceCoinRewardReq::default_instance_;
  delete TBigHuntReceiveAllianceCoinRewardReq_reflection_;
  delete TBigHuntReceiveAllianceCoinRewardRsp::default_instance_;
  delete TBigHuntReceiveAllianceCoinRewardRsp_reflection_;
  delete TBigHuntBuyChallengeNumReq::default_instance_;
  delete TBigHuntBuyChallengeNumReq_reflection_;
  delete TBigHuntUpgradeDimensionReq::default_instance_;
  delete TBigHuntUpgradeDimensionReq_reflection_;
  delete TBigHuntAllianceCoinRankList::default_instance_;
  delete TBigHuntAllianceCoinRankList_reflection_;
  delete TBigHuntAllianceCoinListRankReq::default_instance_;
  delete TBigHuntAllianceCoinListRankReq_reflection_;
  delete TBigHuntAllianceCoinListRankRsp::default_instance_;
  delete TBigHuntAllianceCoinListRankRsp_reflection_;
  delete TBigHuntBossSelfDamageRankList::default_instance_;
  delete TBigHuntBossSelfDamageRankList_reflection_;
  delete TBigHuntGetBossSelfDamageRankListReq::default_instance_;
  delete TBigHuntGetBossSelfDamageRankListReq_reflection_;
  delete TBigHuntGetBossSelfDamageRankListRsp::default_instance_;
  delete TBigHuntGetBossSelfDamageRankListRsp_reflection_;
  delete TBigHuntGetSelfCoinRankList::default_instance_;
  delete TBigHuntGetSelfCoinRankList_reflection_;
  delete TBigHuntGetSelfCoinRankListReq::default_instance_;
  delete TBigHuntGetSelfCoinRankListReq_reflection_;
  delete TBigHuntGetSelfCoinRankListRsp::default_instance_;
  delete TBigHuntGetSelfCoinRankListRsp_reflection_;
  delete TBigHuntCancelSuppressReq::default_instance_;
  delete TBigHuntCancelSuppressReq_reflection_;
  delete TBigHuntMonsterBeKilledInfo::default_instance_;
  delete TBigHuntMonsterBeKilledInfo_reflection_;
  delete TBigHuntMonsterBeKilledNotify::default_instance_;
  delete TBigHuntMonsterBeKilledNotify_reflection_;
  delete TBigHuntDynamicNotify::default_instance_;
  delete TBigHuntDynamicNotify_reflection_;
  delete TBigHuntUserDimensionNotify::default_instance_;
  delete TBigHuntUserDimensionNotify_reflection_;
  delete TBigHuntCancelSuppressNotify::default_instance_;
  delete TBigHuntCancelSuppressNotify_reflection_;
  delete TBigHuntUserDataChangeNotify::default_instance_;
  delete TBigHuntUserDataChangeNotify_reflection_;
}

void protobuf_AddDesc_net_2fBigHunt_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_net_2fArenaHighOrder_2eproto();
  ::pb::protobuf_AddDesc_net_2fAlliance_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021net/BigHunt.proto\022\002pb\032\026net/CommonRewar"
    "d.proto\032\016net/User.proto\032\020net/Battle.prot"
    "o\032\030net/ArenaHighOrder.proto\032\022net/Allianc"
    "e.proto\";\n\025TBigHuntDimensionInfo\022\023\n\013Dime"
    "nsionId\030\001 \001(\r\022\r\n\005Level\030\002 \001(\r\"\337\001\n\027TBigHun"
    "tSelfDynamicInfo\022,\n\013DynamicType\030\001 \001(\0162\027."
    "pb.EBigHuntDynamicType\022\022\n\nRecordTime\030\002 \001"
    "(\004\022$\n\tRewardArr\030\003 \003(\0132\021.pb.TCommonReward"
    "\022\020\n\010RecordId\030\004 \001(\004\022\021\n\tmonsterId\030\005 \003(\r\022\020\n"
    "\010UserName\030\006 \003(\t\022\021\n\tnextMapId\030\007 \001(\r\022\022\n\nBo"
    "ssDamage\030\010 \001(\004\"\340\001\n\026TBigHuntMapDynamicInf"
    "o\022,\n\013DynamicType\030\001 \001(\0162\027.pb.EBigHuntDyna"
    "micType\022\023\n\013DynamicTime\030\002 \001(\004\022$\n\tRewardAr"
    "r\030\003 \003(\0132\021.pb.TCommonReward\022\020\n\010RecordId\030\004"
    " \001(\004\022%\n\010UserInfo\030\005 \003(\0132\023.pb.TUserSimpleI"
    "nfo\022\021\n\tmonsterId\030\006 \003(\r\022\021\n\tnextMapId\030\007 \001("
    "\r\"7\n\022TBigHuntBossHpInfo\022\013\n\003hid\030\001 \001(\r\022\024\n\014"
    "HpPercentage\030\002 \001(\004\"8\n\020TBigHuntBossInfo\022\016"
    "\n\006BossId\030\001 \001(\r\022\024\n\014HpPercentage\030\002 \001(\004\"W\n\023"
    "TBigHuntMonsterInfo\022\021\n\tMonsterId\030\001 \001(\r\022-"
    "\n\020SuppressUserInfo\030\002 \001(\0132\023.pb.TUserSimpl"
    "eInfo\".\n\022TBigHuntHidPosInfo\022\013\n\003Hid\030\001 \001(\r"
    "\022\013\n\003Pos\030\002 \001(\r\"W\n\025TBigHuntFormationInfo\022\023"
    "\n\013FormationId\030\001 \001(\r\022)\n\tHidPosArr\030\002 \003(\0132\026"
    ".pb.TBigHuntHidPosInfo\"\267\002\n\020TBigHuntEnter"
    "Rsp\0225\n\021MapDynamicInfoArr\030\001 \003(\0132\032.pb.TBig"
    "HuntMapDynamicInfo\022)\n\013BossInfoArr\030\002 \003(\0132"
    "\024.pb.TBigHuntBossInfo\022/\n\016MonsterInfoArr\030"
    "\003 \003(\0132\027.pb.TBigHuntMonsterInfo\0227\n\022SelfDy"
    "namicInfoArr\030\004 \003(\0132\033.pb.TBigHuntSelfDyna"
    "micInfo\022\020\n\010CurMapId\030\005 \001(\r\022\021\n\tFormMapId\030\006"
    " \001(\r\022\017\n\007SceneId\030\007 \001(\t\022\021\n\tMonsterId\030\010 \003(\r"
    "\022\016\n\006BossId\030\t \003(\r\"\203\002\n\026TBigHuntGetUserInfo"
    "Rsp\022\030\n\020LeftChallengeNum\030\001 \001(\r\022\027\n\017BuyChal"
    "lengeNum\030\002 \001(\r\022\031\n\021SuppressMonsterId\030\003 \003("
    "\r\022\020\n\010SelfCoin\030\004 \001(\004\022\024\n\014AllianceCoin\030\005 \001("
    "\004\022\023\n\013RewardIdArr\030\006 \003(\r\022\027\n\017LastRecoverTim"
    "e\030\007 \001(\004\0223\n\020SelfDimensionArr\030\010 \003(\0132\031.pb.T"
    "BigHuntDimensionInfo\022\020\n\010CurMapId\030\t \001(\r\"M"
    "\n\032TBigHuntSetAtkFormationReq\022/\n\014Formatio"
    "nArr\030\001 \003(\0132\031.pb.TBigHuntFormationInfo\"M\n"
    "\032TBigHuntGetAtkFormationRsp\022/\n\014Formation"
    "Arr\030\001 \003(\0132\031.pb.TBigHuntFormationInfo\"W\n\030"
    "TBigHuntGetBattleArgsReq\022\n\n\002Id\030\001 \001(\r\022/\n\020"
    "BattleCheckParam\030\002 \001(\0132\025.pb.TBattleCheck"
    "Param\"\?\n\030TBigHuntGetBattleArgsRsp\022#\n\nBat"
    "tleArgs\030\001 \001(\0132\017.pb.TBattleArgs\"K\n#TBigHu"
    "ntReportBattleNormaMonsterReq\022\021\n\tMonster"
    "Id\030\001 \001(\r\022\021\n\tBattleRet\030\002 \001(\014\"K\n#TBigHuntR"
    "eportBattleEliteMonsterReq\022\021\n\tMonsterId\030"
    "\001 \001(\r\022\021\n\tBattleRet\030\002 \001(\014\"D\n\034TBigHuntRepo"
    "rtBattleStakeReq\022\021\n\tMonsterId\030\001 \001(\r\022\021\n\tB"
    "attleRet\030\002 \001(\014\"\232\001\n\036TBigHuntReportBattleM"
    "onsterRsp\022&\n\010KillType\030\001 \001(\0162\024.pb.EBigHun"
    "tKillType\022$\n\tRewardArr\030\002 \003(\0132\021.pb.TCommo"
    "nReward\022*\n\tisSuccess\030\003 \001(\0162\027.pb.EBigHunt"
    "SuccessType\"@\n\033TBigHuntReportBattleBossR"
    "eq\022\016\n\006BossId\030\001 \001(\r\022\021\n\tBattleRet\030\002 \001(\014\"\225\001"
    "\n\033TBigHuntReportBattleBossRsp\022\016\n\006isKill\030"
    "\001 \001(\r\022$\n\tRewardArr\030\002 \003(\0132\021.pb.TCommonRew"
    "ard\022\024\n\014HpPercentage\030\003 \001(\004\022*\n\tisSuccess\030\004"
    " \001(\0162\027.pb.EBigHuntSuccessType\"P\n\035TBigHun"
    "tGetSelfDynamicInfoRsp\022/\n\nDynamicArr\030\001 \003"
    "(\0132\033.pb.TBigHuntSelfDynamicInfo\"2\n$TBigH"
    "untReceiveAllianceCoinRewardReq\022\n\n\002Id\030\001 "
    "\001(\r\"L\n$TBigHuntReceiveAllianceCoinReward"
    "Rsp\022$\n\tRewardArr\030\001 \003(\0132\021.pb.TCommonRewar"
    "d\")\n\032TBigHuntBuyChallengeNumReq\022\013\n\003Num\030\001"
    " \001(\r\")\n\033TBigHuntUpgradeDimensionReq\022\n\n\002I"
    "d\030\001 \001(\r\"l\n\034TBigHuntAllianceCoinRankList\022"
    "-\n\014AllianceInfo\030\001 \001(\0132\027.pb.TAllianceSimp"
    "leInfo\022\017\n\007CoinNum\030\002 \001(\004\022\014\n\004Rank\030\003 \001(\r\"@\n"
    "\037TBigHuntAllianceCoinListRankReq\022\016\n\006Offs"
    "et\030\001 \001(\r\022\r\n\005Limit\030\002 \001(\r\"\230\001\n\037TBigHuntAlli"
    "anceCoinListRankRsp\022:\n\020SelfAllianceRank\030"
    "\001 \001(\0132 .pb.TBigHuntAllianceCoinRankList\022"
    "9\n\017AllianceListArr\030\002 \003(\0132 .pb.TBigHuntAl"
    "lianceCoinRankList\"e\n\036TBigHuntBossSelfDa"
    "mageRankList\022\016\n\006Damage\030\001 \001(\004\022%\n\010UserInfo"
    "\030\002 \001(\0132\023.pb.TUserSimpleInfo\022\014\n\004Rank\030\003 \001("
    "\r\"U\n$TBigHuntGetBossSelfDamageRankListRe"
    "q\022\016\n\006BossId\030\001 \001(\r\022\016\n\006Offset\030\002 \001(\r\022\r\n\005Lim"
    "it\030\003 \001(\r\"\243\001\n$TBigHuntGetBossSelfDamageRa"
    "nkListRsp\0222\n\006MyRank\030\001 \001(\0132\".pb.TBigHuntB"
    "ossSelfDamageRankList\0227\n\013UserListArr\030\002 \003"
    "(\0132\".pb.TBigHuntBossSelfDamageRankList\022\016"
    "\n\006BossId\030\003 \001(\r\"c\n\033TBigHuntGetSelfCoinRan"
    "kList\022\017\n\007CoinNum\030\001 \001(\004\022%\n\010UserInfo\030\002 \001(\013"
    "2\023.pb.TUserSimpleInfo\022\014\n\004Rank\030\003 \001(\r\"\?\n\036T"
    "BigHuntGetSelfCoinRankListReq\022\016\n\006Offset\030"
    "\001 \001(\r\022\r\n\005Limit\030\002 \001(\r\"\213\001\n\036TBigHuntGetSelf"
    "CoinRankListRsp\022/\n\006MyRank\030\001 \001(\0132\037.pb.TBi"
    "gHuntGetSelfCoinRankList\0228\n\017AllUserRankI"
    "nfo\030\002 \003(\0132\037.pb.TBigHuntGetSelfCoinRankLi"
    "st\".\n\031TBigHuntCancelSuppressReq\022\021\n\tMonst"
    "erId\030\001 \001(\r\"c\n\033TBigHuntMonsterBeKilledInf"
    "o\022\021\n\tMonsterId\030\001 \001(\r\022\n\n\002Hp\030\002 \001(\004\022%\n\010User"
    "Info\030\003 \001(\0132\023.pb.TUserSimpleInfo\"U\n\035TBigH"
    "untMonsterBeKilledNotify\0224\n\013MonsterInfo\030"
    "\001 \001(\0132\037.pb.TBigHuntMonsterBeKilledInfo\"G"
    "\n\025TBigHuntDynamicNotify\022.\n\nRecordInfo\030\001 "
    "\001(\0132\032.pb.TBigHuntMapDynamicInfo\";\n\033TBigH"
    "untUserDimensionNotify\022\n\n\002Id\030\001 \001(\r\022\020\n\010no"
    "wLevel\030\002 \001(\r\"1\n\034TBigHuntCancelSuppressNo"
    "tify\022\021\n\tMonsterId\030\001 \001(\r\"v\n\034TBigHuntUserD"
    "ataChangeNotify\022\030\n\020LeftChallengeNum\030\001 \001("
    "\r\022\020\n\010SelfCoin\030\002 \001(\004\022\024\n\014AllianceCoin\030\003 \001("
    "\004\022\024\n\014EliteMonster\030\004 \001(\r*\254\001\n\023EBigHuntDyna"
    "micType\022\026\n\022BIGHUNT_ATKMONSTER\020e\022\025\n\021BIGHU"
    "NT_MAPCHANGE\020f\022\032\n\026BIGHUNT_CANCELSUPPRESS"
    "\020g\022\034\n\030BIGHUNT_JOINTSUPPRESSION\020h\022\023\n\017BIGH"
    "UNT_ATKFAIL\020i\022\027\n\023BIGHUNT_ALREADYDEAD\020j*K"
    "\n\023EBigHuntSuccessType\022\030\n\023BIGHUNT_BATTLEV"
    "ALID\020\311\001\022\032\n\025BIGHUNT_BATTLEINVALID\020\312\001*[\n\020E"
    "BigHuntKillType\022\027\n\022BIGHUNT_NORMALKILL\020\255\002"
    "\022\026\n\021BIGHUNT_ELITEKILL\020\256\002\022\026\n\021BIGHUNT_STAK"
    "EKILL\020\257\002", 4648);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/BigHunt.proto", &protobuf_RegisterTypes);
  TBigHuntDimensionInfo::default_instance_ = new TBigHuntDimensionInfo();
  TBigHuntSelfDynamicInfo::default_instance_ = new TBigHuntSelfDynamicInfo();
  TBigHuntMapDynamicInfo::default_instance_ = new TBigHuntMapDynamicInfo();
  TBigHuntBossHpInfo::default_instance_ = new TBigHuntBossHpInfo();
  TBigHuntBossInfo::default_instance_ = new TBigHuntBossInfo();
  TBigHuntMonsterInfo::default_instance_ = new TBigHuntMonsterInfo();
  TBigHuntHidPosInfo::default_instance_ = new TBigHuntHidPosInfo();
  TBigHuntFormationInfo::default_instance_ = new TBigHuntFormationInfo();
  TBigHuntEnterRsp::default_instance_ = new TBigHuntEnterRsp();
  TBigHuntGetUserInfoRsp::default_instance_ = new TBigHuntGetUserInfoRsp();
  TBigHuntSetAtkFormationReq::default_instance_ = new TBigHuntSetAtkFormationReq();
  TBigHuntGetAtkFormationRsp::default_instance_ = new TBigHuntGetAtkFormationRsp();
  TBigHuntGetBattleArgsReq::default_instance_ = new TBigHuntGetBattleArgsReq();
  TBigHuntGetBattleArgsRsp::default_instance_ = new TBigHuntGetBattleArgsRsp();
  TBigHuntReportBattleNormaMonsterReq::default_instance_ = new TBigHuntReportBattleNormaMonsterReq();
  TBigHuntReportBattleEliteMonsterReq::default_instance_ = new TBigHuntReportBattleEliteMonsterReq();
  TBigHuntReportBattleStakeReq::default_instance_ = new TBigHuntReportBattleStakeReq();
  TBigHuntReportBattleMonsterRsp::default_instance_ = new TBigHuntReportBattleMonsterRsp();
  TBigHuntReportBattleBossReq::default_instance_ = new TBigHuntReportBattleBossReq();
  TBigHuntReportBattleBossRsp::default_instance_ = new TBigHuntReportBattleBossRsp();
  TBigHuntGetSelfDynamicInfoRsp::default_instance_ = new TBigHuntGetSelfDynamicInfoRsp();
  TBigHuntReceiveAllianceCoinRewardReq::default_instance_ = new TBigHuntReceiveAllianceCoinRewardReq();
  TBigHuntReceiveAllianceCoinRewardRsp::default_instance_ = new TBigHuntReceiveAllianceCoinRewardRsp();
  TBigHuntBuyChallengeNumReq::default_instance_ = new TBigHuntBuyChallengeNumReq();
  TBigHuntUpgradeDimensionReq::default_instance_ = new TBigHuntUpgradeDimensionReq();
  TBigHuntAllianceCoinRankList::default_instance_ = new TBigHuntAllianceCoinRankList();
  TBigHuntAllianceCoinListRankReq::default_instance_ = new TBigHuntAllianceCoinListRankReq();
  TBigHuntAllianceCoinListRankRsp::default_instance_ = new TBigHuntAllianceCoinListRankRsp();
  TBigHuntBossSelfDamageRankList::default_instance_ = new TBigHuntBossSelfDamageRankList();
  TBigHuntGetBossSelfDamageRankListReq::default_instance_ = new TBigHuntGetBossSelfDamageRankListReq();
  TBigHuntGetBossSelfDamageRankListRsp::default_instance_ = new TBigHuntGetBossSelfDamageRankListRsp();
  TBigHuntGetSelfCoinRankList::default_instance_ = new TBigHuntGetSelfCoinRankList();
  TBigHuntGetSelfCoinRankListReq::default_instance_ = new TBigHuntGetSelfCoinRankListReq();
  TBigHuntGetSelfCoinRankListRsp::default_instance_ = new TBigHuntGetSelfCoinRankListRsp();
  TBigHuntCancelSuppressReq::default_instance_ = new TBigHuntCancelSuppressReq();
  TBigHuntMonsterBeKilledInfo::default_instance_ = new TBigHuntMonsterBeKilledInfo();
  TBigHuntMonsterBeKilledNotify::default_instance_ = new TBigHuntMonsterBeKilledNotify();
  TBigHuntDynamicNotify::default_instance_ = new TBigHuntDynamicNotify();
  TBigHuntUserDimensionNotify::default_instance_ = new TBigHuntUserDimensionNotify();
  TBigHuntCancelSuppressNotify::default_instance_ = new TBigHuntCancelSuppressNotify();
  TBigHuntUserDataChangeNotify::default_instance_ = new TBigHuntUserDataChangeNotify();
  TBigHuntDimensionInfo::default_instance_->InitAsDefaultInstance();
  TBigHuntSelfDynamicInfo::default_instance_->InitAsDefaultInstance();
  TBigHuntMapDynamicInfo::default_instance_->InitAsDefaultInstance();
  TBigHuntBossHpInfo::default_instance_->InitAsDefaultInstance();
  TBigHuntBossInfo::default_instance_->InitAsDefaultInstance();
  TBigHuntMonsterInfo::default_instance_->InitAsDefaultInstance();
  TBigHuntHidPosInfo::default_instance_->InitAsDefaultInstance();
  TBigHuntFormationInfo::default_instance_->InitAsDefaultInstance();
  TBigHuntEnterRsp::default_instance_->InitAsDefaultInstance();
  TBigHuntGetUserInfoRsp::default_instance_->InitAsDefaultInstance();
  TBigHuntSetAtkFormationReq::default_instance_->InitAsDefaultInstance();
  TBigHuntGetAtkFormationRsp::default_instance_->InitAsDefaultInstance();
  TBigHuntGetBattleArgsReq::default_instance_->InitAsDefaultInstance();
  TBigHuntGetBattleArgsRsp::default_instance_->InitAsDefaultInstance();
  TBigHuntReportBattleNormaMonsterReq::default_instance_->InitAsDefaultInstance();
  TBigHuntReportBattleEliteMonsterReq::default_instance_->InitAsDefaultInstance();
  TBigHuntReportBattleStakeReq::default_instance_->InitAsDefaultInstance();
  TBigHuntReportBattleMonsterRsp::default_instance_->InitAsDefaultInstance();
  TBigHuntReportBattleBossReq::default_instance_->InitAsDefaultInstance();
  TBigHuntReportBattleBossRsp::default_instance_->InitAsDefaultInstance();
  TBigHuntGetSelfDynamicInfoRsp::default_instance_->InitAsDefaultInstance();
  TBigHuntReceiveAllianceCoinRewardReq::default_instance_->InitAsDefaultInstance();
  TBigHuntReceiveAllianceCoinRewardRsp::default_instance_->InitAsDefaultInstance();
  TBigHuntBuyChallengeNumReq::default_instance_->InitAsDefaultInstance();
  TBigHuntUpgradeDimensionReq::default_instance_->InitAsDefaultInstance();
  TBigHuntAllianceCoinRankList::default_instance_->InitAsDefaultInstance();
  TBigHuntAllianceCoinListRankReq::default_instance_->InitAsDefaultInstance();
  TBigHuntAllianceCoinListRankRsp::default_instance_->InitAsDefaultInstance();
  TBigHuntBossSelfDamageRankList::default_instance_->InitAsDefaultInstance();
  TBigHuntGetBossSelfDamageRankListReq::default_instance_->InitAsDefaultInstance();
  TBigHuntGetBossSelfDamageRankListRsp::default_instance_->InitAsDefaultInstance();
  TBigHuntGetSelfCoinRankList::default_instance_->InitAsDefaultInstance();
  TBigHuntGetSelfCoinRankListReq::default_instance_->InitAsDefaultInstance();
  TBigHuntGetSelfCoinRankListRsp::default_instance_->InitAsDefaultInstance();
  TBigHuntCancelSuppressReq::default_instance_->InitAsDefaultInstance();
  TBigHuntMonsterBeKilledInfo::default_instance_->InitAsDefaultInstance();
  TBigHuntMonsterBeKilledNotify::default_instance_->InitAsDefaultInstance();
  TBigHuntDynamicNotify::default_instance_->InitAsDefaultInstance();
  TBigHuntUserDimensionNotify::default_instance_->InitAsDefaultInstance();
  TBigHuntCancelSuppressNotify::default_instance_->InitAsDefaultInstance();
  TBigHuntUserDataChangeNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fBigHunt_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fBigHunt_2eproto {
  StaticDescriptorInitializer_net_2fBigHunt_2eproto() {
    protobuf_AddDesc_net_2fBigHunt_2eproto();
  }
} static_descriptor_initializer_net_2fBigHunt_2eproto_;
const ::google::protobuf::EnumDescriptor* EBigHuntDynamicType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBigHuntDynamicType_descriptor_;
}
bool EBigHuntDynamicType_IsValid(int value) {
  switch(value) {
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBigHuntSuccessType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBigHuntSuccessType_descriptor_;
}
bool EBigHuntSuccessType_IsValid(int value) {
  switch(value) {
    case 201:
    case 202:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBigHuntKillType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBigHuntKillType_descriptor_;
}
bool EBigHuntKillType_IsValid(int value) {
  switch(value) {
    case 301:
    case 302:
    case 303:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntDimensionInfo::kDimensionIdFieldNumber;
const int TBigHuntDimensionInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

TBigHuntDimensionInfo::TBigHuntDimensionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntDimensionInfo)
}

void TBigHuntDimensionInfo::InitAsDefaultInstance() {
}

TBigHuntDimensionInfo::TBigHuntDimensionInfo(const TBigHuntDimensionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntDimensionInfo)
}

void TBigHuntDimensionInfo::SharedCtor() {
  _cached_size_ = 0;
  dimensionid_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntDimensionInfo::~TBigHuntDimensionInfo() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntDimensionInfo)
  SharedDtor();
}

void TBigHuntDimensionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBigHuntDimensionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntDimensionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntDimensionInfo_descriptor_;
}

const TBigHuntDimensionInfo& TBigHuntDimensionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntDimensionInfo* TBigHuntDimensionInfo::default_instance_ = NULL;

TBigHuntDimensionInfo* TBigHuntDimensionInfo::New() const {
  return new TBigHuntDimensionInfo;
}

void TBigHuntDimensionInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBigHuntDimensionInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dimensionid_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntDimensionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntDimensionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 DimensionId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dimensionid_)));
          set_has_dimensionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 2;
      case 2: {
        if (tag == 16) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntDimensionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntDimensionInfo)
  return false;
#undef DO_
}

void TBigHuntDimensionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntDimensionInfo)
  // optional uint32 DimensionId = 1;
  if (has_dimensionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dimensionid(), output);
  }

  // optional uint32 Level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntDimensionInfo)
}

::google::protobuf::uint8* TBigHuntDimensionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntDimensionInfo)
  // optional uint32 DimensionId = 1;
  if (has_dimensionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dimensionid(), target);
  }

  // optional uint32 Level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntDimensionInfo)
  return target;
}

int TBigHuntDimensionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 DimensionId = 1;
    if (has_dimensionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dimensionid());
    }

    // optional uint32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntDimensionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntDimensionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntDimensionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntDimensionInfo::MergeFrom(const TBigHuntDimensionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dimensionid()) {
      set_dimensionid(from.dimensionid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntDimensionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntDimensionInfo::CopyFrom(const TBigHuntDimensionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntDimensionInfo::IsInitialized() const {

  return true;
}

void TBigHuntDimensionInfo::Swap(TBigHuntDimensionInfo* other) {
  if (other != this) {
    std::swap(dimensionid_, other->dimensionid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntDimensionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntDimensionInfo_descriptor_;
  metadata.reflection = TBigHuntDimensionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntSelfDynamicInfo::kDynamicTypeFieldNumber;
const int TBigHuntSelfDynamicInfo::kRecordTimeFieldNumber;
const int TBigHuntSelfDynamicInfo::kRewardArrFieldNumber;
const int TBigHuntSelfDynamicInfo::kRecordIdFieldNumber;
const int TBigHuntSelfDynamicInfo::kMonsterIdFieldNumber;
const int TBigHuntSelfDynamicInfo::kUserNameFieldNumber;
const int TBigHuntSelfDynamicInfo::kNextMapIdFieldNumber;
const int TBigHuntSelfDynamicInfo::kBossDamageFieldNumber;
#endif  // !_MSC_VER

TBigHuntSelfDynamicInfo::TBigHuntSelfDynamicInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntSelfDynamicInfo)
}

void TBigHuntSelfDynamicInfo::InitAsDefaultInstance() {
}

TBigHuntSelfDynamicInfo::TBigHuntSelfDynamicInfo(const TBigHuntSelfDynamicInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntSelfDynamicInfo)
}

void TBigHuntSelfDynamicInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dynamictype_ = 101;
  recordtime_ = GOOGLE_ULONGLONG(0);
  recordid_ = GOOGLE_ULONGLONG(0);
  nextmapid_ = 0u;
  bossdamage_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntSelfDynamicInfo::~TBigHuntSelfDynamicInfo() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntSelfDynamicInfo)
  SharedDtor();
}

void TBigHuntSelfDynamicInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBigHuntSelfDynamicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntSelfDynamicInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntSelfDynamicInfo_descriptor_;
}

const TBigHuntSelfDynamicInfo& TBigHuntSelfDynamicInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntSelfDynamicInfo* TBigHuntSelfDynamicInfo::default_instance_ = NULL;

TBigHuntSelfDynamicInfo* TBigHuntSelfDynamicInfo::New() const {
  return new TBigHuntSelfDynamicInfo;
}

void TBigHuntSelfDynamicInfo::Clear() {
  if (_has_bits_[0 / 32] & 203) {
    dynamictype_ = 101;
    recordtime_ = GOOGLE_ULONGLONG(0);
    recordid_ = GOOGLE_ULONGLONG(0);
    nextmapid_ = 0u;
    bossdamage_ = GOOGLE_ULONGLONG(0);
  }
  rewardarr_.Clear();
  monsterid_.Clear();
  username_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntSelfDynamicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntSelfDynamicInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EBigHuntDynamicType DynamicType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EBigHuntDynamicType_IsValid(value)) {
            set_dynamictype(static_cast< ::pb::EBigHuntDynamicType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RecordTime;
        break;
      }

      // optional uint64 RecordTime = 2;
      case 2: {
        if (tag == 16) {
         parse_RecordTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 3;
      case 3: {
        if (tag == 26) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RewardArr;
        if (input->ExpectTag(32)) goto parse_RecordId;
        break;
      }

      // optional uint64 RecordId = 4;
      case 4: {
        if (tag == 32) {
         parse_RecordId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordid_)));
          set_has_recordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_monsterId;
        break;
      }

      // repeated uint32 monsterId = 5;
      case 5: {
        if (tag == 40) {
         parse_monsterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_monsterid())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_monsterid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_monsterId;
        if (input->ExpectTag(50)) goto parse_UserName;
        break;
      }

      // repeated string UserName = 6;
      case 6: {
        if (tag == 50) {
         parse_UserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username(this->username_size() - 1).data(),
            this->username(this->username_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_UserName;
        if (input->ExpectTag(56)) goto parse_nextMapId;
        break;
      }

      // optional uint32 nextMapId = 7;
      case 7: {
        if (tag == 56) {
         parse_nextMapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextmapid_)));
          set_has_nextmapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_BossDamage;
        break;
      }

      // optional uint64 BossDamage = 8;
      case 8: {
        if (tag == 64) {
         parse_BossDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bossdamage_)));
          set_has_bossdamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntSelfDynamicInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntSelfDynamicInfo)
  return false;
#undef DO_
}

void TBigHuntSelfDynamicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntSelfDynamicInfo)
  // optional .pb.EBigHuntDynamicType DynamicType = 1;
  if (has_dynamictype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dynamictype(), output);
  }

  // optional uint64 RecordTime = 2;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->recordtime(), output);
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewardarr(i), output);
  }

  // optional uint64 RecordId = 4;
  if (has_recordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->recordid(), output);
  }

  // repeated uint32 monsterId = 5;
  for (int i = 0; i < this->monsterid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->monsterid(i), output);
  }

  // repeated string UserName = 6;
  for (int i = 0; i < this->username_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->username(i).data(), this->username(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "username");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->username(i), output);
  }

  // optional uint32 nextMapId = 7;
  if (has_nextmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->nextmapid(), output);
  }

  // optional uint64 BossDamage = 8;
  if (has_bossdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->bossdamage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntSelfDynamicInfo)
}

::google::protobuf::uint8* TBigHuntSelfDynamicInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntSelfDynamicInfo)
  // optional .pb.EBigHuntDynamicType DynamicType = 1;
  if (has_dynamictype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dynamictype(), target);
  }

  // optional uint64 RecordTime = 2;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->recordtime(), target);
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewardarr(i), target);
  }

  // optional uint64 RecordId = 4;
  if (has_recordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->recordid(), target);
  }

  // repeated uint32 monsterId = 5;
  for (int i = 0; i < this->monsterid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->monsterid(i), target);
  }

  // repeated string UserName = 6;
  for (int i = 0; i < this->username_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username(i).data(), this->username(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->username(i), target);
  }

  // optional uint32 nextMapId = 7;
  if (has_nextmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->nextmapid(), target);
  }

  // optional uint64 BossDamage = 8;
  if (has_bossdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->bossdamage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntSelfDynamicInfo)
  return target;
}

int TBigHuntSelfDynamicInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EBigHuntDynamicType DynamicType = 1;
    if (has_dynamictype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dynamictype());
    }

    // optional uint64 RecordTime = 2;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordtime());
    }

    // optional uint64 RecordId = 4;
    if (has_recordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordid());
    }

    // optional uint32 nextMapId = 7;
    if (has_nextmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextmapid());
    }

    // optional uint64 BossDamage = 8;
    if (has_bossdamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bossdamage());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 3;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  // repeated uint32 monsterId = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->monsterid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->monsterid(i));
    }
    total_size += 1 * this->monsterid_size() + data_size;
  }

  // repeated string UserName = 6;
  total_size += 1 * this->username_size();
  for (int i = 0; i < this->username_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->username(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntSelfDynamicInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntSelfDynamicInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntSelfDynamicInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntSelfDynamicInfo::MergeFrom(const TBigHuntSelfDynamicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  monsterid_.MergeFrom(from.monsterid_);
  username_.MergeFrom(from.username_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dynamictype()) {
      set_dynamictype(from.dynamictype());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
    if (from.has_recordid()) {
      set_recordid(from.recordid());
    }
    if (from.has_nextmapid()) {
      set_nextmapid(from.nextmapid());
    }
    if (from.has_bossdamage()) {
      set_bossdamage(from.bossdamage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntSelfDynamicInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntSelfDynamicInfo::CopyFrom(const TBigHuntSelfDynamicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntSelfDynamicInfo::IsInitialized() const {

  return true;
}

void TBigHuntSelfDynamicInfo::Swap(TBigHuntSelfDynamicInfo* other) {
  if (other != this) {
    std::swap(dynamictype_, other->dynamictype_);
    std::swap(recordtime_, other->recordtime_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(recordid_, other->recordid_);
    monsterid_.Swap(&other->monsterid_);
    username_.Swap(&other->username_);
    std::swap(nextmapid_, other->nextmapid_);
    std::swap(bossdamage_, other->bossdamage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntSelfDynamicInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntSelfDynamicInfo_descriptor_;
  metadata.reflection = TBigHuntSelfDynamicInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntMapDynamicInfo::kDynamicTypeFieldNumber;
const int TBigHuntMapDynamicInfo::kDynamicTimeFieldNumber;
const int TBigHuntMapDynamicInfo::kRewardArrFieldNumber;
const int TBigHuntMapDynamicInfo::kRecordIdFieldNumber;
const int TBigHuntMapDynamicInfo::kUserInfoFieldNumber;
const int TBigHuntMapDynamicInfo::kMonsterIdFieldNumber;
const int TBigHuntMapDynamicInfo::kNextMapIdFieldNumber;
#endif  // !_MSC_VER

TBigHuntMapDynamicInfo::TBigHuntMapDynamicInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntMapDynamicInfo)
}

void TBigHuntMapDynamicInfo::InitAsDefaultInstance() {
}

TBigHuntMapDynamicInfo::TBigHuntMapDynamicInfo(const TBigHuntMapDynamicInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntMapDynamicInfo)
}

void TBigHuntMapDynamicInfo::SharedCtor() {
  _cached_size_ = 0;
  dynamictype_ = 101;
  dynamictime_ = GOOGLE_ULONGLONG(0);
  recordid_ = GOOGLE_ULONGLONG(0);
  nextmapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntMapDynamicInfo::~TBigHuntMapDynamicInfo() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntMapDynamicInfo)
  SharedDtor();
}

void TBigHuntMapDynamicInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBigHuntMapDynamicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntMapDynamicInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntMapDynamicInfo_descriptor_;
}

const TBigHuntMapDynamicInfo& TBigHuntMapDynamicInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntMapDynamicInfo* TBigHuntMapDynamicInfo::default_instance_ = NULL;

TBigHuntMapDynamicInfo* TBigHuntMapDynamicInfo::New() const {
  return new TBigHuntMapDynamicInfo;
}

void TBigHuntMapDynamicInfo::Clear() {
  if (_has_bits_[0 / 32] & 75) {
    dynamictype_ = 101;
    dynamictime_ = GOOGLE_ULONGLONG(0);
    recordid_ = GOOGLE_ULONGLONG(0);
    nextmapid_ = 0u;
  }
  rewardarr_.Clear();
  userinfo_.Clear();
  monsterid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntMapDynamicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntMapDynamicInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EBigHuntDynamicType DynamicType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EBigHuntDynamicType_IsValid(value)) {
            set_dynamictype(static_cast< ::pb::EBigHuntDynamicType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DynamicTime;
        break;
      }

      // optional uint64 DynamicTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DynamicTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dynamictime_)));
          set_has_dynamictime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 3;
      case 3: {
        if (tag == 26) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RewardArr;
        if (input->ExpectTag(32)) goto parse_RecordId;
        break;
      }

      // optional uint64 RecordId = 4;
      case 4: {
        if (tag == 32) {
         parse_RecordId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordid_)));
          set_has_recordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_UserInfo;
        break;
      }

      // repeated .pb.TUserSimpleInfo UserInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_UserInfo;
        if (input->ExpectTag(48)) goto parse_monsterId;
        break;
      }

      // repeated uint32 monsterId = 6;
      case 6: {
        if (tag == 48) {
         parse_monsterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_monsterid())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_monsterid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_monsterId;
        if (input->ExpectTag(56)) goto parse_nextMapId;
        break;
      }

      // optional uint32 nextMapId = 7;
      case 7: {
        if (tag == 56) {
         parse_nextMapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextmapid_)));
          set_has_nextmapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntMapDynamicInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntMapDynamicInfo)
  return false;
#undef DO_
}

void TBigHuntMapDynamicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntMapDynamicInfo)
  // optional .pb.EBigHuntDynamicType DynamicType = 1;
  if (has_dynamictype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dynamictype(), output);
  }

  // optional uint64 DynamicTime = 2;
  if (has_dynamictime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dynamictime(), output);
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewardarr(i), output);
  }

  // optional uint64 RecordId = 4;
  if (has_recordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->recordid(), output);
  }

  // repeated .pb.TUserSimpleInfo UserInfo = 5;
  for (int i = 0; i < this->userinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->userinfo(i), output);
  }

  // repeated uint32 monsterId = 6;
  for (int i = 0; i < this->monsterid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->monsterid(i), output);
  }

  // optional uint32 nextMapId = 7;
  if (has_nextmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->nextmapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntMapDynamicInfo)
}

::google::protobuf::uint8* TBigHuntMapDynamicInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntMapDynamicInfo)
  // optional .pb.EBigHuntDynamicType DynamicType = 1;
  if (has_dynamictype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dynamictype(), target);
  }

  // optional uint64 DynamicTime = 2;
  if (has_dynamictime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dynamictime(), target);
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewardarr(i), target);
  }

  // optional uint64 RecordId = 4;
  if (has_recordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->recordid(), target);
  }

  // repeated .pb.TUserSimpleInfo UserInfo = 5;
  for (int i = 0; i < this->userinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->userinfo(i), target);
  }

  // repeated uint32 monsterId = 6;
  for (int i = 0; i < this->monsterid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->monsterid(i), target);
  }

  // optional uint32 nextMapId = 7;
  if (has_nextmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->nextmapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntMapDynamicInfo)
  return target;
}

int TBigHuntMapDynamicInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EBigHuntDynamicType DynamicType = 1;
    if (has_dynamictype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dynamictype());
    }

    // optional uint64 DynamicTime = 2;
    if (has_dynamictime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dynamictime());
    }

    // optional uint64 RecordId = 4;
    if (has_recordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordid());
    }

    // optional uint32 nextMapId = 7;
    if (has_nextmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextmapid());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 3;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  // repeated .pb.TUserSimpleInfo UserInfo = 5;
  total_size += 1 * this->userinfo_size();
  for (int i = 0; i < this->userinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfo(i));
  }

  // repeated uint32 monsterId = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->monsterid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->monsterid(i));
    }
    total_size += 1 * this->monsterid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntMapDynamicInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntMapDynamicInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntMapDynamicInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntMapDynamicInfo::MergeFrom(const TBigHuntMapDynamicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  userinfo_.MergeFrom(from.userinfo_);
  monsterid_.MergeFrom(from.monsterid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dynamictype()) {
      set_dynamictype(from.dynamictype());
    }
    if (from.has_dynamictime()) {
      set_dynamictime(from.dynamictime());
    }
    if (from.has_recordid()) {
      set_recordid(from.recordid());
    }
    if (from.has_nextmapid()) {
      set_nextmapid(from.nextmapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntMapDynamicInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntMapDynamicInfo::CopyFrom(const TBigHuntMapDynamicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntMapDynamicInfo::IsInitialized() const {

  return true;
}

void TBigHuntMapDynamicInfo::Swap(TBigHuntMapDynamicInfo* other) {
  if (other != this) {
    std::swap(dynamictype_, other->dynamictype_);
    std::swap(dynamictime_, other->dynamictime_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(recordid_, other->recordid_);
    userinfo_.Swap(&other->userinfo_);
    monsterid_.Swap(&other->monsterid_);
    std::swap(nextmapid_, other->nextmapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntMapDynamicInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntMapDynamicInfo_descriptor_;
  metadata.reflection = TBigHuntMapDynamicInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntBossHpInfo::kHidFieldNumber;
const int TBigHuntBossHpInfo::kHpPercentageFieldNumber;
#endif  // !_MSC_VER

TBigHuntBossHpInfo::TBigHuntBossHpInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntBossHpInfo)
}

void TBigHuntBossHpInfo::InitAsDefaultInstance() {
}

TBigHuntBossHpInfo::TBigHuntBossHpInfo(const TBigHuntBossHpInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntBossHpInfo)
}

void TBigHuntBossHpInfo::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  hppercentage_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntBossHpInfo::~TBigHuntBossHpInfo() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntBossHpInfo)
  SharedDtor();
}

void TBigHuntBossHpInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBigHuntBossHpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntBossHpInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntBossHpInfo_descriptor_;
}

const TBigHuntBossHpInfo& TBigHuntBossHpInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntBossHpInfo* TBigHuntBossHpInfo::default_instance_ = NULL;

TBigHuntBossHpInfo* TBigHuntBossHpInfo::New() const {
  return new TBigHuntBossHpInfo;
}

void TBigHuntBossHpInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBigHuntBossHpInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hppercentage_, hid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntBossHpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntBossHpInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HpPercentage;
        break;
      }

      // optional uint64 HpPercentage = 2;
      case 2: {
        if (tag == 16) {
         parse_HpPercentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hppercentage_)));
          set_has_hppercentage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntBossHpInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntBossHpInfo)
  return false;
#undef DO_
}

void TBigHuntBossHpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntBossHpInfo)
  // optional uint32 hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // optional uint64 HpPercentage = 2;
  if (has_hppercentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hppercentage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntBossHpInfo)
}

::google::protobuf::uint8* TBigHuntBossHpInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntBossHpInfo)
  // optional uint32 hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // optional uint64 HpPercentage = 2;
  if (has_hppercentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hppercentage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntBossHpInfo)
  return target;
}

int TBigHuntBossHpInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint64 HpPercentage = 2;
    if (has_hppercentage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hppercentage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntBossHpInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntBossHpInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntBossHpInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntBossHpInfo::MergeFrom(const TBigHuntBossHpInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_hppercentage()) {
      set_hppercentage(from.hppercentage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntBossHpInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntBossHpInfo::CopyFrom(const TBigHuntBossHpInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntBossHpInfo::IsInitialized() const {

  return true;
}

void TBigHuntBossHpInfo::Swap(TBigHuntBossHpInfo* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(hppercentage_, other->hppercentage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntBossHpInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntBossHpInfo_descriptor_;
  metadata.reflection = TBigHuntBossHpInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntBossInfo::kBossIdFieldNumber;
const int TBigHuntBossInfo::kHpPercentageFieldNumber;
#endif  // !_MSC_VER

TBigHuntBossInfo::TBigHuntBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntBossInfo)
}

void TBigHuntBossInfo::InitAsDefaultInstance() {
}

TBigHuntBossInfo::TBigHuntBossInfo(const TBigHuntBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntBossInfo)
}

void TBigHuntBossInfo::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  hppercentage_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntBossInfo::~TBigHuntBossInfo() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntBossInfo)
  SharedDtor();
}

void TBigHuntBossInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBigHuntBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntBossInfo_descriptor_;
}

const TBigHuntBossInfo& TBigHuntBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntBossInfo* TBigHuntBossInfo::default_instance_ = NULL;

TBigHuntBossInfo* TBigHuntBossInfo::New() const {
  return new TBigHuntBossInfo;
}

void TBigHuntBossInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBigHuntBossInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hppercentage_, bossid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntBossInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HpPercentage;
        break;
      }

      // optional uint64 HpPercentage = 2;
      case 2: {
        if (tag == 16) {
         parse_HpPercentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hppercentage_)));
          set_has_hppercentage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntBossInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntBossInfo)
  return false;
#undef DO_
}

void TBigHuntBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntBossInfo)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  // optional uint64 HpPercentage = 2;
  if (has_hppercentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hppercentage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntBossInfo)
}

::google::protobuf::uint8* TBigHuntBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntBossInfo)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  // optional uint64 HpPercentage = 2;
  if (has_hppercentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hppercentage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntBossInfo)
  return target;
}

int TBigHuntBossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional uint64 HpPercentage = 2;
    if (has_hppercentage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hppercentage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntBossInfo::MergeFrom(const TBigHuntBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_hppercentage()) {
      set_hppercentage(from.hppercentage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntBossInfo::CopyFrom(const TBigHuntBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntBossInfo::IsInitialized() const {

  return true;
}

void TBigHuntBossInfo::Swap(TBigHuntBossInfo* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(hppercentage_, other->hppercentage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntBossInfo_descriptor_;
  metadata.reflection = TBigHuntBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntMonsterInfo::kMonsterIdFieldNumber;
const int TBigHuntMonsterInfo::kSuppressUserInfoFieldNumber;
#endif  // !_MSC_VER

TBigHuntMonsterInfo::TBigHuntMonsterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntMonsterInfo)
}

void TBigHuntMonsterInfo::InitAsDefaultInstance() {
  suppressuserinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TBigHuntMonsterInfo::TBigHuntMonsterInfo(const TBigHuntMonsterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntMonsterInfo)
}

void TBigHuntMonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0u;
  suppressuserinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntMonsterInfo::~TBigHuntMonsterInfo() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntMonsterInfo)
  SharedDtor();
}

void TBigHuntMonsterInfo::SharedDtor() {
  if (this != default_instance_) {
    delete suppressuserinfo_;
  }
}

void TBigHuntMonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntMonsterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntMonsterInfo_descriptor_;
}

const TBigHuntMonsterInfo& TBigHuntMonsterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntMonsterInfo* TBigHuntMonsterInfo::default_instance_ = NULL;

TBigHuntMonsterInfo* TBigHuntMonsterInfo::New() const {
  return new TBigHuntMonsterInfo;
}

void TBigHuntMonsterInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    monsterid_ = 0u;
    if (has_suppressuserinfo()) {
      if (suppressuserinfo_ != NULL) suppressuserinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntMonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntMonsterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MonsterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SuppressUserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo SuppressUserInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_SuppressUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_suppressuserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntMonsterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntMonsterInfo)
  return false;
#undef DO_
}

void TBigHuntMonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntMonsterInfo)
  // optional uint32 MonsterId = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }

  // optional .pb.TUserSimpleInfo SuppressUserInfo = 2;
  if (has_suppressuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->suppressuserinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntMonsterInfo)
}

::google::protobuf::uint8* TBigHuntMonsterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntMonsterInfo)
  // optional uint32 MonsterId = 1;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monsterid(), target);
  }

  // optional .pb.TUserSimpleInfo SuppressUserInfo = 2;
  if (has_suppressuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->suppressuserinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntMonsterInfo)
  return target;
}

int TBigHuntMonsterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MonsterId = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

    // optional .pb.TUserSimpleInfo SuppressUserInfo = 2;
    if (has_suppressuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->suppressuserinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntMonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntMonsterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntMonsterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntMonsterInfo::MergeFrom(const TBigHuntMonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_suppressuserinfo()) {
      mutable_suppressuserinfo()->::pb::TUserSimpleInfo::MergeFrom(from.suppressuserinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntMonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntMonsterInfo::CopyFrom(const TBigHuntMonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntMonsterInfo::IsInitialized() const {

  return true;
}

void TBigHuntMonsterInfo::Swap(TBigHuntMonsterInfo* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(suppressuserinfo_, other->suppressuserinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntMonsterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntMonsterInfo_descriptor_;
  metadata.reflection = TBigHuntMonsterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntHidPosInfo::kHidFieldNumber;
const int TBigHuntHidPosInfo::kPosFieldNumber;
#endif  // !_MSC_VER

TBigHuntHidPosInfo::TBigHuntHidPosInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntHidPosInfo)
}

void TBigHuntHidPosInfo::InitAsDefaultInstance() {
}

TBigHuntHidPosInfo::TBigHuntHidPosInfo(const TBigHuntHidPosInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntHidPosInfo)
}

void TBigHuntHidPosInfo::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntHidPosInfo::~TBigHuntHidPosInfo() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntHidPosInfo)
  SharedDtor();
}

void TBigHuntHidPosInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBigHuntHidPosInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntHidPosInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntHidPosInfo_descriptor_;
}

const TBigHuntHidPosInfo& TBigHuntHidPosInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntHidPosInfo* TBigHuntHidPosInfo::default_instance_ = NULL;

TBigHuntHidPosInfo* TBigHuntHidPosInfo::New() const {
  return new TBigHuntHidPosInfo;
}

void TBigHuntHidPosInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBigHuntHidPosInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hid_, pos_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntHidPosInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntHidPosInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Pos;
        break;
      }

      // optional uint32 Pos = 2;
      case 2: {
        if (tag == 16) {
         parse_Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntHidPosInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntHidPosInfo)
  return false;
#undef DO_
}

void TBigHuntHidPosInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntHidPosInfo)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntHidPosInfo)
}

::google::protobuf::uint8* TBigHuntHidPosInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntHidPosInfo)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntHidPosInfo)
  return target;
}

int TBigHuntHidPosInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint32 Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntHidPosInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntHidPosInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntHidPosInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntHidPosInfo::MergeFrom(const TBigHuntHidPosInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntHidPosInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntHidPosInfo::CopyFrom(const TBigHuntHidPosInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntHidPosInfo::IsInitialized() const {

  return true;
}

void TBigHuntHidPosInfo::Swap(TBigHuntHidPosInfo* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntHidPosInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntHidPosInfo_descriptor_;
  metadata.reflection = TBigHuntHidPosInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntFormationInfo::kFormationIdFieldNumber;
const int TBigHuntFormationInfo::kHidPosArrFieldNumber;
#endif  // !_MSC_VER

TBigHuntFormationInfo::TBigHuntFormationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntFormationInfo)
}

void TBigHuntFormationInfo::InitAsDefaultInstance() {
}

TBigHuntFormationInfo::TBigHuntFormationInfo(const TBigHuntFormationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntFormationInfo)
}

void TBigHuntFormationInfo::SharedCtor() {
  _cached_size_ = 0;
  formationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntFormationInfo::~TBigHuntFormationInfo() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntFormationInfo)
  SharedDtor();
}

void TBigHuntFormationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBigHuntFormationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntFormationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntFormationInfo_descriptor_;
}

const TBigHuntFormationInfo& TBigHuntFormationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntFormationInfo* TBigHuntFormationInfo::default_instance_ = NULL;

TBigHuntFormationInfo* TBigHuntFormationInfo::New() const {
  return new TBigHuntFormationInfo;
}

void TBigHuntFormationInfo::Clear() {
  formationid_ = 0u;
  hidposarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntFormationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntFormationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FormationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &formationid_)));
          set_has_formationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_HidPosArr;
        break;
      }

      // repeated .pb.TBigHuntHidPosInfo HidPosArr = 2;
      case 2: {
        if (tag == 18) {
         parse_HidPosArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hidposarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_HidPosArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntFormationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntFormationInfo)
  return false;
#undef DO_
}

void TBigHuntFormationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntFormationInfo)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->formationid(), output);
  }

  // repeated .pb.TBigHuntHidPosInfo HidPosArr = 2;
  for (int i = 0; i < this->hidposarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hidposarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntFormationInfo)
}

::google::protobuf::uint8* TBigHuntFormationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntFormationInfo)
  // optional uint32 FormationId = 1;
  if (has_formationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->formationid(), target);
  }

  // repeated .pb.TBigHuntHidPosInfo HidPosArr = 2;
  for (int i = 0; i < this->hidposarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hidposarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntFormationInfo)
  return target;
}

int TBigHuntFormationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FormationId = 1;
    if (has_formationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->formationid());
    }

  }
  // repeated .pb.TBigHuntHidPosInfo HidPosArr = 2;
  total_size += 1 * this->hidposarr_size();
  for (int i = 0; i < this->hidposarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hidposarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntFormationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntFormationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntFormationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntFormationInfo::MergeFrom(const TBigHuntFormationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  hidposarr_.MergeFrom(from.hidposarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formationid()) {
      set_formationid(from.formationid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntFormationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntFormationInfo::CopyFrom(const TBigHuntFormationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntFormationInfo::IsInitialized() const {

  return true;
}

void TBigHuntFormationInfo::Swap(TBigHuntFormationInfo* other) {
  if (other != this) {
    std::swap(formationid_, other->formationid_);
    hidposarr_.Swap(&other->hidposarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntFormationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntFormationInfo_descriptor_;
  metadata.reflection = TBigHuntFormationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntEnterRsp::kMapDynamicInfoArrFieldNumber;
const int TBigHuntEnterRsp::kBossInfoArrFieldNumber;
const int TBigHuntEnterRsp::kMonsterInfoArrFieldNumber;
const int TBigHuntEnterRsp::kSelfDynamicInfoArrFieldNumber;
const int TBigHuntEnterRsp::kCurMapIdFieldNumber;
const int TBigHuntEnterRsp::kFormMapIdFieldNumber;
const int TBigHuntEnterRsp::kSceneIdFieldNumber;
const int TBigHuntEnterRsp::kMonsterIdFieldNumber;
const int TBigHuntEnterRsp::kBossIdFieldNumber;
#endif  // !_MSC_VER

TBigHuntEnterRsp::TBigHuntEnterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntEnterRsp)
}

void TBigHuntEnterRsp::InitAsDefaultInstance() {
}

TBigHuntEnterRsp::TBigHuntEnterRsp(const TBigHuntEnterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntEnterRsp)
}

void TBigHuntEnterRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  curmapid_ = 0u;
  formmapid_ = 0u;
  sceneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntEnterRsp::~TBigHuntEnterRsp() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntEnterRsp)
  SharedDtor();
}

void TBigHuntEnterRsp::SharedDtor() {
  if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sceneid_;
  }
  if (this != default_instance_) {
  }
}

void TBigHuntEnterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntEnterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntEnterRsp_descriptor_;
}

const TBigHuntEnterRsp& TBigHuntEnterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntEnterRsp* TBigHuntEnterRsp::default_instance_ = NULL;

TBigHuntEnterRsp* TBigHuntEnterRsp::New() const {
  return new TBigHuntEnterRsp;
}

void TBigHuntEnterRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBigHuntEnterRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 112) {
    ZR_(curmapid_, formmapid_);
    if (has_sceneid()) {
      if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sceneid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  mapdynamicinfoarr_.Clear();
  bossinfoarr_.Clear();
  monsterinfoarr_.Clear();
  selfdynamicinfoarr_.Clear();
  monsterid_.Clear();
  bossid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntEnterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntEnterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TBigHuntMapDynamicInfo MapDynamicInfoArr = 1;
      case 1: {
        if (tag == 10) {
         parse_MapDynamicInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mapdynamicinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_MapDynamicInfoArr;
        if (input->ExpectTag(18)) goto parse_BossInfoArr;
        break;
      }

      // repeated .pb.TBigHuntBossInfo BossInfoArr = 2;
      case 2: {
        if (tag == 18) {
         parse_BossInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bossinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BossInfoArr;
        if (input->ExpectTag(26)) goto parse_MonsterInfoArr;
        break;
      }

      // repeated .pb.TBigHuntMonsterInfo MonsterInfoArr = 3;
      case 3: {
        if (tag == 26) {
         parse_MonsterInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_MonsterInfoArr;
        if (input->ExpectTag(34)) goto parse_SelfDynamicInfoArr;
        break;
      }

      // repeated .pb.TBigHuntSelfDynamicInfo SelfDynamicInfoArr = 4;
      case 4: {
        if (tag == 34) {
         parse_SelfDynamicInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selfdynamicinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_SelfDynamicInfoArr;
        if (input->ExpectTag(40)) goto parse_CurMapId;
        break;
      }

      // optional uint32 CurMapId = 5;
      case 5: {
        if (tag == 40) {
         parse_CurMapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curmapid_)));
          set_has_curmapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_FormMapId;
        break;
      }

      // optional uint32 FormMapId = 6;
      case 6: {
        if (tag == 48) {
         parse_FormMapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &formmapid_)));
          set_has_formmapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_SceneId;
        break;
      }

      // optional string SceneId = 7;
      case 7: {
        if (tag == 58) {
         parse_SceneId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sceneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sceneid().data(), this->sceneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sceneid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_MonsterId;
        break;
      }

      // repeated uint32 MonsterId = 8;
      case 8: {
        if (tag == 64) {
         parse_MonsterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_monsterid())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_monsterid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_MonsterId;
        if (input->ExpectTag(72)) goto parse_BossId;
        break;
      }

      // repeated uint32 BossId = 9;
      case 9: {
        if (tag == 72) {
         parse_BossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_bossid())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bossid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_BossId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntEnterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntEnterRsp)
  return false;
#undef DO_
}

void TBigHuntEnterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntEnterRsp)
  // repeated .pb.TBigHuntMapDynamicInfo MapDynamicInfoArr = 1;
  for (int i = 0; i < this->mapdynamicinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mapdynamicinfoarr(i), output);
  }

  // repeated .pb.TBigHuntBossInfo BossInfoArr = 2;
  for (int i = 0; i < this->bossinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bossinfoarr(i), output);
  }

  // repeated .pb.TBigHuntMonsterInfo MonsterInfoArr = 3;
  for (int i = 0; i < this->monsterinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->monsterinfoarr(i), output);
  }

  // repeated .pb.TBigHuntSelfDynamicInfo SelfDynamicInfoArr = 4;
  for (int i = 0; i < this->selfdynamicinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->selfdynamicinfoarr(i), output);
  }

  // optional uint32 CurMapId = 5;
  if (has_curmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->curmapid(), output);
  }

  // optional uint32 FormMapId = 6;
  if (has_formmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->formmapid(), output);
  }

  // optional string SceneId = 7;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sceneid().data(), this->sceneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sceneid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sceneid(), output);
  }

  // repeated uint32 MonsterId = 8;
  for (int i = 0; i < this->monsterid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->monsterid(i), output);
  }

  // repeated uint32 BossId = 9;
  for (int i = 0; i < this->bossid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->bossid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntEnterRsp)
}

::google::protobuf::uint8* TBigHuntEnterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntEnterRsp)
  // repeated .pb.TBigHuntMapDynamicInfo MapDynamicInfoArr = 1;
  for (int i = 0; i < this->mapdynamicinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mapdynamicinfoarr(i), target);
  }

  // repeated .pb.TBigHuntBossInfo BossInfoArr = 2;
  for (int i = 0; i < this->bossinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bossinfoarr(i), target);
  }

  // repeated .pb.TBigHuntMonsterInfo MonsterInfoArr = 3;
  for (int i = 0; i < this->monsterinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->monsterinfoarr(i), target);
  }

  // repeated .pb.TBigHuntSelfDynamicInfo SelfDynamicInfoArr = 4;
  for (int i = 0; i < this->selfdynamicinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->selfdynamicinfoarr(i), target);
  }

  // optional uint32 CurMapId = 5;
  if (has_curmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->curmapid(), target);
  }

  // optional uint32 FormMapId = 6;
  if (has_formmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->formmapid(), target);
  }

  // optional string SceneId = 7;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sceneid().data(), this->sceneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sceneid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sceneid(), target);
  }

  // repeated uint32 MonsterId = 8;
  for (int i = 0; i < this->monsterid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->monsterid(i), target);
  }

  // repeated uint32 BossId = 9;
  for (int i = 0; i < this->bossid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->bossid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntEnterRsp)
  return target;
}

int TBigHuntEnterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional uint32 CurMapId = 5;
    if (has_curmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curmapid());
    }

    // optional uint32 FormMapId = 6;
    if (has_formmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->formmapid());
    }

    // optional string SceneId = 7;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sceneid());
    }

  }
  // repeated .pb.TBigHuntMapDynamicInfo MapDynamicInfoArr = 1;
  total_size += 1 * this->mapdynamicinfoarr_size();
  for (int i = 0; i < this->mapdynamicinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mapdynamicinfoarr(i));
  }

  // repeated .pb.TBigHuntBossInfo BossInfoArr = 2;
  total_size += 1 * this->bossinfoarr_size();
  for (int i = 0; i < this->bossinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bossinfoarr(i));
  }

  // repeated .pb.TBigHuntMonsterInfo MonsterInfoArr = 3;
  total_size += 1 * this->monsterinfoarr_size();
  for (int i = 0; i < this->monsterinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterinfoarr(i));
  }

  // repeated .pb.TBigHuntSelfDynamicInfo SelfDynamicInfoArr = 4;
  total_size += 1 * this->selfdynamicinfoarr_size();
  for (int i = 0; i < this->selfdynamicinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selfdynamicinfoarr(i));
  }

  // repeated uint32 MonsterId = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->monsterid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->monsterid(i));
    }
    total_size += 1 * this->monsterid_size() + data_size;
  }

  // repeated uint32 BossId = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->bossid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bossid(i));
    }
    total_size += 1 * this->bossid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntEnterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntEnterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntEnterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntEnterRsp::MergeFrom(const TBigHuntEnterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapdynamicinfoarr_.MergeFrom(from.mapdynamicinfoarr_);
  bossinfoarr_.MergeFrom(from.bossinfoarr_);
  monsterinfoarr_.MergeFrom(from.monsterinfoarr_);
  selfdynamicinfoarr_.MergeFrom(from.selfdynamicinfoarr_);
  monsterid_.MergeFrom(from.monsterid_);
  bossid_.MergeFrom(from.bossid_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_curmapid()) {
      set_curmapid(from.curmapid());
    }
    if (from.has_formmapid()) {
      set_formmapid(from.formmapid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntEnterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntEnterRsp::CopyFrom(const TBigHuntEnterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntEnterRsp::IsInitialized() const {

  return true;
}

void TBigHuntEnterRsp::Swap(TBigHuntEnterRsp* other) {
  if (other != this) {
    mapdynamicinfoarr_.Swap(&other->mapdynamicinfoarr_);
    bossinfoarr_.Swap(&other->bossinfoarr_);
    monsterinfoarr_.Swap(&other->monsterinfoarr_);
    selfdynamicinfoarr_.Swap(&other->selfdynamicinfoarr_);
    std::swap(curmapid_, other->curmapid_);
    std::swap(formmapid_, other->formmapid_);
    std::swap(sceneid_, other->sceneid_);
    monsterid_.Swap(&other->monsterid_);
    bossid_.Swap(&other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntEnterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntEnterRsp_descriptor_;
  metadata.reflection = TBigHuntEnterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntGetUserInfoRsp::kLeftChallengeNumFieldNumber;
const int TBigHuntGetUserInfoRsp::kBuyChallengeNumFieldNumber;
const int TBigHuntGetUserInfoRsp::kSuppressMonsterIdFieldNumber;
const int TBigHuntGetUserInfoRsp::kSelfCoinFieldNumber;
const int TBigHuntGetUserInfoRsp::kAllianceCoinFieldNumber;
const int TBigHuntGetUserInfoRsp::kRewardIdArrFieldNumber;
const int TBigHuntGetUserInfoRsp::kLastRecoverTimeFieldNumber;
const int TBigHuntGetUserInfoRsp::kSelfDimensionArrFieldNumber;
const int TBigHuntGetUserInfoRsp::kCurMapIdFieldNumber;
#endif  // !_MSC_VER

TBigHuntGetUserInfoRsp::TBigHuntGetUserInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntGetUserInfoRsp)
}

void TBigHuntGetUserInfoRsp::InitAsDefaultInstance() {
}

TBigHuntGetUserInfoRsp::TBigHuntGetUserInfoRsp(const TBigHuntGetUserInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntGetUserInfoRsp)
}

void TBigHuntGetUserInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  leftchallengenum_ = 0u;
  buychallengenum_ = 0u;
  selfcoin_ = GOOGLE_ULONGLONG(0);
  alliancecoin_ = GOOGLE_ULONGLONG(0);
  lastrecovertime_ = GOOGLE_ULONGLONG(0);
  curmapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntGetUserInfoRsp::~TBigHuntGetUserInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntGetUserInfoRsp)
  SharedDtor();
}

void TBigHuntGetUserInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBigHuntGetUserInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntGetUserInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntGetUserInfoRsp_descriptor_;
}

const TBigHuntGetUserInfoRsp& TBigHuntGetUserInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntGetUserInfoRsp* TBigHuntGetUserInfoRsp::default_instance_ = NULL;

TBigHuntGetUserInfoRsp* TBigHuntGetUserInfoRsp::New() const {
  return new TBigHuntGetUserInfoRsp;
}

void TBigHuntGetUserInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBigHuntGetUserInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 91) {
    ZR_(leftchallengenum_, buychallengenum_);
    ZR_(selfcoin_, alliancecoin_);
    lastrecovertime_ = GOOGLE_ULONGLONG(0);
  }
  curmapid_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  suppressmonsterid_.Clear();
  rewardidarr_.Clear();
  selfdimensionarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntGetUserInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntGetUserInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LeftChallengeNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftchallengenum_)));
          set_has_leftchallengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyChallengeNum;
        break;
      }

      // optional uint32 BuyChallengeNum = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyChallengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buychallengenum_)));
          set_has_buychallengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SuppressMonsterId;
        break;
      }

      // repeated uint32 SuppressMonsterId = 3;
      case 3: {
        if (tag == 24) {
         parse_SuppressMonsterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_suppressmonsterid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_suppressmonsterid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SuppressMonsterId;
        if (input->ExpectTag(32)) goto parse_SelfCoin;
        break;
      }

      // optional uint64 SelfCoin = 4;
      case 4: {
        if (tag == 32) {
         parse_SelfCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &selfcoin_)));
          set_has_selfcoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_AllianceCoin;
        break;
      }

      // optional uint64 AllianceCoin = 5;
      case 5: {
        if (tag == 40) {
         parse_AllianceCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &alliancecoin_)));
          set_has_alliancecoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_RewardIdArr;
        break;
      }

      // repeated uint32 RewardIdArr = 6;
      case 6: {
        if (tag == 48) {
         parse_RewardIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_rewardidarr())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rewardidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_RewardIdArr;
        if (input->ExpectTag(56)) goto parse_LastRecoverTime;
        break;
      }

      // optional uint64 LastRecoverTime = 7;
      case 7: {
        if (tag == 56) {
         parse_LastRecoverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastrecovertime_)));
          set_has_lastrecovertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_SelfDimensionArr;
        break;
      }

      // repeated .pb.TBigHuntDimensionInfo SelfDimensionArr = 8;
      case 8: {
        if (tag == 66) {
         parse_SelfDimensionArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selfdimensionarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_SelfDimensionArr;
        if (input->ExpectTag(72)) goto parse_CurMapId;
        break;
      }

      // optional uint32 CurMapId = 9;
      case 9: {
        if (tag == 72) {
         parse_CurMapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curmapid_)));
          set_has_curmapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntGetUserInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntGetUserInfoRsp)
  return false;
#undef DO_
}

void TBigHuntGetUserInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntGetUserInfoRsp)
  // optional uint32 LeftChallengeNum = 1;
  if (has_leftchallengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->leftchallengenum(), output);
  }

  // optional uint32 BuyChallengeNum = 2;
  if (has_buychallengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buychallengenum(), output);
  }

  // repeated uint32 SuppressMonsterId = 3;
  for (int i = 0; i < this->suppressmonsterid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->suppressmonsterid(i), output);
  }

  // optional uint64 SelfCoin = 4;
  if (has_selfcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->selfcoin(), output);
  }

  // optional uint64 AllianceCoin = 5;
  if (has_alliancecoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->alliancecoin(), output);
  }

  // repeated uint32 RewardIdArr = 6;
  for (int i = 0; i < this->rewardidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->rewardidarr(i), output);
  }

  // optional uint64 LastRecoverTime = 7;
  if (has_lastrecovertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->lastrecovertime(), output);
  }

  // repeated .pb.TBigHuntDimensionInfo SelfDimensionArr = 8;
  for (int i = 0; i < this->selfdimensionarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->selfdimensionarr(i), output);
  }

  // optional uint32 CurMapId = 9;
  if (has_curmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->curmapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntGetUserInfoRsp)
}

::google::protobuf::uint8* TBigHuntGetUserInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntGetUserInfoRsp)
  // optional uint32 LeftChallengeNum = 1;
  if (has_leftchallengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->leftchallengenum(), target);
  }

  // optional uint32 BuyChallengeNum = 2;
  if (has_buychallengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buychallengenum(), target);
  }

  // repeated uint32 SuppressMonsterId = 3;
  for (int i = 0; i < this->suppressmonsterid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->suppressmonsterid(i), target);
  }

  // optional uint64 SelfCoin = 4;
  if (has_selfcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->selfcoin(), target);
  }

  // optional uint64 AllianceCoin = 5;
  if (has_alliancecoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->alliancecoin(), target);
  }

  // repeated uint32 RewardIdArr = 6;
  for (int i = 0; i < this->rewardidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->rewardidarr(i), target);
  }

  // optional uint64 LastRecoverTime = 7;
  if (has_lastrecovertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->lastrecovertime(), target);
  }

  // repeated .pb.TBigHuntDimensionInfo SelfDimensionArr = 8;
  for (int i = 0; i < this->selfdimensionarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->selfdimensionarr(i), target);
  }

  // optional uint32 CurMapId = 9;
  if (has_curmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->curmapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntGetUserInfoRsp)
  return target;
}

int TBigHuntGetUserInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LeftChallengeNum = 1;
    if (has_leftchallengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leftchallengenum());
    }

    // optional uint32 BuyChallengeNum = 2;
    if (has_buychallengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buychallengenum());
    }

    // optional uint64 SelfCoin = 4;
    if (has_selfcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->selfcoin());
    }

    // optional uint64 AllianceCoin = 5;
    if (has_alliancecoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->alliancecoin());
    }

    // optional uint64 LastRecoverTime = 7;
    if (has_lastrecovertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastrecovertime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 CurMapId = 9;
    if (has_curmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curmapid());
    }

  }
  // repeated uint32 SuppressMonsterId = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->suppressmonsterid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->suppressmonsterid(i));
    }
    total_size += 1 * this->suppressmonsterid_size() + data_size;
  }

  // repeated uint32 RewardIdArr = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rewardidarr(i));
    }
    total_size += 1 * this->rewardidarr_size() + data_size;
  }

  // repeated .pb.TBigHuntDimensionInfo SelfDimensionArr = 8;
  total_size += 1 * this->selfdimensionarr_size();
  for (int i = 0; i < this->selfdimensionarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selfdimensionarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntGetUserInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntGetUserInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntGetUserInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntGetUserInfoRsp::MergeFrom(const TBigHuntGetUserInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  suppressmonsterid_.MergeFrom(from.suppressmonsterid_);
  rewardidarr_.MergeFrom(from.rewardidarr_);
  selfdimensionarr_.MergeFrom(from.selfdimensionarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leftchallengenum()) {
      set_leftchallengenum(from.leftchallengenum());
    }
    if (from.has_buychallengenum()) {
      set_buychallengenum(from.buychallengenum());
    }
    if (from.has_selfcoin()) {
      set_selfcoin(from.selfcoin());
    }
    if (from.has_alliancecoin()) {
      set_alliancecoin(from.alliancecoin());
    }
    if (from.has_lastrecovertime()) {
      set_lastrecovertime(from.lastrecovertime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_curmapid()) {
      set_curmapid(from.curmapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntGetUserInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntGetUserInfoRsp::CopyFrom(const TBigHuntGetUserInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntGetUserInfoRsp::IsInitialized() const {

  return true;
}

void TBigHuntGetUserInfoRsp::Swap(TBigHuntGetUserInfoRsp* other) {
  if (other != this) {
    std::swap(leftchallengenum_, other->leftchallengenum_);
    std::swap(buychallengenum_, other->buychallengenum_);
    suppressmonsterid_.Swap(&other->suppressmonsterid_);
    std::swap(selfcoin_, other->selfcoin_);
    std::swap(alliancecoin_, other->alliancecoin_);
    rewardidarr_.Swap(&other->rewardidarr_);
    std::swap(lastrecovertime_, other->lastrecovertime_);
    selfdimensionarr_.Swap(&other->selfdimensionarr_);
    std::swap(curmapid_, other->curmapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntGetUserInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntGetUserInfoRsp_descriptor_;
  metadata.reflection = TBigHuntGetUserInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntSetAtkFormationReq::kFormationArrFieldNumber;
#endif  // !_MSC_VER

TBigHuntSetAtkFormationReq::TBigHuntSetAtkFormationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntSetAtkFormationReq)
}

void TBigHuntSetAtkFormationReq::InitAsDefaultInstance() {
}

TBigHuntSetAtkFormationReq::TBigHuntSetAtkFormationReq(const TBigHuntSetAtkFormationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntSetAtkFormationReq)
}

void TBigHuntSetAtkFormationReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntSetAtkFormationReq::~TBigHuntSetAtkFormationReq() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntSetAtkFormationReq)
  SharedDtor();
}

void TBigHuntSetAtkFormationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBigHuntSetAtkFormationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntSetAtkFormationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntSetAtkFormationReq_descriptor_;
}

const TBigHuntSetAtkFormationReq& TBigHuntSetAtkFormationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntSetAtkFormationReq* TBigHuntSetAtkFormationReq::default_instance_ = NULL;

TBigHuntSetAtkFormationReq* TBigHuntSetAtkFormationReq::New() const {
  return new TBigHuntSetAtkFormationReq;
}

void TBigHuntSetAtkFormationReq::Clear() {
  formationarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntSetAtkFormationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntSetAtkFormationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TBigHuntFormationInfo FormationArr = 1;
      case 1: {
        if (tag == 10) {
         parse_FormationArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formationarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FormationArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntSetAtkFormationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntSetAtkFormationReq)
  return false;
#undef DO_
}

void TBigHuntSetAtkFormationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntSetAtkFormationReq)
  // repeated .pb.TBigHuntFormationInfo FormationArr = 1;
  for (int i = 0; i < this->formationarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->formationarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntSetAtkFormationReq)
}

::google::protobuf::uint8* TBigHuntSetAtkFormationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntSetAtkFormationReq)
  // repeated .pb.TBigHuntFormationInfo FormationArr = 1;
  for (int i = 0; i < this->formationarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->formationarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntSetAtkFormationReq)
  return target;
}

int TBigHuntSetAtkFormationReq::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TBigHuntFormationInfo FormationArr = 1;
  total_size += 1 * this->formationarr_size();
  for (int i = 0; i < this->formationarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->formationarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntSetAtkFormationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntSetAtkFormationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntSetAtkFormationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntSetAtkFormationReq::MergeFrom(const TBigHuntSetAtkFormationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  formationarr_.MergeFrom(from.formationarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntSetAtkFormationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntSetAtkFormationReq::CopyFrom(const TBigHuntSetAtkFormationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntSetAtkFormationReq::IsInitialized() const {

  return true;
}

void TBigHuntSetAtkFormationReq::Swap(TBigHuntSetAtkFormationReq* other) {
  if (other != this) {
    formationarr_.Swap(&other->formationarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntSetAtkFormationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntSetAtkFormationReq_descriptor_;
  metadata.reflection = TBigHuntSetAtkFormationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntGetAtkFormationRsp::kFormationArrFieldNumber;
#endif  // !_MSC_VER

TBigHuntGetAtkFormationRsp::TBigHuntGetAtkFormationRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntGetAtkFormationRsp)
}

void TBigHuntGetAtkFormationRsp::InitAsDefaultInstance() {
}

TBigHuntGetAtkFormationRsp::TBigHuntGetAtkFormationRsp(const TBigHuntGetAtkFormationRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntGetAtkFormationRsp)
}

void TBigHuntGetAtkFormationRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntGetAtkFormationRsp::~TBigHuntGetAtkFormationRsp() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntGetAtkFormationRsp)
  SharedDtor();
}

void TBigHuntGetAtkFormationRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBigHuntGetAtkFormationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntGetAtkFormationRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntGetAtkFormationRsp_descriptor_;
}

const TBigHuntGetAtkFormationRsp& TBigHuntGetAtkFormationRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntGetAtkFormationRsp* TBigHuntGetAtkFormationRsp::default_instance_ = NULL;

TBigHuntGetAtkFormationRsp* TBigHuntGetAtkFormationRsp::New() const {
  return new TBigHuntGetAtkFormationRsp;
}

void TBigHuntGetAtkFormationRsp::Clear() {
  formationarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntGetAtkFormationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntGetAtkFormationRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TBigHuntFormationInfo FormationArr = 1;
      case 1: {
        if (tag == 10) {
         parse_FormationArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formationarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FormationArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntGetAtkFormationRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntGetAtkFormationRsp)
  return false;
#undef DO_
}

void TBigHuntGetAtkFormationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntGetAtkFormationRsp)
  // repeated .pb.TBigHuntFormationInfo FormationArr = 1;
  for (int i = 0; i < this->formationarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->formationarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntGetAtkFormationRsp)
}

::google::protobuf::uint8* TBigHuntGetAtkFormationRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntGetAtkFormationRsp)
  // repeated .pb.TBigHuntFormationInfo FormationArr = 1;
  for (int i = 0; i < this->formationarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->formationarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntGetAtkFormationRsp)
  return target;
}

int TBigHuntGetAtkFormationRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TBigHuntFormationInfo FormationArr = 1;
  total_size += 1 * this->formationarr_size();
  for (int i = 0; i < this->formationarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->formationarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntGetAtkFormationRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntGetAtkFormationRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntGetAtkFormationRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntGetAtkFormationRsp::MergeFrom(const TBigHuntGetAtkFormationRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  formationarr_.MergeFrom(from.formationarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntGetAtkFormationRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntGetAtkFormationRsp::CopyFrom(const TBigHuntGetAtkFormationRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntGetAtkFormationRsp::IsInitialized() const {

  return true;
}

void TBigHuntGetAtkFormationRsp::Swap(TBigHuntGetAtkFormationRsp* other) {
  if (other != this) {
    formationarr_.Swap(&other->formationarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntGetAtkFormationRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntGetAtkFormationRsp_descriptor_;
  metadata.reflection = TBigHuntGetAtkFormationRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntGetBattleArgsReq::kIdFieldNumber;
const int TBigHuntGetBattleArgsReq::kBattleCheckParamFieldNumber;
#endif  // !_MSC_VER

TBigHuntGetBattleArgsReq::TBigHuntGetBattleArgsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntGetBattleArgsReq)
}

void TBigHuntGetBattleArgsReq::InitAsDefaultInstance() {
  battlecheckparam_ = const_cast< ::pb::TBattleCheckParam*>(&::pb::TBattleCheckParam::default_instance());
}

TBigHuntGetBattleArgsReq::TBigHuntGetBattleArgsReq(const TBigHuntGetBattleArgsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntGetBattleArgsReq)
}

void TBigHuntGetBattleArgsReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  battlecheckparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntGetBattleArgsReq::~TBigHuntGetBattleArgsReq() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntGetBattleArgsReq)
  SharedDtor();
}

void TBigHuntGetBattleArgsReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlecheckparam_;
  }
}

void TBigHuntGetBattleArgsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntGetBattleArgsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntGetBattleArgsReq_descriptor_;
}

const TBigHuntGetBattleArgsReq& TBigHuntGetBattleArgsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntGetBattleArgsReq* TBigHuntGetBattleArgsReq::default_instance_ = NULL;

TBigHuntGetBattleArgsReq* TBigHuntGetBattleArgsReq::New() const {
  return new TBigHuntGetBattleArgsReq;
}

void TBigHuntGetBattleArgsReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0u;
    if (has_battlecheckparam()) {
      if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntGetBattleArgsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntGetBattleArgsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleCheckParam;
        break;
      }

      // optional .pb.TBattleCheckParam BattleCheckParam = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleCheckParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecheckparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntGetBattleArgsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntGetBattleArgsReq)
  return false;
#undef DO_
}

void TBigHuntGetBattleArgsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntGetBattleArgsReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battlecheckparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntGetBattleArgsReq)
}

::google::protobuf::uint8* TBigHuntGetBattleArgsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntGetBattleArgsReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battlecheckparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntGetBattleArgsReq)
  return target;
}

int TBigHuntGetBattleArgsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .pb.TBattleCheckParam BattleCheckParam = 2;
    if (has_battlecheckparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecheckparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntGetBattleArgsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntGetBattleArgsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntGetBattleArgsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntGetBattleArgsReq::MergeFrom(const TBigHuntGetBattleArgsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_battlecheckparam()) {
      mutable_battlecheckparam()->::pb::TBattleCheckParam::MergeFrom(from.battlecheckparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntGetBattleArgsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntGetBattleArgsReq::CopyFrom(const TBigHuntGetBattleArgsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntGetBattleArgsReq::IsInitialized() const {

  return true;
}

void TBigHuntGetBattleArgsReq::Swap(TBigHuntGetBattleArgsReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(battlecheckparam_, other->battlecheckparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntGetBattleArgsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntGetBattleArgsReq_descriptor_;
  metadata.reflection = TBigHuntGetBattleArgsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntGetBattleArgsRsp::kBattleArgsFieldNumber;
#endif  // !_MSC_VER

TBigHuntGetBattleArgsRsp::TBigHuntGetBattleArgsRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntGetBattleArgsRsp)
}

void TBigHuntGetBattleArgsRsp::InitAsDefaultInstance() {
  battleargs_ = const_cast< ::pb::TBattleArgs*>(&::pb::TBattleArgs::default_instance());
}

TBigHuntGetBattleArgsRsp::TBigHuntGetBattleArgsRsp(const TBigHuntGetBattleArgsRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntGetBattleArgsRsp)
}

void TBigHuntGetBattleArgsRsp::SharedCtor() {
  _cached_size_ = 0;
  battleargs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntGetBattleArgsRsp::~TBigHuntGetBattleArgsRsp() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntGetBattleArgsRsp)
  SharedDtor();
}

void TBigHuntGetBattleArgsRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battleargs_;
  }
}

void TBigHuntGetBattleArgsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntGetBattleArgsRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntGetBattleArgsRsp_descriptor_;
}

const TBigHuntGetBattleArgsRsp& TBigHuntGetBattleArgsRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntGetBattleArgsRsp* TBigHuntGetBattleArgsRsp::default_instance_ = NULL;

TBigHuntGetBattleArgsRsp* TBigHuntGetBattleArgsRsp::New() const {
  return new TBigHuntGetBattleArgsRsp;
}

void TBigHuntGetBattleArgsRsp::Clear() {
  if (has_battleargs()) {
    if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntGetBattleArgsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntGetBattleArgsRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBattleArgs BattleArgs = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntGetBattleArgsRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntGetBattleArgsRsp)
  return false;
#undef DO_
}

void TBigHuntGetBattleArgsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntGetBattleArgsRsp)
  // optional .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battleargs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntGetBattleArgsRsp)
}

::google::protobuf::uint8* TBigHuntGetBattleArgsRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntGetBattleArgsRsp)
  // optional .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battleargs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntGetBattleArgsRsp)
  return target;
}

int TBigHuntGetBattleArgsRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBattleArgs BattleArgs = 1;
    if (has_battleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleargs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntGetBattleArgsRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntGetBattleArgsRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntGetBattleArgsRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntGetBattleArgsRsp::MergeFrom(const TBigHuntGetBattleArgsRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleargs()) {
      mutable_battleargs()->::pb::TBattleArgs::MergeFrom(from.battleargs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntGetBattleArgsRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntGetBattleArgsRsp::CopyFrom(const TBigHuntGetBattleArgsRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntGetBattleArgsRsp::IsInitialized() const {

  if (has_battleargs()) {
    if (!this->battleargs().IsInitialized()) return false;
  }
  return true;
}

void TBigHuntGetBattleArgsRsp::Swap(TBigHuntGetBattleArgsRsp* other) {
  if (other != this) {
    std::swap(battleargs_, other->battleargs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntGetBattleArgsRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntGetBattleArgsRsp_descriptor_;
  metadata.reflection = TBigHuntGetBattleArgsRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntReportBattleNormaMonsterReq::kMonsterIdFieldNumber;
const int TBigHuntReportBattleNormaMonsterReq::kBattleRetFieldNumber;
#endif  // !_MSC_VER

TBigHuntReportBattleNormaMonsterReq::TBigHuntReportBattleNormaMonsterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntReportBattleNormaMonsterReq)
}

void TBigHuntReportBattleNormaMonsterReq::InitAsDefaultInstance() {
}

TBigHuntReportBattleNormaMonsterReq::TBigHuntReportBattleNormaMonsterReq(const TBigHuntReportBattleNormaMonsterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntReportBattleNormaMonsterReq)
}

void TBigHuntReportBattleNormaMonsterReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  monsterid_ = 0u;
  battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntReportBattleNormaMonsterReq::~TBigHuntReportBattleNormaMonsterReq() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntReportBattleNormaMonsterReq)
  SharedDtor();
}

void TBigHuntReportBattleNormaMonsterReq::SharedDtor() {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleret_;
  }
  if (this != default_instance_) {
  }
}

void TBigHuntReportBattleNormaMonsterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntReportBattleNormaMonsterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntReportBattleNormaMonsterReq_descriptor_;
}

const TBigHuntReportBattleNormaMonsterReq& TBigHuntReportBattleNormaMonsterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntReportBattleNormaMonsterReq* TBigHuntReportBattleNormaMonsterReq::default_instance_ = NULL;

TBigHuntReportBattleNormaMonsterReq* TBigHuntReportBattleNormaMonsterReq::New() const {
  return new TBigHuntReportBattleNormaMonsterReq;
}

void TBigHuntReportBattleNormaMonsterReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    monsterid_ = 0u;
    if (has_battleret()) {
      if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battleret_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntReportBattleNormaMonsterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntReportBattleNormaMonsterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MonsterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleRet;
        break;
      }

      // optional bytes BattleRet = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleRet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battleret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntReportBattleNormaMonsterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntReportBattleNormaMonsterReq)
  return false;
#undef DO_
}

void TBigHuntReportBattleNormaMonsterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntReportBattleNormaMonsterReq)
  // optional uint32 MonsterId = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }

  // optional bytes BattleRet = 2;
  if (has_battleret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->battleret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntReportBattleNormaMonsterReq)
}

::google::protobuf::uint8* TBigHuntReportBattleNormaMonsterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntReportBattleNormaMonsterReq)
  // optional uint32 MonsterId = 1;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monsterid(), target);
  }

  // optional bytes BattleRet = 2;
  if (has_battleret()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->battleret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntReportBattleNormaMonsterReq)
  return target;
}

int TBigHuntReportBattleNormaMonsterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MonsterId = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

    // optional bytes BattleRet = 2;
    if (has_battleret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battleret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntReportBattleNormaMonsterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntReportBattleNormaMonsterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntReportBattleNormaMonsterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntReportBattleNormaMonsterReq::MergeFrom(const TBigHuntReportBattleNormaMonsterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_battleret()) {
      set_battleret(from.battleret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntReportBattleNormaMonsterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntReportBattleNormaMonsterReq::CopyFrom(const TBigHuntReportBattleNormaMonsterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntReportBattleNormaMonsterReq::IsInitialized() const {

  return true;
}

void TBigHuntReportBattleNormaMonsterReq::Swap(TBigHuntReportBattleNormaMonsterReq* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(battleret_, other->battleret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntReportBattleNormaMonsterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntReportBattleNormaMonsterReq_descriptor_;
  metadata.reflection = TBigHuntReportBattleNormaMonsterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntReportBattleEliteMonsterReq::kMonsterIdFieldNumber;
const int TBigHuntReportBattleEliteMonsterReq::kBattleRetFieldNumber;
#endif  // !_MSC_VER

TBigHuntReportBattleEliteMonsterReq::TBigHuntReportBattleEliteMonsterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntReportBattleEliteMonsterReq)
}

void TBigHuntReportBattleEliteMonsterReq::InitAsDefaultInstance() {
}

TBigHuntReportBattleEliteMonsterReq::TBigHuntReportBattleEliteMonsterReq(const TBigHuntReportBattleEliteMonsterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntReportBattleEliteMonsterReq)
}

void TBigHuntReportBattleEliteMonsterReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  monsterid_ = 0u;
  battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntReportBattleEliteMonsterReq::~TBigHuntReportBattleEliteMonsterReq() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntReportBattleEliteMonsterReq)
  SharedDtor();
}

void TBigHuntReportBattleEliteMonsterReq::SharedDtor() {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleret_;
  }
  if (this != default_instance_) {
  }
}

void TBigHuntReportBattleEliteMonsterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntReportBattleEliteMonsterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntReportBattleEliteMonsterReq_descriptor_;
}

const TBigHuntReportBattleEliteMonsterReq& TBigHuntReportBattleEliteMonsterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntReportBattleEliteMonsterReq* TBigHuntReportBattleEliteMonsterReq::default_instance_ = NULL;

TBigHuntReportBattleEliteMonsterReq* TBigHuntReportBattleEliteMonsterReq::New() const {
  return new TBigHuntReportBattleEliteMonsterReq;
}

void TBigHuntReportBattleEliteMonsterReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    monsterid_ = 0u;
    if (has_battleret()) {
      if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battleret_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntReportBattleEliteMonsterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntReportBattleEliteMonsterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MonsterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleRet;
        break;
      }

      // optional bytes BattleRet = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleRet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battleret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntReportBattleEliteMonsterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntReportBattleEliteMonsterReq)
  return false;
#undef DO_
}

void TBigHuntReportBattleEliteMonsterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntReportBattleEliteMonsterReq)
  // optional uint32 MonsterId = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }

  // optional bytes BattleRet = 2;
  if (has_battleret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->battleret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntReportBattleEliteMonsterReq)
}

::google::protobuf::uint8* TBigHuntReportBattleEliteMonsterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntReportBattleEliteMonsterReq)
  // optional uint32 MonsterId = 1;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monsterid(), target);
  }

  // optional bytes BattleRet = 2;
  if (has_battleret()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->battleret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntReportBattleEliteMonsterReq)
  return target;
}

int TBigHuntReportBattleEliteMonsterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MonsterId = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

    // optional bytes BattleRet = 2;
    if (has_battleret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battleret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntReportBattleEliteMonsterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntReportBattleEliteMonsterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntReportBattleEliteMonsterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntReportBattleEliteMonsterReq::MergeFrom(const TBigHuntReportBattleEliteMonsterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_battleret()) {
      set_battleret(from.battleret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntReportBattleEliteMonsterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntReportBattleEliteMonsterReq::CopyFrom(const TBigHuntReportBattleEliteMonsterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntReportBattleEliteMonsterReq::IsInitialized() const {

  return true;
}

void TBigHuntReportBattleEliteMonsterReq::Swap(TBigHuntReportBattleEliteMonsterReq* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(battleret_, other->battleret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntReportBattleEliteMonsterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntReportBattleEliteMonsterReq_descriptor_;
  metadata.reflection = TBigHuntReportBattleEliteMonsterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntReportBattleStakeReq::kMonsterIdFieldNumber;
const int TBigHuntReportBattleStakeReq::kBattleRetFieldNumber;
#endif  // !_MSC_VER

TBigHuntReportBattleStakeReq::TBigHuntReportBattleStakeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntReportBattleStakeReq)
}

void TBigHuntReportBattleStakeReq::InitAsDefaultInstance() {
}

TBigHuntReportBattleStakeReq::TBigHuntReportBattleStakeReq(const TBigHuntReportBattleStakeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntReportBattleStakeReq)
}

void TBigHuntReportBattleStakeReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  monsterid_ = 0u;
  battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntReportBattleStakeReq::~TBigHuntReportBattleStakeReq() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntReportBattleStakeReq)
  SharedDtor();
}

void TBigHuntReportBattleStakeReq::SharedDtor() {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleret_;
  }
  if (this != default_instance_) {
  }
}

void TBigHuntReportBattleStakeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntReportBattleStakeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntReportBattleStakeReq_descriptor_;
}

const TBigHuntReportBattleStakeReq& TBigHuntReportBattleStakeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntReportBattleStakeReq* TBigHuntReportBattleStakeReq::default_instance_ = NULL;

TBigHuntReportBattleStakeReq* TBigHuntReportBattleStakeReq::New() const {
  return new TBigHuntReportBattleStakeReq;
}

void TBigHuntReportBattleStakeReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    monsterid_ = 0u;
    if (has_battleret()) {
      if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battleret_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntReportBattleStakeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntReportBattleStakeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MonsterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleRet;
        break;
      }

      // optional bytes BattleRet = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleRet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battleret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntReportBattleStakeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntReportBattleStakeReq)
  return false;
#undef DO_
}

void TBigHuntReportBattleStakeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntReportBattleStakeReq)
  // optional uint32 MonsterId = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }

  // optional bytes BattleRet = 2;
  if (has_battleret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->battleret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntReportBattleStakeReq)
}

::google::protobuf::uint8* TBigHuntReportBattleStakeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntReportBattleStakeReq)
  // optional uint32 MonsterId = 1;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monsterid(), target);
  }

  // optional bytes BattleRet = 2;
  if (has_battleret()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->battleret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntReportBattleStakeReq)
  return target;
}

int TBigHuntReportBattleStakeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MonsterId = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

    // optional bytes BattleRet = 2;
    if (has_battleret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battleret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntReportBattleStakeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntReportBattleStakeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntReportBattleStakeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntReportBattleStakeReq::MergeFrom(const TBigHuntReportBattleStakeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_battleret()) {
      set_battleret(from.battleret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntReportBattleStakeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntReportBattleStakeReq::CopyFrom(const TBigHuntReportBattleStakeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntReportBattleStakeReq::IsInitialized() const {

  return true;
}

void TBigHuntReportBattleStakeReq::Swap(TBigHuntReportBattleStakeReq* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(battleret_, other->battleret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntReportBattleStakeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntReportBattleStakeReq_descriptor_;
  metadata.reflection = TBigHuntReportBattleStakeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntReportBattleMonsterRsp::kKillTypeFieldNumber;
const int TBigHuntReportBattleMonsterRsp::kRewardArrFieldNumber;
const int TBigHuntReportBattleMonsterRsp::kIsSuccessFieldNumber;
#endif  // !_MSC_VER

TBigHuntReportBattleMonsterRsp::TBigHuntReportBattleMonsterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntReportBattleMonsterRsp)
}

void TBigHuntReportBattleMonsterRsp::InitAsDefaultInstance() {
}

TBigHuntReportBattleMonsterRsp::TBigHuntReportBattleMonsterRsp(const TBigHuntReportBattleMonsterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntReportBattleMonsterRsp)
}

void TBigHuntReportBattleMonsterRsp::SharedCtor() {
  _cached_size_ = 0;
  killtype_ = 301;
  issuccess_ = 201;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntReportBattleMonsterRsp::~TBigHuntReportBattleMonsterRsp() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntReportBattleMonsterRsp)
  SharedDtor();
}

void TBigHuntReportBattleMonsterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBigHuntReportBattleMonsterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntReportBattleMonsterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntReportBattleMonsterRsp_descriptor_;
}

const TBigHuntReportBattleMonsterRsp& TBigHuntReportBattleMonsterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntReportBattleMonsterRsp* TBigHuntReportBattleMonsterRsp::default_instance_ = NULL;

TBigHuntReportBattleMonsterRsp* TBigHuntReportBattleMonsterRsp::New() const {
  return new TBigHuntReportBattleMonsterRsp;
}

void TBigHuntReportBattleMonsterRsp::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    killtype_ = 301;
    issuccess_ = 201;
  }
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntReportBattleMonsterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntReportBattleMonsterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EBigHuntKillType KillType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EBigHuntKillType_IsValid(value)) {
            set_killtype(static_cast< ::pb::EBigHuntKillType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArr;
        if (input->ExpectTag(24)) goto parse_isSuccess;
        break;
      }

      // optional .pb.EBigHuntSuccessType isSuccess = 3;
      case 3: {
        if (tag == 24) {
         parse_isSuccess:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EBigHuntSuccessType_IsValid(value)) {
            set_issuccess(static_cast< ::pb::EBigHuntSuccessType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntReportBattleMonsterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntReportBattleMonsterRsp)
  return false;
#undef DO_
}

void TBigHuntReportBattleMonsterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntReportBattleMonsterRsp)
  // optional .pb.EBigHuntKillType KillType = 1;
  if (has_killtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->killtype(), output);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardarr(i), output);
  }

  // optional .pb.EBigHuntSuccessType isSuccess = 3;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->issuccess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntReportBattleMonsterRsp)
}

::google::protobuf::uint8* TBigHuntReportBattleMonsterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntReportBattleMonsterRsp)
  // optional .pb.EBigHuntKillType KillType = 1;
  if (has_killtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->killtype(), target);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardarr(i), target);
  }

  // optional .pb.EBigHuntSuccessType isSuccess = 3;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->issuccess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntReportBattleMonsterRsp)
  return target;
}

int TBigHuntReportBattleMonsterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EBigHuntKillType KillType = 1;
    if (has_killtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->killtype());
    }

    // optional .pb.EBigHuntSuccessType isSuccess = 3;
    if (has_issuccess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->issuccess());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 2;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntReportBattleMonsterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntReportBattleMonsterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntReportBattleMonsterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntReportBattleMonsterRsp::MergeFrom(const TBigHuntReportBattleMonsterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_killtype()) {
      set_killtype(from.killtype());
    }
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntReportBattleMonsterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntReportBattleMonsterRsp::CopyFrom(const TBigHuntReportBattleMonsterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntReportBattleMonsterRsp::IsInitialized() const {

  return true;
}

void TBigHuntReportBattleMonsterRsp::Swap(TBigHuntReportBattleMonsterRsp* other) {
  if (other != this) {
    std::swap(killtype_, other->killtype_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(issuccess_, other->issuccess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntReportBattleMonsterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntReportBattleMonsterRsp_descriptor_;
  metadata.reflection = TBigHuntReportBattleMonsterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntReportBattleBossReq::kBossIdFieldNumber;
const int TBigHuntReportBattleBossReq::kBattleRetFieldNumber;
#endif  // !_MSC_VER

TBigHuntReportBattleBossReq::TBigHuntReportBattleBossReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntReportBattleBossReq)
}

void TBigHuntReportBattleBossReq::InitAsDefaultInstance() {
}

TBigHuntReportBattleBossReq::TBigHuntReportBattleBossReq(const TBigHuntReportBattleBossReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntReportBattleBossReq)
}

void TBigHuntReportBattleBossReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bossid_ = 0u;
  battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntReportBattleBossReq::~TBigHuntReportBattleBossReq() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntReportBattleBossReq)
  SharedDtor();
}

void TBigHuntReportBattleBossReq::SharedDtor() {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleret_;
  }
  if (this != default_instance_) {
  }
}

void TBigHuntReportBattleBossReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntReportBattleBossReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntReportBattleBossReq_descriptor_;
}

const TBigHuntReportBattleBossReq& TBigHuntReportBattleBossReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntReportBattleBossReq* TBigHuntReportBattleBossReq::default_instance_ = NULL;

TBigHuntReportBattleBossReq* TBigHuntReportBattleBossReq::New() const {
  return new TBigHuntReportBattleBossReq;
}

void TBigHuntReportBattleBossReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    bossid_ = 0u;
    if (has_battleret()) {
      if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battleret_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntReportBattleBossReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntReportBattleBossReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleRet;
        break;
      }

      // optional bytes BattleRet = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleRet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battleret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntReportBattleBossReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntReportBattleBossReq)
  return false;
#undef DO_
}

void TBigHuntReportBattleBossReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntReportBattleBossReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  // optional bytes BattleRet = 2;
  if (has_battleret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->battleret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntReportBattleBossReq)
}

::google::protobuf::uint8* TBigHuntReportBattleBossReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntReportBattleBossReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  // optional bytes BattleRet = 2;
  if (has_battleret()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->battleret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntReportBattleBossReq)
  return target;
}

int TBigHuntReportBattleBossReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional bytes BattleRet = 2;
    if (has_battleret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battleret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntReportBattleBossReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntReportBattleBossReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntReportBattleBossReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntReportBattleBossReq::MergeFrom(const TBigHuntReportBattleBossReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_battleret()) {
      set_battleret(from.battleret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntReportBattleBossReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntReportBattleBossReq::CopyFrom(const TBigHuntReportBattleBossReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntReportBattleBossReq::IsInitialized() const {

  return true;
}

void TBigHuntReportBattleBossReq::Swap(TBigHuntReportBattleBossReq* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(battleret_, other->battleret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntReportBattleBossReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntReportBattleBossReq_descriptor_;
  metadata.reflection = TBigHuntReportBattleBossReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntReportBattleBossRsp::kIsKillFieldNumber;
const int TBigHuntReportBattleBossRsp::kRewardArrFieldNumber;
const int TBigHuntReportBattleBossRsp::kHpPercentageFieldNumber;
const int TBigHuntReportBattleBossRsp::kIsSuccessFieldNumber;
#endif  // !_MSC_VER

TBigHuntReportBattleBossRsp::TBigHuntReportBattleBossRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntReportBattleBossRsp)
}

void TBigHuntReportBattleBossRsp::InitAsDefaultInstance() {
}

TBigHuntReportBattleBossRsp::TBigHuntReportBattleBossRsp(const TBigHuntReportBattleBossRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntReportBattleBossRsp)
}

void TBigHuntReportBattleBossRsp::SharedCtor() {
  _cached_size_ = 0;
  iskill_ = 0u;
  hppercentage_ = GOOGLE_ULONGLONG(0);
  issuccess_ = 201;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntReportBattleBossRsp::~TBigHuntReportBattleBossRsp() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntReportBattleBossRsp)
  SharedDtor();
}

void TBigHuntReportBattleBossRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBigHuntReportBattleBossRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntReportBattleBossRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntReportBattleBossRsp_descriptor_;
}

const TBigHuntReportBattleBossRsp& TBigHuntReportBattleBossRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntReportBattleBossRsp* TBigHuntReportBattleBossRsp::default_instance_ = NULL;

TBigHuntReportBattleBossRsp* TBigHuntReportBattleBossRsp::New() const {
  return new TBigHuntReportBattleBossRsp;
}

void TBigHuntReportBattleBossRsp::Clear() {
  if (_has_bits_[0 / 32] & 13) {
    iskill_ = 0u;
    hppercentage_ = GOOGLE_ULONGLONG(0);
    issuccess_ = 201;
  }
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntReportBattleBossRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntReportBattleBossRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 isKill = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iskill_)));
          set_has_iskill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArr;
        if (input->ExpectTag(24)) goto parse_HpPercentage;
        break;
      }

      // optional uint64 HpPercentage = 3;
      case 3: {
        if (tag == 24) {
         parse_HpPercentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hppercentage_)));
          set_has_hppercentage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isSuccess;
        break;
      }

      // optional .pb.EBigHuntSuccessType isSuccess = 4;
      case 4: {
        if (tag == 32) {
         parse_isSuccess:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EBigHuntSuccessType_IsValid(value)) {
            set_issuccess(static_cast< ::pb::EBigHuntSuccessType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntReportBattleBossRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntReportBattleBossRsp)
  return false;
#undef DO_
}

void TBigHuntReportBattleBossRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntReportBattleBossRsp)
  // optional uint32 isKill = 1;
  if (has_iskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->iskill(), output);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardarr(i), output);
  }

  // optional uint64 HpPercentage = 3;
  if (has_hppercentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hppercentage(), output);
  }

  // optional .pb.EBigHuntSuccessType isSuccess = 4;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->issuccess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntReportBattleBossRsp)
}

::google::protobuf::uint8* TBigHuntReportBattleBossRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntReportBattleBossRsp)
  // optional uint32 isKill = 1;
  if (has_iskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->iskill(), target);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardarr(i), target);
  }

  // optional uint64 HpPercentage = 3;
  if (has_hppercentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->hppercentage(), target);
  }

  // optional .pb.EBigHuntSuccessType isSuccess = 4;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->issuccess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntReportBattleBossRsp)
  return target;
}

int TBigHuntReportBattleBossRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 isKill = 1;
    if (has_iskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iskill());
    }

    // optional uint64 HpPercentage = 3;
    if (has_hppercentage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hppercentage());
    }

    // optional .pb.EBigHuntSuccessType isSuccess = 4;
    if (has_issuccess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->issuccess());
    }

  }
  // repeated .pb.TCommonReward RewardArr = 2;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntReportBattleBossRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntReportBattleBossRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntReportBattleBossRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntReportBattleBossRsp::MergeFrom(const TBigHuntReportBattleBossRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iskill()) {
      set_iskill(from.iskill());
    }
    if (from.has_hppercentage()) {
      set_hppercentage(from.hppercentage());
    }
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntReportBattleBossRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntReportBattleBossRsp::CopyFrom(const TBigHuntReportBattleBossRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntReportBattleBossRsp::IsInitialized() const {

  return true;
}

void TBigHuntReportBattleBossRsp::Swap(TBigHuntReportBattleBossRsp* other) {
  if (other != this) {
    std::swap(iskill_, other->iskill_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(hppercentage_, other->hppercentage_);
    std::swap(issuccess_, other->issuccess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntReportBattleBossRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntReportBattleBossRsp_descriptor_;
  metadata.reflection = TBigHuntReportBattleBossRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntGetSelfDynamicInfoRsp::kDynamicArrFieldNumber;
#endif  // !_MSC_VER

TBigHuntGetSelfDynamicInfoRsp::TBigHuntGetSelfDynamicInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntGetSelfDynamicInfoRsp)
}

void TBigHuntGetSelfDynamicInfoRsp::InitAsDefaultInstance() {
}

TBigHuntGetSelfDynamicInfoRsp::TBigHuntGetSelfDynamicInfoRsp(const TBigHuntGetSelfDynamicInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntGetSelfDynamicInfoRsp)
}

void TBigHuntGetSelfDynamicInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntGetSelfDynamicInfoRsp::~TBigHuntGetSelfDynamicInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntGetSelfDynamicInfoRsp)
  SharedDtor();
}

void TBigHuntGetSelfDynamicInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBigHuntGetSelfDynamicInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntGetSelfDynamicInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntGetSelfDynamicInfoRsp_descriptor_;
}

const TBigHuntGetSelfDynamicInfoRsp& TBigHuntGetSelfDynamicInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntGetSelfDynamicInfoRsp* TBigHuntGetSelfDynamicInfoRsp::default_instance_ = NULL;

TBigHuntGetSelfDynamicInfoRsp* TBigHuntGetSelfDynamicInfoRsp::New() const {
  return new TBigHuntGetSelfDynamicInfoRsp;
}

void TBigHuntGetSelfDynamicInfoRsp::Clear() {
  dynamicarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntGetSelfDynamicInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntGetSelfDynamicInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TBigHuntSelfDynamicInfo DynamicArr = 1;
      case 1: {
        if (tag == 10) {
         parse_DynamicArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dynamicarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_DynamicArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntGetSelfDynamicInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntGetSelfDynamicInfoRsp)
  return false;
#undef DO_
}

void TBigHuntGetSelfDynamicInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntGetSelfDynamicInfoRsp)
  // repeated .pb.TBigHuntSelfDynamicInfo DynamicArr = 1;
  for (int i = 0; i < this->dynamicarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dynamicarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntGetSelfDynamicInfoRsp)
}

::google::protobuf::uint8* TBigHuntGetSelfDynamicInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntGetSelfDynamicInfoRsp)
  // repeated .pb.TBigHuntSelfDynamicInfo DynamicArr = 1;
  for (int i = 0; i < this->dynamicarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dynamicarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntGetSelfDynamicInfoRsp)
  return target;
}

int TBigHuntGetSelfDynamicInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TBigHuntSelfDynamicInfo DynamicArr = 1;
  total_size += 1 * this->dynamicarr_size();
  for (int i = 0; i < this->dynamicarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dynamicarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntGetSelfDynamicInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntGetSelfDynamicInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntGetSelfDynamicInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntGetSelfDynamicInfoRsp::MergeFrom(const TBigHuntGetSelfDynamicInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  dynamicarr_.MergeFrom(from.dynamicarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntGetSelfDynamicInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntGetSelfDynamicInfoRsp::CopyFrom(const TBigHuntGetSelfDynamicInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntGetSelfDynamicInfoRsp::IsInitialized() const {

  return true;
}

void TBigHuntGetSelfDynamicInfoRsp::Swap(TBigHuntGetSelfDynamicInfoRsp* other) {
  if (other != this) {
    dynamicarr_.Swap(&other->dynamicarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntGetSelfDynamicInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntGetSelfDynamicInfoRsp_descriptor_;
  metadata.reflection = TBigHuntGetSelfDynamicInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntReceiveAllianceCoinRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

TBigHuntReceiveAllianceCoinRewardReq::TBigHuntReceiveAllianceCoinRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntReceiveAllianceCoinRewardReq)
}

void TBigHuntReceiveAllianceCoinRewardReq::InitAsDefaultInstance() {
}

TBigHuntReceiveAllianceCoinRewardReq::TBigHuntReceiveAllianceCoinRewardReq(const TBigHuntReceiveAllianceCoinRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntReceiveAllianceCoinRewardReq)
}

void TBigHuntReceiveAllianceCoinRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntReceiveAllianceCoinRewardReq::~TBigHuntReceiveAllianceCoinRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntReceiveAllianceCoinRewardReq)
  SharedDtor();
}

void TBigHuntReceiveAllianceCoinRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBigHuntReceiveAllianceCoinRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntReceiveAllianceCoinRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntReceiveAllianceCoinRewardReq_descriptor_;
}

const TBigHuntReceiveAllianceCoinRewardReq& TBigHuntReceiveAllianceCoinRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntReceiveAllianceCoinRewardReq* TBigHuntReceiveAllianceCoinRewardReq::default_instance_ = NULL;

TBigHuntReceiveAllianceCoinRewardReq* TBigHuntReceiveAllianceCoinRewardReq::New() const {
  return new TBigHuntReceiveAllianceCoinRewardReq;
}

void TBigHuntReceiveAllianceCoinRewardReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntReceiveAllianceCoinRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntReceiveAllianceCoinRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntReceiveAllianceCoinRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntReceiveAllianceCoinRewardReq)
  return false;
#undef DO_
}

void TBigHuntReceiveAllianceCoinRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntReceiveAllianceCoinRewardReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntReceiveAllianceCoinRewardReq)
}

::google::protobuf::uint8* TBigHuntReceiveAllianceCoinRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntReceiveAllianceCoinRewardReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntReceiveAllianceCoinRewardReq)
  return target;
}

int TBigHuntReceiveAllianceCoinRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntReceiveAllianceCoinRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntReceiveAllianceCoinRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntReceiveAllianceCoinRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntReceiveAllianceCoinRewardReq::MergeFrom(const TBigHuntReceiveAllianceCoinRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntReceiveAllianceCoinRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntReceiveAllianceCoinRewardReq::CopyFrom(const TBigHuntReceiveAllianceCoinRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntReceiveAllianceCoinRewardReq::IsInitialized() const {

  return true;
}

void TBigHuntReceiveAllianceCoinRewardReq::Swap(TBigHuntReceiveAllianceCoinRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntReceiveAllianceCoinRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntReceiveAllianceCoinRewardReq_descriptor_;
  metadata.reflection = TBigHuntReceiveAllianceCoinRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntReceiveAllianceCoinRewardRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TBigHuntReceiveAllianceCoinRewardRsp::TBigHuntReceiveAllianceCoinRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntReceiveAllianceCoinRewardRsp)
}

void TBigHuntReceiveAllianceCoinRewardRsp::InitAsDefaultInstance() {
}

TBigHuntReceiveAllianceCoinRewardRsp::TBigHuntReceiveAllianceCoinRewardRsp(const TBigHuntReceiveAllianceCoinRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntReceiveAllianceCoinRewardRsp)
}

void TBigHuntReceiveAllianceCoinRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntReceiveAllianceCoinRewardRsp::~TBigHuntReceiveAllianceCoinRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntReceiveAllianceCoinRewardRsp)
  SharedDtor();
}

void TBigHuntReceiveAllianceCoinRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBigHuntReceiveAllianceCoinRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntReceiveAllianceCoinRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntReceiveAllianceCoinRewardRsp_descriptor_;
}

const TBigHuntReceiveAllianceCoinRewardRsp& TBigHuntReceiveAllianceCoinRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntReceiveAllianceCoinRewardRsp* TBigHuntReceiveAllianceCoinRewardRsp::default_instance_ = NULL;

TBigHuntReceiveAllianceCoinRewardRsp* TBigHuntReceiveAllianceCoinRewardRsp::New() const {
  return new TBigHuntReceiveAllianceCoinRewardRsp;
}

void TBigHuntReceiveAllianceCoinRewardRsp::Clear() {
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntReceiveAllianceCoinRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntReceiveAllianceCoinRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntReceiveAllianceCoinRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntReceiveAllianceCoinRewardRsp)
  return false;
#undef DO_
}

void TBigHuntReceiveAllianceCoinRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntReceiveAllianceCoinRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntReceiveAllianceCoinRewardRsp)
}

::google::protobuf::uint8* TBigHuntReceiveAllianceCoinRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntReceiveAllianceCoinRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntReceiveAllianceCoinRewardRsp)
  return target;
}

int TBigHuntReceiveAllianceCoinRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntReceiveAllianceCoinRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntReceiveAllianceCoinRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntReceiveAllianceCoinRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntReceiveAllianceCoinRewardRsp::MergeFrom(const TBigHuntReceiveAllianceCoinRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntReceiveAllianceCoinRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntReceiveAllianceCoinRewardRsp::CopyFrom(const TBigHuntReceiveAllianceCoinRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntReceiveAllianceCoinRewardRsp::IsInitialized() const {

  return true;
}

void TBigHuntReceiveAllianceCoinRewardRsp::Swap(TBigHuntReceiveAllianceCoinRewardRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntReceiveAllianceCoinRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntReceiveAllianceCoinRewardRsp_descriptor_;
  metadata.reflection = TBigHuntReceiveAllianceCoinRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntBuyChallengeNumReq::kNumFieldNumber;
#endif  // !_MSC_VER

TBigHuntBuyChallengeNumReq::TBigHuntBuyChallengeNumReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntBuyChallengeNumReq)
}

void TBigHuntBuyChallengeNumReq::InitAsDefaultInstance() {
}

TBigHuntBuyChallengeNumReq::TBigHuntBuyChallengeNumReq(const TBigHuntBuyChallengeNumReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntBuyChallengeNumReq)
}

void TBigHuntBuyChallengeNumReq::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntBuyChallengeNumReq::~TBigHuntBuyChallengeNumReq() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntBuyChallengeNumReq)
  SharedDtor();
}

void TBigHuntBuyChallengeNumReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBigHuntBuyChallengeNumReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntBuyChallengeNumReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntBuyChallengeNumReq_descriptor_;
}

const TBigHuntBuyChallengeNumReq& TBigHuntBuyChallengeNumReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntBuyChallengeNumReq* TBigHuntBuyChallengeNumReq::default_instance_ = NULL;

TBigHuntBuyChallengeNumReq* TBigHuntBuyChallengeNumReq::New() const {
  return new TBigHuntBuyChallengeNumReq;
}

void TBigHuntBuyChallengeNumReq::Clear() {
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntBuyChallengeNumReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntBuyChallengeNumReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntBuyChallengeNumReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntBuyChallengeNumReq)
  return false;
#undef DO_
}

void TBigHuntBuyChallengeNumReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntBuyChallengeNumReq)
  // optional uint32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntBuyChallengeNumReq)
}

::google::protobuf::uint8* TBigHuntBuyChallengeNumReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntBuyChallengeNumReq)
  // optional uint32 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntBuyChallengeNumReq)
  return target;
}

int TBigHuntBuyChallengeNumReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntBuyChallengeNumReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntBuyChallengeNumReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntBuyChallengeNumReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntBuyChallengeNumReq::MergeFrom(const TBigHuntBuyChallengeNumReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntBuyChallengeNumReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntBuyChallengeNumReq::CopyFrom(const TBigHuntBuyChallengeNumReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntBuyChallengeNumReq::IsInitialized() const {

  return true;
}

void TBigHuntBuyChallengeNumReq::Swap(TBigHuntBuyChallengeNumReq* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntBuyChallengeNumReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntBuyChallengeNumReq_descriptor_;
  metadata.reflection = TBigHuntBuyChallengeNumReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntUpgradeDimensionReq::kIdFieldNumber;
#endif  // !_MSC_VER

TBigHuntUpgradeDimensionReq::TBigHuntUpgradeDimensionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntUpgradeDimensionReq)
}

void TBigHuntUpgradeDimensionReq::InitAsDefaultInstance() {
}

TBigHuntUpgradeDimensionReq::TBigHuntUpgradeDimensionReq(const TBigHuntUpgradeDimensionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntUpgradeDimensionReq)
}

void TBigHuntUpgradeDimensionReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntUpgradeDimensionReq::~TBigHuntUpgradeDimensionReq() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntUpgradeDimensionReq)
  SharedDtor();
}

void TBigHuntUpgradeDimensionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBigHuntUpgradeDimensionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntUpgradeDimensionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntUpgradeDimensionReq_descriptor_;
}

const TBigHuntUpgradeDimensionReq& TBigHuntUpgradeDimensionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntUpgradeDimensionReq* TBigHuntUpgradeDimensionReq::default_instance_ = NULL;

TBigHuntUpgradeDimensionReq* TBigHuntUpgradeDimensionReq::New() const {
  return new TBigHuntUpgradeDimensionReq;
}

void TBigHuntUpgradeDimensionReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntUpgradeDimensionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntUpgradeDimensionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntUpgradeDimensionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntUpgradeDimensionReq)
  return false;
#undef DO_
}

void TBigHuntUpgradeDimensionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntUpgradeDimensionReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntUpgradeDimensionReq)
}

::google::protobuf::uint8* TBigHuntUpgradeDimensionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntUpgradeDimensionReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntUpgradeDimensionReq)
  return target;
}

int TBigHuntUpgradeDimensionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntUpgradeDimensionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntUpgradeDimensionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntUpgradeDimensionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntUpgradeDimensionReq::MergeFrom(const TBigHuntUpgradeDimensionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntUpgradeDimensionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntUpgradeDimensionReq::CopyFrom(const TBigHuntUpgradeDimensionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntUpgradeDimensionReq::IsInitialized() const {

  return true;
}

void TBigHuntUpgradeDimensionReq::Swap(TBigHuntUpgradeDimensionReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntUpgradeDimensionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntUpgradeDimensionReq_descriptor_;
  metadata.reflection = TBigHuntUpgradeDimensionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntAllianceCoinRankList::kAllianceInfoFieldNumber;
const int TBigHuntAllianceCoinRankList::kCoinNumFieldNumber;
const int TBigHuntAllianceCoinRankList::kRankFieldNumber;
#endif  // !_MSC_VER

TBigHuntAllianceCoinRankList::TBigHuntAllianceCoinRankList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntAllianceCoinRankList)
}

void TBigHuntAllianceCoinRankList::InitAsDefaultInstance() {
  allianceinfo_ = const_cast< ::pb::TAllianceSimpleInfo*>(&::pb::TAllianceSimpleInfo::default_instance());
}

TBigHuntAllianceCoinRankList::TBigHuntAllianceCoinRankList(const TBigHuntAllianceCoinRankList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntAllianceCoinRankList)
}

void TBigHuntAllianceCoinRankList::SharedCtor() {
  _cached_size_ = 0;
  allianceinfo_ = NULL;
  coinnum_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntAllianceCoinRankList::~TBigHuntAllianceCoinRankList() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntAllianceCoinRankList)
  SharedDtor();
}

void TBigHuntAllianceCoinRankList::SharedDtor() {
  if (this != default_instance_) {
    delete allianceinfo_;
  }
}

void TBigHuntAllianceCoinRankList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntAllianceCoinRankList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntAllianceCoinRankList_descriptor_;
}

const TBigHuntAllianceCoinRankList& TBigHuntAllianceCoinRankList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntAllianceCoinRankList* TBigHuntAllianceCoinRankList::default_instance_ = NULL;

TBigHuntAllianceCoinRankList* TBigHuntAllianceCoinRankList::New() const {
  return new TBigHuntAllianceCoinRankList;
}

void TBigHuntAllianceCoinRankList::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBigHuntAllianceCoinRankList*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(coinnum_, rank_);
    if (has_allianceinfo()) {
      if (allianceinfo_ != NULL) allianceinfo_->::pb::TAllianceSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntAllianceCoinRankList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntAllianceCoinRankList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAllianceSimpleInfo AllianceInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_allianceinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CoinNum;
        break;
      }

      // optional uint64 CoinNum = 2;
      case 2: {
        if (tag == 16) {
         parse_CoinNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &coinnum_)));
          set_has_coinnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 3;
      case 3: {
        if (tag == 24) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntAllianceCoinRankList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntAllianceCoinRankList)
  return false;
#undef DO_
}

void TBigHuntAllianceCoinRankList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntAllianceCoinRankList)
  // optional .pb.TAllianceSimpleInfo AllianceInfo = 1;
  if (has_allianceinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allianceinfo(), output);
  }

  // optional uint64 CoinNum = 2;
  if (has_coinnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->coinnum(), output);
  }

  // optional uint32 Rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntAllianceCoinRankList)
}

::google::protobuf::uint8* TBigHuntAllianceCoinRankList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntAllianceCoinRankList)
  // optional .pb.TAllianceSimpleInfo AllianceInfo = 1;
  if (has_allianceinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allianceinfo(), target);
  }

  // optional uint64 CoinNum = 2;
  if (has_coinnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->coinnum(), target);
  }

  // optional uint32 Rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntAllianceCoinRankList)
  return target;
}

int TBigHuntAllianceCoinRankList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAllianceSimpleInfo AllianceInfo = 1;
    if (has_allianceinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->allianceinfo());
    }

    // optional uint64 CoinNum = 2;
    if (has_coinnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->coinnum());
    }

    // optional uint32 Rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntAllianceCoinRankList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntAllianceCoinRankList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntAllianceCoinRankList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntAllianceCoinRankList::MergeFrom(const TBigHuntAllianceCoinRankList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allianceinfo()) {
      mutable_allianceinfo()->::pb::TAllianceSimpleInfo::MergeFrom(from.allianceinfo());
    }
    if (from.has_coinnum()) {
      set_coinnum(from.coinnum());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntAllianceCoinRankList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntAllianceCoinRankList::CopyFrom(const TBigHuntAllianceCoinRankList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntAllianceCoinRankList::IsInitialized() const {

  return true;
}

void TBigHuntAllianceCoinRankList::Swap(TBigHuntAllianceCoinRankList* other) {
  if (other != this) {
    std::swap(allianceinfo_, other->allianceinfo_);
    std::swap(coinnum_, other->coinnum_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntAllianceCoinRankList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntAllianceCoinRankList_descriptor_;
  metadata.reflection = TBigHuntAllianceCoinRankList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntAllianceCoinListRankReq::kOffsetFieldNumber;
const int TBigHuntAllianceCoinListRankReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TBigHuntAllianceCoinListRankReq::TBigHuntAllianceCoinListRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntAllianceCoinListRankReq)
}

void TBigHuntAllianceCoinListRankReq::InitAsDefaultInstance() {
}

TBigHuntAllianceCoinListRankReq::TBigHuntAllianceCoinListRankReq(const TBigHuntAllianceCoinListRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntAllianceCoinListRankReq)
}

void TBigHuntAllianceCoinListRankReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntAllianceCoinListRankReq::~TBigHuntAllianceCoinListRankReq() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntAllianceCoinListRankReq)
  SharedDtor();
}

void TBigHuntAllianceCoinListRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBigHuntAllianceCoinListRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntAllianceCoinListRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntAllianceCoinListRankReq_descriptor_;
}

const TBigHuntAllianceCoinListRankReq& TBigHuntAllianceCoinListRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntAllianceCoinListRankReq* TBigHuntAllianceCoinListRankReq::default_instance_ = NULL;

TBigHuntAllianceCoinListRankReq* TBigHuntAllianceCoinListRankReq::New() const {
  return new TBigHuntAllianceCoinListRankReq;
}

void TBigHuntAllianceCoinListRankReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBigHuntAllianceCoinListRankReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntAllianceCoinListRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntAllianceCoinListRankReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntAllianceCoinListRankReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntAllianceCoinListRankReq)
  return false;
#undef DO_
}

void TBigHuntAllianceCoinListRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntAllianceCoinListRankReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntAllianceCoinListRankReq)
}

::google::protobuf::uint8* TBigHuntAllianceCoinListRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntAllianceCoinListRankReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntAllianceCoinListRankReq)
  return target;
}

int TBigHuntAllianceCoinListRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntAllianceCoinListRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntAllianceCoinListRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntAllianceCoinListRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntAllianceCoinListRankReq::MergeFrom(const TBigHuntAllianceCoinListRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntAllianceCoinListRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntAllianceCoinListRankReq::CopyFrom(const TBigHuntAllianceCoinListRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntAllianceCoinListRankReq::IsInitialized() const {

  return true;
}

void TBigHuntAllianceCoinListRankReq::Swap(TBigHuntAllianceCoinListRankReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntAllianceCoinListRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntAllianceCoinListRankReq_descriptor_;
  metadata.reflection = TBigHuntAllianceCoinListRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntAllianceCoinListRankRsp::kSelfAllianceRankFieldNumber;
const int TBigHuntAllianceCoinListRankRsp::kAllianceListArrFieldNumber;
#endif  // !_MSC_VER

TBigHuntAllianceCoinListRankRsp::TBigHuntAllianceCoinListRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntAllianceCoinListRankRsp)
}

void TBigHuntAllianceCoinListRankRsp::InitAsDefaultInstance() {
  selfalliancerank_ = const_cast< ::pb::TBigHuntAllianceCoinRankList*>(&::pb::TBigHuntAllianceCoinRankList::default_instance());
}

TBigHuntAllianceCoinListRankRsp::TBigHuntAllianceCoinListRankRsp(const TBigHuntAllianceCoinListRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntAllianceCoinListRankRsp)
}

void TBigHuntAllianceCoinListRankRsp::SharedCtor() {
  _cached_size_ = 0;
  selfalliancerank_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntAllianceCoinListRankRsp::~TBigHuntAllianceCoinListRankRsp() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntAllianceCoinListRankRsp)
  SharedDtor();
}

void TBigHuntAllianceCoinListRankRsp::SharedDtor() {
  if (this != default_instance_) {
    delete selfalliancerank_;
  }
}

void TBigHuntAllianceCoinListRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntAllianceCoinListRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntAllianceCoinListRankRsp_descriptor_;
}

const TBigHuntAllianceCoinListRankRsp& TBigHuntAllianceCoinListRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntAllianceCoinListRankRsp* TBigHuntAllianceCoinListRankRsp::default_instance_ = NULL;

TBigHuntAllianceCoinListRankRsp* TBigHuntAllianceCoinListRankRsp::New() const {
  return new TBigHuntAllianceCoinListRankRsp;
}

void TBigHuntAllianceCoinListRankRsp::Clear() {
  if (has_selfalliancerank()) {
    if (selfalliancerank_ != NULL) selfalliancerank_->::pb::TBigHuntAllianceCoinRankList::Clear();
  }
  alliancelistarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntAllianceCoinListRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntAllianceCoinListRankRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBigHuntAllianceCoinRankList SelfAllianceRank = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfalliancerank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AllianceListArr;
        break;
      }

      // repeated .pb.TBigHuntAllianceCoinRankList AllianceListArr = 2;
      case 2: {
        if (tag == 18) {
         parse_AllianceListArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alliancelistarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AllianceListArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntAllianceCoinListRankRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntAllianceCoinListRankRsp)
  return false;
#undef DO_
}

void TBigHuntAllianceCoinListRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntAllianceCoinListRankRsp)
  // optional .pb.TBigHuntAllianceCoinRankList SelfAllianceRank = 1;
  if (has_selfalliancerank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selfalliancerank(), output);
  }

  // repeated .pb.TBigHuntAllianceCoinRankList AllianceListArr = 2;
  for (int i = 0; i < this->alliancelistarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->alliancelistarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntAllianceCoinListRankRsp)
}

::google::protobuf::uint8* TBigHuntAllianceCoinListRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntAllianceCoinListRankRsp)
  // optional .pb.TBigHuntAllianceCoinRankList SelfAllianceRank = 1;
  if (has_selfalliancerank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->selfalliancerank(), target);
  }

  // repeated .pb.TBigHuntAllianceCoinRankList AllianceListArr = 2;
  for (int i = 0; i < this->alliancelistarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->alliancelistarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntAllianceCoinListRankRsp)
  return target;
}

int TBigHuntAllianceCoinListRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBigHuntAllianceCoinRankList SelfAllianceRank = 1;
    if (has_selfalliancerank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfalliancerank());
    }

  }
  // repeated .pb.TBigHuntAllianceCoinRankList AllianceListArr = 2;
  total_size += 1 * this->alliancelistarr_size();
  for (int i = 0; i < this->alliancelistarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alliancelistarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntAllianceCoinListRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntAllianceCoinListRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntAllianceCoinListRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntAllianceCoinListRankRsp::MergeFrom(const TBigHuntAllianceCoinListRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  alliancelistarr_.MergeFrom(from.alliancelistarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfalliancerank()) {
      mutable_selfalliancerank()->::pb::TBigHuntAllianceCoinRankList::MergeFrom(from.selfalliancerank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntAllianceCoinListRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntAllianceCoinListRankRsp::CopyFrom(const TBigHuntAllianceCoinListRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntAllianceCoinListRankRsp::IsInitialized() const {

  return true;
}

void TBigHuntAllianceCoinListRankRsp::Swap(TBigHuntAllianceCoinListRankRsp* other) {
  if (other != this) {
    std::swap(selfalliancerank_, other->selfalliancerank_);
    alliancelistarr_.Swap(&other->alliancelistarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntAllianceCoinListRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntAllianceCoinListRankRsp_descriptor_;
  metadata.reflection = TBigHuntAllianceCoinListRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntBossSelfDamageRankList::kDamageFieldNumber;
const int TBigHuntBossSelfDamageRankList::kUserInfoFieldNumber;
const int TBigHuntBossSelfDamageRankList::kRankFieldNumber;
#endif  // !_MSC_VER

TBigHuntBossSelfDamageRankList::TBigHuntBossSelfDamageRankList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntBossSelfDamageRankList)
}

void TBigHuntBossSelfDamageRankList::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TBigHuntBossSelfDamageRankList::TBigHuntBossSelfDamageRankList(const TBigHuntBossSelfDamageRankList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntBossSelfDamageRankList)
}

void TBigHuntBossSelfDamageRankList::SharedCtor() {
  _cached_size_ = 0;
  damage_ = GOOGLE_ULONGLONG(0);
  userinfo_ = NULL;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntBossSelfDamageRankList::~TBigHuntBossSelfDamageRankList() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntBossSelfDamageRankList)
  SharedDtor();
}

void TBigHuntBossSelfDamageRankList::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TBigHuntBossSelfDamageRankList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntBossSelfDamageRankList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntBossSelfDamageRankList_descriptor_;
}

const TBigHuntBossSelfDamageRankList& TBigHuntBossSelfDamageRankList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntBossSelfDamageRankList* TBigHuntBossSelfDamageRankList::default_instance_ = NULL;

TBigHuntBossSelfDamageRankList* TBigHuntBossSelfDamageRankList::New() const {
  return new TBigHuntBossSelfDamageRankList;
}

void TBigHuntBossSelfDamageRankList::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    damage_ = GOOGLE_ULONGLONG(0);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
    rank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntBossSelfDamageRankList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntBossSelfDamageRankList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Damage = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo UserInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 3;
      case 3: {
        if (tag == 24) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntBossSelfDamageRankList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntBossSelfDamageRankList)
  return false;
#undef DO_
}

void TBigHuntBossSelfDamageRankList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntBossSelfDamageRankList)
  // optional uint64 Damage = 1;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->damage(), output);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 2;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userinfo(), output);
  }

  // optional uint32 Rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntBossSelfDamageRankList)
}

::google::protobuf::uint8* TBigHuntBossSelfDamageRankList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntBossSelfDamageRankList)
  // optional uint64 Damage = 1;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->damage(), target);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 2;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userinfo(), target);
  }

  // optional uint32 Rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntBossSelfDamageRankList)
  return target;
}

int TBigHuntBossSelfDamageRankList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Damage = 1;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->damage());
    }

    // optional .pb.TUserSimpleInfo UserInfo = 2;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 Rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntBossSelfDamageRankList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntBossSelfDamageRankList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntBossSelfDamageRankList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntBossSelfDamageRankList::MergeFrom(const TBigHuntBossSelfDamageRankList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntBossSelfDamageRankList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntBossSelfDamageRankList::CopyFrom(const TBigHuntBossSelfDamageRankList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntBossSelfDamageRankList::IsInitialized() const {

  return true;
}

void TBigHuntBossSelfDamageRankList::Swap(TBigHuntBossSelfDamageRankList* other) {
  if (other != this) {
    std::swap(damage_, other->damage_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntBossSelfDamageRankList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntBossSelfDamageRankList_descriptor_;
  metadata.reflection = TBigHuntBossSelfDamageRankList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntGetBossSelfDamageRankListReq::kBossIdFieldNumber;
const int TBigHuntGetBossSelfDamageRankListReq::kOffsetFieldNumber;
const int TBigHuntGetBossSelfDamageRankListReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TBigHuntGetBossSelfDamageRankListReq::TBigHuntGetBossSelfDamageRankListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntGetBossSelfDamageRankListReq)
}

void TBigHuntGetBossSelfDamageRankListReq::InitAsDefaultInstance() {
}

TBigHuntGetBossSelfDamageRankListReq::TBigHuntGetBossSelfDamageRankListReq(const TBigHuntGetBossSelfDamageRankListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntGetBossSelfDamageRankListReq)
}

void TBigHuntGetBossSelfDamageRankListReq::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntGetBossSelfDamageRankListReq::~TBigHuntGetBossSelfDamageRankListReq() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntGetBossSelfDamageRankListReq)
  SharedDtor();
}

void TBigHuntGetBossSelfDamageRankListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBigHuntGetBossSelfDamageRankListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntGetBossSelfDamageRankListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntGetBossSelfDamageRankListReq_descriptor_;
}

const TBigHuntGetBossSelfDamageRankListReq& TBigHuntGetBossSelfDamageRankListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntGetBossSelfDamageRankListReq* TBigHuntGetBossSelfDamageRankListReq::default_instance_ = NULL;

TBigHuntGetBossSelfDamageRankListReq* TBigHuntGetBossSelfDamageRankListReq::New() const {
  return new TBigHuntGetBossSelfDamageRankListReq;
}

void TBigHuntGetBossSelfDamageRankListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBigHuntGetBossSelfDamageRankListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bossid_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntGetBossSelfDamageRankListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntGetBossSelfDamageRankListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Offset;
        break;
      }

      // optional uint32 Offset = 2;
      case 2: {
        if (tag == 16) {
         parse_Offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 3;
      case 3: {
        if (tag == 24) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntGetBossSelfDamageRankListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntGetBossSelfDamageRankListReq)
  return false;
#undef DO_
}

void TBigHuntGetBossSelfDamageRankListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntGetBossSelfDamageRankListReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  // optional uint32 Offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offset(), output);
  }

  // optional uint32 Limit = 3;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntGetBossSelfDamageRankListReq)
}

::google::protobuf::uint8* TBigHuntGetBossSelfDamageRankListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntGetBossSelfDamageRankListReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  // optional uint32 Offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->offset(), target);
  }

  // optional uint32 Limit = 3;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntGetBossSelfDamageRankListReq)
  return target;
}

int TBigHuntGetBossSelfDamageRankListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional uint32 Offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 3;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntGetBossSelfDamageRankListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntGetBossSelfDamageRankListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntGetBossSelfDamageRankListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntGetBossSelfDamageRankListReq::MergeFrom(const TBigHuntGetBossSelfDamageRankListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntGetBossSelfDamageRankListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntGetBossSelfDamageRankListReq::CopyFrom(const TBigHuntGetBossSelfDamageRankListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntGetBossSelfDamageRankListReq::IsInitialized() const {

  return true;
}

void TBigHuntGetBossSelfDamageRankListReq::Swap(TBigHuntGetBossSelfDamageRankListReq* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntGetBossSelfDamageRankListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntGetBossSelfDamageRankListReq_descriptor_;
  metadata.reflection = TBigHuntGetBossSelfDamageRankListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntGetBossSelfDamageRankListRsp::kMyRankFieldNumber;
const int TBigHuntGetBossSelfDamageRankListRsp::kUserListArrFieldNumber;
const int TBigHuntGetBossSelfDamageRankListRsp::kBossIdFieldNumber;
#endif  // !_MSC_VER

TBigHuntGetBossSelfDamageRankListRsp::TBigHuntGetBossSelfDamageRankListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntGetBossSelfDamageRankListRsp)
}

void TBigHuntGetBossSelfDamageRankListRsp::InitAsDefaultInstance() {
  myrank_ = const_cast< ::pb::TBigHuntBossSelfDamageRankList*>(&::pb::TBigHuntBossSelfDamageRankList::default_instance());
}

TBigHuntGetBossSelfDamageRankListRsp::TBigHuntGetBossSelfDamageRankListRsp(const TBigHuntGetBossSelfDamageRankListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntGetBossSelfDamageRankListRsp)
}

void TBigHuntGetBossSelfDamageRankListRsp::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = NULL;
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntGetBossSelfDamageRankListRsp::~TBigHuntGetBossSelfDamageRankListRsp() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntGetBossSelfDamageRankListRsp)
  SharedDtor();
}

void TBigHuntGetBossSelfDamageRankListRsp::SharedDtor() {
  if (this != default_instance_) {
    delete myrank_;
  }
}

void TBigHuntGetBossSelfDamageRankListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntGetBossSelfDamageRankListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntGetBossSelfDamageRankListRsp_descriptor_;
}

const TBigHuntGetBossSelfDamageRankListRsp& TBigHuntGetBossSelfDamageRankListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntGetBossSelfDamageRankListRsp* TBigHuntGetBossSelfDamageRankListRsp::default_instance_ = NULL;

TBigHuntGetBossSelfDamageRankListRsp* TBigHuntGetBossSelfDamageRankListRsp::New() const {
  return new TBigHuntGetBossSelfDamageRankListRsp;
}

void TBigHuntGetBossSelfDamageRankListRsp::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    if (has_myrank()) {
      if (myrank_ != NULL) myrank_->::pb::TBigHuntBossSelfDamageRankList::Clear();
    }
    bossid_ = 0u;
  }
  userlistarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntGetBossSelfDamageRankListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntGetBossSelfDamageRankListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBigHuntBossSelfDamageRankList MyRank = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myrank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UserListArr;
        break;
      }

      // repeated .pb.TBigHuntBossSelfDamageRankList UserListArr = 2;
      case 2: {
        if (tag == 18) {
         parse_UserListArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userlistarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UserListArr;
        if (input->ExpectTag(24)) goto parse_BossId;
        break;
      }

      // optional uint32 BossId = 3;
      case 3: {
        if (tag == 24) {
         parse_BossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntGetBossSelfDamageRankListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntGetBossSelfDamageRankListRsp)
  return false;
#undef DO_
}

void TBigHuntGetBossSelfDamageRankListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntGetBossSelfDamageRankListRsp)
  // optional .pb.TBigHuntBossSelfDamageRankList MyRank = 1;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->myrank(), output);
  }

  // repeated .pb.TBigHuntBossSelfDamageRankList UserListArr = 2;
  for (int i = 0; i < this->userlistarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userlistarr(i), output);
  }

  // optional uint32 BossId = 3;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntGetBossSelfDamageRankListRsp)
}

::google::protobuf::uint8* TBigHuntGetBossSelfDamageRankListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntGetBossSelfDamageRankListRsp)
  // optional .pb.TBigHuntBossSelfDamageRankList MyRank = 1;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->myrank(), target);
  }

  // repeated .pb.TBigHuntBossSelfDamageRankList UserListArr = 2;
  for (int i = 0; i < this->userlistarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userlistarr(i), target);
  }

  // optional uint32 BossId = 3;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntGetBossSelfDamageRankListRsp)
  return target;
}

int TBigHuntGetBossSelfDamageRankListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBigHuntBossSelfDamageRankList MyRank = 1;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myrank());
    }

    // optional uint32 BossId = 3;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

  }
  // repeated .pb.TBigHuntBossSelfDamageRankList UserListArr = 2;
  total_size += 1 * this->userlistarr_size();
  for (int i = 0; i < this->userlistarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userlistarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntGetBossSelfDamageRankListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntGetBossSelfDamageRankListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntGetBossSelfDamageRankListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntGetBossSelfDamageRankListRsp::MergeFrom(const TBigHuntGetBossSelfDamageRankListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  userlistarr_.MergeFrom(from.userlistarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myrank()) {
      mutable_myrank()->::pb::TBigHuntBossSelfDamageRankList::MergeFrom(from.myrank());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntGetBossSelfDamageRankListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntGetBossSelfDamageRankListRsp::CopyFrom(const TBigHuntGetBossSelfDamageRankListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntGetBossSelfDamageRankListRsp::IsInitialized() const {

  return true;
}

void TBigHuntGetBossSelfDamageRankListRsp::Swap(TBigHuntGetBossSelfDamageRankListRsp* other) {
  if (other != this) {
    std::swap(myrank_, other->myrank_);
    userlistarr_.Swap(&other->userlistarr_);
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntGetBossSelfDamageRankListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntGetBossSelfDamageRankListRsp_descriptor_;
  metadata.reflection = TBigHuntGetBossSelfDamageRankListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntGetSelfCoinRankList::kCoinNumFieldNumber;
const int TBigHuntGetSelfCoinRankList::kUserInfoFieldNumber;
const int TBigHuntGetSelfCoinRankList::kRankFieldNumber;
#endif  // !_MSC_VER

TBigHuntGetSelfCoinRankList::TBigHuntGetSelfCoinRankList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntGetSelfCoinRankList)
}

void TBigHuntGetSelfCoinRankList::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TBigHuntGetSelfCoinRankList::TBigHuntGetSelfCoinRankList(const TBigHuntGetSelfCoinRankList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntGetSelfCoinRankList)
}

void TBigHuntGetSelfCoinRankList::SharedCtor() {
  _cached_size_ = 0;
  coinnum_ = GOOGLE_ULONGLONG(0);
  userinfo_ = NULL;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntGetSelfCoinRankList::~TBigHuntGetSelfCoinRankList() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntGetSelfCoinRankList)
  SharedDtor();
}

void TBigHuntGetSelfCoinRankList::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TBigHuntGetSelfCoinRankList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntGetSelfCoinRankList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntGetSelfCoinRankList_descriptor_;
}

const TBigHuntGetSelfCoinRankList& TBigHuntGetSelfCoinRankList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntGetSelfCoinRankList* TBigHuntGetSelfCoinRankList::default_instance_ = NULL;

TBigHuntGetSelfCoinRankList* TBigHuntGetSelfCoinRankList::New() const {
  return new TBigHuntGetSelfCoinRankList;
}

void TBigHuntGetSelfCoinRankList::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    coinnum_ = GOOGLE_ULONGLONG(0);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
    rank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntGetSelfCoinRankList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntGetSelfCoinRankList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 CoinNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &coinnum_)));
          set_has_coinnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo UserInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 3;
      case 3: {
        if (tag == 24) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntGetSelfCoinRankList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntGetSelfCoinRankList)
  return false;
#undef DO_
}

void TBigHuntGetSelfCoinRankList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntGetSelfCoinRankList)
  // optional uint64 CoinNum = 1;
  if (has_coinnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->coinnum(), output);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 2;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userinfo(), output);
  }

  // optional uint32 Rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntGetSelfCoinRankList)
}

::google::protobuf::uint8* TBigHuntGetSelfCoinRankList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntGetSelfCoinRankList)
  // optional uint64 CoinNum = 1;
  if (has_coinnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->coinnum(), target);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 2;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userinfo(), target);
  }

  // optional uint32 Rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntGetSelfCoinRankList)
  return target;
}

int TBigHuntGetSelfCoinRankList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 CoinNum = 1;
    if (has_coinnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->coinnum());
    }

    // optional .pb.TUserSimpleInfo UserInfo = 2;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 Rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntGetSelfCoinRankList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntGetSelfCoinRankList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntGetSelfCoinRankList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntGetSelfCoinRankList::MergeFrom(const TBigHuntGetSelfCoinRankList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coinnum()) {
      set_coinnum(from.coinnum());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntGetSelfCoinRankList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntGetSelfCoinRankList::CopyFrom(const TBigHuntGetSelfCoinRankList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntGetSelfCoinRankList::IsInitialized() const {

  return true;
}

void TBigHuntGetSelfCoinRankList::Swap(TBigHuntGetSelfCoinRankList* other) {
  if (other != this) {
    std::swap(coinnum_, other->coinnum_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntGetSelfCoinRankList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntGetSelfCoinRankList_descriptor_;
  metadata.reflection = TBigHuntGetSelfCoinRankList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntGetSelfCoinRankListReq::kOffsetFieldNumber;
const int TBigHuntGetSelfCoinRankListReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TBigHuntGetSelfCoinRankListReq::TBigHuntGetSelfCoinRankListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntGetSelfCoinRankListReq)
}

void TBigHuntGetSelfCoinRankListReq::InitAsDefaultInstance() {
}

TBigHuntGetSelfCoinRankListReq::TBigHuntGetSelfCoinRankListReq(const TBigHuntGetSelfCoinRankListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntGetSelfCoinRankListReq)
}

void TBigHuntGetSelfCoinRankListReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntGetSelfCoinRankListReq::~TBigHuntGetSelfCoinRankListReq() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntGetSelfCoinRankListReq)
  SharedDtor();
}

void TBigHuntGetSelfCoinRankListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBigHuntGetSelfCoinRankListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntGetSelfCoinRankListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntGetSelfCoinRankListReq_descriptor_;
}

const TBigHuntGetSelfCoinRankListReq& TBigHuntGetSelfCoinRankListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntGetSelfCoinRankListReq* TBigHuntGetSelfCoinRankListReq::default_instance_ = NULL;

TBigHuntGetSelfCoinRankListReq* TBigHuntGetSelfCoinRankListReq::New() const {
  return new TBigHuntGetSelfCoinRankListReq;
}

void TBigHuntGetSelfCoinRankListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBigHuntGetSelfCoinRankListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntGetSelfCoinRankListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntGetSelfCoinRankListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntGetSelfCoinRankListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntGetSelfCoinRankListReq)
  return false;
#undef DO_
}

void TBigHuntGetSelfCoinRankListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntGetSelfCoinRankListReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntGetSelfCoinRankListReq)
}

::google::protobuf::uint8* TBigHuntGetSelfCoinRankListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntGetSelfCoinRankListReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntGetSelfCoinRankListReq)
  return target;
}

int TBigHuntGetSelfCoinRankListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntGetSelfCoinRankListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntGetSelfCoinRankListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntGetSelfCoinRankListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntGetSelfCoinRankListReq::MergeFrom(const TBigHuntGetSelfCoinRankListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntGetSelfCoinRankListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntGetSelfCoinRankListReq::CopyFrom(const TBigHuntGetSelfCoinRankListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntGetSelfCoinRankListReq::IsInitialized() const {

  return true;
}

void TBigHuntGetSelfCoinRankListReq::Swap(TBigHuntGetSelfCoinRankListReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntGetSelfCoinRankListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntGetSelfCoinRankListReq_descriptor_;
  metadata.reflection = TBigHuntGetSelfCoinRankListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntGetSelfCoinRankListRsp::kMyRankFieldNumber;
const int TBigHuntGetSelfCoinRankListRsp::kAllUserRankInfoFieldNumber;
#endif  // !_MSC_VER

TBigHuntGetSelfCoinRankListRsp::TBigHuntGetSelfCoinRankListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntGetSelfCoinRankListRsp)
}

void TBigHuntGetSelfCoinRankListRsp::InitAsDefaultInstance() {
  myrank_ = const_cast< ::pb::TBigHuntGetSelfCoinRankList*>(&::pb::TBigHuntGetSelfCoinRankList::default_instance());
}

TBigHuntGetSelfCoinRankListRsp::TBigHuntGetSelfCoinRankListRsp(const TBigHuntGetSelfCoinRankListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntGetSelfCoinRankListRsp)
}

void TBigHuntGetSelfCoinRankListRsp::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntGetSelfCoinRankListRsp::~TBigHuntGetSelfCoinRankListRsp() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntGetSelfCoinRankListRsp)
  SharedDtor();
}

void TBigHuntGetSelfCoinRankListRsp::SharedDtor() {
  if (this != default_instance_) {
    delete myrank_;
  }
}

void TBigHuntGetSelfCoinRankListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntGetSelfCoinRankListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntGetSelfCoinRankListRsp_descriptor_;
}

const TBigHuntGetSelfCoinRankListRsp& TBigHuntGetSelfCoinRankListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntGetSelfCoinRankListRsp* TBigHuntGetSelfCoinRankListRsp::default_instance_ = NULL;

TBigHuntGetSelfCoinRankListRsp* TBigHuntGetSelfCoinRankListRsp::New() const {
  return new TBigHuntGetSelfCoinRankListRsp;
}

void TBigHuntGetSelfCoinRankListRsp::Clear() {
  if (has_myrank()) {
    if (myrank_ != NULL) myrank_->::pb::TBigHuntGetSelfCoinRankList::Clear();
  }
  alluserrankinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntGetSelfCoinRankListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntGetSelfCoinRankListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBigHuntGetSelfCoinRankList MyRank = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myrank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AllUserRankInfo;
        break;
      }

      // repeated .pb.TBigHuntGetSelfCoinRankList AllUserRankInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_AllUserRankInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alluserrankinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AllUserRankInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntGetSelfCoinRankListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntGetSelfCoinRankListRsp)
  return false;
#undef DO_
}

void TBigHuntGetSelfCoinRankListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntGetSelfCoinRankListRsp)
  // optional .pb.TBigHuntGetSelfCoinRankList MyRank = 1;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->myrank(), output);
  }

  // repeated .pb.TBigHuntGetSelfCoinRankList AllUserRankInfo = 2;
  for (int i = 0; i < this->alluserrankinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->alluserrankinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntGetSelfCoinRankListRsp)
}

::google::protobuf::uint8* TBigHuntGetSelfCoinRankListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntGetSelfCoinRankListRsp)
  // optional .pb.TBigHuntGetSelfCoinRankList MyRank = 1;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->myrank(), target);
  }

  // repeated .pb.TBigHuntGetSelfCoinRankList AllUserRankInfo = 2;
  for (int i = 0; i < this->alluserrankinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->alluserrankinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntGetSelfCoinRankListRsp)
  return target;
}

int TBigHuntGetSelfCoinRankListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBigHuntGetSelfCoinRankList MyRank = 1;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myrank());
    }

  }
  // repeated .pb.TBigHuntGetSelfCoinRankList AllUserRankInfo = 2;
  total_size += 1 * this->alluserrankinfo_size();
  for (int i = 0; i < this->alluserrankinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alluserrankinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntGetSelfCoinRankListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntGetSelfCoinRankListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntGetSelfCoinRankListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntGetSelfCoinRankListRsp::MergeFrom(const TBigHuntGetSelfCoinRankListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  alluserrankinfo_.MergeFrom(from.alluserrankinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myrank()) {
      mutable_myrank()->::pb::TBigHuntGetSelfCoinRankList::MergeFrom(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntGetSelfCoinRankListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntGetSelfCoinRankListRsp::CopyFrom(const TBigHuntGetSelfCoinRankListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntGetSelfCoinRankListRsp::IsInitialized() const {

  return true;
}

void TBigHuntGetSelfCoinRankListRsp::Swap(TBigHuntGetSelfCoinRankListRsp* other) {
  if (other != this) {
    std::swap(myrank_, other->myrank_);
    alluserrankinfo_.Swap(&other->alluserrankinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntGetSelfCoinRankListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntGetSelfCoinRankListRsp_descriptor_;
  metadata.reflection = TBigHuntGetSelfCoinRankListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntCancelSuppressReq::kMonsterIdFieldNumber;
#endif  // !_MSC_VER

TBigHuntCancelSuppressReq::TBigHuntCancelSuppressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntCancelSuppressReq)
}

void TBigHuntCancelSuppressReq::InitAsDefaultInstance() {
}

TBigHuntCancelSuppressReq::TBigHuntCancelSuppressReq(const TBigHuntCancelSuppressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntCancelSuppressReq)
}

void TBigHuntCancelSuppressReq::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntCancelSuppressReq::~TBigHuntCancelSuppressReq() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntCancelSuppressReq)
  SharedDtor();
}

void TBigHuntCancelSuppressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBigHuntCancelSuppressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntCancelSuppressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntCancelSuppressReq_descriptor_;
}

const TBigHuntCancelSuppressReq& TBigHuntCancelSuppressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntCancelSuppressReq* TBigHuntCancelSuppressReq::default_instance_ = NULL;

TBigHuntCancelSuppressReq* TBigHuntCancelSuppressReq::New() const {
  return new TBigHuntCancelSuppressReq;
}

void TBigHuntCancelSuppressReq::Clear() {
  monsterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntCancelSuppressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntCancelSuppressReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MonsterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntCancelSuppressReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntCancelSuppressReq)
  return false;
#undef DO_
}

void TBigHuntCancelSuppressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntCancelSuppressReq)
  // optional uint32 MonsterId = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntCancelSuppressReq)
}

::google::protobuf::uint8* TBigHuntCancelSuppressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntCancelSuppressReq)
  // optional uint32 MonsterId = 1;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monsterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntCancelSuppressReq)
  return target;
}

int TBigHuntCancelSuppressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MonsterId = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntCancelSuppressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntCancelSuppressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntCancelSuppressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntCancelSuppressReq::MergeFrom(const TBigHuntCancelSuppressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntCancelSuppressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntCancelSuppressReq::CopyFrom(const TBigHuntCancelSuppressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntCancelSuppressReq::IsInitialized() const {

  return true;
}

void TBigHuntCancelSuppressReq::Swap(TBigHuntCancelSuppressReq* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntCancelSuppressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntCancelSuppressReq_descriptor_;
  metadata.reflection = TBigHuntCancelSuppressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntMonsterBeKilledInfo::kMonsterIdFieldNumber;
const int TBigHuntMonsterBeKilledInfo::kHpFieldNumber;
const int TBigHuntMonsterBeKilledInfo::kUserInfoFieldNumber;
#endif  // !_MSC_VER

TBigHuntMonsterBeKilledInfo::TBigHuntMonsterBeKilledInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntMonsterBeKilledInfo)
}

void TBigHuntMonsterBeKilledInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TBigHuntMonsterBeKilledInfo::TBigHuntMonsterBeKilledInfo(const TBigHuntMonsterBeKilledInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntMonsterBeKilledInfo)
}

void TBigHuntMonsterBeKilledInfo::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0u;
  hp_ = GOOGLE_ULONGLONG(0);
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntMonsterBeKilledInfo::~TBigHuntMonsterBeKilledInfo() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntMonsterBeKilledInfo)
  SharedDtor();
}

void TBigHuntMonsterBeKilledInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TBigHuntMonsterBeKilledInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntMonsterBeKilledInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntMonsterBeKilledInfo_descriptor_;
}

const TBigHuntMonsterBeKilledInfo& TBigHuntMonsterBeKilledInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntMonsterBeKilledInfo* TBigHuntMonsterBeKilledInfo::default_instance_ = NULL;

TBigHuntMonsterBeKilledInfo* TBigHuntMonsterBeKilledInfo::New() const {
  return new TBigHuntMonsterBeKilledInfo;
}

void TBigHuntMonsterBeKilledInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    monsterid_ = 0u;
    hp_ = GOOGLE_ULONGLONG(0);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntMonsterBeKilledInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntMonsterBeKilledInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MonsterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Hp;
        break;
      }

      // optional uint64 Hp = 2;
      case 2: {
        if (tag == 16) {
         parse_Hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo UserInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntMonsterBeKilledInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntMonsterBeKilledInfo)
  return false;
#undef DO_
}

void TBigHuntMonsterBeKilledInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntMonsterBeKilledInfo)
  // optional uint32 MonsterId = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }

  // optional uint64 Hp = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hp(), output);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 3;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntMonsterBeKilledInfo)
}

::google::protobuf::uint8* TBigHuntMonsterBeKilledInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntMonsterBeKilledInfo)
  // optional uint32 MonsterId = 1;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monsterid(), target);
  }

  // optional uint64 Hp = 2;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hp(), target);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 3;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntMonsterBeKilledInfo)
  return target;
}

int TBigHuntMonsterBeKilledInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MonsterId = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

    // optional uint64 Hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hp());
    }

    // optional .pb.TUserSimpleInfo UserInfo = 3;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntMonsterBeKilledInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntMonsterBeKilledInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntMonsterBeKilledInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntMonsterBeKilledInfo::MergeFrom(const TBigHuntMonsterBeKilledInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntMonsterBeKilledInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntMonsterBeKilledInfo::CopyFrom(const TBigHuntMonsterBeKilledInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntMonsterBeKilledInfo::IsInitialized() const {

  return true;
}

void TBigHuntMonsterBeKilledInfo::Swap(TBigHuntMonsterBeKilledInfo* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(hp_, other->hp_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntMonsterBeKilledInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntMonsterBeKilledInfo_descriptor_;
  metadata.reflection = TBigHuntMonsterBeKilledInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntMonsterBeKilledNotify::kMonsterInfoFieldNumber;
#endif  // !_MSC_VER

TBigHuntMonsterBeKilledNotify::TBigHuntMonsterBeKilledNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntMonsterBeKilledNotify)
}

void TBigHuntMonsterBeKilledNotify::InitAsDefaultInstance() {
  monsterinfo_ = const_cast< ::pb::TBigHuntMonsterBeKilledInfo*>(&::pb::TBigHuntMonsterBeKilledInfo::default_instance());
}

TBigHuntMonsterBeKilledNotify::TBigHuntMonsterBeKilledNotify(const TBigHuntMonsterBeKilledNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntMonsterBeKilledNotify)
}

void TBigHuntMonsterBeKilledNotify::SharedCtor() {
  _cached_size_ = 0;
  monsterinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntMonsterBeKilledNotify::~TBigHuntMonsterBeKilledNotify() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntMonsterBeKilledNotify)
  SharedDtor();
}

void TBigHuntMonsterBeKilledNotify::SharedDtor() {
  if (this != default_instance_) {
    delete monsterinfo_;
  }
}

void TBigHuntMonsterBeKilledNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntMonsterBeKilledNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntMonsterBeKilledNotify_descriptor_;
}

const TBigHuntMonsterBeKilledNotify& TBigHuntMonsterBeKilledNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntMonsterBeKilledNotify* TBigHuntMonsterBeKilledNotify::default_instance_ = NULL;

TBigHuntMonsterBeKilledNotify* TBigHuntMonsterBeKilledNotify::New() const {
  return new TBigHuntMonsterBeKilledNotify;
}

void TBigHuntMonsterBeKilledNotify::Clear() {
  if (has_monsterinfo()) {
    if (monsterinfo_ != NULL) monsterinfo_->::pb::TBigHuntMonsterBeKilledInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntMonsterBeKilledNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntMonsterBeKilledNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBigHuntMonsterBeKilledInfo MonsterInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monsterinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntMonsterBeKilledNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntMonsterBeKilledNotify)
  return false;
#undef DO_
}

void TBigHuntMonsterBeKilledNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntMonsterBeKilledNotify)
  // optional .pb.TBigHuntMonsterBeKilledInfo MonsterInfo = 1;
  if (has_monsterinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monsterinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntMonsterBeKilledNotify)
}

::google::protobuf::uint8* TBigHuntMonsterBeKilledNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntMonsterBeKilledNotify)
  // optional .pb.TBigHuntMonsterBeKilledInfo MonsterInfo = 1;
  if (has_monsterinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monsterinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntMonsterBeKilledNotify)
  return target;
}

int TBigHuntMonsterBeKilledNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBigHuntMonsterBeKilledInfo MonsterInfo = 1;
    if (has_monsterinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monsterinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntMonsterBeKilledNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntMonsterBeKilledNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntMonsterBeKilledNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntMonsterBeKilledNotify::MergeFrom(const TBigHuntMonsterBeKilledNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterinfo()) {
      mutable_monsterinfo()->::pb::TBigHuntMonsterBeKilledInfo::MergeFrom(from.monsterinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntMonsterBeKilledNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntMonsterBeKilledNotify::CopyFrom(const TBigHuntMonsterBeKilledNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntMonsterBeKilledNotify::IsInitialized() const {

  return true;
}

void TBigHuntMonsterBeKilledNotify::Swap(TBigHuntMonsterBeKilledNotify* other) {
  if (other != this) {
    std::swap(monsterinfo_, other->monsterinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntMonsterBeKilledNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntMonsterBeKilledNotify_descriptor_;
  metadata.reflection = TBigHuntMonsterBeKilledNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntDynamicNotify::kRecordInfoFieldNumber;
#endif  // !_MSC_VER

TBigHuntDynamicNotify::TBigHuntDynamicNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntDynamicNotify)
}

void TBigHuntDynamicNotify::InitAsDefaultInstance() {
  recordinfo_ = const_cast< ::pb::TBigHuntMapDynamicInfo*>(&::pb::TBigHuntMapDynamicInfo::default_instance());
}

TBigHuntDynamicNotify::TBigHuntDynamicNotify(const TBigHuntDynamicNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntDynamicNotify)
}

void TBigHuntDynamicNotify::SharedCtor() {
  _cached_size_ = 0;
  recordinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntDynamicNotify::~TBigHuntDynamicNotify() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntDynamicNotify)
  SharedDtor();
}

void TBigHuntDynamicNotify::SharedDtor() {
  if (this != default_instance_) {
    delete recordinfo_;
  }
}

void TBigHuntDynamicNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntDynamicNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntDynamicNotify_descriptor_;
}

const TBigHuntDynamicNotify& TBigHuntDynamicNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntDynamicNotify* TBigHuntDynamicNotify::default_instance_ = NULL;

TBigHuntDynamicNotify* TBigHuntDynamicNotify::New() const {
  return new TBigHuntDynamicNotify;
}

void TBigHuntDynamicNotify::Clear() {
  if (has_recordinfo()) {
    if (recordinfo_ != NULL) recordinfo_->::pb::TBigHuntMapDynamicInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntDynamicNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntDynamicNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBigHuntMapDynamicInfo RecordInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recordinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntDynamicNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntDynamicNotify)
  return false;
#undef DO_
}

void TBigHuntDynamicNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntDynamicNotify)
  // optional .pb.TBigHuntMapDynamicInfo RecordInfo = 1;
  if (has_recordinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recordinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntDynamicNotify)
}

::google::protobuf::uint8* TBigHuntDynamicNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntDynamicNotify)
  // optional .pb.TBigHuntMapDynamicInfo RecordInfo = 1;
  if (has_recordinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recordinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntDynamicNotify)
  return target;
}

int TBigHuntDynamicNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBigHuntMapDynamicInfo RecordInfo = 1;
    if (has_recordinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recordinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntDynamicNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntDynamicNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntDynamicNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntDynamicNotify::MergeFrom(const TBigHuntDynamicNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recordinfo()) {
      mutable_recordinfo()->::pb::TBigHuntMapDynamicInfo::MergeFrom(from.recordinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntDynamicNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntDynamicNotify::CopyFrom(const TBigHuntDynamicNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntDynamicNotify::IsInitialized() const {

  return true;
}

void TBigHuntDynamicNotify::Swap(TBigHuntDynamicNotify* other) {
  if (other != this) {
    std::swap(recordinfo_, other->recordinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntDynamicNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntDynamicNotify_descriptor_;
  metadata.reflection = TBigHuntDynamicNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntUserDimensionNotify::kIdFieldNumber;
const int TBigHuntUserDimensionNotify::kNowLevelFieldNumber;
#endif  // !_MSC_VER

TBigHuntUserDimensionNotify::TBigHuntUserDimensionNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntUserDimensionNotify)
}

void TBigHuntUserDimensionNotify::InitAsDefaultInstance() {
}

TBigHuntUserDimensionNotify::TBigHuntUserDimensionNotify(const TBigHuntUserDimensionNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntUserDimensionNotify)
}

void TBigHuntUserDimensionNotify::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  nowlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntUserDimensionNotify::~TBigHuntUserDimensionNotify() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntUserDimensionNotify)
  SharedDtor();
}

void TBigHuntUserDimensionNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBigHuntUserDimensionNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntUserDimensionNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntUserDimensionNotify_descriptor_;
}

const TBigHuntUserDimensionNotify& TBigHuntUserDimensionNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntUserDimensionNotify* TBigHuntUserDimensionNotify::default_instance_ = NULL;

TBigHuntUserDimensionNotify* TBigHuntUserDimensionNotify::New() const {
  return new TBigHuntUserDimensionNotify;
}

void TBigHuntUserDimensionNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBigHuntUserDimensionNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, nowlevel_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntUserDimensionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntUserDimensionNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nowLevel;
        break;
      }

      // optional uint32 nowLevel = 2;
      case 2: {
        if (tag == 16) {
         parse_nowLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nowlevel_)));
          set_has_nowlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntUserDimensionNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntUserDimensionNotify)
  return false;
#undef DO_
}

void TBigHuntUserDimensionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntUserDimensionNotify)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 nowLevel = 2;
  if (has_nowlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nowlevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntUserDimensionNotify)
}

::google::protobuf::uint8* TBigHuntUserDimensionNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntUserDimensionNotify)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 nowLevel = 2;
  if (has_nowlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nowlevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntUserDimensionNotify)
  return target;
}

int TBigHuntUserDimensionNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 nowLevel = 2;
    if (has_nowlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nowlevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntUserDimensionNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntUserDimensionNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntUserDimensionNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntUserDimensionNotify::MergeFrom(const TBigHuntUserDimensionNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_nowlevel()) {
      set_nowlevel(from.nowlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntUserDimensionNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntUserDimensionNotify::CopyFrom(const TBigHuntUserDimensionNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntUserDimensionNotify::IsInitialized() const {

  return true;
}

void TBigHuntUserDimensionNotify::Swap(TBigHuntUserDimensionNotify* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(nowlevel_, other->nowlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntUserDimensionNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntUserDimensionNotify_descriptor_;
  metadata.reflection = TBigHuntUserDimensionNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntCancelSuppressNotify::kMonsterIdFieldNumber;
#endif  // !_MSC_VER

TBigHuntCancelSuppressNotify::TBigHuntCancelSuppressNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntCancelSuppressNotify)
}

void TBigHuntCancelSuppressNotify::InitAsDefaultInstance() {
}

TBigHuntCancelSuppressNotify::TBigHuntCancelSuppressNotify(const TBigHuntCancelSuppressNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntCancelSuppressNotify)
}

void TBigHuntCancelSuppressNotify::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntCancelSuppressNotify::~TBigHuntCancelSuppressNotify() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntCancelSuppressNotify)
  SharedDtor();
}

void TBigHuntCancelSuppressNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBigHuntCancelSuppressNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntCancelSuppressNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntCancelSuppressNotify_descriptor_;
}

const TBigHuntCancelSuppressNotify& TBigHuntCancelSuppressNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntCancelSuppressNotify* TBigHuntCancelSuppressNotify::default_instance_ = NULL;

TBigHuntCancelSuppressNotify* TBigHuntCancelSuppressNotify::New() const {
  return new TBigHuntCancelSuppressNotify;
}

void TBigHuntCancelSuppressNotify::Clear() {
  monsterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntCancelSuppressNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntCancelSuppressNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MonsterId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntCancelSuppressNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntCancelSuppressNotify)
  return false;
#undef DO_
}

void TBigHuntCancelSuppressNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntCancelSuppressNotify)
  // optional uint32 MonsterId = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntCancelSuppressNotify)
}

::google::protobuf::uint8* TBigHuntCancelSuppressNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntCancelSuppressNotify)
  // optional uint32 MonsterId = 1;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monsterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntCancelSuppressNotify)
  return target;
}

int TBigHuntCancelSuppressNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MonsterId = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntCancelSuppressNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntCancelSuppressNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntCancelSuppressNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntCancelSuppressNotify::MergeFrom(const TBigHuntCancelSuppressNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntCancelSuppressNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntCancelSuppressNotify::CopyFrom(const TBigHuntCancelSuppressNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntCancelSuppressNotify::IsInitialized() const {

  return true;
}

void TBigHuntCancelSuppressNotify::Swap(TBigHuntCancelSuppressNotify* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntCancelSuppressNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntCancelSuppressNotify_descriptor_;
  metadata.reflection = TBigHuntCancelSuppressNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBigHuntUserDataChangeNotify::kLeftChallengeNumFieldNumber;
const int TBigHuntUserDataChangeNotify::kSelfCoinFieldNumber;
const int TBigHuntUserDataChangeNotify::kAllianceCoinFieldNumber;
const int TBigHuntUserDataChangeNotify::kEliteMonsterFieldNumber;
#endif  // !_MSC_VER

TBigHuntUserDataChangeNotify::TBigHuntUserDataChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBigHuntUserDataChangeNotify)
}

void TBigHuntUserDataChangeNotify::InitAsDefaultInstance() {
}

TBigHuntUserDataChangeNotify::TBigHuntUserDataChangeNotify(const TBigHuntUserDataChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBigHuntUserDataChangeNotify)
}

void TBigHuntUserDataChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  leftchallengenum_ = 0u;
  selfcoin_ = GOOGLE_ULONGLONG(0);
  alliancecoin_ = GOOGLE_ULONGLONG(0);
  elitemonster_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBigHuntUserDataChangeNotify::~TBigHuntUserDataChangeNotify() {
  // @@protoc_insertion_point(destructor:pb.TBigHuntUserDataChangeNotify)
  SharedDtor();
}

void TBigHuntUserDataChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBigHuntUserDataChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBigHuntUserDataChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBigHuntUserDataChangeNotify_descriptor_;
}

const TBigHuntUserDataChangeNotify& TBigHuntUserDataChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBigHunt_2eproto();
  return *default_instance_;
}

TBigHuntUserDataChangeNotify* TBigHuntUserDataChangeNotify::default_instance_ = NULL;

TBigHuntUserDataChangeNotify* TBigHuntUserDataChangeNotify::New() const {
  return new TBigHuntUserDataChangeNotify;
}

void TBigHuntUserDataChangeNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBigHuntUserDataChangeNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(selfcoin_, alliancecoin_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBigHuntUserDataChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBigHuntUserDataChangeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LeftChallengeNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftchallengenum_)));
          set_has_leftchallengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SelfCoin;
        break;
      }

      // optional uint64 SelfCoin = 2;
      case 2: {
        if (tag == 16) {
         parse_SelfCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &selfcoin_)));
          set_has_selfcoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AllianceCoin;
        break;
      }

      // optional uint64 AllianceCoin = 3;
      case 3: {
        if (tag == 24) {
         parse_AllianceCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &alliancecoin_)));
          set_has_alliancecoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_EliteMonster;
        break;
      }

      // optional uint32 EliteMonster = 4;
      case 4: {
        if (tag == 32) {
         parse_EliteMonster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elitemonster_)));
          set_has_elitemonster();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBigHuntUserDataChangeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBigHuntUserDataChangeNotify)
  return false;
#undef DO_
}

void TBigHuntUserDataChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBigHuntUserDataChangeNotify)
  // optional uint32 LeftChallengeNum = 1;
  if (has_leftchallengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->leftchallengenum(), output);
  }

  // optional uint64 SelfCoin = 2;
  if (has_selfcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->selfcoin(), output);
  }

  // optional uint64 AllianceCoin = 3;
  if (has_alliancecoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->alliancecoin(), output);
  }

  // optional uint32 EliteMonster = 4;
  if (has_elitemonster()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->elitemonster(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBigHuntUserDataChangeNotify)
}

::google::protobuf::uint8* TBigHuntUserDataChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBigHuntUserDataChangeNotify)
  // optional uint32 LeftChallengeNum = 1;
  if (has_leftchallengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->leftchallengenum(), target);
  }

  // optional uint64 SelfCoin = 2;
  if (has_selfcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->selfcoin(), target);
  }

  // optional uint64 AllianceCoin = 3;
  if (has_alliancecoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->alliancecoin(), target);
  }

  // optional uint32 EliteMonster = 4;
  if (has_elitemonster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->elitemonster(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBigHuntUserDataChangeNotify)
  return target;
}

int TBigHuntUserDataChangeNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LeftChallengeNum = 1;
    if (has_leftchallengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leftchallengenum());
    }

    // optional uint64 SelfCoin = 2;
    if (has_selfcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->selfcoin());
    }

    // optional uint64 AllianceCoin = 3;
    if (has_alliancecoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->alliancecoin());
    }

    // optional uint32 EliteMonster = 4;
    if (has_elitemonster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elitemonster());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBigHuntUserDataChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBigHuntUserDataChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBigHuntUserDataChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBigHuntUserDataChangeNotify::MergeFrom(const TBigHuntUserDataChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leftchallengenum()) {
      set_leftchallengenum(from.leftchallengenum());
    }
    if (from.has_selfcoin()) {
      set_selfcoin(from.selfcoin());
    }
    if (from.has_alliancecoin()) {
      set_alliancecoin(from.alliancecoin());
    }
    if (from.has_elitemonster()) {
      set_elitemonster(from.elitemonster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBigHuntUserDataChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBigHuntUserDataChangeNotify::CopyFrom(const TBigHuntUserDataChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBigHuntUserDataChangeNotify::IsInitialized() const {

  return true;
}

void TBigHuntUserDataChangeNotify::Swap(TBigHuntUserDataChangeNotify* other) {
  if (other != this) {
    std::swap(leftchallengenum_, other->leftchallengenum_);
    std::swap(selfcoin_, other->selfcoin_);
    std::swap(alliancecoin_, other->alliancecoin_);
    std::swap(elitemonster_, other->elitemonster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBigHuntUserDataChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBigHuntUserDataChangeNotify_descriptor_;
  metadata.reflection = TBigHuntUserDataChangeNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
