// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/SceneGamePlayGridData.proto

#ifndef PROTOBUF_module_2fSceneGamePlayGridData_2eproto__INCLUDED
#define PROTOBUF_module_2fSceneGamePlayGridData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "module/Util.pb.h"
#include "module/SceneGridData.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_module_2fSceneGamePlayGridData_2eproto();
void protobuf_AssignDesc_module_2fSceneGamePlayGridData_2eproto();
void protobuf_ShutdownFile_module_2fSceneGamePlayGridData_2eproto();

class SceneGamePlayGridData;

// ===================================================================

/*FOR2LUA
<Record>
	<name>SceneGamePlayGridData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/SceneGamePlayGridData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class SceneGamePlayGridData : public ::google::protobuf::Message {
 public:
  SceneGamePlayGridData();
  virtual ~SceneGamePlayGridData();

  SceneGamePlayGridData(const SceneGamePlayGridData& from);

  inline SceneGamePlayGridData& operator=(const SceneGamePlayGridData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneGamePlayGridData& default_instance();

  void Swap(SceneGamePlayGridData* other);

  // implements Message ----------------------------------------------

  SceneGamePlayGridData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneGamePlayGridData& from);
  void MergeFrom(const SceneGamePlayGridData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>SceneGamePlayGridData</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string SceneConfName = 2;
  inline bool has_sceneconfname() const;
  inline void clear_sceneconfname();
  static const int kSceneConfNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>SceneGamePlayGridData</name>
  	<Function>
  		<name>sceneconfname</name>
  		<replaceName>SceneConfName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sceneconfname</name>
  		<replaceName>SceneConfName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sceneconfname</name>
  		<replaceName>SceneConfName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& sceneconfname() const;
  inline void set_sceneconfname(const ::std::string& value);
  inline void set_sceneconfname(const char* value);
  inline void set_sceneconfname(const char* value, size_t size);
  inline ::std::string* mutable_sceneconfname();
  inline ::std::string* release_sceneconfname();
  inline void set_allocated_sceneconfname(::std::string* sceneconfname);

  // optional .pb.PbVector2_Int GridSize = 3;
  inline bool has_gridsize() const;
  inline void clear_gridsize();
  static const int kGridSizeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>SceneGamePlayGridData</name>
  	<Function>
  		<name>gridsize</name>
  		<replaceName>GridSize</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_gridsize</name>
  		<replaceName>GridSize</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_gridsize</name>
  		<replaceName>GridSize</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gridsize</name>
  		<replaceName>GridSize</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2_Int& gridsize() const;
  inline ::pb::PbVector2_Int* mutable_gridsize();
  inline ::pb::PbVector2_Int* release_gridsize();
  inline void set_allocated_gridsize(::pb::PbVector2_Int* gridsize);

  // optional .pb.PbVector2_Int NodeSize = 4;
  inline bool has_nodesize() const;
  inline void clear_nodesize();
  static const int kNodeSizeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>SceneGamePlayGridData</name>
  	<Function>
  		<name>nodesize</name>
  		<replaceName>NodeSize</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_nodesize</name>
  		<replaceName>NodeSize</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_nodesize</name>
  		<replaceName>NodeSize</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_nodesize</name>
  		<replaceName>NodeSize</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2_Int& nodesize() const;
  inline ::pb::PbVector2_Int* mutable_nodesize();
  inline ::pb::PbVector2_Int* release_nodesize();
  inline void set_allocated_nodesize(::pb::PbVector2_Int* nodesize);

  // optional .pb.PbVector2_Int Origin = 5;
  inline bool has_origin() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>SceneGamePlayGridData</name>
  	<Function>
  		<name>origin</name>
  		<replaceName>Origin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_origin</name>
  		<replaceName>Origin</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_origin</name>
  		<replaceName>Origin</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_origin</name>
  		<replaceName>Origin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2_Int& origin() const;
  inline ::pb::PbVector2_Int* mutable_origin();
  inline ::pb::PbVector2_Int* release_origin();
  inline void set_allocated_origin(::pb::PbVector2_Int* origin);

  // repeated .pb.GridAreaInfo AreaInfoArr = 6;
  inline int areainfoarr_size() const;
  inline void clear_areainfoarr();
  static const int kAreaInfoArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>SceneGamePlayGridData</name>
  	<Function>
  		<name>areainfoarr</name>
  		<replaceName>AreaInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_areainfoarr</name>
  		<replaceName>AreaInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_areainfoarr</name>
  		<replaceName>AreaInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_areainfoarr</name>
  		<replaceName>AreaInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>areainfoarr_size</name>
  		<replaceName>AreaInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::GridAreaInfo& areainfoarr(int index) const;
  inline ::pb::GridAreaInfo* mutable_areainfoarr(int index);
  inline ::pb::GridAreaInfo* add_areainfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GridAreaInfo >&
      areainfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GridAreaInfo >*
      mutable_areainfoarr();

  // repeated .pb.GridObstacleInfo ObstacleInfoArr = 7;
  inline int obstacleinfoarr_size() const;
  inline void clear_obstacleinfoarr();
  static const int kObstacleInfoArrFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>SceneGamePlayGridData</name>
  	<Function>
  		<name>obstacleinfoarr</name>
  		<replaceName>ObstacleInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_obstacleinfoarr</name>
  		<replaceName>ObstacleInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_obstacleinfoarr</name>
  		<replaceName>ObstacleInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_obstacleinfoarr</name>
  		<replaceName>ObstacleInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>obstacleinfoarr_size</name>
  		<replaceName>ObstacleInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::GridObstacleInfo& obstacleinfoarr(int index) const;
  inline ::pb::GridObstacleInfo* mutable_obstacleinfoarr(int index);
  inline ::pb::GridObstacleInfo* add_obstacleinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GridObstacleInfo >&
      obstacleinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GridObstacleInfo >*
      mutable_obstacleinfoarr();

  // repeated .pb.GridNodeInfo GridNodeArr = 8;
  inline int gridnodearr_size() const;
  inline void clear_gridnodearr();
  static const int kGridNodeArrFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>SceneGamePlayGridData</name>
  	<Function>
  		<name>gridnodearr</name>
  		<replaceName>GridNodeArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_gridnodearr</name>
  		<replaceName>GridNodeArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_gridnodearr</name>
  		<replaceName>GridNodeArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gridnodearr</name>
  		<replaceName>GridNodeArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>gridnodearr_size</name>
  		<replaceName>GridNodeArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::GridNodeInfo& gridnodearr(int index) const;
  inline ::pb::GridNodeInfo* mutable_gridnodearr(int index);
  inline ::pb::GridNodeInfo* add_gridnodearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GridNodeInfo >&
      gridnodearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GridNodeInfo >*
      mutable_gridnodearr();

  // repeated .pb.GridMistyInfo MistyInfoArr = 9;
  inline int mistyinfoarr_size() const;
  inline void clear_mistyinfoarr();
  static const int kMistyInfoArrFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>SceneGamePlayGridData</name>
  	<Function>
  		<name>mistyinfoarr</name>
  		<replaceName>MistyInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_mistyinfoarr</name>
  		<replaceName>MistyInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_mistyinfoarr</name>
  		<replaceName>MistyInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mistyinfoarr</name>
  		<replaceName>MistyInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mistyinfoarr_size</name>
  		<replaceName>MistyInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::GridMistyInfo& mistyinfoarr(int index) const;
  inline ::pb::GridMistyInfo* mutable_mistyinfoarr(int index);
  inline ::pb::GridMistyInfo* add_mistyinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GridMistyInfo >&
      mistyinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GridMistyInfo >*
      mutable_mistyinfoarr();

  // @@protoc_insertion_point(class_scope:pb.SceneGamePlayGridData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_sceneconfname();
  inline void clear_has_sceneconfname();
  inline void set_has_gridsize();
  inline void clear_has_gridsize();
  inline void set_has_nodesize();
  inline void clear_has_nodesize();
  inline void set_has_origin();
  inline void clear_has_origin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sceneconfname_;
  ::pb::PbVector2_Int* gridsize_;
  ::pb::PbVector2_Int* nodesize_;
  ::pb::PbVector2_Int* origin_;
  ::google::protobuf::RepeatedPtrField< ::pb::GridAreaInfo > areainfoarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::GridObstacleInfo > obstacleinfoarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::GridNodeInfo > gridnodearr_;
  ::google::protobuf::RepeatedPtrField< ::pb::GridMistyInfo > mistyinfoarr_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_module_2fSceneGamePlayGridData_2eproto();
  friend void protobuf_AssignDesc_module_2fSceneGamePlayGridData_2eproto();
  friend void protobuf_ShutdownFile_module_2fSceneGamePlayGridData_2eproto();

  void InitAsDefaultInstance();
  static SceneGamePlayGridData* default_instance_;
};
// ===================================================================


// ===================================================================

// SceneGamePlayGridData

// optional int32 Id = 1;
inline bool SceneGamePlayGridData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneGamePlayGridData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneGamePlayGridData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneGamePlayGridData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SceneGamePlayGridData::id() const {
  // @@protoc_insertion_point(field_get:pb.SceneGamePlayGridData.Id)
  return id_;
}
inline void SceneGamePlayGridData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.SceneGamePlayGridData.Id)
}

// optional string SceneConfName = 2;
inline bool SceneGamePlayGridData::has_sceneconfname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneGamePlayGridData::set_has_sceneconfname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SceneGamePlayGridData::clear_has_sceneconfname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SceneGamePlayGridData::clear_sceneconfname() {
  if (sceneconfname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneconfname_->clear();
  }
  clear_has_sceneconfname();
}
inline const ::std::string& SceneGamePlayGridData::sceneconfname() const {
  // @@protoc_insertion_point(field_get:pb.SceneGamePlayGridData.SceneConfName)
  return *sceneconfname_;
}
inline void SceneGamePlayGridData::set_sceneconfname(const ::std::string& value) {
  set_has_sceneconfname();
  if (sceneconfname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneconfname_ = new ::std::string;
  }
  sceneconfname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.SceneGamePlayGridData.SceneConfName)
}
inline void SceneGamePlayGridData::set_sceneconfname(const char* value) {
  set_has_sceneconfname();
  if (sceneconfname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneconfname_ = new ::std::string;
  }
  sceneconfname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.SceneGamePlayGridData.SceneConfName)
}
inline void SceneGamePlayGridData::set_sceneconfname(const char* value, size_t size) {
  set_has_sceneconfname();
  if (sceneconfname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneconfname_ = new ::std::string;
  }
  sceneconfname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.SceneGamePlayGridData.SceneConfName)
}
inline ::std::string* SceneGamePlayGridData::mutable_sceneconfname() {
  set_has_sceneconfname();
  if (sceneconfname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneconfname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.SceneGamePlayGridData.SceneConfName)
  return sceneconfname_;
}
inline ::std::string* SceneGamePlayGridData::release_sceneconfname() {
  clear_has_sceneconfname();
  if (sceneconfname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sceneconfname_;
    sceneconfname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SceneGamePlayGridData::set_allocated_sceneconfname(::std::string* sceneconfname) {
  if (sceneconfname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sceneconfname_;
  }
  if (sceneconfname) {
    set_has_sceneconfname();
    sceneconfname_ = sceneconfname;
  } else {
    clear_has_sceneconfname();
    sceneconfname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SceneGamePlayGridData.SceneConfName)
}

// optional .pb.PbVector2_Int GridSize = 3;
inline bool SceneGamePlayGridData::has_gridsize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SceneGamePlayGridData::set_has_gridsize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SceneGamePlayGridData::clear_has_gridsize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SceneGamePlayGridData::clear_gridsize() {
  if (gridsize_ != NULL) gridsize_->::pb::PbVector2_Int::Clear();
  clear_has_gridsize();
}
inline const ::pb::PbVector2_Int& SceneGamePlayGridData::gridsize() const {
  // @@protoc_insertion_point(field_get:pb.SceneGamePlayGridData.GridSize)
  return gridsize_ != NULL ? *gridsize_ : *default_instance_->gridsize_;
}
inline ::pb::PbVector2_Int* SceneGamePlayGridData::mutable_gridsize() {
  set_has_gridsize();
  if (gridsize_ == NULL) gridsize_ = new ::pb::PbVector2_Int;
  // @@protoc_insertion_point(field_mutable:pb.SceneGamePlayGridData.GridSize)
  return gridsize_;
}
inline ::pb::PbVector2_Int* SceneGamePlayGridData::release_gridsize() {
  clear_has_gridsize();
  ::pb::PbVector2_Int* temp = gridsize_;
  gridsize_ = NULL;
  return temp;
}
inline void SceneGamePlayGridData::set_allocated_gridsize(::pb::PbVector2_Int* gridsize) {
  delete gridsize_;
  gridsize_ = gridsize;
  if (gridsize) {
    set_has_gridsize();
  } else {
    clear_has_gridsize();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SceneGamePlayGridData.GridSize)
}

// optional .pb.PbVector2_Int NodeSize = 4;
inline bool SceneGamePlayGridData::has_nodesize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SceneGamePlayGridData::set_has_nodesize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SceneGamePlayGridData::clear_has_nodesize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SceneGamePlayGridData::clear_nodesize() {
  if (nodesize_ != NULL) nodesize_->::pb::PbVector2_Int::Clear();
  clear_has_nodesize();
}
inline const ::pb::PbVector2_Int& SceneGamePlayGridData::nodesize() const {
  // @@protoc_insertion_point(field_get:pb.SceneGamePlayGridData.NodeSize)
  return nodesize_ != NULL ? *nodesize_ : *default_instance_->nodesize_;
}
inline ::pb::PbVector2_Int* SceneGamePlayGridData::mutable_nodesize() {
  set_has_nodesize();
  if (nodesize_ == NULL) nodesize_ = new ::pb::PbVector2_Int;
  // @@protoc_insertion_point(field_mutable:pb.SceneGamePlayGridData.NodeSize)
  return nodesize_;
}
inline ::pb::PbVector2_Int* SceneGamePlayGridData::release_nodesize() {
  clear_has_nodesize();
  ::pb::PbVector2_Int* temp = nodesize_;
  nodesize_ = NULL;
  return temp;
}
inline void SceneGamePlayGridData::set_allocated_nodesize(::pb::PbVector2_Int* nodesize) {
  delete nodesize_;
  nodesize_ = nodesize;
  if (nodesize) {
    set_has_nodesize();
  } else {
    clear_has_nodesize();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SceneGamePlayGridData.NodeSize)
}

// optional .pb.PbVector2_Int Origin = 5;
inline bool SceneGamePlayGridData::has_origin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SceneGamePlayGridData::set_has_origin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SceneGamePlayGridData::clear_has_origin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SceneGamePlayGridData::clear_origin() {
  if (origin_ != NULL) origin_->::pb::PbVector2_Int::Clear();
  clear_has_origin();
}
inline const ::pb::PbVector2_Int& SceneGamePlayGridData::origin() const {
  // @@protoc_insertion_point(field_get:pb.SceneGamePlayGridData.Origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::pb::PbVector2_Int* SceneGamePlayGridData::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) origin_ = new ::pb::PbVector2_Int;
  // @@protoc_insertion_point(field_mutable:pb.SceneGamePlayGridData.Origin)
  return origin_;
}
inline ::pb::PbVector2_Int* SceneGamePlayGridData::release_origin() {
  clear_has_origin();
  ::pb::PbVector2_Int* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void SceneGamePlayGridData::set_allocated_origin(::pb::PbVector2_Int* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.SceneGamePlayGridData.Origin)
}

// repeated .pb.GridAreaInfo AreaInfoArr = 6;
inline int SceneGamePlayGridData::areainfoarr_size() const {
  return areainfoarr_.size();
}
inline void SceneGamePlayGridData::clear_areainfoarr() {
  areainfoarr_.Clear();
}
inline const ::pb::GridAreaInfo& SceneGamePlayGridData::areainfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.SceneGamePlayGridData.AreaInfoArr)
  return areainfoarr_.Get(index);
}
inline ::pb::GridAreaInfo* SceneGamePlayGridData::mutable_areainfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SceneGamePlayGridData.AreaInfoArr)
  return areainfoarr_.Mutable(index);
}
inline ::pb::GridAreaInfo* SceneGamePlayGridData::add_areainfoarr() {
  // @@protoc_insertion_point(field_add:pb.SceneGamePlayGridData.AreaInfoArr)
  return areainfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GridAreaInfo >&
SceneGamePlayGridData::areainfoarr() const {
  // @@protoc_insertion_point(field_list:pb.SceneGamePlayGridData.AreaInfoArr)
  return areainfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GridAreaInfo >*
SceneGamePlayGridData::mutable_areainfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.SceneGamePlayGridData.AreaInfoArr)
  return &areainfoarr_;
}

// repeated .pb.GridObstacleInfo ObstacleInfoArr = 7;
inline int SceneGamePlayGridData::obstacleinfoarr_size() const {
  return obstacleinfoarr_.size();
}
inline void SceneGamePlayGridData::clear_obstacleinfoarr() {
  obstacleinfoarr_.Clear();
}
inline const ::pb::GridObstacleInfo& SceneGamePlayGridData::obstacleinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.SceneGamePlayGridData.ObstacleInfoArr)
  return obstacleinfoarr_.Get(index);
}
inline ::pb::GridObstacleInfo* SceneGamePlayGridData::mutable_obstacleinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SceneGamePlayGridData.ObstacleInfoArr)
  return obstacleinfoarr_.Mutable(index);
}
inline ::pb::GridObstacleInfo* SceneGamePlayGridData::add_obstacleinfoarr() {
  // @@protoc_insertion_point(field_add:pb.SceneGamePlayGridData.ObstacleInfoArr)
  return obstacleinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GridObstacleInfo >&
SceneGamePlayGridData::obstacleinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.SceneGamePlayGridData.ObstacleInfoArr)
  return obstacleinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GridObstacleInfo >*
SceneGamePlayGridData::mutable_obstacleinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.SceneGamePlayGridData.ObstacleInfoArr)
  return &obstacleinfoarr_;
}

// repeated .pb.GridNodeInfo GridNodeArr = 8;
inline int SceneGamePlayGridData::gridnodearr_size() const {
  return gridnodearr_.size();
}
inline void SceneGamePlayGridData::clear_gridnodearr() {
  gridnodearr_.Clear();
}
inline const ::pb::GridNodeInfo& SceneGamePlayGridData::gridnodearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.SceneGamePlayGridData.GridNodeArr)
  return gridnodearr_.Get(index);
}
inline ::pb::GridNodeInfo* SceneGamePlayGridData::mutable_gridnodearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SceneGamePlayGridData.GridNodeArr)
  return gridnodearr_.Mutable(index);
}
inline ::pb::GridNodeInfo* SceneGamePlayGridData::add_gridnodearr() {
  // @@protoc_insertion_point(field_add:pb.SceneGamePlayGridData.GridNodeArr)
  return gridnodearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GridNodeInfo >&
SceneGamePlayGridData::gridnodearr() const {
  // @@protoc_insertion_point(field_list:pb.SceneGamePlayGridData.GridNodeArr)
  return gridnodearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GridNodeInfo >*
SceneGamePlayGridData::mutable_gridnodearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.SceneGamePlayGridData.GridNodeArr)
  return &gridnodearr_;
}

// repeated .pb.GridMistyInfo MistyInfoArr = 9;
inline int SceneGamePlayGridData::mistyinfoarr_size() const {
  return mistyinfoarr_.size();
}
inline void SceneGamePlayGridData::clear_mistyinfoarr() {
  mistyinfoarr_.Clear();
}
inline const ::pb::GridMistyInfo& SceneGamePlayGridData::mistyinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.SceneGamePlayGridData.MistyInfoArr)
  return mistyinfoarr_.Get(index);
}
inline ::pb::GridMistyInfo* SceneGamePlayGridData::mutable_mistyinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.SceneGamePlayGridData.MistyInfoArr)
  return mistyinfoarr_.Mutable(index);
}
inline ::pb::GridMistyInfo* SceneGamePlayGridData::add_mistyinfoarr() {
  // @@protoc_insertion_point(field_add:pb.SceneGamePlayGridData.MistyInfoArr)
  return mistyinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GridMistyInfo >&
SceneGamePlayGridData::mistyinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.SceneGamePlayGridData.MistyInfoArr)
  return mistyinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GridMistyInfo >*
SceneGamePlayGridData::mutable_mistyinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.SceneGamePlayGridData.MistyInfoArr)
  return &mistyinfoarr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_module_2fSceneGamePlayGridData_2eproto__INCLUDED
