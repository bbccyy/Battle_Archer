// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Background.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Background.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TBackgroundInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBackgroundInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* THeroBackground_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THeroBackground_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBackgroundGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBackgroundGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TBackgroundSetBackgroundReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TBackgroundSetBackgroundReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fBackground_2eproto() {
  protobuf_AddDesc_net_2fBackground_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Background.proto");
  GOOGLE_CHECK(file != NULL);
  TBackgroundInfo_descriptor_ = file->message_type(0);
  static const int TBackgroundInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBackgroundInfo, backgroundid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBackgroundInfo, activationtime_),
  };
  TBackgroundInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBackgroundInfo_descriptor_,
      TBackgroundInfo::default_instance_,
      TBackgroundInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBackgroundInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBackgroundInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBackgroundInfo));
  THeroBackground_descriptor_ = file->message_type(1);
  static const int THeroBackground_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroBackground, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroBackground, backgroundid_),
  };
  THeroBackground_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THeroBackground_descriptor_,
      THeroBackground::default_instance_,
      THeroBackground_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroBackground, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroBackground, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THeroBackground));
  TBackgroundGetInfoRsp_descriptor_ = file->message_type(2);
  static const int TBackgroundGetInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBackgroundGetInfoRsp, backgroundinfoarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBackgroundGetInfoRsp, herobackgroundarray_),
  };
  TBackgroundGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBackgroundGetInfoRsp_descriptor_,
      TBackgroundGetInfoRsp::default_instance_,
      TBackgroundGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBackgroundGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBackgroundGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBackgroundGetInfoRsp));
  TBackgroundSetBackgroundReq_descriptor_ = file->message_type(3);
  static const int TBackgroundSetBackgroundReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBackgroundSetBackgroundReq, herobackgroundsingle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBackgroundSetBackgroundReq, isusedforall_),
  };
  TBackgroundSetBackgroundReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TBackgroundSetBackgroundReq_descriptor_,
      TBackgroundSetBackgroundReq::default_instance_,
      TBackgroundSetBackgroundReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBackgroundSetBackgroundReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TBackgroundSetBackgroundReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TBackgroundSetBackgroundReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fBackground_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBackgroundInfo_descriptor_, &TBackgroundInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THeroBackground_descriptor_, &THeroBackground::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBackgroundGetInfoRsp_descriptor_, &TBackgroundGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TBackgroundSetBackgroundReq_descriptor_, &TBackgroundSetBackgroundReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fBackground_2eproto() {
  delete TBackgroundInfo::default_instance_;
  delete TBackgroundInfo_reflection_;
  delete THeroBackground::default_instance_;
  delete THeroBackground_reflection_;
  delete TBackgroundGetInfoRsp::default_instance_;
  delete TBackgroundGetInfoRsp_reflection_;
  delete TBackgroundSetBackgroundReq::default_instance_;
  delete TBackgroundSetBackgroundReq_reflection_;
}

void protobuf_AddDesc_net_2fBackground_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024net/Background.proto\022\002pb\"\?\n\017TBackgroun"
    "dInfo\022\024\n\014BackgroundId\030\001 \001(\r\022\026\n\016Activatio"
    "nTime\030\002 \001(\004\"8\n\017THeroBackground\022\017\n\007ModelI"
    "d\030\001 \001(\r\022\024\n\014BackgroundId\030\002 \001(\r\"{\n\025TBackgr"
    "oundGetInfoRsp\0220\n\023BackgroundInfoArray\030\001 "
    "\003(\0132\023.pb.TBackgroundInfo\0220\n\023HeroBackgrou"
    "ndArray\030\002 \003(\0132\023.pb.THeroBackground\"f\n\033TB"
    "ackgroundSetBackgroundReq\0221\n\024HeroBackgro"
    "undSingle\030\001 \001(\0132\023.pb.THeroBackground\022\024\n\014"
    "IsUsedForAll\030\002 \001(\010", 378);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Background.proto", &protobuf_RegisterTypes);
  TBackgroundInfo::default_instance_ = new TBackgroundInfo();
  THeroBackground::default_instance_ = new THeroBackground();
  TBackgroundGetInfoRsp::default_instance_ = new TBackgroundGetInfoRsp();
  TBackgroundSetBackgroundReq::default_instance_ = new TBackgroundSetBackgroundReq();
  TBackgroundInfo::default_instance_->InitAsDefaultInstance();
  THeroBackground::default_instance_->InitAsDefaultInstance();
  TBackgroundGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TBackgroundSetBackgroundReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fBackground_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fBackground_2eproto {
  StaticDescriptorInitializer_net_2fBackground_2eproto() {
    protobuf_AddDesc_net_2fBackground_2eproto();
  }
} static_descriptor_initializer_net_2fBackground_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TBackgroundInfo::kBackgroundIdFieldNumber;
const int TBackgroundInfo::kActivationTimeFieldNumber;
#endif  // !_MSC_VER

TBackgroundInfo::TBackgroundInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBackgroundInfo)
}

void TBackgroundInfo::InitAsDefaultInstance() {
}

TBackgroundInfo::TBackgroundInfo(const TBackgroundInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBackgroundInfo)
}

void TBackgroundInfo::SharedCtor() {
  _cached_size_ = 0;
  backgroundid_ = 0u;
  activationtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBackgroundInfo::~TBackgroundInfo() {
  // @@protoc_insertion_point(destructor:pb.TBackgroundInfo)
  SharedDtor();
}

void TBackgroundInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBackgroundInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBackgroundInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBackgroundInfo_descriptor_;
}

const TBackgroundInfo& TBackgroundInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBackground_2eproto();
  return *default_instance_;
}

TBackgroundInfo* TBackgroundInfo::default_instance_ = NULL;

TBackgroundInfo* TBackgroundInfo::New() const {
  return new TBackgroundInfo;
}

void TBackgroundInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TBackgroundInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(activationtime_, backgroundid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBackgroundInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBackgroundInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BackgroundId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &backgroundid_)));
          set_has_backgroundid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ActivationTime;
        break;
      }

      // optional uint64 ActivationTime = 2;
      case 2: {
        if (tag == 16) {
         parse_ActivationTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &activationtime_)));
          set_has_activationtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBackgroundInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBackgroundInfo)
  return false;
#undef DO_
}

void TBackgroundInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBackgroundInfo)
  // optional uint32 BackgroundId = 1;
  if (has_backgroundid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->backgroundid(), output);
  }

  // optional uint64 ActivationTime = 2;
  if (has_activationtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->activationtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBackgroundInfo)
}

::google::protobuf::uint8* TBackgroundInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBackgroundInfo)
  // optional uint32 BackgroundId = 1;
  if (has_backgroundid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->backgroundid(), target);
  }

  // optional uint64 ActivationTime = 2;
  if (has_activationtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->activationtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBackgroundInfo)
  return target;
}

int TBackgroundInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BackgroundId = 1;
    if (has_backgroundid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->backgroundid());
    }

    // optional uint64 ActivationTime = 2;
    if (has_activationtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->activationtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBackgroundInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBackgroundInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBackgroundInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBackgroundInfo::MergeFrom(const TBackgroundInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_backgroundid()) {
      set_backgroundid(from.backgroundid());
    }
    if (from.has_activationtime()) {
      set_activationtime(from.activationtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBackgroundInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBackgroundInfo::CopyFrom(const TBackgroundInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBackgroundInfo::IsInitialized() const {

  return true;
}

void TBackgroundInfo::Swap(TBackgroundInfo* other) {
  if (other != this) {
    std::swap(backgroundid_, other->backgroundid_);
    std::swap(activationtime_, other->activationtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBackgroundInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBackgroundInfo_descriptor_;
  metadata.reflection = TBackgroundInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THeroBackground::kModelIdFieldNumber;
const int THeroBackground::kBackgroundIdFieldNumber;
#endif  // !_MSC_VER

THeroBackground::THeroBackground()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THeroBackground)
}

void THeroBackground::InitAsDefaultInstance() {
}

THeroBackground::THeroBackground(const THeroBackground& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THeroBackground)
}

void THeroBackground::SharedCtor() {
  _cached_size_ = 0;
  modelid_ = 0u;
  backgroundid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THeroBackground::~THeroBackground() {
  // @@protoc_insertion_point(destructor:pb.THeroBackground)
  SharedDtor();
}

void THeroBackground::SharedDtor() {
  if (this != default_instance_) {
  }
}

void THeroBackground::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THeroBackground::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THeroBackground_descriptor_;
}

const THeroBackground& THeroBackground::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBackground_2eproto();
  return *default_instance_;
}

THeroBackground* THeroBackground::default_instance_ = NULL;

THeroBackground* THeroBackground::New() const {
  return new THeroBackground;
}

void THeroBackground::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<THeroBackground*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(modelid_, backgroundid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THeroBackground::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THeroBackground)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ModelId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modelid_)));
          set_has_modelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BackgroundId;
        break;
      }

      // optional uint32 BackgroundId = 2;
      case 2: {
        if (tag == 16) {
         parse_BackgroundId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &backgroundid_)));
          set_has_backgroundid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THeroBackground)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THeroBackground)
  return false;
#undef DO_
}

void THeroBackground::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THeroBackground)
  // optional uint32 ModelId = 1;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->modelid(), output);
  }

  // optional uint32 BackgroundId = 2;
  if (has_backgroundid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->backgroundid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THeroBackground)
}

::google::protobuf::uint8* THeroBackground::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THeroBackground)
  // optional uint32 ModelId = 1;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->modelid(), target);
  }

  // optional uint32 BackgroundId = 2;
  if (has_backgroundid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->backgroundid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THeroBackground)
  return target;
}

int THeroBackground::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ModelId = 1;
    if (has_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modelid());
    }

    // optional uint32 BackgroundId = 2;
    if (has_backgroundid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->backgroundid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THeroBackground::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THeroBackground* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THeroBackground*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THeroBackground::MergeFrom(const THeroBackground& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
    if (from.has_backgroundid()) {
      set_backgroundid(from.backgroundid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THeroBackground::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THeroBackground::CopyFrom(const THeroBackground& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THeroBackground::IsInitialized() const {

  return true;
}

void THeroBackground::Swap(THeroBackground* other) {
  if (other != this) {
    std::swap(modelid_, other->modelid_);
    std::swap(backgroundid_, other->backgroundid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THeroBackground::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THeroBackground_descriptor_;
  metadata.reflection = THeroBackground_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBackgroundGetInfoRsp::kBackgroundInfoArrayFieldNumber;
const int TBackgroundGetInfoRsp::kHeroBackgroundArrayFieldNumber;
#endif  // !_MSC_VER

TBackgroundGetInfoRsp::TBackgroundGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBackgroundGetInfoRsp)
}

void TBackgroundGetInfoRsp::InitAsDefaultInstance() {
}

TBackgroundGetInfoRsp::TBackgroundGetInfoRsp(const TBackgroundGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBackgroundGetInfoRsp)
}

void TBackgroundGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBackgroundGetInfoRsp::~TBackgroundGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TBackgroundGetInfoRsp)
  SharedDtor();
}

void TBackgroundGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TBackgroundGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBackgroundGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBackgroundGetInfoRsp_descriptor_;
}

const TBackgroundGetInfoRsp& TBackgroundGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBackground_2eproto();
  return *default_instance_;
}

TBackgroundGetInfoRsp* TBackgroundGetInfoRsp::default_instance_ = NULL;

TBackgroundGetInfoRsp* TBackgroundGetInfoRsp::New() const {
  return new TBackgroundGetInfoRsp;
}

void TBackgroundGetInfoRsp::Clear() {
  backgroundinfoarray_.Clear();
  herobackgroundarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBackgroundGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBackgroundGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TBackgroundInfo BackgroundInfoArray = 1;
      case 1: {
        if (tag == 10) {
         parse_BackgroundInfoArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_backgroundinfoarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_BackgroundInfoArray;
        if (input->ExpectTag(18)) goto parse_HeroBackgroundArray;
        break;
      }

      // repeated .pb.THeroBackground HeroBackgroundArray = 2;
      case 2: {
        if (tag == 18) {
         parse_HeroBackgroundArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herobackgroundarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_HeroBackgroundArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBackgroundGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBackgroundGetInfoRsp)
  return false;
#undef DO_
}

void TBackgroundGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBackgroundGetInfoRsp)
  // repeated .pb.TBackgroundInfo BackgroundInfoArray = 1;
  for (int i = 0; i < this->backgroundinfoarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->backgroundinfoarray(i), output);
  }

  // repeated .pb.THeroBackground HeroBackgroundArray = 2;
  for (int i = 0; i < this->herobackgroundarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->herobackgroundarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBackgroundGetInfoRsp)
}

::google::protobuf::uint8* TBackgroundGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBackgroundGetInfoRsp)
  // repeated .pb.TBackgroundInfo BackgroundInfoArray = 1;
  for (int i = 0; i < this->backgroundinfoarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->backgroundinfoarray(i), target);
  }

  // repeated .pb.THeroBackground HeroBackgroundArray = 2;
  for (int i = 0; i < this->herobackgroundarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->herobackgroundarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBackgroundGetInfoRsp)
  return target;
}

int TBackgroundGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TBackgroundInfo BackgroundInfoArray = 1;
  total_size += 1 * this->backgroundinfoarray_size();
  for (int i = 0; i < this->backgroundinfoarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->backgroundinfoarray(i));
  }

  // repeated .pb.THeroBackground HeroBackgroundArray = 2;
  total_size += 1 * this->herobackgroundarray_size();
  for (int i = 0; i < this->herobackgroundarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herobackgroundarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBackgroundGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBackgroundGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBackgroundGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBackgroundGetInfoRsp::MergeFrom(const TBackgroundGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  backgroundinfoarray_.MergeFrom(from.backgroundinfoarray_);
  herobackgroundarray_.MergeFrom(from.herobackgroundarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBackgroundGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBackgroundGetInfoRsp::CopyFrom(const TBackgroundGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBackgroundGetInfoRsp::IsInitialized() const {

  return true;
}

void TBackgroundGetInfoRsp::Swap(TBackgroundGetInfoRsp* other) {
  if (other != this) {
    backgroundinfoarray_.Swap(&other->backgroundinfoarray_);
    herobackgroundarray_.Swap(&other->herobackgroundarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBackgroundGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBackgroundGetInfoRsp_descriptor_;
  metadata.reflection = TBackgroundGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TBackgroundSetBackgroundReq::kHeroBackgroundSingleFieldNumber;
const int TBackgroundSetBackgroundReq::kIsUsedForAllFieldNumber;
#endif  // !_MSC_VER

TBackgroundSetBackgroundReq::TBackgroundSetBackgroundReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TBackgroundSetBackgroundReq)
}

void TBackgroundSetBackgroundReq::InitAsDefaultInstance() {
  herobackgroundsingle_ = const_cast< ::pb::THeroBackground*>(&::pb::THeroBackground::default_instance());
}

TBackgroundSetBackgroundReq::TBackgroundSetBackgroundReq(const TBackgroundSetBackgroundReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TBackgroundSetBackgroundReq)
}

void TBackgroundSetBackgroundReq::SharedCtor() {
  _cached_size_ = 0;
  herobackgroundsingle_ = NULL;
  isusedforall_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TBackgroundSetBackgroundReq::~TBackgroundSetBackgroundReq() {
  // @@protoc_insertion_point(destructor:pb.TBackgroundSetBackgroundReq)
  SharedDtor();
}

void TBackgroundSetBackgroundReq::SharedDtor() {
  if (this != default_instance_) {
    delete herobackgroundsingle_;
  }
}

void TBackgroundSetBackgroundReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TBackgroundSetBackgroundReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TBackgroundSetBackgroundReq_descriptor_;
}

const TBackgroundSetBackgroundReq& TBackgroundSetBackgroundReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fBackground_2eproto();
  return *default_instance_;
}

TBackgroundSetBackgroundReq* TBackgroundSetBackgroundReq::default_instance_ = NULL;

TBackgroundSetBackgroundReq* TBackgroundSetBackgroundReq::New() const {
  return new TBackgroundSetBackgroundReq;
}

void TBackgroundSetBackgroundReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_herobackgroundsingle()) {
      if (herobackgroundsingle_ != NULL) herobackgroundsingle_->::pb::THeroBackground::Clear();
    }
    isusedforall_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TBackgroundSetBackgroundReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TBackgroundSetBackgroundReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.THeroBackground HeroBackgroundSingle = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_herobackgroundsingle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsUsedForAll;
        break;
      }

      // optional bool IsUsedForAll = 2;
      case 2: {
        if (tag == 16) {
         parse_IsUsedForAll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isusedforall_)));
          set_has_isusedforall();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TBackgroundSetBackgroundReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TBackgroundSetBackgroundReq)
  return false;
#undef DO_
}

void TBackgroundSetBackgroundReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TBackgroundSetBackgroundReq)
  // optional .pb.THeroBackground HeroBackgroundSingle = 1;
  if (has_herobackgroundsingle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->herobackgroundsingle(), output);
  }

  // optional bool IsUsedForAll = 2;
  if (has_isusedforall()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isusedforall(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TBackgroundSetBackgroundReq)
}

::google::protobuf::uint8* TBackgroundSetBackgroundReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TBackgroundSetBackgroundReq)
  // optional .pb.THeroBackground HeroBackgroundSingle = 1;
  if (has_herobackgroundsingle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->herobackgroundsingle(), target);
  }

  // optional bool IsUsedForAll = 2;
  if (has_isusedforall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isusedforall(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TBackgroundSetBackgroundReq)
  return target;
}

int TBackgroundSetBackgroundReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.THeroBackground HeroBackgroundSingle = 1;
    if (has_herobackgroundsingle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->herobackgroundsingle());
    }

    // optional bool IsUsedForAll = 2;
    if (has_isusedforall()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TBackgroundSetBackgroundReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TBackgroundSetBackgroundReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TBackgroundSetBackgroundReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TBackgroundSetBackgroundReq::MergeFrom(const TBackgroundSetBackgroundReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_herobackgroundsingle()) {
      mutable_herobackgroundsingle()->::pb::THeroBackground::MergeFrom(from.herobackgroundsingle());
    }
    if (from.has_isusedforall()) {
      set_isusedforall(from.isusedforall());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TBackgroundSetBackgroundReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TBackgroundSetBackgroundReq::CopyFrom(const TBackgroundSetBackgroundReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TBackgroundSetBackgroundReq::IsInitialized() const {

  return true;
}

void TBackgroundSetBackgroundReq::Swap(TBackgroundSetBackgroundReq* other) {
  if (other != this) {
    std::swap(herobackgroundsingle_, other->herobackgroundsingle_);
    std::swap(isusedforall_, other->isusedforall_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TBackgroundSetBackgroundReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TBackgroundSetBackgroundReq_descriptor_;
  metadata.reflection = TBackgroundSetBackgroundReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
