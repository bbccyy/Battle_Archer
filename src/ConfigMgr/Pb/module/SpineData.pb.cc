// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/SpineData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/SpineData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* SpineAttachInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpineAttachInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpineData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpineData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fSpineData_2eproto() {
  protobuf_AddDesc_module_2fSpineData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/SpineData.proto");
  GOOGLE_CHECK(file != NULL);
  SpineAttachInfo_descriptor_ = file->message_type(0);
  static const int SpineAttachInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpineAttachInfo, effectassetpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpineAttachInfo, bonename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpineAttachInfo, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpineAttachInfo, sortingorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpineAttachInfo, scale_),
  };
  SpineAttachInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpineAttachInfo_descriptor_,
      SpineAttachInfo::default_instance_,
      SpineAttachInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpineAttachInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpineAttachInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpineAttachInfo));
  SpineData_descriptor_ = file->message_type(1);
  static const int SpineData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpineData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpineData, spinename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpineData, attachinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpineData, uselocal_),
  };
  SpineData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpineData_descriptor_,
      SpineData::default_instance_,
      SpineData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpineData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpineData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpineData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fSpineData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpineAttachInfo_descriptor_, &SpineAttachInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpineData_descriptor_, &SpineData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fSpineData_2eproto() {
  delete SpineAttachInfo::default_instance_;
  delete SpineAttachInfo_reflection_;
  delete SpineData::default_instance_;
  delete SpineData_reflection_;
}

void protobuf_AddDesc_module_2fSpineData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fUtil_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026module/SpineData.proto\022\002pb\032\021module/Uti"
    "l.proto\"\200\001\n\017SpineAttachInfo\022\027\n\017EffectAss"
    "etPath\030\001 \001(\t\022\020\n\010BoneName\030\002 \001(\t\022\035\n\006Offset"
    "\030\003 \001(\0132\r.pb.PbVector3\022\024\n\014SortingOrder\030\004 "
    "\001(\005\022\r\n\005Scale\030\005 \001(\002\"h\n\tSpineData\022\n\n\002Id\030\001 "
    "\002(\005\022\021\n\tSpineName\030\002 \002(\t\022*\n\rAttachInfoArr\030"
    "\003 \003(\0132\023.pb.SpineAttachInfo\022\020\n\010UseLocal\030\004"
    " \001(\005", 284);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/SpineData.proto", &protobuf_RegisterTypes);
  SpineAttachInfo::default_instance_ = new SpineAttachInfo();
  SpineData::default_instance_ = new SpineData();
  SpineAttachInfo::default_instance_->InitAsDefaultInstance();
  SpineData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fSpineData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fSpineData_2eproto {
  StaticDescriptorInitializer_module_2fSpineData_2eproto() {
    protobuf_AddDesc_module_2fSpineData_2eproto();
  }
} static_descriptor_initializer_module_2fSpineData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SpineAttachInfo::kEffectAssetPathFieldNumber;
const int SpineAttachInfo::kBoneNameFieldNumber;
const int SpineAttachInfo::kOffsetFieldNumber;
const int SpineAttachInfo::kSortingOrderFieldNumber;
const int SpineAttachInfo::kScaleFieldNumber;
#endif  // !_MSC_VER

SpineAttachInfo::SpineAttachInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SpineAttachInfo)
}

void SpineAttachInfo::InitAsDefaultInstance() {
  offset_ = const_cast< ::pb::PbVector3*>(&::pb::PbVector3::default_instance());
}

SpineAttachInfo::SpineAttachInfo(const SpineAttachInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SpineAttachInfo)
}

void SpineAttachInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  effectassetpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bonename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_ = NULL;
  sortingorder_ = 0;
  scale_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpineAttachInfo::~SpineAttachInfo() {
  // @@protoc_insertion_point(destructor:pb.SpineAttachInfo)
  SharedDtor();
}

void SpineAttachInfo::SharedDtor() {
  if (effectassetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete effectassetpath_;
  }
  if (bonename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bonename_;
  }
  if (this != default_instance_) {
    delete offset_;
  }
}

void SpineAttachInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpineAttachInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpineAttachInfo_descriptor_;
}

const SpineAttachInfo& SpineAttachInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSpineData_2eproto();
  return *default_instance_;
}

SpineAttachInfo* SpineAttachInfo::default_instance_ = NULL;

SpineAttachInfo* SpineAttachInfo::New() const {
  return new SpineAttachInfo;
}

void SpineAttachInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpineAttachInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(sortingorder_, scale_);
    if (has_effectassetpath()) {
      if (effectassetpath_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        effectassetpath_->clear();
      }
    }
    if (has_bonename()) {
      if (bonename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bonename_->clear();
      }
    }
    if (has_offset()) {
      if (offset_ != NULL) offset_->::pb::PbVector3::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpineAttachInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SpineAttachInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string EffectAssetPath = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effectassetpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->effectassetpath().data(), this->effectassetpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "effectassetpath");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BoneName;
        break;
      }

      // optional string BoneName = 2;
      case 2: {
        if (tag == 18) {
         parse_BoneName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bonename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bonename().data(), this->bonename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bonename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Offset;
        break;
      }

      // optional .pb.PbVector3 Offset = 3;
      case 3: {
        if (tag == 26) {
         parse_Offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SortingOrder;
        break;
      }

      // optional int32 SortingOrder = 4;
      case 4: {
        if (tag == 32) {
         parse_SortingOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sortingorder_)));
          set_has_sortingorder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_Scale;
        break;
      }

      // optional float Scale = 5;
      case 5: {
        if (tag == 45) {
         parse_Scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SpineAttachInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SpineAttachInfo)
  return false;
#undef DO_
}

void SpineAttachInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SpineAttachInfo)
  // optional string EffectAssetPath = 1;
  if (has_effectassetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->effectassetpath().data(), this->effectassetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "effectassetpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->effectassetpath(), output);
  }

  // optional string BoneName = 2;
  if (has_bonename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bonename().data(), this->bonename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bonename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->bonename(), output);
  }

  // optional .pb.PbVector3 Offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->offset(), output);
  }

  // optional int32 SortingOrder = 4;
  if (has_sortingorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sortingorder(), output);
  }

  // optional float Scale = 5;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->scale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SpineAttachInfo)
}

::google::protobuf::uint8* SpineAttachInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SpineAttachInfo)
  // optional string EffectAssetPath = 1;
  if (has_effectassetpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->effectassetpath().data(), this->effectassetpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "effectassetpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->effectassetpath(), target);
  }

  // optional string BoneName = 2;
  if (has_bonename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bonename().data(), this->bonename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bonename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bonename(), target);
  }

  // optional .pb.PbVector3 Offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->offset(), target);
  }

  // optional int32 SortingOrder = 4;
  if (has_sortingorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sortingorder(), target);
  }

  // optional float Scale = 5;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->scale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SpineAttachInfo)
  return target;
}

int SpineAttachInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string EffectAssetPath = 1;
    if (has_effectassetpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effectassetpath());
    }

    // optional string BoneName = 2;
    if (has_bonename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bonename());
    }

    // optional .pb.PbVector3 Offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->offset());
    }

    // optional int32 SortingOrder = 4;
    if (has_sortingorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sortingorder());
    }

    // optional float Scale = 5;
    if (has_scale()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpineAttachInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpineAttachInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpineAttachInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpineAttachInfo::MergeFrom(const SpineAttachInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_effectassetpath()) {
      set_effectassetpath(from.effectassetpath());
    }
    if (from.has_bonename()) {
      set_bonename(from.bonename());
    }
    if (from.has_offset()) {
      mutable_offset()->::pb::PbVector3::MergeFrom(from.offset());
    }
    if (from.has_sortingorder()) {
      set_sortingorder(from.sortingorder());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpineAttachInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpineAttachInfo::CopyFrom(const SpineAttachInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpineAttachInfo::IsInitialized() const {

  if (has_offset()) {
    if (!this->offset().IsInitialized()) return false;
  }
  return true;
}

void SpineAttachInfo::Swap(SpineAttachInfo* other) {
  if (other != this) {
    std::swap(effectassetpath_, other->effectassetpath_);
    std::swap(bonename_, other->bonename_);
    std::swap(offset_, other->offset_);
    std::swap(sortingorder_, other->sortingorder_);
    std::swap(scale_, other->scale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpineAttachInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpineAttachInfo_descriptor_;
  metadata.reflection = SpineAttachInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpineData::kIdFieldNumber;
const int SpineData::kSpineNameFieldNumber;
const int SpineData::kAttachInfoArrFieldNumber;
const int SpineData::kUseLocalFieldNumber;
#endif  // !_MSC_VER

SpineData::SpineData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SpineData)
}

void SpineData::InitAsDefaultInstance() {
}

SpineData::SpineData(const SpineData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SpineData)
}

void SpineData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  spinename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uselocal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpineData::~SpineData() {
  // @@protoc_insertion_point(destructor:pb.SpineData)
  SharedDtor();
}

void SpineData::SharedDtor() {
  if (spinename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete spinename_;
  }
  if (this != default_instance_) {
  }
}

void SpineData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpineData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpineData_descriptor_;
}

const SpineData& SpineData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSpineData_2eproto();
  return *default_instance_;
}

SpineData* SpineData::default_instance_ = NULL;

SpineData* SpineData::New() const {
  return new SpineData;
}

void SpineData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpineData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(id_, uselocal_);
    if (has_spinename()) {
      if (spinename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        spinename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attachinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpineData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SpineData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SpineName;
        break;
      }

      // required string SpineName = 2;
      case 2: {
        if (tag == 18) {
         parse_SpineName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spinename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->spinename().data(), this->spinename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "spinename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AttachInfoArr;
        break;
      }

      // repeated .pb.SpineAttachInfo AttachInfoArr = 3;
      case 3: {
        if (tag == 26) {
         parse_AttachInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attachinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_AttachInfoArr;
        if (input->ExpectTag(32)) goto parse_UseLocal;
        break;
      }

      // optional int32 UseLocal = 4;
      case 4: {
        if (tag == 32) {
         parse_UseLocal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uselocal_)));
          set_has_uselocal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SpineData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SpineData)
  return false;
#undef DO_
}

void SpineData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SpineData)
  // required int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string SpineName = 2;
  if (has_spinename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->spinename().data(), this->spinename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "spinename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->spinename(), output);
  }

  // repeated .pb.SpineAttachInfo AttachInfoArr = 3;
  for (int i = 0; i < this->attachinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attachinfoarr(i), output);
  }

  // optional int32 UseLocal = 4;
  if (has_uselocal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->uselocal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SpineData)
}

::google::protobuf::uint8* SpineData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SpineData)
  // required int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string SpineName = 2;
  if (has_spinename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->spinename().data(), this->spinename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "spinename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->spinename(), target);
  }

  // repeated .pb.SpineAttachInfo AttachInfoArr = 3;
  for (int i = 0; i < this->attachinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attachinfoarr(i), target);
  }

  // optional int32 UseLocal = 4;
  if (has_uselocal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->uselocal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SpineData)
  return target;
}

int SpineData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string SpineName = 2;
    if (has_spinename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spinename());
    }

    // optional int32 UseLocal = 4;
    if (has_uselocal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uselocal());
    }

  }
  // repeated .pb.SpineAttachInfo AttachInfoArr = 3;
  total_size += 1 * this->attachinfoarr_size();
  for (int i = 0; i < this->attachinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attachinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpineData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpineData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpineData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpineData::MergeFrom(const SpineData& from) {
  GOOGLE_CHECK_NE(&from, this);
  attachinfoarr_.MergeFrom(from.attachinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_spinename()) {
      set_spinename(from.spinename());
    }
    if (from.has_uselocal()) {
      set_uselocal(from.uselocal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpineData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpineData::CopyFrom(const SpineData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpineData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->attachinfoarr())) return false;
  return true;
}

void SpineData::Swap(SpineData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(spinename_, other->spinename_);
    attachinfoarr_.Swap(&other->attachinfoarr_);
    std::swap(uselocal_, other->uselocal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpineData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpineData_descriptor_;
  metadata.reflection = SpineData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
