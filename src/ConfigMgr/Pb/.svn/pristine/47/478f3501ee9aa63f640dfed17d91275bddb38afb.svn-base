// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CrossChallenge.proto

#ifndef PROTOBUF_net_2fCrossChallenge_2eproto__INCLUDED
#define PROTOBUF_net_2fCrossChallenge_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/Battle.pb.h"
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

class TCrossChallengeRsp;
class TCrossChallengeUserInfo;
class TCrossChallengeBattleInfo;
class TCrossChallengePeriodInfo;
class TCrossChallengeGetChallengeUserInfoRsp;
class TCrossChallengeGetCurrentPeriodInfoRsp;
class TCrossChallengeFormationInfo;
class TCrossChallengeGetFormationReq;
class TCrossChallengeGetFormationRsp;
class TCrossChallengeSetFormationReq;
class TCrossChallengeBattleHeroStatus;
class TCrossChallengeBattleSingle;
class TCrossChallengeGetBattleInfoReq;
class TCrossChallengeGetBattleInfoRsp;
class TCrossChallengeGetBattleReportReq;
class TCrossChallengeGetBattleReportRsp;
class TCrossChallengeGetRankRewardReq;
class TCrossChallengeGetRankRewardRsp;
class TCrossChallengeReportSimpleInfo;
class TCrossChallengeGetAuditionReportArrRsp;
class TCrossChallengeGuessInfo;
class TCrossChallengeGetGuessInfoRsp;
class TCrossChallengeGetCurrentGuessInfoRsp;
class TCrossChallengeGuessingReq;
class TCrossChallengeGetGuessRewardReq;
class TCrossChallengeGetGuessRewardRsp;
class TCrossChallengeGuessingRsp;
class TCrossChallengeBattleArmy;
class TCrossChallengeBattleArmyArr;
class TCrossChallengeGetUserArrFromArenaReq;
class TCrossChallengeGetUserArrFromArenaRsp;
class TCrossChallengeGetBattleUserArrReq;
class TCrossChallengeGetBattleUserArrRsp;
class TCrossChallengeAuditionSingle;
class TCrossChallengeAuditionUser;
class TCrossChallengeAuditionNotifyReq;
class TCrossChallengeBattleUser;
class TCrossChallengeStepBattleNotifyReq;

enum EChallengeStep {
  ECountDown = 1,
  Audition = 2,
  Prepare_64 = 3,
  Battle_64 = 4,
  Prepare_32 = 5,
  Battle_32 = 6,
  Prepare_16 = 7,
  Battle_16 = 8,
  Prepare_8 = 9,
  Battle_8 = 10,
  Prepare_4 = 11,
  Battle_4 = 12,
  Prepare_Final = 13,
  Battle_Final = 14,
  Honour = 15
};
bool EChallengeStep_IsValid(int value);
const EChallengeStep EChallengeStep_MIN = ECountDown;
const EChallengeStep EChallengeStep_MAX = Honour;
const int EChallengeStep_ARRAYSIZE = EChallengeStep_MAX + 1;

const ::google::protobuf::EnumDescriptor* EChallengeStep_descriptor();
inline const ::std::string& EChallengeStep_Name(EChallengeStep value) {
  return ::google::protobuf::internal::NameOfEnum(
    EChallengeStep_descriptor(), value);
}
inline bool EChallengeStep_Parse(
    const ::std::string& name, EChallengeStep* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EChallengeStep>(
    EChallengeStep_descriptor(), name, value);
}
enum EChallengeBattleStatus {
  BattleUnOpen = 0,
  BattleWin = 1,
  BattleLose = 2
};
bool EChallengeBattleStatus_IsValid(int value);
const EChallengeBattleStatus EChallengeBattleStatus_MIN = BattleUnOpen;
const EChallengeBattleStatus EChallengeBattleStatus_MAX = BattleLose;
const int EChallengeBattleStatus_ARRAYSIZE = EChallengeBattleStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EChallengeBattleStatus_descriptor();
inline const ::std::string& EChallengeBattleStatus_Name(EChallengeBattleStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EChallengeBattleStatus_descriptor(), value);
}
inline bool EChallengeBattleStatus_Parse(
    const ::std::string& name, EChallengeBattleStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EChallengeBattleStatus>(
    EChallengeBattleStatus_descriptor(), name, value);
}
enum EChallengeGuessStatus {
  NotGuess = 0,
  AtkWin = 1,
  DefWin = 2
};
bool EChallengeGuessStatus_IsValid(int value);
const EChallengeGuessStatus EChallengeGuessStatus_MIN = NotGuess;
const EChallengeGuessStatus EChallengeGuessStatus_MAX = DefWin;
const int EChallengeGuessStatus_ARRAYSIZE = EChallengeGuessStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EChallengeGuessStatus_descriptor();
inline const ::std::string& EChallengeGuessStatus_Name(EChallengeGuessStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EChallengeGuessStatus_descriptor(), value);
}
inline bool EChallengeGuessStatus_Parse(
    const ::std::string& name, EChallengeGuessStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EChallengeGuessStatus>(
    EChallengeGuessStatus_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TCrossChallengeRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeRsp : public ::google::protobuf::Message {
 public:
  TCrossChallengeRsp();
  virtual ~TCrossChallengeRsp();

  TCrossChallengeRsp(const TCrossChallengeRsp& from);

  inline TCrossChallengeRsp& operator=(const TCrossChallengeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeRsp& default_instance();

  void Swap(TCrossChallengeRsp* other);

  // implements Message ----------------------------------------------

  TCrossChallengeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeRsp& from);
  void MergeFrom(const TCrossChallengeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 SeasonBeginTime = 1;
  inline bool has_seasonbegintime() const;
  inline void clear_seasonbegintime();
  static const int kSeasonBeginTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeRsp</name>
  	<Function>
  		<name>seasonbegintime</name>
  		<replaceName>SeasonBeginTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_seasonbegintime</name>
  		<replaceName>SeasonBeginTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_seasonbegintime</name>
  		<replaceName>SeasonBeginTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 seasonbegintime() const;
  inline void set_seasonbegintime(::google::protobuf::uint64 value);

  // optional .pb.EChallengeStep Step = 2;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeRsp</name>
  	<Function>
  		<name>step</name>
  		<replaceName>Step</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_step</name>
  		<replaceName>Step</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_step</name>
  		<replaceName>Step</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EChallengeStep step() const;
  inline void set_step(::pb::EChallengeStep value);

  // optional uint32 Rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeRsp</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 IsLose = 4;
  inline bool has_islose() const;
  inline void clear_islose();
  static const int kIsLoseFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeRsp</name>
  	<Function>
  		<name>islose</name>
  		<replaceName>IsLose</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_islose</name>
  		<replaceName>IsLose</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_islose</name>
  		<replaceName>IsLose</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 islose() const;
  inline void set_islose(::google::protobuf::uint32 value);

  // optional uint32 IsOpen = 5;
  inline bool has_isopen() const;
  inline void clear_isopen();
  static const int kIsOpenFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeRsp</name>
  	<Function>
  		<name>isopen</name>
  		<replaceName>IsOpen</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isopen</name>
  		<replaceName>IsOpen</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isopen</name>
  		<replaceName>IsOpen</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isopen() const;
  inline void set_isopen(::google::protobuf::uint32 value);

  // optional uint32 IsInAudition = 6;
  inline bool has_isinaudition() const;
  inline void clear_isinaudition();
  static const int kIsInAuditionFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeRsp</name>
  	<Function>
  		<name>isinaudition</name>
  		<replaceName>IsInAudition</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isinaudition</name>
  		<replaceName>IsInAudition</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isinaudition</name>
  		<replaceName>IsInAudition</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isinaudition() const;
  inline void set_isinaudition(::google::protobuf::uint32 value);

  // optional uint32 IsRankRewarded = 7;
  inline bool has_isrankrewarded() const;
  inline void clear_isrankrewarded();
  static const int kIsRankRewardedFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeRsp</name>
  	<Function>
  		<name>isrankrewarded</name>
  		<replaceName>IsRankRewarded</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isrankrewarded</name>
  		<replaceName>IsRankRewarded</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isrankrewarded</name>
  		<replaceName>IsRankRewarded</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isrankrewarded() const;
  inline void set_isrankrewarded(::google::protobuf::uint32 value);

  // optional uint32 HasGuessReward = 8;
  inline bool has_hasguessreward() const;
  inline void clear_hasguessreward();
  static const int kHasGuessRewardFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeRsp</name>
  	<Function>
  		<name>hasguessreward</name>
  		<replaceName>HasGuessReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hasguessreward</name>
  		<replaceName>HasGuessReward</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hasguessreward</name>
  		<replaceName>HasGuessReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hasguessreward() const;
  inline void set_hasguessreward(::google::protobuf::uint32 value);

  // optional uint32 HasAuditionReport = 10;
  inline bool has_hasauditionreport() const;
  inline void clear_hasauditionreport();
  static const int kHasAuditionReportFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeRsp</name>
  	<Function>
  		<name>hasauditionreport</name>
  		<replaceName>HasAuditionReport</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hasauditionreport</name>
  		<replaceName>HasAuditionReport</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hasauditionreport</name>
  		<replaceName>HasAuditionReport</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hasauditionreport() const;
  inline void set_hasauditionreport(::google::protobuf::uint32 value);

  // optional uint32 ServerTeamId = 11;
  inline bool has_serverteamid() const;
  inline void clear_serverteamid();
  static const int kServerTeamIdFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeRsp</name>
  	<Function>
  		<name>serverteamid</name>
  		<replaceName>ServerTeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverteamid</name>
  		<replaceName>ServerTeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverteamid</name>
  		<replaceName>ServerTeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 serverteamid() const;
  inline void set_serverteamid(::google::protobuf::uint32 value);

  // optional uint32 RankRewardConfId = 12;
  inline bool has_rankrewardconfid() const;
  inline void clear_rankrewardconfid();
  static const int kRankRewardConfIdFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeRsp</name>
  	<Function>
  		<name>rankrewardconfid</name>
  		<replaceName>RankRewardConfId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rankrewardconfid</name>
  		<replaceName>RankRewardConfId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankrewardconfid</name>
  		<replaceName>RankRewardConfId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rankrewardconfid() const;
  inline void set_rankrewardconfid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeRsp)
 private:
  inline void set_has_seasonbegintime();
  inline void clear_has_seasonbegintime();
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_islose();
  inline void clear_has_islose();
  inline void set_has_isopen();
  inline void clear_has_isopen();
  inline void set_has_isinaudition();
  inline void clear_has_isinaudition();
  inline void set_has_isrankrewarded();
  inline void clear_has_isrankrewarded();
  inline void set_has_hasguessreward();
  inline void clear_has_hasguessreward();
  inline void set_has_hasauditionreport();
  inline void clear_has_hasauditionreport();
  inline void set_has_serverteamid();
  inline void clear_has_serverteamid();
  inline void set_has_rankrewardconfid();
  inline void clear_has_rankrewardconfid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 seasonbegintime_;
  int step_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 islose_;
  ::google::protobuf::uint32 isopen_;
  ::google::protobuf::uint32 isinaudition_;
  ::google::protobuf::uint32 isrankrewarded_;
  ::google::protobuf::uint32 hasguessreward_;
  ::google::protobuf::uint32 hasauditionreport_;
  ::google::protobuf::uint32 serverteamid_;
  ::google::protobuf::uint32 rankrewardconfid_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeUserInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeUserInfo : public ::google::protobuf::Message {
 public:
  TCrossChallengeUserInfo();
  virtual ~TCrossChallengeUserInfo();

  TCrossChallengeUserInfo(const TCrossChallengeUserInfo& from);

  inline TCrossChallengeUserInfo& operator=(const TCrossChallengeUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeUserInfo& default_instance();

  void Swap(TCrossChallengeUserInfo* other);

  // implements Message ----------------------------------------------

  TCrossChallengeUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeUserInfo& from);
  void MergeFrom(const TCrossChallengeUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeUserInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string Uname = 2;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeUserInfo</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional uint32 PlayerModelHtid = 3;
  inline bool has_playermodelhtid() const;
  inline void clear_playermodelhtid();
  static const int kPlayerModelHtidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeUserInfo</name>
  	<Function>
  		<name>playermodelhtid</name>
  		<replaceName>PlayerModelHtid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_playermodelhtid</name>
  		<replaceName>PlayerModelHtid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_playermodelhtid</name>
  		<replaceName>PlayerModelHtid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 playermodelhtid() const;
  inline void set_playermodelhtid(::google::protobuf::uint32 value);

  // optional uint32 PlayerImageFrameTid = 4;
  inline bool has_playerimageframetid() const;
  inline void clear_playerimageframetid();
  static const int kPlayerImageFrameTidFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeUserInfo</name>
  	<Function>
  		<name>playerimageframetid</name>
  		<replaceName>PlayerImageFrameTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_playerimageframetid</name>
  		<replaceName>PlayerImageFrameTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_playerimageframetid</name>
  		<replaceName>PlayerImageFrameTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 playerimageframetid() const;
  inline void set_playerimageframetid(::google::protobuf::uint32 value);

  // optional uint32 Level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeUserInfo</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 VipLv = 6;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kVipLvFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeUserInfo</name>
  	<Function>
  		<name>viplv</name>
  		<replaceName>VipLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_viplv</name>
  		<replaceName>VipLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_viplv</name>
  		<replaceName>VipLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // optional uint64 GuildId = 7;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeUserInfo</name>
  	<Function>
  		<name>guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional string GuildName = 8;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeUserInfo</name>
  	<Function>
  		<name>guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional uint32 IsShowVip = 9;
  inline bool has_isshowvip() const;
  inline void clear_isshowvip();
  static const int kIsShowVipFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeUserInfo</name>
  	<Function>
  		<name>isshowvip</name>
  		<replaceName>IsShowVip</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isshowvip</name>
  		<replaceName>IsShowVip</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isshowvip</name>
  		<replaceName>IsShowVip</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isshowvip() const;
  inline void set_isshowvip(::google::protobuf::uint32 value);

  // optional string ServerId = 10;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeUserInfo</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeUserInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_playermodelhtid();
  inline void clear_has_playermodelhtid();
  inline void set_has_playerimageframetid();
  inline void clear_has_playerimageframetid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_isshowvip();
  inline void clear_has_isshowvip();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* uname_;
  ::google::protobuf::uint32 playermodelhtid_;
  ::google::protobuf::uint32 playerimageframetid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 viplv_;
  ::google::protobuf::uint64 guildid_;
  ::std::string* guildname_;
  ::std::string* serverid_;
  ::google::protobuf::uint32 isshowvip_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeUserInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeBattleInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeBattleInfo : public ::google::protobuf::Message {
 public:
  TCrossChallengeBattleInfo();
  virtual ~TCrossChallengeBattleInfo();

  TCrossChallengeBattleInfo(const TCrossChallengeBattleInfo& from);

  inline TCrossChallengeBattleInfo& operator=(const TCrossChallengeBattleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeBattleInfo& default_instance();

  void Swap(TCrossChallengeBattleInfo* other);

  // implements Message ----------------------------------------------

  TCrossChallengeBattleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeBattleInfo& from);
  void MergeFrom(const TCrossChallengeBattleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeBattleInfo</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional uint32 Pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeBattleInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint64 Uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeBattleInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // repeated uint64 RidArr = 4;
  inline int ridarr_size() const;
  inline void clear_ridarr();
  static const int kRidArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeBattleInfo</name>
  	<Function>
  		<name>ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>ridarr_size</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 ridarr(int index) const;
  inline void set_ridarr(int index, ::google::protobuf::uint64 value);
  inline void add_ridarr(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      ridarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_ridarr();

  // optional .pb.EChallengeBattleStatus Status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeBattleInfo</name>
  	<Function>
  		<name>status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EChallengeBattleStatus status() const;
  inline void set_status(::pb::EChallengeBattleStatus value);

  // optional uint64 FightForce = 6;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeBattleInfo</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeBattleInfo)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > ridarr_;
  ::google::protobuf::uint64 fightforce_;
  int status_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeBattleInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengePeriodInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengePeriodInfo : public ::google::protobuf::Message {
 public:
  TCrossChallengePeriodInfo();
  virtual ~TCrossChallengePeriodInfo();

  TCrossChallengePeriodInfo(const TCrossChallengePeriodInfo& from);

  inline TCrossChallengePeriodInfo& operator=(const TCrossChallengePeriodInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengePeriodInfo& default_instance();

  void Swap(TCrossChallengePeriodInfo* other);

  // implements Message ----------------------------------------------

  TCrossChallengePeriodInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengePeriodInfo& from);
  void MergeFrom(const TCrossChallengePeriodInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EChallengeStep Step = 1;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengePeriodInfo</name>
  	<Function>
  		<name>step</name>
  		<replaceName>Step</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_step</name>
  		<replaceName>Step</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_step</name>
  		<replaceName>Step</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EChallengeStep step() const;
  inline void set_step(::pb::EChallengeStep value);

  // repeated .pb.TCrossChallengeBattleInfo PeriodInfo = 2;
  inline int periodinfo_size() const;
  inline void clear_periodinfo();
  static const int kPeriodInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengePeriodInfo</name>
  	<Function>
  		<name>periodinfo</name>
  		<replaceName>PeriodInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_periodinfo</name>
  		<replaceName>PeriodInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_periodinfo</name>
  		<replaceName>PeriodInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_periodinfo</name>
  		<replaceName>PeriodInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>periodinfo_size</name>
  		<replaceName>PeriodInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengeBattleInfo& periodinfo(int index) const;
  inline ::pb::TCrossChallengeBattleInfo* mutable_periodinfo(int index);
  inline ::pb::TCrossChallengeBattleInfo* add_periodinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleInfo >&
      periodinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleInfo >*
      mutable_periodinfo();

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengePeriodInfo)
 private:
  inline void set_has_step();
  inline void clear_has_step();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleInfo > periodinfo_;
  int step_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengePeriodInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeGetChallengeUserInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeGetChallengeUserInfoRsp : public ::google::protobuf::Message {
 public:
  TCrossChallengeGetChallengeUserInfoRsp();
  virtual ~TCrossChallengeGetChallengeUserInfoRsp();

  TCrossChallengeGetChallengeUserInfoRsp(const TCrossChallengeGetChallengeUserInfoRsp& from);

  inline TCrossChallengeGetChallengeUserInfoRsp& operator=(const TCrossChallengeGetChallengeUserInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeGetChallengeUserInfoRsp& default_instance();

  void Swap(TCrossChallengeGetChallengeUserInfoRsp* other);

  // implements Message ----------------------------------------------

  TCrossChallengeGetChallengeUserInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeGetChallengeUserInfoRsp& from);
  void MergeFrom(const TCrossChallengeGetChallengeUserInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetChallengeUserInfoRsp</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // repeated .pb.TCrossChallengePeriodInfo PeriodInfoArr = 2;
  inline int periodinfoarr_size() const;
  inline void clear_periodinfoarr();
  static const int kPeriodInfoArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetChallengeUserInfoRsp</name>
  	<Function>
  		<name>periodinfoarr</name>
  		<replaceName>PeriodInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_periodinfoarr</name>
  		<replaceName>PeriodInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_periodinfoarr</name>
  		<replaceName>PeriodInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_periodinfoarr</name>
  		<replaceName>PeriodInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>periodinfoarr_size</name>
  		<replaceName>PeriodInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengePeriodInfo& periodinfoarr(int index) const;
  inline ::pb::TCrossChallengePeriodInfo* mutable_periodinfoarr(int index);
  inline ::pb::TCrossChallengePeriodInfo* add_periodinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengePeriodInfo >&
      periodinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengePeriodInfo >*
      mutable_periodinfoarr();

  // repeated .pb.TCrossChallengeUserInfo UserArr = 3;
  inline int userarr_size() const;
  inline void clear_userarr();
  static const int kUserArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetChallengeUserInfoRsp</name>
  	<Function>
  		<name>userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userarr_size</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengeUserInfo& userarr(int index) const;
  inline ::pb::TCrossChallengeUserInfo* mutable_userarr(int index);
  inline ::pb::TCrossChallengeUserInfo* add_userarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeUserInfo >&
      userarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeUserInfo >*
      mutable_userarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeGetChallengeUserInfoRsp)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengePeriodInfo > periodinfoarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeUserInfo > userarr_;
  ::google::protobuf::uint32 teamid_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeGetChallengeUserInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeGetCurrentPeriodInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeGetCurrentPeriodInfoRsp : public ::google::protobuf::Message {
 public:
  TCrossChallengeGetCurrentPeriodInfoRsp();
  virtual ~TCrossChallengeGetCurrentPeriodInfoRsp();

  TCrossChallengeGetCurrentPeriodInfoRsp(const TCrossChallengeGetCurrentPeriodInfoRsp& from);

  inline TCrossChallengeGetCurrentPeriodInfoRsp& operator=(const TCrossChallengeGetCurrentPeriodInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeGetCurrentPeriodInfoRsp& default_instance();

  void Swap(TCrossChallengeGetCurrentPeriodInfoRsp* other);

  // implements Message ----------------------------------------------

  TCrossChallengeGetCurrentPeriodInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeGetCurrentPeriodInfoRsp& from);
  void MergeFrom(const TCrossChallengeGetCurrentPeriodInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TCrossChallengePeriodInfo PeriodInfo = 1;
  inline bool has_periodinfo() const;
  inline void clear_periodinfo();
  static const int kPeriodInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetCurrentPeriodInfoRsp</name>
  	<Function>
  		<name>periodinfo</name>
  		<replaceName>PeriodInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_periodinfo</name>
  		<replaceName>PeriodInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_periodinfo</name>
  		<replaceName>PeriodInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_periodinfo</name>
  		<replaceName>PeriodInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengePeriodInfo& periodinfo() const;
  inline ::pb::TCrossChallengePeriodInfo* mutable_periodinfo();
  inline ::pb::TCrossChallengePeriodInfo* release_periodinfo();
  inline void set_allocated_periodinfo(::pb::TCrossChallengePeriodInfo* periodinfo);

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeGetCurrentPeriodInfoRsp)
 private:
  inline void set_has_periodinfo();
  inline void clear_has_periodinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TCrossChallengePeriodInfo* periodinfo_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeGetCurrentPeriodInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeFormationInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeFormationInfo : public ::google::protobuf::Message {
 public:
  TCrossChallengeFormationInfo();
  virtual ~TCrossChallengeFormationInfo();

  TCrossChallengeFormationInfo(const TCrossChallengeFormationInfo& from);

  inline TCrossChallengeFormationInfo& operator=(const TCrossChallengeFormationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeFormationInfo& default_instance();

  void Swap(TCrossChallengeFormationInfo* other);

  // implements Message ----------------------------------------------

  TCrossChallengeFormationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeFormationInfo& from);
  void MergeFrom(const TCrossChallengeFormationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FormationId = 1;
  inline bool has_formationid() const;
  inline void clear_formationid();
  static const int kFormationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeFormationInfo</name>
  	<Function>
  		<name>formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 formationid() const;
  inline void set_formationid(::google::protobuf::uint32 value);

  // repeated .pb.TCrossChallengeBattleHeroStatus UnitArr = 2;
  inline int unitarr_size() const;
  inline void clear_unitarr();
  static const int kUnitArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeFormationInfo</name>
  	<Function>
  		<name>unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unitarr_size</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengeBattleHeroStatus& unitarr(int index) const;
  inline ::pb::TCrossChallengeBattleHeroStatus* mutable_unitarr(int index);
  inline ::pb::TCrossChallengeBattleHeroStatus* add_unitarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleHeroStatus >&
      unitarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleHeroStatus >*
      mutable_unitarr();

  // optional uint64 FightForce = 3;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeFormationInfo</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeFormationInfo)
 private:
  inline void set_has_formationid();
  inline void clear_has_formationid();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleHeroStatus > unitarr_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint32 formationid_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeFormationInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeGetFormationReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeGetFormationReq : public ::google::protobuf::Message {
 public:
  TCrossChallengeGetFormationReq();
  virtual ~TCrossChallengeGetFormationReq();

  TCrossChallengeGetFormationReq(const TCrossChallengeGetFormationReq& from);

  inline TCrossChallengeGetFormationReq& operator=(const TCrossChallengeGetFormationReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeGetFormationReq& default_instance();

  void Swap(TCrossChallengeGetFormationReq* other);

  // implements Message ----------------------------------------------

  TCrossChallengeGetFormationReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeGetFormationReq& from);
  void MergeFrom(const TCrossChallengeGetFormationReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EChallengeStep Step = 1;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetFormationReq</name>
  	<Function>
  		<name>step</name>
  		<replaceName>Step</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_step</name>
  		<replaceName>Step</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_step</name>
  		<replaceName>Step</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EChallengeStep step() const;
  inline void set_step(::pb::EChallengeStep value);

  // optional uint64 Uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetFormationReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeGetFormationReq)
 private:
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  int step_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeGetFormationReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeGetFormationRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeGetFormationRsp : public ::google::protobuf::Message {
 public:
  TCrossChallengeGetFormationRsp();
  virtual ~TCrossChallengeGetFormationRsp();

  TCrossChallengeGetFormationRsp(const TCrossChallengeGetFormationRsp& from);

  inline TCrossChallengeGetFormationRsp& operator=(const TCrossChallengeGetFormationRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeGetFormationRsp& default_instance();

  void Swap(TCrossChallengeGetFormationRsp* other);

  // implements Message ----------------------------------------------

  TCrossChallengeGetFormationRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeGetFormationRsp& from);
  void MergeFrom(const TCrossChallengeGetFormationRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Uname = 1;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetFormationRsp</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional uint64 FightForce = 2;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetFormationRsp</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // repeated .pb.TCrossChallengeFormationInfo FormationArr = 3;
  inline int formationarr_size() const;
  inline void clear_formationarr();
  static const int kFormationArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetFormationRsp</name>
  	<Function>
  		<name>formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>formationarr_size</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengeFormationInfo& formationarr(int index) const;
  inline ::pb::TCrossChallengeFormationInfo* mutable_formationarr(int index);
  inline ::pb::TCrossChallengeFormationInfo* add_formationarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeFormationInfo >&
      formationarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeFormationInfo >*
      mutable_formationarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeGetFormationRsp)
 private:
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* uname_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeFormationInfo > formationarr_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeGetFormationRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeSetFormationReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeSetFormationReq : public ::google::protobuf::Message {
 public:
  TCrossChallengeSetFormationReq();
  virtual ~TCrossChallengeSetFormationReq();

  TCrossChallengeSetFormationReq(const TCrossChallengeSetFormationReq& from);

  inline TCrossChallengeSetFormationReq& operator=(const TCrossChallengeSetFormationReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeSetFormationReq& default_instance();

  void Swap(TCrossChallengeSetFormationReq* other);

  // implements Message ----------------------------------------------

  TCrossChallengeSetFormationReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeSetFormationReq& from);
  void MergeFrom(const TCrossChallengeSetFormationReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossChallengeFormationInfo FormationArr = 1;
  inline int formationarr_size() const;
  inline void clear_formationarr();
  static const int kFormationArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeSetFormationReq</name>
  	<Function>
  		<name>formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>formationarr_size</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengeFormationInfo& formationarr(int index) const;
  inline ::pb::TCrossChallengeFormationInfo* mutable_formationarr(int index);
  inline ::pb::TCrossChallengeFormationInfo* add_formationarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeFormationInfo >&
      formationarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeFormationInfo >*
      mutable_formationarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeSetFormationReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeFormationInfo > formationarr_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeSetFormationReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeBattleHeroStatus</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeBattleHeroStatus : public ::google::protobuf::Message {
 public:
  TCrossChallengeBattleHeroStatus();
  virtual ~TCrossChallengeBattleHeroStatus();

  TCrossChallengeBattleHeroStatus(const TCrossChallengeBattleHeroStatus& from);

  inline TCrossChallengeBattleHeroStatus& operator=(const TCrossChallengeBattleHeroStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeBattleHeroStatus& default_instance();

  void Swap(TCrossChallengeBattleHeroStatus* other);

  // implements Message ----------------------------------------------

  TCrossChallengeBattleHeroStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeBattleHeroStatus& from);
  void MergeFrom(const TCrossChallengeBattleHeroStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Htid = 1;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeBattleHeroStatus</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // optional uint32 Pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeBattleHeroStatus</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 IsKilled = 3;
  inline bool has_iskilled() const;
  inline void clear_iskilled();
  static const int kIsKilledFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeBattleHeroStatus</name>
  	<Function>
  		<name>iskilled</name>
  		<replaceName>IsKilled</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iskilled</name>
  		<replaceName>IsKilled</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iskilled</name>
  		<replaceName>IsKilled</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 iskilled() const;
  inline void set_iskilled(::google::protobuf::uint32 value);

  // optional uint32 Level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeBattleHeroStatus</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 StarLv = 5;
  inline bool has_starlv() const;
  inline void clear_starlv();
  static const int kStarLvFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeBattleHeroStatus</name>
  	<Function>
  		<name>starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 starlv() const;
  inline void set_starlv(::google::protobuf::uint32 value);

  // optional uint32 Hid = 6;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeBattleHeroStatus</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeBattleHeroStatus)
 private:
  inline void set_has_htid();
  inline void clear_has_htid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_iskilled();
  inline void clear_has_iskilled();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_starlv();
  inline void clear_has_starlv();
  inline void set_has_hid();
  inline void clear_has_hid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 htid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 iskilled_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 starlv_;
  ::google::protobuf::uint32 hid_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeBattleHeroStatus* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeBattleSingle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeBattleSingle : public ::google::protobuf::Message {
 public:
  TCrossChallengeBattleSingle();
  virtual ~TCrossChallengeBattleSingle();

  TCrossChallengeBattleSingle(const TCrossChallengeBattleSingle& from);

  inline TCrossChallengeBattleSingle& operator=(const TCrossChallengeBattleSingle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeBattleSingle& default_instance();

  void Swap(TCrossChallengeBattleSingle* other);

  // implements Message ----------------------------------------------

  TCrossChallengeBattleSingle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeBattleSingle& from);
  void MergeFrom(const TCrossChallengeBattleSingle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FormationId = 1;
  inline bool has_formationid() const;
  inline void clear_formationid();
  static const int kFormationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeBattleSingle</name>
  	<Function>
  		<name>formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 formationid() const;
  inline void set_formationid(::google::protobuf::uint32 value);

  // repeated .pb.TCrossChallengeBattleHeroStatus AtkHeroInfoArr = 2;
  inline int atkheroinfoarr_size() const;
  inline void clear_atkheroinfoarr();
  static const int kAtkHeroInfoArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeBattleSingle</name>
  	<Function>
  		<name>atkheroinfoarr</name>
  		<replaceName>AtkHeroInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_atkheroinfoarr</name>
  		<replaceName>AtkHeroInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_atkheroinfoarr</name>
  		<replaceName>AtkHeroInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkheroinfoarr</name>
  		<replaceName>AtkHeroInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>atkheroinfoarr_size</name>
  		<replaceName>AtkHeroInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengeBattleHeroStatus& atkheroinfoarr(int index) const;
  inline ::pb::TCrossChallengeBattleHeroStatus* mutable_atkheroinfoarr(int index);
  inline ::pb::TCrossChallengeBattleHeroStatus* add_atkheroinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleHeroStatus >&
      atkheroinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleHeroStatus >*
      mutable_atkheroinfoarr();

  // repeated .pb.TCrossChallengeBattleHeroStatus DefHeroInfoArr = 3;
  inline int defheroinfoarr_size() const;
  inline void clear_defheroinfoarr();
  static const int kDefHeroInfoArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeBattleSingle</name>
  	<Function>
  		<name>defheroinfoarr</name>
  		<replaceName>DefHeroInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_defheroinfoarr</name>
  		<replaceName>DefHeroInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_defheroinfoarr</name>
  		<replaceName>DefHeroInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defheroinfoarr</name>
  		<replaceName>DefHeroInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>defheroinfoarr_size</name>
  		<replaceName>DefHeroInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengeBattleHeroStatus& defheroinfoarr(int index) const;
  inline ::pb::TCrossChallengeBattleHeroStatus* mutable_defheroinfoarr(int index);
  inline ::pb::TCrossChallengeBattleHeroStatus* add_defheroinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleHeroStatus >&
      defheroinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleHeroStatus >*
      mutable_defheroinfoarr();

  // optional uint32 IsAtkWin = 4;
  inline bool has_isatkwin() const;
  inline void clear_isatkwin();
  static const int kIsAtkWinFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeBattleSingle</name>
  	<Function>
  		<name>isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isatkwin() const;
  inline void set_isatkwin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeBattleSingle)
 private:
  inline void set_has_formationid();
  inline void clear_has_formationid();
  inline void set_has_isatkwin();
  inline void clear_has_isatkwin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleHeroStatus > atkheroinfoarr_;
  ::google::protobuf::uint32 formationid_;
  ::google::protobuf::uint32 isatkwin_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleHeroStatus > defheroinfoarr_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeBattleSingle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeGetBattleInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeGetBattleInfoReq : public ::google::protobuf::Message {
 public:
  TCrossChallengeGetBattleInfoReq();
  virtual ~TCrossChallengeGetBattleInfoReq();

  TCrossChallengeGetBattleInfoReq(const TCrossChallengeGetBattleInfoReq& from);

  inline TCrossChallengeGetBattleInfoReq& operator=(const TCrossChallengeGetBattleInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeGetBattleInfoReq& default_instance();

  void Swap(TCrossChallengeGetBattleInfoReq* other);

  // implements Message ----------------------------------------------

  TCrossChallengeGetBattleInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeGetBattleInfoReq& from);
  void MergeFrom(const TCrossChallengeGetBattleInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 RidArr = 1;
  inline int ridarr_size() const;
  inline void clear_ridarr();
  static const int kRidArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetBattleInfoReq</name>
  	<Function>
  		<name>ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>ridarr_size</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 ridarr(int index) const;
  inline void set_ridarr(int index, ::google::protobuf::uint64 value);
  inline void add_ridarr(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      ridarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_ridarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeGetBattleInfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > ridarr_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeGetBattleInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeGetBattleInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeGetBattleInfoRsp : public ::google::protobuf::Message {
 public:
  TCrossChallengeGetBattleInfoRsp();
  virtual ~TCrossChallengeGetBattleInfoRsp();

  TCrossChallengeGetBattleInfoRsp(const TCrossChallengeGetBattleInfoRsp& from);

  inline TCrossChallengeGetBattleInfoRsp& operator=(const TCrossChallengeGetBattleInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeGetBattleInfoRsp& default_instance();

  void Swap(TCrossChallengeGetBattleInfoRsp* other);

  // implements Message ----------------------------------------------

  TCrossChallengeGetBattleInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeGetBattleInfoRsp& from);
  void MergeFrom(const TCrossChallengeGetBattleInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TCrossChallengeUserInfo AtkUserInfo = 1;
  inline bool has_atkuserinfo() const;
  inline void clear_atkuserinfo();
  static const int kAtkUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetBattleInfoRsp</name>
  	<Function>
  		<name>atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengeUserInfo& atkuserinfo() const;
  inline ::pb::TCrossChallengeUserInfo* mutable_atkuserinfo();
  inline ::pb::TCrossChallengeUserInfo* release_atkuserinfo();
  inline void set_allocated_atkuserinfo(::pb::TCrossChallengeUserInfo* atkuserinfo);

  // optional .pb.TCrossChallengeUserInfo DefUserInfo = 2;
  inline bool has_defuserinfo() const;
  inline void clear_defuserinfo();
  static const int kDefUserInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetBattleInfoRsp</name>
  	<Function>
  		<name>defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengeUserInfo& defuserinfo() const;
  inline ::pb::TCrossChallengeUserInfo* mutable_defuserinfo();
  inline ::pb::TCrossChallengeUserInfo* release_defuserinfo();
  inline void set_allocated_defuserinfo(::pb::TCrossChallengeUserInfo* defuserinfo);

  // repeated .pb.TCrossChallengeBattleSingle BattleInfoArr = 3;
  inline int battleinfoarr_size() const;
  inline void clear_battleinfoarr();
  static const int kBattleInfoArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetBattleInfoRsp</name>
  	<Function>
  		<name>battleinfoarr</name>
  		<replaceName>BattleInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_battleinfoarr</name>
  		<replaceName>BattleInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_battleinfoarr</name>
  		<replaceName>BattleInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleinfoarr</name>
  		<replaceName>BattleInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>battleinfoarr_size</name>
  		<replaceName>BattleInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengeBattleSingle& battleinfoarr(int index) const;
  inline ::pb::TCrossChallengeBattleSingle* mutable_battleinfoarr(int index);
  inline ::pb::TCrossChallengeBattleSingle* add_battleinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleSingle >&
      battleinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleSingle >*
      mutable_battleinfoarr();

  // optional uint64 AtkFightForce = 4;
  inline bool has_atkfightforce() const;
  inline void clear_atkfightforce();
  static const int kAtkFightForceFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetBattleInfoRsp</name>
  	<Function>
  		<name>atkfightforce</name>
  		<replaceName>AtkFightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkfightforce</name>
  		<replaceName>AtkFightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkfightforce</name>
  		<replaceName>AtkFightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 atkfightforce() const;
  inline void set_atkfightforce(::google::protobuf::uint64 value);

  // optional uint64 DefFightForce = 5;
  inline bool has_deffightforce() const;
  inline void clear_deffightforce();
  static const int kDefFightForceFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetBattleInfoRsp</name>
  	<Function>
  		<name>deffightforce</name>
  		<replaceName>DefFightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_deffightforce</name>
  		<replaceName>DefFightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_deffightforce</name>
  		<replaceName>DefFightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 deffightforce() const;
  inline void set_deffightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeGetBattleInfoRsp)
 private:
  inline void set_has_atkuserinfo();
  inline void clear_has_atkuserinfo();
  inline void set_has_defuserinfo();
  inline void clear_has_defuserinfo();
  inline void set_has_atkfightforce();
  inline void clear_has_atkfightforce();
  inline void set_has_deffightforce();
  inline void clear_has_deffightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TCrossChallengeUserInfo* atkuserinfo_;
  ::pb::TCrossChallengeUserInfo* defuserinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleSingle > battleinfoarr_;
  ::google::protobuf::uint64 atkfightforce_;
  ::google::protobuf::uint64 deffightforce_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeGetBattleInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeGetBattleReportReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeGetBattleReportReq : public ::google::protobuf::Message {
 public:
  TCrossChallengeGetBattleReportReq();
  virtual ~TCrossChallengeGetBattleReportReq();

  TCrossChallengeGetBattleReportReq(const TCrossChallengeGetBattleReportReq& from);

  inline TCrossChallengeGetBattleReportReq& operator=(const TCrossChallengeGetBattleReportReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeGetBattleReportReq& default_instance();

  void Swap(TCrossChallengeGetBattleReportReq* other);

  // implements Message ----------------------------------------------

  TCrossChallengeGetBattleReportReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeGetBattleReportReq& from);
  void MergeFrom(const TCrossChallengeGetBattleReportReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 RidArr = 1;
  inline int ridarr_size() const;
  inline void clear_ridarr();
  static const int kRidArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetBattleReportReq</name>
  	<Function>
  		<name>ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>ridarr_size</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 ridarr(int index) const;
  inline void set_ridarr(int index, ::google::protobuf::uint64 value);
  inline void add_ridarr(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      ridarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_ridarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeGetBattleReportReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > ridarr_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeGetBattleReportReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeGetBattleReportRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeGetBattleReportRsp : public ::google::protobuf::Message {
 public:
  TCrossChallengeGetBattleReportRsp();
  virtual ~TCrossChallengeGetBattleReportRsp();

  TCrossChallengeGetBattleReportRsp(const TCrossChallengeGetBattleReportRsp& from);

  inline TCrossChallengeGetBattleReportRsp& operator=(const TCrossChallengeGetBattleReportRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeGetBattleReportRsp& default_instance();

  void Swap(TCrossChallengeGetBattleReportRsp* other);

  // implements Message ----------------------------------------------

  TCrossChallengeGetBattleReportRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeGetBattleReportRsp& from);
  void MergeFrom(const TCrossChallengeGetBattleReportRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes Result = 1;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetBattleReportRsp</name>
  	<Function>
  		<name>result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_result</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>result_size</name>
  		<replaceName>Result</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& result(int index) const;
  inline ::std::string* mutable_result(int index);
  inline void set_result(int index, const ::std::string& value);
  inline void set_result(int index, const char* value);
  inline void set_result(int index, const void* value, size_t size);
  inline ::std::string* add_result();
  inline void add_result(const ::std::string& value);
  inline void add_result(const char* value);
  inline void add_result(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& result() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_result();

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeGetBattleReportRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> result_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeGetBattleReportRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeGetRankRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeGetRankRewardReq : public ::google::protobuf::Message {
 public:
  TCrossChallengeGetRankRewardReq();
  virtual ~TCrossChallengeGetRankRewardReq();

  TCrossChallengeGetRankRewardReq(const TCrossChallengeGetRankRewardReq& from);

  inline TCrossChallengeGetRankRewardReq& operator=(const TCrossChallengeGetRankRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeGetRankRewardReq& default_instance();

  void Swap(TCrossChallengeGetRankRewardReq* other);

  // implements Message ----------------------------------------------

  TCrossChallengeGetRankRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeGetRankRewardReq& from);
  void MergeFrom(const TCrossChallengeGetRankRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RankId = 1;
  inline bool has_rankid() const;
  inline void clear_rankid();
  static const int kRankIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetRankRewardReq</name>
  	<Function>
  		<name>rankid</name>
  		<replaceName>RankId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rankid</name>
  		<replaceName>RankId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankid</name>
  		<replaceName>RankId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rankid() const;
  inline void set_rankid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeGetRankRewardReq)
 private:
  inline void set_has_rankid();
  inline void clear_has_rankid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rankid_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeGetRankRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeGetRankRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeGetRankRewardRsp : public ::google::protobuf::Message {
 public:
  TCrossChallengeGetRankRewardRsp();
  virtual ~TCrossChallengeGetRankRewardRsp();

  TCrossChallengeGetRankRewardRsp(const TCrossChallengeGetRankRewardRsp& from);

  inline TCrossChallengeGetRankRewardRsp& operator=(const TCrossChallengeGetRankRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeGetRankRewardRsp& default_instance();

  void Swap(TCrossChallengeGetRankRewardRsp* other);

  // implements Message ----------------------------------------------

  TCrossChallengeGetRankRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeGetRankRewardRsp& from);
  void MergeFrom(const TCrossChallengeGetRankRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetRankRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeGetRankRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeGetRankRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeReportSimpleInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeReportSimpleInfo : public ::google::protobuf::Message {
 public:
  TCrossChallengeReportSimpleInfo();
  virtual ~TCrossChallengeReportSimpleInfo();

  TCrossChallengeReportSimpleInfo(const TCrossChallengeReportSimpleInfo& from);

  inline TCrossChallengeReportSimpleInfo& operator=(const TCrossChallengeReportSimpleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeReportSimpleInfo& default_instance();

  void Swap(TCrossChallengeReportSimpleInfo* other);

  // implements Message ----------------------------------------------

  TCrossChallengeReportSimpleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeReportSimpleInfo& from);
  void MergeFrom(const TCrossChallengeReportSimpleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 RidArr = 1;
  inline int ridarr_size() const;
  inline void clear_ridarr();
  static const int kRidArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeReportSimpleInfo</name>
  	<Function>
  		<name>ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>ridarr_size</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 ridarr(int index) const;
  inline void set_ridarr(int index, ::google::protobuf::uint64 value);
  inline void add_ridarr(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      ridarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_ridarr();

  // optional .pb.TCrossChallengeUserInfo EnemyUserInfo = 2;
  inline bool has_enemyuserinfo() const;
  inline void clear_enemyuserinfo();
  static const int kEnemyUserInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeReportSimpleInfo</name>
  	<Function>
  		<name>enemyuserinfo</name>
  		<replaceName>EnemyUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyuserinfo</name>
  		<replaceName>EnemyUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_enemyuserinfo</name>
  		<replaceName>EnemyUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyuserinfo</name>
  		<replaceName>EnemyUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengeUserInfo& enemyuserinfo() const;
  inline ::pb::TCrossChallengeUserInfo* mutable_enemyuserinfo();
  inline ::pb::TCrossChallengeUserInfo* release_enemyuserinfo();
  inline void set_allocated_enemyuserinfo(::pb::TCrossChallengeUserInfo* enemyuserinfo);

  // optional uint32 IsWin = 3;
  inline bool has_iswin() const;
  inline void clear_iswin();
  static const int kIsWinFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeReportSimpleInfo</name>
  	<Function>
  		<name>iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 iswin() const;
  inline void set_iswin(::google::protobuf::uint32 value);

  // optional uint64 FightForce = 4;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeReportSimpleInfo</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeReportSimpleInfo)
 private:
  inline void set_has_enemyuserinfo();
  inline void clear_has_enemyuserinfo();
  inline void set_has_iswin();
  inline void clear_has_iswin();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > ridarr_;
  ::pb::TCrossChallengeUserInfo* enemyuserinfo_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint32 iswin_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeReportSimpleInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeGetAuditionReportArrRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeGetAuditionReportArrRsp : public ::google::protobuf::Message {
 public:
  TCrossChallengeGetAuditionReportArrRsp();
  virtual ~TCrossChallengeGetAuditionReportArrRsp();

  TCrossChallengeGetAuditionReportArrRsp(const TCrossChallengeGetAuditionReportArrRsp& from);

  inline TCrossChallengeGetAuditionReportArrRsp& operator=(const TCrossChallengeGetAuditionReportArrRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeGetAuditionReportArrRsp& default_instance();

  void Swap(TCrossChallengeGetAuditionReportArrRsp* other);

  // implements Message ----------------------------------------------

  TCrossChallengeGetAuditionReportArrRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeGetAuditionReportArrRsp& from);
  void MergeFrom(const TCrossChallengeGetAuditionReportArrRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossChallengeReportSimpleInfo ReportArr = 1;
  inline int reportarr_size() const;
  inline void clear_reportarr();
  static const int kReportArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetAuditionReportArrRsp</name>
  	<Function>
  		<name>reportarr</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_reportarr</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_reportarr</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reportarr</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>reportarr_size</name>
  		<replaceName>ReportArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengeReportSimpleInfo& reportarr(int index) const;
  inline ::pb::TCrossChallengeReportSimpleInfo* mutable_reportarr(int index);
  inline ::pb::TCrossChallengeReportSimpleInfo* add_reportarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeReportSimpleInfo >&
      reportarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeReportSimpleInfo >*
      mutable_reportarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeGetAuditionReportArrRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeReportSimpleInfo > reportarr_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeGetAuditionReportArrRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeGuessInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeGuessInfo : public ::google::protobuf::Message {
 public:
  TCrossChallengeGuessInfo();
  virtual ~TCrossChallengeGuessInfo();

  TCrossChallengeGuessInfo(const TCrossChallengeGuessInfo& from);

  inline TCrossChallengeGuessInfo& operator=(const TCrossChallengeGuessInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeGuessInfo& default_instance();

  void Swap(TCrossChallengeGuessInfo* other);

  // implements Message ----------------------------------------------

  TCrossChallengeGuessInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeGuessInfo& from);
  void MergeFrom(const TCrossChallengeGuessInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EChallengeStep Step = 1;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGuessInfo</name>
  	<Function>
  		<name>step</name>
  		<replaceName>Step</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_step</name>
  		<replaceName>Step</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_step</name>
  		<replaceName>Step</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EChallengeStep step() const;
  inline void set_step(::pb::EChallengeStep value);

  // repeated uint64 RidArr = 2;
  inline int ridarr_size() const;
  inline void clear_ridarr();
  static const int kRidArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGuessInfo</name>
  	<Function>
  		<name>ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>ridarr_size</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 ridarr(int index) const;
  inline void set_ridarr(int index, ::google::protobuf::uint64 value);
  inline void add_ridarr(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      ridarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_ridarr();

  // optional .pb.TCrossChallengeBattleInfo AtkInfo = 3;
  inline bool has_atkinfo() const;
  inline void clear_atkinfo();
  static const int kAtkInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGuessInfo</name>
  	<Function>
  		<name>atkinfo</name>
  		<replaceName>AtkInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkinfo</name>
  		<replaceName>AtkInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_atkinfo</name>
  		<replaceName>AtkInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkinfo</name>
  		<replaceName>AtkInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengeBattleInfo& atkinfo() const;
  inline ::pb::TCrossChallengeBattleInfo* mutable_atkinfo();
  inline ::pb::TCrossChallengeBattleInfo* release_atkinfo();
  inline void set_allocated_atkinfo(::pb::TCrossChallengeBattleInfo* atkinfo);

  // optional .pb.TCrossChallengeBattleInfo DefInfo = 4;
  inline bool has_definfo() const;
  inline void clear_definfo();
  static const int kDefInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGuessInfo</name>
  	<Function>
  		<name>definfo</name>
  		<replaceName>DefInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_definfo</name>
  		<replaceName>DefInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_definfo</name>
  		<replaceName>DefInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_definfo</name>
  		<replaceName>DefInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengeBattleInfo& definfo() const;
  inline ::pb::TCrossChallengeBattleInfo* mutable_definfo();
  inline ::pb::TCrossChallengeBattleInfo* release_definfo();
  inline void set_allocated_definfo(::pb::TCrossChallengeBattleInfo* definfo);

  // optional .pb.TCrossChallengeUserInfo AtkUser = 5;
  inline bool has_atkuser() const;
  inline void clear_atkuser();
  static const int kAtkUserFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGuessInfo</name>
  	<Function>
  		<name>atkuser</name>
  		<replaceName>AtkUser</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkuser</name>
  		<replaceName>AtkUser</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_atkuser</name>
  		<replaceName>AtkUser</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkuser</name>
  		<replaceName>AtkUser</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengeUserInfo& atkuser() const;
  inline ::pb::TCrossChallengeUserInfo* mutable_atkuser();
  inline ::pb::TCrossChallengeUserInfo* release_atkuser();
  inline void set_allocated_atkuser(::pb::TCrossChallengeUserInfo* atkuser);

  // optional .pb.TCrossChallengeUserInfo DefUser = 6;
  inline bool has_defuser() const;
  inline void clear_defuser();
  static const int kDefUserFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGuessInfo</name>
  	<Function>
  		<name>defuser</name>
  		<replaceName>DefUser</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defuser</name>
  		<replaceName>DefUser</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_defuser</name>
  		<replaceName>DefUser</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defuser</name>
  		<replaceName>DefUser</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengeUserInfo& defuser() const;
  inline ::pb::TCrossChallengeUserInfo* mutable_defuser();
  inline ::pb::TCrossChallengeUserInfo* release_defuser();
  inline void set_allocated_defuser(::pb::TCrossChallengeUserInfo* defuser);

  // optional .pb.EChallengeGuessStatus GuessStatus = 7;
  inline bool has_guessstatus() const;
  inline void clear_guessstatus();
  static const int kGuessStatusFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGuessInfo</name>
  	<Function>
  		<name>guessstatus</name>
  		<replaceName>GuessStatus</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guessstatus</name>
  		<replaceName>GuessStatus</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guessstatus</name>
  		<replaceName>GuessStatus</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EChallengeGuessStatus guessstatus() const;
  inline void set_guessstatus(::pb::EChallengeGuessStatus value);

  // optional uint32 AtkBetNum = 8;
  inline bool has_atkbetnum() const;
  inline void clear_atkbetnum();
  static const int kAtkBetNumFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGuessInfo</name>
  	<Function>
  		<name>atkbetnum</name>
  		<replaceName>AtkBetNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkbetnum</name>
  		<replaceName>AtkBetNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkbetnum</name>
  		<replaceName>AtkBetNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 atkbetnum() const;
  inline void set_atkbetnum(::google::protobuf::uint32 value);

  // optional uint32 DefBetNum = 9;
  inline bool has_defbetnum() const;
  inline void clear_defbetnum();
  static const int kDefBetNumFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGuessInfo</name>
  	<Function>
  		<name>defbetnum</name>
  		<replaceName>DefBetNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defbetnum</name>
  		<replaceName>DefBetNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defbetnum</name>
  		<replaceName>DefBetNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 defbetnum() const;
  inline void set_defbetnum(::google::protobuf::uint32 value);

  // optional uint32 IsReward = 10;
  inline bool has_isreward() const;
  inline void clear_isreward();
  static const int kIsRewardFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGuessInfo</name>
  	<Function>
  		<name>isreward</name>
  		<replaceName>IsReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isreward</name>
  		<replaceName>IsReward</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isreward</name>
  		<replaceName>IsReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isreward() const;
  inline void set_isreward(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeGuessInfo)
 private:
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_atkinfo();
  inline void clear_has_atkinfo();
  inline void set_has_definfo();
  inline void clear_has_definfo();
  inline void set_has_atkuser();
  inline void clear_has_atkuser();
  inline void set_has_defuser();
  inline void clear_has_defuser();
  inline void set_has_guessstatus();
  inline void clear_has_guessstatus();
  inline void set_has_atkbetnum();
  inline void clear_has_atkbetnum();
  inline void set_has_defbetnum();
  inline void clear_has_defbetnum();
  inline void set_has_isreward();
  inline void clear_has_isreward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > ridarr_;
  ::pb::TCrossChallengeBattleInfo* atkinfo_;
  ::pb::TCrossChallengeBattleInfo* definfo_;
  int step_;
  int guessstatus_;
  ::pb::TCrossChallengeUserInfo* atkuser_;
  ::pb::TCrossChallengeUserInfo* defuser_;
  ::google::protobuf::uint32 atkbetnum_;
  ::google::protobuf::uint32 defbetnum_;
  ::google::protobuf::uint32 isreward_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeGuessInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeGetGuessInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeGetGuessInfoRsp : public ::google::protobuf::Message {
 public:
  TCrossChallengeGetGuessInfoRsp();
  virtual ~TCrossChallengeGetGuessInfoRsp();

  TCrossChallengeGetGuessInfoRsp(const TCrossChallengeGetGuessInfoRsp& from);

  inline TCrossChallengeGetGuessInfoRsp& operator=(const TCrossChallengeGetGuessInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeGetGuessInfoRsp& default_instance();

  void Swap(TCrossChallengeGetGuessInfoRsp* other);

  // implements Message ----------------------------------------------

  TCrossChallengeGetGuessInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeGetGuessInfoRsp& from);
  void MergeFrom(const TCrossChallengeGetGuessInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossChallengeGuessInfo GuessArr = 1;
  inline int guessarr_size() const;
  inline void clear_guessarr();
  static const int kGuessArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetGuessInfoRsp</name>
  	<Function>
  		<name>guessarr</name>
  		<replaceName>GuessArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_guessarr</name>
  		<replaceName>GuessArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_guessarr</name>
  		<replaceName>GuessArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guessarr</name>
  		<replaceName>GuessArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>guessarr_size</name>
  		<replaceName>GuessArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengeGuessInfo& guessarr(int index) const;
  inline ::pb::TCrossChallengeGuessInfo* mutable_guessarr(int index);
  inline ::pb::TCrossChallengeGuessInfo* add_guessarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeGuessInfo >&
      guessarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeGuessInfo >*
      mutable_guessarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeGetGuessInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeGuessInfo > guessarr_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeGetGuessInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeGetCurrentGuessInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeGetCurrentGuessInfoRsp : public ::google::protobuf::Message {
 public:
  TCrossChallengeGetCurrentGuessInfoRsp();
  virtual ~TCrossChallengeGetCurrentGuessInfoRsp();

  TCrossChallengeGetCurrentGuessInfoRsp(const TCrossChallengeGetCurrentGuessInfoRsp& from);

  inline TCrossChallengeGetCurrentGuessInfoRsp& operator=(const TCrossChallengeGetCurrentGuessInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeGetCurrentGuessInfoRsp& default_instance();

  void Swap(TCrossChallengeGetCurrentGuessInfoRsp* other);

  // implements Message ----------------------------------------------

  TCrossChallengeGetCurrentGuessInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeGetCurrentGuessInfoRsp& from);
  void MergeFrom(const TCrossChallengeGetCurrentGuessInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TCrossChallengeGuessInfo GuessInfo = 1;
  inline bool has_guessinfo() const;
  inline void clear_guessinfo();
  static const int kGuessInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetCurrentGuessInfoRsp</name>
  	<Function>
  		<name>guessinfo</name>
  		<replaceName>GuessInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guessinfo</name>
  		<replaceName>GuessInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_guessinfo</name>
  		<replaceName>GuessInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guessinfo</name>
  		<replaceName>GuessInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengeGuessInfo& guessinfo() const;
  inline ::pb::TCrossChallengeGuessInfo* mutable_guessinfo();
  inline ::pb::TCrossChallengeGuessInfo* release_guessinfo();
  inline void set_allocated_guessinfo(::pb::TCrossChallengeGuessInfo* guessinfo);

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeGetCurrentGuessInfoRsp)
 private:
  inline void set_has_guessinfo();
  inline void clear_has_guessinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TCrossChallengeGuessInfo* guessinfo_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeGetCurrentGuessInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeGuessingReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeGuessingReq : public ::google::protobuf::Message {
 public:
  TCrossChallengeGuessingReq();
  virtual ~TCrossChallengeGuessingReq();

  TCrossChallengeGuessingReq(const TCrossChallengeGuessingReq& from);

  inline TCrossChallengeGuessingReq& operator=(const TCrossChallengeGuessingReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeGuessingReq& default_instance();

  void Swap(TCrossChallengeGuessingReq* other);

  // implements Message ----------------------------------------------

  TCrossChallengeGuessingReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeGuessingReq& from);
  void MergeFrom(const TCrossChallengeGuessingReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EChallengeStep Step = 1;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGuessingReq</name>
  	<Function>
  		<name>step</name>
  		<replaceName>Step</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_step</name>
  		<replaceName>Step</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_step</name>
  		<replaceName>Step</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EChallengeStep step() const;
  inline void set_step(::pb::EChallengeStep value);

  // optional uint64 Uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGuessingReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeGuessingReq)
 private:
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  int step_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeGuessingReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeGetGuessRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeGetGuessRewardReq : public ::google::protobuf::Message {
 public:
  TCrossChallengeGetGuessRewardReq();
  virtual ~TCrossChallengeGetGuessRewardReq();

  TCrossChallengeGetGuessRewardReq(const TCrossChallengeGetGuessRewardReq& from);

  inline TCrossChallengeGetGuessRewardReq& operator=(const TCrossChallengeGetGuessRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeGetGuessRewardReq& default_instance();

  void Swap(TCrossChallengeGetGuessRewardReq* other);

  // implements Message ----------------------------------------------

  TCrossChallengeGetGuessRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeGetGuessRewardReq& from);
  void MergeFrom(const TCrossChallengeGetGuessRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EChallengeStep Step = 1;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetGuessRewardReq</name>
  	<Function>
  		<name>step</name>
  		<replaceName>Step</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_step</name>
  		<replaceName>Step</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_step</name>
  		<replaceName>Step</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EChallengeStep step() const;
  inline void set_step(::pb::EChallengeStep value);

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeGetGuessRewardReq)
 private:
  inline void set_has_step();
  inline void clear_has_step();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int step_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeGetGuessRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeGetGuessRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeGetGuessRewardRsp : public ::google::protobuf::Message {
 public:
  TCrossChallengeGetGuessRewardRsp();
  virtual ~TCrossChallengeGetGuessRewardRsp();

  TCrossChallengeGetGuessRewardRsp(const TCrossChallengeGetGuessRewardRsp& from);

  inline TCrossChallengeGetGuessRewardRsp& operator=(const TCrossChallengeGetGuessRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeGetGuessRewardRsp& default_instance();

  void Swap(TCrossChallengeGetGuessRewardRsp* other);

  // implements Message ----------------------------------------------

  TCrossChallengeGetGuessRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeGetGuessRewardRsp& from);
  void MergeFrom(const TCrossChallengeGetGuessRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetGuessRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeGetGuessRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeGetGuessRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeGuessingRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeGuessingRsp : public ::google::protobuf::Message {
 public:
  TCrossChallengeGuessingRsp();
  virtual ~TCrossChallengeGuessingRsp();

  TCrossChallengeGuessingRsp(const TCrossChallengeGuessingRsp& from);

  inline TCrossChallengeGuessingRsp& operator=(const TCrossChallengeGuessingRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeGuessingRsp& default_instance();

  void Swap(TCrossChallengeGuessingRsp* other);

  // implements Message ----------------------------------------------

  TCrossChallengeGuessingRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeGuessingRsp& from);
  void MergeFrom(const TCrossChallengeGuessingRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AtkBetNum = 1;
  inline bool has_atkbetnum() const;
  inline void clear_atkbetnum();
  static const int kAtkBetNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGuessingRsp</name>
  	<Function>
  		<name>atkbetnum</name>
  		<replaceName>AtkBetNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkbetnum</name>
  		<replaceName>AtkBetNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkbetnum</name>
  		<replaceName>AtkBetNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 atkbetnum() const;
  inline void set_atkbetnum(::google::protobuf::uint32 value);

  // optional uint32 DefBetNum = 2;
  inline bool has_defbetnum() const;
  inline void clear_defbetnum();
  static const int kDefBetNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGuessingRsp</name>
  	<Function>
  		<name>defbetnum</name>
  		<replaceName>DefBetNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defbetnum</name>
  		<replaceName>DefBetNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defbetnum</name>
  		<replaceName>DefBetNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 defbetnum() const;
  inline void set_defbetnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeGuessingRsp)
 private:
  inline void set_has_atkbetnum();
  inline void clear_has_atkbetnum();
  inline void set_has_defbetnum();
  inline void clear_has_defbetnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 atkbetnum_;
  ::google::protobuf::uint32 defbetnum_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeGuessingRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeBattleArmy</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeBattleArmy : public ::google::protobuf::Message {
 public:
  TCrossChallengeBattleArmy();
  virtual ~TCrossChallengeBattleArmy();

  TCrossChallengeBattleArmy(const TCrossChallengeBattleArmy& from);

  inline TCrossChallengeBattleArmy& operator=(const TCrossChallengeBattleArmy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeBattleArmy& default_instance();

  void Swap(TCrossChallengeBattleArmy* other);

  // implements Message ----------------------------------------------

  TCrossChallengeBattleArmy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeBattleArmy& from);
  void MergeFrom(const TCrossChallengeBattleArmy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Fid = 1;
  inline bool has_fid() const;
  inline void clear_fid();
  static const int kFidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeBattleArmy</name>
  	<Function>
  		<name>fid</name>
  		<replaceName>Fid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fid</name>
  		<replaceName>Fid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fid</name>
  		<replaceName>Fid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 fid() const;
  inline void set_fid(::google::protobuf::uint32 value);

  // optional .pb.TArmyInfo ArmyInfo = 2;
  inline bool has_armyinfo() const;
  inline void clear_armyinfo();
  static const int kArmyInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeBattleArmy</name>
  	<Function>
  		<name>armyinfo</name>
  		<replaceName>ArmyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_armyinfo</name>
  		<replaceName>ArmyInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_armyinfo</name>
  		<replaceName>ArmyInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armyinfo</name>
  		<replaceName>ArmyInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArmyInfo& armyinfo() const;
  inline ::pb::TArmyInfo* mutable_armyinfo();
  inline ::pb::TArmyInfo* release_armyinfo();
  inline void set_allocated_armyinfo(::pb::TArmyInfo* armyinfo);

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeBattleArmy)
 private:
  inline void set_has_fid();
  inline void clear_has_fid();
  inline void set_has_armyinfo();
  inline void clear_has_armyinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TArmyInfo* armyinfo_;
  ::google::protobuf::uint32 fid_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeBattleArmy* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeBattleArmyArr</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeBattleArmyArr : public ::google::protobuf::Message {
 public:
  TCrossChallengeBattleArmyArr();
  virtual ~TCrossChallengeBattleArmyArr();

  TCrossChallengeBattleArmyArr(const TCrossChallengeBattleArmyArr& from);

  inline TCrossChallengeBattleArmyArr& operator=(const TCrossChallengeBattleArmyArr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeBattleArmyArr& default_instance();

  void Swap(TCrossChallengeBattleArmyArr* other);

  // implements Message ----------------------------------------------

  TCrossChallengeBattleArmyArr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeBattleArmyArr& from);
  void MergeFrom(const TCrossChallengeBattleArmyArr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeBattleArmyArr</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // repeated .pb.TCrossChallengeBattleArmy ArmyArr = 2;
  inline int armyarr_size() const;
  inline void clear_armyarr();
  static const int kArmyArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeBattleArmyArr</name>
  	<Function>
  		<name>armyarr</name>
  		<replaceName>ArmyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_armyarr</name>
  		<replaceName>ArmyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_armyarr</name>
  		<replaceName>ArmyArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armyarr</name>
  		<replaceName>ArmyArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>armyarr_size</name>
  		<replaceName>ArmyArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengeBattleArmy& armyarr(int index) const;
  inline ::pb::TCrossChallengeBattleArmy* mutable_armyarr(int index);
  inline ::pb::TCrossChallengeBattleArmy* add_armyarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleArmy >&
      armyarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleArmy >*
      mutable_armyarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeBattleArmyArr)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleArmy > armyarr_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeBattleArmyArr* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeGetUserArrFromArenaReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeGetUserArrFromArenaReq : public ::google::protobuf::Message {
 public:
  TCrossChallengeGetUserArrFromArenaReq();
  virtual ~TCrossChallengeGetUserArrFromArenaReq();

  TCrossChallengeGetUserArrFromArenaReq(const TCrossChallengeGetUserArrFromArenaReq& from);

  inline TCrossChallengeGetUserArrFromArenaReq& operator=(const TCrossChallengeGetUserArrFromArenaReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeGetUserArrFromArenaReq& default_instance();

  void Swap(TCrossChallengeGetUserArrFromArenaReq* other);

  // implements Message ----------------------------------------------

  TCrossChallengeGetUserArrFromArenaReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeGetUserArrFromArenaReq& from);
  void MergeFrom(const TCrossChallengeGetUserArrFromArenaReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetUserArrFromArenaReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeGetUserArrFromArenaReq)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeGetUserArrFromArenaReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeGetUserArrFromArenaRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeGetUserArrFromArenaRsp : public ::google::protobuf::Message {
 public:
  TCrossChallengeGetUserArrFromArenaRsp();
  virtual ~TCrossChallengeGetUserArrFromArenaRsp();

  TCrossChallengeGetUserArrFromArenaRsp(const TCrossChallengeGetUserArrFromArenaRsp& from);

  inline TCrossChallengeGetUserArrFromArenaRsp& operator=(const TCrossChallengeGetUserArrFromArenaRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeGetUserArrFromArenaRsp& default_instance();

  void Swap(TCrossChallengeGetUserArrFromArenaRsp* other);

  // implements Message ----------------------------------------------

  TCrossChallengeGetUserArrFromArenaRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeGetUserArrFromArenaRsp& from);
  void MergeFrom(const TCrossChallengeGetUserArrFromArenaRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 UidArr = 1;
  inline int uidarr_size() const;
  inline void clear_uidarr();
  static const int kUidArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetUserArrFromArenaRsp</name>
  	<Function>
  		<name>uidarr</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_uidarr</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_uidarr</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uidarr</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>uidarr_size</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uidarr(int index) const;
  inline void set_uidarr(int index, ::google::protobuf::uint64 value);
  inline void add_uidarr(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      uidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_uidarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeGetUserArrFromArenaRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > uidarr_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeGetUserArrFromArenaRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeGetBattleUserArrReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeGetBattleUserArrReq : public ::google::protobuf::Message {
 public:
  TCrossChallengeGetBattleUserArrReq();
  virtual ~TCrossChallengeGetBattleUserArrReq();

  TCrossChallengeGetBattleUserArrReq(const TCrossChallengeGetBattleUserArrReq& from);

  inline TCrossChallengeGetBattleUserArrReq& operator=(const TCrossChallengeGetBattleUserArrReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeGetBattleUserArrReq& default_instance();

  void Swap(TCrossChallengeGetBattleUserArrReq* other);

  // implements Message ----------------------------------------------

  TCrossChallengeGetBattleUserArrReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeGetBattleUserArrReq& from);
  void MergeFrom(const TCrossChallengeGetBattleUserArrReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Step = 1;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetBattleUserArrReq</name>
  	<Function>
  		<name>step</name>
  		<replaceName>Step</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_step</name>
  		<replaceName>Step</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_step</name>
  		<replaceName>Step</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 step() const;
  inline void set_step(::google::protobuf::uint32 value);

  // repeated uint64 UidArr = 2;
  inline int uidarr_size() const;
  inline void clear_uidarr();
  static const int kUidArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetBattleUserArrReq</name>
  	<Function>
  		<name>uidarr</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_uidarr</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_uidarr</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uidarr</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>uidarr_size</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uidarr(int index) const;
  inline void set_uidarr(int index, ::google::protobuf::uint64 value);
  inline void add_uidarr(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      uidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_uidarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeGetBattleUserArrReq)
 private:
  inline void set_has_step();
  inline void clear_has_step();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > uidarr_;
  ::google::protobuf::uint32 step_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeGetBattleUserArrReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeGetBattleUserArrRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeGetBattleUserArrRsp : public ::google::protobuf::Message {
 public:
  TCrossChallengeGetBattleUserArrRsp();
  virtual ~TCrossChallengeGetBattleUserArrRsp();

  TCrossChallengeGetBattleUserArrRsp(const TCrossChallengeGetBattleUserArrRsp& from);

  inline TCrossChallengeGetBattleUserArrRsp& operator=(const TCrossChallengeGetBattleUserArrRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeGetBattleUserArrRsp& default_instance();

  void Swap(TCrossChallengeGetBattleUserArrRsp* other);

  // implements Message ----------------------------------------------

  TCrossChallengeGetBattleUserArrRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeGetBattleUserArrRsp& from);
  void MergeFrom(const TCrossChallengeGetBattleUserArrRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossChallengeBattleArmyArr ChallengeArr = 1;
  inline int challengearr_size() const;
  inline void clear_challengearr();
  static const int kChallengeArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeGetBattleUserArrRsp</name>
  	<Function>
  		<name>challengearr</name>
  		<replaceName>ChallengeArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_challengearr</name>
  		<replaceName>ChallengeArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_challengearr</name>
  		<replaceName>ChallengeArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_challengearr</name>
  		<replaceName>ChallengeArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>challengearr_size</name>
  		<replaceName>ChallengeArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengeBattleArmyArr& challengearr(int index) const;
  inline ::pb::TCrossChallengeBattleArmyArr* mutable_challengearr(int index);
  inline ::pb::TCrossChallengeBattleArmyArr* add_challengearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleArmyArr >&
      challengearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleArmyArr >*
      mutable_challengearr();

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeGetBattleUserArrRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleArmyArr > challengearr_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeGetBattleUserArrRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeAuditionSingle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeAuditionSingle : public ::google::protobuf::Message {
 public:
  TCrossChallengeAuditionSingle();
  virtual ~TCrossChallengeAuditionSingle();

  TCrossChallengeAuditionSingle(const TCrossChallengeAuditionSingle& from);

  inline TCrossChallengeAuditionSingle& operator=(const TCrossChallengeAuditionSingle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeAuditionSingle& default_instance();

  void Swap(TCrossChallengeAuditionSingle* other);

  // implements Message ----------------------------------------------

  TCrossChallengeAuditionSingle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeAuditionSingle& from);
  void MergeFrom(const TCrossChallengeAuditionSingle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 RidArr = 1;
  inline int ridarr_size() const;
  inline void clear_ridarr();
  static const int kRidArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeAuditionSingle</name>
  	<Function>
  		<name>ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>ridarr_size</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 ridarr(int index) const;
  inline void set_ridarr(int index, ::google::protobuf::uint64 value);
  inline void add_ridarr(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      ridarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_ridarr();

  // optional uint64 Uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeAuditionSingle</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string ServerId = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeAuditionSingle</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // optional uint64 FightForce = 4;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeAuditionSingle</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // optional uint32 IsWin = 5;
  inline bool has_iswin() const;
  inline void clear_iswin();
  static const int kIsWinFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeAuditionSingle</name>
  	<Function>
  		<name>iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 iswin() const;
  inline void set_iswin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeAuditionSingle)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();
  inline void set_has_iswin();
  inline void clear_has_iswin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > ridarr_;
  ::google::protobuf::uint64 uid_;
  ::std::string* serverid_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint32 iswin_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeAuditionSingle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeAuditionUser</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeAuditionUser : public ::google::protobuf::Message {
 public:
  TCrossChallengeAuditionUser();
  virtual ~TCrossChallengeAuditionUser();

  TCrossChallengeAuditionUser(const TCrossChallengeAuditionUser& from);

  inline TCrossChallengeAuditionUser& operator=(const TCrossChallengeAuditionUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeAuditionUser& default_instance();

  void Swap(TCrossChallengeAuditionUser* other);

  // implements Message ----------------------------------------------

  TCrossChallengeAuditionUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeAuditionUser& from);
  void MergeFrom(const TCrossChallengeAuditionUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeAuditionUser</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 IsWin = 2;
  inline bool has_iswin() const;
  inline void clear_iswin();
  static const int kIsWinFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeAuditionUser</name>
  	<Function>
  		<name>iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 iswin() const;
  inline void set_iswin(::google::protobuf::uint32 value);

  // repeated .pb.TCrossChallengeAuditionSingle RecordArr = 3;
  inline int recordarr_size() const;
  inline void clear_recordarr();
  static const int kRecordArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeAuditionUser</name>
  	<Function>
  		<name>recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordarr_size</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengeAuditionSingle& recordarr(int index) const;
  inline ::pb::TCrossChallengeAuditionSingle* mutable_recordarr(int index);
  inline ::pb::TCrossChallengeAuditionSingle* add_recordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeAuditionSingle >&
      recordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeAuditionSingle >*
      mutable_recordarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeAuditionUser)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_iswin();
  inline void clear_has_iswin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeAuditionSingle > recordarr_;
  ::google::protobuf::uint32 iswin_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeAuditionUser* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeAuditionNotifyReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeAuditionNotifyReq : public ::google::protobuf::Message {
 public:
  TCrossChallengeAuditionNotifyReq();
  virtual ~TCrossChallengeAuditionNotifyReq();

  TCrossChallengeAuditionNotifyReq(const TCrossChallengeAuditionNotifyReq& from);

  inline TCrossChallengeAuditionNotifyReq& operator=(const TCrossChallengeAuditionNotifyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeAuditionNotifyReq& default_instance();

  void Swap(TCrossChallengeAuditionNotifyReq* other);

  // implements Message ----------------------------------------------

  TCrossChallengeAuditionNotifyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeAuditionNotifyReq& from);
  void MergeFrom(const TCrossChallengeAuditionNotifyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossChallengeAuditionUser UserRecordArr = 1;
  inline int userrecordarr_size() const;
  inline void clear_userrecordarr();
  static const int kUserRecordArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeAuditionNotifyReq</name>
  	<Function>
  		<name>userrecordarr</name>
  		<replaceName>UserRecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userrecordarr</name>
  		<replaceName>UserRecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userrecordarr</name>
  		<replaceName>UserRecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userrecordarr</name>
  		<replaceName>UserRecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userrecordarr_size</name>
  		<replaceName>UserRecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengeAuditionUser& userrecordarr(int index) const;
  inline ::pb::TCrossChallengeAuditionUser* mutable_userrecordarr(int index);
  inline ::pb::TCrossChallengeAuditionUser* add_userrecordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeAuditionUser >&
      userrecordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeAuditionUser >*
      mutable_userrecordarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeAuditionNotifyReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeAuditionUser > userrecordarr_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeAuditionNotifyReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeBattleUser</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeBattleUser : public ::google::protobuf::Message {
 public:
  TCrossChallengeBattleUser();
  virtual ~TCrossChallengeBattleUser();

  TCrossChallengeBattleUser(const TCrossChallengeBattleUser& from);

  inline TCrossChallengeBattleUser& operator=(const TCrossChallengeBattleUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeBattleUser& default_instance();

  void Swap(TCrossChallengeBattleUser* other);

  // implements Message ----------------------------------------------

  TCrossChallengeBattleUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeBattleUser& from);
  void MergeFrom(const TCrossChallengeBattleUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeBattleUser</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 IsWin = 2;
  inline bool has_iswin() const;
  inline void clear_iswin();
  static const int kIsWinFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeBattleUser</name>
  	<Function>
  		<name>iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iswin</name>
  		<replaceName>IsWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 iswin() const;
  inline void set_iswin(::google::protobuf::uint32 value);

  // repeated uint64 RidArr = 3;
  inline int ridarr_size() const;
  inline void clear_ridarr();
  static const int kRidArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeBattleUser</name>
  	<Function>
  		<name>ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ridarr</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>ridarr_size</name>
  		<replaceName>RidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 ridarr(int index) const;
  inline void set_ridarr(int index, ::google::protobuf::uint64 value);
  inline void add_ridarr(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      ridarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_ridarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeBattleUser)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_iswin();
  inline void clear_has_iswin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > ridarr_;
  ::google::protobuf::uint32 iswin_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeBattleUser* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossChallengeStepBattleNotifyReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossChallenge.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossChallengeStepBattleNotifyReq : public ::google::protobuf::Message {
 public:
  TCrossChallengeStepBattleNotifyReq();
  virtual ~TCrossChallengeStepBattleNotifyReq();

  TCrossChallengeStepBattleNotifyReq(const TCrossChallengeStepBattleNotifyReq& from);

  inline TCrossChallengeStepBattleNotifyReq& operator=(const TCrossChallengeStepBattleNotifyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossChallengeStepBattleNotifyReq& default_instance();

  void Swap(TCrossChallengeStepBattleNotifyReq* other);

  // implements Message ----------------------------------------------

  TCrossChallengeStepBattleNotifyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossChallengeStepBattleNotifyReq& from);
  void MergeFrom(const TCrossChallengeStepBattleNotifyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EChallengeStep Step = 1;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeStepBattleNotifyReq</name>
  	<Function>
  		<name>step</name>
  		<replaceName>Step</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_step</name>
  		<replaceName>Step</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_step</name>
  		<replaceName>Step</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EChallengeStep step() const;
  inline void set_step(::pb::EChallengeStep value);

  // repeated .pb.TCrossChallengeBattleUser UserRecordArr = 2;
  inline int userrecordarr_size() const;
  inline void clear_userrecordarr();
  static const int kUserRecordArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossChallengeStepBattleNotifyReq</name>
  	<Function>
  		<name>userrecordarr</name>
  		<replaceName>UserRecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userrecordarr</name>
  		<replaceName>UserRecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userrecordarr</name>
  		<replaceName>UserRecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userrecordarr</name>
  		<replaceName>UserRecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userrecordarr_size</name>
  		<replaceName>UserRecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossChallengeBattleUser& userrecordarr(int index) const;
  inline ::pb::TCrossChallengeBattleUser* mutable_userrecordarr(int index);
  inline ::pb::TCrossChallengeBattleUser* add_userrecordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleUser >&
      userrecordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleUser >*
      mutable_userrecordarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossChallengeStepBattleNotifyReq)
 private:
  inline void set_has_step();
  inline void clear_has_step();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleUser > userrecordarr_;
  int step_;
  friend void  protobuf_AddDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossChallenge_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossChallenge_2eproto();

  void InitAsDefaultInstance();
  static TCrossChallengeStepBattleNotifyReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TCrossChallengeRsp

// optional uint64 SeasonBeginTime = 1;
inline bool TCrossChallengeRsp::has_seasonbegintime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengeRsp::set_has_seasonbegintime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengeRsp::clear_has_seasonbegintime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengeRsp::clear_seasonbegintime() {
  seasonbegintime_ = GOOGLE_ULONGLONG(0);
  clear_has_seasonbegintime();
}
inline ::google::protobuf::uint64 TCrossChallengeRsp::seasonbegintime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeRsp.SeasonBeginTime)
  return seasonbegintime_;
}
inline void TCrossChallengeRsp::set_seasonbegintime(::google::protobuf::uint64 value) {
  set_has_seasonbegintime();
  seasonbegintime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeRsp.SeasonBeginTime)
}

// optional .pb.EChallengeStep Step = 2;
inline bool TCrossChallengeRsp::has_step() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossChallengeRsp::set_has_step() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossChallengeRsp::clear_has_step() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossChallengeRsp::clear_step() {
  step_ = 1;
  clear_has_step();
}
inline ::pb::EChallengeStep TCrossChallengeRsp::step() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeRsp.Step)
  return static_cast< ::pb::EChallengeStep >(step_);
}
inline void TCrossChallengeRsp::set_step(::pb::EChallengeStep value) {
  assert(::pb::EChallengeStep_IsValid(value));
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeRsp.Step)
}

// optional uint32 Rank = 3;
inline bool TCrossChallengeRsp::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossChallengeRsp::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossChallengeRsp::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossChallengeRsp::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TCrossChallengeRsp::rank() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeRsp.Rank)
  return rank_;
}
inline void TCrossChallengeRsp::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeRsp.Rank)
}

// optional uint32 IsLose = 4;
inline bool TCrossChallengeRsp::has_islose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossChallengeRsp::set_has_islose() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossChallengeRsp::clear_has_islose() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossChallengeRsp::clear_islose() {
  islose_ = 0u;
  clear_has_islose();
}
inline ::google::protobuf::uint32 TCrossChallengeRsp::islose() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeRsp.IsLose)
  return islose_;
}
inline void TCrossChallengeRsp::set_islose(::google::protobuf::uint32 value) {
  set_has_islose();
  islose_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeRsp.IsLose)
}

// optional uint32 IsOpen = 5;
inline bool TCrossChallengeRsp::has_isopen() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossChallengeRsp::set_has_isopen() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossChallengeRsp::clear_has_isopen() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossChallengeRsp::clear_isopen() {
  isopen_ = 0u;
  clear_has_isopen();
}
inline ::google::protobuf::uint32 TCrossChallengeRsp::isopen() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeRsp.IsOpen)
  return isopen_;
}
inline void TCrossChallengeRsp::set_isopen(::google::protobuf::uint32 value) {
  set_has_isopen();
  isopen_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeRsp.IsOpen)
}

// optional uint32 IsInAudition = 6;
inline bool TCrossChallengeRsp::has_isinaudition() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCrossChallengeRsp::set_has_isinaudition() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCrossChallengeRsp::clear_has_isinaudition() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCrossChallengeRsp::clear_isinaudition() {
  isinaudition_ = 0u;
  clear_has_isinaudition();
}
inline ::google::protobuf::uint32 TCrossChallengeRsp::isinaudition() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeRsp.IsInAudition)
  return isinaudition_;
}
inline void TCrossChallengeRsp::set_isinaudition(::google::protobuf::uint32 value) {
  set_has_isinaudition();
  isinaudition_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeRsp.IsInAudition)
}

// optional uint32 IsRankRewarded = 7;
inline bool TCrossChallengeRsp::has_isrankrewarded() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TCrossChallengeRsp::set_has_isrankrewarded() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TCrossChallengeRsp::clear_has_isrankrewarded() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TCrossChallengeRsp::clear_isrankrewarded() {
  isrankrewarded_ = 0u;
  clear_has_isrankrewarded();
}
inline ::google::protobuf::uint32 TCrossChallengeRsp::isrankrewarded() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeRsp.IsRankRewarded)
  return isrankrewarded_;
}
inline void TCrossChallengeRsp::set_isrankrewarded(::google::protobuf::uint32 value) {
  set_has_isrankrewarded();
  isrankrewarded_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeRsp.IsRankRewarded)
}

// optional uint32 HasGuessReward = 8;
inline bool TCrossChallengeRsp::has_hasguessreward() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TCrossChallengeRsp::set_has_hasguessreward() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TCrossChallengeRsp::clear_has_hasguessreward() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TCrossChallengeRsp::clear_hasguessreward() {
  hasguessreward_ = 0u;
  clear_has_hasguessreward();
}
inline ::google::protobuf::uint32 TCrossChallengeRsp::hasguessreward() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeRsp.HasGuessReward)
  return hasguessreward_;
}
inline void TCrossChallengeRsp::set_hasguessreward(::google::protobuf::uint32 value) {
  set_has_hasguessreward();
  hasguessreward_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeRsp.HasGuessReward)
}

// optional uint32 HasAuditionReport = 10;
inline bool TCrossChallengeRsp::has_hasauditionreport() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TCrossChallengeRsp::set_has_hasauditionreport() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TCrossChallengeRsp::clear_has_hasauditionreport() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TCrossChallengeRsp::clear_hasauditionreport() {
  hasauditionreport_ = 0u;
  clear_has_hasauditionreport();
}
inline ::google::protobuf::uint32 TCrossChallengeRsp::hasauditionreport() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeRsp.HasAuditionReport)
  return hasauditionreport_;
}
inline void TCrossChallengeRsp::set_hasauditionreport(::google::protobuf::uint32 value) {
  set_has_hasauditionreport();
  hasauditionreport_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeRsp.HasAuditionReport)
}

// optional uint32 ServerTeamId = 11;
inline bool TCrossChallengeRsp::has_serverteamid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TCrossChallengeRsp::set_has_serverteamid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TCrossChallengeRsp::clear_has_serverteamid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TCrossChallengeRsp::clear_serverteamid() {
  serverteamid_ = 0u;
  clear_has_serverteamid();
}
inline ::google::protobuf::uint32 TCrossChallengeRsp::serverteamid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeRsp.ServerTeamId)
  return serverteamid_;
}
inline void TCrossChallengeRsp::set_serverteamid(::google::protobuf::uint32 value) {
  set_has_serverteamid();
  serverteamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeRsp.ServerTeamId)
}

// optional uint32 RankRewardConfId = 12;
inline bool TCrossChallengeRsp::has_rankrewardconfid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TCrossChallengeRsp::set_has_rankrewardconfid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TCrossChallengeRsp::clear_has_rankrewardconfid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TCrossChallengeRsp::clear_rankrewardconfid() {
  rankrewardconfid_ = 0u;
  clear_has_rankrewardconfid();
}
inline ::google::protobuf::uint32 TCrossChallengeRsp::rankrewardconfid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeRsp.RankRewardConfId)
  return rankrewardconfid_;
}
inline void TCrossChallengeRsp::set_rankrewardconfid(::google::protobuf::uint32 value) {
  set_has_rankrewardconfid();
  rankrewardconfid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeRsp.RankRewardConfId)
}

// -------------------------------------------------------------------

// TCrossChallengeUserInfo

// optional uint64 Uid = 1;
inline bool TCrossChallengeUserInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengeUserInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengeUserInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengeUserInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCrossChallengeUserInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeUserInfo.Uid)
  return uid_;
}
inline void TCrossChallengeUserInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeUserInfo.Uid)
}

// optional string Uname = 2;
inline bool TCrossChallengeUserInfo::has_uname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossChallengeUserInfo::set_has_uname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossChallengeUserInfo::clear_has_uname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossChallengeUserInfo::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TCrossChallengeUserInfo::uname() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeUserInfo.Uname)
  return *uname_;
}
inline void TCrossChallengeUserInfo::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeUserInfo.Uname)
}
inline void TCrossChallengeUserInfo::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossChallengeUserInfo.Uname)
}
inline void TCrossChallengeUserInfo::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossChallengeUserInfo.Uname)
}
inline ::std::string* TCrossChallengeUserInfo::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeUserInfo.Uname)
  return uname_;
}
inline ::std::string* TCrossChallengeUserInfo::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossChallengeUserInfo::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossChallengeUserInfo.Uname)
}

// optional uint32 PlayerModelHtid = 3;
inline bool TCrossChallengeUserInfo::has_playermodelhtid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossChallengeUserInfo::set_has_playermodelhtid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossChallengeUserInfo::clear_has_playermodelhtid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossChallengeUserInfo::clear_playermodelhtid() {
  playermodelhtid_ = 0u;
  clear_has_playermodelhtid();
}
inline ::google::protobuf::uint32 TCrossChallengeUserInfo::playermodelhtid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeUserInfo.PlayerModelHtid)
  return playermodelhtid_;
}
inline void TCrossChallengeUserInfo::set_playermodelhtid(::google::protobuf::uint32 value) {
  set_has_playermodelhtid();
  playermodelhtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeUserInfo.PlayerModelHtid)
}

// optional uint32 PlayerImageFrameTid = 4;
inline bool TCrossChallengeUserInfo::has_playerimageframetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossChallengeUserInfo::set_has_playerimageframetid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossChallengeUserInfo::clear_has_playerimageframetid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossChallengeUserInfo::clear_playerimageframetid() {
  playerimageframetid_ = 0u;
  clear_has_playerimageframetid();
}
inline ::google::protobuf::uint32 TCrossChallengeUserInfo::playerimageframetid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeUserInfo.PlayerImageFrameTid)
  return playerimageframetid_;
}
inline void TCrossChallengeUserInfo::set_playerimageframetid(::google::protobuf::uint32 value) {
  set_has_playerimageframetid();
  playerimageframetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeUserInfo.PlayerImageFrameTid)
}

// optional uint32 Level = 5;
inline bool TCrossChallengeUserInfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossChallengeUserInfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossChallengeUserInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossChallengeUserInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TCrossChallengeUserInfo::level() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeUserInfo.Level)
  return level_;
}
inline void TCrossChallengeUserInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeUserInfo.Level)
}

// optional uint32 VipLv = 6;
inline bool TCrossChallengeUserInfo::has_viplv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCrossChallengeUserInfo::set_has_viplv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCrossChallengeUserInfo::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCrossChallengeUserInfo::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 TCrossChallengeUserInfo::viplv() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeUserInfo.VipLv)
  return viplv_;
}
inline void TCrossChallengeUserInfo::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeUserInfo.VipLv)
}

// optional uint64 GuildId = 7;
inline bool TCrossChallengeUserInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TCrossChallengeUserInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TCrossChallengeUserInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TCrossChallengeUserInfo::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TCrossChallengeUserInfo::guildid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeUserInfo.GuildId)
  return guildid_;
}
inline void TCrossChallengeUserInfo::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeUserInfo.GuildId)
}

// optional string GuildName = 8;
inline bool TCrossChallengeUserInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TCrossChallengeUserInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TCrossChallengeUserInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TCrossChallengeUserInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& TCrossChallengeUserInfo::guildname() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeUserInfo.GuildName)
  return *guildname_;
}
inline void TCrossChallengeUserInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeUserInfo.GuildName)
}
inline void TCrossChallengeUserInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossChallengeUserInfo.GuildName)
}
inline void TCrossChallengeUserInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossChallengeUserInfo.GuildName)
}
inline ::std::string* TCrossChallengeUserInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeUserInfo.GuildName)
  return guildname_;
}
inline ::std::string* TCrossChallengeUserInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossChallengeUserInfo::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossChallengeUserInfo.GuildName)
}

// optional uint32 IsShowVip = 9;
inline bool TCrossChallengeUserInfo::has_isshowvip() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TCrossChallengeUserInfo::set_has_isshowvip() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TCrossChallengeUserInfo::clear_has_isshowvip() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TCrossChallengeUserInfo::clear_isshowvip() {
  isshowvip_ = 0u;
  clear_has_isshowvip();
}
inline ::google::protobuf::uint32 TCrossChallengeUserInfo::isshowvip() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeUserInfo.IsShowVip)
  return isshowvip_;
}
inline void TCrossChallengeUserInfo::set_isshowvip(::google::protobuf::uint32 value) {
  set_has_isshowvip();
  isshowvip_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeUserInfo.IsShowVip)
}

// optional string ServerId = 10;
inline bool TCrossChallengeUserInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TCrossChallengeUserInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TCrossChallengeUserInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TCrossChallengeUserInfo::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TCrossChallengeUserInfo::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeUserInfo.ServerId)
  return *serverid_;
}
inline void TCrossChallengeUserInfo::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeUserInfo.ServerId)
}
inline void TCrossChallengeUserInfo::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossChallengeUserInfo.ServerId)
}
inline void TCrossChallengeUserInfo::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossChallengeUserInfo.ServerId)
}
inline ::std::string* TCrossChallengeUserInfo::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeUserInfo.ServerId)
  return serverid_;
}
inline ::std::string* TCrossChallengeUserInfo::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossChallengeUserInfo::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossChallengeUserInfo.ServerId)
}

// -------------------------------------------------------------------

// TCrossChallengeBattleInfo

// optional uint32 TeamId = 1;
inline bool TCrossChallengeBattleInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengeBattleInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengeBattleInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengeBattleInfo::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TCrossChallengeBattleInfo::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeBattleInfo.TeamId)
  return teamid_;
}
inline void TCrossChallengeBattleInfo::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeBattleInfo.TeamId)
}

// optional uint32 Pos = 2;
inline bool TCrossChallengeBattleInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossChallengeBattleInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossChallengeBattleInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossChallengeBattleInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TCrossChallengeBattleInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeBattleInfo.Pos)
  return pos_;
}
inline void TCrossChallengeBattleInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeBattleInfo.Pos)
}

// optional uint64 Uid = 3;
inline bool TCrossChallengeBattleInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossChallengeBattleInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossChallengeBattleInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossChallengeBattleInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCrossChallengeBattleInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeBattleInfo.Uid)
  return uid_;
}
inline void TCrossChallengeBattleInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeBattleInfo.Uid)
}

// repeated uint64 RidArr = 4;
inline int TCrossChallengeBattleInfo::ridarr_size() const {
  return ridarr_.size();
}
inline void TCrossChallengeBattleInfo::clear_ridarr() {
  ridarr_.Clear();
}
inline ::google::protobuf::uint64 TCrossChallengeBattleInfo::ridarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeBattleInfo.RidArr)
  return ridarr_.Get(index);
}
inline void TCrossChallengeBattleInfo::set_ridarr(int index, ::google::protobuf::uint64 value) {
  ridarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeBattleInfo.RidArr)
}
inline void TCrossChallengeBattleInfo::add_ridarr(::google::protobuf::uint64 value) {
  ridarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeBattleInfo.RidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TCrossChallengeBattleInfo::ridarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeBattleInfo.RidArr)
  return ridarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TCrossChallengeBattleInfo::mutable_ridarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeBattleInfo.RidArr)
  return &ridarr_;
}

// optional .pb.EChallengeBattleStatus Status = 5;
inline bool TCrossChallengeBattleInfo::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossChallengeBattleInfo::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossChallengeBattleInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossChallengeBattleInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::pb::EChallengeBattleStatus TCrossChallengeBattleInfo::status() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeBattleInfo.Status)
  return static_cast< ::pb::EChallengeBattleStatus >(status_);
}
inline void TCrossChallengeBattleInfo::set_status(::pb::EChallengeBattleStatus value) {
  assert(::pb::EChallengeBattleStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeBattleInfo.Status)
}

// optional uint64 FightForce = 6;
inline bool TCrossChallengeBattleInfo::has_fightforce() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCrossChallengeBattleInfo::set_has_fightforce() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCrossChallengeBattleInfo::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCrossChallengeBattleInfo::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TCrossChallengeBattleInfo::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeBattleInfo.FightForce)
  return fightforce_;
}
inline void TCrossChallengeBattleInfo::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeBattleInfo.FightForce)
}

// -------------------------------------------------------------------

// TCrossChallengePeriodInfo

// optional .pb.EChallengeStep Step = 1;
inline bool TCrossChallengePeriodInfo::has_step() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengePeriodInfo::set_has_step() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengePeriodInfo::clear_has_step() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengePeriodInfo::clear_step() {
  step_ = 1;
  clear_has_step();
}
inline ::pb::EChallengeStep TCrossChallengePeriodInfo::step() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengePeriodInfo.Step)
  return static_cast< ::pb::EChallengeStep >(step_);
}
inline void TCrossChallengePeriodInfo::set_step(::pb::EChallengeStep value) {
  assert(::pb::EChallengeStep_IsValid(value));
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengePeriodInfo.Step)
}

// repeated .pb.TCrossChallengeBattleInfo PeriodInfo = 2;
inline int TCrossChallengePeriodInfo::periodinfo_size() const {
  return periodinfo_.size();
}
inline void TCrossChallengePeriodInfo::clear_periodinfo() {
  periodinfo_.Clear();
}
inline const ::pb::TCrossChallengeBattleInfo& TCrossChallengePeriodInfo::periodinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengePeriodInfo.PeriodInfo)
  return periodinfo_.Get(index);
}
inline ::pb::TCrossChallengeBattleInfo* TCrossChallengePeriodInfo::mutable_periodinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengePeriodInfo.PeriodInfo)
  return periodinfo_.Mutable(index);
}
inline ::pb::TCrossChallengeBattleInfo* TCrossChallengePeriodInfo::add_periodinfo() {
  // @@protoc_insertion_point(field_add:pb.TCrossChallengePeriodInfo.PeriodInfo)
  return periodinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleInfo >&
TCrossChallengePeriodInfo::periodinfo() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengePeriodInfo.PeriodInfo)
  return periodinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleInfo >*
TCrossChallengePeriodInfo::mutable_periodinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengePeriodInfo.PeriodInfo)
  return &periodinfo_;
}

// -------------------------------------------------------------------

// TCrossChallengeGetChallengeUserInfoRsp

// optional uint32 TeamId = 1;
inline bool TCrossChallengeGetChallengeUserInfoRsp::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengeGetChallengeUserInfoRsp::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengeGetChallengeUserInfoRsp::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengeGetChallengeUserInfoRsp::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TCrossChallengeGetChallengeUserInfoRsp::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetChallengeUserInfoRsp.TeamId)
  return teamid_;
}
inline void TCrossChallengeGetChallengeUserInfoRsp::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGetChallengeUserInfoRsp.TeamId)
}

// repeated .pb.TCrossChallengePeriodInfo PeriodInfoArr = 2;
inline int TCrossChallengeGetChallengeUserInfoRsp::periodinfoarr_size() const {
  return periodinfoarr_.size();
}
inline void TCrossChallengeGetChallengeUserInfoRsp::clear_periodinfoarr() {
  periodinfoarr_.Clear();
}
inline const ::pb::TCrossChallengePeriodInfo& TCrossChallengeGetChallengeUserInfoRsp::periodinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetChallengeUserInfoRsp.PeriodInfoArr)
  return periodinfoarr_.Get(index);
}
inline ::pb::TCrossChallengePeriodInfo* TCrossChallengeGetChallengeUserInfoRsp::mutable_periodinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeGetChallengeUserInfoRsp.PeriodInfoArr)
  return periodinfoarr_.Mutable(index);
}
inline ::pb::TCrossChallengePeriodInfo* TCrossChallengeGetChallengeUserInfoRsp::add_periodinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeGetChallengeUserInfoRsp.PeriodInfoArr)
  return periodinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengePeriodInfo >&
TCrossChallengeGetChallengeUserInfoRsp::periodinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeGetChallengeUserInfoRsp.PeriodInfoArr)
  return periodinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengePeriodInfo >*
TCrossChallengeGetChallengeUserInfoRsp::mutable_periodinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeGetChallengeUserInfoRsp.PeriodInfoArr)
  return &periodinfoarr_;
}

// repeated .pb.TCrossChallengeUserInfo UserArr = 3;
inline int TCrossChallengeGetChallengeUserInfoRsp::userarr_size() const {
  return userarr_.size();
}
inline void TCrossChallengeGetChallengeUserInfoRsp::clear_userarr() {
  userarr_.Clear();
}
inline const ::pb::TCrossChallengeUserInfo& TCrossChallengeGetChallengeUserInfoRsp::userarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetChallengeUserInfoRsp.UserArr)
  return userarr_.Get(index);
}
inline ::pb::TCrossChallengeUserInfo* TCrossChallengeGetChallengeUserInfoRsp::mutable_userarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeGetChallengeUserInfoRsp.UserArr)
  return userarr_.Mutable(index);
}
inline ::pb::TCrossChallengeUserInfo* TCrossChallengeGetChallengeUserInfoRsp::add_userarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeGetChallengeUserInfoRsp.UserArr)
  return userarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeUserInfo >&
TCrossChallengeGetChallengeUserInfoRsp::userarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeGetChallengeUserInfoRsp.UserArr)
  return userarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeUserInfo >*
TCrossChallengeGetChallengeUserInfoRsp::mutable_userarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeGetChallengeUserInfoRsp.UserArr)
  return &userarr_;
}

// -------------------------------------------------------------------

// TCrossChallengeGetCurrentPeriodInfoRsp

// optional .pb.TCrossChallengePeriodInfo PeriodInfo = 1;
inline bool TCrossChallengeGetCurrentPeriodInfoRsp::has_periodinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengeGetCurrentPeriodInfoRsp::set_has_periodinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengeGetCurrentPeriodInfoRsp::clear_has_periodinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengeGetCurrentPeriodInfoRsp::clear_periodinfo() {
  if (periodinfo_ != NULL) periodinfo_->::pb::TCrossChallengePeriodInfo::Clear();
  clear_has_periodinfo();
}
inline const ::pb::TCrossChallengePeriodInfo& TCrossChallengeGetCurrentPeriodInfoRsp::periodinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetCurrentPeriodInfoRsp.PeriodInfo)
  return periodinfo_ != NULL ? *periodinfo_ : *default_instance_->periodinfo_;
}
inline ::pb::TCrossChallengePeriodInfo* TCrossChallengeGetCurrentPeriodInfoRsp::mutable_periodinfo() {
  set_has_periodinfo();
  if (periodinfo_ == NULL) periodinfo_ = new ::pb::TCrossChallengePeriodInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeGetCurrentPeriodInfoRsp.PeriodInfo)
  return periodinfo_;
}
inline ::pb::TCrossChallengePeriodInfo* TCrossChallengeGetCurrentPeriodInfoRsp::release_periodinfo() {
  clear_has_periodinfo();
  ::pb::TCrossChallengePeriodInfo* temp = periodinfo_;
  periodinfo_ = NULL;
  return temp;
}
inline void TCrossChallengeGetCurrentPeriodInfoRsp::set_allocated_periodinfo(::pb::TCrossChallengePeriodInfo* periodinfo) {
  delete periodinfo_;
  periodinfo_ = periodinfo;
  if (periodinfo) {
    set_has_periodinfo();
  } else {
    clear_has_periodinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossChallengeGetCurrentPeriodInfoRsp.PeriodInfo)
}

// -------------------------------------------------------------------

// TCrossChallengeFormationInfo

// optional uint32 FormationId = 1;
inline bool TCrossChallengeFormationInfo::has_formationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengeFormationInfo::set_has_formationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengeFormationInfo::clear_has_formationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengeFormationInfo::clear_formationid() {
  formationid_ = 0u;
  clear_has_formationid();
}
inline ::google::protobuf::uint32 TCrossChallengeFormationInfo::formationid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeFormationInfo.FormationId)
  return formationid_;
}
inline void TCrossChallengeFormationInfo::set_formationid(::google::protobuf::uint32 value) {
  set_has_formationid();
  formationid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeFormationInfo.FormationId)
}

// repeated .pb.TCrossChallengeBattleHeroStatus UnitArr = 2;
inline int TCrossChallengeFormationInfo::unitarr_size() const {
  return unitarr_.size();
}
inline void TCrossChallengeFormationInfo::clear_unitarr() {
  unitarr_.Clear();
}
inline const ::pb::TCrossChallengeBattleHeroStatus& TCrossChallengeFormationInfo::unitarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeFormationInfo.UnitArr)
  return unitarr_.Get(index);
}
inline ::pb::TCrossChallengeBattleHeroStatus* TCrossChallengeFormationInfo::mutable_unitarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeFormationInfo.UnitArr)
  return unitarr_.Mutable(index);
}
inline ::pb::TCrossChallengeBattleHeroStatus* TCrossChallengeFormationInfo::add_unitarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeFormationInfo.UnitArr)
  return unitarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleHeroStatus >&
TCrossChallengeFormationInfo::unitarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeFormationInfo.UnitArr)
  return unitarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleHeroStatus >*
TCrossChallengeFormationInfo::mutable_unitarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeFormationInfo.UnitArr)
  return &unitarr_;
}

// optional uint64 FightForce = 3;
inline bool TCrossChallengeFormationInfo::has_fightforce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossChallengeFormationInfo::set_has_fightforce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossChallengeFormationInfo::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossChallengeFormationInfo::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TCrossChallengeFormationInfo::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeFormationInfo.FightForce)
  return fightforce_;
}
inline void TCrossChallengeFormationInfo::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeFormationInfo.FightForce)
}

// -------------------------------------------------------------------

// TCrossChallengeGetFormationReq

// optional .pb.EChallengeStep Step = 1;
inline bool TCrossChallengeGetFormationReq::has_step() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengeGetFormationReq::set_has_step() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengeGetFormationReq::clear_has_step() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengeGetFormationReq::clear_step() {
  step_ = 1;
  clear_has_step();
}
inline ::pb::EChallengeStep TCrossChallengeGetFormationReq::step() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetFormationReq.Step)
  return static_cast< ::pb::EChallengeStep >(step_);
}
inline void TCrossChallengeGetFormationReq::set_step(::pb::EChallengeStep value) {
  assert(::pb::EChallengeStep_IsValid(value));
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGetFormationReq.Step)
}

// optional uint64 Uid = 2;
inline bool TCrossChallengeGetFormationReq::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossChallengeGetFormationReq::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossChallengeGetFormationReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossChallengeGetFormationReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCrossChallengeGetFormationReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetFormationReq.Uid)
  return uid_;
}
inline void TCrossChallengeGetFormationReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGetFormationReq.Uid)
}

// -------------------------------------------------------------------

// TCrossChallengeGetFormationRsp

// optional string Uname = 1;
inline bool TCrossChallengeGetFormationRsp::has_uname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengeGetFormationRsp::set_has_uname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengeGetFormationRsp::clear_has_uname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengeGetFormationRsp::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TCrossChallengeGetFormationRsp::uname() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetFormationRsp.Uname)
  return *uname_;
}
inline void TCrossChallengeGetFormationRsp::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGetFormationRsp.Uname)
}
inline void TCrossChallengeGetFormationRsp::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossChallengeGetFormationRsp.Uname)
}
inline void TCrossChallengeGetFormationRsp::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossChallengeGetFormationRsp.Uname)
}
inline ::std::string* TCrossChallengeGetFormationRsp::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeGetFormationRsp.Uname)
  return uname_;
}
inline ::std::string* TCrossChallengeGetFormationRsp::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossChallengeGetFormationRsp::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossChallengeGetFormationRsp.Uname)
}

// optional uint64 FightForce = 2;
inline bool TCrossChallengeGetFormationRsp::has_fightforce() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossChallengeGetFormationRsp::set_has_fightforce() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossChallengeGetFormationRsp::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossChallengeGetFormationRsp::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TCrossChallengeGetFormationRsp::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetFormationRsp.FightForce)
  return fightforce_;
}
inline void TCrossChallengeGetFormationRsp::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGetFormationRsp.FightForce)
}

// repeated .pb.TCrossChallengeFormationInfo FormationArr = 3;
inline int TCrossChallengeGetFormationRsp::formationarr_size() const {
  return formationarr_.size();
}
inline void TCrossChallengeGetFormationRsp::clear_formationarr() {
  formationarr_.Clear();
}
inline const ::pb::TCrossChallengeFormationInfo& TCrossChallengeGetFormationRsp::formationarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetFormationRsp.FormationArr)
  return formationarr_.Get(index);
}
inline ::pb::TCrossChallengeFormationInfo* TCrossChallengeGetFormationRsp::mutable_formationarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeGetFormationRsp.FormationArr)
  return formationarr_.Mutable(index);
}
inline ::pb::TCrossChallengeFormationInfo* TCrossChallengeGetFormationRsp::add_formationarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeGetFormationRsp.FormationArr)
  return formationarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeFormationInfo >&
TCrossChallengeGetFormationRsp::formationarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeGetFormationRsp.FormationArr)
  return formationarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeFormationInfo >*
TCrossChallengeGetFormationRsp::mutable_formationarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeGetFormationRsp.FormationArr)
  return &formationarr_;
}

// -------------------------------------------------------------------

// TCrossChallengeSetFormationReq

// repeated .pb.TCrossChallengeFormationInfo FormationArr = 1;
inline int TCrossChallengeSetFormationReq::formationarr_size() const {
  return formationarr_.size();
}
inline void TCrossChallengeSetFormationReq::clear_formationarr() {
  formationarr_.Clear();
}
inline const ::pb::TCrossChallengeFormationInfo& TCrossChallengeSetFormationReq::formationarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeSetFormationReq.FormationArr)
  return formationarr_.Get(index);
}
inline ::pb::TCrossChallengeFormationInfo* TCrossChallengeSetFormationReq::mutable_formationarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeSetFormationReq.FormationArr)
  return formationarr_.Mutable(index);
}
inline ::pb::TCrossChallengeFormationInfo* TCrossChallengeSetFormationReq::add_formationarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeSetFormationReq.FormationArr)
  return formationarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeFormationInfo >&
TCrossChallengeSetFormationReq::formationarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeSetFormationReq.FormationArr)
  return formationarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeFormationInfo >*
TCrossChallengeSetFormationReq::mutable_formationarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeSetFormationReq.FormationArr)
  return &formationarr_;
}

// -------------------------------------------------------------------

// TCrossChallengeBattleHeroStatus

// optional uint32 Htid = 1;
inline bool TCrossChallengeBattleHeroStatus::has_htid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengeBattleHeroStatus::set_has_htid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengeBattleHeroStatus::clear_has_htid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengeBattleHeroStatus::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TCrossChallengeBattleHeroStatus::htid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeBattleHeroStatus.Htid)
  return htid_;
}
inline void TCrossChallengeBattleHeroStatus::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeBattleHeroStatus.Htid)
}

// optional uint32 Pos = 2;
inline bool TCrossChallengeBattleHeroStatus::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossChallengeBattleHeroStatus::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossChallengeBattleHeroStatus::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossChallengeBattleHeroStatus::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TCrossChallengeBattleHeroStatus::pos() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeBattleHeroStatus.Pos)
  return pos_;
}
inline void TCrossChallengeBattleHeroStatus::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeBattleHeroStatus.Pos)
}

// optional uint32 IsKilled = 3;
inline bool TCrossChallengeBattleHeroStatus::has_iskilled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossChallengeBattleHeroStatus::set_has_iskilled() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossChallengeBattleHeroStatus::clear_has_iskilled() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossChallengeBattleHeroStatus::clear_iskilled() {
  iskilled_ = 0u;
  clear_has_iskilled();
}
inline ::google::protobuf::uint32 TCrossChallengeBattleHeroStatus::iskilled() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeBattleHeroStatus.IsKilled)
  return iskilled_;
}
inline void TCrossChallengeBattleHeroStatus::set_iskilled(::google::protobuf::uint32 value) {
  set_has_iskilled();
  iskilled_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeBattleHeroStatus.IsKilled)
}

// optional uint32 Level = 4;
inline bool TCrossChallengeBattleHeroStatus::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossChallengeBattleHeroStatus::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossChallengeBattleHeroStatus::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossChallengeBattleHeroStatus::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TCrossChallengeBattleHeroStatus::level() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeBattleHeroStatus.Level)
  return level_;
}
inline void TCrossChallengeBattleHeroStatus::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeBattleHeroStatus.Level)
}

// optional uint32 StarLv = 5;
inline bool TCrossChallengeBattleHeroStatus::has_starlv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossChallengeBattleHeroStatus::set_has_starlv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossChallengeBattleHeroStatus::clear_has_starlv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossChallengeBattleHeroStatus::clear_starlv() {
  starlv_ = 0u;
  clear_has_starlv();
}
inline ::google::protobuf::uint32 TCrossChallengeBattleHeroStatus::starlv() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeBattleHeroStatus.StarLv)
  return starlv_;
}
inline void TCrossChallengeBattleHeroStatus::set_starlv(::google::protobuf::uint32 value) {
  set_has_starlv();
  starlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeBattleHeroStatus.StarLv)
}

// optional uint32 Hid = 6;
inline bool TCrossChallengeBattleHeroStatus::has_hid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCrossChallengeBattleHeroStatus::set_has_hid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCrossChallengeBattleHeroStatus::clear_has_hid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCrossChallengeBattleHeroStatus::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TCrossChallengeBattleHeroStatus::hid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeBattleHeroStatus.Hid)
  return hid_;
}
inline void TCrossChallengeBattleHeroStatus::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeBattleHeroStatus.Hid)
}

// -------------------------------------------------------------------

// TCrossChallengeBattleSingle

// optional uint32 FormationId = 1;
inline bool TCrossChallengeBattleSingle::has_formationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengeBattleSingle::set_has_formationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengeBattleSingle::clear_has_formationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengeBattleSingle::clear_formationid() {
  formationid_ = 0u;
  clear_has_formationid();
}
inline ::google::protobuf::uint32 TCrossChallengeBattleSingle::formationid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeBattleSingle.FormationId)
  return formationid_;
}
inline void TCrossChallengeBattleSingle::set_formationid(::google::protobuf::uint32 value) {
  set_has_formationid();
  formationid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeBattleSingle.FormationId)
}

// repeated .pb.TCrossChallengeBattleHeroStatus AtkHeroInfoArr = 2;
inline int TCrossChallengeBattleSingle::atkheroinfoarr_size() const {
  return atkheroinfoarr_.size();
}
inline void TCrossChallengeBattleSingle::clear_atkheroinfoarr() {
  atkheroinfoarr_.Clear();
}
inline const ::pb::TCrossChallengeBattleHeroStatus& TCrossChallengeBattleSingle::atkheroinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeBattleSingle.AtkHeroInfoArr)
  return atkheroinfoarr_.Get(index);
}
inline ::pb::TCrossChallengeBattleHeroStatus* TCrossChallengeBattleSingle::mutable_atkheroinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeBattleSingle.AtkHeroInfoArr)
  return atkheroinfoarr_.Mutable(index);
}
inline ::pb::TCrossChallengeBattleHeroStatus* TCrossChallengeBattleSingle::add_atkheroinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeBattleSingle.AtkHeroInfoArr)
  return atkheroinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleHeroStatus >&
TCrossChallengeBattleSingle::atkheroinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeBattleSingle.AtkHeroInfoArr)
  return atkheroinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleHeroStatus >*
TCrossChallengeBattleSingle::mutable_atkheroinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeBattleSingle.AtkHeroInfoArr)
  return &atkheroinfoarr_;
}

// repeated .pb.TCrossChallengeBattleHeroStatus DefHeroInfoArr = 3;
inline int TCrossChallengeBattleSingle::defheroinfoarr_size() const {
  return defheroinfoarr_.size();
}
inline void TCrossChallengeBattleSingle::clear_defheroinfoarr() {
  defheroinfoarr_.Clear();
}
inline const ::pb::TCrossChallengeBattleHeroStatus& TCrossChallengeBattleSingle::defheroinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeBattleSingle.DefHeroInfoArr)
  return defheroinfoarr_.Get(index);
}
inline ::pb::TCrossChallengeBattleHeroStatus* TCrossChallengeBattleSingle::mutable_defheroinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeBattleSingle.DefHeroInfoArr)
  return defheroinfoarr_.Mutable(index);
}
inline ::pb::TCrossChallengeBattleHeroStatus* TCrossChallengeBattleSingle::add_defheroinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeBattleSingle.DefHeroInfoArr)
  return defheroinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleHeroStatus >&
TCrossChallengeBattleSingle::defheroinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeBattleSingle.DefHeroInfoArr)
  return defheroinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleHeroStatus >*
TCrossChallengeBattleSingle::mutable_defheroinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeBattleSingle.DefHeroInfoArr)
  return &defheroinfoarr_;
}

// optional uint32 IsAtkWin = 4;
inline bool TCrossChallengeBattleSingle::has_isatkwin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossChallengeBattleSingle::set_has_isatkwin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossChallengeBattleSingle::clear_has_isatkwin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossChallengeBattleSingle::clear_isatkwin() {
  isatkwin_ = 0u;
  clear_has_isatkwin();
}
inline ::google::protobuf::uint32 TCrossChallengeBattleSingle::isatkwin() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeBattleSingle.IsAtkWin)
  return isatkwin_;
}
inline void TCrossChallengeBattleSingle::set_isatkwin(::google::protobuf::uint32 value) {
  set_has_isatkwin();
  isatkwin_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeBattleSingle.IsAtkWin)
}

// -------------------------------------------------------------------

// TCrossChallengeGetBattleInfoReq

// repeated uint64 RidArr = 1;
inline int TCrossChallengeGetBattleInfoReq::ridarr_size() const {
  return ridarr_.size();
}
inline void TCrossChallengeGetBattleInfoReq::clear_ridarr() {
  ridarr_.Clear();
}
inline ::google::protobuf::uint64 TCrossChallengeGetBattleInfoReq::ridarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetBattleInfoReq.RidArr)
  return ridarr_.Get(index);
}
inline void TCrossChallengeGetBattleInfoReq::set_ridarr(int index, ::google::protobuf::uint64 value) {
  ridarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGetBattleInfoReq.RidArr)
}
inline void TCrossChallengeGetBattleInfoReq::add_ridarr(::google::protobuf::uint64 value) {
  ridarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeGetBattleInfoReq.RidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TCrossChallengeGetBattleInfoReq::ridarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeGetBattleInfoReq.RidArr)
  return ridarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TCrossChallengeGetBattleInfoReq::mutable_ridarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeGetBattleInfoReq.RidArr)
  return &ridarr_;
}

// -------------------------------------------------------------------

// TCrossChallengeGetBattleInfoRsp

// optional .pb.TCrossChallengeUserInfo AtkUserInfo = 1;
inline bool TCrossChallengeGetBattleInfoRsp::has_atkuserinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengeGetBattleInfoRsp::set_has_atkuserinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengeGetBattleInfoRsp::clear_has_atkuserinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengeGetBattleInfoRsp::clear_atkuserinfo() {
  if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TCrossChallengeUserInfo::Clear();
  clear_has_atkuserinfo();
}
inline const ::pb::TCrossChallengeUserInfo& TCrossChallengeGetBattleInfoRsp::atkuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetBattleInfoRsp.AtkUserInfo)
  return atkuserinfo_ != NULL ? *atkuserinfo_ : *default_instance_->atkuserinfo_;
}
inline ::pb::TCrossChallengeUserInfo* TCrossChallengeGetBattleInfoRsp::mutable_atkuserinfo() {
  set_has_atkuserinfo();
  if (atkuserinfo_ == NULL) atkuserinfo_ = new ::pb::TCrossChallengeUserInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeGetBattleInfoRsp.AtkUserInfo)
  return atkuserinfo_;
}
inline ::pb::TCrossChallengeUserInfo* TCrossChallengeGetBattleInfoRsp::release_atkuserinfo() {
  clear_has_atkuserinfo();
  ::pb::TCrossChallengeUserInfo* temp = atkuserinfo_;
  atkuserinfo_ = NULL;
  return temp;
}
inline void TCrossChallengeGetBattleInfoRsp::set_allocated_atkuserinfo(::pb::TCrossChallengeUserInfo* atkuserinfo) {
  delete atkuserinfo_;
  atkuserinfo_ = atkuserinfo;
  if (atkuserinfo) {
    set_has_atkuserinfo();
  } else {
    clear_has_atkuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossChallengeGetBattleInfoRsp.AtkUserInfo)
}

// optional .pb.TCrossChallengeUserInfo DefUserInfo = 2;
inline bool TCrossChallengeGetBattleInfoRsp::has_defuserinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossChallengeGetBattleInfoRsp::set_has_defuserinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossChallengeGetBattleInfoRsp::clear_has_defuserinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossChallengeGetBattleInfoRsp::clear_defuserinfo() {
  if (defuserinfo_ != NULL) defuserinfo_->::pb::TCrossChallengeUserInfo::Clear();
  clear_has_defuserinfo();
}
inline const ::pb::TCrossChallengeUserInfo& TCrossChallengeGetBattleInfoRsp::defuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetBattleInfoRsp.DefUserInfo)
  return defuserinfo_ != NULL ? *defuserinfo_ : *default_instance_->defuserinfo_;
}
inline ::pb::TCrossChallengeUserInfo* TCrossChallengeGetBattleInfoRsp::mutable_defuserinfo() {
  set_has_defuserinfo();
  if (defuserinfo_ == NULL) defuserinfo_ = new ::pb::TCrossChallengeUserInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeGetBattleInfoRsp.DefUserInfo)
  return defuserinfo_;
}
inline ::pb::TCrossChallengeUserInfo* TCrossChallengeGetBattleInfoRsp::release_defuserinfo() {
  clear_has_defuserinfo();
  ::pb::TCrossChallengeUserInfo* temp = defuserinfo_;
  defuserinfo_ = NULL;
  return temp;
}
inline void TCrossChallengeGetBattleInfoRsp::set_allocated_defuserinfo(::pb::TCrossChallengeUserInfo* defuserinfo) {
  delete defuserinfo_;
  defuserinfo_ = defuserinfo;
  if (defuserinfo) {
    set_has_defuserinfo();
  } else {
    clear_has_defuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossChallengeGetBattleInfoRsp.DefUserInfo)
}

// repeated .pb.TCrossChallengeBattleSingle BattleInfoArr = 3;
inline int TCrossChallengeGetBattleInfoRsp::battleinfoarr_size() const {
  return battleinfoarr_.size();
}
inline void TCrossChallengeGetBattleInfoRsp::clear_battleinfoarr() {
  battleinfoarr_.Clear();
}
inline const ::pb::TCrossChallengeBattleSingle& TCrossChallengeGetBattleInfoRsp::battleinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetBattleInfoRsp.BattleInfoArr)
  return battleinfoarr_.Get(index);
}
inline ::pb::TCrossChallengeBattleSingle* TCrossChallengeGetBattleInfoRsp::mutable_battleinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeGetBattleInfoRsp.BattleInfoArr)
  return battleinfoarr_.Mutable(index);
}
inline ::pb::TCrossChallengeBattleSingle* TCrossChallengeGetBattleInfoRsp::add_battleinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeGetBattleInfoRsp.BattleInfoArr)
  return battleinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleSingle >&
TCrossChallengeGetBattleInfoRsp::battleinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeGetBattleInfoRsp.BattleInfoArr)
  return battleinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleSingle >*
TCrossChallengeGetBattleInfoRsp::mutable_battleinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeGetBattleInfoRsp.BattleInfoArr)
  return &battleinfoarr_;
}

// optional uint64 AtkFightForce = 4;
inline bool TCrossChallengeGetBattleInfoRsp::has_atkfightforce() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossChallengeGetBattleInfoRsp::set_has_atkfightforce() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossChallengeGetBattleInfoRsp::clear_has_atkfightforce() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossChallengeGetBattleInfoRsp::clear_atkfightforce() {
  atkfightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_atkfightforce();
}
inline ::google::protobuf::uint64 TCrossChallengeGetBattleInfoRsp::atkfightforce() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetBattleInfoRsp.AtkFightForce)
  return atkfightforce_;
}
inline void TCrossChallengeGetBattleInfoRsp::set_atkfightforce(::google::protobuf::uint64 value) {
  set_has_atkfightforce();
  atkfightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGetBattleInfoRsp.AtkFightForce)
}

// optional uint64 DefFightForce = 5;
inline bool TCrossChallengeGetBattleInfoRsp::has_deffightforce() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossChallengeGetBattleInfoRsp::set_has_deffightforce() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossChallengeGetBattleInfoRsp::clear_has_deffightforce() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossChallengeGetBattleInfoRsp::clear_deffightforce() {
  deffightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_deffightforce();
}
inline ::google::protobuf::uint64 TCrossChallengeGetBattleInfoRsp::deffightforce() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetBattleInfoRsp.DefFightForce)
  return deffightforce_;
}
inline void TCrossChallengeGetBattleInfoRsp::set_deffightforce(::google::protobuf::uint64 value) {
  set_has_deffightforce();
  deffightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGetBattleInfoRsp.DefFightForce)
}

// -------------------------------------------------------------------

// TCrossChallengeGetBattleReportReq

// repeated uint64 RidArr = 1;
inline int TCrossChallengeGetBattleReportReq::ridarr_size() const {
  return ridarr_.size();
}
inline void TCrossChallengeGetBattleReportReq::clear_ridarr() {
  ridarr_.Clear();
}
inline ::google::protobuf::uint64 TCrossChallengeGetBattleReportReq::ridarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetBattleReportReq.RidArr)
  return ridarr_.Get(index);
}
inline void TCrossChallengeGetBattleReportReq::set_ridarr(int index, ::google::protobuf::uint64 value) {
  ridarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGetBattleReportReq.RidArr)
}
inline void TCrossChallengeGetBattleReportReq::add_ridarr(::google::protobuf::uint64 value) {
  ridarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeGetBattleReportReq.RidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TCrossChallengeGetBattleReportReq::ridarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeGetBattleReportReq.RidArr)
  return ridarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TCrossChallengeGetBattleReportReq::mutable_ridarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeGetBattleReportReq.RidArr)
  return &ridarr_;
}

// -------------------------------------------------------------------

// TCrossChallengeGetBattleReportRsp

// repeated bytes Result = 1;
inline int TCrossChallengeGetBattleReportRsp::result_size() const {
  return result_.size();
}
inline void TCrossChallengeGetBattleReportRsp::clear_result() {
  result_.Clear();
}
inline const ::std::string& TCrossChallengeGetBattleReportRsp::result(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetBattleReportRsp.Result)
  return result_.Get(index);
}
inline ::std::string* TCrossChallengeGetBattleReportRsp::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeGetBattleReportRsp.Result)
  return result_.Mutable(index);
}
inline void TCrossChallengeGetBattleReportRsp::set_result(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGetBattleReportRsp.Result)
  result_.Mutable(index)->assign(value);
}
inline void TCrossChallengeGetBattleReportRsp::set_result(int index, const char* value) {
  result_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossChallengeGetBattleReportRsp.Result)
}
inline void TCrossChallengeGetBattleReportRsp::set_result(int index, const void* value, size_t size) {
  result_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossChallengeGetBattleReportRsp.Result)
}
inline ::std::string* TCrossChallengeGetBattleReportRsp::add_result() {
  return result_.Add();
}
inline void TCrossChallengeGetBattleReportRsp::add_result(const ::std::string& value) {
  result_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeGetBattleReportRsp.Result)
}
inline void TCrossChallengeGetBattleReportRsp::add_result(const char* value) {
  result_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TCrossChallengeGetBattleReportRsp.Result)
}
inline void TCrossChallengeGetBattleReportRsp::add_result(const void* value, size_t size) {
  result_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TCrossChallengeGetBattleReportRsp.Result)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TCrossChallengeGetBattleReportRsp::result() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeGetBattleReportRsp.Result)
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TCrossChallengeGetBattleReportRsp::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeGetBattleReportRsp.Result)
  return &result_;
}

// -------------------------------------------------------------------

// TCrossChallengeGetRankRewardReq

// optional uint32 RankId = 1;
inline bool TCrossChallengeGetRankRewardReq::has_rankid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengeGetRankRewardReq::set_has_rankid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengeGetRankRewardReq::clear_has_rankid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengeGetRankRewardReq::clear_rankid() {
  rankid_ = 0u;
  clear_has_rankid();
}
inline ::google::protobuf::uint32 TCrossChallengeGetRankRewardReq::rankid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetRankRewardReq.RankId)
  return rankid_;
}
inline void TCrossChallengeGetRankRewardReq::set_rankid(::google::protobuf::uint32 value) {
  set_has_rankid();
  rankid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGetRankRewardReq.RankId)
}

// -------------------------------------------------------------------

// TCrossChallengeGetRankRewardRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TCrossChallengeGetRankRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TCrossChallengeGetRankRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TCrossChallengeGetRankRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetRankRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TCrossChallengeGetRankRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeGetRankRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TCrossChallengeGetRankRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeGetRankRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TCrossChallengeGetRankRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeGetRankRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TCrossChallengeGetRankRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeGetRankRewardRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TCrossChallengeReportSimpleInfo

// repeated uint64 RidArr = 1;
inline int TCrossChallengeReportSimpleInfo::ridarr_size() const {
  return ridarr_.size();
}
inline void TCrossChallengeReportSimpleInfo::clear_ridarr() {
  ridarr_.Clear();
}
inline ::google::protobuf::uint64 TCrossChallengeReportSimpleInfo::ridarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeReportSimpleInfo.RidArr)
  return ridarr_.Get(index);
}
inline void TCrossChallengeReportSimpleInfo::set_ridarr(int index, ::google::protobuf::uint64 value) {
  ridarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeReportSimpleInfo.RidArr)
}
inline void TCrossChallengeReportSimpleInfo::add_ridarr(::google::protobuf::uint64 value) {
  ridarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeReportSimpleInfo.RidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TCrossChallengeReportSimpleInfo::ridarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeReportSimpleInfo.RidArr)
  return ridarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TCrossChallengeReportSimpleInfo::mutable_ridarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeReportSimpleInfo.RidArr)
  return &ridarr_;
}

// optional .pb.TCrossChallengeUserInfo EnemyUserInfo = 2;
inline bool TCrossChallengeReportSimpleInfo::has_enemyuserinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossChallengeReportSimpleInfo::set_has_enemyuserinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossChallengeReportSimpleInfo::clear_has_enemyuserinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossChallengeReportSimpleInfo::clear_enemyuserinfo() {
  if (enemyuserinfo_ != NULL) enemyuserinfo_->::pb::TCrossChallengeUserInfo::Clear();
  clear_has_enemyuserinfo();
}
inline const ::pb::TCrossChallengeUserInfo& TCrossChallengeReportSimpleInfo::enemyuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeReportSimpleInfo.EnemyUserInfo)
  return enemyuserinfo_ != NULL ? *enemyuserinfo_ : *default_instance_->enemyuserinfo_;
}
inline ::pb::TCrossChallengeUserInfo* TCrossChallengeReportSimpleInfo::mutable_enemyuserinfo() {
  set_has_enemyuserinfo();
  if (enemyuserinfo_ == NULL) enemyuserinfo_ = new ::pb::TCrossChallengeUserInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeReportSimpleInfo.EnemyUserInfo)
  return enemyuserinfo_;
}
inline ::pb::TCrossChallengeUserInfo* TCrossChallengeReportSimpleInfo::release_enemyuserinfo() {
  clear_has_enemyuserinfo();
  ::pb::TCrossChallengeUserInfo* temp = enemyuserinfo_;
  enemyuserinfo_ = NULL;
  return temp;
}
inline void TCrossChallengeReportSimpleInfo::set_allocated_enemyuserinfo(::pb::TCrossChallengeUserInfo* enemyuserinfo) {
  delete enemyuserinfo_;
  enemyuserinfo_ = enemyuserinfo;
  if (enemyuserinfo) {
    set_has_enemyuserinfo();
  } else {
    clear_has_enemyuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossChallengeReportSimpleInfo.EnemyUserInfo)
}

// optional uint32 IsWin = 3;
inline bool TCrossChallengeReportSimpleInfo::has_iswin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossChallengeReportSimpleInfo::set_has_iswin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossChallengeReportSimpleInfo::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossChallengeReportSimpleInfo::clear_iswin() {
  iswin_ = 0u;
  clear_has_iswin();
}
inline ::google::protobuf::uint32 TCrossChallengeReportSimpleInfo::iswin() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeReportSimpleInfo.IsWin)
  return iswin_;
}
inline void TCrossChallengeReportSimpleInfo::set_iswin(::google::protobuf::uint32 value) {
  set_has_iswin();
  iswin_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeReportSimpleInfo.IsWin)
}

// optional uint64 FightForce = 4;
inline bool TCrossChallengeReportSimpleInfo::has_fightforce() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossChallengeReportSimpleInfo::set_has_fightforce() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossChallengeReportSimpleInfo::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossChallengeReportSimpleInfo::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TCrossChallengeReportSimpleInfo::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeReportSimpleInfo.FightForce)
  return fightforce_;
}
inline void TCrossChallengeReportSimpleInfo::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeReportSimpleInfo.FightForce)
}

// -------------------------------------------------------------------

// TCrossChallengeGetAuditionReportArrRsp

// repeated .pb.TCrossChallengeReportSimpleInfo ReportArr = 1;
inline int TCrossChallengeGetAuditionReportArrRsp::reportarr_size() const {
  return reportarr_.size();
}
inline void TCrossChallengeGetAuditionReportArrRsp::clear_reportarr() {
  reportarr_.Clear();
}
inline const ::pb::TCrossChallengeReportSimpleInfo& TCrossChallengeGetAuditionReportArrRsp::reportarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetAuditionReportArrRsp.ReportArr)
  return reportarr_.Get(index);
}
inline ::pb::TCrossChallengeReportSimpleInfo* TCrossChallengeGetAuditionReportArrRsp::mutable_reportarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeGetAuditionReportArrRsp.ReportArr)
  return reportarr_.Mutable(index);
}
inline ::pb::TCrossChallengeReportSimpleInfo* TCrossChallengeGetAuditionReportArrRsp::add_reportarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeGetAuditionReportArrRsp.ReportArr)
  return reportarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeReportSimpleInfo >&
TCrossChallengeGetAuditionReportArrRsp::reportarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeGetAuditionReportArrRsp.ReportArr)
  return reportarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeReportSimpleInfo >*
TCrossChallengeGetAuditionReportArrRsp::mutable_reportarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeGetAuditionReportArrRsp.ReportArr)
  return &reportarr_;
}

// -------------------------------------------------------------------

// TCrossChallengeGuessInfo

// optional .pb.EChallengeStep Step = 1;
inline bool TCrossChallengeGuessInfo::has_step() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengeGuessInfo::set_has_step() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengeGuessInfo::clear_has_step() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengeGuessInfo::clear_step() {
  step_ = 1;
  clear_has_step();
}
inline ::pb::EChallengeStep TCrossChallengeGuessInfo::step() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGuessInfo.Step)
  return static_cast< ::pb::EChallengeStep >(step_);
}
inline void TCrossChallengeGuessInfo::set_step(::pb::EChallengeStep value) {
  assert(::pb::EChallengeStep_IsValid(value));
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGuessInfo.Step)
}

// repeated uint64 RidArr = 2;
inline int TCrossChallengeGuessInfo::ridarr_size() const {
  return ridarr_.size();
}
inline void TCrossChallengeGuessInfo::clear_ridarr() {
  ridarr_.Clear();
}
inline ::google::protobuf::uint64 TCrossChallengeGuessInfo::ridarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGuessInfo.RidArr)
  return ridarr_.Get(index);
}
inline void TCrossChallengeGuessInfo::set_ridarr(int index, ::google::protobuf::uint64 value) {
  ridarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGuessInfo.RidArr)
}
inline void TCrossChallengeGuessInfo::add_ridarr(::google::protobuf::uint64 value) {
  ridarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeGuessInfo.RidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TCrossChallengeGuessInfo::ridarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeGuessInfo.RidArr)
  return ridarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TCrossChallengeGuessInfo::mutable_ridarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeGuessInfo.RidArr)
  return &ridarr_;
}

// optional .pb.TCrossChallengeBattleInfo AtkInfo = 3;
inline bool TCrossChallengeGuessInfo::has_atkinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossChallengeGuessInfo::set_has_atkinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossChallengeGuessInfo::clear_has_atkinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossChallengeGuessInfo::clear_atkinfo() {
  if (atkinfo_ != NULL) atkinfo_->::pb::TCrossChallengeBattleInfo::Clear();
  clear_has_atkinfo();
}
inline const ::pb::TCrossChallengeBattleInfo& TCrossChallengeGuessInfo::atkinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGuessInfo.AtkInfo)
  return atkinfo_ != NULL ? *atkinfo_ : *default_instance_->atkinfo_;
}
inline ::pb::TCrossChallengeBattleInfo* TCrossChallengeGuessInfo::mutable_atkinfo() {
  set_has_atkinfo();
  if (atkinfo_ == NULL) atkinfo_ = new ::pb::TCrossChallengeBattleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeGuessInfo.AtkInfo)
  return atkinfo_;
}
inline ::pb::TCrossChallengeBattleInfo* TCrossChallengeGuessInfo::release_atkinfo() {
  clear_has_atkinfo();
  ::pb::TCrossChallengeBattleInfo* temp = atkinfo_;
  atkinfo_ = NULL;
  return temp;
}
inline void TCrossChallengeGuessInfo::set_allocated_atkinfo(::pb::TCrossChallengeBattleInfo* atkinfo) {
  delete atkinfo_;
  atkinfo_ = atkinfo;
  if (atkinfo) {
    set_has_atkinfo();
  } else {
    clear_has_atkinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossChallengeGuessInfo.AtkInfo)
}

// optional .pb.TCrossChallengeBattleInfo DefInfo = 4;
inline bool TCrossChallengeGuessInfo::has_definfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossChallengeGuessInfo::set_has_definfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossChallengeGuessInfo::clear_has_definfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossChallengeGuessInfo::clear_definfo() {
  if (definfo_ != NULL) definfo_->::pb::TCrossChallengeBattleInfo::Clear();
  clear_has_definfo();
}
inline const ::pb::TCrossChallengeBattleInfo& TCrossChallengeGuessInfo::definfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGuessInfo.DefInfo)
  return definfo_ != NULL ? *definfo_ : *default_instance_->definfo_;
}
inline ::pb::TCrossChallengeBattleInfo* TCrossChallengeGuessInfo::mutable_definfo() {
  set_has_definfo();
  if (definfo_ == NULL) definfo_ = new ::pb::TCrossChallengeBattleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeGuessInfo.DefInfo)
  return definfo_;
}
inline ::pb::TCrossChallengeBattleInfo* TCrossChallengeGuessInfo::release_definfo() {
  clear_has_definfo();
  ::pb::TCrossChallengeBattleInfo* temp = definfo_;
  definfo_ = NULL;
  return temp;
}
inline void TCrossChallengeGuessInfo::set_allocated_definfo(::pb::TCrossChallengeBattleInfo* definfo) {
  delete definfo_;
  definfo_ = definfo;
  if (definfo) {
    set_has_definfo();
  } else {
    clear_has_definfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossChallengeGuessInfo.DefInfo)
}

// optional .pb.TCrossChallengeUserInfo AtkUser = 5;
inline bool TCrossChallengeGuessInfo::has_atkuser() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossChallengeGuessInfo::set_has_atkuser() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossChallengeGuessInfo::clear_has_atkuser() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossChallengeGuessInfo::clear_atkuser() {
  if (atkuser_ != NULL) atkuser_->::pb::TCrossChallengeUserInfo::Clear();
  clear_has_atkuser();
}
inline const ::pb::TCrossChallengeUserInfo& TCrossChallengeGuessInfo::atkuser() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGuessInfo.AtkUser)
  return atkuser_ != NULL ? *atkuser_ : *default_instance_->atkuser_;
}
inline ::pb::TCrossChallengeUserInfo* TCrossChallengeGuessInfo::mutable_atkuser() {
  set_has_atkuser();
  if (atkuser_ == NULL) atkuser_ = new ::pb::TCrossChallengeUserInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeGuessInfo.AtkUser)
  return atkuser_;
}
inline ::pb::TCrossChallengeUserInfo* TCrossChallengeGuessInfo::release_atkuser() {
  clear_has_atkuser();
  ::pb::TCrossChallengeUserInfo* temp = atkuser_;
  atkuser_ = NULL;
  return temp;
}
inline void TCrossChallengeGuessInfo::set_allocated_atkuser(::pb::TCrossChallengeUserInfo* atkuser) {
  delete atkuser_;
  atkuser_ = atkuser;
  if (atkuser) {
    set_has_atkuser();
  } else {
    clear_has_atkuser();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossChallengeGuessInfo.AtkUser)
}

// optional .pb.TCrossChallengeUserInfo DefUser = 6;
inline bool TCrossChallengeGuessInfo::has_defuser() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCrossChallengeGuessInfo::set_has_defuser() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCrossChallengeGuessInfo::clear_has_defuser() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCrossChallengeGuessInfo::clear_defuser() {
  if (defuser_ != NULL) defuser_->::pb::TCrossChallengeUserInfo::Clear();
  clear_has_defuser();
}
inline const ::pb::TCrossChallengeUserInfo& TCrossChallengeGuessInfo::defuser() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGuessInfo.DefUser)
  return defuser_ != NULL ? *defuser_ : *default_instance_->defuser_;
}
inline ::pb::TCrossChallengeUserInfo* TCrossChallengeGuessInfo::mutable_defuser() {
  set_has_defuser();
  if (defuser_ == NULL) defuser_ = new ::pb::TCrossChallengeUserInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeGuessInfo.DefUser)
  return defuser_;
}
inline ::pb::TCrossChallengeUserInfo* TCrossChallengeGuessInfo::release_defuser() {
  clear_has_defuser();
  ::pb::TCrossChallengeUserInfo* temp = defuser_;
  defuser_ = NULL;
  return temp;
}
inline void TCrossChallengeGuessInfo::set_allocated_defuser(::pb::TCrossChallengeUserInfo* defuser) {
  delete defuser_;
  defuser_ = defuser;
  if (defuser) {
    set_has_defuser();
  } else {
    clear_has_defuser();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossChallengeGuessInfo.DefUser)
}

// optional .pb.EChallengeGuessStatus GuessStatus = 7;
inline bool TCrossChallengeGuessInfo::has_guessstatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TCrossChallengeGuessInfo::set_has_guessstatus() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TCrossChallengeGuessInfo::clear_has_guessstatus() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TCrossChallengeGuessInfo::clear_guessstatus() {
  guessstatus_ = 0;
  clear_has_guessstatus();
}
inline ::pb::EChallengeGuessStatus TCrossChallengeGuessInfo::guessstatus() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGuessInfo.GuessStatus)
  return static_cast< ::pb::EChallengeGuessStatus >(guessstatus_);
}
inline void TCrossChallengeGuessInfo::set_guessstatus(::pb::EChallengeGuessStatus value) {
  assert(::pb::EChallengeGuessStatus_IsValid(value));
  set_has_guessstatus();
  guessstatus_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGuessInfo.GuessStatus)
}

// optional uint32 AtkBetNum = 8;
inline bool TCrossChallengeGuessInfo::has_atkbetnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TCrossChallengeGuessInfo::set_has_atkbetnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TCrossChallengeGuessInfo::clear_has_atkbetnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TCrossChallengeGuessInfo::clear_atkbetnum() {
  atkbetnum_ = 0u;
  clear_has_atkbetnum();
}
inline ::google::protobuf::uint32 TCrossChallengeGuessInfo::atkbetnum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGuessInfo.AtkBetNum)
  return atkbetnum_;
}
inline void TCrossChallengeGuessInfo::set_atkbetnum(::google::protobuf::uint32 value) {
  set_has_atkbetnum();
  atkbetnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGuessInfo.AtkBetNum)
}

// optional uint32 DefBetNum = 9;
inline bool TCrossChallengeGuessInfo::has_defbetnum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TCrossChallengeGuessInfo::set_has_defbetnum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TCrossChallengeGuessInfo::clear_has_defbetnum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TCrossChallengeGuessInfo::clear_defbetnum() {
  defbetnum_ = 0u;
  clear_has_defbetnum();
}
inline ::google::protobuf::uint32 TCrossChallengeGuessInfo::defbetnum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGuessInfo.DefBetNum)
  return defbetnum_;
}
inline void TCrossChallengeGuessInfo::set_defbetnum(::google::protobuf::uint32 value) {
  set_has_defbetnum();
  defbetnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGuessInfo.DefBetNum)
}

// optional uint32 IsReward = 10;
inline bool TCrossChallengeGuessInfo::has_isreward() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TCrossChallengeGuessInfo::set_has_isreward() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TCrossChallengeGuessInfo::clear_has_isreward() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TCrossChallengeGuessInfo::clear_isreward() {
  isreward_ = 0u;
  clear_has_isreward();
}
inline ::google::protobuf::uint32 TCrossChallengeGuessInfo::isreward() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGuessInfo.IsReward)
  return isreward_;
}
inline void TCrossChallengeGuessInfo::set_isreward(::google::protobuf::uint32 value) {
  set_has_isreward();
  isreward_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGuessInfo.IsReward)
}

// -------------------------------------------------------------------

// TCrossChallengeGetGuessInfoRsp

// repeated .pb.TCrossChallengeGuessInfo GuessArr = 1;
inline int TCrossChallengeGetGuessInfoRsp::guessarr_size() const {
  return guessarr_.size();
}
inline void TCrossChallengeGetGuessInfoRsp::clear_guessarr() {
  guessarr_.Clear();
}
inline const ::pb::TCrossChallengeGuessInfo& TCrossChallengeGetGuessInfoRsp::guessarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetGuessInfoRsp.GuessArr)
  return guessarr_.Get(index);
}
inline ::pb::TCrossChallengeGuessInfo* TCrossChallengeGetGuessInfoRsp::mutable_guessarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeGetGuessInfoRsp.GuessArr)
  return guessarr_.Mutable(index);
}
inline ::pb::TCrossChallengeGuessInfo* TCrossChallengeGetGuessInfoRsp::add_guessarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeGetGuessInfoRsp.GuessArr)
  return guessarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeGuessInfo >&
TCrossChallengeGetGuessInfoRsp::guessarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeGetGuessInfoRsp.GuessArr)
  return guessarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeGuessInfo >*
TCrossChallengeGetGuessInfoRsp::mutable_guessarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeGetGuessInfoRsp.GuessArr)
  return &guessarr_;
}

// -------------------------------------------------------------------

// TCrossChallengeGetCurrentGuessInfoRsp

// optional .pb.TCrossChallengeGuessInfo GuessInfo = 1;
inline bool TCrossChallengeGetCurrentGuessInfoRsp::has_guessinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengeGetCurrentGuessInfoRsp::set_has_guessinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengeGetCurrentGuessInfoRsp::clear_has_guessinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengeGetCurrentGuessInfoRsp::clear_guessinfo() {
  if (guessinfo_ != NULL) guessinfo_->::pb::TCrossChallengeGuessInfo::Clear();
  clear_has_guessinfo();
}
inline const ::pb::TCrossChallengeGuessInfo& TCrossChallengeGetCurrentGuessInfoRsp::guessinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetCurrentGuessInfoRsp.GuessInfo)
  return guessinfo_ != NULL ? *guessinfo_ : *default_instance_->guessinfo_;
}
inline ::pb::TCrossChallengeGuessInfo* TCrossChallengeGetCurrentGuessInfoRsp::mutable_guessinfo() {
  set_has_guessinfo();
  if (guessinfo_ == NULL) guessinfo_ = new ::pb::TCrossChallengeGuessInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeGetCurrentGuessInfoRsp.GuessInfo)
  return guessinfo_;
}
inline ::pb::TCrossChallengeGuessInfo* TCrossChallengeGetCurrentGuessInfoRsp::release_guessinfo() {
  clear_has_guessinfo();
  ::pb::TCrossChallengeGuessInfo* temp = guessinfo_;
  guessinfo_ = NULL;
  return temp;
}
inline void TCrossChallengeGetCurrentGuessInfoRsp::set_allocated_guessinfo(::pb::TCrossChallengeGuessInfo* guessinfo) {
  delete guessinfo_;
  guessinfo_ = guessinfo;
  if (guessinfo) {
    set_has_guessinfo();
  } else {
    clear_has_guessinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossChallengeGetCurrentGuessInfoRsp.GuessInfo)
}

// -------------------------------------------------------------------

// TCrossChallengeGuessingReq

// optional .pb.EChallengeStep Step = 1;
inline bool TCrossChallengeGuessingReq::has_step() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengeGuessingReq::set_has_step() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengeGuessingReq::clear_has_step() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengeGuessingReq::clear_step() {
  step_ = 1;
  clear_has_step();
}
inline ::pb::EChallengeStep TCrossChallengeGuessingReq::step() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGuessingReq.Step)
  return static_cast< ::pb::EChallengeStep >(step_);
}
inline void TCrossChallengeGuessingReq::set_step(::pb::EChallengeStep value) {
  assert(::pb::EChallengeStep_IsValid(value));
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGuessingReq.Step)
}

// optional uint64 Uid = 2;
inline bool TCrossChallengeGuessingReq::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossChallengeGuessingReq::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossChallengeGuessingReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossChallengeGuessingReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCrossChallengeGuessingReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGuessingReq.Uid)
  return uid_;
}
inline void TCrossChallengeGuessingReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGuessingReq.Uid)
}

// -------------------------------------------------------------------

// TCrossChallengeGetGuessRewardReq

// optional .pb.EChallengeStep Step = 1;
inline bool TCrossChallengeGetGuessRewardReq::has_step() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengeGetGuessRewardReq::set_has_step() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengeGetGuessRewardReq::clear_has_step() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengeGetGuessRewardReq::clear_step() {
  step_ = 1;
  clear_has_step();
}
inline ::pb::EChallengeStep TCrossChallengeGetGuessRewardReq::step() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetGuessRewardReq.Step)
  return static_cast< ::pb::EChallengeStep >(step_);
}
inline void TCrossChallengeGetGuessRewardReq::set_step(::pb::EChallengeStep value) {
  assert(::pb::EChallengeStep_IsValid(value));
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGetGuessRewardReq.Step)
}

// -------------------------------------------------------------------

// TCrossChallengeGetGuessRewardRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TCrossChallengeGetGuessRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TCrossChallengeGetGuessRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TCrossChallengeGetGuessRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetGuessRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TCrossChallengeGetGuessRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeGetGuessRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TCrossChallengeGetGuessRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeGetGuessRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TCrossChallengeGetGuessRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeGetGuessRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TCrossChallengeGetGuessRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeGetGuessRewardRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TCrossChallengeGuessingRsp

// optional uint32 AtkBetNum = 1;
inline bool TCrossChallengeGuessingRsp::has_atkbetnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengeGuessingRsp::set_has_atkbetnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengeGuessingRsp::clear_has_atkbetnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengeGuessingRsp::clear_atkbetnum() {
  atkbetnum_ = 0u;
  clear_has_atkbetnum();
}
inline ::google::protobuf::uint32 TCrossChallengeGuessingRsp::atkbetnum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGuessingRsp.AtkBetNum)
  return atkbetnum_;
}
inline void TCrossChallengeGuessingRsp::set_atkbetnum(::google::protobuf::uint32 value) {
  set_has_atkbetnum();
  atkbetnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGuessingRsp.AtkBetNum)
}

// optional uint32 DefBetNum = 2;
inline bool TCrossChallengeGuessingRsp::has_defbetnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossChallengeGuessingRsp::set_has_defbetnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossChallengeGuessingRsp::clear_has_defbetnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossChallengeGuessingRsp::clear_defbetnum() {
  defbetnum_ = 0u;
  clear_has_defbetnum();
}
inline ::google::protobuf::uint32 TCrossChallengeGuessingRsp::defbetnum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGuessingRsp.DefBetNum)
  return defbetnum_;
}
inline void TCrossChallengeGuessingRsp::set_defbetnum(::google::protobuf::uint32 value) {
  set_has_defbetnum();
  defbetnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGuessingRsp.DefBetNum)
}

// -------------------------------------------------------------------

// TCrossChallengeBattleArmy

// optional uint32 Fid = 1;
inline bool TCrossChallengeBattleArmy::has_fid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengeBattleArmy::set_has_fid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengeBattleArmy::clear_has_fid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengeBattleArmy::clear_fid() {
  fid_ = 0u;
  clear_has_fid();
}
inline ::google::protobuf::uint32 TCrossChallengeBattleArmy::fid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeBattleArmy.Fid)
  return fid_;
}
inline void TCrossChallengeBattleArmy::set_fid(::google::protobuf::uint32 value) {
  set_has_fid();
  fid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeBattleArmy.Fid)
}

// optional .pb.TArmyInfo ArmyInfo = 2;
inline bool TCrossChallengeBattleArmy::has_armyinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossChallengeBattleArmy::set_has_armyinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossChallengeBattleArmy::clear_has_armyinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossChallengeBattleArmy::clear_armyinfo() {
  if (armyinfo_ != NULL) armyinfo_->::pb::TArmyInfo::Clear();
  clear_has_armyinfo();
}
inline const ::pb::TArmyInfo& TCrossChallengeBattleArmy::armyinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeBattleArmy.ArmyInfo)
  return armyinfo_ != NULL ? *armyinfo_ : *default_instance_->armyinfo_;
}
inline ::pb::TArmyInfo* TCrossChallengeBattleArmy::mutable_armyinfo() {
  set_has_armyinfo();
  if (armyinfo_ == NULL) armyinfo_ = new ::pb::TArmyInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeBattleArmy.ArmyInfo)
  return armyinfo_;
}
inline ::pb::TArmyInfo* TCrossChallengeBattleArmy::release_armyinfo() {
  clear_has_armyinfo();
  ::pb::TArmyInfo* temp = armyinfo_;
  armyinfo_ = NULL;
  return temp;
}
inline void TCrossChallengeBattleArmy::set_allocated_armyinfo(::pb::TArmyInfo* armyinfo) {
  delete armyinfo_;
  armyinfo_ = armyinfo;
  if (armyinfo) {
    set_has_armyinfo();
  } else {
    clear_has_armyinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossChallengeBattleArmy.ArmyInfo)
}

// -------------------------------------------------------------------

// TCrossChallengeBattleArmyArr

// optional uint64 Uid = 1;
inline bool TCrossChallengeBattleArmyArr::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengeBattleArmyArr::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengeBattleArmyArr::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengeBattleArmyArr::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCrossChallengeBattleArmyArr::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeBattleArmyArr.Uid)
  return uid_;
}
inline void TCrossChallengeBattleArmyArr::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeBattleArmyArr.Uid)
}

// repeated .pb.TCrossChallengeBattleArmy ArmyArr = 2;
inline int TCrossChallengeBattleArmyArr::armyarr_size() const {
  return armyarr_.size();
}
inline void TCrossChallengeBattleArmyArr::clear_armyarr() {
  armyarr_.Clear();
}
inline const ::pb::TCrossChallengeBattleArmy& TCrossChallengeBattleArmyArr::armyarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeBattleArmyArr.ArmyArr)
  return armyarr_.Get(index);
}
inline ::pb::TCrossChallengeBattleArmy* TCrossChallengeBattleArmyArr::mutable_armyarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeBattleArmyArr.ArmyArr)
  return armyarr_.Mutable(index);
}
inline ::pb::TCrossChallengeBattleArmy* TCrossChallengeBattleArmyArr::add_armyarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeBattleArmyArr.ArmyArr)
  return armyarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleArmy >&
TCrossChallengeBattleArmyArr::armyarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeBattleArmyArr.ArmyArr)
  return armyarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleArmy >*
TCrossChallengeBattleArmyArr::mutable_armyarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeBattleArmyArr.ArmyArr)
  return &armyarr_;
}

// -------------------------------------------------------------------

// TCrossChallengeGetUserArrFromArenaReq

// optional uint32 Num = 1;
inline bool TCrossChallengeGetUserArrFromArenaReq::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengeGetUserArrFromArenaReq::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengeGetUserArrFromArenaReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengeGetUserArrFromArenaReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TCrossChallengeGetUserArrFromArenaReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetUserArrFromArenaReq.Num)
  return num_;
}
inline void TCrossChallengeGetUserArrFromArenaReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGetUserArrFromArenaReq.Num)
}

// -------------------------------------------------------------------

// TCrossChallengeGetUserArrFromArenaRsp

// repeated uint64 UidArr = 1;
inline int TCrossChallengeGetUserArrFromArenaRsp::uidarr_size() const {
  return uidarr_.size();
}
inline void TCrossChallengeGetUserArrFromArenaRsp::clear_uidarr() {
  uidarr_.Clear();
}
inline ::google::protobuf::uint64 TCrossChallengeGetUserArrFromArenaRsp::uidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetUserArrFromArenaRsp.UidArr)
  return uidarr_.Get(index);
}
inline void TCrossChallengeGetUserArrFromArenaRsp::set_uidarr(int index, ::google::protobuf::uint64 value) {
  uidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGetUserArrFromArenaRsp.UidArr)
}
inline void TCrossChallengeGetUserArrFromArenaRsp::add_uidarr(::google::protobuf::uint64 value) {
  uidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeGetUserArrFromArenaRsp.UidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TCrossChallengeGetUserArrFromArenaRsp::uidarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeGetUserArrFromArenaRsp.UidArr)
  return uidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TCrossChallengeGetUserArrFromArenaRsp::mutable_uidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeGetUserArrFromArenaRsp.UidArr)
  return &uidarr_;
}

// -------------------------------------------------------------------

// TCrossChallengeGetBattleUserArrReq

// optional uint32 Step = 1;
inline bool TCrossChallengeGetBattleUserArrReq::has_step() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengeGetBattleUserArrReq::set_has_step() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengeGetBattleUserArrReq::clear_has_step() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengeGetBattleUserArrReq::clear_step() {
  step_ = 0u;
  clear_has_step();
}
inline ::google::protobuf::uint32 TCrossChallengeGetBattleUserArrReq::step() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetBattleUserArrReq.Step)
  return step_;
}
inline void TCrossChallengeGetBattleUserArrReq::set_step(::google::protobuf::uint32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGetBattleUserArrReq.Step)
}

// repeated uint64 UidArr = 2;
inline int TCrossChallengeGetBattleUserArrReq::uidarr_size() const {
  return uidarr_.size();
}
inline void TCrossChallengeGetBattleUserArrReq::clear_uidarr() {
  uidarr_.Clear();
}
inline ::google::protobuf::uint64 TCrossChallengeGetBattleUserArrReq::uidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetBattleUserArrReq.UidArr)
  return uidarr_.Get(index);
}
inline void TCrossChallengeGetBattleUserArrReq::set_uidarr(int index, ::google::protobuf::uint64 value) {
  uidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeGetBattleUserArrReq.UidArr)
}
inline void TCrossChallengeGetBattleUserArrReq::add_uidarr(::google::protobuf::uint64 value) {
  uidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeGetBattleUserArrReq.UidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TCrossChallengeGetBattleUserArrReq::uidarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeGetBattleUserArrReq.UidArr)
  return uidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TCrossChallengeGetBattleUserArrReq::mutable_uidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeGetBattleUserArrReq.UidArr)
  return &uidarr_;
}

// -------------------------------------------------------------------

// TCrossChallengeGetBattleUserArrRsp

// repeated .pb.TCrossChallengeBattleArmyArr ChallengeArr = 1;
inline int TCrossChallengeGetBattleUserArrRsp::challengearr_size() const {
  return challengearr_.size();
}
inline void TCrossChallengeGetBattleUserArrRsp::clear_challengearr() {
  challengearr_.Clear();
}
inline const ::pb::TCrossChallengeBattleArmyArr& TCrossChallengeGetBattleUserArrRsp::challengearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeGetBattleUserArrRsp.ChallengeArr)
  return challengearr_.Get(index);
}
inline ::pb::TCrossChallengeBattleArmyArr* TCrossChallengeGetBattleUserArrRsp::mutable_challengearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeGetBattleUserArrRsp.ChallengeArr)
  return challengearr_.Mutable(index);
}
inline ::pb::TCrossChallengeBattleArmyArr* TCrossChallengeGetBattleUserArrRsp::add_challengearr() {
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeGetBattleUserArrRsp.ChallengeArr)
  return challengearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleArmyArr >&
TCrossChallengeGetBattleUserArrRsp::challengearr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeGetBattleUserArrRsp.ChallengeArr)
  return challengearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleArmyArr >*
TCrossChallengeGetBattleUserArrRsp::mutable_challengearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeGetBattleUserArrRsp.ChallengeArr)
  return &challengearr_;
}

// -------------------------------------------------------------------

// TCrossChallengeAuditionSingle

// repeated uint64 RidArr = 1;
inline int TCrossChallengeAuditionSingle::ridarr_size() const {
  return ridarr_.size();
}
inline void TCrossChallengeAuditionSingle::clear_ridarr() {
  ridarr_.Clear();
}
inline ::google::protobuf::uint64 TCrossChallengeAuditionSingle::ridarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeAuditionSingle.RidArr)
  return ridarr_.Get(index);
}
inline void TCrossChallengeAuditionSingle::set_ridarr(int index, ::google::protobuf::uint64 value) {
  ridarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeAuditionSingle.RidArr)
}
inline void TCrossChallengeAuditionSingle::add_ridarr(::google::protobuf::uint64 value) {
  ridarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeAuditionSingle.RidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TCrossChallengeAuditionSingle::ridarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeAuditionSingle.RidArr)
  return ridarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TCrossChallengeAuditionSingle::mutable_ridarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeAuditionSingle.RidArr)
  return &ridarr_;
}

// optional uint64 Uid = 2;
inline bool TCrossChallengeAuditionSingle::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossChallengeAuditionSingle::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossChallengeAuditionSingle::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossChallengeAuditionSingle::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCrossChallengeAuditionSingle::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeAuditionSingle.Uid)
  return uid_;
}
inline void TCrossChallengeAuditionSingle::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeAuditionSingle.Uid)
}

// optional string ServerId = 3;
inline bool TCrossChallengeAuditionSingle::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossChallengeAuditionSingle::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossChallengeAuditionSingle::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossChallengeAuditionSingle::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TCrossChallengeAuditionSingle::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeAuditionSingle.ServerId)
  return *serverid_;
}
inline void TCrossChallengeAuditionSingle::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeAuditionSingle.ServerId)
}
inline void TCrossChallengeAuditionSingle::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossChallengeAuditionSingle.ServerId)
}
inline void TCrossChallengeAuditionSingle::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossChallengeAuditionSingle.ServerId)
}
inline ::std::string* TCrossChallengeAuditionSingle::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeAuditionSingle.ServerId)
  return serverid_;
}
inline ::std::string* TCrossChallengeAuditionSingle::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossChallengeAuditionSingle::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossChallengeAuditionSingle.ServerId)
}

// optional uint64 FightForce = 4;
inline bool TCrossChallengeAuditionSingle::has_fightforce() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossChallengeAuditionSingle::set_has_fightforce() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossChallengeAuditionSingle::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossChallengeAuditionSingle::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TCrossChallengeAuditionSingle::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeAuditionSingle.FightForce)
  return fightforce_;
}
inline void TCrossChallengeAuditionSingle::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeAuditionSingle.FightForce)
}

// optional uint32 IsWin = 5;
inline bool TCrossChallengeAuditionSingle::has_iswin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossChallengeAuditionSingle::set_has_iswin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossChallengeAuditionSingle::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossChallengeAuditionSingle::clear_iswin() {
  iswin_ = 0u;
  clear_has_iswin();
}
inline ::google::protobuf::uint32 TCrossChallengeAuditionSingle::iswin() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeAuditionSingle.IsWin)
  return iswin_;
}
inline void TCrossChallengeAuditionSingle::set_iswin(::google::protobuf::uint32 value) {
  set_has_iswin();
  iswin_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeAuditionSingle.IsWin)
}

// -------------------------------------------------------------------

// TCrossChallengeAuditionUser

// optional uint64 Uid = 1;
inline bool TCrossChallengeAuditionUser::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengeAuditionUser::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengeAuditionUser::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengeAuditionUser::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCrossChallengeAuditionUser::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeAuditionUser.Uid)
  return uid_;
}
inline void TCrossChallengeAuditionUser::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeAuditionUser.Uid)
}

// optional uint32 IsWin = 2;
inline bool TCrossChallengeAuditionUser::has_iswin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossChallengeAuditionUser::set_has_iswin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossChallengeAuditionUser::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossChallengeAuditionUser::clear_iswin() {
  iswin_ = 0u;
  clear_has_iswin();
}
inline ::google::protobuf::uint32 TCrossChallengeAuditionUser::iswin() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeAuditionUser.IsWin)
  return iswin_;
}
inline void TCrossChallengeAuditionUser::set_iswin(::google::protobuf::uint32 value) {
  set_has_iswin();
  iswin_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeAuditionUser.IsWin)
}

// repeated .pb.TCrossChallengeAuditionSingle RecordArr = 3;
inline int TCrossChallengeAuditionUser::recordarr_size() const {
  return recordarr_.size();
}
inline void TCrossChallengeAuditionUser::clear_recordarr() {
  recordarr_.Clear();
}
inline const ::pb::TCrossChallengeAuditionSingle& TCrossChallengeAuditionUser::recordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeAuditionUser.RecordArr)
  return recordarr_.Get(index);
}
inline ::pb::TCrossChallengeAuditionSingle* TCrossChallengeAuditionUser::mutable_recordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeAuditionUser.RecordArr)
  return recordarr_.Mutable(index);
}
inline ::pb::TCrossChallengeAuditionSingle* TCrossChallengeAuditionUser::add_recordarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeAuditionUser.RecordArr)
  return recordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeAuditionSingle >&
TCrossChallengeAuditionUser::recordarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeAuditionUser.RecordArr)
  return recordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeAuditionSingle >*
TCrossChallengeAuditionUser::mutable_recordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeAuditionUser.RecordArr)
  return &recordarr_;
}

// -------------------------------------------------------------------

// TCrossChallengeAuditionNotifyReq

// repeated .pb.TCrossChallengeAuditionUser UserRecordArr = 1;
inline int TCrossChallengeAuditionNotifyReq::userrecordarr_size() const {
  return userrecordarr_.size();
}
inline void TCrossChallengeAuditionNotifyReq::clear_userrecordarr() {
  userrecordarr_.Clear();
}
inline const ::pb::TCrossChallengeAuditionUser& TCrossChallengeAuditionNotifyReq::userrecordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeAuditionNotifyReq.UserRecordArr)
  return userrecordarr_.Get(index);
}
inline ::pb::TCrossChallengeAuditionUser* TCrossChallengeAuditionNotifyReq::mutable_userrecordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeAuditionNotifyReq.UserRecordArr)
  return userrecordarr_.Mutable(index);
}
inline ::pb::TCrossChallengeAuditionUser* TCrossChallengeAuditionNotifyReq::add_userrecordarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeAuditionNotifyReq.UserRecordArr)
  return userrecordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeAuditionUser >&
TCrossChallengeAuditionNotifyReq::userrecordarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeAuditionNotifyReq.UserRecordArr)
  return userrecordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeAuditionUser >*
TCrossChallengeAuditionNotifyReq::mutable_userrecordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeAuditionNotifyReq.UserRecordArr)
  return &userrecordarr_;
}

// -------------------------------------------------------------------

// TCrossChallengeBattleUser

// optional uint64 Uid = 1;
inline bool TCrossChallengeBattleUser::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengeBattleUser::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengeBattleUser::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengeBattleUser::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCrossChallengeBattleUser::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeBattleUser.Uid)
  return uid_;
}
inline void TCrossChallengeBattleUser::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeBattleUser.Uid)
}

// optional uint32 IsWin = 2;
inline bool TCrossChallengeBattleUser::has_iswin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossChallengeBattleUser::set_has_iswin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossChallengeBattleUser::clear_has_iswin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossChallengeBattleUser::clear_iswin() {
  iswin_ = 0u;
  clear_has_iswin();
}
inline ::google::protobuf::uint32 TCrossChallengeBattleUser::iswin() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeBattleUser.IsWin)
  return iswin_;
}
inline void TCrossChallengeBattleUser::set_iswin(::google::protobuf::uint32 value) {
  set_has_iswin();
  iswin_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeBattleUser.IsWin)
}

// repeated uint64 RidArr = 3;
inline int TCrossChallengeBattleUser::ridarr_size() const {
  return ridarr_.size();
}
inline void TCrossChallengeBattleUser::clear_ridarr() {
  ridarr_.Clear();
}
inline ::google::protobuf::uint64 TCrossChallengeBattleUser::ridarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeBattleUser.RidArr)
  return ridarr_.Get(index);
}
inline void TCrossChallengeBattleUser::set_ridarr(int index, ::google::protobuf::uint64 value) {
  ridarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeBattleUser.RidArr)
}
inline void TCrossChallengeBattleUser::add_ridarr(::google::protobuf::uint64 value) {
  ridarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeBattleUser.RidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TCrossChallengeBattleUser::ridarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeBattleUser.RidArr)
  return ridarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TCrossChallengeBattleUser::mutable_ridarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeBattleUser.RidArr)
  return &ridarr_;
}

// -------------------------------------------------------------------

// TCrossChallengeStepBattleNotifyReq

// optional .pb.EChallengeStep Step = 1;
inline bool TCrossChallengeStepBattleNotifyReq::has_step() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossChallengeStepBattleNotifyReq::set_has_step() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossChallengeStepBattleNotifyReq::clear_has_step() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossChallengeStepBattleNotifyReq::clear_step() {
  step_ = 1;
  clear_has_step();
}
inline ::pb::EChallengeStep TCrossChallengeStepBattleNotifyReq::step() const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeStepBattleNotifyReq.Step)
  return static_cast< ::pb::EChallengeStep >(step_);
}
inline void TCrossChallengeStepBattleNotifyReq::set_step(::pb::EChallengeStep value) {
  assert(::pb::EChallengeStep_IsValid(value));
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossChallengeStepBattleNotifyReq.Step)
}

// repeated .pb.TCrossChallengeBattleUser UserRecordArr = 2;
inline int TCrossChallengeStepBattleNotifyReq::userrecordarr_size() const {
  return userrecordarr_.size();
}
inline void TCrossChallengeStepBattleNotifyReq::clear_userrecordarr() {
  userrecordarr_.Clear();
}
inline const ::pb::TCrossChallengeBattleUser& TCrossChallengeStepBattleNotifyReq::userrecordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossChallengeStepBattleNotifyReq.UserRecordArr)
  return userrecordarr_.Get(index);
}
inline ::pb::TCrossChallengeBattleUser* TCrossChallengeStepBattleNotifyReq::mutable_userrecordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossChallengeStepBattleNotifyReq.UserRecordArr)
  return userrecordarr_.Mutable(index);
}
inline ::pb::TCrossChallengeBattleUser* TCrossChallengeStepBattleNotifyReq::add_userrecordarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossChallengeStepBattleNotifyReq.UserRecordArr)
  return userrecordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleUser >&
TCrossChallengeStepBattleNotifyReq::userrecordarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossChallengeStepBattleNotifyReq.UserRecordArr)
  return userrecordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossChallengeBattleUser >*
TCrossChallengeStepBattleNotifyReq::mutable_userrecordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossChallengeStepBattleNotifyReq.UserRecordArr)
  return &userrecordarr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EChallengeStep> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EChallengeStep>() {
  return ::pb::EChallengeStep_descriptor();
}
template <> struct is_proto_enum< ::pb::EChallengeBattleStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EChallengeBattleStatus>() {
  return ::pb::EChallengeBattleStatus_descriptor();
}
template <> struct is_proto_enum< ::pb::EChallengeGuessStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EChallengeGuessStatus>() {
  return ::pb::EChallengeGuessStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fCrossChallenge_2eproto__INCLUDED
